
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f78  08015b78  08015b78  00016b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016af0  08016af0  0001845c  2**0
                  CONTENTS
  4 .ARM          00000008  08016af0  08016af0  00017af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016af8  08016af8  0001845c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016af8  08016af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016afc  08016afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000045c  20000000  08016b00  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011ad0  20000460  08016f5c  00018460  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011f30  08016f5c  00018f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001845c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee64  00000000  00000000  0001848c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076c9  00000000  00000000  000472f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  0004e9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d3e  00000000  00000000  00050fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c953  00000000  00000000  00052cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035bd4  00000000  00000000  0007f651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55b8  00000000  00000000  000b5225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a7dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b344  00000000  00000000  0019a820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a5b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015b60 	.word	0x08015b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	08015b60 	.word	0x08015b60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9be 	b.w	8000f7c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	468e      	mov	lr, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14a      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d962      	bls.n	8000d60 <__udivmoddi4+0xdc>
 8000c9a:	fab2 f682 	clz	r6, r2
 8000c9e:	b14e      	cbz	r6, 8000cb4 <__udivmoddi4+0x30>
 8000ca0:	f1c6 0320 	rsb	r3, r6, #32
 8000ca4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	40b7      	lsls	r7, r6
 8000cae:	ea43 0808 	orr.w	r8, r3, r8
 8000cb2:	40b4      	lsls	r4, r6
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f fc87 	uxth.w	ip, r7
 8000cbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc0:	0c23      	lsrs	r3, r4, #16
 8000cc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fb01 f20c 	mul.w	r2, r1, ip
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x62>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd8:	f080 80ea 	bcs.w	8000eb0 <__udivmoddi4+0x22c>
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f240 80e7 	bls.w	8000eb0 <__udivmoddi4+0x22c>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	443b      	add	r3, r7
 8000ce6:	1a9a      	subs	r2, r3, r2
 8000ce8:	b2a3      	uxth	r3, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfa:	459c      	cmp	ip, r3
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x8e>
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	f080 80d6 	bcs.w	8000eb4 <__udivmoddi4+0x230>
 8000d08:	459c      	cmp	ip, r3
 8000d0a:	f240 80d3 	bls.w	8000eb4 <__udivmoddi4+0x230>
 8000d0e:	443b      	add	r3, r7
 8000d10:	3802      	subs	r0, #2
 8000d12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d16:	eba3 030c 	sub.w	r3, r3, ip
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	b11d      	cbz	r5, 8000d26 <__udivmoddi4+0xa2>
 8000d1e:	40f3      	lsrs	r3, r6
 8000d20:	2200      	movs	r2, #0
 8000d22:	e9c5 3200 	strd	r3, r2, [r5]
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d905      	bls.n	8000d3a <__udivmoddi4+0xb6>
 8000d2e:	b10d      	cbz	r5, 8000d34 <__udivmoddi4+0xb0>
 8000d30:	e9c5 0100 	strd	r0, r1, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4608      	mov	r0, r1
 8000d38:	e7f5      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d3a:	fab3 f183 	clz	r1, r3
 8000d3e:	2900      	cmp	r1, #0
 8000d40:	d146      	bne.n	8000dd0 <__udivmoddi4+0x14c>
 8000d42:	4573      	cmp	r3, lr
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xc8>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 8105 	bhi.w	8000f56 <__udivmoddi4+0x2d2>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4690      	mov	r8, r2
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e5      	beq.n	8000d26 <__udivmoddi4+0xa2>
 8000d5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d5e:	e7e2      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	f000 8090 	beq.w	8000e86 <__udivmoddi4+0x202>
 8000d66:	fab2 f682 	clz	r6, r2
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	f040 80a4 	bne.w	8000eb8 <__udivmoddi4+0x234>
 8000d70:	1a8a      	subs	r2, r1, r2
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x11e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x11c>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f200 80e0 	bhi.w	8000f60 <__udivmoddi4+0x2dc>
 8000da0:	46c4      	mov	ip, r8
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000da8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db0:	fb02 f404 	mul.w	r4, r2, r4
 8000db4:	429c      	cmp	r4, r3
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x144>
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x142>
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	f200 80ca 	bhi.w	8000f5a <__udivmoddi4+0x2d6>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0x98>
 8000dd0:	f1c1 0620 	rsb	r6, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	fa0e f401 	lsl.w	r4, lr, r1
 8000de0:	fa20 f306 	lsr.w	r3, r0, r6
 8000de4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000de8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	fa1f fc87 	uxth.w	ip, r7
 8000df6:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x1a0>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e16:	f080 809c 	bcs.w	8000f52 <__udivmoddi4+0x2ce>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f240 8099 	bls.w	8000f52 <__udivmoddi4+0x2ce>
 8000e20:	3802      	subs	r0, #2
 8000e22:	443c      	add	r4, r7
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	fa1f fe83 	uxth.w	lr, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3c:	45a4      	cmp	ip, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1ce>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e46:	f080 8082 	bcs.w	8000f4e <__udivmoddi4+0x2ca>
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d97f      	bls.n	8000f4e <__udivmoddi4+0x2ca>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e5e:	4564      	cmp	r4, ip
 8000e60:	4673      	mov	r3, lr
 8000e62:	46e1      	mov	r9, ip
 8000e64:	d362      	bcc.n	8000f2c <__udivmoddi4+0x2a8>
 8000e66:	d05f      	beq.n	8000f28 <__udivmoddi4+0x2a4>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x1fe>
 8000e6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e72:	fa04 f606 	lsl.w	r6, r4, r6
 8000e76:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7a:	431e      	orrs	r6, r3
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e82:	2100      	movs	r1, #0
 8000e84:	e74f      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000e86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8a:	0c01      	lsrs	r1, r0, #16
 8000e8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e90:	b280      	uxth	r0, r0
 8000e92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e96:	463b      	mov	r3, r7
 8000e98:	4638      	mov	r0, r7
 8000e9a:	463c      	mov	r4, r7
 8000e9c:	46b8      	mov	r8, r7
 8000e9e:	46be      	mov	lr, r7
 8000ea0:	2620      	movs	r6, #32
 8000ea2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ea6:	eba2 0208 	sub.w	r2, r2, r8
 8000eaa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eae:	e766      	b.n	8000d7e <__udivmoddi4+0xfa>
 8000eb0:	4601      	mov	r1, r0
 8000eb2:	e718      	b.n	8000ce6 <__udivmoddi4+0x62>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e72c      	b.n	8000d12 <__udivmoddi4+0x8e>
 8000eb8:	f1c6 0220 	rsb	r2, r6, #32
 8000ebc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec0:	40b7      	lsls	r7, r6
 8000ec2:	40b1      	lsls	r1, r6
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed2:	b2bc      	uxth	r4, r7
 8000ed4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb08 f904 	mul.w	r9, r8, r4
 8000ee2:	40b0      	lsls	r0, r6
 8000ee4:	4589      	cmp	r9, r1
 8000ee6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eea:	b280      	uxth	r0, r0
 8000eec:	d93e      	bls.n	8000f6c <__udivmoddi4+0x2e8>
 8000eee:	1879      	adds	r1, r7, r1
 8000ef0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef4:	d201      	bcs.n	8000efa <__udivmoddi4+0x276>
 8000ef6:	4589      	cmp	r9, r1
 8000ef8:	d81f      	bhi.n	8000f3a <__udivmoddi4+0x2b6>
 8000efa:	eba1 0109 	sub.w	r1, r1, r9
 8000efe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f02:	fb09 f804 	mul.w	r8, r9, r4
 8000f06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d229      	bcs.n	8000f68 <__udivmoddi4+0x2e4>
 8000f14:	18ba      	adds	r2, r7, r2
 8000f16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1a:	d2c4      	bcs.n	8000ea6 <__udivmoddi4+0x222>
 8000f1c:	4542      	cmp	r2, r8
 8000f1e:	d2c2      	bcs.n	8000ea6 <__udivmoddi4+0x222>
 8000f20:	f1a9 0102 	sub.w	r1, r9, #2
 8000f24:	443a      	add	r2, r7
 8000f26:	e7be      	b.n	8000ea6 <__udivmoddi4+0x222>
 8000f28:	45f0      	cmp	r8, lr
 8000f2a:	d29d      	bcs.n	8000e68 <__udivmoddi4+0x1e4>
 8000f2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f34:	3801      	subs	r0, #1
 8000f36:	46e1      	mov	r9, ip
 8000f38:	e796      	b.n	8000e68 <__udivmoddi4+0x1e4>
 8000f3a:	eba7 0909 	sub.w	r9, r7, r9
 8000f3e:	4449      	add	r1, r9
 8000f40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f48:	fb09 f804 	mul.w	r8, r9, r4
 8000f4c:	e7db      	b.n	8000f06 <__udivmoddi4+0x282>
 8000f4e:	4673      	mov	r3, lr
 8000f50:	e77f      	b.n	8000e52 <__udivmoddi4+0x1ce>
 8000f52:	4650      	mov	r0, sl
 8000f54:	e766      	b.n	8000e24 <__udivmoddi4+0x1a0>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e6fd      	b.n	8000d56 <__udivmoddi4+0xd2>
 8000f5a:	443b      	add	r3, r7
 8000f5c:	3a02      	subs	r2, #2
 8000f5e:	e733      	b.n	8000dc8 <__udivmoddi4+0x144>
 8000f60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f64:	443b      	add	r3, r7
 8000f66:	e71c      	b.n	8000da2 <__udivmoddi4+0x11e>
 8000f68:	4649      	mov	r1, r9
 8000f6a:	e79c      	b.n	8000ea6 <__udivmoddi4+0x222>
 8000f6c:	eba1 0109 	sub.w	r1, r1, r9
 8000f70:	46c4      	mov	ip, r8
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	e7c4      	b.n	8000f06 <__udivmoddi4+0x282>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <toggle_led+0x30>)
 8000f90:	f003 f94d 	bl	800422e <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f94:	2014      	movs	r0, #20
 8000f96:	f00b fed5 	bl	800cd44 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <toggle_led+0x30>)
 8000fa2:	f003 f944 	bl	800422e <HAL_GPIO_TogglePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000fbc:	4813      	ldr	r0, [pc, #76]	@ (800100c <ARM_keys_IRQ+0x58>)
 8000fbe:	f001 fdff 	bl	8002bc0 <UART_puts>
 8000fc2:	4813      	ldr	r0, [pc, #76]	@ (8001010 <ARM_keys_IRQ+0x5c>)
 8000fc4:	f001 fdfc 	bl	8002bc0 <UART_puts>
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <ARM_keys_IRQ+0x60>)
 8000fca:	f001 fdf9 	bl	8002bc0 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000fce:	4812      	ldr	r0, [pc, #72]	@ (8001018 <ARM_keys_IRQ+0x64>)
 8000fd0:	f00e f824 	bl	800f01c <xTaskGetHandle>
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fdc:	480f      	ldr	r0, [pc, #60]	@ (800101c <ARM_keys_IRQ+0x68>)
 8000fde:	f000 fcbb 	bl	8001958 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <ARM_keys_IRQ+0x6c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ff4:	f00c f876 	bl	800d0e4 <xEventGroupWaitBits>
 8000ff8:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f00e ff3b 	bl	800fe7c <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8001006:	bf00      	nop
 8001008:	e7eb      	b.n	8000fe2 <ARM_keys_IRQ+0x2e>
 800100a:	bf00      	nop
 800100c:	08015b78 	.word	0x08015b78
 8001010:	080165b4 	.word	0x080165b4
 8001014:	08015b7c 	.word	0x08015b7c
 8001018:	08015b88 	.word	0x08015b88
 800101c:	08015b98 	.word	0x08015b98
 8001020:	20000b54 	.word	0x20000b54

08001024 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	2000      	movs	r0, #0
 800103a:	f00e febf 	bl	800fdbc <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <ARM_keys_task+0xc4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 31ff 	mov.w	r1, #4294967295
 8001046:	4618      	mov	r0, r3
 8001048:	f00c fe9c 	bl	800dd84 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fd69 	bl	8002b28 <LED_put>
	    BUZZER_put (500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f001 fa85 	bl	8002568 <BUZZER_put>
		osDelay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001062:	f00b fe6f 	bl	800cd44 <osDelay>

		UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001066:	4821      	ldr	r0, [pc, #132]	@ (80010ec <ARM_keys_task+0xc8>)
 8001068:	f001 fdaa 	bl	8002bc0 <UART_puts>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fdc2 	bl	8002bf8 <UART_putint>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <ARM_keys_task+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <ARM_keys_task+0x6a>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001080:	481a      	ldr	r0, [pc, #104]	@ (80010ec <ARM_keys_task+0xc8>)
 8001082:	f001 fd9d 	bl	8002bc0 <UART_puts>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fdb5 	bl	8002bf8 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <ARM_keys_task+0xc4>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	f00c fbf2 	bl	800d880 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e015      	b.n	80010ce <ARM_keys_task+0xaa>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <ARM_keys_task+0x96>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <ARM_keys_task+0x90>
 80010ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010b2:	e004      	b.n	80010be <ARM_keys_task+0x9a>
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	e001      	b.n	80010be <ARM_keys_task+0x9a>
 80010ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010be:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff5c 	bl	8000f80 <toggle_led>
		for (i=0; i<3; i++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	dde6      	ble.n	80010a2 <ARM_keys_task+0x7e>
	  	}
     	taskYIELD(); // done, force context switch
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <ARM_keys_task+0xd0>)
 80010d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 80010e4:	e7a2      	b.n	800102c <ARM_keys_task+0x8>
 80010e6:	bf00      	nop
 80010e8:	20000b50 	.word	0x20000b50
 80010ec:	08015ba8 	.word	0x08015ba8
 80010f0:	20000b44 	.word	0x20000b44
 80010f4:	e000ed04 	.word	0xe000ed04

080010f8 <GPS_parser>:

double convert_decimal_degrees(char *nmea_coordinate, char* ns);
double calc_average(GPS_decimal_degrees_t *samples, int count, char coord);

void GPS_parser(void *argument)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	osDelay(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f00b fe1f 	bl	800cd44 <osDelay>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001106:	485f      	ldr	r0, [pc, #380]	@ (8001284 <GPS_parser+0x18c>)
 8001108:	f001 fd5a 	bl	8002bc0 <UART_puts>
 800110c:	485e      	ldr	r0, [pc, #376]	@ (8001288 <GPS_parser+0x190>)
 800110e:	f001 fd57 	bl	8002bc0 <UART_puts>

	while (TRUE)
	{
		// Check if GPSdata mutex is available
		if(xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001112:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <GPS_parser+0x194>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f00c fe32 	bl	800dd84 <xQueueSemaphoreTake>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	f040 80a8 	bne.w	8001278 <GPS_parser+0x180>
		{
			memcpy(&gnrmc_readercopy, (const void*)readerBuffer, sizeof(GNRMC)); // copy data from readerBuffer to local gnrmc_readercopy
 8001128:	4b59      	ldr	r3, [pc, #356]	@ (8001290 <GPS_parser+0x198>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a59      	ldr	r2, [pc, #356]	@ (8001294 <GPS_parser+0x19c>)
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	2347      	movs	r3, #71	@ 0x47
 8001134:	461a      	mov	r2, r3
 8001136:	f012 f932 	bl	801339e <memcpy>

			if(samplecount < samples_size && gnrmc_readercopy.status == 'A') // Check if we have space for more samples
 800113a:	4b57      	ldr	r3, [pc, #348]	@ (8001298 <GPS_parser+0x1a0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b63      	cmp	r3, #99	@ 0x63
 8001140:	dc53      	bgt.n	80011ea <GPS_parser+0xf2>
 8001142:	4b54      	ldr	r3, [pc, #336]	@ (8001294 <GPS_parser+0x19c>)
 8001144:	7c5b      	ldrb	r3, [r3, #17]
 8001146:	2b41      	cmp	r3, #65	@ 0x41
 8001148:	d14f      	bne.n	80011ea <GPS_parser+0xf2>
			{
				GPS_samples[samplecount].latitude = convert_decimal_degrees(gnrmc_readercopy.latitude, &gnrmc_readercopy.NS_ind);
 800114a:	4b53      	ldr	r3, [pc, #332]	@ (8001298 <GPS_parser+0x1a0>)
 800114c:	681c      	ldr	r4, [r3, #0]
 800114e:	4953      	ldr	r1, [pc, #332]	@ (800129c <GPS_parser+0x1a4>)
 8001150:	4853      	ldr	r0, [pc, #332]	@ (80012a0 <GPS_parser+0x1a8>)
 8001152:	f000 f8bf 	bl	80012d4 <convert_decimal_degrees>
 8001156:	eeb0 7a40 	vmov.f32	s14, s0
 800115a:	eef0 7a60 	vmov.f32	s15, s1
 800115e:	4a51      	ldr	r2, [pc, #324]	@ (80012a4 <GPS_parser+0x1ac>)
 8001160:	0123      	lsls	r3, r4, #4
 8001162:	4413      	add	r3, r2
 8001164:	ed83 7b00 	vstr	d7, [r3]
				GPS_samples[samplecount].longitude = convert_decimal_degrees(gnrmc_readercopy.longitude, &gnrmc_readercopy.EW_ind);
 8001168:	4b4b      	ldr	r3, [pc, #300]	@ (8001298 <GPS_parser+0x1a0>)
 800116a:	681c      	ldr	r4, [r3, #0]
 800116c:	494e      	ldr	r1, [pc, #312]	@ (80012a8 <GPS_parser+0x1b0>)
 800116e:	484f      	ldr	r0, [pc, #316]	@ (80012ac <GPS_parser+0x1b4>)
 8001170:	f000 f8b0 	bl	80012d4 <convert_decimal_degrees>
 8001174:	eeb0 7a40 	vmov.f32	s14, s0
 8001178:	eef0 7a60 	vmov.f32	s15, s1
 800117c:	4a49      	ldr	r2, [pc, #292]	@ (80012a4 <GPS_parser+0x1ac>)
 800117e:	0123      	lsls	r3, r4, #4
 8001180:	4413      	add	r3, r2
 8001182:	3308      	adds	r3, #8
 8001184:	ed83 7b00 	vstr	d7, [r3]


				// Print the saved GPS sample to UART
				UART_puts("\r\nGPS sample added: ");
 8001188:	4849      	ldr	r0, [pc, #292]	@ (80012b0 <GPS_parser+0x1b8>)
 800118a:	f001 fd19 	bl	8002bc0 <UART_puts>
				UART_putint(samplecount);
 800118e:	4b42      	ldr	r3, [pc, #264]	@ (8001298 <GPS_parser+0x1a0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fd30 	bl	8002bf8 <UART_putint>
				UART_puts("	Lat: ");
 8001198:	4846      	ldr	r0, [pc, #280]	@ (80012b4 <GPS_parser+0x1bc>)
 800119a:	f001 fd11 	bl	8002bc0 <UART_puts>
				sprintf(savedLatitude, "%.6f", GPS_samples[samplecount].latitude);
 800119e:	4b3e      	ldr	r3, [pc, #248]	@ (8001298 <GPS_parser+0x1a0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a40      	ldr	r2, [pc, #256]	@ (80012a4 <GPS_parser+0x1ac>)
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	4942      	ldr	r1, [pc, #264]	@ (80012b8 <GPS_parser+0x1c0>)
 80011ae:	4843      	ldr	r0, [pc, #268]	@ (80012bc <GPS_parser+0x1c4>)
 80011b0:	f011 ff06 	bl	8012fc0 <siprintf>
				UART_puts(savedLatitude);
 80011b4:	4841      	ldr	r0, [pc, #260]	@ (80012bc <GPS_parser+0x1c4>)
 80011b6:	f001 fd03 	bl	8002bc0 <UART_puts>

				UART_puts(" Long: ");
 80011ba:	4841      	ldr	r0, [pc, #260]	@ (80012c0 <GPS_parser+0x1c8>)
 80011bc:	f001 fd00 	bl	8002bc0 <UART_puts>
				sprintf(savedLongitude, "%.6f", GPS_samples[samplecount].longitude);
 80011c0:	4b35      	ldr	r3, [pc, #212]	@ (8001298 <GPS_parser+0x1a0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a37      	ldr	r2, [pc, #220]	@ (80012a4 <GPS_parser+0x1ac>)
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	3308      	adds	r3, #8
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	4939      	ldr	r1, [pc, #228]	@ (80012b8 <GPS_parser+0x1c0>)
 80011d2:	483c      	ldr	r0, [pc, #240]	@ (80012c4 <GPS_parser+0x1cc>)
 80011d4:	f011 fef4 	bl	8012fc0 <siprintf>
				UART_puts(savedLongitude);
 80011d8:	483a      	ldr	r0, [pc, #232]	@ (80012c4 <GPS_parser+0x1cc>)
 80011da:	f001 fcf1 	bl	8002bc0 <UART_puts>

				samplecount++;
 80011de:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <GPS_parser+0x1a0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001298 <GPS_parser+0x1a0>)
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e03f      	b.n	800126a <GPS_parser+0x172>
			}
			else if (samplecount >= samples_size) // If we have enough samples, calculate the average
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <GPS_parser+0x1a0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b63      	cmp	r3, #99	@ 0x63
 80011f0:	dd3b      	ble.n	800126a <GPS_parser+0x172>
			{
				GPS_average_pos.latitude = calc_average(GPS_samples, samplecount, 'L');
 80011f2:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <GPS_parser+0x1a0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	224c      	movs	r2, #76	@ 0x4c
 80011f8:	4619      	mov	r1, r3
 80011fa:	482a      	ldr	r0, [pc, #168]	@ (80012a4 <GPS_parser+0x1ac>)
 80011fc:	f000 f8ca 	bl	8001394 <calc_average>
 8001200:	eeb0 7a40 	vmov.f32	s14, s0
 8001204:	eef0 7a60 	vmov.f32	s15, s1
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <GPS_parser+0x1d0>)
 800120a:	ed83 7b00 	vstr	d7, [r3]
				GPS_average_pos.longitude = calc_average(GPS_samples, samplecount, 'G');
 800120e:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <GPS_parser+0x1a0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2247      	movs	r2, #71	@ 0x47
 8001214:	4619      	mov	r1, r3
 8001216:	4823      	ldr	r0, [pc, #140]	@ (80012a4 <GPS_parser+0x1ac>)
 8001218:	f000 f8bc 	bl	8001394 <calc_average>
 800121c:	eeb0 7a40 	vmov.f32	s14, s0
 8001220:	eef0 7a60 	vmov.f32	s15, s1
 8001224:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <GPS_parser+0x1d0>)
 8001226:	ed83 7b02 	vstr	d7, [r3, #8]

				// Print the average GPS position to UART
				UART_puts("\r\nAverage GPS position: ");
 800122a:	4828      	ldr	r0, [pc, #160]	@ (80012cc <GPS_parser+0x1d4>)
 800122c:	f001 fcc8 	bl	8002bc0 <UART_puts>
				UART_puts("Lat: ");
 8001230:	4827      	ldr	r0, [pc, #156]	@ (80012d0 <GPS_parser+0x1d8>)
 8001232:	f001 fcc5 	bl	8002bc0 <UART_puts>
				sprintf(savedLatitude, "%.6f", GPS_average_pos.latitude);
 8001236:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <GPS_parser+0x1d0>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	491e      	ldr	r1, [pc, #120]	@ (80012b8 <GPS_parser+0x1c0>)
 800123e:	481f      	ldr	r0, [pc, #124]	@ (80012bc <GPS_parser+0x1c4>)
 8001240:	f011 febe 	bl	8012fc0 <siprintf>
				UART_puts(savedLatitude);
 8001244:	481d      	ldr	r0, [pc, #116]	@ (80012bc <GPS_parser+0x1c4>)
 8001246:	f001 fcbb 	bl	8002bc0 <UART_puts>

				UART_puts(" Long: ");
 800124a:	481d      	ldr	r0, [pc, #116]	@ (80012c0 <GPS_parser+0x1c8>)
 800124c:	f001 fcb8 	bl	8002bc0 <UART_puts>
				sprintf(savedLongitude, "%.6f", GPS_average_pos.longitude);
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <GPS_parser+0x1d0>)
 8001252:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001256:	4918      	ldr	r1, [pc, #96]	@ (80012b8 <GPS_parser+0x1c0>)
 8001258:	481a      	ldr	r0, [pc, #104]	@ (80012c4 <GPS_parser+0x1cc>)
 800125a:	f011 feb1 	bl	8012fc0 <siprintf>
				UART_puts(savedLongitude);
 800125e:	4819      	ldr	r0, [pc, #100]	@ (80012c4 <GPS_parser+0x1cc>)
 8001260:	f001 fcae 	bl	8002bc0 <UART_puts>

				// Reset sample count for next averaging
				samplecount = 0;
 8001264:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <GPS_parser+0x1a0>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
			}



			xSemaphoreGive(hGPS_Mutex); // Release the mutex
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <GPS_parser+0x194>)
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	f00c fb04 	bl	800d880 <xQueueGenericSend>
		}

		osDelay(1000);
 8001278:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800127c:	f00b fd62 	bl	800cd44 <osDelay>
		if(xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001280:	e747      	b.n	8001112 <GPS_parser+0x1a>
 8001282:	bf00      	nop
 8001284:	080165c4 	.word	0x080165c4
 8001288:	08015bc8 	.word	0x08015bc8
 800128c:	20000b5c 	.word	0x20000b5c
 8001290:	2000024c 	.word	0x2000024c
 8001294:	2000047c 	.word	0x2000047c
 8001298:	20000b18 	.word	0x20000b18
 800129c:	20000498 	.word	0x20000498
 80012a0:	2000048e 	.word	0x2000048e
 80012a4:	200004c8 	.word	0x200004c8
 80012a8:	200004a3 	.word	0x200004a3
 80012ac:	20000499 	.word	0x20000499
 80012b0:	08015bd4 	.word	0x08015bd4
 80012b4:	08015bec 	.word	0x08015bec
 80012b8:	08015bf4 	.word	0x08015bf4
 80012bc:	20000b1c 	.word	0x20000b1c
 80012c0:	08015bfc 	.word	0x08015bfc
 80012c4:	20000b30 	.word	0x20000b30
 80012c8:	20000b08 	.word	0x20000b08
 80012cc:	08015c04 	.word	0x08015c04
 80012d0:	08015c20 	.word	0x08015c20

080012d4 <convert_decimal_degrees>:
		}
	}
}

double convert_decimal_degrees(char *nmea_coordinate, char* ns)
{
 80012d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d8:	b08a      	sub	sp, #40	@ 0x28
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	double raw = atof(nmea_coordinate); // Convert string to double
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f010 f9fd 	bl	80116e0 <atof>
 80012e6:	ed87 0b06 	vstr	d0, [r7, #24]

	int degrees = (int)(raw / 100); // Get the degrees part
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <convert_decimal_degrees+0xb8>)
 80012f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012f4:	f7ff faaa 	bl	800084c <__aeabi_ddiv>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc2a 	bl	8000b58 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	617b      	str	r3, [r7, #20]
	double minutes = raw - (degrees * 100); // Get the minutes part
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	2264      	movs	r2, #100	@ 0x64
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f907 	bl	8000524 <__aeabi_i2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800131e:	f7fe ffb3 	bl	8000288 <__aeabi_dsub>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double decimal_degrees = degrees + (minutes / 60.0); // Convert to decimal degrees
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff f8fa 	bl	8000524 <__aeabi_i2d>
 8001330:	4680      	mov	r8, r0
 8001332:	4689      	mov	r9, r1
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <convert_decimal_degrees+0xbc>)
 800133a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800133e:	f7ff fa85 	bl	800084c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4640      	mov	r0, r8
 8001348:	4649      	mov	r1, r9
 800134a:	f7fe ff9f 	bl	800028c <__adddf3>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (ns[0] == 'S' || ns[0] == 'W') // Check if the coordinate is South or West
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b53      	cmp	r3, #83	@ 0x53
 800135c:	d003      	beq.n	8001366 <convert_decimal_degrees+0x92>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b57      	cmp	r3, #87	@ 0x57
 8001364:	d105      	bne.n	8001372 <convert_decimal_degrees+0x9e>
	{
		decimal_degrees = -decimal_degrees; // Make it negative
 8001366:	6a3c      	ldr	r4, [r7, #32]
 8001368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800136e:	e9c7 4508 	strd	r4, r5, [r7, #32]
	}

	return decimal_degrees; // Return the converted value
 8001372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001376:	ec43 2b17 	vmov	d7, r2, r3

}
 800137a:	eeb0 0a47 	vmov.f32	s0, s14
 800137e:	eef0 0a67 	vmov.f32	s1, s15
 8001382:	3728      	adds	r7, #40	@ 0x28
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	40590000 	.word	0x40590000
 8001390:	404e0000 	.word	0x404e0000

08001394 <calc_average>:

double calc_average(GPS_decimal_degrees_t *samples, int count, char coord)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4613      	mov	r3, r2
 80013a0:	71fb      	strb	r3, [r7, #7]
	double sum = 0.0;
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for (int i = 0; i < count; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e025      	b.n	8001400 <calc_average+0x6c>
	{
		if (coord == 'L') // Latitude
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b4c      	cmp	r3, #76	@ 0x4c
 80013b8:	d10e      	bne.n	80013d8 <calc_average+0x44>
		{
			sum += samples[i].latitude;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ca:	f7fe ff5f 	bl	800028c <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013d6:	e010      	b.n	80013fa <calc_average+0x66>
		}
		else if (coord == 'G') // Longitude
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b47      	cmp	r3, #71	@ 0x47
 80013dc:	d10d      	bne.n	80013fa <calc_average+0x66>
		{
			sum += samples[i].longitude;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4413      	add	r3, r2
 80013e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ee:	f7fe ff4d 	bl	800028c <__adddf3>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < count; i++)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbd5      	blt.n	80013b4 <calc_average+0x20>
		}
	}

	return sum / count; // Return the average
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f7ff f88b 	bl	8000524 <__aeabi_i2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001416:	f7ff fa19 	bl	800084c <__aeabi_ddiv>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001422:	eeb0 0a47 	vmov.f32	s0, s14
 8001426:	eef0 0a67 	vmov.f32	s1, s15
 800142a:	3720      	adds	r7, #32
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8001440:	4847      	ldr	r0, [pc, #284]	@ (8001560 <UART_keys_IRQ+0x130>)
 8001442:	f001 fbbd 	bl	8002bc0 <UART_puts>
 8001446:	4847      	ldr	r0, [pc, #284]	@ (8001564 <UART_keys_IRQ+0x134>)
 8001448:	f001 fbba 	bl	8002bc0 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 800144c:	4846      	ldr	r0, [pc, #280]	@ (8001568 <UART_keys_IRQ+0x138>)
 800144e:	f00d fde5 	bl	800f01c <xTaskGetHandle>
 8001452:	6278      	str	r0, [r7, #36]	@ 0x24
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 800145a:	4844      	ldr	r0, [pc, #272]	@ (800156c <UART_keys_IRQ+0x13c>)
 800145c:	f000 fa7c 	bl	8001958 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001460:	4b43      	ldr	r3, [pc, #268]	@ (8001570 <UART_keys_IRQ+0x140>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 0218 	add.w	r2, r7, #24
 8001468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800146a:	4413      	add	r3, r2
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	4619      	mov	r1, r3
 8001472:	f00c fba5 	bl	800dbc0 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8001476:	f107 0218 	add.w	r2, r7, #24
 800147a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147c:	4413      	add	r3, r2
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d06b      	beq.n	800155c <UART_keys_IRQ+0x12c>
 8001484:	f107 0218 	add.w	r2, r7, #24
 8001488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2bff      	cmp	r3, #255	@ 0xff
 8001490:	d064      	beq.n	800155c <UART_keys_IRQ+0x12c>
 8001492:	f107 0218 	add.w	r2, r7, #24
 8001496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b0d      	cmp	r3, #13
 800149e:	d05d      	beq.n	800155c <UART_keys_IRQ+0x12c>
 80014a0:	f107 0218 	add.w	r2, r7, #24
 80014a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	d056      	beq.n	800155c <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80014ae:	f107 0218 	add.w	r2, r7, #24
 80014b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	d108      	bne.n	80014ce <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80014bc:	f107 0218 	add.w	r2, r7, #24
 80014c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c2:	4413      	add	r3, r2
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80014c8:	2301      	movs	r3, #1
 80014ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014cc:	e00d      	b.n	80014ea <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d10a      	bne.n	80014ea <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 80014d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d6:	3301      	adds	r3, #1
 80014d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014da:	f107 0218 	add.w	r2, r7, #24
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	4413      	add	r3, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d031      	beq.n	8001554 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 80014f0:	f107 0218 	add.w	r2, r7, #24
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f011 ff47 	bl	801338e <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8001500:	f107 0318 	add.w	r3, r7, #24
 8001504:	220a      	movs	r2, #10
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f011 fdd8 	bl	80130be <memset>
			finish = FALSE;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001516:	f107 010c 	add.w	r1, r7, #12
 800151a:	2300      	movs	r3, #0
 800151c:	2203      	movs	r2, #3
 800151e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001520:	f00e fcac 	bl	800fe7c <xTaskGenericNotify>
			//hello test

			if (Uart_debug_out & UART_DEBUG_OUT)
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <UART_keys_IRQ+0x144>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d097      	beq.n	8001460 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8001530:	4811      	ldr	r0, [pc, #68]	@ (8001578 <UART_keys_IRQ+0x148>)
 8001532:	f001 fb45 	bl	8002bc0 <UART_puts>
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <UART_keys_IRQ+0x130>)
 8001538:	f001 fb42 	bl	8002bc0 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 800153c:	480f      	ldr	r0, [pc, #60]	@ (800157c <UART_keys_IRQ+0x14c>)
 800153e:	f001 fb3f 	bl	8002bc0 <UART_puts>
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fb3a 	bl	8002bc0 <UART_puts>
				UART_puts("\r\n");
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <UART_keys_IRQ+0x150>)
 800154e:	f001 fb37 	bl	8002bc0 <UART_puts>
 8001552:	e785      	b.n	8001460 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8001554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001556:	3301      	adds	r3, #1
 8001558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800155a:	e781      	b.n	8001460 <UART_keys_IRQ+0x30>
			continue;
 800155c:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800155e:	e77f      	b.n	8001460 <UART_keys_IRQ+0x30>
 8001560:	080165d0 	.word	0x080165d0
 8001564:	08015c74 	.word	0x08015c74
 8001568:	08015c28 	.word	0x08015c28
 800156c:	08015c98 	.word	0x08015c98
 8001570:	20000b48 	.word	0x20000b48
 8001574:	20000b44 	.word	0x20000b44
 8001578:	08015c58 	.word	0x08015c58
 800157c:	08015ca8 	.word	0x08015ca8
 8001580:	08015c70 	.word	0x08015c70

08001584 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 800158c:	4bab      	ldr	r3, [pc, #684]	@ (800183c <UART_menu+0x2b8>)
 800158e:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001590:	48ab      	ldr	r0, [pc, #684]	@ (8001840 <UART_menu+0x2bc>)
 8001592:	f001 fb15 	bl	8002bc0 <UART_puts>
 8001596:	48ab      	ldr	r0, [pc, #684]	@ (8001844 <UART_menu+0x2c0>)
 8001598:	f001 fb12 	bl	8002bc0 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	2001      	movs	r0, #1
 80015a2:	f00e fbbf 	bl	800fd24 <ulTaskNotifyTake>
 80015a6:	4603      	mov	r3, r0
 80015a8:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	75fb      	strb	r3, [r7, #23]
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4aa4      	ldr	r2, [pc, #656]	@ (8001848 <UART_menu+0x2c4>)
 80015b6:	4413      	add	r3, r2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d102      	bne.n	80015c8 <UART_menu+0x44>
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	3b20      	subs	r3, #32
 80015c6:	e000      	b.n	80015ca <UART_menu+0x46>
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	3b30      	subs	r3, #48	@ 0x30
 80015cc:	2b24      	cmp	r3, #36	@ 0x24
 80015ce:	d84d      	bhi.n	800166c <UART_menu+0xe8>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <UART_menu+0x54>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	0800167b 	.word	0x0800167b
 80015dc:	080016b7 	.word	0x080016b7
 80015e0:	080016e3 	.word	0x080016e3
 80015e4:	0800170f 	.word	0x0800170f
 80015e8:	0800173b 	.word	0x0800173b
 80015ec:	08001767 	.word	0x08001767
 80015f0:	0800166d 	.word	0x0800166d
 80015f4:	0800166d 	.word	0x0800166d
 80015f8:	0800166d 	.word	0x0800166d
 80015fc:	0800166d 	.word	0x0800166d
 8001600:	0800166d 	.word	0x0800166d
 8001604:	0800166d 	.word	0x0800166d
 8001608:	0800166d 	.word	0x0800166d
 800160c:	0800166d 	.word	0x0800166d
 8001610:	0800166d 	.word	0x0800166d
 8001614:	0800166d 	.word	0x0800166d
 8001618:	0800166d 	.word	0x0800166d
 800161c:	0800166d 	.word	0x0800166d
 8001620:	0800166d 	.word	0x0800166d
 8001624:	0800166d 	.word	0x0800166d
 8001628:	08001793 	.word	0x08001793
 800162c:	0800166d 	.word	0x0800166d
 8001630:	0800166d 	.word	0x0800166d
 8001634:	0800166d 	.word	0x0800166d
 8001638:	0800166d 	.word	0x0800166d
 800163c:	0800166d 	.word	0x0800166d
 8001640:	0800166d 	.word	0x0800166d
 8001644:	0800166d 	.word	0x0800166d
 8001648:	0800166d 	.word	0x0800166d
 800164c:	080017b7 	.word	0x080017b7
 8001650:	0800166d 	.word	0x0800166d
 8001654:	0800166d 	.word	0x0800166d
 8001658:	080017c3 	.word	0x080017c3
 800165c:	0800166d 	.word	0x0800166d
 8001660:	0800166d 	.word	0x0800166d
 8001664:	08001807 	.word	0x08001807
 8001668:	080017bd 	.word	0x080017bd
		{
		default:  UART_puts(s);
 800166c:	69b8      	ldr	r0, [r7, #24]
 800166e:	f001 faa7 	bl	8002bc0 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8001672:	4876      	ldr	r0, [pc, #472]	@ (800184c <UART_menu+0x2c8>)
 8001674:	f001 faa4 	bl	8002bc0 <UART_puts>
				  break;
 8001678:	e0df      	b.n	800183a <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 800167a:	4b75      	ldr	r3, [pc, #468]	@ (8001850 <UART_menu+0x2cc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <UART_menu+0x102>
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <UART_menu+0x104>
 8001686:	23ff      	movs	r3, #255	@ 0xff
 8001688:	4a71      	ldr	r2, [pc, #452]	@ (8001850 <UART_menu+0x2cc>)
 800168a:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 800168c:	4871      	ldr	r0, [pc, #452]	@ (8001854 <UART_menu+0x2d0>)
 800168e:	f001 fa97 	bl	8002bc0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 8001692:	4b6f      	ldr	r3, [pc, #444]	@ (8001850 <UART_menu+0x2cc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2bff      	cmp	r3, #255	@ 0xff
 8001698:	d101      	bne.n	800169e <UART_menu+0x11a>
 800169a:	4b6f      	ldr	r3, [pc, #444]	@ (8001858 <UART_menu+0x2d4>)
 800169c:	e000      	b.n	80016a0 <UART_menu+0x11c>
 800169e:	4b6f      	ldr	r3, [pc, #444]	@ (800185c <UART_menu+0x2d8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f001 fa8d 	bl	8002bc0 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 80016a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001850 <UART_menu+0x2cc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80c0 	bne.w	8001830 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80016b0:	f000 f944 	bl	800193c <DisplayMenu>
				  break;
 80016b4:	e0bc      	b.n	8001830 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80016b6:	4b66      	ldr	r3, [pc, #408]	@ (8001850 <UART_menu+0x2cc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f083 0301 	eor.w	r3, r3, #1
 80016be:	4a64      	ldr	r2, [pc, #400]	@ (8001850 <UART_menu+0x2cc>)
 80016c0:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80016c2:	4867      	ldr	r0, [pc, #412]	@ (8001860 <UART_menu+0x2dc>)
 80016c4:	f001 fa7c 	bl	8002bc0 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80016c8:	4b61      	ldr	r3, [pc, #388]	@ (8001850 <UART_menu+0x2cc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <UART_menu+0x154>
 80016d4:	4b60      	ldr	r3, [pc, #384]	@ (8001858 <UART_menu+0x2d4>)
 80016d6:	e000      	b.n	80016da <UART_menu+0x156>
 80016d8:	4b60      	ldr	r3, [pc, #384]	@ (800185c <UART_menu+0x2d8>)
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 fa70 	bl	8002bc0 <UART_puts>
				  break;
 80016e0:	e0ab      	b.n	800183a <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 80016e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001850 <UART_menu+0x2cc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f083 0302 	eor.w	r3, r3, #2
 80016ea:	4a59      	ldr	r2, [pc, #356]	@ (8001850 <UART_menu+0x2cc>)
 80016ec:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 80016ee:	485d      	ldr	r0, [pc, #372]	@ (8001864 <UART_menu+0x2e0>)
 80016f0:	f001 fa66 	bl	8002bc0 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80016f4:	4b56      	ldr	r3, [pc, #344]	@ (8001850 <UART_menu+0x2cc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <UART_menu+0x180>
 8001700:	4b55      	ldr	r3, [pc, #340]	@ (8001858 <UART_menu+0x2d4>)
 8001702:	e000      	b.n	8001706 <UART_menu+0x182>
 8001704:	4b55      	ldr	r3, [pc, #340]	@ (800185c <UART_menu+0x2d8>)
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fa5a 	bl	8002bc0 <UART_puts>
				  break;
 800170c:	e095      	b.n	800183a <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 800170e:	4b50      	ldr	r3, [pc, #320]	@ (8001850 <UART_menu+0x2cc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f083 0304 	eor.w	r3, r3, #4
 8001716:	4a4e      	ldr	r2, [pc, #312]	@ (8001850 <UART_menu+0x2cc>)
 8001718:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 800171a:	4853      	ldr	r0, [pc, #332]	@ (8001868 <UART_menu+0x2e4>)
 800171c:	f001 fa50 	bl	8002bc0 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <UART_menu+0x2cc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <UART_menu+0x1ac>
 800172c:	4b4a      	ldr	r3, [pc, #296]	@ (8001858 <UART_menu+0x2d4>)
 800172e:	e000      	b.n	8001732 <UART_menu+0x1ae>
 8001730:	4b4a      	ldr	r3, [pc, #296]	@ (800185c <UART_menu+0x2d8>)
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fa44 	bl	8002bc0 <UART_puts>
				  break;
 8001738:	e07f      	b.n	800183a <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 800173a:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <UART_menu+0x2cc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f083 0308 	eor.w	r3, r3, #8
 8001742:	4a43      	ldr	r2, [pc, #268]	@ (8001850 <UART_menu+0x2cc>)
 8001744:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8001746:	4849      	ldr	r0, [pc, #292]	@ (800186c <UART_menu+0x2e8>)
 8001748:	f001 fa3a 	bl	8002bc0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800174c:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <UART_menu+0x2cc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <UART_menu+0x1d8>
 8001758:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <UART_menu+0x2d4>)
 800175a:	e000      	b.n	800175e <UART_menu+0x1da>
 800175c:	4b3f      	ldr	r3, [pc, #252]	@ (800185c <UART_menu+0x2d8>)
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fa2e 	bl	8002bc0 <UART_puts>
				  break;
 8001764:	e069      	b.n	800183a <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8001766:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <UART_menu+0x2cc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f083 0310 	eor.w	r3, r3, #16
 800176e:	4a38      	ldr	r2, [pc, #224]	@ (8001850 <UART_menu+0x2cc>)
 8001770:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8001772:	483f      	ldr	r0, [pc, #252]	@ (8001870 <UART_menu+0x2ec>)
 8001774:	f001 fa24 	bl	8002bc0 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001778:	4b35      	ldr	r3, [pc, #212]	@ (8001850 <UART_menu+0x2cc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <UART_menu+0x204>
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <UART_menu+0x2d4>)
 8001786:	e000      	b.n	800178a <UART_menu+0x206>
 8001788:	4b34      	ldr	r3, [pc, #208]	@ (800185c <UART_menu+0x2d8>)
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fa18 	bl	8002bc0 <UART_puts>
				  break;
 8001790:	e053      	b.n	800183a <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3302      	adds	r3, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f00f ffa5 	bl	80116e6 <atoi>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <UART_menu+0x2f0>)
 80017a2:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 80017a4:	4834      	ldr	r0, [pc, #208]	@ (8001878 <UART_menu+0x2f4>)
 80017a6:	f001 fa0b 	bl	8002bc0 <UART_puts>
 80017aa:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <UART_menu+0x2f0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fa22 	bl	8002bf8 <UART_putint>
				  break;
 80017b4:	e041      	b.n	800183a <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 80017b6:	f000 f8c1 	bl	800193c <DisplayMenu>
				  break;
 80017ba:	e03e      	b.n	800183a <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 80017bc:	f000 fa3c 	bl	8001c38 <DisplayTaskData>
				  break;
 80017c0:	e03b      	b.n	800183a <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 80017c2:	69f9      	ldr	r1, [r7, #28]
 80017c4:	69b8      	ldr	r0, [r7, #24]
 80017c6:	f011 fca1 	bl	801310c <strtok>
 80017ca:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 80017cc:	69f9      	ldr	r1, [r7, #28]
 80017ce:	2000      	movs	r0, #0
 80017d0:	f011 fc9c 	bl	801310c <strtok>
 80017d4:	61b8      	str	r0, [r7, #24]
 80017d6:	69b8      	ldr	r0, [r7, #24]
 80017d8:	f00f ff85 	bl	80116e6 <atoi>
 80017dc:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 80017de:	69f9      	ldr	r1, [r7, #28]
 80017e0:	2000      	movs	r0, #0
 80017e2:	f011 fc93 	bl	801310c <strtok>
 80017e6:	61b8      	str	r0, [r7, #24]
 80017e8:	69b8      	ldr	r0, [r7, #24]
 80017ea:	f00f ff7c 	bl	80116e6 <atoi>
 80017ee:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01e      	beq.n	8001834 <UART_menu+0x2b0>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d01b      	beq.n	8001834 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 80017fc:	68f9      	ldr	r1, [r7, #12]
 80017fe:	6938      	ldr	r0, [r7, #16]
 8001800:	f000 f996 	bl	8001b30 <SetTaskPriority>
				  break;
 8001804:	e016      	b.n	8001834 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8001806:	69f9      	ldr	r1, [r7, #28]
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f011 fc7f 	bl	801310c <strtok>
 800180e:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001810:	69f9      	ldr	r1, [r7, #28]
 8001812:	2000      	movs	r0, #0
 8001814:	f011 fc7a 	bl	801310c <strtok>
 8001818:	61b8      	str	r0, [r7, #24]
 800181a:	69b8      	ldr	r0, [r7, #24]
 800181c:	f00f ff63 	bl	80116e6 <atoi>
 8001820:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8001828:	6938      	ldr	r0, [r7, #16]
 800182a:	f000 f9bd 	bl	8001ba8 <StartStopTask>
				  break;
 800182e:	e003      	b.n	8001838 <UART_menu+0x2b4>
				  break;
 8001830:	bf00      	nop
 8001832:	e6b3      	b.n	800159c <UART_menu+0x18>
				  break;
 8001834:	bf00      	nop
 8001836:	e6b1      	b.n	800159c <UART_menu+0x18>
				  break;
 8001838:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800183a:	e6af      	b.n	800159c <UART_menu+0x18>
 800183c:	08015cc4 	.word	0x08015cc4
 8001840:	080165e0 	.word	0x080165e0
 8001844:	08015cc8 	.word	0x08015cc8
 8001848:	080168f0 	.word	0x080168f0
 800184c:	08015cd4 	.word	0x08015cd4
 8001850:	20000b44 	.word	0x20000b44
 8001854:	08015ce8 	.word	0x08015ce8
 8001858:	08015d00 	.word	0x08015d00
 800185c:	08015d08 	.word	0x08015d08
 8001860:	08015d10 	.word	0x08015d10
 8001864:	08015d24 	.word	0x08015d24
 8001868:	08015d38 	.word	0x08015d38
 800186c:	08015d4c 	.word	0x08015d4c
 8001870:	08015d60 	.word	0x08015d60
 8001874:	20000250 	.word	0x20000250
 8001878:	08015d70 	.word	0x08015d70

0800187c <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b09c      	sub	sp, #112	@ 0x70
 8001880:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 8001882:	4b24      	ldr	r3, [pc, #144]	@ (8001914 <DisplayVersion+0x98>)
 8001884:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8001886:	f000 ffb1 	bl	80027ec <LCD_clear>
	LCD_puts(app_nameLCD);
 800188a:	4b23      	ldr	r3, [pc, #140]	@ (8001918 <DisplayVersion+0x9c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f001 f8a4 	bl	80029dc <LCD_puts>

	UART_puts(app_name);
 8001894:	4b21      	ldr	r3, [pc, #132]	@ (800191c <DisplayVersion+0xa0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f001 f991 	bl	8002bc0 <UART_puts>
	UART_puts(functionality);
 800189e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80018a0:	f001 f98e 	bl	8002bc0 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 80018a4:	f107 0108 	add.w	r1, r7, #8
 80018a8:	463b      	mov	r3, r7
 80018aa:	2264      	movs	r2, #100	@ 0x64
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00b f953 	bl	800cb58 <osKernelGetInfo>
	UART_puts("\t-----");
 80018b2:	481b      	ldr	r0, [pc, #108]	@ (8001920 <DisplayVersion+0xa4>)
 80018b4:	f001 f984 	bl	8002bc0 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 80018b8:	481a      	ldr	r0, [pc, #104]	@ (8001924 <DisplayVersion+0xa8>)
 80018ba:	f001 f981 	bl	8002bc0 <UART_puts>
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 f97c 	bl	8002bc0 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 80018c8:	4817      	ldr	r0, [pc, #92]	@ (8001928 <DisplayVersion+0xac>)
 80018ca:	f001 f979 	bl	8002bc0 <UART_puts>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f001 f991 	bl	8002bf8 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 80018d6:	4815      	ldr	r0, [pc, #84]	@ (800192c <DisplayVersion+0xb0>)
 80018d8:	f001 f972 	bl	8002bc0 <UART_puts>
 80018dc:	f00b f994 	bl	800cc08 <osKernelGetSysTimerFreq>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a13      	ldr	r2, [pc, #76]	@ (8001930 <DisplayVersion+0xb4>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	0c9b      	lsrs	r3, r3, #18
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 f984 	bl	8002bf8 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 80018f0:	4810      	ldr	r0, [pc, #64]	@ (8001934 <DisplayVersion+0xb8>)
 80018f2:	f001 f965 	bl	8002bc0 <UART_puts>
 80018f6:	f00b f97d 	bl	800cbf4 <osKernelGetTickFreq>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f001 f97b 	bl	8002bf8 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 8001902:	480d      	ldr	r0, [pc, #52]	@ (8001938 <DisplayVersion+0xbc>)
 8001904:	f001 f95c 	bl	8002bc0 <UART_puts>

    DisplayMenu();
 8001908:	f000 f818 	bl	800193c <DisplayMenu>
}
 800190c:	bf00      	nop
 800190e:	3770      	adds	r7, #112	@ 0x70
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	08015e50 	.word	0x08015e50
 8001918:	20000004 	.word	0x20000004
 800191c:	20000000 	.word	0x20000000
 8001920:	08015fc0 	.word	0x08015fc0
 8001924:	08015fc8 	.word	0x08015fc8
 8001928:	08015fcc 	.word	0x08015fcc
 800192c:	08015fdc 	.word	0x08015fdc
 8001930:	431bde83 	.word	0x431bde83
 8001934:	08015ff8 	.word	0x08015ff8
 8001938:	08016010 	.word	0x08016010

0800193c <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	char *menu =
 8001942:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <DisplayMenu+0x18>)
 8001944:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 f93a 	bl	8002bc0 <UART_puts>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	0801601c 	.word	0x0801601c

08001958 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f001 f83b 	bl	80029dc <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 f92a 	bl	8002bc0 <UART_puts>
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <error_HaltOS+0x2c>)
 800196e:	f001 f927 	bl	8002bc0 <UART_puts>

	BUZZER_put(1000);
 8001972:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001976:	f000 fdf7 	bl	8002568 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 800197a:	f00d fa25 	bl	800edc8 <vTaskSuspendAll>

	while (TRUE)
 800197e:	bf00      	nop
 8001980:	e7fd      	b.n	800197e <error_HaltOS+0x26>
 8001982:	bf00      	nop
 8001984:	0801625c 	.word	0x0801625c

08001988 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b083      	sub	sp, #12
 800198c:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 800198e:	2001      	movs	r0, #1
 8001990:	f00b ff5d 	bl	800d84e <xQueueCreateMutex>
 8001994:	4603      	mov	r3, r0
 8001996:	4a36      	ldr	r2, [pc, #216]	@ (8001a70 <CreateHandles+0xe8>)
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <CreateHandles+0xe8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 80019a2:	4834      	ldr	r0, [pc, #208]	@ (8001a74 <CreateHandles+0xec>)
 80019a4:	f7ff ffd8 	bl	8001958 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 80019a8:	2200      	movs	r2, #0
 80019aa:	2104      	movs	r1, #4
 80019ac:	200a      	movs	r0, #10
 80019ae:	f00b fed6 	bl	800d75e <xQueueGenericCreate>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a30      	ldr	r2, [pc, #192]	@ (8001a78 <CreateHandles+0xf0>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <CreateHandles+0xf0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 80019c0:	482e      	ldr	r0, [pc, #184]	@ (8001a7c <CreateHandles+0xf4>)
 80019c2:	f7ff ffc9 	bl	8001958 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 80019c6:	2200      	movs	r2, #0
 80019c8:	2101      	movs	r1, #1
 80019ca:	2053      	movs	r0, #83	@ 0x53
 80019cc:	f00b fec7 	bl	800d75e <xQueueGenericCreate>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001a80 <CreateHandles+0xf8>)
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <CreateHandles+0xf8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d102      	bne.n	80019e4 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 80019de:	4829      	ldr	r0, [pc, #164]	@ (8001a84 <CreateHandles+0xfc>)
 80019e0:	f7ff ffba 	bl	8001958 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 80019e4:	f00b fb64 	bl	800d0b0 <xEventGroupCreate>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a27      	ldr	r2, [pc, #156]	@ (8001a88 <CreateHandles+0x100>)
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <CreateHandles+0x100>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 80019f6:	4825      	ldr	r0, [pc, #148]	@ (8001a8c <CreateHandles+0x104>)
 80019f8:	f7ff ffae 	bl	8001958 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <CreateHandles+0x108>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	2201      	movs	r2, #1
 8001a04:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a08:	4822      	ldr	r0, [pc, #136]	@ (8001a94 <CreateHandles+0x10c>)
 8001a0a:	f00e fb97 	bl	801013c <xTimerCreate>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <CreateHandles+0x110>)
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <CreateHandles+0x110>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8001a1c:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <CreateHandles+0x114>)
 8001a1e:	f7ff ff9b 	bl	8001958 <error_HaltOS>

	if (!(hGPS_Mutex = xSemaphoreCreateMutex()))
 8001a22:	2001      	movs	r0, #1
 8001a24:	f00b ff13 	bl	800d84e <xQueueCreateMutex>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <CreateHandles+0x118>)
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa0 <CreateHandles+0x118>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d102      	bne.n	8001a3c <CreateHandles+0xb4>
		error_HaltOS("Error hGPS_Mutex");
 8001a36:	481b      	ldr	r0, [pc, #108]	@ (8001aa4 <CreateHandles+0x11c>)
 8001a38:	f7ff ff8e 	bl	8001958 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8001a3c:	481a      	ldr	r0, [pc, #104]	@ (8001aa8 <CreateHandles+0x120>)
 8001a3e:	f001 f8bf 	bl	8002bc0 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8001a42:	481a      	ldr	r0, [pc, #104]	@ (8001aac <CreateHandles+0x124>)
 8001a44:	f001 f8bc 	bl	8002bc0 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8001a48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a4c:	f001 f8d4 	bl	8002bf8 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <CreateHandles+0x110>)
 8001a52:	681c      	ldr	r4, [r3, #0]
 8001a54:	f00d fa64 	bl	800ef20 <xTaskGetTickCount>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2101      	movs	r1, #1
 8001a62:	4620      	mov	r0, r4
 8001a64:	f00e fbc8 	bl	80101f8 <xTimerGenericCommand>
}
 8001a68:	bf00      	nop
 8001a6a:	3704      	adds	r7, #4
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	20000b50 	.word	0x20000b50
 8001a74:	08016274 	.word	0x08016274
 8001a78:	20000b48 	.word	0x20000b48
 8001a7c:	08016284 	.word	0x08016284
 8001a80:	20000b4c 	.word	0x20000b4c
 8001a84:	08016294 	.word	0x08016294
 8001a88:	20000b54 	.word	0x20000b54
 8001a8c:	080162a4 	.word	0x080162a4
 8001a90:	08001ab1 	.word	0x08001ab1
 8001a94:	080162b8 	.word	0x080162b8
 8001a98:	20000b58 	.word	0x20000b58
 8001a9c:	080162c0 	.word	0x080162c0
 8001aa0:	20000b5c 	.word	0x20000b5c
 8001aa4:	080162d0 	.word	0x080162d0
 8001aa8:	080162e4 	.word	0x080162e4
 8001aac:	08016308 	.word	0x08016308

08001ab0 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8001ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <Timer1_Handler+0x14>)
 8001aba:	f002 fbb8 	bl	800422e <HAL_GPIO_TogglePin>
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020c00 	.word	0x40020c00

08001ac8 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <CreateTasks+0x5c>)
 8001ad0:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8001ad2:	f00d f979 	bl	800edc8 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001ad6:	e016      	b.n	8001b06 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001ad8:	4813      	ldr	r0, [pc, #76]	@ (8001b28 <CreateTasks+0x60>)
 8001ada:	f001 f871 	bl	8002bc0 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 f86c 	bl	8002bc0 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3308      	adds	r3, #8
 8001af4:	461a      	mov	r2, r3
 8001af6:	f00b f893 	bl	800cc20 <osThreadNew>
 8001afa:	4602      	mov	r2, r0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3330      	adds	r3, #48	@ 0x30
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1e4      	bne.n	8001ad8 <CreateTasks+0x10>
	}

	UART_puts("\r\n");
 8001b0e:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <CreateTasks+0x64>)
 8001b10:	f001 f856 	bl	8002bc0 <UART_puts>
	xTaskResumeAll();   // start nu de scheduler: play ball
 8001b14:	f00d f966 	bl	800ede4 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8001b18:	f000 f88e 	bl	8001c38 <DisplayTaskData>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000008 	.word	0x20000008
 8001b28:	0801631c 	.word	0x0801631c
 8001b2c:	08016328 	.word	0x08016328

08001b30 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <SetTaskPriority+0x6c>)
 8001b3c:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001b3e:	2301      	movs	r3, #1
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	e023      	b.n	8001b8c <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d119      	bne.n	8001b80 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00c ff1e 	bl	800e99c <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8001b60:	480f      	ldr	r0, [pc, #60]	@ (8001ba0 <SetTaskPriority+0x70>)
 8001b62:	f001 f82d 	bl	8002bc0 <UART_puts>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 f828 	bl	8002bc0 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <SetTaskPriority+0x74>)
 8001b72:	f001 f825 	bl	8002bc0 <UART_puts>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 f83d 	bl	8002bf8 <UART_putint>
			return;
 8001b7e:	e009      	b.n	8001b94 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3330      	adds	r3, #48	@ 0x30
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1d7      	bne.n	8001b44 <SetTaskPriority+0x14>
		}
}
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	0801632c 	.word	0x0801632c
 8001ba4:	08016338 	.word	0x08016338

08001ba8 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	@ 0x38
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <StartStopTask+0x80>)
 8001bb2:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bb8:	e02e      	b.n	8001c18 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d124      	bne.n	8001c0c <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001bc6:	f107 010c 	add.w	r1, r7, #12
 8001bca:	2305      	movs	r3, #5
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f00d fe0f 	bl	800f7f0 <vTaskGetInfo>
			UART_puts("\r\n");
 8001bd2:	4816      	ldr	r0, [pc, #88]	@ (8001c2c <StartStopTask+0x84>)
 8001bd4:	f000 fff4 	bl	8002bc0 <UART_puts>
			UART_puts(ptd->attr.name);
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 ffef 	bl	8002bc0 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001be2:	7e3b      	ldrb	r3, [r7, #24]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d108      	bne.n	8001bfa <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8001be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bec:	4618      	mov	r0, r3
 8001bee:	f00d f81b 	bl	800ec28 <vTaskResume>
				UART_puts(" resumed.");
 8001bf2:	480f      	ldr	r0, [pc, #60]	@ (8001c30 <StartStopTask+0x88>)
 8001bf4:	f000 ffe4 	bl	8002bc0 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8001bf8:	e012      	b.n	8001c20 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f00c ff6a 	bl	800ead8 <vTaskSuspend>
				UART_puts(" suspended.");
 8001c04:	480b      	ldr	r0, [pc, #44]	@ (8001c34 <StartStopTask+0x8c>)
 8001c06:	f000 ffdb 	bl	8002bc0 <UART_puts>
 8001c0a:	e009      	b.n	8001c20 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0e:	3330      	adds	r3, #48	@ 0x30
 8001c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c14:	3301      	adds	r3, #1
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1cc      	bne.n	8001bba <StartStopTask+0x12>
		}
}
 8001c20:	3738      	adds	r7, #56	@ 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008
 8001c2c:	08016328 	.word	0x08016328
 8001c30:	0801634c 	.word	0x0801634c
 8001c34:	08016358 	.word	0x08016358

08001c38 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08e      	sub	sp, #56	@ 0x38
 8001c3c:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8001c3e:	4b47      	ldr	r3, [pc, #284]	@ (8001d5c <DisplayTaskData+0x124>)
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001c46:	2301      	movs	r3, #1
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c4a:	e062      	b.n	8001d12 <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8001c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00d fe4f 	bl	800f8f4 <uxTaskGetStackHighWaterMark>
 8001c56:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8001c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5a:	2264      	movs	r2, #100	@ 0x64
 8001c5c:	fb03 f202 	mul.w	r2, r3, r2
 8001c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c62:	69db      	ldr	r3, [r3, #28]
 8001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c70:	4413      	add	r3, r2
 8001c72:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8001c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c78:	4639      	mov	r1, r7
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f00d fdb7 	bl	800f7f0 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8001c82:	4837      	ldr	r0, [pc, #220]	@ (8001d60 <DisplayTaskData+0x128>)
 8001c84:	f000 ff9c 	bl	8002bc0 <UART_puts>
 8001c88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c8a:	f000 ffb5 	bl	8002bf8 <UART_putint>
 8001c8e:	4835      	ldr	r0, [pc, #212]	@ (8001d64 <DisplayTaskData+0x12c>)
 8001c90:	f000 ff96 	bl	8002bc0 <UART_puts>
		UART_puts(ptd->attr.name);
 8001c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 ff91 	bl	8002bc0 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8001c9e:	4832      	ldr	r0, [pc, #200]	@ (8001d68 <DisplayTaskData+0x130>)
 8001ca0:	f000 ff8e 	bl	8002bc0 <UART_puts>
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 ffa5 	bl	8002bf8 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8001cae:	482f      	ldr	r0, [pc, #188]	@ (8001d6c <DisplayTaskData+0x134>)
 8001cb0:	f000 ff86 	bl	8002bc0 <UART_puts>
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 ff9c 	bl	8002bf8 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 8001cc0:	482b      	ldr	r0, [pc, #172]	@ (8001d70 <DisplayTaskData+0x138>)
 8001cc2:	f000 ff7d 	bl	8002bc0 <UART_puts>
 8001cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 ff91 	bl	8002bf8 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8001cd6:	4827      	ldr	r0, [pc, #156]	@ (8001d74 <DisplayTaskData+0x13c>)
 8001cd8:	f000 ff72 	bl	8002bc0 <UART_puts>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 ff88 	bl	8002bf8 <UART_putint>
 8001ce8:	4823      	ldr	r0, [pc, #140]	@ (8001d78 <DisplayTaskData+0x140>)
 8001cea:	f000 ff69 	bl	8002bc0 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8001cee:	4823      	ldr	r0, [pc, #140]	@ (8001d7c <DisplayTaskData+0x144>)
 8001cf0:	f000 ff66 	bl	8002bc0 <UART_puts>
 8001cf4:	7b3b      	ldrb	r3, [r7, #12]
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	d101      	bne.n	8001cfe <DisplayTaskData+0xc6>
 8001cfa:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <DisplayTaskData+0x148>)
 8001cfc:	e000      	b.n	8001d00 <DisplayTaskData+0xc8>
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <DisplayTaskData+0x14c>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 ff5d 	bl	8002bc0 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d08:	3330      	adds	r3, #48	@ 0x30
 8001d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0e:	3301      	adds	r3, #1
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d198      	bne.n	8001c4c <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 8001d1a:	481b      	ldr	r0, [pc, #108]	@ (8001d88 <DisplayTaskData+0x150>)
 8001d1c:	f000 ff50 	bl	8002bc0 <UART_puts>
 8001d20:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8001d24:	f000 ff68 	bl	8002bf8 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 8001d28:	4818      	ldr	r0, [pc, #96]	@ (8001d8c <DisplayTaskData+0x154>)
 8001d2a:	f000 ff49 	bl	8002bc0 <UART_puts>
 8001d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 ff60 	bl	8002bf8 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 8001d38:	4815      	ldr	r0, [pc, #84]	@ (8001d90 <DisplayTaskData+0x158>)
 8001d3a:	f000 ff41 	bl	8002bc0 <UART_puts>
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 ff56 	bl	8002bf8 <UART_putint>
	UART_puts("\r\n");
 8001d4c:	4811      	ldr	r0, [pc, #68]	@ (8001d94 <DisplayTaskData+0x15c>)
 8001d4e:	f000 ff37 	bl	8002bc0 <UART_puts>
}
 8001d52:	bf00      	nop
 8001d54:	3738      	adds	r7, #56	@ 0x38
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	08016364 	.word	0x08016364
 8001d64:	0801636c 	.word	0x0801636c
 8001d68:	08016370 	.word	0x08016370
 8001d6c:	08016380 	.word	0x08016380
 8001d70:	08016390 	.word	0x08016390
 8001d74:	0801639c 	.word	0x0801639c
 8001d78:	080163a8 	.word	0x080163a8
 8001d7c:	080163ac 	.word	0x080163ac
 8001d80:	080163b8 	.word	0x080163b8
 8001d84:	080163c4 	.word	0x080163c4
 8001d88:	080163cc 	.word	0x080163cc
 8001d8c:	080163dc 	.word	0x080163dc
 8001d90:	080163f8 	.word	0x080163f8
 8001d94:	08016328 	.word	0x08016328

08001d98 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,

	osThreadId_t hTask;

	if (!(hTask = xTaskGetHandle("GPS_parser")))
 8001da0:	485c      	ldr	r0, [pc, #368]	@ (8001f14 <fill_GNRMC+0x17c>)
 8001da2:	f00d f93b 	bl	800f01c <xTaskGetHandle>
 8001da6:	6178      	str	r0, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <fill_GNRMC+0x1c>
				error_HaltOS("Err:ARM_hndle");
 8001dae:	485a      	ldr	r0, [pc, #360]	@ (8001f18 <fill_GNRMC+0x180>)
 8001db0:	f7ff fdd2 	bl	8001958 <error_HaltOS>

	char *tok = ",";
 8001db4:	4b59      	ldr	r3, [pc, #356]	@ (8001f1c <fill_GNRMC+0x184>)
 8001db6:	613b      	str	r3, [r7, #16]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 8001db8:	2247      	movs	r2, #71	@ 0x47
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4858      	ldr	r0, [pc, #352]	@ (8001f20 <fill_GNRMC+0x188>)
 8001dbe:	f011 f97e 	bl	80130be <memset>

	s = strtok(message, tok); // 0. header;
 8001dc2:	6939      	ldr	r1, [r7, #16]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f011 f9a1 	bl	801310c <strtok>
 8001dca:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.head, s);
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4854      	ldr	r0, [pc, #336]	@ (8001f20 <fill_GNRMC+0x188>)
 8001dd0:	f011 fadd 	bl	801338e <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 8001dd4:	6939      	ldr	r1, [r7, #16]
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f011 f998 	bl	801310c <strtok>
 8001ddc:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 2. valid;
 8001dde:	6939      	ldr	r1, [r7, #16]
 8001de0:	2000      	movs	r0, #0
 8001de2:	f011 f993 	bl	801310c <strtok>
 8001de6:	60f8      	str	r0, [r7, #12]
	gnrmc.status = s[0];
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <fill_GNRMC+0x188>)
 8001dee:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001df0:	6939      	ldr	r1, [r7, #16]
 8001df2:	2000      	movs	r0, #0
 8001df4:	f011 f98a 	bl	801310c <strtok>
 8001df8:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.latitude, s);
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	4849      	ldr	r0, [pc, #292]	@ (8001f24 <fill_GNRMC+0x18c>)
 8001dfe:	f011 fac6 	bl	801338e <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001e02:	6939      	ldr	r1, [r7, #16]
 8001e04:	2000      	movs	r0, #0
 8001e06:	f011 f981 	bl	801310c <strtok>
 8001e0a:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 5. longitude;
 8001e0c:	6939      	ldr	r1, [r7, #16]
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f011 f97c 	bl	801310c <strtok>
 8001e14:	60f8      	str	r0, [r7, #12]
	if (s[0] == '0') // if leading '0' is present, remove it
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b30      	cmp	r3, #48	@ 0x30
 8001e1c:	d10a      	bne.n	8001e34 <fill_GNRMC+0x9c>
		memmove(s, s + 1, strlen(s)); // remove leading '0' if present
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1c5c      	adds	r4, r3, #1
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7fe fa24 	bl	8000270 <strlen>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f011 f92b 	bl	801308a <memmove>
	strcpy(gnrmc.longitude, s);
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	483c      	ldr	r0, [pc, #240]	@ (8001f28 <fill_GNRMC+0x190>)
 8001e38:	f011 faa9 	bl	801338e <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001e3c:	6939      	ldr	r1, [r7, #16]
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f011 f964 	bl	801310c <strtok>
 8001e44:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 7. speed;
 8001e46:	6939      	ldr	r1, [r7, #16]
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f011 f95f 	bl	801310c <strtok>
 8001e4e:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.speed, s);
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	4836      	ldr	r0, [pc, #216]	@ (8001f2c <fill_GNRMC+0x194>)
 8001e54:	f011 fa9b 	bl	801338e <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f011 f956 	bl	801310c <strtok>
 8001e60:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.course, s);
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4832      	ldr	r0, [pc, #200]	@ (8001f30 <fill_GNRMC+0x198>)
 8001e66:	f011 fa92 	bl	801338e <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001e6a:	4b32      	ldr	r3, [pc, #200]	@ (8001f34 <fill_GNRMC+0x19c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d025      	beq.n	8001ec2 <fill_GNRMC+0x12a>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001e76:	4830      	ldr	r0, [pc, #192]	@ (8001f38 <fill_GNRMC+0x1a0>)
 8001e78:	f000 fea2 	bl	8002bc0 <UART_puts>
 8001e7c:	4828      	ldr	r0, [pc, #160]	@ (8001f20 <fill_GNRMC+0x188>)
 8001e7e:	f000 fe9f 	bl	8002bc0 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001e82:	482e      	ldr	r0, [pc, #184]	@ (8001f3c <fill_GNRMC+0x1a4>)
 8001e84:	f000 fe9c 	bl	8002bc0 <UART_puts>
 8001e88:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <fill_GNRMC+0x188>)
 8001e8a:	7c5b      	ldrb	r3, [r3, #17]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fe85 	bl	8002b9c <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001e92:	482b      	ldr	r0, [pc, #172]	@ (8001f40 <fill_GNRMC+0x1a8>)
 8001e94:	f000 fe94 	bl	8002bc0 <UART_puts>
 8001e98:	4822      	ldr	r0, [pc, #136]	@ (8001f24 <fill_GNRMC+0x18c>)
 8001e9a:	f000 fe91 	bl	8002bc0 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001e9e:	4829      	ldr	r0, [pc, #164]	@ (8001f44 <fill_GNRMC+0x1ac>)
 8001ea0:	f000 fe8e 	bl	8002bc0 <UART_puts>
 8001ea4:	4820      	ldr	r0, [pc, #128]	@ (8001f28 <fill_GNRMC+0x190>)
 8001ea6:	f000 fe8b 	bl	8002bc0 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001eaa:	4827      	ldr	r0, [pc, #156]	@ (8001f48 <fill_GNRMC+0x1b0>)
 8001eac:	f000 fe88 	bl	8002bc0 <UART_puts>
 8001eb0:	481e      	ldr	r0, [pc, #120]	@ (8001f2c <fill_GNRMC+0x194>)
 8001eb2:	f000 fe85 	bl	8002bc0 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001eb6:	4825      	ldr	r0, [pc, #148]	@ (8001f4c <fill_GNRMC+0x1b4>)
 8001eb8:	f000 fe82 	bl	8002bc0 <UART_puts>
 8001ebc:	481c      	ldr	r0, [pc, #112]	@ (8001f30 <fill_GNRMC+0x198>)
 8001ebe:	f000 fe7f 	bl	8002bc0 <UART_puts>
	}

	// Filling, and swapping the GNRMC buffers, using a mutex so that the reader task does not read half filled buffers
	if (xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001ec2:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <fill_GNRMC+0x1b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f00b ff5a 	bl	800dd84 <xQueueSemaphoreTake>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d119      	bne.n	8001f0a <fill_GNRMC+0x172>
	{
		memcpy((void*)writerBuffer, &gnrmc, sizeof(GNRMC)); // copy data to writerBuffer
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f54 <fill_GNRMC+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <fill_GNRMC+0x188>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	4611      	mov	r1, r2
 8001ee0:	2347      	movs	r3, #71	@ 0x47
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f011 fa5b 	bl	801339e <memcpy>

		GNRMC *temp = writerBuffer; // swap buffers
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <fill_GNRMC+0x1bc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60bb      	str	r3, [r7, #8]
		writerBuffer = readerBuffer; // swap writer and reader buffers
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <fill_GNRMC+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <fill_GNRMC+0x1bc>)
 8001ef4:	6013      	str	r3, [r2, #0]
		readerBuffer = temp;
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <fill_GNRMC+0x1c0>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(hGPS_Mutex); // release mutex
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <fill_GNRMC+0x1b8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	f00b fcbb 	bl	800d880 <xQueueGenericSend>
	}

}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	08016410 	.word	0x08016410
 8001f18:	0801641c 	.word	0x0801641c
 8001f1c:	0801642c 	.word	0x0801642c
 8001f20:	20000b60 	.word	0x20000b60
 8001f24:	20000b72 	.word	0x20000b72
 8001f28:	20000b7d 	.word	0x20000b7d
 8001f2c:	20000b88 	.word	0x20000b88
 8001f30:	20000b8e 	.word	0x20000b8e
 8001f34:	20000b44 	.word	0x20000b44
 8001f38:	08016430 	.word	0x08016430
 8001f3c:	08016440 	.word	0x08016440
 8001f40:	08016450 	.word	0x08016450
 8001f44:	08016460 	.word	0x08016460
 8001f48:	08016470 	.word	0x08016470
 8001f4c:	08016480 	.word	0x08016480
 8001f50:	20000b5c 	.word	0x20000b5c
 8001f54:	20000248 	.word	0x20000248
 8001f58:	2000024c 	.word	0x2000024c

08001f5c <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b09c      	sub	sp, #112	@ 0x70
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001f68:	2300      	movs	r3, #0
 8001f6a:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001f70:	4855      	ldr	r0, [pc, #340]	@ (80020c8 <GPS_getNMEA+0x16c>)
 8001f72:	f000 fe25 	bl	8002bc0 <UART_puts>
 8001f76:	4855      	ldr	r0, [pc, #340]	@ (80020cc <GPS_getNMEA+0x170>)
 8001f78:	f000 fe22 	bl	8002bc0 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001f7c:	4b54      	ldr	r3, [pc, #336]	@ (80020d0 <GPS_getNMEA+0x174>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00b fe19 	bl	800dbc0 <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 8001f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f92:	2b24      	cmp	r3, #36	@ 0x24
 8001f94:	d10a      	bne.n	8001fac <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2253      	movs	r2, #83	@ 0x53
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f011 f88d 	bl	80130be <memset>
			pos = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 8001fa8:	2301      	movs	r3, #1
 8001faa:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8088 	beq.w	80020c4 <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 8001fb4:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 8001fb8:	f107 020c 	add.w	r2, r7, #12
 8001fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fbe:	4413      	add	r3, r2
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d130      	bne.n	800202c <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 8001fca:	2300      	movs	r3, #0
 8001fcc:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	493f      	ldr	r1, [pc, #252]	@ (80020d4 <GPS_getNMEA+0x178>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f011 f885 	bl	80130e8 <strncmp>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <GPS_getNMEA+0x8e>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fe8:	e01a      	b.n	8002020 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	3301      	adds	r3, #1
 8001ff0:	2205      	movs	r2, #5
 8001ff2:	4939      	ldr	r1, [pc, #228]	@ (80020d8 <GPS_getNMEA+0x17c>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f011 f877 	bl	80130e8 <strncmp>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <GPS_getNMEA+0xaa>
 8002000:	2302      	movs	r3, #2
 8002002:	667b      	str	r3, [r7, #100]	@ 0x64
 8002004:	e00c      	b.n	8002020 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	3301      	adds	r3, #1
 800200c:	2205      	movs	r2, #5
 800200e:	4933      	ldr	r1, [pc, #204]	@ (80020dc <GPS_getNMEA+0x180>)
 8002010:	4618      	mov	r0, r3
 8002012:	f011 f869 	bl	80130e8 <strncmp>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <GPS_getNMEA+0xc4>
 800201c:	2303      	movs	r3, #3
 800201e:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8002020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 8002026:	2300      	movs	r3, #0
 8002028:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 800202a:	e04c      	b.n	80020c6 <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 800202c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800202e:	2b51      	cmp	r3, #81	@ 0x51
 8002030:	dd02      	ble.n	8002038 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 8002032:	2300      	movs	r3, #0
 8002034:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8002036:	e046      	b.n	80020c6 <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8002038:	f107 020c 	add.w	r2, r7, #12
 800203c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b0d      	cmp	r3, #13
 8002044:	d13a      	bne.n	80020bc <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 8002046:	f107 020c 	add.w	r2, r7, #12
 800204a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800204c:	4413      	add	r3, r2
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f88e 	bl	8002178 <checksum_valid>
 800205c:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 800205e:	4b20      	ldr	r3, [pc, #128]	@ (80020e0 <GPS_getNMEA+0x184>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0310 	and.w	r3, r3, #16
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 800206a:	481e      	ldr	r0, [pc, #120]	@ (80020e4 <GPS_getNMEA+0x188>)
 800206c:	f000 fda8 	bl	8002bc0 <UART_puts>
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fda3 	bl	8002bc0 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 800207a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <GPS_getNMEA+0x128>
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <GPS_getNMEA+0x18c>)
 8002082:	e000      	b.n	8002086 <GPS_getNMEA+0x12a>
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <GPS_getNMEA+0x190>)
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fd9a 	bl	8002bc0 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 800208c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800208e:	2b00      	cmp	r3, #0
 8002090:	d011      	beq.n	80020b6 <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 8002092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002094:	2b01      	cmp	r3, #1
 8002096:	d007      	beq.n	80020a8 <GPS_getNMEA+0x14c>
 8002098:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800209a:	2b00      	cmp	r3, #0
 800209c:	dd0a      	ble.n	80020b4 <GPS_getNMEA+0x158>
 800209e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a0:	3b02      	subs	r3, #2
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d806      	bhi.n	80020b4 <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 80020a6:	e006      	b.n	80020b6 <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fe73 	bl	8001d98 <fill_GNRMC>
						     break;
 80020b2:	e000      	b.n	80020b6 <GPS_getNMEA+0x15a>
				default:     break;
 80020b4:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 80020b6:	2300      	movs	r3, #0
 80020b8:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80020ba:	e004      	b.n	80020c6 <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 80020bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020be:	3301      	adds	r3, #1
 80020c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020c2:	e75b      	b.n	8001f7c <GPS_getNMEA+0x20>
			continue;
 80020c4:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80020c6:	e759      	b.n	8001f7c <GPS_getNMEA+0x20>
 80020c8:	080165ec 	.word	0x080165ec
 80020cc:	08016490 	.word	0x08016490
 80020d0:	20000b4c 	.word	0x20000b4c
 80020d4:	0801649c 	.word	0x0801649c
 80020d8:	080164a4 	.word	0x080164a4
 80020dc:	080164ac 	.word	0x080164ac
 80020e0:	20000b44 	.word	0x20000b44
 80020e4:	080164b4 	.word	0x080164b4
 80020e8:	080164c4 	.word	0x080164c4
 80020ec:	080164d0 	.word	0x080164d0

080020f0 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f813 	bl	8002128 <hexchar2int>
 8002102:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f809 	bl	8002128 <hexchar2int>
 8002116:	4602      	mov	r2, r0
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

	return value;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <hexchar2int>:


int hexchar2int(char c)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	2b2f      	cmp	r3, #47	@ 0x2f
 8002136:	d905      	bls.n	8002144 <hexchar2int+0x1c>
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	2b39      	cmp	r3, #57	@ 0x39
 800213c:	d802      	bhi.n	8002144 <hexchar2int+0x1c>
        return (c - '0');
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	3b30      	subs	r3, #48	@ 0x30
 8002142:	e013      	b.n	800216c <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2b40      	cmp	r3, #64	@ 0x40
 8002148:	d905      	bls.n	8002156 <hexchar2int+0x2e>
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b46      	cmp	r3, #70	@ 0x46
 800214e:	d802      	bhi.n	8002156 <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	3b37      	subs	r3, #55	@ 0x37
 8002154:	e00a      	b.n	800216c <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b60      	cmp	r3, #96	@ 0x60
 800215a:	d905      	bls.n	8002168 <hexchar2int+0x40>
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	2b66      	cmp	r3, #102	@ 0x66
 8002160:	d802      	bhi.n	8002168 <hexchar2int+0x40>
        return (c - 'a' + 10);
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	3b57      	subs	r3, #87	@ 0x57
 8002166:	e001      	b.n	800216c <hexchar2int+0x44>
    return (-1);
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 8002184:	212a      	movs	r1, #42	@ 0x2a
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f010 ffa1 	bl	80130ce <strchr>
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d022      	beq.n	80021da <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e009      	b.n	80021b4 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4413      	add	r3, r2
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	4053      	eors	r3, r2
 80021ac:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7fe f85b 	bl	8000270 <strlen>
 80021ba:	4602      	mov	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d8ee      	bhi.n	80021a0 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff92 	bl	80020f0 <hex2int>
 80021cc:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d101      	bne.n	80021da <checksum_valid+0x62>
			return (1);
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <checksum_valid+0x64>
	}

	return (0);
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80021ec:	4820      	ldr	r0, [pc, #128]	@ (8002270 <LED_Task1+0x8c>)
 80021ee:	f000 fce7 	bl	8002bc0 <UART_puts>
 80021f2:	4820      	ldr	r0, [pc, #128]	@ (8002274 <LED_Task1+0x90>)
 80021f4:	f000 fce4 	bl	8002bc0 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <LED_Task1+0x94>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	4618      	mov	r0, r3
 8002202:	f00b fdbf 	bl	800dd84 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e01c      	b.n	800224a <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	b29b      	uxth	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fc87 	bl	8002b28 <LED_put>
           	osDelay(os_delay);
 800221a:	4b18      	ldr	r3, [pc, #96]	@ (800227c <LED_Task1+0x98>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f00a fd90 	bl	800cd44 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8002224:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <LED_Task1+0x9c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8002230:	4814      	ldr	r0, [pc, #80]	@ (8002284 <LED_Task1+0xa0>)
 8002232:	f000 fcc5 	bl	8002bc0 <UART_puts>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fcdd 	bl	8002bf8 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	105b      	asrs	r3, r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b07      	cmp	r3, #7
 800224e:	dddf      	ble.n	8002210 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8002250:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <LED_Task1+0x94>)
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	2300      	movs	r3, #0
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	f00b fb11 	bl	800d880 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <LED_Task1+0xa4>)
 8002260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f3bf 8f4f 	dsb	sy
 800226a:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 800226e:	e7c3      	b.n	80021f8 <LED_Task1+0x14>
 8002270:	080165f8 	.word	0x080165f8
 8002274:	080164dc 	.word	0x080164dc
 8002278:	20000b50 	.word	0x20000b50
 800227c:	20000250 	.word	0x20000250
 8002280:	20000b44 	.word	0x20000b44
 8002284:	080164e8 	.word	0x080164e8
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002294:	4820      	ldr	r0, [pc, #128]	@ (8002318 <LED_Task2+0x8c>)
 8002296:	f000 fc93 	bl	8002bc0 <UART_puts>
 800229a:	4820      	ldr	r0, [pc, #128]	@ (800231c <LED_Task2+0x90>)
 800229c:	f000 fc90 	bl	8002bc0 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 80022a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <LED_Task2+0x94>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	4618      	mov	r0, r3
 80022aa:	f00b fd6b 	bl	800dd84 <xQueueSemaphoreTake>
		leds = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e01c      	b.n	80022f2 <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fc33 	bl	8002b28 <LED_put>
          	osDelay(os_delay);
 80022c2:	4b18      	ldr	r3, [pc, #96]	@ (8002324 <LED_Task2+0x98>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00a fd3c 	bl	800cd44 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <LED_Task2+0x9c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d006      	beq.n	80022e6 <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 80022d8:	4814      	ldr	r0, [pc, #80]	@ (800232c <LED_Task2+0xa0>)
 80022da:	f000 fc71 	bl	8002bc0 <UART_puts>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fc89 	bl	8002bf8 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b07      	cmp	r3, #7
 80022f6:	dddf      	ble.n	80022b8 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <LED_Task2+0x94>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	f00b fabd 	bl	800d880 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <LED_Task2+0xa4>)
 8002308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8002316:	e7c3      	b.n	80022a0 <LED_Task2+0x14>
 8002318:	08016604 	.word	0x08016604
 800231c:	080164dc 	.word	0x080164dc
 8002320:	20000b50 	.word	0x20000b50
 8002324:	20000250 	.word	0x20000250
 8002328:	20000b44 	.word	0x20000b44
 800232c:	080164f4 	.word	0x080164f4
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 800233c:	4830      	ldr	r0, [pc, #192]	@ (8002400 <LED_Task3+0xcc>)
 800233e:	f00c fe6d 	bl	800f01c <xTaskGetHandle>
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 800234a:	482e      	ldr	r0, [pc, #184]	@ (8002404 <LED_Task3+0xd0>)
 800234c:	f7ff fb04 	bl	8001958 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002350:	482d      	ldr	r0, [pc, #180]	@ (8002408 <LED_Task3+0xd4>)
 8002352:	f000 fc35 	bl	8002bc0 <UART_puts>
 8002356:	482d      	ldr	r0, [pc, #180]	@ (800240c <LED_Task3+0xd8>)
 8002358:	f000 fc32 	bl	8002bc0 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 800235c:	4b2c      	ldr	r3, [pc, #176]	@ (8002410 <LED_Task3+0xdc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	4618      	mov	r0, r3
 8002366:	f00b fd0d 	bl	800dd84 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e02d      	b.n	80023cc <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <LED_Task3+0x48>
 8002376:	2318      	movs	r3, #24
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e00d      	b.n	8002398 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d102      	bne.n	8002388 <LED_Task3+0x54>
 8002382:	2324      	movs	r3, #36	@ 0x24
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e007      	b.n	8002398 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d102      	bne.n	8002394 <LED_Task3+0x60>
 800238e:	2342      	movs	r3, #66	@ 0x42
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e001      	b.n	8002398 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8002394:	2381      	movs	r3, #129	@ 0x81
 8002396:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	b29b      	uxth	r3, r3
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fbc3 	bl	8002b28 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <LED_Task3+0xe0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f00a fccc 	bl	800cd44 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <LED_Task3+0xe4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 80023b8:	4818      	ldr	r0, [pc, #96]	@ (800241c <LED_Task3+0xe8>)
 80023ba:	f000 fc01 	bl	8002bc0 <UART_puts>
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 fc19 	bl	8002bf8 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	ddce      	ble.n	8002370 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80023d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <LED_Task3+0xdc>)
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	f00b fa50 	bl	800d880 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 80023e0:	2300      	movs	r3, #0
 80023e2:	2202      	movs	r2, #2
 80023e4:	2100      	movs	r1, #0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f00d fd48 	bl	800fe7c <xTaskGenericNotify>
		osDelay(200);
 80023ec:	20c8      	movs	r0, #200	@ 0xc8
 80023ee:	f00a fca9 	bl	800cd44 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 80023f2:	f04f 31ff 	mov.w	r1, #4294967295
 80023f6:	2001      	movs	r0, #1
 80023f8:	f00d fc94 	bl	800fd24 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 80023fc:	e7ae      	b.n	800235c <LED_Task3+0x28>
 80023fe:	bf00      	nop
 8002400:	08016500 	.word	0x08016500
 8002404:	0801650c 	.word	0x0801650c
 8002408:	08016610 	.word	0x08016610
 800240c:	080164dc 	.word	0x080164dc
 8002410:	20000b50 	.word	0x20000b50
 8002414:	20000250 	.word	0x20000250
 8002418:	20000b44 	.word	0x20000b44
 800241c:	08016518 	.word	0x08016518

08002420 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002428:	4830      	ldr	r0, [pc, #192]	@ (80024ec <LED_Task4+0xcc>)
 800242a:	f00c fdf7 	bl	800f01c <xTaskGetHandle>
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 8002436:	482e      	ldr	r0, [pc, #184]	@ (80024f0 <LED_Task4+0xd0>)
 8002438:	f7ff fa8e 	bl	8001958 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800243c:	482d      	ldr	r0, [pc, #180]	@ (80024f4 <LED_Task4+0xd4>)
 800243e:	f000 fbbf 	bl	8002bc0 <UART_puts>
 8002442:	482d      	ldr	r0, [pc, #180]	@ (80024f8 <LED_Task4+0xd8>)
 8002444:	f000 fbbc 	bl	8002bc0 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	2001      	movs	r0, #1
 800244e:	f00d fc69 	bl	800fd24 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <LED_Task4+0xdc>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f04f 31ff 	mov.w	r1, #4294967295
 800245a:	4618      	mov	r0, r3
 800245c:	f00b fc92 	bl	800dd84 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e02d      	b.n	80024c2 <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <LED_Task4+0x52>
 800246c:	2381      	movs	r3, #129	@ 0x81
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e00d      	b.n	800248e <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d102      	bne.n	800247e <LED_Task4+0x5e>
 8002478:	2342      	movs	r3, #66	@ 0x42
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	e007      	b.n	800248e <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d102      	bne.n	800248a <LED_Task4+0x6a>
 8002484:	2324      	movs	r3, #36	@ 0x24
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e001      	b.n	800248e <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 800248a:	2318      	movs	r3, #24
 800248c:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	b29b      	uxth	r3, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fb48 	bl	8002b28 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <LED_Task4+0xe0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f00a fc51 	bl	800cd44 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <LED_Task4+0xe4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 80024ae:	4816      	ldr	r0, [pc, #88]	@ (8002508 <LED_Task4+0xe8>)
 80024b0:	f000 fb86 	bl	8002bc0 <UART_puts>
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fb9e 	bl	8002bf8 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3301      	adds	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	ddce      	ble.n	8002466 <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <LED_Task4+0xdc>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	2300      	movs	r3, #0
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	f00b f9d5 	bl	800d880 <xQueueGenericSend>
		osDelay(200);
 80024d6:	20c8      	movs	r0, #200	@ 0xc8
 80024d8:	f00a fc34 	bl	800cd44 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80024dc:	2300      	movs	r3, #0
 80024de:	2202      	movs	r2, #2
 80024e0:	2100      	movs	r1, #0
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f00d fcca 	bl	800fe7c <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80024e8:	e7ae      	b.n	8002448 <LED_Task4+0x28>
 80024ea:	bf00      	nop
 80024ec:	08016528 	.word	0x08016528
 80024f0:	08016534 	.word	0x08016534
 80024f4:	0801661c 	.word	0x0801661c
 80024f8:	080164dc 	.word	0x080164dc
 80024fc:	20000b50 	.word	0x20000b50
 8002500:	20000250 	.word	0x20000250
 8002504:	20000b44 	.word	0x20000b44
 8002508:	08016540 	.word	0x08016540

0800250c <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b098      	sub	sp, #96	@ 0x60
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002514:	4810      	ldr	r0, [pc, #64]	@ (8002558 <Student_task1+0x4c>)
 8002516:	f000 fb53 	bl	8002bc0 <UART_puts>
 800251a:	4810      	ldr	r0, [pc, #64]	@ (800255c <Student_task1+0x50>)
 800251c:	f000 fb50 	bl	8002bc0 <UART_puts>
	char buf[80];
	unsigned int i = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 8002524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002528:	f00a fc0c 	bl	800cd44 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <Student_task1+0x54>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f5      	beq.n	8002524 <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8002538:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800253e:	f107 000c 	add.w	r0, r7, #12
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <Student_task1+0x4c>)
 8002544:	4907      	ldr	r1, [pc, #28]	@ (8002564 <Student_task1+0x58>)
 8002546:	f010 fd3b 	bl	8012fc0 <siprintf>
			UART_puts(buf);
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb36 	bl	8002bc0 <UART_puts>
       	osDelay(1000);
 8002554:	e7e6      	b.n	8002524 <Student_task1+0x18>
 8002556:	bf00      	nop
 8002558:	08016628 	.word	0x08016628
 800255c:	08016550 	.word	0x08016550
 8002560:	20000b44 	.word	0x20000b44
 8002564:	0801655c 	.word	0x0801655c

08002568 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 8002574:	e023      	b.n	80025be <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002576:	2201      	movs	r2, #1
 8002578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800257c:	4815      	ldr	r0, [pc, #84]	@ (80025d4 <BUZZER_put+0x6c>)
 800257e:	f001 fe3d 	bl	80041fc <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e002      	b.n	800258e <BUZZER_put+0x26>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3301      	adds	r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	441a      	add	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	429a      	cmp	r2, r3
 8002598:	d8f6      	bhi.n	8002588 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a0:	480c      	ldr	r0, [pc, #48]	@ (80025d4 <BUZZER_put+0x6c>)
 80025a2:	f001 fe2b 	bl	80041fc <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e002      	b.n	80025b2 <BUZZER_put+0x4a>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3301      	adds	r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	441a      	add	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d8f6      	bhi.n	80025ac <BUZZER_put+0x44>
	while (k++<100)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	60ba      	str	r2, [r7, #8]
 80025c4:	2b63      	cmp	r3, #99	@ 0x63
 80025c6:	d9d6      	bls.n	8002576 <BUZZER_put+0xe>
	}
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020800 	.word	0x40020800

080025d8 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b18      	ldr	r3, [pc, #96]	@ (8002644 <KEYS_init+0x6c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <KEYS_init+0x6c>)
 80025e8:	f043 0308 	orr.w	r3, r3, #8
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <KEYS_init+0x6c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002602:	2303      	movs	r3, #3
 8002604:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 8002606:	f640 030e 	movw	r3, #2062	@ 0x80e
 800260a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	4619      	mov	r1, r3
 8002610:	480d      	ldr	r0, [pc, #52]	@ (8002648 <KEYS_init+0x70>)
 8002612:	f001 fc3f 	bl	8003e94 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 8002616:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800261a:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002620:	2302      	movs	r3, #2
 8002622:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	4807      	ldr	r0, [pc, #28]	@ (8002648 <KEYS_init+0x70>)
 800262a:	f001 fc33 	bl	8003e94 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	f640 010e 	movw	r1, #2062	@ 0x80e
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <KEYS_init+0x70>)
 8002636:	f001 fde1 	bl	80041fc <HAL_GPIO_WritePin>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023800 	.word	0x40023800
 8002648:	40020c00 	.word	0x40020c00

0800264c <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800265e:	480e      	ldr	r0, [pc, #56]	@ (8002698 <KEYS_initISR+0x4c>)
 8002660:	f001 fdcc 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	2102      	movs	r1, #2
 800266c:	480a      	ldr	r0, [pc, #40]	@ (8002698 <KEYS_initISR+0x4c>)
 800266e:	f001 fdc5 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	2108      	movs	r1, #8
 800267a:	4807      	ldr	r0, [pc, #28]	@ (8002698 <KEYS_initISR+0x4c>)
 800267c:	f001 fdbe 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	2104      	movs	r1, #4
 8002688:	4803      	ldr	r0, [pc, #12]	@ (8002698 <KEYS_initISR+0x4c>)
 800268a:	f001 fdb7 	bl	80041fc <HAL_GPIO_WritePin>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40020c00 	.word	0x40020c00

0800269c <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026b0:	4827      	ldr	r0, [pc, #156]	@ (8002750 <KEYS_read+0xb4>)
 80026b2:	f001 fda3 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80026b6:	2201      	movs	r2, #1
 80026b8:	2108      	movs	r1, #8
 80026ba:	4825      	ldr	r0, [pc, #148]	@ (8002750 <KEYS_read+0xb4>)
 80026bc:	f001 fd9e 	bl	80041fc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026c0:	f000 f848 	bl	8002754 <KEYS_kolom>
 80026c4:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <KEYS_read+0x36>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	330c      	adds	r3, #12
 80026d0:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2108      	movs	r1, #8
 80026d6:	481e      	ldr	r0, [pc, #120]	@ (8002750 <KEYS_read+0xb4>)
 80026d8:	f001 fd90 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80026dc:	2201      	movs	r2, #1
 80026de:	2104      	movs	r1, #4
 80026e0:	481b      	ldr	r0, [pc, #108]	@ (8002750 <KEYS_read+0xb4>)
 80026e2:	f001 fd8b 	bl	80041fc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026e6:	f000 f835 	bl	8002754 <KEYS_kolom>
 80026ea:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <KEYS_read+0x5c>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	3308      	adds	r3, #8
 80026f6:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2104      	movs	r1, #4
 80026fc:	4814      	ldr	r0, [pc, #80]	@ (8002750 <KEYS_read+0xb4>)
 80026fe:	f001 fd7d 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 8002702:	2201      	movs	r2, #1
 8002704:	2102      	movs	r1, #2
 8002706:	4812      	ldr	r0, [pc, #72]	@ (8002750 <KEYS_read+0xb4>)
 8002708:	f001 fd78 	bl	80041fc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800270c:	f000 f822 	bl	8002754 <KEYS_kolom>
 8002710:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <KEYS_read+0x82>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	3304      	adds	r3, #4
 800271c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 800271e:	2200      	movs	r2, #0
 8002720:	2102      	movs	r1, #2
 8002722:	480b      	ldr	r0, [pc, #44]	@ (8002750 <KEYS_read+0xb4>)
 8002724:	f001 fd6a 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8002728:	2201      	movs	r2, #1
 800272a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800272e:	4808      	ldr	r0, [pc, #32]	@ (8002750 <KEYS_read+0xb4>)
 8002730:	f001 fd64 	bl	80041fc <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002734:	f000 f80e 	bl	8002754 <KEYS_kolom>
 8002738:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <KEYS_read+0xa8>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	607b      	str	r3, [r7, #4]

	return out;
 8002744:	687b      	ldr	r3, [r7, #4]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020c00 	.word	0x40020c00

08002754 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 800275e:	2140      	movs	r1, #64	@ 0x40
 8002760:	4814      	ldr	r0, [pc, #80]	@ (80027b4 <KEYS_kolom+0x60>)
 8002762:	f001 fd33 	bl	80041cc <HAL_GPIO_ReadPin>
 8002766:	4603      	mov	r3, r0
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <KEYS_kolom+0x1c>
 800276c:	2301      	movs	r3, #1
 800276e:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	4810      	ldr	r0, [pc, #64]	@ (80027b4 <KEYS_kolom+0x60>)
 8002774:	f001 fd2a 	bl	80041cc <HAL_GPIO_ReadPin>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <KEYS_kolom+0x2e>
 800277e:	2302      	movs	r3, #2
 8002780:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 8002782:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002786:	480b      	ldr	r0, [pc, #44]	@ (80027b4 <KEYS_kolom+0x60>)
 8002788:	f001 fd20 	bl	80041cc <HAL_GPIO_ReadPin>
 800278c:	4603      	mov	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <KEYS_kolom+0x42>
 8002792:	2303      	movs	r3, #3
 8002794:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 8002796:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800279a:	4806      	ldr	r0, [pc, #24]	@ (80027b4 <KEYS_kolom+0x60>)
 800279c:	f001 fd16 	bl	80041cc <HAL_GPIO_ReadPin>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <KEYS_kolom+0x56>
 80027a6:	2304      	movs	r3, #4
 80027a8:	607b      	str	r3, [r7, #4]
	return key;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40020c00 	.word	0x40020c00

080027b8 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	2108      	movs	r1, #8
 80027c0:	4809      	ldr	r0, [pc, #36]	@ (80027e8 <ClearBits+0x30>)
 80027c2:	f001 fd1b 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2110      	movs	r1, #16
 80027ca:	4807      	ldr	r0, [pc, #28]	@ (80027e8 <ClearBits+0x30>)
 80027cc:	f001 fd16 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2120      	movs	r1, #32
 80027d4:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <ClearBits+0x30>)
 80027d6:	f001 fd11 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80027da:	2200      	movs	r2, #0
 80027dc:	2140      	movs	r1, #64	@ 0x40
 80027de:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <ClearBits+0x30>)
 80027e0:	f001 fd0c 	bl	80041fc <HAL_GPIO_WritePin>
}
 80027e4:	bf00      	nop
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000

080027ec <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 80027f0:	2001      	movs	r0, #1
 80027f2:	f000 f967 	bl	8002ac4 <LCD_writecontrol>
   curpos=0;               // reset position
 80027f6:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <LCD_clear+0x1c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 80027fc:	2005      	movs	r0, #5
 80027fe:	f001 f9b1 	bl	8003b64 <HAL_Delay>
//   busyflag();

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000c37 	.word	0x20000c37

0800280c <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b44      	ldr	r3, [pc, #272]	@ (8002928 <LCD_init+0x11c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a43      	ldr	r2, [pc, #268]	@ (8002928 <LCD_init+0x11c>)
 800281c:	f043 0310 	orr.w	r3, r3, #16
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <LCD_init+0x11c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	4b3d      	ldr	r3, [pc, #244]	@ (8002928 <LCD_init+0x11c>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a3c      	ldr	r2, [pc, #240]	@ (8002928 <LCD_init+0x11c>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b3a      	ldr	r3, [pc, #232]	@ (8002928 <LCD_init+0x11c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	603b      	str	r3, [r7, #0]
 800284e:	4b36      	ldr	r3, [pc, #216]	@ (8002928 <LCD_init+0x11c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a35      	ldr	r2, [pc, #212]	@ (8002928 <LCD_init+0x11c>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b33      	ldr	r3, [pc, #204]	@ (8002928 <LCD_init+0x11c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286e:	2303      	movs	r3, #3
 8002870:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8002872:	2378      	movs	r3, #120	@ 0x78
 8002874:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4619      	mov	r1, r3
 800287c:	482b      	ldr	r0, [pc, #172]	@ (800292c <LCD_init+0x120>)
 800287e:	f001 fb09 	bl	8003e94 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8002882:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002886:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4619      	mov	r1, r3
 800288e:	4828      	ldr	r0, [pc, #160]	@ (8002930 <LCD_init+0x124>)
 8002890:	f001 fb00 	bl	8003e94 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8002894:	2301      	movs	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8002898:	f107 030c 	add.w	r3, r7, #12
 800289c:	4619      	mov	r1, r3
 800289e:	4825      	ldr	r0, [pc, #148]	@ (8002934 <LCD_init+0x128>)
 80028a0:	f001 faf8 	bl	8003e94 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80028a4:	2200      	movs	r2, #0
 80028a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028aa:	4821      	ldr	r0, [pc, #132]	@ (8002930 <LCD_init+0x124>)
 80028ac:	f001 fca6 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	481f      	ldr	r0, [pc, #124]	@ (8002934 <LCD_init+0x128>)
 80028b6:	f001 fca1 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028c0:	481b      	ldr	r0, [pc, #108]	@ (8002930 <LCD_init+0x124>)
 80028c2:	f001 fc9b 	bl	80041fc <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 80028c6:	200f      	movs	r0, #15
 80028c8:	f001 f94c 	bl	8003b64 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 80028cc:	2030      	movs	r0, #48	@ 0x30
 80028ce:	f000 f8c7 	bl	8002a60 <LCD_writebyte>
    HAL_Delay(70);
 80028d2:	2046      	movs	r0, #70	@ 0x46
 80028d4:	f001 f946 	bl	8003b64 <HAL_Delay>
    LCD_writebyte(0x30);
 80028d8:	2030      	movs	r0, #48	@ 0x30
 80028da:	f000 f8c1 	bl	8002a60 <LCD_writebyte>
    LCD_writebyte(0x30);
 80028de:	2030      	movs	r0, #48	@ 0x30
 80028e0:	f000 f8be 	bl	8002a60 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 80028e4:	2002      	movs	r0, #2
 80028e6:	f000 f8bb 	bl	8002a60 <LCD_writebyte>
    HAL_Delay(5);
 80028ea:	2005      	movs	r0, #5
 80028ec:	f001 f93a 	bl	8003b64 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 80028f0:	202c      	movs	r0, #44	@ 0x2c
 80028f2:	f000 f8b5 	bl	8002a60 <LCD_writebyte>
    HAL_Delay(15);
 80028f6:	200f      	movs	r0, #15
 80028f8:	f001 f934 	bl	8003b64 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 80028fc:	200c      	movs	r0, #12
 80028fe:	f000 f8af 	bl	8002a60 <LCD_writebyte>
    HAL_Delay(15);
 8002902:	200f      	movs	r0, #15
 8002904:	f001 f92e 	bl	8003b64 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002908:	2001      	movs	r0, #1
 800290a:	f000 f8a9 	bl	8002a60 <LCD_writebyte>
    HAL_Delay(15);
 800290e:	200f      	movs	r0, #15
 8002910:	f001 f928 	bl	8003b64 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8002914:	2006      	movs	r0, #6
 8002916:	f000 f8a3 	bl	8002a60 <LCD_writebyte>
    HAL_Delay(15);
 800291a:	200f      	movs	r0, #15
 800291c:	f001 f922 	bl	8003b64 <HAL_Delay>
}
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	40021000 	.word	0x40021000
 8002930:	40020800 	.word	0x40020800
 8002934:	40020c00 	.word	0x40020c00

08002938 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8002942:	2201      	movs	r2, #1
 8002944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002948:	480b      	ldr	r0, [pc, #44]	@ (8002978 <LCD_putchar+0x40>)
 800294a:	f001 fc57 	bl	80041fc <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f885 	bl	8002a60 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <LCD_putchar+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b07      	ldr	r3, [pc, #28]	@ (800297c <LCD_putchar+0x44>)
 8002960:	701a      	strb	r2, [r3, #0]
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <LCD_putchar+0x44>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b20      	cmp	r3, #32
 8002968:	d102      	bne.n	8002970 <LCD_putchar+0x38>
    	curpos=0;
 800296a:	4b04      	ldr	r3, [pc, #16]	@ (800297c <LCD_putchar+0x44>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40020800 	.word	0x40020800
 800297c:	20000c37 	.word	0x20000c37

08002980 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8002988:	2300      	movs	r3, #0
 800298a:	73bb      	strb	r3, [r7, #14]
 800298c:	e019      	b.n	80029c2 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <LCD_put+0x58>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d10b      	bne.n	80029ae <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e005      	b.n	80029a8 <LCD_put+0x28>
 800299c:	2014      	movs	r0, #20
 800299e:	f000 f891 	bl	8002ac4 <LCD_writecontrol>
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	3301      	adds	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b1f      	cmp	r3, #31
 80029ac:	d9f6      	bls.n	800299c <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 80029ae:	7bbb      	ldrb	r3, [r7, #14]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ffbe 	bl	8002938 <LCD_putchar>
    for (k=0; string[k]; k++)
 80029bc:	7bbb      	ldrb	r3, [r7, #14]
 80029be:	3301      	adds	r3, #1
 80029c0:	73bb      	strb	r3, [r7, #14]
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1df      	bne.n	800298e <LCD_put+0xe>
    }
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20000c37 	.word	0x20000c37

080029dc <LCD_puts>:

void LCD_puts(char *c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ffcb 	bl	8002980 <LCD_put>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 80029fe:	f7ff fedb 	bl	80027b8 <ClearBits>

    if (data & 0x01)
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	2140      	movs	r1, #64	@ 0x40
 8002a10:	4812      	ldr	r0, [pc, #72]	@ (8002a5c <LCD_writenibble+0x68>)
 8002a12:	f001 fbf3 	bl	80041fc <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	2120      	movs	r1, #32
 8002a24:	480d      	ldr	r0, [pc, #52]	@ (8002a5c <LCD_writenibble+0x68>)
 8002a26:	f001 fbe9 	bl	80041fc <HAL_GPIO_WritePin>

	if (data & 0x04)
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d004      	beq.n	8002a3e <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2110      	movs	r1, #16
 8002a38:	4808      	ldr	r0, [pc, #32]	@ (8002a5c <LCD_writenibble+0x68>)
 8002a3a:	f001 fbdf 	bl	80041fc <HAL_GPIO_WritePin>

	if (data & 0x08)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2108      	movs	r1, #8
 8002a4c:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <LCD_writenibble+0x68>)
 8002a4e:	f001 fbd5 	bl	80041fc <HAL_GPIO_WritePin>

}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000

08002a60 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4814      	ldr	r0, [pc, #80]	@ (8002ac0 <LCD_writebyte+0x60>)
 8002a70:	f001 fbc4 	bl	80041fc <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff ffba 	bl	80029f4 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2101      	movs	r1, #1
 8002a84:	480e      	ldr	r0, [pc, #56]	@ (8002ac0 <LCD_writebyte+0x60>)
 8002a86:	f001 fbb9 	bl	80041fc <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002a8a:	2002      	movs	r0, #2
 8002a8c:	f001 f86a 	bl	8003b64 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a90:	2201      	movs	r2, #1
 8002a92:	2101      	movs	r1, #1
 8002a94:	480a      	ldr	r0, [pc, #40]	@ (8002ac0 <LCD_writebyte+0x60>)
 8002a96:	f001 fbb1 	bl	80041fc <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffa6 	bl	80029f4 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4804      	ldr	r0, [pc, #16]	@ (8002ac0 <LCD_writebyte+0x60>)
 8002aae:	f001 fba5 	bl	80041fc <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002ab2:	2002      	movs	r0, #2
 8002ab4:	f001 f856 	bl	8003b64 <HAL_Delay>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40020c00 	.word	0x40020c00

08002ac4 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ad4:	4805      	ldr	r0, [pc, #20]	@ (8002aec <LCD_writecontrol+0x28>)
 8002ad6:	f001 fb91 	bl	80041fc <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ffbf 	bl	8002a60 <LCD_writebyte>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40020800 	.word	0x40020800

08002af0 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002afa:	4809      	ldr	r0, [pc, #36]	@ (8002b20 <LED_init+0x30>)
 8002afc:	f001 fb7e 	bl	80041fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b06:	4807      	ldr	r0, [pc, #28]	@ (8002b24 <LED_init+0x34>)
 8002b08:	f001 fb78 	bl	80041fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4804      	ldr	r0, [pc, #16]	@ (8002b24 <LED_init+0x34>)
 8002b12:	f001 fb73 	bl	80041fc <HAL_GPIO_WritePin>
    LED_put(0);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f000 f806 	bl	8002b28 <LED_put>
}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40020000 	.word	0x40020000
 8002b24:	40020400 	.word	0x40020400

08002b28 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e01c      	b.n	8002b72 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b4e:	4811      	ldr	r0, [pc, #68]	@ (8002b94 <LED_put+0x6c>)
 8002b50:	f001 fb54 	bl	80041fc <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002b54:	2201      	movs	r2, #1
 8002b56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b5a:	480f      	ldr	r0, [pc, #60]	@ (8002b98 <LED_put+0x70>)
 8002b5c:	f001 fb4e 	bl	80041fc <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b66:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <LED_put+0x70>)
 8002b68:	f001 fb48 	bl	80041fc <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1df      	bne.n	8002b38 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4806      	ldr	r0, [pc, #24]	@ (8002b98 <LED_put+0x70>)
 8002b7e:	f001 fb3d 	bl	80041fc <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2102      	movs	r1, #2
 8002b86:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <LED_put+0x70>)
 8002b88:	f001 fb38 	bl	80041fc <HAL_GPIO_WritePin>
}
 8002b8c:	bf00      	nop
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400

08002b9c <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002ba6:	1df9      	adds	r1, r7, #7
 8002ba8:	2364      	movs	r3, #100	@ 0x64
 8002baa:	2201      	movs	r2, #1
 8002bac:	4803      	ldr	r0, [pc, #12]	@ (8002bbc <UART_putchar+0x20>)
 8002bae:	f005 fc15 	bl	80083dc <HAL_UART_Transmit>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000d74 	.word	0x20000d74

08002bc0 <UART_puts>:

void UART_puts(const char *s)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e009      	b.n	8002be2 <UART_puts+0x22>
		UART_putchar(s[i]);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ffe0 	bl	8002b9c <UART_putchar>
	for (i=0; s[i]; i++)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3301      	adds	r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1ef      	bne.n	8002bce <UART_puts+0xe>
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002c00:	210a      	movs	r1, #10
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f804 	bl	8002c10 <UART_putnum>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002c1c:	230f      	movs	r3, #15
 8002c1e:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d129      	bne.n	8002c7a <UART_putnum+0x6a>
    {
        c[i]='0';
 8002c26:	f107 0208 	add.w	r2, r7, #8
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	2230      	movs	r2, #48	@ 0x30
 8002c30:	701a      	strb	r2, [r3, #0]
        i--;
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	e030      	b.n	8002c9c <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c42:	fb01 f202 	mul.w	r2, r1, r2
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c52:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002c54:	4a15      	ldr	r2, [pc, #84]	@ (8002cac <UART_putnum+0x9c>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4413      	add	r3, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b259      	sxtb	r1, r3
 8002c5e:	f107 0208 	add.w	r2, r7, #8
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	4413      	add	r3, r2
 8002c66:	460a      	mov	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]
            i--;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <UART_putnum+0x6a>
                num=0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1dc      	bne.n	8002c3a <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002c80:	e00c      	b.n	8002c9c <UART_putnum+0x8c>
    {
        i++;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002c88:	f107 0208 	add.w	r2, r7, #8
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f993 3000 	ldrsb.w	r3, [r3]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff ff80 	bl	8002b9c <UART_putchar>
    while(i<15)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2b0e      	cmp	r3, #14
 8002ca0:	ddef      	ble.n	8002c82 <UART_putnum+0x72>
    }
}
 8002ca2:	bf00      	nop
 8002ca4:	bf00      	nop
 8002ca6:	3720      	adds	r7, #32
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000254 	.word	0x20000254

08002cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cb4:	f000 ff14 	bl	8003ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cb8:	f000 f830 	bl	8002d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cbc:	f000 f980 	bl	8002fc0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002cc0:	f000 f896 	bl	8002df0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002cc4:	f000 f8c2 	bl	8002e4c <MX_I2S3_Init>
  MX_SPI1_Init();
 8002cc8:	f000 f8f0 	bl	8002eac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002ccc:	f000 f94e 	bl	8002f6c <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002cd0:	f000 f922 	bl	8002f18 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002cd4:	f7ff fd9a 	bl	800280c <LCD_init>
  KEYS_init();
 8002cd8:	f7ff fc7e 	bl	80025d8 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f7ff fcb5 	bl	800264c <KEYS_initISR>
  LED_init();
 8002ce2:	f7ff ff05 	bl	8002af0 <LED_init>

  DisplayVersion();
 8002ce6:	f7fe fdc9 	bl	800187c <DisplayVersion>
  osDelay(500); // time to read version
 8002cea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cee:	f00a f829 	bl	800cd44 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cf2:	f009 ff0d 	bl	800cb10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cf6:	4a06      	ldr	r2, [pc, #24]	@ (8002d10 <main+0x60>)
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4806      	ldr	r0, [pc, #24]	@ (8002d14 <main+0x64>)
 8002cfc:	f009 ff90 	bl	800cc20 <osThreadNew>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <main+0x68>)
 8002d04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d06:	f009 ff4f 	bl	800cba8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <main+0x5a>
 8002d0e:	bf00      	nop
 8002d10:	08016638 	.word	0x08016638
 8002d14:	080032e9 	.word	0x080032e9
 8002d18:	20000dbc 	.word	0x20000dbc

08002d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b094      	sub	sp, #80	@ 0x50
 8002d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d22:	f107 0320 	add.w	r3, r7, #32
 8002d26:	2230      	movs	r2, #48	@ 0x30
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f010 f9c7 	bl	80130be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	2300      	movs	r3, #0
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <SystemClock_Config+0xcc>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	4a27      	ldr	r2, [pc, #156]	@ (8002de8 <SystemClock_Config+0xcc>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d50:	4b25      	ldr	r3, [pc, #148]	@ (8002de8 <SystemClock_Config+0xcc>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <SystemClock_Config+0xd0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a21      	ldr	r2, [pc, #132]	@ (8002dec <SystemClock_Config+0xd0>)
 8002d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <SystemClock_Config+0xd0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d82:	2302      	movs	r3, #2
 8002d84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d8c:	2308      	movs	r3, #8
 8002d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d90:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002d94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9e:	f107 0320 	add.w	r3, r7, #32
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 f99a 	bl	80070dc <HAL_RCC_OscConfig>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002dae:	f000 fadf 	bl	8003370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db2:	230f      	movs	r3, #15
 8002db4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db6:	2302      	movs	r3, #2
 8002db8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	2105      	movs	r1, #5
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 fbfb 	bl	80075cc <HAL_RCC_ClockConfig>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ddc:	f000 fac8 	bl	8003370 <Error_Handler>
  }
}
 8002de0:	bf00      	nop
 8002de2:	3750      	adds	r7, #80	@ 0x50
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000

08002df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002df4:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002df6:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <MX_I2C1_Init+0x54>)
 8002df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002dfc:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <MX_I2C1_Init+0x58>)
 8002dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e14:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e1a:	4b09      	ldr	r3, [pc, #36]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e20:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e26:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e2c:	4804      	ldr	r0, [pc, #16]	@ (8002e40 <MX_I2C1_Init+0x50>)
 8002e2e:	f003 fb71 	bl	8006514 <HAL_I2C_Init>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e38:	f000 fa9a 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000c38 	.word	0x20000c38
 8002e44:	40005400 	.word	0x40005400
 8002e48:	000186a0 	.word	0x000186a0

08002e4c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e52:	4a14      	ldr	r2, [pc, #80]	@ (8002ea4 <MX_I2S3_Init+0x58>)
 8002e54:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e70:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <MX_I2S3_Init+0x5c>)
 8002e76:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002e78:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002e7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002e8a:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <MX_I2S3_Init+0x54>)
 8002e8c:	f003 fc86 	bl	800679c <HAL_I2S_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002e96:	f000 fa6b 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000c8c 	.word	0x20000c8c
 8002ea4:	40003c00 	.word	0x40003c00
 8002ea8:	00017700 	.word	0x00017700

08002eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002eb0:	4b17      	ldr	r3, [pc, #92]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002eb2:	4a18      	ldr	r2, [pc, #96]	@ (8002f14 <MX_SPI1_Init+0x68>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eb6:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002eb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ebe:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ec4:	4b12      	ldr	r3, [pc, #72]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002edc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ede:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eea:	4b09      	ldr	r3, [pc, #36]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef0:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ef6:	4b06      	ldr	r3, [pc, #24]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002ef8:	220a      	movs	r2, #10
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002efc:	4804      	ldr	r0, [pc, #16]	@ (8002f10 <MX_SPI1_Init+0x64>)
 8002efe:	f004 fef9 	bl	8007cf4 <HAL_SPI_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f08:	f000 fa32 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000cd4 	.word	0x20000cd4
 8002f14:	40013000 	.word	0x40013000

08002f18 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f1e:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <MX_UART4_Init+0x50>)
 8002f20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002f22:	4b10      	ldr	r3, [pc, #64]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f4e:	4805      	ldr	r0, [pc, #20]	@ (8002f64 <MX_UART4_Init+0x4c>)
 8002f50:	f005 f9f4 	bl	800833c <HAL_UART_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f5a:	f000 fa09 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000d2c 	.word	0x20000d2c
 8002f68:	40004c00 	.word	0x40004c00

08002f6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f72:	4a12      	ldr	r2, [pc, #72]	@ (8002fbc <MX_USART2_UART_Init+0x50>)
 8002f74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f92:	220c      	movs	r2, #12
 8002f94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f96:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fa2:	4805      	ldr	r0, [pc, #20]	@ (8002fb8 <MX_USART2_UART_Init+0x4c>)
 8002fa4:	f005 f9ca 	bl	800833c <HAL_UART_Init>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fae:	f000 f9df 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000d74 	.word	0x20000d74
 8002fbc:	40004400 	.word	0x40004400

08002fc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	@ 0x30
 8002fc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	4b8e      	ldr	r3, [pc, #568]	@ (8003214 <MX_GPIO_Init+0x254>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a8d      	ldr	r2, [pc, #564]	@ (8003214 <MX_GPIO_Init+0x254>)
 8002fe0:	f043 0310 	orr.w	r3, r3, #16
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8003214 <MX_GPIO_Init+0x254>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	4b87      	ldr	r3, [pc, #540]	@ (8003214 <MX_GPIO_Init+0x254>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a86      	ldr	r2, [pc, #536]	@ (8003214 <MX_GPIO_Init+0x254>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b84      	ldr	r3, [pc, #528]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	4b80      	ldr	r3, [pc, #512]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	4a7f      	ldr	r2, [pc, #508]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800301c:	6313      	str	r3, [r2, #48]	@ 0x30
 800301e:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b79      	ldr	r3, [pc, #484]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4a78      	ldr	r2, [pc, #480]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <MX_GPIO_Init+0x254>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b72      	ldr	r3, [pc, #456]	@ (8003214 <MX_GPIO_Init+0x254>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	4a71      	ldr	r2, [pc, #452]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6313      	str	r3, [r2, #48]	@ 0x30
 8003056:	4b6f      	ldr	r3, [pc, #444]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	4b6b      	ldr	r3, [pc, #428]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	4a6a      	ldr	r2, [pc, #424]	@ (8003214 <MX_GPIO_Init+0x254>)
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30
 8003072:	4b68      	ldr	r3, [pc, #416]	@ (8003214 <MX_GPIO_Init+0x254>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800307e:	2200      	movs	r2, #0
 8003080:	2108      	movs	r1, #8
 8003082:	4865      	ldr	r0, [pc, #404]	@ (8003218 <MX_GPIO_Init+0x258>)
 8003084:	f001 f8ba 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	2101      	movs	r1, #1
 800308c:	4863      	ldr	r0, [pc, #396]	@ (800321c <MX_GPIO_Init+0x25c>)
 800308e:	f001 f8b5 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8003098:	4861      	ldr	r0, [pc, #388]	@ (8003220 <MX_GPIO_Init+0x260>)
 800309a:	f001 f8af 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800309e:	2200      	movs	r2, #0
 80030a0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80030a4:	485f      	ldr	r0, [pc, #380]	@ (8003224 <MX_GPIO_Init+0x264>)
 80030a6:	f001 f8a9 	bl	80041fc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030b0:	485a      	ldr	r0, [pc, #360]	@ (800321c <MX_GPIO_Init+0x25c>)
 80030b2:	f001 f8a3 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030bc:	485a      	ldr	r0, [pc, #360]	@ (8003228 <MX_GPIO_Init+0x268>)
 80030be:	f001 f89d 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80030c2:	2308      	movs	r3, #8
 80030c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 031c 	add.w	r3, r7, #28
 80030d6:	4619      	mov	r1, r3
 80030d8:	484f      	ldr	r0, [pc, #316]	@ (8003218 <MX_GPIO_Init+0x258>)
 80030da:	f000 fedb 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 80030de:	f240 1301 	movw	r3, #257	@ 0x101
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e4:	2301      	movs	r3, #1
 80030e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	4619      	mov	r1, r3
 80030f6:	4849      	ldr	r0, [pc, #292]	@ (800321c <MX_GPIO_Init+0x25c>)
 80030f8:	f000 fecc 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80030fc:	2308      	movs	r3, #8
 80030fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800310c:	2305      	movs	r3, #5
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	4841      	ldr	r0, [pc, #260]	@ (800321c <MX_GPIO_Init+0x25c>)
 8003118:	f000 febc 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 800311c:	2301      	movs	r3, #1
 800311e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003120:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 800312a:	f107 031c 	add.w	r3, r7, #28
 800312e:	4619      	mov	r1, r3
 8003130:	483b      	ldr	r0, [pc, #236]	@ (8003220 <MX_GPIO_Init+0x260>)
 8003132:	f000 feaf 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8003136:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800313a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313c:	2301      	movs	r3, #1
 800313e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2300      	movs	r3, #0
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003148:	f107 031c 	add.w	r3, r7, #28
 800314c:	4619      	mov	r1, r3
 800314e:	4834      	ldr	r0, [pc, #208]	@ (8003220 <MX_GPIO_Init+0x260>)
 8003150:	f000 fea0 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003154:	2304      	movs	r3, #4
 8003156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	4619      	mov	r1, r3
 8003166:	482e      	ldr	r0, [pc, #184]	@ (8003220 <MX_GPIO_Init+0x260>)
 8003168:	f000 fe94 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800316c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800317e:	2305      	movs	r3, #5
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 031c 	add.w	r3, r7, #28
 8003186:	4619      	mov	r1, r3
 8003188:	4825      	ldr	r0, [pc, #148]	@ (8003220 <MX_GPIO_Init+0x260>)
 800318a:	f000 fe83 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800318e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8003192:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003194:	2301      	movs	r3, #1
 8003196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a0:	f107 031c 	add.w	r3, r7, #28
 80031a4:	4619      	mov	r1, r3
 80031a6:	481f      	ldr	r0, [pc, #124]	@ (8003224 <MX_GPIO_Init+0x264>)
 80031a8:	f000 fe74 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 80031ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	4619      	mov	r1, r3
 80031c4:	4818      	ldr	r0, [pc, #96]	@ (8003228 <MX_GPIO_Init+0x268>)
 80031c6:	f000 fe65 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80031ca:	2320      	movs	r3, #32
 80031cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	4619      	mov	r1, r3
 80031dc:	4811      	ldr	r0, [pc, #68]	@ (8003224 <MX_GPIO_Init+0x264>)
 80031de:	f000 fe59 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80031e2:	2302      	movs	r3, #2
 80031e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031e6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	4619      	mov	r1, r3
 80031f6:	4808      	ldr	r0, [pc, #32]	@ (8003218 <MX_GPIO_Init+0x258>)
 80031f8:	f000 fe4c 	bl	8003e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80031fc:	2200      	movs	r2, #0
 80031fe:	2105      	movs	r1, #5
 8003200:	2006      	movs	r0, #6
 8003202:	f000 fd8b 	bl	8003d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003206:	2006      	movs	r0, #6
 8003208:	f000 fda4 	bl	8003d54 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800320c:	bf00      	nop
 800320e:	3730      	adds	r7, #48	@ 0x30
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	40021000 	.word	0x40021000
 800321c:	40020800 	.word	0x40020800
 8003220:	40020400 	.word	0x40020400
 8003224:	40020c00 	.word	0x40020c00
 8003228:	40020000 	.word	0x40020000

0800322c <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a23      	ldr	r2, [pc, #140]	@ (80032cc <HAL_UART_RxCpltCallback+0xa0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d11d      	bne.n	800327e <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 8003242:	f107 030e 	add.w	r3, r7, #14
 8003246:	2201      	movs	r2, #1
 8003248:	4619      	mov	r1, r3
 800324a:	4821      	ldr	r0, [pc, #132]	@ (80032d0 <HAL_UART_RxCpltCallback+0xa4>)
 800324c:	f005 f951 	bl	80084f2 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 8003250:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <HAL_UART_RxCpltCallback+0xa8>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f107 0208 	add.w	r2, r7, #8
 8003258:	f107 010e 	add.w	r1, r7, #14
 800325c:	2300      	movs	r3, #0
 800325e:	f00a fc11 	bl	800da84 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_UART_RxCpltCallback+0x52>
 800326e:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <HAL_UART_RxCpltCallback+0xac>)
 8003270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <HAL_UART_RxCpltCallback+0xb0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d11d      	bne.n	80032c4 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8003288:	f107 030f 	add.w	r3, r7, #15
 800328c:	2201      	movs	r2, #1
 800328e:	4619      	mov	r1, r3
 8003290:	4813      	ldr	r0, [pc, #76]	@ (80032e0 <HAL_UART_RxCpltCallback+0xb4>)
 8003292:	f005 f92e 	bl	80084f2 <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 8003296:	4b13      	ldr	r3, [pc, #76]	@ (80032e4 <HAL_UART_RxCpltCallback+0xb8>)
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	f107 0208 	add.w	r2, r7, #8
 800329e:	f107 010f 	add.w	r1, r7, #15
 80032a2:	2300      	movs	r3, #0
 80032a4:	f00a fbee 	bl	800da84 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_UART_RxCpltCallback+0x98>
 80032b4:	4b08      	ldr	r3, [pc, #32]	@ (80032d8 <HAL_UART_RxCpltCallback+0xac>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
	}

}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40004400 	.word	0x40004400
 80032d0:	20000d74 	.word	0x20000d74
 80032d4:	20000b48 	.word	0x20000b48
 80032d8:	e000ed04 	.word	0xe000ed04
 80032dc:	40004c00 	.word	0x40004c00
 80032e0:	20000d2c 	.word	0x20000d2c
 80032e4:	20000b4c 	.word	0x20000b4c

080032e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80032f0:	f00d fef2 	bl	80110d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 80032f4:	f7fe fb48 	bl	8001988 <CreateHandles>
  CreateTasks();
 80032f8:	f7fe fbe6 	bl	8001ac8 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 80032fc:	f107 030e 	add.w	r3, r7, #14
 8003300:	2201      	movs	r2, #1
 8003302:	4619      	mov	r1, r3
 8003304:	480d      	ldr	r0, [pc, #52]	@ (800333c <StartDefaultTask+0x54>)
 8003306:	f005 f8f4 	bl	80084f2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 800330a:	f107 030f 	add.w	r3, r7, #15
 800330e:	2201      	movs	r2, #1
 8003310:	4619      	mov	r1, r3
 8003312:	480b      	ldr	r0, [pc, #44]	@ (8003340 <StartDefaultTask+0x58>)
 8003314:	f005 f8ed 	bl	80084f2 <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fc6c 	bl	8002bf8 <UART_putint>
 8003320:	4808      	ldr	r0, [pc, #32]	@ (8003344 <StartDefaultTask+0x5c>)
 8003322:	f7ff fc4d 	bl	8002bc0 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003326:	2001      	movs	r0, #1
 8003328:	f009 fd0c 	bl	800cd44 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <StartDefaultTask+0x60>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f00b fa21 	bl	800e778 <vTaskDelete>
    osDelay(1);
 8003336:	bf00      	nop
 8003338:	e7f5      	b.n	8003326 <StartDefaultTask+0x3e>
 800333a:	bf00      	nop
 800333c:	20000d74 	.word	0x20000d74
 8003340:	20000d2c 	.word	0x20000d2c
 8003344:	08016574 	.word	0x08016574
 8003348:	20000dbc 	.word	0x20000dbc

0800334c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a04      	ldr	r2, [pc, #16]	@ (800336c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800335e:	f000 fbe1 	bl	8003b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000

08003370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003374:	b672      	cpsid	i
}
 8003376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <Error_Handler+0x8>

0800337c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <HAL_MspInit+0x54>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	4a11      	ldr	r2, [pc, #68]	@ (80033d0 <HAL_MspInit+0x54>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003390:	6453      	str	r3, [r2, #68]	@ 0x44
 8003392:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <HAL_MspInit+0x54>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	@ (80033d0 <HAL_MspInit+0x54>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <HAL_MspInit+0x54>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ae:	4b08      	ldr	r3, [pc, #32]	@ (80033d0 <HAL_MspInit+0x54>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	210f      	movs	r1, #15
 80033be:	f06f 0001 	mvn.w	r0, #1
 80033c2:	f000 fcab 	bl	8003d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	@ 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_I2C_MspInit+0x84>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d12c      	bne.n	8003450 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b18      	ldr	r3, [pc, #96]	@ (800345c <HAL_I2C_MspInit+0x88>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a17      	ldr	r2, [pc, #92]	@ (800345c <HAL_I2C_MspInit+0x88>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b15      	ldr	r3, [pc, #84]	@ (800345c <HAL_I2C_MspInit+0x88>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003412:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003418:	2312      	movs	r3, #18
 800341a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800341c:	2301      	movs	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003424:	2304      	movs	r3, #4
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	480c      	ldr	r0, [pc, #48]	@ (8003460 <HAL_I2C_MspInit+0x8c>)
 8003430:	f000 fd30 	bl	8003e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HAL_I2C_MspInit+0x88>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	4a07      	ldr	r2, [pc, #28]	@ (800345c <HAL_I2C_MspInit+0x88>)
 800343e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003442:	6413      	str	r3, [r2, #64]	@ 0x40
 8003444:	4b05      	ldr	r3, [pc, #20]	@ (800345c <HAL_I2C_MspInit+0x88>)
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003450:	bf00      	nop
 8003452:	3728      	adds	r7, #40	@ 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40005400 	.word	0x40005400
 800345c:	40023800 	.word	0x40023800
 8003460:	40020400 	.word	0x40020400

08003464 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	@ 0x38
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a31      	ldr	r2, [pc, #196]	@ (8003554 <HAL_I2S_MspInit+0xf0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d15a      	bne.n	800354a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003494:	2301      	movs	r3, #1
 8003496:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003498:	23c0      	movs	r3, #192	@ 0xc0
 800349a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800349c:	2302      	movs	r3, #2
 800349e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4618      	mov	r0, r3
 80034a6:	f004 fae3 	bl	8007a70 <HAL_RCCEx_PeriphCLKConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80034b0:	f7ff ff5e 	bl	8003370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034b4:	2300      	movs	r3, #0
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	4b27      	ldr	r3, [pc, #156]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	4a26      	ldr	r2, [pc, #152]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80034c4:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80034fc:	4b16      	ldr	r3, [pc, #88]	@ (8003558 <HAL_I2S_MspInit+0xf4>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003508:	2310      	movs	r3, #16
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350c:	2302      	movs	r3, #2
 800350e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	2300      	movs	r3, #0
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003518:	2306      	movs	r3, #6
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800351c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003520:	4619      	mov	r1, r3
 8003522:	480e      	ldr	r0, [pc, #56]	@ (800355c <HAL_I2S_MspInit+0xf8>)
 8003524:	f000 fcb6 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003528:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003536:	2300      	movs	r3, #0
 8003538:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800353a:	2306      	movs	r3, #6
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800353e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003542:	4619      	mov	r1, r3
 8003544:	4806      	ldr	r0, [pc, #24]	@ (8003560 <HAL_I2S_MspInit+0xfc>)
 8003546:	f000 fca5 	bl	8003e94 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800354a:	bf00      	nop
 800354c:	3738      	adds	r7, #56	@ 0x38
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40003c00 	.word	0x40003c00
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000
 8003560:	40020800 	.word	0x40020800

08003564 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	@ 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a19      	ldr	r2, [pc, #100]	@ (80035e8 <HAL_SPI_MspInit+0x84>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d12b      	bne.n	80035de <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <HAL_SPI_MspInit+0x88>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <HAL_SPI_MspInit+0x88>)
 8003590:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003594:	6453      	str	r3, [r2, #68]	@ 0x44
 8003596:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <HAL_SPI_MspInit+0x88>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <HAL_SPI_MspInit+0x88>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	4a10      	ldr	r2, [pc, #64]	@ (80035ec <HAL_SPI_MspInit+0x88>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <HAL_SPI_MspInit+0x88>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035be:	23e0      	movs	r3, #224	@ 0xe0
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035ce:	2305      	movs	r3, #5
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	@ (80035f0 <HAL_SPI_MspInit+0x8c>)
 80035da:	f000 fc5b 	bl	8003e94 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80035de:	bf00      	nop
 80035e0:	3728      	adds	r7, #40	@ 0x28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40013000 	.word	0x40013000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020000 	.word	0x40020000

080035f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	@ 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a3a      	ldr	r2, [pc, #232]	@ (80036fc <HAL_UART_MspInit+0x108>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d134      	bne.n	8003680 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	4b39      	ldr	r3, [pc, #228]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361e:	4a38      	ldr	r2, [pc, #224]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 8003620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003624:	6413      	str	r3, [r2, #64]	@ 0x40
 8003626:	4b36      	ldr	r3, [pc, #216]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800362e:	61bb      	str	r3, [r7, #24]
 8003630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	4a31      	ldr	r2, [pc, #196]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6313      	str	r3, [r2, #48]	@ 0x30
 8003642:	4b2f      	ldr	r3, [pc, #188]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800364e:	2303      	movs	r3, #3
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365a:	2303      	movs	r3, #3
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800365e:	2308      	movs	r3, #8
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003662:	f107 031c 	add.w	r3, r7, #28
 8003666:	4619      	mov	r1, r3
 8003668:	4826      	ldr	r0, [pc, #152]	@ (8003704 <HAL_UART_MspInit+0x110>)
 800366a:	f000 fc13 	bl	8003e94 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2105      	movs	r1, #5
 8003672:	2034      	movs	r0, #52	@ 0x34
 8003674:	f000 fb52 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003678:	2034      	movs	r0, #52	@ 0x34
 800367a:	f000 fb6b 	bl	8003d54 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800367e:	e038      	b.n	80036f2 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a20      	ldr	r2, [pc, #128]	@ (8003708 <HAL_UART_MspInit+0x114>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d133      	bne.n	80036f2 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	4a1b      	ldr	r2, [pc, #108]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 8003694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003698:	6413      	str	r3, [r2, #64]	@ 0x40
 800369a:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	4a14      	ldr	r2, [pc, #80]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <HAL_UART_MspInit+0x10c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036c2:	230c      	movs	r3, #12
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036d2:	2307      	movs	r3, #7
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4619      	mov	r1, r3
 80036dc:	4809      	ldr	r0, [pc, #36]	@ (8003704 <HAL_UART_MspInit+0x110>)
 80036de:	f000 fbd9 	bl	8003e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2105      	movs	r1, #5
 80036e6:	2026      	movs	r0, #38	@ 0x26
 80036e8:	f000 fb18 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036ec:	2026      	movs	r0, #38	@ 0x26
 80036ee:	f000 fb31 	bl	8003d54 <HAL_NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3730      	adds	r7, #48	@ 0x30
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40004c00 	.word	0x40004c00
 8003700:	40023800 	.word	0x40023800
 8003704:	40020000 	.word	0x40020000
 8003708:	40004400 	.word	0x40004400

0800370c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	@ 0x30
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	4b2f      	ldr	r3, [pc, #188]	@ (80037e0 <HAL_InitTick+0xd4>)
 8003722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003724:	4a2e      	ldr	r2, [pc, #184]	@ (80037e0 <HAL_InitTick+0xd4>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6453      	str	r3, [r2, #68]	@ 0x44
 800372c:	4b2c      	ldr	r3, [pc, #176]	@ (80037e0 <HAL_InitTick+0xd4>)
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003738:	f107 020c 	add.w	r2, r7, #12
 800373c:	f107 0310 	add.w	r3, r7, #16
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f962 	bl	8007a0c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003748:	f004 f94c 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 800374c:	4603      	mov	r3, r0
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003754:	4a23      	ldr	r2, [pc, #140]	@ (80037e4 <HAL_InitTick+0xd8>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	0c9b      	lsrs	r3, r3, #18
 800375c:	3b01      	subs	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003760:	4b21      	ldr	r3, [pc, #132]	@ (80037e8 <HAL_InitTick+0xdc>)
 8003762:	4a22      	ldr	r2, [pc, #136]	@ (80037ec <HAL_InitTick+0xe0>)
 8003764:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003766:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <HAL_InitTick+0xdc>)
 8003768:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800376c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800376e:	4a1e      	ldr	r2, [pc, #120]	@ (80037e8 <HAL_InitTick+0xdc>)
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003774:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <HAL_InitTick+0xdc>)
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377a:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_InitTick+0xdc>)
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003780:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_InitTick+0xdc>)
 8003782:	2200      	movs	r2, #0
 8003784:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003786:	4818      	ldr	r0, [pc, #96]	@ (80037e8 <HAL_InitTick+0xdc>)
 8003788:	f004 fb3d 	bl	8007e06 <HAL_TIM_Base_Init>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11b      	bne.n	80037d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800379a:	4813      	ldr	r0, [pc, #76]	@ (80037e8 <HAL_InitTick+0xdc>)
 800379c:	f004 fb8c 	bl	8007eb8 <HAL_TIM_Base_Start_IT>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80037a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d111      	bne.n	80037d2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037ae:	2019      	movs	r0, #25
 80037b0:	f000 fad0 	bl	8003d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	d808      	bhi.n	80037cc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80037ba:	2200      	movs	r2, #0
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	2019      	movs	r0, #25
 80037c0:	f000 faac 	bl	8003d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037c4:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <HAL_InitTick+0xe4>)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e002      	b.n	80037d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3730      	adds	r7, #48	@ 0x30
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	20000dc0 	.word	0x20000dc0
 80037ec:	40010000 	.word	0x40010000
 80037f0:	20000268 	.word	0x20000268

080037f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <NMI_Handler+0x4>

080037fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <HardFault_Handler+0x4>

08003804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <MemManage_Handler+0x4>

0800380c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <BusFault_Handler+0x4>

08003814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <UsageFault_Handler+0x4>

0800381c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003820:	bf00      	nop
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003832:	2300      	movs	r3, #0
 8003834:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003836:	2001      	movs	r0, #1
 8003838:	f000 fd14 	bl	8004264 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 800383c:	f7fe ff2e 	bl	800269c <KEYS_read>
 8003840:	4603      	mov	r3, r0
 8003842:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8003844:	4b0f      	ldr	r3, [pc, #60]	@ (8003884 <EXTI0_IRQHandler+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	463a      	mov	r2, r7
 800384c:	4618      	mov	r0, r3
 800384e:	f009 fdd7 	bl	800d400 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 8003852:	2001      	movs	r0, #1
 8003854:	f7fe fefa 	bl	800264c <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <EXTI0_IRQHandler+0x48>
 8003864:	4b08      	ldr	r3, [pc, #32]	@ (8003888 <EXTI0_IRQHandler+0x5c>)
 8003866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8003874:	2001      	movs	r0, #1
 8003876:	f000 fcf5 	bl	8004264 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000b54 	.word	0x20000b54
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003890:	4802      	ldr	r0, [pc, #8]	@ (800389c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003892:	f004 fb81 	bl	8007f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000dc0 	.word	0x20000dc0

080038a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038a4:	4802      	ldr	r0, [pc, #8]	@ (80038b0 <USART2_IRQHandler+0x10>)
 80038a6:	f004 fe49 	bl	800853c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000d74 	.word	0x20000d74

080038b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038b8:	4802      	ldr	r0, [pc, #8]	@ (80038c4 <UART4_IRQHandler+0x10>)
 80038ba:	f004 fe3f 	bl	800853c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000d2c 	.word	0x20000d2c

080038c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80038cc:	4802      	ldr	r0, [pc, #8]	@ (80038d8 <OTG_FS_IRQHandler+0x10>)
 80038ce:	f000 ffcd 	bl	800486c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20011a04 	.word	0x20011a04

080038dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
	return 1;
 80038e0:	2301      	movs	r3, #1
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <_kill>:

int _kill(int pid, int sig)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038f6:	f00f fd1d 	bl	8013334 <__errno>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2216      	movs	r2, #22
 80038fe:	601a      	str	r2, [r3, #0]
	return -1;
 8003900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003904:	4618      	mov	r0, r3
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_exit>:

void _exit (int status)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003914:	f04f 31ff 	mov.w	r1, #4294967295
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ffe7 	bl	80038ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <_exit+0x12>

08003922 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e00a      	b.n	800394a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003934:	f3af 8000 	nop.w
 8003938:	4601      	mov	r1, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	60ba      	str	r2, [r7, #8]
 8003940:	b2ca      	uxtb	r2, r1
 8003942:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3301      	adds	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	429a      	cmp	r2, r3
 8003950:	dbf0      	blt.n	8003934 <_read+0x12>
	}

return len;
 8003952:	687b      	ldr	r3, [r7, #4]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	e009      	b.n	8003982 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	60ba      	str	r2, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3301      	adds	r3, #1
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	dbf1      	blt.n	800396e <_write+0x12>
	}
	return len;
 800398a:	687b      	ldr	r3, [r7, #4]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_close>:

int _close(int file)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	return -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039bc:	605a      	str	r2, [r3, #4]
	return 0;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_isatty>:

int _isatty(int file)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	return 1;
 80039d4:	2301      	movs	r3, #1
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
	return 0;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3714      	adds	r7, #20
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a04:	4a14      	ldr	r2, [pc, #80]	@ (8003a58 <_sbrk+0x5c>)
 8003a06:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <_sbrk+0x60>)
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a10:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <_sbrk+0x64>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a18:	4b11      	ldr	r3, [pc, #68]	@ (8003a60 <_sbrk+0x64>)
 8003a1a:	4a12      	ldr	r2, [pc, #72]	@ (8003a64 <_sbrk+0x68>)
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <_sbrk+0x64>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d207      	bcs.n	8003a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a2c:	f00f fc82 	bl	8013334 <__errno>
 8003a30:	4603      	mov	r3, r0
 8003a32:	220c      	movs	r2, #12
 8003a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a36:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3a:	e009      	b.n	8003a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <_sbrk+0x64>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <_sbrk+0x64>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <_sbrk+0x64>)
 8003a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20020000 	.word	0x20020000
 8003a5c:	00000400 	.word	0x00000400
 8003a60:	20000e08 	.word	0x20000e08
 8003a64:	20011f30 	.word	0x20011f30

08003a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <SystemInit+0x20>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a72:	4a05      	ldr	r2, [pc, #20]	@ (8003a88 <SystemInit+0x20>)
 8003a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a90:	480d      	ldr	r0, [pc, #52]	@ (8003ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a92:	490e      	ldr	r1, [pc, #56]	@ (8003acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a94:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a98:	e002      	b.n	8003aa0 <LoopCopyDataInit>

08003a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9e:	3304      	adds	r3, #4

08003aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa4:	d3f9      	bcc.n	8003a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa6:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8003ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aac:	e001      	b.n	8003ab2 <LoopFillZerobss>

08003aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab0:	3204      	adds	r2, #4

08003ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab4:	d3fb      	bcc.n	8003aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ab6:	f7ff ffd7 	bl	8003a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aba:	f00f fc41 	bl	8013340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003abe:	f7ff f8f7 	bl	8002cb0 <main>
  bx  lr    
 8003ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003acc:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 8003ad0:	08016b00 	.word	0x08016b00
  ldr r2, =_sbss
 8003ad4:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8003ad8:	20011f30 	.word	0x20011f30

08003adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003adc:	e7fe      	b.n	8003adc <ADC_IRQHandler>
	...

08003ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_Init+0x40>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b20 <HAL_Init+0x40>)
 8003aea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_Init+0x40>)
 8003af6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003afc:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <HAL_Init+0x40>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b08:	2003      	movs	r0, #3
 8003b0a:	f000 f8fc 	bl	8003d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7ff fdfc 	bl	800370c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b14:	f7ff fc32 	bl	800337c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023c00 	.word	0x40023c00

08003b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_IncTick+0x20>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <HAL_IncTick+0x24>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	4a04      	ldr	r2, [pc, #16]	@ (8003b48 <HAL_IncTick+0x24>)
 8003b36:	6013      	str	r3, [r2, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	2000026c 	.word	0x2000026c
 8003b48:	20000e0c 	.word	0x20000e0c

08003b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b50:	4b03      	ldr	r3, [pc, #12]	@ (8003b60 <HAL_GetTick+0x14>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000e0c 	.word	0x20000e0c

08003b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b6c:	f7ff ffee 	bl	8003b4c <HAL_GetTick>
 8003b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d005      	beq.n	8003b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba8 <HAL_Delay+0x44>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b8a:	bf00      	nop
 8003b8c:	f7ff ffde 	bl	8003b4c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d8f7      	bhi.n	8003b8c <HAL_Delay+0x28>
  {
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	2000026c 	.word	0x2000026c

08003bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bde:	4a04      	ldr	r2, [pc, #16]	@ (8003bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	60d3      	str	r3, [r2, #12]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf8:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <__NVIC_GetPriorityGrouping+0x18>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	f003 0307 	and.w	r3, r3, #7
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000ed00 	.word	0xe000ed00

08003c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	db0b      	blt.n	8003c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	f003 021f 	and.w	r2, r3, #31
 8003c28:	4907      	ldr	r1, [pc, #28]	@ (8003c48 <__NVIC_EnableIRQ+0x38>)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2001      	movs	r0, #1
 8003c32:	fa00 f202 	lsl.w	r2, r0, r2
 8003c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100

08003c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db0a      	blt.n	8003c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	490c      	ldr	r1, [pc, #48]	@ (8003c98 <__NVIC_SetPriority+0x4c>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	0112      	lsls	r2, r2, #4
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	440b      	add	r3, r1
 8003c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c74:	e00a      	b.n	8003c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	4908      	ldr	r1, [pc, #32]	@ (8003c9c <__NVIC_SetPriority+0x50>)
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	3b04      	subs	r3, #4
 8003c84:	0112      	lsls	r2, r2, #4
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	440b      	add	r3, r1
 8003c8a:	761a      	strb	r2, [r3, #24]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	e000e100 	.word	0xe000e100
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	@ 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f1c3 0307 	rsb	r3, r3, #7
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	bf28      	it	cs
 8003cbe:	2304      	movcs	r3, #4
 8003cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2b06      	cmp	r3, #6
 8003cc8:	d902      	bls.n	8003cd0 <NVIC_EncodePriority+0x30>
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3b03      	subs	r3, #3
 8003cce:	e000      	b.n	8003cd2 <NVIC_EncodePriority+0x32>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43d9      	mvns	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf8:	4313      	orrs	r3, r2
         );
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3724      	adds	r7, #36	@ 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ff4c 	bl	8003bac <__NVIC_SetPriorityGrouping>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d2e:	f7ff ff61 	bl	8003bf4 <__NVIC_GetPriorityGrouping>
 8003d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	68b9      	ldr	r1, [r7, #8]
 8003d38:	6978      	ldr	r0, [r7, #20]
 8003d3a:	f7ff ffb1 	bl	8003ca0 <NVIC_EncodePriority>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff80 	bl	8003c4c <__NVIC_SetPriority>
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff54 	bl	8003c10 <__NVIC_EnableIRQ>
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d7e:	f7ff fee5 	bl	8003b4c <HAL_GetTick>
 8003d82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2280      	movs	r2, #128	@ 0x80
 8003d94:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e052      	b.n	8003e48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0216 	bic.w	r2, r2, #22
 8003db0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_DMA_Abort+0x62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0208 	bic.w	r2, r2, #8
 8003de0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df2:	e013      	b.n	8003e1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df4:	f7ff feaa 	bl	8003b4c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d90c      	bls.n	8003e1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2220      	movs	r2, #32
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e015      	b.n	8003e48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e4      	bne.n	8003df4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	223f      	movs	r2, #63	@ 0x3f
 8003e30:	409a      	lsls	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d004      	beq.n	8003e6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2280      	movs	r2, #128	@ 0x80
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00c      	b.n	8003e88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2205      	movs	r2, #5
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 0201 	bic.w	r2, r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	@ 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e16b      	b.n	8004188 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f040 815a 	bne.w	8004182 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d005      	beq.n	8003ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d130      	bne.n	8003f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0201 	and.w	r2, r3, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d017      	beq.n	8003f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80b4 	beq.w	8004182 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b60      	ldr	r3, [pc, #384]	@ (80041a0 <HAL_GPIO_Init+0x30c>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	4a5f      	ldr	r2, [pc, #380]	@ (80041a0 <HAL_GPIO_Init+0x30c>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004028:	6453      	str	r3, [r2, #68]	@ 0x44
 800402a:	4b5d      	ldr	r3, [pc, #372]	@ (80041a0 <HAL_GPIO_Init+0x30c>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a5b      	ldr	r2, [pc, #364]	@ (80041a4 <HAL_GPIO_Init+0x310>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a52      	ldr	r2, [pc, #328]	@ (80041a8 <HAL_GPIO_Init+0x314>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d02b      	beq.n	80040ba <HAL_GPIO_Init+0x226>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a51      	ldr	r2, [pc, #324]	@ (80041ac <HAL_GPIO_Init+0x318>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d025      	beq.n	80040b6 <HAL_GPIO_Init+0x222>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a50      	ldr	r2, [pc, #320]	@ (80041b0 <HAL_GPIO_Init+0x31c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01f      	beq.n	80040b2 <HAL_GPIO_Init+0x21e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4f      	ldr	r2, [pc, #316]	@ (80041b4 <HAL_GPIO_Init+0x320>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d019      	beq.n	80040ae <HAL_GPIO_Init+0x21a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4e      	ldr	r2, [pc, #312]	@ (80041b8 <HAL_GPIO_Init+0x324>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_GPIO_Init+0x216>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4d      	ldr	r2, [pc, #308]	@ (80041bc <HAL_GPIO_Init+0x328>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00d      	beq.n	80040a6 <HAL_GPIO_Init+0x212>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4c      	ldr	r2, [pc, #304]	@ (80041c0 <HAL_GPIO_Init+0x32c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <HAL_GPIO_Init+0x20e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4b      	ldr	r2, [pc, #300]	@ (80041c4 <HAL_GPIO_Init+0x330>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_GPIO_Init+0x20a>
 800409a:	2307      	movs	r3, #7
 800409c:	e00e      	b.n	80040bc <HAL_GPIO_Init+0x228>
 800409e:	2308      	movs	r3, #8
 80040a0:	e00c      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040a2:	2306      	movs	r3, #6
 80040a4:	e00a      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040a6:	2305      	movs	r3, #5
 80040a8:	e008      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040aa:	2304      	movs	r3, #4
 80040ac:	e006      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e004      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e002      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_GPIO_Init+0x228>
 80040ba:	2300      	movs	r3, #0
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	f002 0203 	and.w	r2, r2, #3
 80040c2:	0092      	lsls	r2, r2, #2
 80040c4:	4093      	lsls	r3, r2
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040cc:	4935      	ldr	r1, [pc, #212]	@ (80041a4 <HAL_GPIO_Init+0x310>)
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040da:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040fe:	4a32      	ldr	r2, [pc, #200]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004104:	4b30      	ldr	r3, [pc, #192]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004128:	4a27      	ldr	r2, [pc, #156]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800412e:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004152:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004158:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800417c:	4a12      	ldr	r2, [pc, #72]	@ (80041c8 <HAL_GPIO_Init+0x334>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	3301      	adds	r3, #1
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b0f      	cmp	r3, #15
 800418c:	f67f ae90 	bls.w	8003eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	3724      	adds	r7, #36	@ 0x24
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40013800 	.word	0x40013800
 80041a8:	40020000 	.word	0x40020000
 80041ac:	40020400 	.word	0x40020400
 80041b0:	40020800 	.word	0x40020800
 80041b4:	40020c00 	.word	0x40020c00
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40021400 	.word	0x40021400
 80041c0:	40021800 	.word	0x40021800
 80041c4:	40021c00 	.word	0x40021c00
 80041c8:	40013c00 	.word	0x40013c00

080041cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
 80041e8:	e001      	b.n	80041ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
 8004208:	4613      	mov	r3, r2
 800420a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800420c:	787b      	ldrb	r3, [r7, #1]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004218:	e003      	b.n	8004222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	041a      	lsls	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	619a      	str	r2, [r3, #24]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004240:	887a      	ldrh	r2, [r7, #2]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4013      	ands	r3, r2
 8004246:	041a      	lsls	r2, r3, #16
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43d9      	mvns	r1, r3
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	400b      	ands	r3, r1
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	619a      	str	r2, [r3, #24]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800426e:	4b08      	ldr	r3, [pc, #32]	@ (8004290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d006      	beq.n	8004288 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800427a:	4a05      	ldr	r2, [pc, #20]	@ (8004290 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004280:	88fb      	ldrh	r3, [r7, #6]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 f806 	bl	8004294 <HAL_GPIO_EXTI_Callback>
  }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40013c00 	.word	0x40013c00

08004294 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af02      	add	r7, sp, #8
 80042b0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e059      	b.n	8004370 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f00c ff52 	bl	8011180 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2203      	movs	r2, #3
 80042e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ea:	d102      	bne.n	80042f2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f005 f901 	bl	80094fe <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	7c1a      	ldrb	r2, [r3, #16]
 8004304:	f88d 2000 	strb.w	r2, [sp]
 8004308:	3304      	adds	r3, #4
 800430a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800430c:	f005 f882 	bl	8009414 <USB_CoreInit>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e026      	b.n	8004370 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f005 f8f9 	bl	8009520 <USB_SetCurrentMode>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e017      	b.n	8004370 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	7c1a      	ldrb	r2, [r3, #16]
 8004348:	f88d 2000 	strb.w	r2, [sp]
 800434c:	3304      	adds	r3, #4
 800434e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004350:	f005 faa2 	bl	8009898 <USB_HostInit>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e004      	b.n	8004370 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b08b      	sub	sp, #44	@ 0x2c
 800437c:	af04      	add	r7, sp, #16
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	4603      	mov	r3, r0
 8004388:	70fb      	strb	r3, [r7, #3]
 800438a:	460b      	mov	r3, r1
 800438c:	70bb      	strb	r3, [r7, #2]
 800438e:	4613      	mov	r3, r2
 8004390:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004392:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004394:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_HCD_HC_Init+0x2c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e09d      	b.n	80044e0 <HAL_HCD_HC_Init+0x168>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3319      	adds	r3, #25
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	3314      	adds	r3, #20
 80043d0:	787a      	ldrb	r2, [r7, #1]
 80043d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3315      	adds	r3, #21
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3326      	adds	r3, #38	@ 0x26
 80043f8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80043fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	78bb      	ldrb	r3, [r7, #2]
 8004402:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004406:	b2d8      	uxtb	r0, r3
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	3316      	adds	r3, #22
 8004416:	4602      	mov	r2, r0
 8004418:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800441a:	78fb      	ldrb	r3, [r7, #3]
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fbc8 	bl	8004bb4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004424:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004428:	2b00      	cmp	r3, #0
 800442a:	da0a      	bge.n	8004442 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3317      	adds	r3, #23
 800443c:	2201      	movs	r2, #1
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e009      	b.n	8004456 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3317      	adds	r3, #23
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f005 fb80 	bl	8009b60 <USB_GetHostSpeed>
 8004460:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8004462:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d10b      	bne.n	8004482 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800446a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_HCD_HC_Init+0x10a>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d104      	bne.n	8004482 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2bbc      	cmp	r3, #188	@ 0xbc
 800447c:	d901      	bls.n	8004482 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800447e:	23bc      	movs	r3, #188	@ 0xbc
 8004480:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3318      	adds	r3, #24
 8004492:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004496:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	b298      	uxth	r0, r3
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3328      	adds	r3, #40	@ 0x28
 80044ac:	4602      	mov	r2, r0
 80044ae:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6818      	ldr	r0, [r3, #0]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	787c      	ldrb	r4, [r7, #1]
 80044ba:	78ba      	ldrb	r2, [r7, #2]
 80044bc:	78f9      	ldrb	r1, [r7, #3]
 80044be:	9302      	str	r3, [sp, #8]
 80044c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4623      	mov	r3, r4
 80044ce:	f005 fb6f 	bl	8009bb0 <USB_HC_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}

080044e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_HCD_HC_Halt+0x1e>
 8004502:	2302      	movs	r3, #2
 8004504:	e00f      	b.n	8004526 <HAL_HCD_HC_Halt+0x3e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f005 ff01 	bl	800a31e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	4608      	mov	r0, r1
 800453a:	4611      	mov	r1, r2
 800453c:	461a      	mov	r2, r3
 800453e:	4603      	mov	r3, r0
 8004540:	70fb      	strb	r3, [r7, #3]
 8004542:	460b      	mov	r3, r1
 8004544:	70bb      	strb	r3, [r7, #2]
 8004546:	4613      	mov	r3, r2
 8004548:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	3317      	adds	r3, #23
 800455a:	78ba      	ldrb	r2, [r7, #2]
 800455c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3326      	adds	r3, #38	@ 0x26
 800456e:	787a      	ldrb	r2, [r7, #1]
 8004570:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004572:	7c3b      	ldrb	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d114      	bne.n	80045a2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004578:	78fa      	ldrb	r2, [r7, #3]
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	011b      	lsls	r3, r3, #4
 8004580:	1a9b      	subs	r3, r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	332a      	adds	r3, #42	@ 0x2a
 8004588:	2203      	movs	r2, #3
 800458a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3319      	adds	r3, #25
 800459c:	7f3a      	ldrb	r2, [r7, #28]
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	e009      	b.n	80045b6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	332a      	adds	r3, #42	@ 0x2a
 80045b2:	2202      	movs	r2, #2
 80045b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80045b6:	787b      	ldrb	r3, [r7, #1]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	f200 8102 	bhi.w	80047c2 <HAL_HCD_HC_SubmitRequest+0x292>
 80045be:	a201      	add	r2, pc, #4	@ (adr r2, 80045c4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80045c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080047ad 	.word	0x080047ad
 80045cc:	08004699 	.word	0x08004699
 80045d0:	08004723 	.word	0x08004723
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80045d4:	7c3b      	ldrb	r3, [r7, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 80f5 	bne.w	80047c6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80045dc:	78bb      	ldrb	r3, [r7, #2]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d12d      	bne.n	800463e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80045e2:	8b3b      	ldrh	r3, [r7, #24]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d109      	bne.n	80045fc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	333d      	adds	r3, #61	@ 0x3d
 80045f8:	2201      	movs	r2, #1
 80045fa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	333d      	adds	r3, #61	@ 0x3d
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10a      	bne.n	8004628 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	332a      	adds	r3, #42	@ 0x2a
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004626:	e0ce      	b.n	80047c6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	332a      	adds	r3, #42	@ 0x2a
 8004638:	2202      	movs	r2, #2
 800463a:	701a      	strb	r2, [r3, #0]
      break;
 800463c:	e0c3      	b.n	80047c6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	4613      	mov	r3, r2
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	440b      	add	r3, r1
 800464c:	331a      	adds	r3, #26
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	f040 80b8 	bne.w	80047c6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	333c      	adds	r3, #60	@ 0x3c
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	332a      	adds	r3, #42	@ 0x2a
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
      break;
 8004680:	e0a1      	b.n	80047c6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	332a      	adds	r3, #42	@ 0x2a
 8004692:	2202      	movs	r2, #2
 8004694:	701a      	strb	r2, [r3, #0]
      break;
 8004696:	e096      	b.n	80047c6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004698:	78bb      	ldrb	r3, [r7, #2]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d120      	bne.n	80046e0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	333d      	adds	r3, #61	@ 0x3d
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	332a      	adds	r3, #42	@ 0x2a
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80046c8:	e07e      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	332a      	adds	r3, #42	@ 0x2a
 80046da:	2202      	movs	r2, #2
 80046dc:	701a      	strb	r2, [r3, #0]
      break;
 80046de:	e073      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	333c      	adds	r3, #60	@ 0x3c
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	332a      	adds	r3, #42	@ 0x2a
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
      break;
 800470a:	e05d      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	332a      	adds	r3, #42	@ 0x2a
 800471c:	2202      	movs	r2, #2
 800471e:	701a      	strb	r2, [r3, #0]
      break;
 8004720:	e052      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004722:	78bb      	ldrb	r3, [r7, #2]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d120      	bne.n	800476a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	333d      	adds	r3, #61	@ 0x3d
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	332a      	adds	r3, #42	@ 0x2a
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004752:	e039      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	332a      	adds	r3, #42	@ 0x2a
 8004764:	2202      	movs	r2, #2
 8004766:	701a      	strb	r2, [r3, #0]
      break;
 8004768:	e02e      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	333c      	adds	r3, #60	@ 0x3c
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	332a      	adds	r3, #42	@ 0x2a
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
      break;
 8004794:	e018      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	332a      	adds	r3, #42	@ 0x2a
 80047a6:	2202      	movs	r2, #2
 80047a8:	701a      	strb	r2, [r3, #0]
      break;
 80047aa:	e00d      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	332a      	adds	r3, #42	@ 0x2a
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80047c2:	bf00      	nop
 80047c4:	e000      	b.n	80047c8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80047c6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	332c      	adds	r3, #44	@ 0x2c
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	8b39      	ldrh	r1, [r7, #24]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4403      	add	r3, r0
 80047ec:	3334      	adds	r3, #52	@ 0x34
 80047ee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	334c      	adds	r3, #76	@ 0x4c
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	3338      	adds	r3, #56	@ 0x38
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004818:	78fa      	ldrb	r2, [r7, #3]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	1a9b      	subs	r3, r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3315      	adds	r3, #21
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	334d      	adds	r3, #77	@ 0x4d
 800483c:	2200      	movs	r2, #0
 800483e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6818      	ldr	r0, [r3, #0]
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	4613      	mov	r3, r2
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	3310      	adds	r3, #16
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4413      	add	r3, r2
 8004854:	1d19      	adds	r1, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	799b      	ldrb	r3, [r3, #6]
 800485a:	461a      	mov	r2, r3
 800485c:	f005 fad4 	bl	8009e08 <USB_HC_StartXfer>
 8004860:	4603      	mov	r3, r0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop

0800486c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f004 ffc2 	bl	800980c <USB_GetMode>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	f040 80fb 	bne.w	8004a86 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f004 ff85 	bl	80097a4 <USB_ReadInterrupts>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80f1 	beq.w	8004a84 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 ff7c 	bl	80097a4 <USB_ReadInterrupts>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b6:	d104      	bne.n	80048c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80048c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f004 ff6c 	bl	80097a4 <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d6:	d104      	bne.n	80048e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f004 ff5c 	bl	80097a4 <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048f6:	d104      	bne.n	8004902 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f004 ff4c 	bl	80097a4 <USB_ReadInterrupts>
 800490c:	4603      	mov	r3, r0
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b02      	cmp	r3, #2
 8004914:	d103      	bne.n	800491e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2202      	movs	r2, #2
 800491c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f004 ff3e 	bl	80097a4 <USB_ReadInterrupts>
 8004928:	4603      	mov	r3, r0
 800492a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800492e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004932:	d120      	bne.n	8004976 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800493c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d113      	bne.n	8004976 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800494e:	2110      	movs	r1, #16
 8004950:	6938      	ldr	r0, [r7, #16]
 8004952:	f004 fe31 	bl	80095b8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004956:	6938      	ldr	r0, [r7, #16]
 8004958:	f004 fe60 	bl	800961c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7a5b      	ldrb	r3, [r3, #9]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d105      	bne.n	8004970 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f005 f858 	bl	8009a20 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f00c fc83 	bl	801127c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f004 ff12 	bl	80097a4 <USB_ReadInterrupts>
 8004980:	4603      	mov	r3, r0
 8004982:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800498a:	d102      	bne.n	8004992 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 fd4d 	bl	800642c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f004 ff04 	bl	80097a4 <USB_ReadInterrupts>
 800499c:	4603      	mov	r3, r0
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d106      	bne.n	80049b4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f00c fc4c 	bl	8011244 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2208      	movs	r2, #8
 80049b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f004 fef3 	bl	80097a4 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049c8:	d139      	bne.n	8004a3e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f005 fc94 	bl	800a2fc <USB_HC_ReadInterrupt>
 80049d4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e025      	b.n	8004a28 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d018      	beq.n	8004a22 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a06:	d106      	bne.n	8004a16 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f905 	bl	8004c1e <HCD_HC_IN_IRQHandler>
 8004a14:	e005      	b.n	8004a22 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 ff67 	bl	80058f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	3301      	adds	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	795b      	ldrb	r3, [r3, #5]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d3d3      	bcc.n	80049dc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 feae 	bl	80097a4 <USB_ReadInterrupts>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b10      	cmp	r3, #16
 8004a50:	d101      	bne.n	8004a56 <HAL_HCD_IRQHandler+0x1ea>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_HCD_IRQHandler+0x1ec>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d014      	beq.n	8004a86 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0210 	bic.w	r2, r2, #16
 8004a6a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 fbfe 	bl	800626e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699a      	ldr	r2, [r3, #24]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0210 	orr.w	r2, r2, #16
 8004a80:	619a      	str	r2, [r3, #24]
 8004a82:	e000      	b.n	8004a86 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004a84:	bf00      	nop
    }
  }
}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_HCD_Start+0x16>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e013      	b.n	8004aca <HAL_HCD_Start+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f005 f81c 	bl	8009aee <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f004 fd0e 	bl	80094dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_HCD_Stop+0x16>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e00d      	b.n	8004b04 <HAL_HCD_Stop+0x32>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f005 fd6f 	bl	800a5d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f004 ffbe 	bl	8009a9a <USB_ResetPort>
 8004b1e:	4603      	mov	r3, r0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	334c      	adds	r3, #76	@ 0x4c
 8004b44:	781b      	ldrb	r3, [r3, #0]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b5e:	78fa      	ldrb	r2, [r7, #3]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3338      	adds	r3, #56	@ 0x38
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f005 f800 	bl	8009b8e <USB_GetCurrentFrame>
 8004b8e:	4603      	mov	r3, r0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f004 ffdb 	bl	8009b60 <USB_GetHostSpeed>
 8004baa:	4603      	mov	r3, r0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	331a      	adds	r3, #26
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	331b      	adds	r3, #27
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	3325      	adds	r3, #37	@ 0x25
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3324      	adds	r3, #36	@ 0x24
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	460b      	mov	r3, r1
 8004c28:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f004 fdc4 	bl	80097ca <USB_ReadChInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d11a      	bne.n	8004c82 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2304      	movs	r3, #4
 8004c5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	334d      	adds	r3, #77	@ 0x4d
 8004c6e:	2207      	movs	r2, #7
 8004c70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 fb4f 	bl	800a31e <USB_HC_Halt>
 8004c80:	e09e      	b.n	8004dc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f004 fd9d 	bl	80097ca <USB_ReadChInterrupts>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9a:	d11b      	bne.n	8004cd4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca8:	461a      	mov	r2, r3
 8004caa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	011b      	lsls	r3, r3, #4
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	334d      	adds	r3, #77	@ 0x4d
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f005 fb26 	bl	800a31e <USB_HC_Halt>
 8004cd2:	e075      	b.n	8004dc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	78fa      	ldrb	r2, [r7, #3]
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fd74 	bl	80097ca <USB_ReadChInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d11a      	bne.n	8004d22 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	334d      	adds	r3, #77	@ 0x4d
 8004d0e:	2206      	movs	r2, #6
 8004d10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f005 faff 	bl	800a31e <USB_HC_Halt>
 8004d20:	e04e      	b.n	8004dc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 fd4d 	bl	80097ca <USB_ReadChInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3a:	d11b      	bne.n	8004d74 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	6879      	ldr	r1, [r7, #4]
 8004d54:	4613      	mov	r3, r2
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	334d      	adds	r3, #77	@ 0x4d
 8004d60:	2209      	movs	r2, #9
 8004d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f005 fad6 	bl	800a31e <USB_HC_Halt>
 8004d72:	e025      	b.n	8004dc0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f004 fd24 	bl	80097ca <USB_ReadChInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d88:	2b80      	cmp	r3, #128	@ 0x80
 8004d8a:	d119      	bne.n	8004dc0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d98:	461a      	mov	r2, r3
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	334d      	adds	r3, #77	@ 0x4d
 8004dae:	2207      	movs	r2, #7
 8004db0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	4611      	mov	r1, r2
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f005 faaf 	bl	800a31e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f004 fcfe 	bl	80097ca <USB_ReadChInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dd8:	d112      	bne.n	8004e00 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 fa9b 	bl	800a31e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df4:	461a      	mov	r2, r3
 8004df6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	f000 bd75 	b.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	4611      	mov	r1, r2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f004 fcde 	bl	80097ca <USB_ReadChInterrupts>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	f040 8128 	bne.w	800506a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e26:	461a      	mov	r2, r3
 8004e28:	2320      	movs	r3, #32
 8004e2a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	1a9b      	subs	r3, r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	331b      	adds	r3, #27
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d119      	bne.n	8004e76 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	331b      	adds	r3, #27
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e74:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	799b      	ldrb	r3, [r3, #6]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01b      	beq.n	8004eb6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	3330      	adds	r3, #48	@ 0x30
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	1ac9      	subs	r1, r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4403      	add	r3, r0
 8004eb2:	3338      	adds	r3, #56	@ 0x38
 8004eb4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	334d      	adds	r3, #77	@ 0x4d
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3344      	adds	r3, #68	@ 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eea:	461a      	mov	r2, r3
 8004eec:	2301      	movs	r3, #1
 8004eee:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	440b      	add	r3, r1
 8004efe:	3326      	adds	r3, #38	@ 0x26
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	3326      	adds	r3, #38	@ 0x26
 8004f16:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d110      	bne.n	8004f3e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f005 f9fa 	bl	800a31e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f36:	461a      	mov	r2, r3
 8004f38:	2310      	movs	r3, #16
 8004f3a:	6093      	str	r3, [r2, #8]
 8004f3c:	e03d      	b.n	8004fba <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f3e:	78fa      	ldrb	r2, [r7, #3]
 8004f40:	6879      	ldr	r1, [r7, #4]
 8004f42:	4613      	mov	r3, r2
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	1a9b      	subs	r3, r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3326      	adds	r3, #38	@ 0x26
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d00a      	beq.n	8004f6a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	3326      	adds	r3, #38	@ 0x26
 8004f64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d127      	bne.n	8004fba <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f88:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	334c      	adds	r3, #76	@ 0x4c
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	334c      	adds	r3, #76	@ 0x4c
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f00c f96f 	bl	8011298 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	799b      	ldrb	r3, [r3, #6]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d13b      	bne.n	800503a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3338      	adds	r3, #56	@ 0x38
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4403      	add	r3, r0
 8004fe2:	3328      	adds	r3, #40	@ 0x28
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	440b      	add	r3, r1
 8004fe8:	1e59      	subs	r1, r3, #1
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4403      	add	r3, r0
 8004ff8:	3328      	adds	r3, #40	@ 0x28
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8470 	beq.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	333c      	adds	r3, #60	@ 0x3c
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	f083 0301 	eor.w	r3, r3, #1
 8005022:	b2d8      	uxtb	r0, r3
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	333c      	adds	r3, #60	@ 0x3c
 8005032:	4602      	mov	r2, r0
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	f000 bc58 	b.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	333c      	adds	r3, #60	@ 0x3c
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	f083 0301 	eor.w	r3, r3, #1
 8005052:	b2d8      	uxtb	r0, r3
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	333c      	adds	r3, #60	@ 0x3c
 8005062:	4602      	mov	r2, r0
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	f000 bc40 	b.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f004 fba9 	bl	80097ca <USB_ReadChInterrupts>
 8005078:	4603      	mov	r3, r0
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d131      	bne.n	80050e6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800508e:	461a      	mov	r2, r3
 8005090:	2320      	movs	r3, #32
 8005092:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	331a      	adds	r3, #26
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	f040 841f 	bne.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	331b      	adds	r3, #27
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	334d      	adds	r3, #77	@ 0x4d
 80050d0:	2203      	movs	r2, #3
 80050d2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f005 f91e 	bl	800a31e <USB_HC_Halt>
 80050e2:	f000 bc02 	b.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f004 fb6b 	bl	80097ca <USB_ReadChInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	f040 8305 	bne.w	800570a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800510c:	461a      	mov	r2, r3
 800510e:	2302      	movs	r3, #2
 8005110:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	6879      	ldr	r1, [r7, #4]
 8005116:	4613      	mov	r3, r2
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	440b      	add	r3, r1
 8005120:	334d      	adds	r3, #77	@ 0x4d
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d114      	bne.n	8005152 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	334d      	adds	r3, #77	@ 0x4d
 8005138:	2202      	movs	r2, #2
 800513a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	011b      	lsls	r3, r3, #4
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	334c      	adds	r3, #76	@ 0x4c
 800514c:	2201      	movs	r2, #1
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	e2cc      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	334d      	adds	r3, #77	@ 0x4d
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b06      	cmp	r3, #6
 8005166:	d114      	bne.n	8005192 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	334d      	adds	r3, #77	@ 0x4d
 8005178:	2202      	movs	r2, #2
 800517a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	334c      	adds	r3, #76	@ 0x4c
 800518c:	2205      	movs	r2, #5
 800518e:	701a      	strb	r2, [r3, #0]
 8005190:	e2ac      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005192:	78fa      	ldrb	r2, [r7, #3]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	334d      	adds	r3, #77	@ 0x4d
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b07      	cmp	r3, #7
 80051a6:	d00b      	beq.n	80051c0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	334d      	adds	r3, #77	@ 0x4d
 80051b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051ba:	2b09      	cmp	r3, #9
 80051bc:	f040 80a6 	bne.w	800530c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	334d      	adds	r3, #77	@ 0x4d
 80051d0:	2202      	movs	r2, #2
 80051d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3344      	adds	r3, #68	@ 0x44
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	1c59      	adds	r1, r3, #1
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4403      	add	r3, r0
 80051f4:	3344      	adds	r3, #68	@ 0x44
 80051f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3344      	adds	r3, #68	@ 0x44
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d943      	bls.n	8005296 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800520e:	78fa      	ldrb	r2, [r7, #3]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	3344      	adds	r3, #68	@ 0x44
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8005222:	78fa      	ldrb	r2, [r7, #3]
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	331a      	adds	r3, #26
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d123      	bne.n	8005280 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	331b      	adds	r3, #27
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800524c:	78fa      	ldrb	r2, [r7, #3]
 800524e:	6879      	ldr	r1, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	440b      	add	r3, r1
 800525a:	331c      	adds	r3, #28
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	4413      	add	r3, r2
 8005268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	440a      	add	r2, r1
 8005276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800527a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800527e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005280:	78fa      	ldrb	r2, [r7, #3]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	011b      	lsls	r3, r3, #4
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	334c      	adds	r3, #76	@ 0x4c
 8005290:	2204      	movs	r2, #4
 8005292:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005294:	e229      	b.n	80056ea <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	334c      	adds	r3, #76	@ 0x4c
 80052a6:	2202      	movs	r2, #2
 80052a8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3326      	adds	r3, #38	@ 0x26
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00b      	beq.n	80052d8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3326      	adds	r3, #38	@ 0x26
 80052d0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	f040 8209 	bne.w	80056ea <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005304:	461a      	mov	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800530a:	e1ee      	b.n	80056ea <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	334d      	adds	r3, #77	@ 0x4d
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b05      	cmp	r3, #5
 8005320:	f040 80c8 	bne.w	80054b4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	334d      	adds	r3, #77	@ 0x4d
 8005334:	2202      	movs	r2, #2
 8005336:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	011b      	lsls	r3, r3, #4
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	331b      	adds	r3, #27
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 81ce 	bne.w	80056ec <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3326      	adds	r3, #38	@ 0x26
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b03      	cmp	r3, #3
 8005364:	d16b      	bne.n	800543e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3348      	adds	r3, #72	@ 0x48
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4403      	add	r3, r0
 8005386:	3348      	adds	r3, #72	@ 0x48
 8005388:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3348      	adds	r3, #72	@ 0x48
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d943      	bls.n	8005428 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3348      	adds	r3, #72	@ 0x48
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	331b      	adds	r3, #27
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	3344      	adds	r3, #68	@ 0x44
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d809      	bhi.n	80053f2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	331c      	adds	r3, #28
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	440a      	add	r2, r1
 8005408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800540c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005410:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	334c      	adds	r3, #76	@ 0x4c
 8005422:	2204      	movs	r2, #4
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e014      	b.n	8005452 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	334c      	adds	r3, #76	@ 0x4c
 8005438:	2202      	movs	r2, #2
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e009      	b.n	8005452 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	334c      	adds	r3, #76	@ 0x4c
 800544e:	2202      	movs	r2, #2
 8005450:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3326      	adds	r3, #38	@ 0x26
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00b      	beq.n	8005480 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	3326      	adds	r3, #38	@ 0x26
 8005478:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800547a:	2b02      	cmp	r3, #2
 800547c:	f040 8136 	bne.w	80056ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005496:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800549e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ac:	461a      	mov	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e11b      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	334d      	adds	r3, #77	@ 0x4d
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	f040 8081 	bne.w	80055ce <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	334d      	adds	r3, #77	@ 0x4d
 80054dc:	2202      	movs	r2, #2
 80054de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	4613      	mov	r3, r2
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	440b      	add	r3, r1
 80054ee:	331b      	adds	r3, #27
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	f040 80fa 	bne.w	80056ec <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	334c      	adds	r3, #76	@ 0x4c
 8005508:	2202      	movs	r2, #2
 800550a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	440a      	add	r2, r1
 8005522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800552a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4413      	add	r3, r2
 8005534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	440a      	add	r2, r1
 8005542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800554a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	440a      	add	r2, r1
 8005562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005566:	f023 0320 	bic.w	r3, r3, #32
 800556a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	3326      	adds	r3, #38	@ 0x26
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3326      	adds	r3, #38	@ 0x26
 8005592:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005594:	2b02      	cmp	r3, #2
 8005596:	f040 80a9 	bne.w	80056ec <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055b0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055b8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e08e      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	334d      	adds	r3, #77	@ 0x4d
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d143      	bne.n	800566c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055e4:	78fa      	ldrb	r2, [r7, #3]
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	4613      	mov	r3, r2
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	334d      	adds	r3, #77	@ 0x4d
 80055f4:	2202      	movs	r2, #2
 80055f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055f8:	78fa      	ldrb	r2, [r7, #3]
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	334c      	adds	r3, #76	@ 0x4c
 8005608:	2202      	movs	r2, #2
 800560a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	3326      	adds	r3, #38	@ 0x26
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	3326      	adds	r3, #38	@ 0x26
 8005632:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005634:	2b02      	cmp	r3, #2
 8005636:	d159      	bne.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800564e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005656:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005664:	461a      	mov	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e03f      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	334d      	adds	r3, #77	@ 0x4d
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b08      	cmp	r3, #8
 8005680:	d126      	bne.n	80056d0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	1a9b      	subs	r3, r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	334d      	adds	r3, #77	@ 0x4d
 8005692:	2202      	movs	r2, #2
 8005694:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	3344      	adds	r3, #68	@ 0x44
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	1c59      	adds	r1, r3, #1
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4403      	add	r3, r0
 80056b6:	3344      	adds	r3, #68	@ 0x44
 80056b8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	011b      	lsls	r3, r3, #4
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	334c      	adds	r3, #76	@ 0x4c
 80056ca:	2204      	movs	r2, #4
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	e00d      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	334d      	adds	r3, #77	@ 0x4d
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	f000 8100 	beq.w	80058e8 <HCD_HC_IN_IRQHandler+0xcca>
 80056e8:	e000      	b.n	80056ec <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	334c      	adds	r3, #76	@ 0x4c
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f00b fdc8 	bl	8011298 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005708:	e0ef      	b.n	80058ea <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	4611      	mov	r1, r2
 8005712:	4618      	mov	r0, r3
 8005714:	f004 f859 	bl	80097ca <USB_ReadChInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571e:	2b40      	cmp	r3, #64	@ 0x40
 8005720:	d12f      	bne.n	8005782 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	2340      	movs	r3, #64	@ 0x40
 8005732:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	334d      	adds	r3, #77	@ 0x4d
 8005744:	2205      	movs	r2, #5
 8005746:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	331a      	adds	r3, #26
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d109      	bne.n	8005772 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3344      	adds	r3, #68	@ 0x44
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	4611      	mov	r1, r2
 800577a:	4618      	mov	r0, r3
 800577c:	f004 fdcf 	bl	800a31e <USB_HC_Halt>
 8005780:	e0b3      	b.n	80058ea <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f004 f81d 	bl	80097ca <USB_ReadChInterrupts>
 8005790:	4603      	mov	r3, r0
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b10      	cmp	r3, #16
 8005798:	f040 80a7 	bne.w	80058ea <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800579c:	78fa      	ldrb	r2, [r7, #3]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3326      	adds	r3, #38	@ 0x26
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d11b      	bne.n	80057ea <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	011b      	lsls	r3, r3, #4
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	440b      	add	r3, r1
 80057c0:	3344      	adds	r3, #68	@ 0x44
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	334d      	adds	r3, #77	@ 0x4d
 80057d6:	2204      	movs	r2, #4
 80057d8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f004 fd9b 	bl	800a31e <USB_HC_Halt>
 80057e8:	e03f      	b.n	800586a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	4613      	mov	r3, r2
 80057f0:	011b      	lsls	r3, r3, #4
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	3326      	adds	r3, #38	@ 0x26
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005800:	78fa      	ldrb	r2, [r7, #3]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	3326      	adds	r3, #38	@ 0x26
 8005810:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005812:	2b02      	cmp	r3, #2
 8005814:	d129      	bne.n	800586a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005816:	78fa      	ldrb	r2, [r7, #3]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3344      	adds	r3, #68	@ 0x44
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	799b      	ldrb	r3, [r3, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HCD_HC_IN_IRQHandler+0xc2a>
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	331b      	adds	r3, #27
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d110      	bne.n	800586a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005848:	78fa      	ldrb	r2, [r7, #3]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	334d      	adds	r3, #77	@ 0x4d
 8005858:	2204      	movs	r2, #4
 800585a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f004 fd5a 	bl	800a31e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800586a:	78fa      	ldrb	r2, [r7, #3]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	331b      	adds	r3, #27
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d129      	bne.n	80058d4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	331b      	adds	r3, #27
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4413      	add	r3, r2
 800589c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	0151      	lsls	r1, r2, #5
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	440a      	add	r2, r1
 80058aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ce:	f043 0320 	orr.w	r3, r3, #32
 80058d2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e0:	461a      	mov	r2, r3
 80058e2:	2310      	movs	r3, #16
 80058e4:	6093      	str	r3, [r2, #8]
 80058e6:	e000      	b.n	80058ea <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80058e8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f003 ff5b 	bl	80097ca <USB_ReadChInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d11b      	bne.n	8005956 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4413      	add	r3, r2
 8005926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800592a:	461a      	mov	r2, r3
 800592c:	2304      	movs	r3, #4
 800592e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005930:	78fa      	ldrb	r2, [r7, #3]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	334d      	adds	r3, #77	@ 0x4d
 8005940:	2207      	movs	r2, #7
 8005942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	4611      	mov	r1, r2
 800594c:	4618      	mov	r0, r3
 800594e:	f004 fce6 	bl	800a31e <USB_HC_Halt>
 8005952:	f000 bc89 	b.w	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	78fa      	ldrb	r2, [r7, #3]
 800595c:	4611      	mov	r1, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f003 ff33 	bl	80097ca <USB_ReadChInterrupts>
 8005964:	4603      	mov	r3, r0
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	2b20      	cmp	r3, #32
 800596c:	f040 8082 	bne.w	8005a74 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800597c:	461a      	mov	r2, r3
 800597e:	2320      	movs	r3, #32
 8005980:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005982:	78fa      	ldrb	r2, [r7, #3]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3319      	adds	r3, #25
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d124      	bne.n	80059e2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005998:	78fa      	ldrb	r2, [r7, #3]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	1a9b      	subs	r3, r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	3319      	adds	r3, #25
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	334c      	adds	r3, #76	@ 0x4c
 80059bc:	2202      	movs	r2, #2
 80059be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	334d      	adds	r3, #77	@ 0x4d
 80059d0:	2203      	movs	r2, #3
 80059d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f004 fc9e 	bl	800a31e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	6879      	ldr	r1, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	440b      	add	r3, r1
 80059f0:	331a      	adds	r3, #26
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	f040 8437 	bne.w	8006268 <HCD_HC_OUT_IRQHandler+0x978>
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	331b      	adds	r3, #27
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f040 842b 	bne.w	8006268 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3326      	adds	r3, #38	@ 0x26
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d009      	beq.n	8005a3c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	331b      	adds	r3, #27
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	1a9b      	subs	r3, r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	334d      	adds	r3, #77	@ 0x4d
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f004 fc60 	bl	800a31e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3344      	adds	r3, #68	@ 0x44
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e3f9      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f003 fea4 	bl	80097ca <USB_ReadChInterrupts>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8c:	d111      	bne.n	8005ab2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aa0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	78fa      	ldrb	r2, [r7, #3]
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 fc37 	bl	800a31e <USB_HC_Halt>
 8005ab0:	e3da      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f003 fe85 	bl	80097ca <USB_ReadChInterrupts>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d168      	bne.n	8005b9c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3344      	adds	r3, #68	@ 0x44
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f003 fe6f 	bl	80097ca <USB_ReadChInterrupts>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d112      	bne.n	8005b1c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	3319      	adds	r3, #25
 8005b06:	2201      	movs	r2, #1
 8005b08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b16:	461a      	mov	r2, r3
 8005b18:	2340      	movs	r3, #64	@ 0x40
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	331b      	adds	r3, #27
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d019      	beq.n	8005b66 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b32:	78fa      	ldrb	r2, [r7, #3]
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	4613      	mov	r3, r2
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	1a9b      	subs	r3, r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	440b      	add	r3, r1
 8005b40:	331b      	adds	r3, #27
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b64:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b72:	461a      	mov	r2, r3
 8005b74:	2301      	movs	r3, #1
 8005b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005b78:	78fa      	ldrb	r2, [r7, #3]
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	011b      	lsls	r3, r3, #4
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	334d      	adds	r3, #77	@ 0x4d
 8005b88:	2201      	movs	r2, #1
 8005b8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 fbc2 	bl	800a31e <USB_HC_Halt>
 8005b9a:	e365      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f003 fe10 	bl	80097ca <USB_ReadChInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b40      	cmp	r3, #64	@ 0x40
 8005bb2:	d139      	bne.n	8005c28 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	1a9b      	subs	r3, r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	334d      	adds	r3, #77	@ 0x4d
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	6879      	ldr	r1, [r7, #4]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	1a9b      	subs	r3, r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	331a      	adds	r3, #26
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	3319      	adds	r3, #25
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	3344      	adds	r3, #68	@ 0x44
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f004 fb85 	bl	800a31e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c20:	461a      	mov	r2, r3
 8005c22:	2340      	movs	r3, #64	@ 0x40
 8005c24:	6093      	str	r3, [r2, #8]
 8005c26:	e31f      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	78fa      	ldrb	r2, [r7, #3]
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f003 fdca 	bl	80097ca <USB_ReadChInterrupts>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d11a      	bne.n	8005c76 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2308      	movs	r3, #8
 8005c50:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c52:	78fa      	ldrb	r2, [r7, #3]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4613      	mov	r3, r2
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	1a9b      	subs	r3, r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	334d      	adds	r3, #77	@ 0x4d
 8005c62:	2206      	movs	r2, #6
 8005c64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f004 fb55 	bl	800a31e <USB_HC_Halt>
 8005c74:	e2f8      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	4611      	mov	r1, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f003 fda3 	bl	80097ca <USB_ReadChInterrupts>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d144      	bne.n	8005d18 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	1a9b      	subs	r3, r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	3344      	adds	r3, #68	@ 0x44
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005ca2:	78fa      	ldrb	r2, [r7, #3]
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	440b      	add	r3, r1
 8005cb0:	334d      	adds	r3, #77	@ 0x4d
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3319      	adds	r3, #25
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d114      	bne.n	8005cf6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005ccc:	78fa      	ldrb	r2, [r7, #3]
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	3318      	adds	r3, #24
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005ce2:	78fa      	ldrb	r2, [r7, #3]
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	3319      	adds	r3, #25
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f004 fb0d 	bl	800a31e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d10:	461a      	mov	r2, r3
 8005d12:	2310      	movs	r3, #16
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	e2a7      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f003 fd52 	bl	80097ca <USB_ReadChInterrupts>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d2c:	2b80      	cmp	r3, #128	@ 0x80
 8005d2e:	f040 8083 	bne.w	8005e38 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	799b      	ldrb	r3, [r3, #6]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d111      	bne.n	8005d5e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d3a:	78fa      	ldrb	r2, [r7, #3]
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	440b      	add	r3, r1
 8005d48:	334d      	adds	r3, #77	@ 0x4d
 8005d4a:	2207      	movs	r2, #7
 8005d4c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f004 fae1 	bl	800a31e <USB_HC_Halt>
 8005d5c:	e062      	b.n	8005e24 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3344      	adds	r3, #68	@ 0x44
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4613      	mov	r3, r2
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	1a9b      	subs	r3, r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4403      	add	r3, r0
 8005d7e:	3344      	adds	r3, #68	@ 0x44
 8005d80:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	011b      	lsls	r3, r3, #4
 8005d8a:	1a9b      	subs	r3, r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	3344      	adds	r3, #68	@ 0x44
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d922      	bls.n	8005dde <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	3344      	adds	r3, #68	@ 0x44
 8005da8:	2200      	movs	r2, #0
 8005daa:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	334c      	adds	r3, #76	@ 0x4c
 8005dbc:	2204      	movs	r2, #4
 8005dbe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	334c      	adds	r3, #76	@ 0x4c
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	78fb      	ldrb	r3, [r7, #3]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f00b fa5e 	bl	8011298 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ddc:	e022      	b.n	8005e24 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dde:	78fa      	ldrb	r2, [r7, #3]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	011b      	lsls	r3, r3, #4
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	334c      	adds	r3, #76	@ 0x4c
 8005dee:	2202      	movs	r2, #2
 8005df0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e08:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e10:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005e24:	78fb      	ldrb	r3, [r7, #3]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e30:	461a      	mov	r2, r3
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	6093      	str	r3, [r2, #8]
 8005e36:	e217      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	4611      	mov	r1, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f003 fcc2 	bl	80097ca <USB_ReadChInterrupts>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e50:	d11b      	bne.n	8005e8a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	1a9b      	subs	r3, r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	334d      	adds	r3, #77	@ 0x4d
 8005e62:	2209      	movs	r2, #9
 8005e64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f004 fa55 	bl	800a31e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e80:	461a      	mov	r2, r3
 8005e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e86:	6093      	str	r3, [r2, #8]
 8005e88:	e1ee      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f003 fc99 	bl	80097ca <USB_ReadChInterrupts>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	f040 81df 	bne.w	8006262 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	334d      	adds	r3, #77	@ 0x4d
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	f040 8093 	bne.w	8005ff4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	334d      	adds	r3, #77	@ 0x4d
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	334c      	adds	r3, #76	@ 0x4c
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	3326      	adds	r3, #38	@ 0x26
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d00b      	beq.n	8005f24 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	1a9b      	subs	r3, r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	3326      	adds	r3, #38	@ 0x26
 8005f1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	f040 8190 	bne.w	8006244 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	799b      	ldrb	r3, [r3, #6]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d115      	bne.n	8005f58 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	333d      	adds	r3, #61	@ 0x3d
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	78fa      	ldrb	r2, [r7, #3]
 8005f40:	f083 0301 	eor.w	r3, r3, #1
 8005f44:	b2d8      	uxtb	r0, r3
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	333d      	adds	r3, #61	@ 0x3d
 8005f54:	4602      	mov	r2, r0
 8005f56:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	799b      	ldrb	r3, [r3, #6]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 8171 	bne.w	8006244 <HCD_HC_OUT_IRQHandler+0x954>
 8005f62:	78fa      	ldrb	r2, [r7, #3]
 8005f64:	6879      	ldr	r1, [r7, #4]
 8005f66:	4613      	mov	r3, r2
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	3334      	adds	r3, #52	@ 0x34
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 8165 	beq.w	8006244 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	3334      	adds	r3, #52	@ 0x34
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4613      	mov	r3, r2
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4403      	add	r3, r0
 8005f9a:	3328      	adds	r3, #40	@ 0x28
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	440b      	add	r3, r1
 8005fa0:	1e59      	subs	r1, r3, #1
 8005fa2:	78fa      	ldrb	r2, [r7, #3]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4403      	add	r3, r0
 8005fb0:	3328      	adds	r3, #40	@ 0x28
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fb8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 813f 	beq.w	8006244 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	333d      	adds	r3, #61	@ 0x3d
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	f083 0301 	eor.w	r3, r3, #1
 8005fde:	b2d8      	uxtb	r0, r3
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	333d      	adds	r3, #61	@ 0x3d
 8005fee:	4602      	mov	r2, r0
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e127      	b.n	8006244 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005ff4:	78fa      	ldrb	r2, [r7, #3]
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	334d      	adds	r3, #77	@ 0x4d
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d120      	bne.n	800604c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800600a:	78fa      	ldrb	r2, [r7, #3]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	334d      	adds	r3, #77	@ 0x4d
 800601a:	2202      	movs	r2, #2
 800601c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	4613      	mov	r3, r2
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	331b      	adds	r3, #27
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 8107 	bne.w	8006244 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	334c      	adds	r3, #76	@ 0x4c
 8006046:	2202      	movs	r2, #2
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e0fb      	b.n	8006244 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	334d      	adds	r3, #77	@ 0x4d
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d13a      	bne.n	80060d8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006062:	78fa      	ldrb	r2, [r7, #3]
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	334d      	adds	r3, #77	@ 0x4d
 8006072:	2202      	movs	r2, #2
 8006074:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	334c      	adds	r3, #76	@ 0x4c
 8006086:	2202      	movs	r2, #2
 8006088:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	331b      	adds	r3, #27
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b01      	cmp	r3, #1
 800609e:	f040 80d1 	bne.w	8006244 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	331b      	adds	r3, #27
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d4:	6053      	str	r3, [r2, #4]
 80060d6:	e0b5      	b.n	8006244 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	011b      	lsls	r3, r3, #4
 80060e0:	1a9b      	subs	r3, r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	440b      	add	r3, r1
 80060e6:	334d      	adds	r3, #77	@ 0x4d
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d114      	bne.n	8006118 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	334d      	adds	r3, #77	@ 0x4d
 80060fe:	2202      	movs	r2, #2
 8006100:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006102:	78fa      	ldrb	r2, [r7, #3]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	1a9b      	subs	r3, r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	334c      	adds	r3, #76	@ 0x4c
 8006112:	2202      	movs	r2, #2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e095      	b.n	8006244 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006118:	78fa      	ldrb	r2, [r7, #3]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	440b      	add	r3, r1
 8006126:	334d      	adds	r3, #77	@ 0x4d
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b06      	cmp	r3, #6
 800612c:	d114      	bne.n	8006158 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800612e:	78fa      	ldrb	r2, [r7, #3]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	334d      	adds	r3, #77	@ 0x4d
 800613e:	2202      	movs	r2, #2
 8006140:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006142:	78fa      	ldrb	r2, [r7, #3]
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	334c      	adds	r3, #76	@ 0x4c
 8006152:	2205      	movs	r2, #5
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e075      	b.n	8006244 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	4613      	mov	r3, r2
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	440b      	add	r3, r1
 8006166:	334d      	adds	r3, #77	@ 0x4d
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b07      	cmp	r3, #7
 800616c:	d00a      	beq.n	8006184 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800616e:	78fa      	ldrb	r2, [r7, #3]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	334d      	adds	r3, #77	@ 0x4d
 800617e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006180:	2b09      	cmp	r3, #9
 8006182:	d170      	bne.n	8006266 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	334d      	adds	r3, #77	@ 0x4d
 8006194:	2202      	movs	r2, #2
 8006196:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	3344      	adds	r3, #68	@ 0x44
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c59      	adds	r1, r3, #1
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4403      	add	r3, r0
 80061b8:	3344      	adds	r3, #68	@ 0x44
 80061ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	3344      	adds	r3, #68	@ 0x44
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d914      	bls.n	80061fc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	6879      	ldr	r1, [r7, #4]
 80061d6:	4613      	mov	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	3344      	adds	r3, #68	@ 0x44
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80061e6:	78fa      	ldrb	r2, [r7, #3]
 80061e8:	6879      	ldr	r1, [r7, #4]
 80061ea:	4613      	mov	r3, r2
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	334c      	adds	r3, #76	@ 0x4c
 80061f6:	2204      	movs	r2, #4
 80061f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061fa:	e022      	b.n	8006242 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	334c      	adds	r3, #76	@ 0x4c
 800620c:	2202      	movs	r2, #2
 800620e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006226:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800622e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623c:	461a      	mov	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006242:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006244:	78fa      	ldrb	r2, [r7, #3]
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	334c      	adds	r3, #76	@ 0x4c
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f00b f81c 	bl	8011298 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006260:	e002      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8006262:	bf00      	nop
 8006264:	e000      	b.n	8006268 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8006266:	bf00      	nop
  }
}
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b08a      	sub	sp, #40	@ 0x28
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	0c5b      	lsrs	r3, r3, #17
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	091b      	lsrs	r3, r3, #4
 800629e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d004      	beq.n	80062b4 <HCD_RXQLVL_IRQHandler+0x46>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b05      	cmp	r3, #5
 80062ae:	f000 80b6 	beq.w	800641e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062b2:	e0b7      	b.n	8006424 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80b3 	beq.w	8006422 <HCD_RXQLVL_IRQHandler+0x1b4>
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	332c      	adds	r3, #44	@ 0x2c
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80a7 	beq.w	8006422 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4613      	mov	r3, r2
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	3338      	adds	r3, #56	@ 0x38
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	18d1      	adds	r1, r2, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4613      	mov	r3, r2
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4403      	add	r3, r0
 80062f8:	3334      	adds	r3, #52	@ 0x34
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4299      	cmp	r1, r3
 80062fe:	f200 8083 	bhi.w	8006408 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4613      	mov	r3, r2
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	332c      	adds	r3, #44	@ 0x2c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	b292      	uxth	r2, r2
 800631c:	4619      	mov	r1, r3
 800631e:	f003 f9e9 	bl	80096f4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4613      	mov	r3, r2
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	332c      	adds	r3, #44	@ 0x2c
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	18d1      	adds	r1, r2, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4613      	mov	r3, r2
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4403      	add	r3, r0
 8006346:	332c      	adds	r3, #44	@ 0x2c
 8006348:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4613      	mov	r3, r2
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	3338      	adds	r3, #56	@ 0x38
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	18d1      	adds	r1, r2, r3
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4613      	mov	r3, r2
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4403      	add	r3, r0
 800636e:	3338      	adds	r3, #56	@ 0x38
 8006370:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	0cdb      	lsrs	r3, r3, #19
 8006382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006386:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4613      	mov	r3, r2
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	3328      	adds	r3, #40	@ 0x28
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4293      	cmp	r3, r2
 80063a0:	d13f      	bne.n	8006422 <HCD_RXQLVL_IRQHandler+0x1b4>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d03c      	beq.n	8006422 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d4:	461a      	mov	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4613      	mov	r3, r2
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	1a9b      	subs	r3, r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	333c      	adds	r3, #60	@ 0x3c
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f083 0301 	eor.w	r3, r3, #1
 80063f0:	b2d8      	uxtb	r0, r3
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4613      	mov	r3, r2
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	333c      	adds	r3, #60	@ 0x3c
 8006402:	4602      	mov	r2, r0
 8006404:	701a      	strb	r2, [r3, #0]
      break;
 8006406:	e00c      	b.n	8006422 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4613      	mov	r3, r2
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	334c      	adds	r3, #76	@ 0x4c
 8006418:	2204      	movs	r2, #4
 800641a:	701a      	strb	r2, [r3, #0]
      break;
 800641c:	e001      	b.n	8006422 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800641e:	bf00      	nop
 8006420:	e000      	b.n	8006424 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8006422:	bf00      	nop
  }
}
 8006424:	bf00      	nop
 8006426:	3728      	adds	r7, #40	@ 0x28
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006458:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d10b      	bne.n	800647c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d102      	bne.n	8006474 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f00a fef6 	bl	8011260 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f043 0302 	orr.w	r3, r3, #2
 800647a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b08      	cmp	r3, #8
 8006484:	d132      	bne.n	80064ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f043 0308 	orr.w	r3, r3, #8
 800648c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d126      	bne.n	80064e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	7a5b      	ldrb	r3, [r3, #9]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d113      	bne.n	80064c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80064a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064aa:	d106      	bne.n	80064ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2102      	movs	r1, #2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f003 fab4 	bl	8009a20 <USB_InitFSLSPClkSel>
 80064b8:	e011      	b.n	80064de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2101      	movs	r1, #1
 80064c0:	4618      	mov	r0, r3
 80064c2:	f003 faad 	bl	8009a20 <USB_InitFSLSPClkSel>
 80064c6:	e00a      	b.n	80064de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	79db      	ldrb	r3, [r3, #7]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d106      	bne.n	80064de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064d6:	461a      	mov	r2, r3
 80064d8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80064dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f00a feec 	bl	80112bc <HAL_HCD_PortEnabled_Callback>
 80064e4:	e002      	b.n	80064ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f00a fef6 	bl	80112d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d103      	bne.n	80064fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f043 0320 	orr.w	r3, r3, #32
 80064fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6013      	str	r3, [r2, #0]
}
 800650a:	bf00      	nop
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e12b      	b.n	800677e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fc ff4a 	bl	80033d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2224      	movs	r2, #36	@ 0x24
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0201 	bic.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006578:	f001 fa20 	bl	80079bc <HAL_RCC_GetPCLK1Freq>
 800657c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4a81      	ldr	r2, [pc, #516]	@ (8006788 <HAL_I2C_Init+0x274>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d807      	bhi.n	8006598 <HAL_I2C_Init+0x84>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a80      	ldr	r2, [pc, #512]	@ (800678c <HAL_I2C_Init+0x278>)
 800658c:	4293      	cmp	r3, r2
 800658e:	bf94      	ite	ls
 8006590:	2301      	movls	r3, #1
 8006592:	2300      	movhi	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e006      	b.n	80065a6 <HAL_I2C_Init+0x92>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a7d      	ldr	r2, [pc, #500]	@ (8006790 <HAL_I2C_Init+0x27c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	bf94      	ite	ls
 80065a0:	2301      	movls	r3, #1
 80065a2:	2300      	movhi	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e0e7      	b.n	800677e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a78      	ldr	r2, [pc, #480]	@ (8006794 <HAL_I2C_Init+0x280>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	0c9b      	lsrs	r3, r3, #18
 80065b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a6a      	ldr	r2, [pc, #424]	@ (8006788 <HAL_I2C_Init+0x274>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d802      	bhi.n	80065e8 <HAL_I2C_Init+0xd4>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3301      	adds	r3, #1
 80065e6:	e009      	b.n	80065fc <HAL_I2C_Init+0xe8>
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	4a69      	ldr	r2, [pc, #420]	@ (8006798 <HAL_I2C_Init+0x284>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	099b      	lsrs	r3, r3, #6
 80065fa:	3301      	adds	r3, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	430b      	orrs	r3, r1
 8006602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800660e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	495c      	ldr	r1, [pc, #368]	@ (8006788 <HAL_I2C_Init+0x274>)
 8006618:	428b      	cmp	r3, r1
 800661a:	d819      	bhi.n	8006650 <HAL_I2C_Init+0x13c>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e59      	subs	r1, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	fbb1 f3f3 	udiv	r3, r1, r3
 800662a:	1c59      	adds	r1, r3, #1
 800662c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006630:	400b      	ands	r3, r1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00a      	beq.n	800664c <HAL_I2C_Init+0x138>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1e59      	subs	r1, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	fbb1 f3f3 	udiv	r3, r1, r3
 8006644:	3301      	adds	r3, #1
 8006646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800664a:	e051      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 800664c:	2304      	movs	r3, #4
 800664e:	e04f      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d111      	bne.n	800667c <HAL_I2C_Init+0x168>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	1e58      	subs	r0, r3, #1
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6859      	ldr	r1, [r3, #4]
 8006660:	460b      	mov	r3, r1
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	440b      	add	r3, r1
 8006666:	fbb0 f3f3 	udiv	r3, r0, r3
 800666a:	3301      	adds	r3, #1
 800666c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006670:	2b00      	cmp	r3, #0
 8006672:	bf0c      	ite	eq
 8006674:	2301      	moveq	r3, #1
 8006676:	2300      	movne	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	e012      	b.n	80066a2 <HAL_I2C_Init+0x18e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1e58      	subs	r0, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	0099      	lsls	r1, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006692:	3301      	adds	r3, #1
 8006694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006698:	2b00      	cmp	r3, #0
 800669a:	bf0c      	ite	eq
 800669c:	2301      	moveq	r3, #1
 800669e:	2300      	movne	r3, #0
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_I2C_Init+0x196>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e022      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10e      	bne.n	80066d0 <HAL_I2C_Init+0x1bc>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	1e58      	subs	r0, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	440b      	add	r3, r1
 80066c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066c4:	3301      	adds	r3, #1
 80066c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ce:	e00f      	b.n	80066f0 <HAL_I2C_Init+0x1dc>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	1e58      	subs	r0, r3, #1
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6859      	ldr	r1, [r3, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	0099      	lsls	r1, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066e6:	3301      	adds	r3, #1
 80066e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	6809      	ldr	r1, [r1, #0]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800671e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6911      	ldr	r1, [r2, #16]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	68d2      	ldr	r2, [r2, #12]
 800672a:	4311      	orrs	r1, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	430b      	orrs	r3, r1
 8006732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695a      	ldr	r2, [r3, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	000186a0 	.word	0x000186a0
 800678c:	001e847f 	.word	0x001e847f
 8006790:	003d08ff 	.word	0x003d08ff
 8006794:	431bde83 	.word	0x431bde83
 8006798:	10624dd3 	.word	0x10624dd3

0800679c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e128      	b.n	8006a00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a90      	ldr	r2, [pc, #576]	@ (8006a08 <HAL_I2S_Init+0x26c>)
 80067c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fc fe4b 	bl	8003464 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80067e4:	f023 030f 	bic.w	r3, r3, #15
 80067e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2202      	movs	r2, #2
 80067f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d060      	beq.n	80068bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d102      	bne.n	8006808 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006802:	2310      	movs	r3, #16
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	e001      	b.n	800680c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006808:	2320      	movs	r3, #32
 800680a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b20      	cmp	r3, #32
 8006812:	d802      	bhi.n	800681a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800681a:	2001      	movs	r0, #1
 800681c:	f001 fa0a 	bl	8007c34 <HAL_RCCEx_GetPeriphCLKFreq>
 8006820:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682a:	d125      	bne.n	8006878 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d010      	beq.n	8006856 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	fbb2 f2f3 	udiv	r2, r2, r3
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	461a      	mov	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	3305      	adds	r3, #5
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e01f      	b.n	8006896 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	461a      	mov	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	3305      	adds	r3, #5
 8006874:	613b      	str	r3, [r7, #16]
 8006876:	e00e      	b.n	8006896 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006892:	3305      	adds	r3, #5
 8006894:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4a5c      	ldr	r2, [pc, #368]	@ (8006a0c <HAL_I2S_Init+0x270>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	e003      	b.n	80068c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80068bc:	2302      	movs	r3, #2
 80068be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d902      	bls.n	80068d0 <HAL_I2S_Init+0x134>
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2bff      	cmp	r3, #255	@ 0xff
 80068ce:	d907      	bls.n	80068e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d4:	f043 0210 	orr.w	r2, r3, #16
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e08f      	b.n	8006a00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	ea42 0103 	orr.w	r1, r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80068fe:	f023 030f 	bic.w	r3, r3, #15
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6851      	ldr	r1, [r2, #4]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6892      	ldr	r2, [r2, #8]
 800690a:	4311      	orrs	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	68d2      	ldr	r2, [r2, #12]
 8006910:	4311      	orrs	r1, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	6992      	ldr	r2, [r2, #24]
 8006916:	430a      	orrs	r2, r1
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006922:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d161      	bne.n	80069f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a38      	ldr	r2, [pc, #224]	@ (8006a10 <HAL_I2S_Init+0x274>)
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a37      	ldr	r2, [pc, #220]	@ (8006a14 <HAL_I2S_Init+0x278>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d101      	bne.n	8006940 <HAL_I2S_Init+0x1a4>
 800693c:	4b36      	ldr	r3, [pc, #216]	@ (8006a18 <HAL_I2S_Init+0x27c>)
 800693e:	e001      	b.n	8006944 <HAL_I2S_Init+0x1a8>
 8006940:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	4932      	ldr	r1, [pc, #200]	@ (8006a14 <HAL_I2S_Init+0x278>)
 800694c:	428a      	cmp	r2, r1
 800694e:	d101      	bne.n	8006954 <HAL_I2S_Init+0x1b8>
 8006950:	4a31      	ldr	r2, [pc, #196]	@ (8006a18 <HAL_I2S_Init+0x27c>)
 8006952:	e001      	b.n	8006958 <HAL_I2S_Init+0x1bc>
 8006954:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006958:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800695c:	f023 030f 	bic.w	r3, r3, #15
 8006960:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2b      	ldr	r2, [pc, #172]	@ (8006a14 <HAL_I2S_Init+0x278>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_I2S_Init+0x1d4>
 800696c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a18 <HAL_I2S_Init+0x27c>)
 800696e:	e001      	b.n	8006974 <HAL_I2S_Init+0x1d8>
 8006970:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006974:	2202      	movs	r2, #2
 8006976:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a25      	ldr	r2, [pc, #148]	@ (8006a14 <HAL_I2S_Init+0x278>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d101      	bne.n	8006986 <HAL_I2S_Init+0x1ea>
 8006982:	4b25      	ldr	r3, [pc, #148]	@ (8006a18 <HAL_I2S_Init+0x27c>)
 8006984:	e001      	b.n	800698a <HAL_I2S_Init+0x1ee>
 8006986:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006996:	d003      	beq.n	80069a0 <HAL_I2S_Init+0x204>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d103      	bne.n	80069a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80069a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e001      	b.n	80069ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069b6:	4313      	orrs	r3, r2
 80069b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	897b      	ldrh	r3, [r7, #10]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80069d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a0d      	ldr	r2, [pc, #52]	@ (8006a14 <HAL_I2S_Init+0x278>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d101      	bne.n	80069e8 <HAL_I2S_Init+0x24c>
 80069e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006a18 <HAL_I2S_Init+0x27c>)
 80069e6:	e001      	b.n	80069ec <HAL_I2S_Init+0x250>
 80069e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069ec:	897a      	ldrh	r2, [r7, #10]
 80069ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	08006b13 	.word	0x08006b13
 8006a0c:	cccccccd 	.word	0xcccccccd
 8006a10:	08006c29 	.word	0x08006c29
 8006a14:	40003800 	.word	0x40003800
 8006a18:	40003400 	.word	0x40003400

08006a1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	1c9a      	adds	r2, r3, #2
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10e      	bne.n	8006aac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff ffb8 	bl	8006a1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	1c9a      	adds	r2, r3, #2
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	3b01      	subs	r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10e      	bne.n	8006b0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006afa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff93 	bl	8006a30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b086      	sub	sp, #24
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d13a      	bne.n	8006ba4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d109      	bne.n	8006b4c <I2S_IRQHandler+0x3a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b42:	2b40      	cmp	r3, #64	@ 0x40
 8006b44:	d102      	bne.n	8006b4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ffb4 	bl	8006ab4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b52:	2b40      	cmp	r3, #64	@ 0x40
 8006b54:	d126      	bne.n	8006ba4 <I2S_IRQHandler+0x92>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 0320 	and.w	r3, r3, #32
 8006b60:	2b20      	cmp	r3, #32
 8006b62:	d11f      	bne.n	8006ba4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b96:	f043 0202 	orr.w	r2, r3, #2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ff50 	bl	8006a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d136      	bne.n	8006c1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d109      	bne.n	8006bce <I2S_IRQHandler+0xbc>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc4:	2b80      	cmp	r3, #128	@ 0x80
 8006bc6:	d102      	bne.n	8006bce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff ff45 	bl	8006a58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b08      	cmp	r3, #8
 8006bd6:	d122      	bne.n	8006c1e <I2S_IRQHandler+0x10c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d11b      	bne.n	8006c1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006bf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c10:	f043 0204 	orr.w	r2, r3, #4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff ff13 	bl	8006a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a92      	ldr	r2, [pc, #584]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d101      	bne.n	8006c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006c42:	4b92      	ldr	r3, [pc, #584]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c44:	e001      	b.n	8006c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006c46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a8b      	ldr	r2, [pc, #556]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d101      	bne.n	8006c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c60:	4b8a      	ldr	r3, [pc, #552]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c62:	e001      	b.n	8006c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c74:	d004      	beq.n	8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f040 8099 	bne.w	8006db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d107      	bne.n	8006c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f925 	bl	8006ee4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d107      	bne.n	8006cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9c8 	bl	8007044 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cba:	2b40      	cmp	r3, #64	@ 0x40
 8006cbc:	d13a      	bne.n	8006d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d035      	beq.n	8006d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cd4:	e001      	b.n	8006cda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006cd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4969      	ldr	r1, [pc, #420]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ce2:	428b      	cmp	r3, r1
 8006ce4:	d101      	bne.n	8006cea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006ce6:	4b69      	ldr	r3, [pc, #420]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ce8:	e001      	b.n	8006cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006cea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cee:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006cf2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d26:	f043 0202 	orr.w	r2, r3, #2
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fe88 	bl	8006a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0308 	and.w	r3, r3, #8
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	f040 80c3 	bne.w	8006ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80bd 	beq.w	8006ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a49      	ldr	r2, [pc, #292]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d101      	bne.n	8006d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d66:	4b49      	ldr	r3, [pc, #292]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d68:	e001      	b.n	8006d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4944      	ldr	r1, [pc, #272]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d76:	428b      	cmp	r3, r1
 8006d78:	d101      	bne.n	8006d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d7a:	4b44      	ldr	r3, [pc, #272]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d7c:	e001      	b.n	8006d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d7e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f043 0204 	orr.w	r2, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fe4a 	bl	8006a44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006db0:	e089      	b.n	8006ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d107      	bne.n	8006dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8be 	bl	8006f48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d107      	bne.n	8006de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f8fd 	bl	8006fe0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dec:	2b40      	cmp	r3, #64	@ 0x40
 8006dee:	d12f      	bne.n	8006e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d02a      	beq.n	8006e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d101      	bne.n	8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006e14:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e16:	e001      	b.n	8006e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006e18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4919      	ldr	r1, [pc, #100]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e24:	428b      	cmp	r3, r1
 8006e26:	d101      	bne.n	8006e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006e28:	4b18      	ldr	r3, [pc, #96]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e2a:	e001      	b.n	8006e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006e2c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e42:	f043 0202 	orr.w	r2, r3, #2
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7ff fdfa 	bl	8006a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f003 0308 	and.w	r3, r3, #8
 8006e56:	2b08      	cmp	r3, #8
 8006e58:	d136      	bne.n	8006ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d031      	beq.n	8006ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a07      	ldr	r2, [pc, #28]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d101      	bne.n	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e6e:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e70:	e001      	b.n	8006e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4902      	ldr	r1, [pc, #8]	@ (8006e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e7e:	428b      	cmp	r3, r1
 8006e80:	d106      	bne.n	8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e82:	4b02      	ldr	r3, [pc, #8]	@ (8006e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e84:	e006      	b.n	8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e86:	bf00      	nop
 8006e88:	40003800 	.word	0x40003800
 8006e8c:	40003400 	.word	0x40003400
 8006e90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e98:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ea8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb6:	f043 0204 	orr.w	r2, r3, #4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff fdc0 	bl	8006a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ec4:	e000      	b.n	8006ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ec6:	bf00      	nop
}
 8006ec8:	bf00      	nop
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef0:	1c99      	adds	r1, r3, #2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6251      	str	r1, [r2, #36]	@ 0x24
 8006ef6:	881a      	ldrh	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d113      	bne.n	8006f3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff ffc9 	bl	8006ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	1c99      	adds	r1, r3, #2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f5a:	8819      	ldrh	r1, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	@ (8006fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <I2SEx_TxISR_I2SExt+0x22>
 8006f66:	4b1d      	ldr	r3, [pc, #116]	@ (8006fdc <I2SEx_TxISR_I2SExt+0x94>)
 8006f68:	e001      	b.n	8006f6e <I2SEx_TxISR_I2SExt+0x26>
 8006f6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f6e:	460a      	mov	r2, r1
 8006f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d121      	bne.n	8006fce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a12      	ldr	r2, [pc, #72]	@ (8006fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d101      	bne.n	8006f98 <I2SEx_TxISR_I2SExt+0x50>
 8006f94:	4b11      	ldr	r3, [pc, #68]	@ (8006fdc <I2SEx_TxISR_I2SExt+0x94>)
 8006f96:	e001      	b.n	8006f9c <I2SEx_TxISR_I2SExt+0x54>
 8006f98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	490d      	ldr	r1, [pc, #52]	@ (8006fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8006fa4:	428b      	cmp	r3, r1
 8006fa6:	d101      	bne.n	8006fac <I2SEx_TxISR_I2SExt+0x64>
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006fdc <I2SEx_TxISR_I2SExt+0x94>)
 8006faa:	e001      	b.n	8006fb0 <I2SEx_TxISR_I2SExt+0x68>
 8006fac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fb0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d106      	bne.n	8006fce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7ff ff81 	bl	8006ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40003800 	.word	0x40003800
 8006fdc:	40003400 	.word	0x40003400

08006fe0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68d8      	ldr	r0, [r3, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	1c99      	adds	r1, r3, #2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006ff8:	b282      	uxth	r2, r0
 8006ffa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d113      	bne.n	800703c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007022:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2b00      	cmp	r3, #0
 800702c:	d106      	bne.n	800703c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7ff ff4a 	bl	8006ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a20      	ldr	r2, [pc, #128]	@ (80070d4 <I2SEx_RxISR_I2SExt+0x90>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <I2SEx_RxISR_I2SExt+0x16>
 8007056:	4b20      	ldr	r3, [pc, #128]	@ (80070d8 <I2SEx_RxISR_I2SExt+0x94>)
 8007058:	e001      	b.n	800705e <I2SEx_RxISR_I2SExt+0x1a>
 800705a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800705e:	68d8      	ldr	r0, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007064:	1c99      	adds	r1, r3, #2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800706a:	b282      	uxth	r2, r0
 800706c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d121      	bne.n	80070ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a12      	ldr	r2, [pc, #72]	@ (80070d4 <I2SEx_RxISR_I2SExt+0x90>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d101      	bne.n	8007094 <I2SEx_RxISR_I2SExt+0x50>
 8007090:	4b11      	ldr	r3, [pc, #68]	@ (80070d8 <I2SEx_RxISR_I2SExt+0x94>)
 8007092:	e001      	b.n	8007098 <I2SEx_RxISR_I2SExt+0x54>
 8007094:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	490d      	ldr	r1, [pc, #52]	@ (80070d4 <I2SEx_RxISR_I2SExt+0x90>)
 80070a0:	428b      	cmp	r3, r1
 80070a2:	d101      	bne.n	80070a8 <I2SEx_RxISR_I2SExt+0x64>
 80070a4:	4b0c      	ldr	r3, [pc, #48]	@ (80070d8 <I2SEx_RxISR_I2SExt+0x94>)
 80070a6:	e001      	b.n	80070ac <I2SEx_RxISR_I2SExt+0x68>
 80070a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff ff03 	bl	8006ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070ca:	bf00      	nop
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40003800 	.word	0x40003800
 80070d8:	40003400 	.word	0x40003400

080070dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e267      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d075      	beq.n	80071e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80070fa:	4b88      	ldr	r3, [pc, #544]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
 8007102:	2b04      	cmp	r3, #4
 8007104:	d00c      	beq.n	8007120 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007106:	4b85      	ldr	r3, [pc, #532]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800710e:	2b08      	cmp	r3, #8
 8007110:	d112      	bne.n	8007138 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007112:	4b82      	ldr	r3, [pc, #520]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800711a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800711e:	d10b      	bne.n	8007138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007120:	4b7e      	ldr	r3, [pc, #504]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d05b      	beq.n	80071e4 <HAL_RCC_OscConfig+0x108>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d157      	bne.n	80071e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e242      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007140:	d106      	bne.n	8007150 <HAL_RCC_OscConfig+0x74>
 8007142:	4b76      	ldr	r3, [pc, #472]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a75      	ldr	r2, [pc, #468]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	e01d      	b.n	800718c <HAL_RCC_OscConfig+0xb0>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007158:	d10c      	bne.n	8007174 <HAL_RCC_OscConfig+0x98>
 800715a:	4b70      	ldr	r3, [pc, #448]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a6f      	ldr	r2, [pc, #444]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b6d      	ldr	r3, [pc, #436]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a6c      	ldr	r2, [pc, #432]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800716c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e00b      	b.n	800718c <HAL_RCC_OscConfig+0xb0>
 8007174:	4b69      	ldr	r3, [pc, #420]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a68      	ldr	r2, [pc, #416]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800717a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	4b66      	ldr	r3, [pc, #408]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a65      	ldr	r2, [pc, #404]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800718a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d013      	beq.n	80071bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007194:	f7fc fcda 	bl	8003b4c <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800719c:	f7fc fcd6 	bl	8003b4c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b64      	cmp	r3, #100	@ 0x64
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e207      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ae:	4b5b      	ldr	r3, [pc, #364]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0f0      	beq.n	800719c <HAL_RCC_OscConfig+0xc0>
 80071ba:	e014      	b.n	80071e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071bc:	f7fc fcc6 	bl	8003b4c <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071c4:	f7fc fcc2 	bl	8003b4c <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b64      	cmp	r3, #100	@ 0x64
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e1f3      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071d6:	4b51      	ldr	r3, [pc, #324]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0xe8>
 80071e2:	e000      	b.n	80071e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d063      	beq.n	80072ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071f2:	4b4a      	ldr	r3, [pc, #296]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f003 030c 	and.w	r3, r3, #12
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071fe:	4b47      	ldr	r3, [pc, #284]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007206:	2b08      	cmp	r3, #8
 8007208:	d11c      	bne.n	8007244 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800720a:	4b44      	ldr	r3, [pc, #272]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d116      	bne.n	8007244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007216:	4b41      	ldr	r3, [pc, #260]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_RCC_OscConfig+0x152>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d001      	beq.n	800722e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e1c7      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722e:	4b3b      	ldr	r3, [pc, #236]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4937      	ldr	r1, [pc, #220]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800723e:	4313      	orrs	r3, r2
 8007240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007242:	e03a      	b.n	80072ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d020      	beq.n	800728e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800724c:	4b34      	ldr	r3, [pc, #208]	@ (8007320 <HAL_RCC_OscConfig+0x244>)
 800724e:	2201      	movs	r2, #1
 8007250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007252:	f7fc fc7b 	bl	8003b4c <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007258:	e008      	b.n	800726c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800725a:	f7fc fc77 	bl	8003b4c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e1a8      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726c:	4b2b      	ldr	r3, [pc, #172]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f0      	beq.n	800725a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007278:	4b28      	ldr	r3, [pc, #160]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	4925      	ldr	r1, [pc, #148]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 8007288:	4313      	orrs	r3, r2
 800728a:	600b      	str	r3, [r1, #0]
 800728c:	e015      	b.n	80072ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800728e:	4b24      	ldr	r3, [pc, #144]	@ (8007320 <HAL_RCC_OscConfig+0x244>)
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007294:	f7fc fc5a 	bl	8003b4c <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800729a:	e008      	b.n	80072ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800729c:	f7fc fc56 	bl	8003b4c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e187      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ae:	4b1b      	ldr	r3, [pc, #108]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0308 	and.w	r3, r3, #8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d036      	beq.n	8007334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	695b      	ldr	r3, [r3, #20]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d016      	beq.n	80072fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072ce:	4b15      	ldr	r3, [pc, #84]	@ (8007324 <HAL_RCC_OscConfig+0x248>)
 80072d0:	2201      	movs	r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d4:	f7fc fc3a 	bl	8003b4c <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072dc:	f7fc fc36 	bl	8003b4c <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e167      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ee:	4b0b      	ldr	r3, [pc, #44]	@ (800731c <HAL_RCC_OscConfig+0x240>)
 80072f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f0      	beq.n	80072dc <HAL_RCC_OscConfig+0x200>
 80072fa:	e01b      	b.n	8007334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072fc:	4b09      	ldr	r3, [pc, #36]	@ (8007324 <HAL_RCC_OscConfig+0x248>)
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007302:	f7fc fc23 	bl	8003b4c <HAL_GetTick>
 8007306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007308:	e00e      	b.n	8007328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800730a:	f7fc fc1f 	bl	8003b4c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	d907      	bls.n	8007328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e150      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
 800731c:	40023800 	.word	0x40023800
 8007320:	42470000 	.word	0x42470000
 8007324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007328:	4b88      	ldr	r3, [pc, #544]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 800732a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1ea      	bne.n	800730a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8097 	beq.w	8007470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007346:	4b81      	ldr	r3, [pc, #516]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10f      	bne.n	8007372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	4b7d      	ldr	r3, [pc, #500]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735a:	4a7c      	ldr	r2, [pc, #496]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 800735c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007360:	6413      	str	r3, [r2, #64]	@ 0x40
 8007362:	4b7a      	ldr	r3, [pc, #488]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800736e:	2301      	movs	r3, #1
 8007370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007372:	4b77      	ldr	r3, [pc, #476]	@ (8007550 <HAL_RCC_OscConfig+0x474>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d118      	bne.n	80073b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800737e:	4b74      	ldr	r3, [pc, #464]	@ (8007550 <HAL_RCC_OscConfig+0x474>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a73      	ldr	r2, [pc, #460]	@ (8007550 <HAL_RCC_OscConfig+0x474>)
 8007384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800738a:	f7fc fbdf 	bl	8003b4c <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007392:	f7fc fbdb 	bl	8003b4c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e10c      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007550 <HAL_RCC_OscConfig+0x474>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d106      	bne.n	80073c6 <HAL_RCC_OscConfig+0x2ea>
 80073b8:	4b64      	ldr	r3, [pc, #400]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073bc:	4a63      	ldr	r2, [pc, #396]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c4:	e01c      	b.n	8007400 <HAL_RCC_OscConfig+0x324>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b05      	cmp	r3, #5
 80073cc:	d10c      	bne.n	80073e8 <HAL_RCC_OscConfig+0x30c>
 80073ce:	4b5f      	ldr	r3, [pc, #380]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d2:	4a5e      	ldr	r2, [pc, #376]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073d4:	f043 0304 	orr.w	r3, r3, #4
 80073d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073da:	4b5c      	ldr	r3, [pc, #368]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	4a5b      	ldr	r2, [pc, #364]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e6:	e00b      	b.n	8007400 <HAL_RCC_OscConfig+0x324>
 80073e8:	4b58      	ldr	r3, [pc, #352]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ec:	4a57      	ldr	r2, [pc, #348]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073ee:	f023 0301 	bic.w	r3, r3, #1
 80073f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f4:	4b55      	ldr	r3, [pc, #340]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f8:	4a54      	ldr	r2, [pc, #336]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80073fa:	f023 0304 	bic.w	r3, r3, #4
 80073fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d015      	beq.n	8007434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007408:	f7fc fba0 	bl	8003b4c <HAL_GetTick>
 800740c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800740e:	e00a      	b.n	8007426 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007410:	f7fc fb9c 	bl	8003b4c <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e0cb      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007426:	4b49      	ldr	r3, [pc, #292]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0ee      	beq.n	8007410 <HAL_RCC_OscConfig+0x334>
 8007432:	e014      	b.n	800745e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007434:	f7fc fb8a 	bl	8003b4c <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800743a:	e00a      	b.n	8007452 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800743c:	f7fc fb86 	bl	8003b4c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e0b5      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007452:	4b3e      	ldr	r3, [pc, #248]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1ee      	bne.n	800743c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d105      	bne.n	8007470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007464:	4b39      	ldr	r3, [pc, #228]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	4a38      	ldr	r2, [pc, #224]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 800746a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800746e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80a1 	beq.w	80075bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800747a:	4b34      	ldr	r3, [pc, #208]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 030c 	and.w	r3, r3, #12
 8007482:	2b08      	cmp	r3, #8
 8007484:	d05c      	beq.n	8007540 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	2b02      	cmp	r3, #2
 800748c:	d141      	bne.n	8007512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800748e:	4b31      	ldr	r3, [pc, #196]	@ (8007554 <HAL_RCC_OscConfig+0x478>)
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007494:	f7fc fb5a 	bl	8003b4c <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800749c:	f7fc fb56 	bl	8003b4c <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e087      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ae:	4b27      	ldr	r3, [pc, #156]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f0      	bne.n	800749c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69da      	ldr	r2, [r3, #28]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c8:	019b      	lsls	r3, r3, #6
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	3b01      	subs	r3, #1
 80074d4:	041b      	lsls	r3, r3, #16
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	491b      	ldr	r1, [pc, #108]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007554 <HAL_RCC_OscConfig+0x478>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ea:	f7fc fb2f 	bl	8003b4c <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f2:	f7fc fb2b 	bl	8003b4c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e05c      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007504:	4b11      	ldr	r3, [pc, #68]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <HAL_RCC_OscConfig+0x416>
 8007510:	e054      	b.n	80075bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007512:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <HAL_RCC_OscConfig+0x478>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007518:	f7fc fb18 	bl	8003b4c <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007520:	f7fc fb14 	bl	8003b4c <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e045      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007532:	4b06      	ldr	r3, [pc, #24]	@ (800754c <HAL_RCC_OscConfig+0x470>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <HAL_RCC_OscConfig+0x444>
 800753e:	e03d      	b.n	80075bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e038      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
 800754c:	40023800 	.word	0x40023800
 8007550:	40007000 	.word	0x40007000
 8007554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007558:	4b1b      	ldr	r3, [pc, #108]	@ (80075c8 <HAL_RCC_OscConfig+0x4ec>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d028      	beq.n	80075b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007570:	429a      	cmp	r2, r3
 8007572:	d121      	bne.n	80075b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757e:	429a      	cmp	r2, r3
 8007580:	d11a      	bne.n	80075b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007588:	4013      	ands	r3, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800758e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007590:	4293      	cmp	r3, r2
 8007592:	d111      	bne.n	80075b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	3b01      	subs	r3, #1
 80075a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d107      	bne.n	80075b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d001      	beq.n	80075bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40023800 	.word	0x40023800

080075cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e0cc      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075e0:	4b68      	ldr	r3, [pc, #416]	@ (8007784 <HAL_RCC_ClockConfig+0x1b8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d90c      	bls.n	8007608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ee:	4b65      	ldr	r3, [pc, #404]	@ (8007784 <HAL_RCC_ClockConfig+0x1b8>)
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075f6:	4b63      	ldr	r3, [pc, #396]	@ (8007784 <HAL_RCC_ClockConfig+0x1b8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d001      	beq.n	8007608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e0b8      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d020      	beq.n	8007656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007620:	4b59      	ldr	r3, [pc, #356]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	4a58      	ldr	r2, [pc, #352]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800762a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007638:	4b53      	ldr	r3, [pc, #332]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	4a52      	ldr	r2, [pc, #328]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007644:	4b50      	ldr	r3, [pc, #320]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	494d      	ldr	r1, [pc, #308]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	4313      	orrs	r3, r2
 8007654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d044      	beq.n	80076ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d107      	bne.n	800767a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766a:	4b47      	ldr	r3, [pc, #284]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d119      	bne.n	80076aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e07f      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d003      	beq.n	800768a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007686:	2b03      	cmp	r3, #3
 8007688:	d107      	bne.n	800769a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800768a:	4b3f      	ldr	r3, [pc, #252]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d109      	bne.n	80076aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e06f      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800769a:	4b3b      	ldr	r3, [pc, #236]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e067      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076aa:	4b37      	ldr	r3, [pc, #220]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f023 0203 	bic.w	r2, r3, #3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4934      	ldr	r1, [pc, #208]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076bc:	f7fc fa46 	bl	8003b4c <HAL_GetTick>
 80076c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c2:	e00a      	b.n	80076da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c4:	f7fc fa42 	bl	8003b4c <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d901      	bls.n	80076da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076d6:	2303      	movs	r3, #3
 80076d8:	e04f      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076da:	4b2b      	ldr	r3, [pc, #172]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 020c 	and.w	r2, r3, #12
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d1eb      	bne.n	80076c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076ec:	4b25      	ldr	r3, [pc, #148]	@ (8007784 <HAL_RCC_ClockConfig+0x1b8>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d20c      	bcs.n	8007714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076fa:	4b22      	ldr	r3, [pc, #136]	@ (8007784 <HAL_RCC_ClockConfig+0x1b8>)
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b20      	ldr	r3, [pc, #128]	@ (8007784 <HAL_RCC_ClockConfig+0x1b8>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e032      	b.n	800777a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007720:	4b19      	ldr	r3, [pc, #100]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	4916      	ldr	r1, [pc, #88]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	4313      	orrs	r3, r2
 8007730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0308 	and.w	r3, r3, #8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800773e:	4b12      	ldr	r3, [pc, #72]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	490e      	ldr	r1, [pc, #56]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	4313      	orrs	r3, r2
 8007750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007752:	f000 f821 	bl	8007798 <HAL_RCC_GetSysClockFreq>
 8007756:	4602      	mov	r2, r0
 8007758:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	490a      	ldr	r1, [pc, #40]	@ (800778c <HAL_RCC_ClockConfig+0x1c0>)
 8007764:	5ccb      	ldrb	r3, [r1, r3]
 8007766:	fa22 f303 	lsr.w	r3, r2, r3
 800776a:	4a09      	ldr	r2, [pc, #36]	@ (8007790 <HAL_RCC_ClockConfig+0x1c4>)
 800776c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800776e:	4b09      	ldr	r3, [pc, #36]	@ (8007794 <HAL_RCC_ClockConfig+0x1c8>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f7fb ffca 	bl	800370c <HAL_InitTick>

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40023c00 	.word	0x40023c00
 8007788:	40023800 	.word	0x40023800
 800778c:	0801665c 	.word	0x0801665c
 8007790:	20000264 	.word	0x20000264
 8007794:	20000268 	.word	0x20000268

08007798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800779c:	b094      	sub	sp, #80	@ 0x50
 800779e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b0:	4b79      	ldr	r3, [pc, #484]	@ (8007998 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 030c 	and.w	r3, r3, #12
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d00d      	beq.n	80077d8 <HAL_RCC_GetSysClockFreq+0x40>
 80077bc:	2b08      	cmp	r3, #8
 80077be:	f200 80e1 	bhi.w	8007984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_RCC_GetSysClockFreq+0x34>
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d003      	beq.n	80077d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80077ca:	e0db      	b.n	8007984 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077cc:	4b73      	ldr	r3, [pc, #460]	@ (800799c <HAL_RCC_GetSysClockFreq+0x204>)
 80077ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077d0:	e0db      	b.n	800798a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077d2:	4b73      	ldr	r3, [pc, #460]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80077d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077d6:	e0d8      	b.n	800798a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077d8:	4b6f      	ldr	r3, [pc, #444]	@ (8007998 <HAL_RCC_GetSysClockFreq+0x200>)
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077e2:	4b6d      	ldr	r3, [pc, #436]	@ (8007998 <HAL_RCC_GetSysClockFreq+0x200>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d063      	beq.n	80078b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007998 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	099b      	lsrs	r3, r3, #6
 80077f4:	2200      	movs	r2, #0
 80077f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007800:	633b      	str	r3, [r7, #48]	@ 0x30
 8007802:	2300      	movs	r3, #0
 8007804:	637b      	str	r3, [r7, #52]	@ 0x34
 8007806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800780a:	4622      	mov	r2, r4
 800780c:	462b      	mov	r3, r5
 800780e:	f04f 0000 	mov.w	r0, #0
 8007812:	f04f 0100 	mov.w	r1, #0
 8007816:	0159      	lsls	r1, r3, #5
 8007818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800781c:	0150      	lsls	r0, r2, #5
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4621      	mov	r1, r4
 8007824:	1a51      	subs	r1, r2, r1
 8007826:	6139      	str	r1, [r7, #16]
 8007828:	4629      	mov	r1, r5
 800782a:	eb63 0301 	sbc.w	r3, r3, r1
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800783c:	4659      	mov	r1, fp
 800783e:	018b      	lsls	r3, r1, #6
 8007840:	4651      	mov	r1, sl
 8007842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007846:	4651      	mov	r1, sl
 8007848:	018a      	lsls	r2, r1, #6
 800784a:	4651      	mov	r1, sl
 800784c:	ebb2 0801 	subs.w	r8, r2, r1
 8007850:	4659      	mov	r1, fp
 8007852:	eb63 0901 	sbc.w	r9, r3, r1
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f04f 0300 	mov.w	r3, #0
 800785e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800786a:	4690      	mov	r8, r2
 800786c:	4699      	mov	r9, r3
 800786e:	4623      	mov	r3, r4
 8007870:	eb18 0303 	adds.w	r3, r8, r3
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	462b      	mov	r3, r5
 8007878:	eb49 0303 	adc.w	r3, r9, r3
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800788a:	4629      	mov	r1, r5
 800788c:	024b      	lsls	r3, r1, #9
 800788e:	4621      	mov	r1, r4
 8007890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007894:	4621      	mov	r1, r4
 8007896:	024a      	lsls	r2, r1, #9
 8007898:	4610      	mov	r0, r2
 800789a:	4619      	mov	r1, r3
 800789c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800789e:	2200      	movs	r2, #0
 80078a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078a8:	f7f9 f99e 	bl	8000be8 <__aeabi_uldivmod>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4613      	mov	r3, r2
 80078b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b4:	e058      	b.n	8007968 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078b6:	4b38      	ldr	r3, [pc, #224]	@ (8007998 <HAL_RCC_GetSysClockFreq+0x200>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	099b      	lsrs	r3, r3, #6
 80078bc:	2200      	movs	r2, #0
 80078be:	4618      	mov	r0, r3
 80078c0:	4611      	mov	r1, r2
 80078c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	2300      	movs	r3, #0
 80078ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80078cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078d0:	4642      	mov	r2, r8
 80078d2:	464b      	mov	r3, r9
 80078d4:	f04f 0000 	mov.w	r0, #0
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	0159      	lsls	r1, r3, #5
 80078de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078e2:	0150      	lsls	r0, r2, #5
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4641      	mov	r1, r8
 80078ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80078ee:	4649      	mov	r1, r9
 80078f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007908:	ebb2 040a 	subs.w	r4, r2, sl
 800790c:	eb63 050b 	sbc.w	r5, r3, fp
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	f04f 0300 	mov.w	r3, #0
 8007918:	00eb      	lsls	r3, r5, #3
 800791a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800791e:	00e2      	lsls	r2, r4, #3
 8007920:	4614      	mov	r4, r2
 8007922:	461d      	mov	r5, r3
 8007924:	4643      	mov	r3, r8
 8007926:	18e3      	adds	r3, r4, r3
 8007928:	603b      	str	r3, [r7, #0]
 800792a:	464b      	mov	r3, r9
 800792c:	eb45 0303 	adc.w	r3, r5, r3
 8007930:	607b      	str	r3, [r7, #4]
 8007932:	f04f 0200 	mov.w	r2, #0
 8007936:	f04f 0300 	mov.w	r3, #0
 800793a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800793e:	4629      	mov	r1, r5
 8007940:	028b      	lsls	r3, r1, #10
 8007942:	4621      	mov	r1, r4
 8007944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007948:	4621      	mov	r1, r4
 800794a:	028a      	lsls	r2, r1, #10
 800794c:	4610      	mov	r0, r2
 800794e:	4619      	mov	r1, r3
 8007950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007952:	2200      	movs	r2, #0
 8007954:	61bb      	str	r3, [r7, #24]
 8007956:	61fa      	str	r2, [r7, #28]
 8007958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800795c:	f7f9 f944 	bl	8000be8 <__aeabi_uldivmod>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	4613      	mov	r3, r2
 8007966:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007968:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <HAL_RCC_GetSysClockFreq+0x200>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	3301      	adds	r3, #1
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800797a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800797c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007982:	e002      	b.n	800798a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007984:	4b05      	ldr	r3, [pc, #20]	@ (800799c <HAL_RCC_GetSysClockFreq+0x204>)
 8007986:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800798a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800798c:	4618      	mov	r0, r3
 800798e:	3750      	adds	r7, #80	@ 0x50
 8007990:	46bd      	mov	sp, r7
 8007992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007996:	bf00      	nop
 8007998:	40023800 	.word	0x40023800
 800799c:	00f42400 	.word	0x00f42400
 80079a0:	007a1200 	.word	0x007a1200

080079a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079a8:	4b03      	ldr	r3, [pc, #12]	@ (80079b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80079aa:	681b      	ldr	r3, [r3, #0]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20000264 	.word	0x20000264

080079bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079c0:	f7ff fff0 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	0a9b      	lsrs	r3, r3, #10
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	4903      	ldr	r1, [pc, #12]	@ (80079e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079d2:	5ccb      	ldrb	r3, [r1, r3]
 80079d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d8:	4618      	mov	r0, r3
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40023800 	.word	0x40023800
 80079e0:	0801666c 	.word	0x0801666c

080079e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079e8:	f7ff ffdc 	bl	80079a4 <HAL_RCC_GetHCLKFreq>
 80079ec:	4602      	mov	r2, r0
 80079ee:	4b05      	ldr	r3, [pc, #20]	@ (8007a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	0b5b      	lsrs	r3, r3, #13
 80079f4:	f003 0307 	and.w	r3, r3, #7
 80079f8:	4903      	ldr	r1, [pc, #12]	@ (8007a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079fa:	5ccb      	ldrb	r3, [r1, r3]
 80079fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	40023800 	.word	0x40023800
 8007a08:	0801666c 	.word	0x0801666c

08007a0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	220f      	movs	r2, #15
 8007a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a1c:	4b12      	ldr	r3, [pc, #72]	@ (8007a68 <HAL_RCC_GetClockConfig+0x5c>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0203 	and.w	r2, r3, #3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a28:	4b0f      	ldr	r3, [pc, #60]	@ (8007a68 <HAL_RCC_GetClockConfig+0x5c>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a34:	4b0c      	ldr	r3, [pc, #48]	@ (8007a68 <HAL_RCC_GetClockConfig+0x5c>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a40:	4b09      	ldr	r3, [pc, #36]	@ (8007a68 <HAL_RCC_GetClockConfig+0x5c>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	08db      	lsrs	r3, r3, #3
 8007a46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a4e:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <HAL_RCC_GetClockConfig+0x60>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0207 	and.w	r2, r3, #7
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	601a      	str	r2, [r3, #0]
}
 8007a5a:	bf00      	nop
 8007a5c:	370c      	adds	r7, #12
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	40023c00 	.word	0x40023c00

08007a70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d105      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d035      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a98:	4b62      	ldr	r3, [pc, #392]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a9e:	f7fc f855 	bl	8003b4c <HAL_GetTick>
 8007aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007aa4:	e008      	b.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007aa6:	f7fc f851 	bl	8003b4c <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d901      	bls.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e0b0      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1f0      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	019a      	lsls	r2, r3, #6
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	071b      	lsls	r3, r3, #28
 8007ad0:	4955      	ldr	r1, [pc, #340]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ad8:	4b52      	ldr	r3, [pc, #328]	@ (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ade:	f7fc f835 	bl	8003b4c <HAL_GetTick>
 8007ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ae4:	e008      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ae6:	f7fc f831 	bl	8003b4c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e090      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007af8:	4b4b      	ldr	r3, [pc, #300]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8083 	beq.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	4b44      	ldr	r3, [pc, #272]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	4a43      	ldr	r2, [pc, #268]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b22:	4b41      	ldr	r3, [pc, #260]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a3e      	ldr	r2, [pc, #248]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b3a:	f7fc f807 	bl	8003b4c <HAL_GetTick>
 8007b3e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b42:	f7fc f803 	bl	8003b4c <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e062      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b54:	4b35      	ldr	r3, [pc, #212]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b60:	4b31      	ldr	r3, [pc, #196]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b68:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d02f      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d028      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b88:	4b29      	ldr	r3, [pc, #164]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b8e:	4b28      	ldr	r3, [pc, #160]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b94:	4a24      	ldr	r2, [pc, #144]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b9a:	4b23      	ldr	r3, [pc, #140]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d114      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ba6:	f7fb ffd1 	bl	8003b4c <HAL_GetTick>
 8007baa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bac:	e00a      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bae:	f7fb ffcd 	bl	8003b4c <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e02a      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc4:	4b18      	ldr	r3, [pc, #96]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0ee      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bdc:	d10d      	bne.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007bde:	4b12      	ldr	r3, [pc, #72]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bf2:	490d      	ldr	r1, [pc, #52]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	608b      	str	r3, [r1, #8]
 8007bf8:	e005      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c00:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007c04:	6093      	str	r3, [r2, #8]
 8007c06:	4b08      	ldr	r3, [pc, #32]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c12:	4905      	ldr	r1, [pc, #20]	@ (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	42470068 	.word	0x42470068
 8007c28:	40023800 	.word	0x40023800
 8007c2c:	40007000 	.word	0x40007000
 8007c30:	42470e40 	.word	0x42470e40

08007c34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d13f      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007c52:	4b24      	ldr	r3, [pc, #144]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c5a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d006      	beq.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c68:	d12f      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c6c:	617b      	str	r3, [r7, #20]
          break;
 8007c6e:	e02f      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c70:	4b1c      	ldr	r3, [pc, #112]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c7c:	d108      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c7e:	4b19      	ldr	r3, [pc, #100]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c86:	4a19      	ldr	r2, [pc, #100]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c8c:	613b      	str	r3, [r7, #16]
 8007c8e:	e007      	b.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c90:	4b14      	ldr	r3, [pc, #80]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c98:	4a15      	ldr	r2, [pc, #84]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007ca0:	4b10      	ldr	r3, [pc, #64]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cba:	0f1b      	lsrs	r3, r3, #28
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc6:	617b      	str	r3, [r7, #20]
          break;
 8007cc8:	e002      	b.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	617b      	str	r3, [r7, #20]
          break;
 8007cce:	bf00      	nop
        }
      }
      break;
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007cd2:	bf00      	nop
    }
  }
  return frequency;
 8007cd4:	697b      	ldr	r3, [r7, #20]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40023800 	.word	0x40023800
 8007ce8:	00bb8000 	.word	0x00bb8000
 8007cec:	007a1200 	.word	0x007a1200
 8007cf0:	00f42400 	.word	0x00f42400

08007cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e07b      	b.n	8007dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d108      	bne.n	8007d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d16:	d009      	beq.n	8007d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	61da      	str	r2, [r3, #28]
 8007d1e:	e005      	b.n	8007d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fb fc0c 	bl	8003564 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d74:	431a      	orrs	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	f003 0301 	and.w	r3, r3, #1
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db0:	ea42 0103 	orr.w	r1, r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	0c1b      	lsrs	r3, r3, #16
 8007dca:	f003 0104 	and.w	r1, r3, #4
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd2:	f003 0210 	and.w	r2, r3, #16
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69da      	ldr	r2, [r3, #28]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e041      	b.n	8007e9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f839 	bl	8007ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2202      	movs	r2, #2
 8007e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f000 f9bf 	bl	80081c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d001      	beq.n	8007ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e04e      	b.n	8007f6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a23      	ldr	r2, [pc, #140]	@ (8007f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d022      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007efa:	d01d      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a1f      	ldr	r2, [pc, #124]	@ (8007f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d018      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d013      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a1c      	ldr	r2, [pc, #112]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d00e      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d009      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a19      	ldr	r2, [pc, #100]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIM_Base_Start_IT+0x80>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a18      	ldr	r2, [pc, #96]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d111      	bne.n	8007f5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d010      	beq.n	8007f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f042 0201 	orr.w	r2, r2, #1
 8007f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5a:	e007      	b.n	8007f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40001800 	.word	0x40001800

08007f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d020      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01b      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0202 	mvn.w	r2, #2
 8007fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f003 0303 	and.w	r3, r3, #3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8d2 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 8007fe8:	e005      	b.n	8007ff6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8c4 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8d5 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d020      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01b      	beq.n	8008048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f06f 0204 	mvn.w	r2, #4
 8008018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f8ac 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 8008034:	e005      	b.n	8008042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f89e 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f8af 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d020      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01b      	beq.n	8008094 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f06f 0208 	mvn.w	r2, #8
 8008064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f886 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 8008080:	e005      	b.n	800808e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f878 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f889 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0210 	mvn.w	r2, #16
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2208      	movs	r2, #8
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f860 	bl	800818c <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f852 	bl	8008178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f863 	bl	80081a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00c      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0201 	mvn.w	r2, #1
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fb f924 	bl	800334c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00c      	beq.n	8008128 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f900 	bl	8008328 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00c      	beq.n	800814c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f834 	bl	80081b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0220 	mvn.w	r2, #32
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8d2 	bl	8008314 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008170:	bf00      	nop
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a43      	ldr	r2, [pc, #268]	@ (80082e8 <TIM_Base_SetConfig+0x120>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d013      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e6:	d00f      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a40      	ldr	r2, [pc, #256]	@ (80082ec <TIM_Base_SetConfig+0x124>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00b      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a3f      	ldr	r2, [pc, #252]	@ (80082f0 <TIM_Base_SetConfig+0x128>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d007      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <TIM_Base_SetConfig+0x12c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a3d      	ldr	r2, [pc, #244]	@ (80082f8 <TIM_Base_SetConfig+0x130>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d108      	bne.n	800821a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800820e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a32      	ldr	r2, [pc, #200]	@ (80082e8 <TIM_Base_SetConfig+0x120>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d02b      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008228:	d027      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a2f      	ldr	r2, [pc, #188]	@ (80082ec <TIM_Base_SetConfig+0x124>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d023      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a2e      	ldr	r2, [pc, #184]	@ (80082f0 <TIM_Base_SetConfig+0x128>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d01f      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2d      	ldr	r2, [pc, #180]	@ (80082f4 <TIM_Base_SetConfig+0x12c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01b      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a2c      	ldr	r2, [pc, #176]	@ (80082f8 <TIM_Base_SetConfig+0x130>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d017      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2b      	ldr	r2, [pc, #172]	@ (80082fc <TIM_Base_SetConfig+0x134>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2a      	ldr	r2, [pc, #168]	@ (8008300 <TIM_Base_SetConfig+0x138>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00f      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a29      	ldr	r2, [pc, #164]	@ (8008304 <TIM_Base_SetConfig+0x13c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00b      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a28      	ldr	r2, [pc, #160]	@ (8008308 <TIM_Base_SetConfig+0x140>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d007      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a27      	ldr	r2, [pc, #156]	@ (800830c <TIM_Base_SetConfig+0x144>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d003      	beq.n	800827a <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a26      	ldr	r2, [pc, #152]	@ (8008310 <TIM_Base_SetConfig+0x148>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d108      	bne.n	800828c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a0e      	ldr	r2, [pc, #56]	@ (80082e8 <TIM_Base_SetConfig+0x120>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0xf2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a10      	ldr	r2, [pc, #64]	@ (80082f8 <TIM_Base_SetConfig+0x130>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d103      	bne.n	80082c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f043 0204 	orr.w	r2, r3, #4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	601a      	str	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800
 80082f4:	40000c00 	.word	0x40000c00
 80082f8:	40010400 	.word	0x40010400
 80082fc:	40014000 	.word	0x40014000
 8008300:	40014400 	.word	0x40014400
 8008304:	40014800 	.word	0x40014800
 8008308:	40001800 	.word	0x40001800
 800830c:	40001c00 	.word	0x40001c00
 8008310:	40002000 	.word	0x40002000

08008314 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e042      	b.n	80083d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d106      	bne.n	8008368 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7fb f946 	bl	80035f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2224      	movs	r2, #36	@ 0x24
 800836c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800837e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fdd3 	bl	8008f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008394:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	695a      	ldr	r2, [r3, #20]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	@ 0x28
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	603b      	str	r3, [r7, #0]
 80083e8:	4613      	mov	r3, r2
 80083ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d175      	bne.n	80084e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Transmit+0x2c>
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e06e      	b.n	80084ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2221      	movs	r2, #33	@ 0x21
 8008416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800841a:	f7fb fb97 	bl	8003b4c <HAL_GetTick>
 800841e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	88fa      	ldrh	r2, [r7, #6]
 800842a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008434:	d108      	bne.n	8008448 <HAL_UART_Transmit+0x6c>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d104      	bne.n	8008448 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	e003      	b.n	8008450 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800844c:	2300      	movs	r3, #0
 800844e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008450:	e02e      	b.n	80084b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2200      	movs	r2, #0
 800845a:	2180      	movs	r1, #128	@ 0x80
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fb37 	bl	8008ad0 <UART_WaitOnFlagUntilTimeout>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d005      	beq.n	8008474 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e03a      	b.n	80084ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	3302      	adds	r3, #2
 800848e:	61bb      	str	r3, [r7, #24]
 8008490:	e007      	b.n	80084a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	781a      	ldrb	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	3301      	adds	r3, #1
 80084a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1cb      	bne.n	8008452 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2200      	movs	r2, #0
 80084c2:	2140      	movs	r1, #64	@ 0x40
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 fb03 	bl	8008ad0 <UART_WaitOnFlagUntilTimeout>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e006      	b.n	80084ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	e000      	b.n	80084ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80084e8:	2302      	movs	r3, #2
  }
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3720      	adds	r7, #32
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b20      	cmp	r3, #32
 800850a:	d112      	bne.n	8008532 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_UART_Receive_IT+0x26>
 8008512:	88fb      	ldrh	r3, [r7, #6]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e00b      	b.n	8008534 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	461a      	mov	r2, r3
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fb2a 	bl	8008b82 <UART_Start_Receive_IT>
 800852e:	4603      	mov	r3, r0
 8008530:	e000      	b.n	8008534 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008532:	2302      	movs	r3, #2
  }
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b0ba      	sub	sp, #232	@ 0xe8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008562:	2300      	movs	r3, #0
 8008564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008568:	2300      	movs	r3, #0
 800856a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800857a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10f      	bne.n	80085a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <HAL_UART_IRQHandler+0x66>
 800858e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fc07 	bl	8008dae <UART_Receive_IT>
      return;
 80085a0:	e273      	b.n	8008a8a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 80de 	beq.w	8008768 <HAL_UART_IRQHandler+0x22c>
 80085ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d106      	bne.n	80085c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 80d1 	beq.w	8008768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00b      	beq.n	80085ea <HAL_UART_IRQHandler+0xae>
 80085d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	f043 0201 	orr.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ee:	f003 0304 	and.w	r3, r3, #4
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00b      	beq.n	800860e <HAL_UART_IRQHandler+0xd2>
 80085f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008606:	f043 0202 	orr.w	r2, r3, #2
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800860e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00b      	beq.n	8008632 <HAL_UART_IRQHandler+0xf6>
 800861a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800862a:	f043 0204 	orr.w	r2, r3, #4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d011      	beq.n	8008662 <HAL_UART_IRQHandler+0x126>
 800863e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008642:	f003 0320 	and.w	r3, r3, #32
 8008646:	2b00      	cmp	r3, #0
 8008648:	d105      	bne.n	8008656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800864a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865a:	f043 0208 	orr.w	r2, r3, #8
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 820a 	beq.w	8008a80 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800866c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008670:	f003 0320 	and.w	r3, r3, #32
 8008674:	2b00      	cmp	r3, #0
 8008676:	d008      	beq.n	800868a <HAL_UART_IRQHandler+0x14e>
 8008678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867c:	f003 0320 	and.w	r3, r3, #32
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb92 	bl	8008dae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	bf0c      	ite	eq
 8008698:	2301      	moveq	r3, #1
 800869a:	2300      	movne	r3, #0
 800869c:	b2db      	uxtb	r3, r3
 800869e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <HAL_UART_IRQHandler+0x17a>
 80086ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d04f      	beq.n	8008756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa9d 	bl	8008bf6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c6:	2b40      	cmp	r3, #64	@ 0x40
 80086c8:	d141      	bne.n	800874e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3314      	adds	r3, #20
 80086d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3314      	adds	r3, #20
 80086f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800870e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1d9      	bne.n	80086ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d013      	beq.n	8008746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008722:	4a8a      	ldr	r2, [pc, #552]	@ (800894c <HAL_UART_IRQHandler+0x410>)
 8008724:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872a:	4618      	mov	r0, r3
 800872c:	f7fb fb90 	bl	8003e50 <HAL_DMA_Abort_IT>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d016      	beq.n	8008764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008740:	4610      	mov	r0, r2
 8008742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008744:	e00e      	b.n	8008764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9ac 	bl	8008aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874c:	e00a      	b.n	8008764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9a8 	bl	8008aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	e006      	b.n	8008764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f9a4 	bl	8008aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008762:	e18d      	b.n	8008a80 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008764:	bf00      	nop
    return;
 8008766:	e18b      	b.n	8008a80 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876c:	2b01      	cmp	r3, #1
 800876e:	f040 8167 	bne.w	8008a40 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 8160 	beq.w	8008a40 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 8159 	beq.w	8008a40 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60bb      	str	r3, [r7, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	60bb      	str	r3, [r7, #8]
 80087a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ae:	2b40      	cmp	r3, #64	@ 0x40
 80087b0:	f040 80ce 	bne.w	8008950 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80a9 	beq.w	800891c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087d2:	429a      	cmp	r2, r3
 80087d4:	f080 80a2 	bcs.w	800891c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087ea:	f000 8088 	beq.w	80088fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	330c      	adds	r3, #12
 80087f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008804:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800880c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800881a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800881e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008826:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1d9      	bne.n	80087ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3314      	adds	r3, #20
 8008840:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800884a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800884c:	f023 0301 	bic.w	r3, r3, #1
 8008850:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3314      	adds	r3, #20
 800885a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800885e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008862:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008866:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008870:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e1      	bne.n	800883a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800888c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3314      	adds	r3, #20
 8008896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800889a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800889c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e3      	bne.n	8008876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ce:	f023 0310 	bic.w	r3, r3, #16
 80088d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80088e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80088e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e3      	bne.n	80088bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fb fa39 	bl	8003d70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2202      	movs	r2, #2
 8008902:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800890c:	b29b      	uxth	r3, r3
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	b29b      	uxth	r3, r3
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f8cf 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800891a:	e0b3      	b.n	8008a84 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008920:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008924:	429a      	cmp	r2, r3
 8008926:	f040 80ad 	bne.w	8008a84 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	69db      	ldr	r3, [r3, #28]
 8008930:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008934:	f040 80a6 	bne.w	8008a84 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f8b7 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
      return;
 800894a:	e09b      	b.n	8008a84 <HAL_UART_IRQHandler+0x548>
 800894c:	08008cbd 	.word	0x08008cbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008958:	b29b      	uxth	r3, r3
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 808e 	beq.w	8008a88 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800896c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8089 	beq.w	8008a88 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	330c      	adds	r3, #12
 800897c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008988:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800898c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	330c      	adds	r3, #12
 8008996:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800899a:	647a      	str	r2, [r7, #68]	@ 0x44
 800899c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e3      	bne.n	8008976 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3314      	adds	r3, #20
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	623b      	str	r3, [r7, #32]
   return(result);
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3314      	adds	r3, #20
 80089ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80089d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e3      	bne.n	80089ae <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0310 	bic.w	r3, r3, #16
 8008a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a18:	61fa      	str	r2, [r7, #28]
 8008a1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	69b9      	ldr	r1, [r7, #24]
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	617b      	str	r3, [r7, #20]
   return(result);
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e3      	bne.n	80089f4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f83d 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a3e:	e023      	b.n	8008a88 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <HAL_UART_IRQHandler+0x524>
 8008a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f940 	bl	8008cde <UART_Transmit_IT>
    return;
 8008a5e:	e014      	b.n	8008a8a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00e      	beq.n	8008a8a <HAL_UART_IRQHandler+0x54e>
 8008a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d008      	beq.n	8008a8a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f980 	bl	8008d7e <UART_EndTransmit_IT>
    return;
 8008a7e:	e004      	b.n	8008a8a <HAL_UART_IRQHandler+0x54e>
    return;
 8008a80:	bf00      	nop
 8008a82:	e002      	b.n	8008a8a <HAL_UART_IRQHandler+0x54e>
      return;
 8008a84:	bf00      	nop
 8008a86:	e000      	b.n	8008a8a <HAL_UART_IRQHandler+0x54e>
      return;
 8008a88:	bf00      	nop
  }
}
 8008a8a:	37e8      	adds	r7, #232	@ 0xe8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	4613      	mov	r3, r2
 8008ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae0:	e03b      	b.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d037      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aea:	f7fb f82f 	bl	8003b4c <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	6a3a      	ldr	r2, [r7, #32]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d302      	bcc.n	8008b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e03a      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0304 	and.w	r3, r3, #4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d023      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b80      	cmp	r3, #128	@ 0x80
 8008b16:	d020      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2b40      	cmp	r3, #64	@ 0x40
 8008b1c:	d01d      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	d116      	bne.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f000 f857 	bl	8008bf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e00f      	b.n	8008b7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4013      	ands	r3, r2
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	bf0c      	ite	eq
 8008b6a:	2301      	moveq	r3, #1
 8008b6c:	2300      	movne	r3, #0
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	461a      	mov	r2, r3
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d0b4      	beq.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3718      	adds	r7, #24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b085      	sub	sp, #20
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	68ba      	ldr	r2, [r7, #8]
 8008b94:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	88fa      	ldrh	r2, [r7, #6]
 8008ba0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2222      	movs	r2, #34	@ 0x22
 8008bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695a      	ldr	r2, [r3, #20]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f042 0220 	orr.w	r2, r2, #32
 8008be6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b095      	sub	sp, #84	@ 0x54
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c26:	e841 2300 	strex	r3, r2, [r1]
 8008c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1e5      	bne.n	8008bfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3314      	adds	r3, #20
 8008c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6a3b      	ldr	r3, [r7, #32]
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	f023 0301 	bic.w	r3, r3, #1
 8008c48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3314      	adds	r3, #20
 8008c50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e5      	bne.n	8008c32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d119      	bne.n	8008ca2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	f023 0310 	bic.w	r3, r3, #16
 8008c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c8e:	61ba      	str	r2, [r7, #24]
 8008c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	6979      	ldr	r1, [r7, #20]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e5      	bne.n	8008c6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008cb0:	bf00      	nop
 8008cb2:	3754      	adds	r7, #84	@ 0x54
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff fee7 	bl	8008aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd6:	bf00      	nop
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b21      	cmp	r3, #33	@ 0x21
 8008cf0:	d13e      	bne.n	8008d70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cfa:	d114      	bne.n	8008d26 <UART_Transmit_IT+0x48>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d110      	bne.n	8008d26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a1b      	ldr	r3, [r3, #32]
 8008d08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	881b      	ldrh	r3, [r3, #0]
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	1c9a      	adds	r2, r3, #2
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	621a      	str	r2, [r3, #32]
 8008d24:	e008      	b.n	8008d38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	1c59      	adds	r1, r3, #1
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6211      	str	r1, [r2, #32]
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	4619      	mov	r1, r3
 8008d46:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10f      	bne.n	8008d6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68da      	ldr	r2, [r3, #12]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e000      	b.n	8008d72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d70:	2302      	movs	r3, #2
  }
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b082      	sub	sp, #8
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fe76 	bl	8008a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b08c      	sub	sp, #48	@ 0x30
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b22      	cmp	r3, #34	@ 0x22
 8008dc8:	f040 80aa 	bne.w	8008f20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dd4:	d115      	bne.n	8008e02 <UART_Receive_IT+0x54>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d111      	bne.n	8008e02 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfa:	1c9a      	adds	r2, r3, #2
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e00:	e024      	b.n	8008e4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e10:	d007      	beq.n	8008e22 <UART_Receive_IT+0x74>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <UART_Receive_IT+0x82>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e008      	b.n	8008e42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	687a      	ldr	r2, [r7, #4]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d15d      	bne.n	8008f1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0220 	bic.w	r2, r2, #32
 8008e6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68da      	ldr	r2, [r3, #12]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695a      	ldr	r2, [r3, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
 8008e8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d135      	bne.n	8008f12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	e853 3f00 	ldrex	r3, [r3]
 8008eba:	613b      	str	r3, [r7, #16]
   return(result);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f023 0310 	bic.w	r3, r3, #16
 8008ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ecc:	623a      	str	r2, [r7, #32]
 8008ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	69f9      	ldr	r1, [r7, #28]
 8008ed2:	6a3a      	ldr	r2, [r7, #32]
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e5      	bne.n	8008eac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d10a      	bne.n	8008f04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fdd4 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
 8008f10:	e002      	b.n	8008f18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fa f98a 	bl	800322c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	e002      	b.n	8008f22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e000      	b.n	8008f22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008f20:	2302      	movs	r3, #2
  }
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3730      	adds	r7, #48	@ 0x30
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f30:	b0c0      	sub	sp, #256	@ 0x100
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f48:	68d9      	ldr	r1, [r3, #12]
 8008f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	ea40 0301 	orr.w	r3, r0, r1
 8008f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f84:	f021 010c 	bic.w	r1, r1, #12
 8008f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f92:	430b      	orrs	r3, r1
 8008f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa6:	6999      	ldr	r1, [r3, #24]
 8008fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	ea40 0301 	orr.w	r3, r0, r1
 8008fb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	4b8f      	ldr	r3, [pc, #572]	@ (80091f8 <UART_SetConfig+0x2cc>)
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d005      	beq.n	8008fcc <UART_SetConfig+0xa0>
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80091fc <UART_SetConfig+0x2d0>)
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d104      	bne.n	8008fd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fcc:	f7fe fd0a 	bl	80079e4 <HAL_RCC_GetPCLK2Freq>
 8008fd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008fd4:	e003      	b.n	8008fde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fd6:	f7fe fcf1 	bl	80079bc <HAL_RCC_GetPCLK1Freq>
 8008fda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fe8:	f040 810c 	bne.w	8009204 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ff6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ffa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008ffe:	4622      	mov	r2, r4
 8009000:	462b      	mov	r3, r5
 8009002:	1891      	adds	r1, r2, r2
 8009004:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009006:	415b      	adcs	r3, r3
 8009008:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800900a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800900e:	4621      	mov	r1, r4
 8009010:	eb12 0801 	adds.w	r8, r2, r1
 8009014:	4629      	mov	r1, r5
 8009016:	eb43 0901 	adc.w	r9, r3, r1
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800902a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800902e:	4690      	mov	r8, r2
 8009030:	4699      	mov	r9, r3
 8009032:	4623      	mov	r3, r4
 8009034:	eb18 0303 	adds.w	r3, r8, r3
 8009038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800903c:	462b      	mov	r3, r5
 800903e:	eb49 0303 	adc.w	r3, r9, r3
 8009042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009052:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009056:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800905a:	460b      	mov	r3, r1
 800905c:	18db      	adds	r3, r3, r3
 800905e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009060:	4613      	mov	r3, r2
 8009062:	eb42 0303 	adc.w	r3, r2, r3
 8009066:	657b      	str	r3, [r7, #84]	@ 0x54
 8009068:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800906c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009070:	f7f7 fdba 	bl	8000be8 <__aeabi_uldivmod>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	4b61      	ldr	r3, [pc, #388]	@ (8009200 <UART_SetConfig+0x2d4>)
 800907a:	fba3 2302 	umull	r2, r3, r3, r2
 800907e:	095b      	lsrs	r3, r3, #5
 8009080:	011c      	lsls	r4, r3, #4
 8009082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009086:	2200      	movs	r2, #0
 8009088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800908c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009090:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	1891      	adds	r1, r2, r2
 800909a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800909c:	415b      	adcs	r3, r3
 800909e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80090a4:	4641      	mov	r1, r8
 80090a6:	eb12 0a01 	adds.w	sl, r2, r1
 80090aa:	4649      	mov	r1, r9
 80090ac:	eb43 0b01 	adc.w	fp, r3, r1
 80090b0:	f04f 0200 	mov.w	r2, #0
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090c4:	4692      	mov	sl, r2
 80090c6:	469b      	mov	fp, r3
 80090c8:	4643      	mov	r3, r8
 80090ca:	eb1a 0303 	adds.w	r3, sl, r3
 80090ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090d2:	464b      	mov	r3, r9
 80090d4:	eb4b 0303 	adc.w	r3, fp, r3
 80090d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090f0:	460b      	mov	r3, r1
 80090f2:	18db      	adds	r3, r3, r3
 80090f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80090f6:	4613      	mov	r3, r2
 80090f8:	eb42 0303 	adc.w	r3, r2, r3
 80090fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80090fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009102:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009106:	f7f7 fd6f 	bl	8000be8 <__aeabi_uldivmod>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4611      	mov	r1, r2
 8009110:	4b3b      	ldr	r3, [pc, #236]	@ (8009200 <UART_SetConfig+0x2d4>)
 8009112:	fba3 2301 	umull	r2, r3, r3, r1
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	2264      	movs	r2, #100	@ 0x64
 800911a:	fb02 f303 	mul.w	r3, r2, r3
 800911e:	1acb      	subs	r3, r1, r3
 8009120:	00db      	lsls	r3, r3, #3
 8009122:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009126:	4b36      	ldr	r3, [pc, #216]	@ (8009200 <UART_SetConfig+0x2d4>)
 8009128:	fba3 2302 	umull	r2, r3, r3, r2
 800912c:	095b      	lsrs	r3, r3, #5
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009134:	441c      	add	r4, r3
 8009136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800913a:	2200      	movs	r2, #0
 800913c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009140:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009144:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	1891      	adds	r1, r2, r2
 800914e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009150:	415b      	adcs	r3, r3
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009154:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009158:	4641      	mov	r1, r8
 800915a:	1851      	adds	r1, r2, r1
 800915c:	6339      	str	r1, [r7, #48]	@ 0x30
 800915e:	4649      	mov	r1, r9
 8009160:	414b      	adcs	r3, r1
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009170:	4659      	mov	r1, fp
 8009172:	00cb      	lsls	r3, r1, #3
 8009174:	4651      	mov	r1, sl
 8009176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800917a:	4651      	mov	r1, sl
 800917c:	00ca      	lsls	r2, r1, #3
 800917e:	4610      	mov	r0, r2
 8009180:	4619      	mov	r1, r3
 8009182:	4603      	mov	r3, r0
 8009184:	4642      	mov	r2, r8
 8009186:	189b      	adds	r3, r3, r2
 8009188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800918c:	464b      	mov	r3, r9
 800918e:	460a      	mov	r2, r1
 8009190:	eb42 0303 	adc.w	r3, r2, r3
 8009194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80091a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091ac:	460b      	mov	r3, r1
 80091ae:	18db      	adds	r3, r3, r3
 80091b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091b2:	4613      	mov	r3, r2
 80091b4:	eb42 0303 	adc.w	r3, r2, r3
 80091b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091c2:	f7f7 fd11 	bl	8000be8 <__aeabi_uldivmod>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009200 <UART_SetConfig+0x2d4>)
 80091cc:	fba3 1302 	umull	r1, r3, r3, r2
 80091d0:	095b      	lsrs	r3, r3, #5
 80091d2:	2164      	movs	r1, #100	@ 0x64
 80091d4:	fb01 f303 	mul.w	r3, r1, r3
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	3332      	adds	r3, #50	@ 0x32
 80091de:	4a08      	ldr	r2, [pc, #32]	@ (8009200 <UART_SetConfig+0x2d4>)
 80091e0:	fba2 2303 	umull	r2, r3, r2, r3
 80091e4:	095b      	lsrs	r3, r3, #5
 80091e6:	f003 0207 	and.w	r2, r3, #7
 80091ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4422      	add	r2, r4
 80091f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091f4:	e106      	b.n	8009404 <UART_SetConfig+0x4d8>
 80091f6:	bf00      	nop
 80091f8:	40011000 	.word	0x40011000
 80091fc:	40011400 	.word	0x40011400
 8009200:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009208:	2200      	movs	r2, #0
 800920a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800920e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009212:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009216:	4642      	mov	r2, r8
 8009218:	464b      	mov	r3, r9
 800921a:	1891      	adds	r1, r2, r2
 800921c:	6239      	str	r1, [r7, #32]
 800921e:	415b      	adcs	r3, r3
 8009220:	627b      	str	r3, [r7, #36]	@ 0x24
 8009222:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009226:	4641      	mov	r1, r8
 8009228:	1854      	adds	r4, r2, r1
 800922a:	4649      	mov	r1, r9
 800922c:	eb43 0501 	adc.w	r5, r3, r1
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	00eb      	lsls	r3, r5, #3
 800923a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800923e:	00e2      	lsls	r2, r4, #3
 8009240:	4614      	mov	r4, r2
 8009242:	461d      	mov	r5, r3
 8009244:	4643      	mov	r3, r8
 8009246:	18e3      	adds	r3, r4, r3
 8009248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800924c:	464b      	mov	r3, r9
 800924e:	eb45 0303 	adc.w	r3, r5, r3
 8009252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009262:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009266:	f04f 0200 	mov.w	r2, #0
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009272:	4629      	mov	r1, r5
 8009274:	008b      	lsls	r3, r1, #2
 8009276:	4621      	mov	r1, r4
 8009278:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800927c:	4621      	mov	r1, r4
 800927e:	008a      	lsls	r2, r1, #2
 8009280:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009284:	f7f7 fcb0 	bl	8000be8 <__aeabi_uldivmod>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4b60      	ldr	r3, [pc, #384]	@ (8009410 <UART_SetConfig+0x4e4>)
 800928e:	fba3 2302 	umull	r2, r3, r3, r2
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	011c      	lsls	r4, r3, #4
 8009296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800929a:	2200      	movs	r2, #0
 800929c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80092a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80092a8:	4642      	mov	r2, r8
 80092aa:	464b      	mov	r3, r9
 80092ac:	1891      	adds	r1, r2, r2
 80092ae:	61b9      	str	r1, [r7, #24]
 80092b0:	415b      	adcs	r3, r3
 80092b2:	61fb      	str	r3, [r7, #28]
 80092b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092b8:	4641      	mov	r1, r8
 80092ba:	1851      	adds	r1, r2, r1
 80092bc:	6139      	str	r1, [r7, #16]
 80092be:	4649      	mov	r1, r9
 80092c0:	414b      	adcs	r3, r1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	f04f 0200 	mov.w	r2, #0
 80092c8:	f04f 0300 	mov.w	r3, #0
 80092cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092d0:	4659      	mov	r1, fp
 80092d2:	00cb      	lsls	r3, r1, #3
 80092d4:	4651      	mov	r1, sl
 80092d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092da:	4651      	mov	r1, sl
 80092dc:	00ca      	lsls	r2, r1, #3
 80092de:	4610      	mov	r0, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	4603      	mov	r3, r0
 80092e4:	4642      	mov	r2, r8
 80092e6:	189b      	adds	r3, r3, r2
 80092e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092ec:	464b      	mov	r3, r9
 80092ee:	460a      	mov	r2, r1
 80092f0:	eb42 0303 	adc.w	r3, r2, r3
 80092f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009302:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	f04f 0300 	mov.w	r3, #0
 800930c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009310:	4649      	mov	r1, r9
 8009312:	008b      	lsls	r3, r1, #2
 8009314:	4641      	mov	r1, r8
 8009316:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800931a:	4641      	mov	r1, r8
 800931c:	008a      	lsls	r2, r1, #2
 800931e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009322:	f7f7 fc61 	bl	8000be8 <__aeabi_uldivmod>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4611      	mov	r1, r2
 800932c:	4b38      	ldr	r3, [pc, #224]	@ (8009410 <UART_SetConfig+0x4e4>)
 800932e:	fba3 2301 	umull	r2, r3, r3, r1
 8009332:	095b      	lsrs	r3, r3, #5
 8009334:	2264      	movs	r2, #100	@ 0x64
 8009336:	fb02 f303 	mul.w	r3, r2, r3
 800933a:	1acb      	subs	r3, r1, r3
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	3332      	adds	r3, #50	@ 0x32
 8009340:	4a33      	ldr	r2, [pc, #204]	@ (8009410 <UART_SetConfig+0x4e4>)
 8009342:	fba2 2303 	umull	r2, r3, r2, r3
 8009346:	095b      	lsrs	r3, r3, #5
 8009348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800934c:	441c      	add	r4, r3
 800934e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009352:	2200      	movs	r2, #0
 8009354:	673b      	str	r3, [r7, #112]	@ 0x70
 8009356:	677a      	str	r2, [r7, #116]	@ 0x74
 8009358:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	1891      	adds	r1, r2, r2
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	415b      	adcs	r3, r3
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800936c:	4641      	mov	r1, r8
 800936e:	1851      	adds	r1, r2, r1
 8009370:	6039      	str	r1, [r7, #0]
 8009372:	4649      	mov	r1, r9
 8009374:	414b      	adcs	r3, r1
 8009376:	607b      	str	r3, [r7, #4]
 8009378:	f04f 0200 	mov.w	r2, #0
 800937c:	f04f 0300 	mov.w	r3, #0
 8009380:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009384:	4659      	mov	r1, fp
 8009386:	00cb      	lsls	r3, r1, #3
 8009388:	4651      	mov	r1, sl
 800938a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800938e:	4651      	mov	r1, sl
 8009390:	00ca      	lsls	r2, r1, #3
 8009392:	4610      	mov	r0, r2
 8009394:	4619      	mov	r1, r3
 8009396:	4603      	mov	r3, r0
 8009398:	4642      	mov	r2, r8
 800939a:	189b      	adds	r3, r3, r2
 800939c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800939e:	464b      	mov	r3, r9
 80093a0:	460a      	mov	r2, r1
 80093a2:	eb42 0303 	adc.w	r3, r2, r3
 80093a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80093b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093c0:	4649      	mov	r1, r9
 80093c2:	008b      	lsls	r3, r1, #2
 80093c4:	4641      	mov	r1, r8
 80093c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093ca:	4641      	mov	r1, r8
 80093cc:	008a      	lsls	r2, r1, #2
 80093ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093d2:	f7f7 fc09 	bl	8000be8 <__aeabi_uldivmod>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4b0d      	ldr	r3, [pc, #52]	@ (8009410 <UART_SetConfig+0x4e4>)
 80093dc:	fba3 1302 	umull	r1, r3, r3, r2
 80093e0:	095b      	lsrs	r3, r3, #5
 80093e2:	2164      	movs	r1, #100	@ 0x64
 80093e4:	fb01 f303 	mul.w	r3, r1, r3
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	3332      	adds	r3, #50	@ 0x32
 80093ee:	4a08      	ldr	r2, [pc, #32]	@ (8009410 <UART_SetConfig+0x4e4>)
 80093f0:	fba2 2303 	umull	r2, r3, r2, r3
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	f003 020f 	and.w	r2, r3, #15
 80093fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4422      	add	r2, r4
 8009402:	609a      	str	r2, [r3, #8]
}
 8009404:	bf00      	nop
 8009406:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800940a:	46bd      	mov	sp, r7
 800940c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009410:	51eb851f 	.word	0x51eb851f

08009414 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009414:	b084      	sub	sp, #16
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	f107 001c 	add.w	r0, r7, #28
 8009422:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009426:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800942a:	2b01      	cmp	r3, #1
 800942c:	d123      	bne.n	8009476 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009432:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009456:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800945a:	2b01      	cmp	r3, #1
 800945c:	d105      	bne.n	800946a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68db      	ldr	r3, [r3, #12]
 8009462:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f9dc 	bl	8009828 <USB_CoreReset>
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e01b      	b.n	80094ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9d0 	bl	8009828 <USB_CoreReset>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800948c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009490:	2b00      	cmp	r3, #0
 8009492:	d106      	bne.n	80094a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009498:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	639a      	str	r2, [r3, #56]	@ 0x38
 80094a0:	e005      	b.n	80094ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094ae:	7fbb      	ldrb	r3, [r7, #30]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d10b      	bne.n	80094cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f043 0206 	orr.w	r2, r3, #6
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f043 0220 	orr.w	r2, r3, #32
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094d8:	b004      	add	sp, #16
 80094da:	4770      	bx	lr

080094dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f043 0201 	orr.w	r2, r3, #1
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f023 0201 	bic.w	r2, r3, #1
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d115      	bne.n	800956e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800954e:	200a      	movs	r0, #10
 8009550:	f7fa fb08 	bl	8003b64 <HAL_Delay>
      ms += 10U;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	330a      	adds	r3, #10
 8009558:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f956 	bl	800980c <USB_GetMode>
 8009560:	4603      	mov	r3, r0
 8009562:	2b01      	cmp	r3, #1
 8009564:	d01e      	beq.n	80095a4 <USB_SetCurrentMode+0x84>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2bc7      	cmp	r3, #199	@ 0xc7
 800956a:	d9f0      	bls.n	800954e <USB_SetCurrentMode+0x2e>
 800956c:	e01a      	b.n	80095a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d115      	bne.n	80095a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009580:	200a      	movs	r0, #10
 8009582:	f7fa faef 	bl	8003b64 <HAL_Delay>
      ms += 10U;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	330a      	adds	r3, #10
 800958a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f93d 	bl	800980c <USB_GetMode>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d005      	beq.n	80095a4 <USB_SetCurrentMode+0x84>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2bc7      	cmp	r3, #199	@ 0xc7
 800959c:	d9f0      	bls.n	8009580 <USB_SetCurrentMode+0x60>
 800959e:	e001      	b.n	80095a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e005      	b.n	80095b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2bc8      	cmp	r3, #200	@ 0xc8
 80095a8:	d101      	bne.n	80095ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e000      	b.n	80095b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095d2:	d901      	bls.n	80095d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e01b      	b.n	8009610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	daf2      	bge.n	80095c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	019b      	lsls	r3, r3, #6
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095fc:	d901      	bls.n	8009602 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e006      	b.n	8009610 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b20      	cmp	r3, #32
 800960c:	d0f0      	beq.n	80095f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009634:	d901      	bls.n	800963a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	e018      	b.n	800966c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	daf2      	bge.n	8009628 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2210      	movs	r2, #16
 800964a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3301      	adds	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009658:	d901      	bls.n	800965e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e006      	b.n	800966c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0310 	and.w	r3, r3, #16
 8009666:	2b10      	cmp	r3, #16
 8009668:	d0f0      	beq.n	800964c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009678:	b480      	push	{r7}
 800967a:	b089      	sub	sp, #36	@ 0x24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4611      	mov	r1, r2
 8009684:	461a      	mov	r2, r3
 8009686:	460b      	mov	r3, r1
 8009688:	71fb      	strb	r3, [r7, #7]
 800968a:	4613      	mov	r3, r2
 800968c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d123      	bne.n	80096e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800969e:	88bb      	ldrh	r3, [r7, #4]
 80096a0:	3303      	adds	r3, #3
 80096a2:	089b      	lsrs	r3, r3, #2
 80096a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096a6:	2300      	movs	r3, #0
 80096a8:	61bb      	str	r3, [r7, #24]
 80096aa:	e018      	b.n	80096de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	031a      	lsls	r2, r3, #12
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096b8:	461a      	mov	r2, r3
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	3301      	adds	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	3301      	adds	r3, #1
 80096ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	3301      	adds	r3, #1
 80096d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	3301      	adds	r3, #1
 80096d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	3301      	adds	r3, #1
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d3e2      	bcc.n	80096ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3724      	adds	r7, #36	@ 0x24
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b08b      	sub	sp, #44	@ 0x2c
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	089b      	lsrs	r3, r3, #2
 800970e:	b29b      	uxth	r3, r3
 8009710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800971a:	2300      	movs	r3, #0
 800971c:	623b      	str	r3, [r7, #32]
 800971e:	e014      	b.n	800974a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	601a      	str	r2, [r3, #0]
    pDest++;
 800972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972e:	3301      	adds	r3, #1
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009734:	3301      	adds	r3, #1
 8009736:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973a:	3301      	adds	r3, #1
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	3301      	adds	r3, #1
 8009742:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	3301      	adds	r3, #1
 8009748:	623b      	str	r3, [r7, #32]
 800974a:	6a3a      	ldr	r2, [r7, #32]
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	429a      	cmp	r2, r3
 8009750:	d3e6      	bcc.n	8009720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009752:	8bfb      	ldrh	r3, [r7, #30]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d01e      	beq.n	8009796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009762:	461a      	mov	r2, r3
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	00db      	lsls	r3, r3, #3
 8009774:	fa22 f303 	lsr.w	r3, r2, r3
 8009778:	b2da      	uxtb	r2, r3
 800977a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977c:	701a      	strb	r2, [r3, #0]
      i++;
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	3301      	adds	r3, #1
 8009782:	623b      	str	r3, [r7, #32]
      pDest++;
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	3301      	adds	r3, #1
 8009788:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800978a:	8bfb      	ldrh	r3, [r7, #30]
 800978c:	3b01      	subs	r3, #1
 800978e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009790:	8bfb      	ldrh	r3, [r7, #30]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1ea      	bne.n	800976c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009798:	4618      	mov	r0, r3
 800979a:	372c      	adds	r7, #44	@ 0x2c
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	4013      	ands	r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097bc:	68fb      	ldr	r3, [r7, #12]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3714      	adds	r7, #20
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b085      	sub	sp, #20
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80097da:	78fb      	ldrb	r3, [r7, #3]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	4013      	ands	r3, r2
 80097fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097fe:	68bb      	ldr	r3, [r7, #8]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	f003 0301 	and.w	r3, r3, #1
}
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009840:	d901      	bls.n	8009846 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e022      	b.n	800988c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	daf2      	bge.n	8009834 <USB_CoreReset+0xc>

  count = 10U;
 800984e:	230a      	movs	r3, #10
 8009850:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009852:	e002      	b.n	800985a <USB_CoreReset+0x32>
  {
    count--;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3b01      	subs	r3, #1
 8009858:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1f9      	bne.n	8009854 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f043 0201 	orr.w	r2, r3, #1
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3301      	adds	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009878:	d901      	bls.n	800987e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e006      	b.n	800988c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b01      	cmp	r3, #1
 8009888:	d0f0      	beq.n	800986c <USB_CoreReset+0x44>

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009898:	b084      	sub	sp, #16
 800989a:	b580      	push	{r7, lr}
 800989c:	b086      	sub	sp, #24
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80098a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098b8:	461a      	mov	r2, r3
 80098ba:	2300      	movs	r3, #0
 80098bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d119      	bne.n	8009922 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80098ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d10a      	bne.n	800990c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009904:	f043 0304 	orr.w	r3, r3, #4
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	e014      	b.n	8009936 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800991a:	f023 0304 	bic.w	r3, r3, #4
 800991e:	6013      	str	r3, [r2, #0]
 8009920:	e009      	b.n	8009936 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009930:	f023 0304 	bic.w	r3, r3, #4
 8009934:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009936:	2110      	movs	r1, #16
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fe3d 	bl	80095b8 <USB_FlushTxFifo>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fe67 	bl	800961c <USB_FlushRxFifo>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009958:	2300      	movs	r3, #0
 800995a:	613b      	str	r3, [r7, #16]
 800995c:	e015      	b.n	800998a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800996a:	461a      	mov	r2, r3
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4413      	add	r3, r2
 800997a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997e:	461a      	mov	r2, r3
 8009980:	2300      	movs	r3, #0
 8009982:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	3301      	adds	r3, #1
 8009988:	613b      	str	r3, [r7, #16]
 800998a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800998e:	461a      	mov	r2, r3
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4293      	cmp	r3, r2
 8009994:	d3e3      	bcc.n	800995e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a18      	ldr	r2, [pc, #96]	@ (8009a08 <USB_HostInit+0x170>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d10b      	bne.n	80099c4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099b2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a15      	ldr	r2, [pc, #84]	@ (8009a0c <USB_HostInit+0x174>)
 80099b8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a14      	ldr	r2, [pc, #80]	@ (8009a10 <USB_HostInit+0x178>)
 80099be:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80099c2:	e009      	b.n	80099d8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2280      	movs	r2, #128	@ 0x80
 80099c8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a11      	ldr	r2, [pc, #68]	@ (8009a14 <USB_HostInit+0x17c>)
 80099ce:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a11      	ldr	r2, [pc, #68]	@ (8009a18 <USB_HostInit+0x180>)
 80099d4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d105      	bne.n	80099ec <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	f043 0210 	orr.w	r2, r3, #16
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	699a      	ldr	r2, [r3, #24]
 80099f0:	4b0a      	ldr	r3, [pc, #40]	@ (8009a1c <USB_HostInit+0x184>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a04:	b004      	add	sp, #16
 8009a06:	4770      	bx	lr
 8009a08:	40040000 	.word	0x40040000
 8009a0c:	01000200 	.word	0x01000200
 8009a10:	00e00300 	.word	0x00e00300
 8009a14:	00600080 	.word	0x00600080
 8009a18:	004000e0 	.word	0x004000e0
 8009a1c:	a3200008 	.word	0xa3200008

08009a20 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a3e:	f023 0303 	bic.w	r3, r3, #3
 8009a42:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	78fb      	ldrb	r3, [r7, #3]
 8009a4e:	f003 0303 	and.w	r3, r3, #3
 8009a52:	68f9      	ldr	r1, [r7, #12]
 8009a54:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d107      	bne.n	8009a72 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a68:	461a      	mov	r2, r3
 8009a6a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009a6e:	6053      	str	r3, [r2, #4]
 8009a70:	e00c      	b.n	8009a8c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d107      	bne.n	8009a88 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009a84:	6053      	str	r3, [r2, #4]
 8009a86:	e001      	b.n	8009a8c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e000      	b.n	8009a8e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009aba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ac8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009aca:	2064      	movs	r0, #100	@ 0x64
 8009acc:	f7fa f84a 	bl	8003b64 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009adc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ade:	200a      	movs	r0, #10
 8009ae0:	f7fa f840 	bl	8003b64 <HAL_Delay>

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b085      	sub	sp, #20
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	460b      	mov	r3, r1
 8009af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009b12:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <USB_DriveVbus+0x44>
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d106      	bne.n	8009b32 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b30:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b3c:	d109      	bne.n	8009b52 <USB_DriveVbus+0x64>
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d106      	bne.n	8009b52 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009b4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b50:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	0c5b      	lsrs	r3, r3, #17
 8009b7e:	f003 0303 	and.w	r3, r3, #3
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b085      	sub	sp, #20
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	b29b      	uxth	r3, r3
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4611      	mov	r1, r2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	70fb      	strb	r3, [r7, #3]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	70bb      	strb	r3, [r7, #2]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bde:	461a      	mov	r2, r3
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009be6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d87c      	bhi.n	8009ce8 <USB_HC_Init+0x138>
 8009bee:	a201      	add	r2, pc, #4	@ (adr r2, 8009bf4 <USB_HC_Init+0x44>)
 8009bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf4:	08009c05 	.word	0x08009c05
 8009bf8:	08009cab 	.word	0x08009cab
 8009bfc:	08009c05 	.word	0x08009c05
 8009c00:	08009c6d 	.word	0x08009c6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c04:	78fb      	ldrb	r3, [r7, #3]
 8009c06:	015a      	lsls	r2, r3, #5
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	4413      	add	r3, r2
 8009c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c10:	461a      	mov	r2, r3
 8009c12:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009c16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009c18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	da10      	bge.n	8009c42 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	0151      	lsls	r1, r2, #5
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	440a      	add	r2, r1
 8009c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c3e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009c40:	e055      	b.n	8009cee <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	4a6f      	ldr	r2, [pc, #444]	@ (8009e04 <USB_HC_Init+0x254>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d151      	bne.n	8009cee <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	0151      	lsls	r1, r2, #5
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	440a      	add	r2, r1
 8009c60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009c68:	60d3      	str	r3, [r2, #12]
      break;
 8009c6a:	e040      	b.n	8009cee <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c6c:	78fb      	ldrb	r3, [r7, #3]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009c7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009c80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da34      	bge.n	8009cf2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	78fa      	ldrb	r2, [r7, #3]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ca6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009ca8:	e023      	b.n	8009cf2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009caa:	78fb      	ldrb	r3, [r7, #3]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f240 2325 	movw	r3, #549	@ 0x225
 8009cbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009cbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da17      	bge.n	8009cf6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009cc6:	78fb      	ldrb	r3, [r7, #3]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	78fa      	ldrb	r2, [r7, #3]
 8009cd6:	0151      	lsls	r1, r2, #5
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	440a      	add	r2, r1
 8009cdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ce0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009ce4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009ce6:	e006      	b.n	8009cf6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	77fb      	strb	r3, [r7, #31]
      break;
 8009cec:	e004      	b.n	8009cf8 <USB_HC_Init+0x148>
      break;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <USB_HC_Init+0x148>
      break;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <USB_HC_Init+0x148>
      break;
 8009cf6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d04:	461a      	mov	r2, r3
 8009d06:	2300      	movs	r3, #0
 8009d08:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	015a      	lsls	r2, r3, #5
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	78fa      	ldrb	r2, [r7, #3]
 8009d1a:	0151      	lsls	r1, r2, #5
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	440a      	add	r2, r1
 8009d20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d30:	699a      	ldr	r2, [r3, #24]
 8009d32:	78fb      	ldrb	r3, [r7, #3]
 8009d34:	f003 030f 	and.w	r3, r3, #15
 8009d38:	2101      	movs	r1, #1
 8009d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d3e:	6939      	ldr	r1, [r7, #16]
 8009d40:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009d44:	4313      	orrs	r3, r2
 8009d46:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	da03      	bge.n	8009d64 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	e001      	b.n	8009d68 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff fef9 	bl	8009b60 <USB_GetHostSpeed>
 8009d6e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009d70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d106      	bne.n	8009d86 <USB_HC_Init+0x1d6>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d003      	beq.n	8009d86 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009d7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e001      	b.n	8009d8a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009d8a:	787b      	ldrb	r3, [r7, #1]
 8009d8c:	059b      	lsls	r3, r3, #22
 8009d8e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009d92:	78bb      	ldrb	r3, [r7, #2]
 8009d94:	02db      	lsls	r3, r3, #11
 8009d96:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009d9a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009d9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009da0:	049b      	lsls	r3, r3, #18
 8009da2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009da6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009da8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009dae:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009db8:	78fa      	ldrb	r2, [r7, #3]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009dc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009dc8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009dca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d003      	beq.n	8009dda <USB_HC_Init+0x22a>
 8009dd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d10f      	bne.n	8009dfa <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009dda:	78fb      	ldrb	r3, [r7, #3]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	78fa      	ldrb	r2, [r7, #3]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009df8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3720      	adds	r7, #32
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	40040000 	.word	0x40040000

08009e08 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08c      	sub	sp, #48	@ 0x30
 8009e0c:	af02      	add	r7, sp, #8
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	785b      	ldrb	r3, [r3, #1]
 8009e1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e24:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	4a5d      	ldr	r2, [pc, #372]	@ (8009fa0 <USB_HC_StartXfer+0x198>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d12f      	bne.n	8009e8e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009e2e:	79fb      	ldrb	r3, [r7, #7]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d11c      	bne.n	8009e6e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	7c9b      	ldrb	r3, [r3, #18]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <USB_HC_StartXfer+0x3c>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	7c9b      	ldrb	r3, [r3, #18]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d124      	bne.n	8009e8e <USB_HC_StartXfer+0x86>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	799b      	ldrb	r3, [r3, #6]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d120      	bne.n	8009e8e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	69fa      	ldr	r2, [r7, #28]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	6a3a      	ldr	r2, [r7, #32]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e6a:	60d3      	str	r3, [r2, #12]
 8009e6c:	e00f      	b.n	8009e8e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	791b      	ldrb	r3, [r3, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <USB_HC_StartXfer+0x86>
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	795b      	ldrb	r3, [r3, #5]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d107      	bne.n	8009e8e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	785b      	ldrb	r3, [r3, #1]
 8009e82:	4619      	mov	r1, r3
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fb6b 	bl	800a560 <USB_DoPing>
        return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	e232      	b.n	800a2f4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	799b      	ldrb	r3, [r3, #6]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d158      	bne.n	8009f48 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009e96:	2301      	movs	r3, #1
 8009e98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	78db      	ldrb	r3, [r3, #3]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d007      	beq.n	8009eb2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009ea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	8a92      	ldrh	r2, [r2, #20]
 8009ea8:	fb03 f202 	mul.w	r2, r3, r2
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	61da      	str	r2, [r3, #28]
 8009eb0:	e07c      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	7c9b      	ldrb	r3, [r3, #18]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d130      	bne.n	8009f1c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	2bbc      	cmp	r3, #188	@ 0xbc
 8009ec0:	d918      	bls.n	8009ef4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	8a9b      	ldrh	r3, [r3, #20]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	69da      	ldr	r2, [r3, #28]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d003      	beq.n	8009ee4 <USB_HC_StartXfer+0xdc>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d103      	bne.n	8009eec <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	60da      	str	r2, [r3, #12]
 8009eea:	e05f      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	e05b      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	6a1a      	ldr	r2, [r3, #32]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d007      	beq.n	8009f14 <USB_HC_StartXfer+0x10c>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d003      	beq.n	8009f14 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2204      	movs	r2, #4
 8009f10:	60da      	str	r2, [r3, #12]
 8009f12:	e04b      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2203      	movs	r2, #3
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	e047      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d10d      	bne.n	8009f3e <USB_HC_StartXfer+0x136>
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	8a92      	ldrh	r2, [r2, #20]
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d907      	bls.n	8009f3e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	8a92      	ldrh	r2, [r2, #20]
 8009f34:	fb03 f202 	mul.w	r2, r3, r2
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	61da      	str	r2, [r3, #28]
 8009f3c:	e036      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6a1a      	ldr	r2, [r3, #32]
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	61da      	str	r2, [r3, #28]
 8009f46:	e031      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d018      	beq.n	8009f82 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	8a92      	ldrh	r2, [r2, #20]
 8009f58:	4413      	add	r3, r2
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	8a92      	ldrh	r2, [r2, #20]
 8009f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f64:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009f66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009f68:	8b7b      	ldrh	r3, [r7, #26]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d90b      	bls.n	8009f86 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009f6e:	8b7b      	ldrh	r3, [r7, #26]
 8009f70:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	8a92      	ldrh	r2, [r2, #20]
 8009f78:	fb03 f202 	mul.w	r2, r3, r2
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	61da      	str	r2, [r3, #28]
 8009f80:	e001      	b.n	8009f86 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009f82:	2301      	movs	r3, #1
 8009f84:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	78db      	ldrb	r3, [r3, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00a      	beq.n	8009fa4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	8a92      	ldrh	r2, [r2, #20]
 8009f94:	fb03 f202 	mul.w	r2, r3, r2
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	61da      	str	r2, [r3, #28]
 8009f9c:	e006      	b.n	8009fac <USB_HC_StartXfer+0x1a4>
 8009f9e:	bf00      	nop
 8009fa0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	6a1a      	ldr	r2, [r3, #32]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	69db      	ldr	r3, [r3, #28]
 8009fb0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009fb6:	04d9      	lsls	r1, r3, #19
 8009fb8:	4ba3      	ldr	r3, [pc, #652]	@ (800a248 <USB_HC_StartXfer+0x440>)
 8009fba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fbc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	7d9b      	ldrb	r3, [r3, #22]
 8009fc2:	075b      	lsls	r3, r3, #29
 8009fc4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fc8:	69f9      	ldr	r1, [r7, #28]
 8009fca:	0148      	lsls	r0, r1, #5
 8009fcc:	6a39      	ldr	r1, [r7, #32]
 8009fce:	4401      	add	r1, r0
 8009fd0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fd4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fd6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d009      	beq.n	8009ff2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	6999      	ldr	r1, [r3, #24]
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fee:	460a      	mov	r2, r1
 8009ff0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bf0c      	ite	eq
 800a002:	2301      	moveq	r3, #1
 800a004:	2300      	movne	r3, #0
 800a006:	b2db      	uxtb	r3, r3
 800a008:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	4413      	add	r3, r2
 800a012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	0151      	lsls	r1, r2, #5
 800a01c:	6a3a      	ldr	r2, [r7, #32]
 800a01e:	440a      	add	r2, r1
 800a020:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a024:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a028:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	015a      	lsls	r2, r3, #5
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	4413      	add	r3, r2
 800a032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	7e7b      	ldrb	r3, [r7, #25]
 800a03a:	075b      	lsls	r3, r3, #29
 800a03c:	69f9      	ldr	r1, [r7, #28]
 800a03e:	0148      	lsls	r0, r1, #5
 800a040:	6a39      	ldr	r1, [r7, #32]
 800a042:	4401      	add	r1, r0
 800a044:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a048:	4313      	orrs	r3, r2
 800a04a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	799b      	ldrb	r3, [r3, #6]
 800a050:	2b01      	cmp	r3, #1
 800a052:	f040 80c3 	bne.w	800a1dc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	7c5b      	ldrb	r3, [r3, #17]
 800a05a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a060:	4313      	orrs	r3, r2
 800a062:	69fa      	ldr	r2, [r7, #28]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	6a3a      	ldr	r2, [r7, #32]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a06e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a072:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	015a      	lsls	r2, r3, #5
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	4413      	add	r3, r2
 800a07c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	0151      	lsls	r1, r2, #5
 800a086:	6a3a      	ldr	r2, [r7, #32]
 800a088:	440a      	add	r2, r1
 800a08a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a08e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a092:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	79db      	ldrb	r3, [r3, #7]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d123      	bne.n	800a0e4 <USB_HC_StartXfer+0x2dc>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	78db      	ldrb	r3, [r3, #3]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d11f      	bne.n	800a0e4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	0151      	lsls	r1, r2, #5
 800a0b6:	6a3a      	ldr	r2, [r7, #32]
 800a0b8:	440a      	add	r2, r1
 800a0ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0c2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	69fa      	ldr	r2, [r7, #28]
 800a0d4:	0151      	lsls	r1, r2, #5
 800a0d6:	6a3a      	ldr	r2, [r7, #32]
 800a0d8:	440a      	add	r2, r1
 800a0da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0e2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	7c9b      	ldrb	r3, [r3, #18]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d003      	beq.n	800a0f4 <USB_HC_StartXfer+0x2ec>
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	7c9b      	ldrb	r3, [r3, #18]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d117      	bne.n	800a124 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d113      	bne.n	800a124 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	78db      	ldrb	r3, [r3, #3]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d10f      	bne.n	800a124 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	015a      	lsls	r2, r3, #5
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	4413      	add	r3, r2
 800a10c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	0151      	lsls	r1, r2, #5
 800a116:	6a3a      	ldr	r2, [r7, #32]
 800a118:	440a      	add	r2, r1
 800a11a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a11e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a122:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	7c9b      	ldrb	r3, [r3, #18]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d162      	bne.n	800a1f2 <USB_HC_StartXfer+0x3ea>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	78db      	ldrb	r3, [r3, #3]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d15e      	bne.n	800a1f2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	3b01      	subs	r3, #1
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d858      	bhi.n	800a1f0 <USB_HC_StartXfer+0x3e8>
 800a13e:	a201      	add	r2, pc, #4	@ (adr r2, 800a144 <USB_HC_StartXfer+0x33c>)
 800a140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a144:	0800a155 	.word	0x0800a155
 800a148:	0800a177 	.word	0x0800a177
 800a14c:	0800a199 	.word	0x0800a199
 800a150:	0800a1bb 	.word	0x0800a1bb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	015a      	lsls	r2, r3, #5
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	4413      	add	r3, r2
 800a15c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	69fa      	ldr	r2, [r7, #28]
 800a164:	0151      	lsls	r1, r2, #5
 800a166:	6a3a      	ldr	r2, [r7, #32]
 800a168:	440a      	add	r2, r1
 800a16a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a172:	6053      	str	r3, [r2, #4]
          break;
 800a174:	e03d      	b.n	800a1f2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	6a3b      	ldr	r3, [r7, #32]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	6a3a      	ldr	r2, [r7, #32]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a190:	f043 030e 	orr.w	r3, r3, #14
 800a194:	6053      	str	r3, [r2, #4]
          break;
 800a196:	e02c      	b.n	800a1f2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	6a3b      	ldr	r3, [r7, #32]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	6a3a      	ldr	r2, [r7, #32]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1b6:	6053      	str	r3, [r2, #4]
          break;
 800a1b8:	e01b      	b.n	800a1f2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	6a3b      	ldr	r3, [r7, #32]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	69fa      	ldr	r2, [r7, #28]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	6a3a      	ldr	r2, [r7, #32]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1d8:	6053      	str	r3, [r2, #4]
          break;
 800a1da:	e00a      	b.n	800a1f2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	6053      	str	r3, [r2, #4]
 800a1ee:	e000      	b.n	800a1f2 <USB_HC_StartXfer+0x3ea>
          break;
 800a1f0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	6a3b      	ldr	r3, [r7, #32]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a208:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	78db      	ldrb	r3, [r3, #3]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	e003      	b.n	800a224 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a222:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a22a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	4413      	add	r3, r2
 800a234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a238:	461a      	mov	r2, r3
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a23e:	79fb      	ldrb	r3, [r7, #7]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	e055      	b.n	800a2f4 <USB_HC_StartXfer+0x4ec>
 800a248:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	78db      	ldrb	r3, [r3, #3]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d14e      	bne.n	800a2f2 <USB_HC_StartXfer+0x4ea>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	6a1b      	ldr	r3, [r3, #32]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d04a      	beq.n	800a2f2 <USB_HC_StartXfer+0x4ea>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	79db      	ldrb	r3, [r3, #7]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d146      	bne.n	800a2f2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	7c9b      	ldrb	r3, [r3, #18]
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d831      	bhi.n	800a2d0 <USB_HC_StartXfer+0x4c8>
 800a26c:	a201      	add	r2, pc, #4	@ (adr r2, 800a274 <USB_HC_StartXfer+0x46c>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a285 	.word	0x0800a285
 800a278:	0800a2a9 	.word	0x0800a2a9
 800a27c:	0800a285 	.word	0x0800a285
 800a280:	0800a2a9 	.word	0x0800a2a9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	3303      	adds	r3, #3
 800a28a:	089b      	lsrs	r3, r3, #2
 800a28c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a28e:	8afa      	ldrh	r2, [r7, #22]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a294:	b29b      	uxth	r3, r3
 800a296:	429a      	cmp	r2, r3
 800a298:	d91c      	bls.n	800a2d4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	f043 0220 	orr.w	r2, r3, #32
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2a6:	e015      	b.n	800a2d4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	3303      	adds	r3, #3
 800a2ae:	089b      	lsrs	r3, r3, #2
 800a2b0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a2b2:	8afa      	ldrh	r2, [r7, #22]
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2ba:	691b      	ldr	r3, [r3, #16]
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d90a      	bls.n	800a2d8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2ce:	e003      	b.n	800a2d8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a2d0:	bf00      	nop
 800a2d2:	e002      	b.n	800a2da <USB_HC_StartXfer+0x4d2>
        break;
 800a2d4:	bf00      	nop
 800a2d6:	e000      	b.n	800a2da <USB_HC_StartXfer+0x4d2>
        break;
 800a2d8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	6999      	ldr	r1, [r3, #24]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	785a      	ldrb	r2, [r3, #1]
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	9000      	str	r0, [sp, #0]
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f7ff f9c3 	bl	8009678 <USB_WritePacket>
  }

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3728      	adds	r7, #40	@ 0x28
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	b29b      	uxth	r3, r3
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a31e:	b480      	push	{r7}
 800a320:	b089      	sub	sp, #36	@ 0x24
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	460b      	mov	r3, r1
 800a328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	015a      	lsls	r2, r3, #5
 800a33a:	69fb      	ldr	r3, [r7, #28]
 800a33c:	4413      	add	r3, r2
 800a33e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	0c9b      	lsrs	r3, r3, #18
 800a346:	f003 0303 	and.w	r3, r3, #3
 800a34a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	4413      	add	r3, r2
 800a354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	0fdb      	lsrs	r3, r3, #31
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	0fdb      	lsrs	r3, r3, #31
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f003 0320 	and.w	r3, r3, #32
 800a380:	2b20      	cmp	r3, #32
 800a382:	d10d      	bne.n	800a3a0 <USB_HC_Halt+0x82>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10a      	bne.n	800a3a0 <USB_HC_Halt+0x82>
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d002      	beq.n	800a39c <USB_HC_Halt+0x7e>
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d101      	bne.n	800a3a0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	e0d8      	b.n	800a552 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <USB_HC_Halt+0x8e>
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d173      	bne.n	800a494 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	69ba      	ldr	r2, [r7, #24]
 800a3bc:	0151      	lsls	r1, r2, #5
 800a3be:	69fa      	ldr	r2, [r7, #28]
 800a3c0:	440a      	add	r2, r1
 800a3c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	f003 0320 	and.w	r3, r3, #32
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d14a      	bne.n	800a46e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d133      	bne.n	800a44c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	015a      	lsls	r2, r3, #5
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69ba      	ldr	r2, [r7, #24]
 800a3f4:	0151      	lsls	r1, r2, #5
 800a3f6:	69fa      	ldr	r2, [r7, #28]
 800a3f8:	440a      	add	r2, r1
 800a3fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a402:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69ba      	ldr	r2, [r7, #24]
 800a414:	0151      	lsls	r1, r2, #5
 800a416:	69fa      	ldr	r2, [r7, #28]
 800a418:	440a      	add	r2, r1
 800a41a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a41e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a422:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	3301      	adds	r3, #1
 800a428:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a430:	d82e      	bhi.n	800a490 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a448:	d0ec      	beq.n	800a424 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a44a:	e081      	b.n	800a550 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	4413      	add	r3, r2
 800a454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	69fa      	ldr	r2, [r7, #28]
 800a460:	440a      	add	r2, r1
 800a462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a46a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a46c:	e070      	b.n	800a550 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	4413      	add	r3, r2
 800a476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	69ba      	ldr	r2, [r7, #24]
 800a47e:	0151      	lsls	r1, r2, #5
 800a480:	69fa      	ldr	r2, [r7, #28]
 800a482:	440a      	add	r2, r1
 800a484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a488:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a48c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a48e:	e05f      	b.n	800a550 <USB_HC_Halt+0x232>
            break;
 800a490:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a492:	e05d      	b.n	800a550 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	0151      	lsls	r1, r2, #5
 800a4a6:	69fa      	ldr	r2, [r7, #28]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d133      	bne.n	800a52c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	0151      	lsls	r1, r2, #5
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	440a      	add	r2, r1
 800a4da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	015a      	lsls	r2, r3, #5
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	69ba      	ldr	r2, [r7, #24]
 800a4f4:	0151      	lsls	r1, r2, #5
 800a4f6:	69fa      	ldr	r2, [r7, #28]
 800a4f8:	440a      	add	r2, r1
 800a4fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a502:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	3301      	adds	r3, #1
 800a508:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a510:	d81d      	bhi.n	800a54e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a528:	d0ec      	beq.n	800a504 <USB_HC_Halt+0x1e6>
 800a52a:	e011      	b.n	800a550 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	4413      	add	r3, r2
 800a534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	0151      	lsls	r1, r2, #5
 800a53e:	69fa      	ldr	r2, [r7, #28]
 800a540:	440a      	add	r2, r1
 800a542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	e000      	b.n	800a550 <USB_HC_Halt+0x232>
          break;
 800a54e:	bf00      	nop
    }
  }

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3724      	adds	r7, #36	@ 0x24
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
	...

0800a560 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a560:	b480      	push	{r7}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	460b      	mov	r3, r1
 800a56a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a570:	78fb      	ldrb	r3, [r7, #3]
 800a572:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a574:	2301      	movs	r3, #1
 800a576:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	04da      	lsls	r2, r3, #19
 800a57c:	4b15      	ldr	r3, [pc, #84]	@ (800a5d4 <USB_DoPing+0x74>)
 800a57e:	4013      	ands	r3, r2
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	440a      	add	r2, r1
 800a588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a58c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a590:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	015a      	lsls	r2, r3, #5
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	4413      	add	r3, r2
 800a59a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5be:	461a      	mov	r2, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	371c      	adds	r7, #28
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	1ff80000 	.word	0x1ff80000

0800a5d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b088      	sub	sp, #32
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7fe ff86 	bl	80094fe <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5f2:	2110      	movs	r1, #16
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fe ffdf 	bl	80095b8 <USB_FlushTxFifo>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff f809 	bl	800961c <USB_FlushRxFifo>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a614:	2300      	movs	r3, #0
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	e01f      	b.n	800a65a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	015a      	lsls	r2, r3, #5
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	4413      	add	r3, r2
 800a622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a630:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a638:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a640:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a64e:	461a      	mov	r2, r3
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	3301      	adds	r3, #1
 800a658:	61bb      	str	r3, [r7, #24]
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b0f      	cmp	r3, #15
 800a65e:	d9dc      	bls.n	800a61a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a660:	2300      	movs	r3, #0
 800a662:	61bb      	str	r3, [r7, #24]
 800a664:	e034      	b.n	800a6d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	015a      	lsls	r2, r3, #5
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	4413      	add	r3, r2
 800a66e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a67c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a68c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	4413      	add	r3, r2
 800a696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a69a:	461a      	mov	r2, r3
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6ac:	d80c      	bhi.n	800a6c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6c4:	d0ec      	beq.n	800a6a0 <USB_StopHost+0xc8>
 800a6c6:	e000      	b.n	800a6ca <USB_StopHost+0xf2>
        break;
 800a6c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	61bb      	str	r3, [r7, #24]
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b0f      	cmp	r3, #15
 800a6d4:	d9c7      	bls.n	800a666 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6dc:	461a      	mov	r2, r3
 800a6de:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7fe fef5 	bl	80094dc <USB_EnableGlobalInt>

  return ret;
 800a6f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3720      	adds	r7, #32
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a6fc:	b590      	push	{r4, r7, lr}
 800a6fe:	b089      	sub	sp, #36	@ 0x24
 800a700:	af04      	add	r7, sp, #16
 800a702:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a704:	2301      	movs	r3, #1
 800a706:	2202      	movs	r2, #2
 800a708:	2102      	movs	r1, #2
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fcb7 	bl	800b07e <USBH_FindInterface>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	2bff      	cmp	r3, #255	@ 0xff
 800a718:	d002      	beq.n	800a720 <USBH_CDC_InterfaceInit+0x24>
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d901      	bls.n	800a724 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a720:	2302      	movs	r3, #2
 800a722:	e13d      	b.n	800a9a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4619      	mov	r1, r3
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fc8c 	bl	800b046 <USBH_SelectInterface>
 800a72e:	4603      	mov	r3, r0
 800a730:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a738:	2302      	movs	r3, #2
 800a73a:	e131      	b.n	800a9a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a742:	2050      	movs	r0, #80	@ 0x50
 800a744:	f006 ffd4 	bl	80116f0 <malloc>
 800a748:	4603      	mov	r3, r0
 800a74a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a75c:	2302      	movs	r3, #2
 800a75e:	e11f      	b.n	800a9a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a760:	2250      	movs	r2, #80	@ 0x50
 800a762:	2100      	movs	r1, #0
 800a764:	68b8      	ldr	r0, [r7, #8]
 800a766:	f008 fcaa 	bl	80130be <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	211a      	movs	r1, #26
 800a770:	fb01 f303 	mul.w	r3, r1, r3
 800a774:	4413      	add	r3, r2
 800a776:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	b25b      	sxtb	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	da15      	bge.n	800a7ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a782:	7bfb      	ldrb	r3, [r7, #15]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	211a      	movs	r1, #26
 800a788:	fb01 f303 	mul.w	r3, r1, r3
 800a78c:	4413      	add	r3, r2
 800a78e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a792:	781a      	ldrb	r2, [r3, #0]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	211a      	movs	r1, #26
 800a79e:	fb01 f303 	mul.w	r3, r1, r3
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a7a8:	881a      	ldrh	r2, [r3, #0]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f002 f904 	bl	800c9c2 <USBH_AllocPipe>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	7819      	ldrb	r1, [r3, #0]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	7858      	ldrb	r0, [r3, #1]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	8952      	ldrh	r2, [r2, #10]
 800a7da:	9202      	str	r2, [sp, #8]
 800a7dc:	2203      	movs	r2, #3
 800a7de:	9201      	str	r2, [sp, #4]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	4623      	mov	r3, r4
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f002 f8bc 	bl	800c964 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f006 feed 	bl	80115d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	210a      	movs	r1, #10
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc3c 	bl	800b07e <USBH_FindInterface>
 800a806:	4603      	mov	r3, r0
 800a808:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
 800a80c:	2bff      	cmp	r3, #255	@ 0xff
 800a80e:	d002      	beq.n	800a816 <USBH_CDC_InterfaceInit+0x11a>
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d901      	bls.n	800a81a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a816:	2302      	movs	r3, #2
 800a818:	e0c2      	b.n	800a9a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	211a      	movs	r1, #26
 800a820:	fb01 f303 	mul.w	r3, r1, r3
 800a824:	4413      	add	r3, r2
 800a826:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	b25b      	sxtb	r3, r3
 800a82e:	2b00      	cmp	r3, #0
 800a830:	da16      	bge.n	800a860 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	211a      	movs	r1, #26
 800a838:	fb01 f303 	mul.w	r3, r1, r3
 800a83c:	4413      	add	r3, r2
 800a83e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a842:	781a      	ldrb	r2, [r3, #0]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a848:	7bfb      	ldrb	r3, [r7, #15]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	211a      	movs	r1, #26
 800a84e:	fb01 f303 	mul.w	r3, r1, r3
 800a852:	4413      	add	r3, r2
 800a854:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a858:	881a      	ldrh	r2, [r3, #0]
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	835a      	strh	r2, [r3, #26]
 800a85e:	e015      	b.n	800a88c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	211a      	movs	r1, #26
 800a866:	fb01 f303 	mul.w	r3, r1, r3
 800a86a:	4413      	add	r3, r2
 800a86c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a870:	781a      	ldrb	r2, [r3, #0]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	211a      	movs	r1, #26
 800a87c:	fb01 f303 	mul.w	r3, r1, r3
 800a880:	4413      	add	r3, r2
 800a882:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a886:	881a      	ldrh	r2, [r3, #0]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	211a      	movs	r1, #26
 800a892:	fb01 f303 	mul.w	r3, r1, r3
 800a896:	4413      	add	r3, r2
 800a898:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	b25b      	sxtb	r3, r3
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	da16      	bge.n	800a8d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	211a      	movs	r1, #26
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8b4:	781a      	ldrb	r2, [r3, #0]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	687a      	ldr	r2, [r7, #4]
 800a8be:	211a      	movs	r1, #26
 800a8c0:	fb01 f303 	mul.w	r3, r1, r3
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a8ca:	881a      	ldrh	r2, [r3, #0]
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	835a      	strh	r2, [r3, #26]
 800a8d0:	e015      	b.n	800a8fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	211a      	movs	r1, #26
 800a8d8:	fb01 f303 	mul.w	r3, r1, r3
 800a8dc:	4413      	add	r3, r2
 800a8de:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8e2:	781a      	ldrb	r2, [r3, #0]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	211a      	movs	r1, #26
 800a8ee:	fb01 f303 	mul.w	r3, r1, r3
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a8f8:	881a      	ldrh	r2, [r3, #0]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	7b9b      	ldrb	r3, [r3, #14]
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f002 f85c 	bl	800c9c2 <USBH_AllocPipe>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	7bdb      	ldrb	r3, [r3, #15]
 800a916:	4619      	mov	r1, r3
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f002 f852 	bl	800c9c2 <USBH_AllocPipe>
 800a91e:	4603      	mov	r3, r0
 800a920:	461a      	mov	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	7b59      	ldrb	r1, [r3, #13]
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	7b98      	ldrb	r0, [r3, #14]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	8b12      	ldrh	r2, [r2, #24]
 800a93e:	9202      	str	r2, [sp, #8]
 800a940:	2202      	movs	r2, #2
 800a942:	9201      	str	r2, [sp, #4]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	4623      	mov	r3, r4
 800a948:	4602      	mov	r2, r0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f002 f80a 	bl	800c964 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	7b19      	ldrb	r1, [r3, #12]
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	7bd8      	ldrb	r0, [r3, #15]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	8b52      	ldrh	r2, [r2, #26]
 800a968:	9202      	str	r2, [sp, #8]
 800a96a:	2202      	movs	r2, #2
 800a96c:	9201      	str	r2, [sp, #4]
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	4623      	mov	r3, r4
 800a972:	4602      	mov	r2, r0
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f001 fff5 	bl	800c964 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	7b5b      	ldrb	r3, [r3, #13]
 800a986:	2200      	movs	r2, #0
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f006 fe22 	bl	80115d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	7b1b      	ldrb	r3, [r3, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	4619      	mov	r1, r3
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f006 fe1b 	bl	80115d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd90      	pop	{r4, r7, pc}

0800a9a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00e      	beq.n	800a9e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 ffea 	bl	800c9a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f002 f815 	bl	800ca04 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	7b1b      	ldrb	r3, [r3, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	7b1b      	ldrb	r3, [r3, #12]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 ffd7 	bl	800c9a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	7b1b      	ldrb	r3, [r3, #12]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f002 f802 	bl	800ca04 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	7b5b      	ldrb	r3, [r3, #13]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00e      	beq.n	800aa2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	7b5b      	ldrb	r3, [r3, #13]
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 ffc4 	bl	800c9a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	7b5b      	ldrb	r3, [r3, #13]
 800aa1e:	4619      	mov	r1, r3
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 ffef 	bl	800ca04 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa32:	69db      	ldr	r3, [r3, #28]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00b      	beq.n	800aa50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa3e:	69db      	ldr	r3, [r3, #28]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f006 fe5d 	bl	8011700 <free>
    phost->pActiveClass->pData = 0U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3340      	adds	r3, #64	@ 0x40
 800aa70:	4619      	mov	r1, r3
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f8b1 	bl	800abda <GetLineCoding>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aa7c:	7afb      	ldrb	r3, [r7, #11]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d105      	bne.n	800aa8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa88:	2102      	movs	r1, #2
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aa8e:	7afb      	ldrb	r3, [r7, #11]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d877      	bhi.n	800abac <USBH_CDC_Process+0x114>
 800aabc:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <USBH_CDC_Process+0x2c>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800aad9 	.word	0x0800aad9
 800aac8:	0800aadf 	.word	0x0800aadf
 800aacc:	0800ab0f 	.word	0x0800ab0f
 800aad0:	0800ab83 	.word	0x0800ab83
 800aad4:	0800ab91 	.word	0x0800ab91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	73fb      	strb	r3, [r7, #15]
      break;
 800aadc:	e06d      	b.n	800abba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f897 	bl	800ac18 <SetLineCoding>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aaee:	7bbb      	ldrb	r3, [r7, #14]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d104      	bne.n	800aafe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800aafc:	e058      	b.n	800abb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d055      	beq.n	800abb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2204      	movs	r2, #4
 800ab08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ab0c:	e050      	b.n	800abb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	3340      	adds	r3, #64	@ 0x40
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f860 	bl	800abda <GetLineCoding>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d126      	bne.n	800ab72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab36:	791b      	ldrb	r3, [r3, #4]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d13b      	bne.n	800abb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d133      	bne.n	800abb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d12b      	bne.n	800abb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d124      	bne.n	800abb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f96a 	bl	800ae44 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab70:	e020      	b.n	800abb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d01d      	beq.n	800abb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2204      	movs	r2, #4
 800ab7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ab80:	e018      	b.n	800abb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f867 	bl	800ac56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f8e6 	bl	800ad5a <CDC_ProcessReception>
      break;
 800ab8e:	e014      	b.n	800abba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ab90:	2100      	movs	r1, #0
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 f8f8 	bl	800bd88 <USBH_ClrFeature>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab9c:	7bbb      	ldrb	r3, [r7, #14]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10a      	bne.n	800abb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800abaa:	e005      	b.n	800abb8 <USBH_CDC_Process+0x120>

    default:
      break;
 800abac:	bf00      	nop
 800abae:	e004      	b.n	800abba <USBH_CDC_Process+0x122>
      break;
 800abb0:	bf00      	nop
 800abb2:	e002      	b.n	800abba <USBH_CDC_Process+0x122>
      break;
 800abb4:	bf00      	nop
 800abb6:	e000      	b.n	800abba <USBH_CDC_Process+0x122>
      break;
 800abb8:	bf00      	nop

  }

  return status;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	22a1      	movs	r2, #161	@ 0xa1
 800abe8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2221      	movs	r2, #33	@ 0x21
 800abee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2207      	movs	r2, #7
 800ac00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2207      	movs	r2, #7
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 fbf1 	bl	800c3f0 <USBH_CtlReq>
 800ac0e:	4603      	mov	r3, r0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2221      	movs	r2, #33	@ 0x21
 800ac26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2207      	movs	r2, #7
 800ac3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	2207      	movs	r2, #7
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 fbd2 	bl	800c3f0 <USBH_CtlReq>
 800ac4c:	4603      	mov	r3, r0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b086      	sub	sp, #24
 800ac5a:	af02      	add	r7, sp, #8
 800ac5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d002      	beq.n	800ac7c <CDC_ProcessTransmission+0x26>
 800ac76:	2b02      	cmp	r3, #2
 800ac78:	d023      	beq.n	800acc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ac7a:	e06a      	b.n	800ad52 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	8b12      	ldrh	r2, [r2, #24]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d90b      	bls.n	800aca0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	69d9      	ldr	r1, [r3, #28]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8b1a      	ldrh	r2, [r3, #24]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	7b5b      	ldrb	r3, [r3, #13]
 800ac94:	2001      	movs	r0, #1
 800ac96:	9000      	str	r0, [sp, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f001 fe20 	bl	800c8de <USBH_BulkSendData>
 800ac9e:	e00b      	b.n	800acb8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	7b5b      	ldrb	r3, [r3, #13]
 800acae:	2001      	movs	r0, #1
 800acb0:	9000      	str	r0, [sp, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fe13 	bl	800c8de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2202      	movs	r2, #2
 800acbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800acc0:	e047      	b.n	800ad52 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	7b5b      	ldrb	r3, [r3, #13]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f006 fc59 	bl	8011580 <USBH_LL_GetURBState>
 800acce:	4603      	mov	r3, r0
 800acd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d12e      	bne.n	800ad36 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	8b12      	ldrh	r2, [r2, #24]
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d90e      	bls.n	800ad02 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	8b12      	ldrh	r2, [r2, #24]
 800acec:	1a9a      	subs	r2, r3, r2
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	8b12      	ldrh	r2, [r2, #24]
 800acfa:	441a      	add	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	61da      	str	r2, [r3, #28]
 800ad00:	e002      	b.n	800ad08 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800ad18:	e006      	b.n	800ad28 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f87a 	bl	800ae1c <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ad28:	2300      	movs	r3, #0
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	2104      	movs	r1, #4
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 feb6 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800ad34:	e00c      	b.n	800ad50 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800ad36:	7afb      	ldrb	r3, [r7, #11]
 800ad38:	2b02      	cmp	r3, #2
 800ad3a:	d109      	bne.n	800ad50 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ad44:	2300      	movs	r3, #0
 800ad46:	2200      	movs	r2, #0
 800ad48:	2104      	movs	r1, #4
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fea8 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800ad50:	bf00      	nop
  }
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d002      	beq.n	800ad80 <CDC_ProcessReception+0x26>
 800ad7a:	2b04      	cmp	r3, #4
 800ad7c:	d00e      	beq.n	800ad9c <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800ad7e:	e049      	b.n	800ae14 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	6a19      	ldr	r1, [r3, #32]
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	8b5a      	ldrh	r2, [r3, #26]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	7b1b      	ldrb	r3, [r3, #12]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f001 fdcb 	bl	800c928 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2204      	movs	r2, #4
 800ad96:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ad9a:	e03b      	b.n	800ae14 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	7b1b      	ldrb	r3, [r3, #12]
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f006 fbec 	bl	8011580 <USBH_LL_GetURBState>
 800ada8:	4603      	mov	r3, r0
 800adaa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800adac:	7cfb      	ldrb	r3, [r7, #19]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d12f      	bne.n	800ae12 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	7b1b      	ldrb	r3, [r3, #12]
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f006 fb4f 	bl	801145c <USBH_LL_GetLastXferSize>
 800adbe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d016      	beq.n	800adf8 <CDC_ProcessReception+0x9e>
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	8b5b      	ldrh	r3, [r3, #26]
 800adce:	461a      	mov	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4293      	cmp	r3, r2
 800add4:	d110      	bne.n	800adf8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1ad2      	subs	r2, r2, r3
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	6a1a      	ldr	r2, [r3, #32]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	441a      	add	r2, r3
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2203      	movs	r2, #3
 800adf2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800adf6:	e006      	b.n	800ae06 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f815 	bl	800ae30 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ae06:	2300      	movs	r3, #0
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2104      	movs	r1, #4
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fe47 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800ae12:	bf00      	nop
  }
}
 800ae14:	bf00      	nop
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	e044      	b.n	800aefa <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	79fa      	ldrb	r2, [r7, #7]
 800ae74:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ae88:	68f8      	ldr	r0, [r7, #12]
 800ae8a:	f000 f841 	bl	800af10 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800aebc:	2200      	movs	r2, #0
 800aebe:	2104      	movs	r1, #4
 800aec0:	2010      	movs	r0, #16
 800aec2:	f001 ff5a 	bl	800cd7a <osMessageQueueNew>
 800aec6:	4602      	mov	r2, r0
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800aece:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <USBH_Init+0xac>)
 800aed0:	4a0d      	ldr	r2, [pc, #52]	@ (800af08 <USBH_Init+0xb0>)
 800aed2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800aed4:	4b0b      	ldr	r3, [pc, #44]	@ (800af04 <USBH_Init+0xac>)
 800aed6:	2280      	movs	r2, #128	@ 0x80
 800aed8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800aeda:	4b0a      	ldr	r3, [pc, #40]	@ (800af04 <USBH_Init+0xac>)
 800aedc:	2218      	movs	r2, #24
 800aede:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800aee0:	4a08      	ldr	r2, [pc, #32]	@ (800af04 <USBH_Init+0xac>)
 800aee2:	68f9      	ldr	r1, [r7, #12]
 800aee4:	4809      	ldr	r0, [pc, #36]	@ (800af0c <USBH_Init+0xb4>)
 800aee6:	f001 fe9b 	bl	800cc20 <osThreadNew>
 800aeea:	4602      	mov	r2, r0
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f006 f9fe 	bl	80112f4 <USBH_LL_Init>

  return USBH_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20000e10 	.word	0x20000e10
 800af08:	0801657c 	.word	0x0801657c
 800af0c:	0800bae9 	.word	0x0800bae9

0800af10 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e009      	b.n	800af32 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	33e0      	adds	r3, #224	@ 0xe0
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	2200      	movs	r2, #0
 800af2a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3301      	adds	r3, #1
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b0f      	cmp	r3, #15
 800af36:	d9f2      	bls.n	800af1e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af38:	2300      	movs	r3, #0
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	e009      	b.n	800af52 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af48:	2200      	movs	r2, #0
 800af4a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3301      	adds	r3, #1
 800af50:	60fb      	str	r3, [r7, #12]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af58:	d3f1      	bcc.n	800af3e <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2201      	movs	r2, #1
 800af78:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2240      	movs	r2, #64	@ 0x40
 800af7e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	331c      	adds	r3, #28
 800afaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afae:	2100      	movs	r1, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	f008 f884 	bl	80130be <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800afbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afc0:	2100      	movs	r1, #0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f008 f87b 	bl	80130be <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800afce:	2212      	movs	r2, #18
 800afd0:	2100      	movs	r1, #0
 800afd2:	4618      	mov	r0, r3
 800afd4:	f008 f873 	bl	80130be <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800afde:	223e      	movs	r2, #62	@ 0x3e
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f008 f86b 	bl	80130be <memset>

  return USBH_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b085      	sub	sp, #20
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800affc:	2300      	movs	r3, #0
 800affe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d016      	beq.n	800b034 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10e      	bne.n	800b02e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b016:	1c59      	adds	r1, r3, #1
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	33de      	adds	r3, #222	@ 0xde
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b028:	2300      	movs	r3, #0
 800b02a:	73fb      	strb	r3, [r7, #15]
 800b02c:	e004      	b.n	800b038 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b02e:	2302      	movs	r3, #2
 800b030:	73fb      	strb	r3, [r7, #15]
 800b032:	e001      	b.n	800b038 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b034:	2302      	movs	r3, #2
 800b036:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b038:	7bfb      	ldrb	r3, [r7, #15]
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3714      	adds	r7, #20
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	460b      	mov	r3, r1
 800b050:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b052:	2300      	movs	r3, #0
 800b054:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b05c:	78fa      	ldrb	r2, [r7, #3]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d204      	bcs.n	800b06c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	78fa      	ldrb	r2, [r7, #3]
 800b066:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b06a:	e001      	b.n	800b070 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b06c:	2302      	movs	r3, #2
 800b06e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b07e:	b480      	push	{r7}
 800b080:	b087      	sub	sp, #28
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	4608      	mov	r0, r1
 800b088:	4611      	mov	r1, r2
 800b08a:	461a      	mov	r2, r3
 800b08c:	4603      	mov	r3, r0
 800b08e:	70fb      	strb	r3, [r7, #3]
 800b090:	460b      	mov	r3, r1
 800b092:	70bb      	strb	r3, [r7, #2]
 800b094:	4613      	mov	r3, r2
 800b096:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b0a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0a8:	e025      	b.n	800b0f6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	221a      	movs	r2, #26
 800b0ae:	fb02 f303 	mul.w	r3, r2, r3
 800b0b2:	3308      	adds	r3, #8
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	795b      	ldrb	r3, [r3, #5]
 800b0c0:	78fa      	ldrb	r2, [r7, #3]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d002      	beq.n	800b0cc <USBH_FindInterface+0x4e>
 800b0c6:	78fb      	ldrb	r3, [r7, #3]
 800b0c8:	2bff      	cmp	r3, #255	@ 0xff
 800b0ca:	d111      	bne.n	800b0f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0d0:	78ba      	ldrb	r2, [r7, #2]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d002      	beq.n	800b0dc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0d6:	78bb      	ldrb	r3, [r7, #2]
 800b0d8:	2bff      	cmp	r3, #255	@ 0xff
 800b0da:	d109      	bne.n	800b0f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0e0:	787a      	ldrb	r2, [r7, #1]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d002      	beq.n	800b0ec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0e6:	787b      	ldrb	r3, [r7, #1]
 800b0e8:	2bff      	cmp	r3, #255	@ 0xff
 800b0ea:	d101      	bne.n	800b0f0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	e006      	b.n	800b0fe <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b0f0:	7dfb      	ldrb	r3, [r7, #23]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d9d6      	bls.n	800b0aa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b0fc:	23ff      	movs	r3, #255	@ 0xff
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f006 f92a 	bl	801136c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b118:	2101      	movs	r1, #1
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f006 fa43 	bl	80115a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af04      	add	r7, sp, #16
 800b132:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b134:	2302      	movs	r3, #2
 800b136:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b01      	cmp	r3, #1
 800b146:	d102      	bne.n	800b14e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2203      	movs	r2, #3
 800b14c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b0b      	cmp	r3, #11
 800b156:	f200 81f5 	bhi.w	800b544 <USBH_Process+0x418>
 800b15a:	a201      	add	r2, pc, #4	@ (adr r2, 800b160 <USBH_Process+0x34>)
 800b15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b160:	0800b191 	.word	0x0800b191
 800b164:	0800b1cf 	.word	0x0800b1cf
 800b168:	0800b245 	.word	0x0800b245
 800b16c:	0800b4d3 	.word	0x0800b4d3
 800b170:	0800b545 	.word	0x0800b545
 800b174:	0800b2f1 	.word	0x0800b2f1
 800b178:	0800b46d 	.word	0x0800b46d
 800b17c:	0800b333 	.word	0x0800b333
 800b180:	0800b35f 	.word	0x0800b35f
 800b184:	0800b387 	.word	0x0800b387
 800b188:	0800b3d5 	.word	0x0800b3d5
 800b18c:	0800b4bb 	.word	0x0800b4bb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b196:	b2db      	uxtb	r3, r3
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 81d5 	beq.w	800b548 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b1a4:	20c8      	movs	r0, #200	@ 0xc8
 800b1a6:	f006 fa48 	bl	801163a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f006 f93b 	bl	8011426 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fc6a 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b1cc:	e1bc      	b.n	800b548 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d107      	bne.n	800b1ea <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	701a      	strb	r2, [r3, #0]
 800b1e8:	e025      	b.n	800b236 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b1f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1f4:	d914      	bls.n	800b220 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b20c:	2b03      	cmp	r3, #3
 800b20e:	d903      	bls.n	800b218 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	220d      	movs	r2, #13
 800b214:	701a      	strb	r2, [r3, #0]
 800b216:	e00e      	b.n	800b236 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	e00a      	b.n	800b236 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b226:	f103 020a 	add.w	r2, r3, #10
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b230:	200a      	movs	r0, #10
 800b232:	f006 fa02 	bl	801163a <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b236:	2300      	movs	r3, #0
 800b238:	2200      	movs	r2, #0
 800b23a:	2101      	movs	r1, #1
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 fc2f 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b242:	e188      	b.n	800b556 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d005      	beq.n	800b25a <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b254:	2104      	movs	r1, #4
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b25a:	2064      	movs	r0, #100	@ 0x64
 800b25c:	f006 f9ed 	bl	801163a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f006 f8b9 	bl	80113d8 <USBH_LL_GetSpeed>
 800b266:	4603      	mov	r3, r0
 800b268:	461a      	mov	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2205      	movs	r2, #5
 800b274:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b276:	2100      	movs	r1, #0
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f001 fba2 	bl	800c9c2 <USBH_AllocPipe>
 800b27e:	4603      	mov	r3, r0
 800b280:	461a      	mov	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b286:	2180      	movs	r1, #128	@ 0x80
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f001 fb9a 	bl	800c9c2 <USBH_AllocPipe>
 800b28e:	4603      	mov	r3, r0
 800b290:	461a      	mov	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	7919      	ldrb	r1, [r3, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2aa:	9202      	str	r2, [sp, #8]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	9201      	str	r2, [sp, #4]
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2280      	movs	r2, #128	@ 0x80
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f001 fb54 	bl	800c964 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	7959      	ldrb	r1, [r3, #5]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2d0:	9202      	str	r2, [sp, #8]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	9201      	str	r2, [sp, #4]
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2200      	movs	r2, #0
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f001 fb41 	bl	800c964 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 fbd9 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b2ee:	e132      	b.n	800b556 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f935 	bl	800b560 <USBH_HandleEnum>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f040 8124 	bne.w	800b54c <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b312:	2b01      	cmp	r3, #1
 800b314:	d103      	bne.n	800b31e <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2208      	movs	r2, #8
 800b31a:	701a      	strb	r2, [r3, #0]
 800b31c:	e002      	b.n	800b324 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2207      	movs	r2, #7
 800b322:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b324:	2300      	movs	r3, #0
 800b326:	2200      	movs	r2, #0
 800b328:	2105      	movs	r1, #5
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fbb8 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b330:	e10c      	b.n	800b54c <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 8109 	beq.w	800b550 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b344:	2101      	movs	r1, #1
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2208      	movs	r2, #8
 800b34e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b350:	2300      	movs	r3, #0
 800b352:	2200      	movs	r2, #0
 800b354:	2105      	movs	r1, #5
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 fba2 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800b35c:	e0f8      	b.n	800b550 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b364:	4619      	mov	r1, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fcc7 	bl	800bcfa <USBH_SetCfg>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2209      	movs	r2, #9
 800b376:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b378:	2300      	movs	r3, #0
 800b37a:	2200      	movs	r2, #0
 800b37c:	2101      	movs	r1, #1
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fb8e 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b384:	e0e7      	b.n	800b556 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b38c:	f003 0320 	and.w	r3, r3, #32
 800b390:	2b00      	cmp	r3, #0
 800b392:	d015      	beq.n	800b3c0 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b394:	2101      	movs	r1, #1
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fcd2 	bl	800bd40 <USBH_SetFeature>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b3a0:	7bbb      	ldrb	r3, [r7, #14]
 800b3a2:	b2db      	uxtb	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d103      	bne.n	800b3b0 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	e00a      	b.n	800b3c6 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d106      	bne.n	800b3c6 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	220a      	movs	r2, #10
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	e002      	b.n	800b3c6 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fb67 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b3d2:	e0c0      	b.n	800b556 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d03f      	beq.n	800b45e <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
 800b3ea:	e016      	b.n	800b41a <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b3ec:	7bfa      	ldrb	r2, [r7, #15]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	32de      	adds	r2, #222	@ 0xde
 800b3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3f6:	791a      	ldrb	r2, [r3, #4]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d108      	bne.n	800b414 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b402:	7bfa      	ldrb	r2, [r7, #15]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	32de      	adds	r2, #222	@ 0xde
 800b408:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b412:	e005      	b.n	800b420 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b414:	7bfb      	ldrb	r3, [r7, #15]
 800b416:	3301      	adds	r3, #1
 800b418:	73fb      	strb	r3, [r7, #15]
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0e5      	beq.n	800b3ec <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b426:	2b00      	cmp	r3, #0
 800b428:	d016      	beq.n	800b458 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2206      	movs	r2, #6
 800b440:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b448:	2103      	movs	r1, #3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
 800b44e:	e006      	b.n	800b45e <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	220d      	movs	r2, #13
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e002      	b.n	800b45e <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	220d      	movs	r2, #13
 800b45c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b45e:	2300      	movs	r3, #0
 800b460:	2200      	movs	r2, #0
 800b462:	2105      	movs	r1, #5
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 fb1b 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b46a:	e074      	b.n	800b556 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b472:	2b00      	cmp	r3, #0
 800b474:	d017      	beq.n	800b4a6 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	4798      	blx	r3
 800b482:	4603      	mov	r3, r0
 800b484:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d103      	bne.n	800b496 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	220b      	movs	r2, #11
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	e00a      	b.n	800b4ac <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d106      	bne.n	800b4ac <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	220d      	movs	r2, #13
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	e002      	b.n	800b4ac <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	220d      	movs	r2, #13
 800b4aa:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2105      	movs	r1, #5
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 faf4 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b4b8:	e04d      	b.n	800b556 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d047      	beq.n	800b554 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	4798      	blx	r3
      }
      break;
 800b4d0:	e040      	b.n	800b554 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f7ff fd18 	bl	800af10 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d009      	beq.n	800b4fe <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d005      	beq.n	800b514 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b50e:	2105      	movs	r1, #5
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d107      	bne.n	800b530 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f7ff fdee 	bl	800b10a <USBH_Start>
 800b52e:	e002      	b.n	800b536 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f005 ff1b 	bl	801136c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b536:	2300      	movs	r3, #0
 800b538:	2200      	movs	r2, #0
 800b53a:	2101      	movs	r1, #1
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 faaf 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b542:	e008      	b.n	800b556 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800b544:	bf00      	nop
 800b546:	e006      	b.n	800b556 <USBH_Process+0x42a>
      break;
 800b548:	bf00      	nop
 800b54a:	e004      	b.n	800b556 <USBH_Process+0x42a>
      break;
 800b54c:	bf00      	nop
 800b54e:	e002      	b.n	800b556 <USBH_Process+0x42a>
    break;
 800b550:	bf00      	nop
 800b552:	e000      	b.n	800b556 <USBH_Process+0x42a>
      break;
 800b554:	bf00      	nop
  }
  return USBH_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af04      	add	r7, sp, #16
 800b566:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b568:	2301      	movs	r3, #1
 800b56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b56c:	2301      	movs	r3, #1
 800b56e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	785b      	ldrb	r3, [r3, #1]
 800b574:	2b07      	cmp	r3, #7
 800b576:	f200 81db 	bhi.w	800b930 <USBH_HandleEnum+0x3d0>
 800b57a:	a201      	add	r2, pc, #4	@ (adr r2, 800b580 <USBH_HandleEnum+0x20>)
 800b57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b580:	0800b5a1 	.word	0x0800b5a1
 800b584:	0800b65b 	.word	0x0800b65b
 800b588:	0800b6c5 	.word	0x0800b6c5
 800b58c:	0800b74f 	.word	0x0800b74f
 800b590:	0800b7b9 	.word	0x0800b7b9
 800b594:	0800b829 	.word	0x0800b829
 800b598:	0800b893 	.word	0x0800b893
 800b59c:	0800b8f1 	.word	0x0800b8f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b5a0:	2108      	movs	r1, #8
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 fac6 	bl	800bb34 <USBH_Get_DevDesc>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5ac:	7bbb      	ldrb	r3, [r7, #14]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d12e      	bne.n	800b610 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7919      	ldrb	r1, [r3, #4]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5d6:	9202      	str	r2, [sp, #8]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	9201      	str	r2, [sp, #4]
 800b5dc:	9300      	str	r3, [sp, #0]
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2280      	movs	r2, #128	@ 0x80
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 f9be 	bl	800c964 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	7959      	ldrb	r1, [r3, #5]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5fc:	9202      	str	r2, [sp, #8]
 800b5fe:	2200      	movs	r2, #0
 800b600:	9201      	str	r2, [sp, #4]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	4603      	mov	r3, r0
 800b606:	2200      	movs	r2, #0
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f001 f9ab 	bl	800c964 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b60e:	e191      	b.n	800b934 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b610:	7bbb      	ldrb	r3, [r7, #14]
 800b612:	2b03      	cmp	r3, #3
 800b614:	f040 818e 	bne.w	800b934 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b61e:	3301      	adds	r3, #1
 800b620:	b2da      	uxtb	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d903      	bls.n	800b63a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	220d      	movs	r2, #13
 800b636:	701a      	strb	r2, [r3, #0]
      break;
 800b638:	e17c      	b.n	800b934 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	795b      	ldrb	r3, [r3, #5]
 800b63e:	4619      	mov	r1, r3
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f001 f9df 	bl	800ca04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	791b      	ldrb	r3, [r3, #4]
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f001 f9d9 	bl	800ca04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	701a      	strb	r2, [r3, #0]
      break;
 800b658:	e16c      	b.n	800b934 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b65a:	2112      	movs	r1, #18
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 fa69 	bl	800bb34 <USBH_Get_DevDesc>
 800b662:	4603      	mov	r3, r0
 800b664:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b666:	7bbb      	ldrb	r3, [r7, #14]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2202      	movs	r2, #2
 800b670:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b672:	e161      	b.n	800b938 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	2b03      	cmp	r3, #3
 800b678:	f040 815e 	bne.w	800b938 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b682:	3301      	adds	r3, #1
 800b684:	b2da      	uxtb	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b692:	2b03      	cmp	r3, #3
 800b694:	d903      	bls.n	800b69e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	220d      	movs	r2, #13
 800b69a:	701a      	strb	r2, [r3, #0]
      break;
 800b69c:	e14c      	b.n	800b938 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	795b      	ldrb	r3, [r3, #5]
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f001 f9ad 	bl	800ca04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	791b      	ldrb	r3, [r3, #4]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f001 f9a7 	bl	800ca04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	701a      	strb	r2, [r3, #0]
      break;
 800b6c2:	e139      	b.n	800b938 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 faf3 	bl	800bcb2 <USBH_SetAddress>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d130      	bne.n	800b738 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b6d6:	2002      	movs	r0, #2
 800b6d8:	f005 ffaf 	bl	801163a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2203      	movs	r2, #3
 800b6e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	7919      	ldrb	r1, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6fe:	9202      	str	r2, [sp, #8]
 800b700:	2200      	movs	r2, #0
 800b702:	9201      	str	r2, [sp, #4]
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	4603      	mov	r3, r0
 800b708:	2280      	movs	r2, #128	@ 0x80
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f001 f92a 	bl	800c964 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7959      	ldrb	r1, [r3, #5]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b724:	9202      	str	r2, [sp, #8]
 800b726:	2200      	movs	r2, #0
 800b728:	9201      	str	r2, [sp, #4]
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4603      	mov	r3, r0
 800b72e:	2200      	movs	r2, #0
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 f917 	bl	800c964 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b736:	e101      	b.n	800b93c <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b738:	7bbb      	ldrb	r3, [r7, #14]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	f040 80fe 	bne.w	800b93c <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	220d      	movs	r2, #13
 800b744:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	705a      	strb	r2, [r3, #1]
      break;
 800b74c:	e0f6      	b.n	800b93c <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b74e:	2109      	movs	r1, #9
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fa1b 	bl	800bb8c <USBH_Get_CfgDesc>
 800b756:	4603      	mov	r3, r0
 800b758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2204      	movs	r2, #4
 800b764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b766:	e0eb      	b.n	800b940 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	f040 80e8 	bne.w	800b940 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b776:	3301      	adds	r3, #1
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b786:	2b03      	cmp	r3, #3
 800b788:	d903      	bls.n	800b792 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	220d      	movs	r2, #13
 800b78e:	701a      	strb	r2, [r3, #0]
      break;
 800b790:	e0d6      	b.n	800b940 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	795b      	ldrb	r3, [r3, #5]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 f933 	bl	800ca04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	791b      	ldrb	r3, [r3, #4]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 f92d 	bl	800ca04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
      break;
 800b7b6:	e0c3      	b.n	800b940 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f9e3 	bl	800bb8c <USBH_Get_CfgDesc>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7ca:	7bbb      	ldrb	r3, [r7, #14]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d103      	bne.n	800b7d8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2205      	movs	r2, #5
 800b7d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7d6:	e0b5      	b.n	800b944 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b03      	cmp	r3, #3
 800b7dc:	f040 80b2 	bne.w	800b944 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b7f6:	2b03      	cmp	r3, #3
 800b7f8:	d903      	bls.n	800b802 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	220d      	movs	r2, #13
 800b7fe:	701a      	strb	r2, [r3, #0]
      break;
 800b800:	e0a0      	b.n	800b944 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	795b      	ldrb	r3, [r3, #5]
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f001 f8fb 	bl	800ca04 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	791b      	ldrb	r3, [r3, #4]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f001 f8f5 	bl	800ca04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	701a      	strb	r2, [r3, #0]
      break;
 800b826:	e08d      	b.n	800b944 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d025      	beq.n	800b87e <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b83e:	23ff      	movs	r3, #255	@ 0xff
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f9cd 	bl	800bbe0 <USBH_Get_StringDesc>
 800b846:	4603      	mov	r3, r0
 800b848:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b84a:	7bbb      	ldrb	r3, [r7, #14]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d109      	bne.n	800b864 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2206      	movs	r2, #6
 800b854:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b856:	2300      	movs	r3, #0
 800b858:	2200      	movs	r2, #0
 800b85a:	2105      	movs	r1, #5
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f91f 	bl	800baa0 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b862:	e071      	b.n	800b948 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	2b03      	cmp	r3, #3
 800b868:	d16e      	bne.n	800b948 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2206      	movs	r2, #6
 800b86e:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b870:	2300      	movs	r3, #0
 800b872:	2200      	movs	r2, #0
 800b874:	2105      	movs	r1, #5
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f912 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800b87c:	e064      	b.n	800b948 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2206      	movs	r2, #6
 800b882:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b884:	2300      	movs	r3, #0
 800b886:	2200      	movs	r2, #0
 800b888:	2105      	movs	r1, #5
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f000 f908 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800b890:	e05a      	b.n	800b948 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d01f      	beq.n	800b8dc <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8a8:	23ff      	movs	r3, #255	@ 0xff
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f998 	bl	800bbe0 <USBH_Get_StringDesc>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8b4:	7bbb      	ldrb	r3, [r7, #14]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d103      	bne.n	800b8c2 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2207      	movs	r2, #7
 800b8be:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b8c0:	e044      	b.n	800b94c <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8c2:	7bbb      	ldrb	r3, [r7, #14]
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d141      	bne.n	800b94c <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2207      	movs	r2, #7
 800b8cc:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2105      	movs	r1, #5
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f8e3 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800b8da:	e037      	b.n	800b94c <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2207      	movs	r2, #7
 800b8e0:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2105      	movs	r1, #5
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 f8d9 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800b8ee:	e02d      	b.n	800b94c <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d017      	beq.n	800b92a <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b906:	23ff      	movs	r3, #255	@ 0xff
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f969 	bl	800bbe0 <USBH_Get_StringDesc>
 800b90e:	4603      	mov	r3, r0
 800b910:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b91c:	e018      	b.n	800b950 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	2b03      	cmp	r3, #3
 800b922:	d115      	bne.n	800b950 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]
      break;
 800b928:	e012      	b.n	800b950 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
      break;
 800b92e:	e00f      	b.n	800b950 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800b930:	bf00      	nop
 800b932:	e00e      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b934:	bf00      	nop
 800b936:	e00c      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b938:	bf00      	nop
 800b93a:	e00a      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b93c:	bf00      	nop
 800b93e:	e008      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b940:	bf00      	nop
 800b942:	e006      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b944:	bf00      	nop
 800b946:	e004      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b948:	bf00      	nop
 800b94a:	e002      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b94c:	bf00      	nop
 800b94e:	e000      	b.n	800b952 <USBH_HandleEnum+0x3f2>
      break;
 800b950:	bf00      	nop
  }
  return Status;
 800b952:	7bfb      	ldrb	r3, [r7, #15]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b96e:	bf00      	nop
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 f804 	bl	800b99e <USBH_HandleSof>
}
 800b996:	bf00      	nop
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	2b0b      	cmp	r3, #11
 800b9ae:	d10a      	bne.n	800b9c6 <USBH_HandleSof+0x28>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	4798      	blx	r3
  }
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b9de:	2300      	movs	r3, #0
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f85b 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800b9ea:	bf00      	nop
}
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ba0a:	bf00      	nop
}
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b082      	sub	sp, #8
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ba36:	2300      	movs	r3, #0
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f82f 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f005 fc98 	bl	80113a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	791b      	ldrb	r3, [r3, #4]
 800ba76:	4619      	mov	r1, r3
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 ffc3 	bl	800ca04 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	795b      	ldrb	r3, [r3, #5]
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 ffbd 	bl	800ca04 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	2101      	movs	r1, #1
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 f805 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	607a      	str	r2, [r7, #4]
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	460b      	mov	r3, r1
 800baae:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800bab0:	7afa      	ldrb	r2, [r7, #11]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800babe:	4618      	mov	r0, r3
 800bac0:	f001 fa8c 	bl	800cfdc <osMessageQueueGetSpace>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f001 f9c0 	bl	800ce60 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800bae0:	bf00      	nop
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bafc:	f04f 33ff 	mov.w	r3, #4294967295
 800bb00:	2200      	movs	r2, #0
 800bb02:	f001 fa0d 	bl	800cf20 <osMessageQueueGet>
 800bb06:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f0      	bne.n	800baf0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7ff fb0c 	bl	800b12c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb14:	e7ec      	b.n	800baf0 <USBH_Process_OS+0x8>

0800bb16 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800bb1e:	2300      	movs	r3, #0
 800bb20:	2200      	movs	r2, #0
 800bb22:	2101      	movs	r1, #1
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff ffbb 	bl	800baa0 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bb40:	887b      	ldrh	r3, [r7, #2]
 800bb42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb46:	d901      	bls.n	800bb4c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e01b      	b.n	800bb84 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bb52:	887b      	ldrh	r3, [r7, #2]
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	4613      	mov	r3, r2
 800bb58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f872 	bl	800bc48 <USBH_GetDescriptor>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d109      	bne.n	800bb82 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb74:	887a      	ldrh	r2, [r7, #2]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f929 	bl	800bdd0 <USBH_ParseDevDesc>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	331c      	adds	r3, #28
 800bb9c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bb9e:	887b      	ldrh	r3, [r7, #2]
 800bba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bba4:	d901      	bls.n	800bbaa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e016      	b.n	800bbd8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbaa:	887b      	ldrh	r3, [r7, #2]
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f846 	bl	800bc48 <USBH_GetDescriptor>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d107      	bne.n	800bbd6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bbc6:	887b      	ldrh	r3, [r7, #2]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	68b9      	ldr	r1, [r7, #8]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f9af 	bl	800bf30 <USBH_ParseCfgDesc>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af02      	add	r7, sp, #8
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	607a      	str	r2, [r7, #4]
 800bbea:	461a      	mov	r2, r3
 800bbec:	460b      	mov	r3, r1
 800bbee:	72fb      	strb	r3, [r7, #11]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bbf4:	893b      	ldrh	r3, [r7, #8]
 800bbf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbfa:	d802      	bhi.n	800bc02 <USBH_Get_StringDesc+0x22>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e01c      	b.n	800bc40 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bc0e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bc16:	893b      	ldrh	r3, [r7, #8]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f812 	bl	800bc48 <USBH_GetDescriptor>
 800bc24:	4603      	mov	r3, r0
 800bc26:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d107      	bne.n	800bc3e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bc34:	893a      	ldrh	r2, [r7, #8]
 800bc36:	6879      	ldr	r1, [r7, #4]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fb8c 	bl	800c356 <USBH_ParseStringDesc>
  }

  return status;
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	460b      	mov	r3, r1
 800bc54:	72fb      	strb	r3, [r7, #11]
 800bc56:	4613      	mov	r3, r2
 800bc58:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	789b      	ldrb	r3, [r3, #2]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d11c      	bne.n	800bc9c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2206      	movs	r2, #6
 800bc72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	893a      	ldrh	r2, [r7, #8]
 800bc78:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc7a:	893b      	ldrh	r3, [r7, #8]
 800bc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc84:	d104      	bne.n	800bc90 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f240 4209 	movw	r2, #1033	@ 0x409
 800bc8c:	829a      	strh	r2, [r3, #20]
 800bc8e:	e002      	b.n	800bc96 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8b3a      	ldrh	r2, [r7, #24]
 800bc9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bc9c:	8b3b      	ldrh	r3, [r7, #24]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	6879      	ldr	r1, [r7, #4]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fba4 	bl	800c3f0 <USBH_CtlReq>
 800bca8:	4603      	mov	r3, r0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	789b      	ldrb	r3, [r3, #2]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d10f      	bne.n	800bce6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2205      	movs	r2, #5
 800bcd0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bce6:	2200      	movs	r2, #0
 800bce8:	2100      	movs	r1, #0
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fb80 	bl	800c3f0 <USBH_CtlReq>
 800bcf0:	4603      	mov	r3, r0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	789b      	ldrb	r3, [r3, #2]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d10e      	bne.n	800bd2c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2209      	movs	r2, #9
 800bd18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	887a      	ldrh	r2, [r7, #2]
 800bd1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fb5d 	bl	800c3f0 <USBH_CtlReq>
 800bd36:	4603      	mov	r3, r0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d10f      	bne.n	800bd74 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd74:	2200      	movs	r2, #0
 800bd76:	2100      	movs	r1, #0
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fb39 	bl	800c3f0 <USBH_CtlReq>
 800bd7e:	4603      	mov	r3, r0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	789b      	ldrb	r3, [r3, #2]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d10f      	bne.n	800bdbc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fb15 	bl	800c3f0 <USBH_CtlReq>
 800bdc6:	4603      	mov	r3, r0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b087      	sub	sp, #28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	4613      	mov	r3, r2
 800bddc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bde4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e094      	b.n	800bf1e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	781a      	ldrb	r2, [r3, #0]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	785a      	ldrb	r2, [r3, #1]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3302      	adds	r3, #2
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	3303      	adds	r3, #3
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	021b      	lsls	r3, r3, #8
 800be14:	b29b      	uxth	r3, r3
 800be16:	4313      	orrs	r3, r2
 800be18:	b29a      	uxth	r2, r3
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	791a      	ldrb	r2, [r3, #4]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	795a      	ldrb	r2, [r3, #5]
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	799a      	ldrb	r2, [r3, #6]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	79da      	ldrb	r2, [r3, #7]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be44:	2b00      	cmp	r3, #0
 800be46:	d004      	beq.n	800be52 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d11b      	bne.n	800be8a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	79db      	ldrb	r3, [r3, #7]
 800be56:	2b20      	cmp	r3, #32
 800be58:	dc0f      	bgt.n	800be7a <USBH_ParseDevDesc+0xaa>
 800be5a:	2b08      	cmp	r3, #8
 800be5c:	db0f      	blt.n	800be7e <USBH_ParseDevDesc+0xae>
 800be5e:	3b08      	subs	r3, #8
 800be60:	4a32      	ldr	r2, [pc, #200]	@ (800bf2c <USBH_ParseDevDesc+0x15c>)
 800be62:	fa22 f303 	lsr.w	r3, r2, r3
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bf14      	ite	ne
 800be6e:	2301      	movne	r3, #1
 800be70:	2300      	moveq	r3, #0
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <USBH_ParseDevDesc+0xb6>
 800be78:	e001      	b.n	800be7e <USBH_ParseDevDesc+0xae>
 800be7a:	2b40      	cmp	r3, #64	@ 0x40
 800be7c:	d003      	beq.n	800be86 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	2208      	movs	r2, #8
 800be82:	71da      	strb	r2, [r3, #7]
        break;
 800be84:	e000      	b.n	800be88 <USBH_ParseDevDesc+0xb8>
        break;
 800be86:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800be88:	e00e      	b.n	800bea8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be90:	2b02      	cmp	r3, #2
 800be92:	d107      	bne.n	800bea4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	79db      	ldrb	r3, [r3, #7]
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d005      	beq.n	800bea8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2208      	movs	r2, #8
 800bea0:	71da      	strb	r2, [r3, #7]
 800bea2:	e001      	b.n	800bea8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bea4:	2303      	movs	r3, #3
 800bea6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	2b08      	cmp	r3, #8
 800beac:	d936      	bls.n	800bf1c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	3308      	adds	r3, #8
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	3309      	adds	r3, #9
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4313      	orrs	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	330a      	adds	r3, #10
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	330b      	adds	r3, #11
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	b29b      	uxth	r3, r3
 800beda:	4313      	orrs	r3, r2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	330c      	adds	r3, #12
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	330d      	adds	r3, #13
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	021b      	lsls	r3, r3, #8
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	4313      	orrs	r3, r2
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	7b9a      	ldrb	r2, [r3, #14]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	7bda      	ldrb	r2, [r3, #15]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	7c1a      	ldrb	r2, [r3, #16]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	7c5a      	ldrb	r2, [r3, #17]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	371c      	adds	r7, #28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	01000101 	.word	0x01000101

0800bf30 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08c      	sub	sp, #48	@ 0x30
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bf44:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e0de      	b.n	800c120 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b09      	cmp	r3, #9
 800bf6c:	d002      	beq.n	800bf74 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	2209      	movs	r2, #9
 800bf72:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	781a      	ldrb	r2, [r3, #0]
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	785a      	ldrb	r2, [r3, #1]
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	3302      	adds	r3, #2
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3303      	adds	r3, #3
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	021b      	lsls	r3, r3, #8
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9e:	bf28      	it	cs
 800bfa0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	791a      	ldrb	r2, [r3, #4]
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	795a      	ldrb	r2, [r3, #5]
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	799a      	ldrb	r2, [r3, #6]
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	79da      	ldrb	r2, [r3, #7]
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	7a1a      	ldrb	r2, [r3, #8]
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	f240 80a1 	bls.w	800c11c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfda:	2309      	movs	r3, #9
 800bfdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfe2:	e085      	b.n	800c0f0 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfe4:	f107 0316 	add.w	r3, r7, #22
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfec:	f000 f9e6 	bl	800c3bc <USBH_GetNextDesc>
 800bff0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	d17a      	bne.n	800c0f0 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d002      	beq.n	800c008 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	2209      	movs	r2, #9
 800c006:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c00c:	221a      	movs	r2, #26
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	3308      	adds	r3, #8
 800c014:	6a3a      	ldr	r2, [r7, #32]
 800c016:	4413      	add	r3, r2
 800c018:	3302      	adds	r3, #2
 800c01a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c01c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c01e:	69f8      	ldr	r0, [r7, #28]
 800c020:	f000 f882 	bl	800c128 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c02e:	e043      	b.n	800c0b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c030:	f107 0316 	add.w	r3, r7, #22
 800c034:	4619      	mov	r1, r3
 800c036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c038:	f000 f9c0 	bl	800c3bc <USBH_GetNextDesc>
 800c03c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	2b05      	cmp	r3, #5
 800c044:	d138      	bne.n	800c0b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	795b      	ldrb	r3, [r3, #5]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d113      	bne.n	800c076 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c052:	2b02      	cmp	r3, #2
 800c054:	d003      	beq.n	800c05e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	799b      	ldrb	r3, [r3, #6]
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d10b      	bne.n	800c076 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	79db      	ldrb	r3, [r3, #7]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10b      	bne.n	800c07e <USBH_ParseCfgDesc+0x14e>
 800c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b09      	cmp	r3, #9
 800c06c:	d007      	beq.n	800c07e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	2209      	movs	r2, #9
 800c072:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c074:	e003      	b.n	800c07e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c078:	2207      	movs	r2, #7
 800c07a:	701a      	strb	r2, [r3, #0]
 800c07c:	e000      	b.n	800c080 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c07e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c084:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c088:	3201      	adds	r2, #1
 800c08a:	00d2      	lsls	r2, r2, #3
 800c08c:	211a      	movs	r1, #26
 800c08e:	fb01 f303 	mul.w	r3, r1, r3
 800c092:	4413      	add	r3, r2
 800c094:	3308      	adds	r3, #8
 800c096:	6a3a      	ldr	r2, [r7, #32]
 800c098:	4413      	add	r3, r2
 800c09a:	3304      	adds	r3, #4
 800c09c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c09e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0a0:	69b9      	ldr	r1, [r7, #24]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 f86f 	bl	800c186 <USBH_ParseEPDesc>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c0ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d80a      	bhi.n	800c0d6 <USBH_ParseCfgDesc+0x1a6>
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	791b      	ldrb	r3, [r3, #4]
 800c0c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d204      	bcs.n	800c0d6 <USBH_ParseCfgDesc+0x1a6>
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	885a      	ldrh	r2, [r3, #2]
 800c0d0:	8afb      	ldrh	r3, [r7, #22]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d8ac      	bhi.n	800c030 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	791b      	ldrb	r3, [r3, #4]
 800c0da:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d201      	bcs.n	800c0e6 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800c0e2:	2303      	movs	r3, #3
 800c0e4:	e01c      	b.n	800c120 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800c0e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d805      	bhi.n	800c104 <USBH_ParseCfgDesc+0x1d4>
 800c0f8:	6a3b      	ldr	r3, [r7, #32]
 800c0fa:	885a      	ldrh	r2, [r3, #2]
 800c0fc:	8afb      	ldrh	r3, [r7, #22]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	f63f af70 	bhi.w	800bfe4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c104:	6a3b      	ldr	r3, [r7, #32]
 800c106:	791b      	ldrb	r3, [r3, #4]
 800c108:	2b02      	cmp	r3, #2
 800c10a:	bf28      	it	cs
 800c10c:	2302      	movcs	r3, #2
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c114:	429a      	cmp	r2, r3
 800c116:	d201      	bcs.n	800c11c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800c118:	2303      	movs	r3, #3
 800c11a:	e001      	b.n	800c120 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800c11c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c120:	4618      	mov	r0, r3
 800c122:	3730      	adds	r7, #48	@ 0x30
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	781a      	ldrb	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	785a      	ldrb	r2, [r3, #1]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	789a      	ldrb	r2, [r3, #2]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	78da      	ldrb	r2, [r3, #3]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	791a      	ldrb	r2, [r3, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	795a      	ldrb	r2, [r3, #5]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	799a      	ldrb	r2, [r3, #6]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	79da      	ldrb	r2, [r3, #7]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	7a1a      	ldrb	r2, [r3, #8]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	721a      	strb	r2, [r3, #8]
}
 800c17a:	bf00      	nop
 800c17c:	370c      	adds	r7, #12
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr

0800c186 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c186:	b480      	push	{r7}
 800c188:	b087      	sub	sp, #28
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	60f8      	str	r0, [r7, #12]
 800c18e:	60b9      	str	r1, [r7, #8]
 800c190:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	781a      	ldrb	r2, [r3, #0]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	785a      	ldrb	r2, [r3, #1]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	789a      	ldrb	r2, [r3, #2]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	78da      	ldrb	r2, [r3, #3]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3305      	adds	r3, #5
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	021b      	lsls	r3, r3, #8
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	799a      	ldrb	r2, [r3, #6]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	889b      	ldrh	r3, [r3, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d009      	beq.n	800c1f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1e8:	d804      	bhi.n	800c1f4 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1f2:	d901      	bls.n	800c1f8 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d136      	bne.n	800c270 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	78db      	ldrb	r3, [r3, #3]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d108      	bne.n	800c220 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	889b      	ldrh	r3, [r3, #4]
 800c212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c216:	f240 8097 	bls.w	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c21a:	2303      	movs	r3, #3
 800c21c:	75fb      	strb	r3, [r7, #23]
 800c21e:	e093      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	78db      	ldrb	r3, [r3, #3]
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d107      	bne.n	800c23c <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	889b      	ldrh	r3, [r3, #4]
 800c230:	2b40      	cmp	r3, #64	@ 0x40
 800c232:	f240 8089 	bls.w	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c236:	2303      	movs	r3, #3
 800c238:	75fb      	strb	r3, [r7, #23]
 800c23a:	e085      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	78db      	ldrb	r3, [r3, #3]
 800c240:	f003 0303 	and.w	r3, r3, #3
 800c244:	2b01      	cmp	r3, #1
 800c246:	d005      	beq.n	800c254 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	78db      	ldrb	r3, [r3, #3]
 800c24c:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c250:	2b03      	cmp	r3, #3
 800c252:	d10a      	bne.n	800c26a <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	799b      	ldrb	r3, [r3, #6]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d003      	beq.n	800c264 <USBH_ParseEPDesc+0xde>
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	799b      	ldrb	r3, [r3, #6]
 800c260:	2b10      	cmp	r3, #16
 800c262:	d970      	bls.n	800c346 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c264:	2303      	movs	r3, #3
 800c266:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c268:	e06d      	b.n	800c346 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c26a:	2303      	movs	r3, #3
 800c26c:	75fb      	strb	r3, [r7, #23]
 800c26e:	e06b      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c276:	2b01      	cmp	r3, #1
 800c278:	d13c      	bne.n	800c2f4 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	78db      	ldrb	r3, [r3, #3]
 800c27e:	f003 0303 	and.w	r3, r3, #3
 800c282:	2b02      	cmp	r3, #2
 800c284:	d005      	beq.n	800c292 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	78db      	ldrb	r3, [r3, #3]
 800c28a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d106      	bne.n	800c2a0 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	889b      	ldrh	r3, [r3, #4]
 800c296:	2b40      	cmp	r3, #64	@ 0x40
 800c298:	d956      	bls.n	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c29a:	2303      	movs	r3, #3
 800c29c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c29e:	e053      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	78db      	ldrb	r3, [r3, #3]
 800c2a4:	f003 0303 	and.w	r3, r3, #3
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d10e      	bne.n	800c2ca <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	799b      	ldrb	r3, [r3, #6]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d007      	beq.n	800c2c4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c2b8:	2b10      	cmp	r3, #16
 800c2ba:	d803      	bhi.n	800c2c4 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c2c0:	2b40      	cmp	r3, #64	@ 0x40
 800c2c2:	d941      	bls.n	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	75fb      	strb	r3, [r7, #23]
 800c2c8:	e03e      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	78db      	ldrb	r3, [r3, #3]
 800c2ce:	f003 0303 	and.w	r3, r3, #3
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d10b      	bne.n	800c2ee <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	799b      	ldrb	r3, [r3, #6]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d004      	beq.n	800c2e8 <USBH_ParseEPDesc+0x162>
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	889b      	ldrh	r3, [r3, #4]
 800c2e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2e6:	d32f      	bcc.n	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	75fb      	strb	r3, [r7, #23]
 800c2ec:	e02c      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	75fb      	strb	r3, [r7, #23]
 800c2f2:	e029      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d120      	bne.n	800c340 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	78db      	ldrb	r3, [r3, #3]
 800c302:	f003 0303 	and.w	r3, r3, #3
 800c306:	2b00      	cmp	r3, #0
 800c308:	d106      	bne.n	800c318 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	889b      	ldrh	r3, [r3, #4]
 800c30e:	2b08      	cmp	r3, #8
 800c310:	d01a      	beq.n	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c312:	2303      	movs	r3, #3
 800c314:	75fb      	strb	r3, [r7, #23]
 800c316:	e017      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	78db      	ldrb	r3, [r3, #3]
 800c31c:	f003 0303 	and.w	r3, r3, #3
 800c320:	2b03      	cmp	r3, #3
 800c322:	d10a      	bne.n	800c33a <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	799b      	ldrb	r3, [r3, #6]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d003      	beq.n	800c334 <USBH_ParseEPDesc+0x1ae>
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	889b      	ldrh	r3, [r3, #4]
 800c330:	2b08      	cmp	r3, #8
 800c332:	d909      	bls.n	800c348 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c334:	2303      	movs	r3, #3
 800c336:	75fb      	strb	r3, [r7, #23]
 800c338:	e006      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c33a:	2303      	movs	r3, #3
 800c33c:	75fb      	strb	r3, [r7, #23]
 800c33e:	e003      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c340:	2303      	movs	r3, #3
 800c342:	75fb      	strb	r3, [r7, #23]
 800c344:	e000      	b.n	800c348 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c346:	bf00      	nop
  }

  return status;
 800c348:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	371c      	adds	r7, #28
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c356:	b480      	push	{r7}
 800c358:	b087      	sub	sp, #28
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	60b9      	str	r1, [r7, #8]
 800c360:	4613      	mov	r3, r2
 800c362:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	3301      	adds	r3, #1
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d120      	bne.n	800c3b0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	1e9a      	subs	r2, r3, #2
 800c374:	88fb      	ldrh	r3, [r7, #6]
 800c376:	4293      	cmp	r3, r2
 800c378:	bf28      	it	cs
 800c37a:	4613      	movcs	r3, r2
 800c37c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3302      	adds	r3, #2
 800c382:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c384:	2300      	movs	r3, #0
 800c386:	82fb      	strh	r3, [r7, #22]
 800c388:	e00b      	b.n	800c3a2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c38a:	8afb      	ldrh	r3, [r7, #22]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4413      	add	r3, r2
 800c390:	781a      	ldrb	r2, [r3, #0]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	3301      	adds	r3, #1
 800c39a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c39c:	8afb      	ldrh	r3, [r7, #22]
 800c39e:	3302      	adds	r3, #2
 800c3a0:	82fb      	strh	r3, [r7, #22]
 800c3a2:	8afa      	ldrh	r2, [r7, #22]
 800c3a4:	8abb      	ldrh	r3, [r7, #20]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d3ef      	bcc.n	800c38a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	701a      	strb	r2, [r3, #0]
  }
}
 800c3b0:	bf00      	nop
 800c3b2:	371c      	adds	r7, #28
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	7812      	ldrb	r2, [r2, #0]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4413      	add	r3, r2
 800c3e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c3fe:	2301      	movs	r3, #1
 800c400:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	789b      	ldrb	r3, [r3, #2]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d002      	beq.n	800c410 <USBH_CtlReq+0x20>
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d015      	beq.n	800c43a <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800c40e:	e033      	b.n	800c478 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	88fa      	ldrh	r2, [r7, #6]
 800c41a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2201      	movs	r2, #1
 800c420:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2202      	movs	r2, #2
 800c426:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c428:	2301      	movs	r3, #1
 800c42a:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c42c:	2300      	movs	r3, #0
 800c42e:	2200      	movs	r2, #0
 800c430:	2103      	movs	r1, #3
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f7ff fb34 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c438:	e01e      	b.n	800c478 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f000 f822 	bl	800c484 <USBH_HandleControl>
 800c440:	4603      	mov	r3, r0
 800c442:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <USBH_CtlReq+0x60>
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
 800c44c:	2b03      	cmp	r3, #3
 800c44e:	d106      	bne.n	800c45e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2201      	movs	r2, #1
 800c454:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	761a      	strb	r2, [r3, #24]
 800c45c:	e005      	b.n	800c46a <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	2b02      	cmp	r3, #2
 800c462:	d102      	bne.n	800c46a <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2201      	movs	r2, #1
 800c468:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c46a:	2300      	movs	r3, #0
 800c46c:	2200      	movs	r2, #0
 800c46e:	2103      	movs	r1, #3
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f7ff fb15 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c476:	bf00      	nop
  }
  return status;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b086      	sub	sp, #24
 800c488:	af02      	add	r7, sp, #8
 800c48a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c48c:	2301      	movs	r3, #1
 800c48e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c490:	2300      	movs	r3, #0
 800c492:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7e1b      	ldrb	r3, [r3, #24]
 800c498:	3b01      	subs	r3, #1
 800c49a:	2b0a      	cmp	r3, #10
 800c49c:	f200 81b2 	bhi.w	800c804 <USBH_HandleControl+0x380>
 800c4a0:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a8 <USBH_HandleControl+0x24>)
 800c4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a6:	bf00      	nop
 800c4a8:	0800c4d5 	.word	0x0800c4d5
 800c4ac:	0800c4ef 	.word	0x0800c4ef
 800c4b0:	0800c571 	.word	0x0800c571
 800c4b4:	0800c597 	.word	0x0800c597
 800c4b8:	0800c5f5 	.word	0x0800c5f5
 800c4bc:	0800c61f 	.word	0x0800c61f
 800c4c0:	0800c6a1 	.word	0x0800c6a1
 800c4c4:	0800c6c3 	.word	0x0800c6c3
 800c4c8:	0800c725 	.word	0x0800c725
 800c4cc:	0800c74b 	.word	0x0800c74b
 800c4d0:	0800c7ad 	.word	0x0800c7ad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f103 0110 	add.w	r1, r3, #16
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	795b      	ldrb	r3, [r3, #5]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f000 f99f 	bl	800c824 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	761a      	strb	r2, [r3, #24]
      break;
 800c4ec:	e195      	b.n	800c81a <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	795b      	ldrb	r3, [r3, #5]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f005 f843 	bl	8011580 <USBH_LL_GetURBState>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d124      	bne.n	800c54e <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7c1b      	ldrb	r3, [r3, #16]
 800c508:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c50c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	8adb      	ldrh	r3, [r3, #22]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d00a      	beq.n	800c52c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c516:	7b7b      	ldrb	r3, [r7, #13]
 800c518:	2b80      	cmp	r3, #128	@ 0x80
 800c51a:	d103      	bne.n	800c524 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2203      	movs	r2, #3
 800c520:	761a      	strb	r2, [r3, #24]
 800c522:	e00d      	b.n	800c540 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2205      	movs	r2, #5
 800c528:	761a      	strb	r2, [r3, #24]
 800c52a:	e009      	b.n	800c540 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c52c:	7b7b      	ldrb	r3, [r7, #13]
 800c52e:	2b80      	cmp	r3, #128	@ 0x80
 800c530:	d103      	bne.n	800c53a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2209      	movs	r2, #9
 800c536:	761a      	strb	r2, [r3, #24]
 800c538:	e002      	b.n	800c540 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2207      	movs	r2, #7
 800c53e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c540:	2300      	movs	r3, #0
 800c542:	2200      	movs	r2, #0
 800c544:	2103      	movs	r1, #3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff faaa 	bl	800baa0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c54c:	e15c      	b.n	800c808 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	2b04      	cmp	r3, #4
 800c552:	d003      	beq.n	800c55c <USBH_HandleControl+0xd8>
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	2b02      	cmp	r3, #2
 800c558:	f040 8156 	bne.w	800c808 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	220b      	movs	r2, #11
 800c560:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c562:	2300      	movs	r3, #0
 800c564:	2200      	movs	r2, #0
 800c566:	2103      	movs	r1, #3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff fa99 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c56e:	e14b      	b.n	800c808 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c576:	b29a      	uxth	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6899      	ldr	r1, [r3, #8]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	899a      	ldrh	r2, [r3, #12]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	791b      	ldrb	r3, [r3, #4]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f98a 	bl	800c8a2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2204      	movs	r2, #4
 800c592:	761a      	strb	r2, [r3, #24]
      break;
 800c594:	e141      	b.n	800c81a <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	791b      	ldrb	r3, [r3, #4]
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f004 ffef 	bl	8011580 <USBH_LL_GetURBState>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d109      	bne.n	800c5c0 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2209      	movs	r2, #9
 800c5b0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2103      	movs	r1, #3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7ff fa71 	bl	800baa0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c5be:	e125      	b.n	800c80c <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800c5c0:	7bbb      	ldrb	r3, [r7, #14]
 800c5c2:	2b05      	cmp	r3, #5
 800c5c4:	d108      	bne.n	800c5d8 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2103      	movs	r1, #3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fa65 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c5d6:	e119      	b.n	800c80c <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	f040 8116 	bne.w	800c80c <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	220b      	movs	r2, #11
 800c5e4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2103      	movs	r1, #3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff fa57 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c5f2:	e10b      	b.n	800c80c <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6899      	ldr	r1, [r3, #8]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	899a      	ldrh	r2, [r3, #12]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	795b      	ldrb	r3, [r3, #5]
 800c600:	2001      	movs	r0, #1
 800c602:	9000      	str	r0, [sp, #0]
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f927 	bl	800c858 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2206      	movs	r2, #6
 800c61a:	761a      	strb	r2, [r3, #24]
      break;
 800c61c:	e0fd      	b.n	800c81a <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	795b      	ldrb	r3, [r3, #5]
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f004 ffab 	bl	8011580 <USBH_LL_GetURBState>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d109      	bne.n	800c648 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2207      	movs	r2, #7
 800c638:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c63a:	2300      	movs	r3, #0
 800c63c:	2200      	movs	r2, #0
 800c63e:	2103      	movs	r1, #3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fa2d 	bl	800baa0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c646:	e0e3      	b.n	800c810 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800c648:	7bbb      	ldrb	r3, [r7, #14]
 800c64a:	2b05      	cmp	r3, #5
 800c64c:	d10b      	bne.n	800c666 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	220c      	movs	r2, #12
 800c652:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c654:	2303      	movs	r3, #3
 800c656:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c658:	2300      	movs	r3, #0
 800c65a:	2200      	movs	r2, #0
 800c65c:	2103      	movs	r1, #3
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff fa1e 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c664:	e0d4      	b.n	800c810 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d109      	bne.n	800c680 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2205      	movs	r2, #5
 800c670:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c672:	2300      	movs	r3, #0
 800c674:	2200      	movs	r2, #0
 800c676:	2103      	movs	r1, #3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fa11 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c67e:	e0c7      	b.n	800c810 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	2b04      	cmp	r3, #4
 800c684:	f040 80c4 	bne.w	800c810 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	220b      	movs	r2, #11
 800c68c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c68e:	2302      	movs	r3, #2
 800c690:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c692:	2300      	movs	r3, #0
 800c694:	2200      	movs	r2, #0
 800c696:	2103      	movs	r1, #3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff fa01 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c69e:	e0b7      	b.n	800c810 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	791b      	ldrb	r3, [r3, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f8fa 	bl	800c8a2 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2208      	movs	r2, #8
 800c6be:	761a      	strb	r2, [r3, #24]

      break;
 800c6c0:	e0ab      	b.n	800c81a <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	791b      	ldrb	r3, [r3, #4]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f004 ff59 	bl	8011580 <USBH_LL_GetURBState>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d10b      	bne.n	800c6f0 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	220d      	movs	r2, #13
 800c6dc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2103      	movs	r1, #3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7ff f9d9 	bl	800baa0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c6ee:	e091      	b.n	800c814 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800c6f0:	7bbb      	ldrb	r3, [r7, #14]
 800c6f2:	2b04      	cmp	r3, #4
 800c6f4:	d109      	bne.n	800c70a <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	220b      	movs	r2, #11
 800c6fa:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2200      	movs	r2, #0
 800c700:	2103      	movs	r1, #3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f7ff f9cc 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c708:	e084      	b.n	800c814 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800c70a:	7bbb      	ldrb	r3, [r7, #14]
 800c70c:	2b05      	cmp	r3, #5
 800c70e:	f040 8081 	bne.w	800c814 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800c712:	2303      	movs	r3, #3
 800c714:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c716:	2300      	movs	r3, #0
 800c718:	2200      	movs	r2, #0
 800c71a:	2103      	movs	r1, #3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff f9bf 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c722:	e077      	b.n	800c814 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	795b      	ldrb	r3, [r3, #5]
 800c728:	2201      	movs	r2, #1
 800c72a:	9200      	str	r2, [sp, #0]
 800c72c:	2200      	movs	r2, #0
 800c72e:	2100      	movs	r1, #0
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f891 	bl	800c858 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	220a      	movs	r2, #10
 800c746:	761a      	strb	r2, [r3, #24]
      break;
 800c748:	e067      	b.n	800c81a <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	795b      	ldrb	r3, [r3, #5]
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f004 ff15 	bl	8011580 <USBH_LL_GetURBState>
 800c756:	4603      	mov	r3, r0
 800c758:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c75a:	7bbb      	ldrb	r3, [r7, #14]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d10b      	bne.n	800c778 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	220d      	movs	r2, #13
 800c768:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c76a:	2300      	movs	r3, #0
 800c76c:	2200      	movs	r2, #0
 800c76e:	2103      	movs	r1, #3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff f995 	bl	800baa0 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c776:	e04f      	b.n	800c818 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d109      	bne.n	800c792 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2209      	movs	r2, #9
 800c782:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c784:	2300      	movs	r3, #0
 800c786:	2200      	movs	r2, #0
 800c788:	2103      	movs	r1, #3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff f988 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c790:	e042      	b.n	800c818 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	2b04      	cmp	r3, #4
 800c796:	d13f      	bne.n	800c818 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	220b      	movs	r2, #11
 800c79c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c79e:	2300      	movs	r3, #0
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2103      	movs	r1, #3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff f97b 	bl	800baa0 <USBH_OS_PutMessage>
      break;
 800c7aa:	e035      	b.n	800c818 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7e5b      	ldrb	r3, [r3, #25]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	b2da      	uxtb	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	765a      	strb	r2, [r3, #25]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	7e5b      	ldrb	r3, [r3, #25]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d806      	bhi.n	800c7ce <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c7cc:	e025      	b.n	800c81a <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7d4:	2106      	movs	r1, #6
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	795b      	ldrb	r3, [r3, #5]
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f90c 	bl	800ca04 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	791b      	ldrb	r3, [r3, #4]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f906 	bl	800ca04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c7fe:	2302      	movs	r3, #2
 800c800:	73fb      	strb	r3, [r7, #15]
      break;
 800c802:	e00a      	b.n	800c81a <USBH_HandleControl+0x396>

    default:
      break;
 800c804:	bf00      	nop
 800c806:	e008      	b.n	800c81a <USBH_HandleControl+0x396>
      break;
 800c808:	bf00      	nop
 800c80a:	e006      	b.n	800c81a <USBH_HandleControl+0x396>
      break;
 800c80c:	bf00      	nop
 800c80e:	e004      	b.n	800c81a <USBH_HandleControl+0x396>
      break;
 800c810:	bf00      	nop
 800c812:	e002      	b.n	800c81a <USBH_HandleControl+0x396>
      break;
 800c814:	bf00      	nop
 800c816:	e000      	b.n	800c81a <USBH_HandleControl+0x396>
      break;
 800c818:	bf00      	nop
  }

  return status;
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af04      	add	r7, sp, #16
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	4613      	mov	r3, r2
 800c830:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c832:	79f9      	ldrb	r1, [r7, #7]
 800c834:	2300      	movs	r3, #0
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	2308      	movs	r3, #8
 800c83a:	9302      	str	r3, [sp, #8]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	2300      	movs	r3, #0
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	2300      	movs	r3, #0
 800c846:	2200      	movs	r2, #0
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f004 fe68 	bl	801151e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af04      	add	r7, sp, #16
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4611      	mov	r1, r2
 800c864:	461a      	mov	r2, r3
 800c866:	460b      	mov	r3, r1
 800c868:	80fb      	strh	r3, [r7, #6]
 800c86a:	4613      	mov	r3, r2
 800c86c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c87c:	7979      	ldrb	r1, [r7, #5]
 800c87e:	7e3b      	ldrb	r3, [r7, #24]
 800c880:	9303      	str	r3, [sp, #12]
 800c882:	88fb      	ldrh	r3, [r7, #6]
 800c884:	9302      	str	r3, [sp, #8]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	9301      	str	r3, [sp, #4]
 800c88a:	2301      	movs	r3, #1
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	2300      	movs	r3, #0
 800c890:	2200      	movs	r2, #0
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f004 fe43 	bl	801151e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b088      	sub	sp, #32
 800c8a6:	af04      	add	r7, sp, #16
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	80fb      	strh	r3, [r7, #6]
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c8b8:	7979      	ldrb	r1, [r7, #5]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	9303      	str	r3, [sp, #12]
 800c8be:	88fb      	ldrh	r3, [r7, #6]
 800c8c0:	9302      	str	r3, [sp, #8]
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	9301      	str	r3, [sp, #4]
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	9300      	str	r3, [sp, #0]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f004 fe25 	bl	801151e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c8d4:	2300      	movs	r3, #0

}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b088      	sub	sp, #32
 800c8e2:	af04      	add	r7, sp, #16
 800c8e4:	60f8      	str	r0, [r7, #12]
 800c8e6:	60b9      	str	r1, [r7, #8]
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	80fb      	strh	r3, [r7, #6]
 800c8f0:	4613      	mov	r3, r2
 800c8f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c8fe:	2300      	movs	r3, #0
 800c900:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c902:	7979      	ldrb	r1, [r7, #5]
 800c904:	7e3b      	ldrb	r3, [r7, #24]
 800c906:	9303      	str	r3, [sp, #12]
 800c908:	88fb      	ldrh	r3, [r7, #6]
 800c90a:	9302      	str	r3, [sp, #8]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	9301      	str	r3, [sp, #4]
 800c910:	2301      	movs	r3, #1
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	2302      	movs	r3, #2
 800c916:	2200      	movs	r2, #0
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f004 fe00 	bl	801151e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af04      	add	r7, sp, #16
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4611      	mov	r1, r2
 800c934:	461a      	mov	r2, r3
 800c936:	460b      	mov	r3, r1
 800c938:	80fb      	strh	r3, [r7, #6]
 800c93a:	4613      	mov	r3, r2
 800c93c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c93e:	7979      	ldrb	r1, [r7, #5]
 800c940:	2300      	movs	r3, #0
 800c942:	9303      	str	r3, [sp, #12]
 800c944:	88fb      	ldrh	r3, [r7, #6]
 800c946:	9302      	str	r3, [sp, #8]
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	9301      	str	r3, [sp, #4]
 800c94c:	2301      	movs	r3, #1
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	2302      	movs	r3, #2
 800c952:	2201      	movs	r2, #1
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f004 fde2 	bl	801151e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c95a:	2300      	movs	r3, #0
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af04      	add	r7, sp, #16
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	4608      	mov	r0, r1
 800c96e:	4611      	mov	r1, r2
 800c970:	461a      	mov	r2, r3
 800c972:	4603      	mov	r3, r0
 800c974:	70fb      	strb	r3, [r7, #3]
 800c976:	460b      	mov	r3, r1
 800c978:	70bb      	strb	r3, [r7, #2]
 800c97a:	4613      	mov	r3, r2
 800c97c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c97e:	7878      	ldrb	r0, [r7, #1]
 800c980:	78ba      	ldrb	r2, [r7, #2]
 800c982:	78f9      	ldrb	r1, [r7, #3]
 800c984:	8b3b      	ldrh	r3, [r7, #24]
 800c986:	9302      	str	r3, [sp, #8]
 800c988:	7d3b      	ldrb	r3, [r7, #20]
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	7c3b      	ldrb	r3, [r7, #16]
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	4603      	mov	r3, r0
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f004 fd75 	bl	8011482 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b082      	sub	sp, #8
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c9ae:	78fb      	ldrb	r3, [r7, #3]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f004 fd94 	bl	80114e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b084      	sub	sp, #16
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 f836 	bl	800ca40 <USBH_GetFreePipe>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c9d8:	89fb      	ldrh	r3, [r7, #14]
 800c9da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00a      	beq.n	800c9f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c9e2:	78fa      	ldrb	r2, [r7, #3]
 800c9e4:	89fb      	ldrh	r3, [r7, #14]
 800c9e6:	f003 030f 	and.w	r3, r3, #15
 800c9ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9ee:	6879      	ldr	r1, [r7, #4]
 800c9f0:	33e0      	adds	r3, #224	@ 0xe0
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	440b      	add	r3, r1
 800c9f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c9f8:	89fb      	ldrh	r3, [r7, #14]
 800c9fa:	b2db      	uxtb	r3, r3
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ca10:	78fb      	ldrb	r3, [r7, #3]
 800ca12:	2b0f      	cmp	r3, #15
 800ca14:	d80d      	bhi.n	800ca32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca16:	78fb      	ldrb	r3, [r7, #3]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	33e0      	adds	r3, #224	@ 0xe0
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	685a      	ldr	r2, [r3, #4]
 800ca22:	78fb      	ldrb	r3, [r7, #3]
 800ca24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	33e0      	adds	r3, #224	@ 0xe0
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	440b      	add	r3, r1
 800ca30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]
 800ca50:	e00f      	b.n	800ca72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	33e0      	adds	r3, #224	@ 0xe0
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d102      	bne.n	800ca6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	e007      	b.n	800ca7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	73fb      	strb	r3, [r7, #15]
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	2b0f      	cmp	r3, #15
 800ca76:	d9ec      	bls.n	800ca52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ca78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <__NVIC_SetPriority>:
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	4603      	mov	r3, r0
 800ca90:	6039      	str	r1, [r7, #0]
 800ca92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	db0a      	blt.n	800cab2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	490c      	ldr	r1, [pc, #48]	@ (800cad4 <__NVIC_SetPriority+0x4c>)
 800caa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caa6:	0112      	lsls	r2, r2, #4
 800caa8:	b2d2      	uxtb	r2, r2
 800caaa:	440b      	add	r3, r1
 800caac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cab0:	e00a      	b.n	800cac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	4908      	ldr	r1, [pc, #32]	@ (800cad8 <__NVIC_SetPriority+0x50>)
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	f003 030f 	and.w	r3, r3, #15
 800cabe:	3b04      	subs	r3, #4
 800cac0:	0112      	lsls	r2, r2, #4
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	440b      	add	r3, r1
 800cac6:	761a      	strb	r2, [r3, #24]
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr
 800cad4:	e000e100 	.word	0xe000e100
 800cad8:	e000ed00 	.word	0xe000ed00

0800cadc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cadc:	b580      	push	{r7, lr}
 800cade:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cae0:	4b05      	ldr	r3, [pc, #20]	@ (800caf8 <SysTick_Handler+0x1c>)
 800cae2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cae4:	f002 ff78 	bl	800f9d8 <xTaskGetSchedulerState>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b01      	cmp	r3, #1
 800caec:	d001      	beq.n	800caf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800caee:	f004 f873 	bl	8010bd8 <xPortSysTickHandler>
  }
}
 800caf2:	bf00      	nop
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	e000e010 	.word	0xe000e010

0800cafc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cafc:	b580      	push	{r7, lr}
 800cafe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb00:	2100      	movs	r1, #0
 800cb02:	f06f 0004 	mvn.w	r0, #4
 800cb06:	f7ff ffbf 	bl	800ca88 <__NVIC_SetPriority>
#endif
}
 800cb0a:	bf00      	nop
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb16:	f3ef 8305 	mrs	r3, IPSR
 800cb1a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cb22:	f06f 0305 	mvn.w	r3, #5
 800cb26:	607b      	str	r3, [r7, #4]
 800cb28:	e00c      	b.n	800cb44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb54 <osKernelInitialize+0x44>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d105      	bne.n	800cb3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb32:	4b08      	ldr	r3, [pc, #32]	@ (800cb54 <osKernelInitialize+0x44>)
 800cb34:	2201      	movs	r2, #1
 800cb36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	607b      	str	r3, [r7, #4]
 800cb3c:	e002      	b.n	800cb44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb44:	687b      	ldr	r3, [r7, #4]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	370c      	adds	r7, #12
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	20000e34 	.word	0x20000e34

0800cb58 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d005      	beq.n	800cb76 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	4a0c      	ldr	r2, [pc, #48]	@ (800cba0 <osKernelGetInfo+0x48>)
 800cb6e:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	4a0b      	ldr	r2, [pc, #44]	@ (800cba0 <osKernelGetInfo+0x48>)
 800cb74:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00c      	beq.n	800cb96 <osKernelGetInfo+0x3e>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d009      	beq.n	800cb96 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b11      	cmp	r3, #17
 800cb86:	d901      	bls.n	800cb8c <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800cb88:	2311      	movs	r3, #17
 800cb8a:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	4905      	ldr	r1, [pc, #20]	@ (800cba4 <osKernelGetInfo+0x4c>)
 800cb90:	68b8      	ldr	r0, [r7, #8]
 800cb92:	f006 fc04 	bl	801339e <memcpy>
  }

  return (osOK);
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	05f5f531 	.word	0x05f5f531
 800cba4:	08016588 	.word	0x08016588

0800cba8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbae:	f3ef 8305 	mrs	r3, IPSR
 800cbb2:	603b      	str	r3, [r7, #0]
  return(result);
 800cbb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d003      	beq.n	800cbc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cbba:	f06f 0305 	mvn.w	r3, #5
 800cbbe:	607b      	str	r3, [r7, #4]
 800cbc0:	e010      	b.n	800cbe4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf0 <osKernelStart+0x48>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d109      	bne.n	800cbde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbca:	f7ff ff97 	bl	800cafc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbce:	4b08      	ldr	r3, [pc, #32]	@ (800cbf0 <osKernelStart+0x48>)
 800cbd0:	2202      	movs	r2, #2
 800cbd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbd4:	f002 f888 	bl	800ece8 <vTaskStartScheduler>
      stat = osOK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	607b      	str	r3, [r7, #4]
 800cbdc:	e002      	b.n	800cbe4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cbde:	f04f 33ff 	mov.w	r3, #4294967295
 800cbe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbe4:	687b      	ldr	r3, [r7, #4]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000e34 	.word	0x20000e34

0800cbf4 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800cbf4:	b480      	push	{r7}
 800cbf6:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800cbf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc04:	4770      	bx	lr
	...

0800cc08 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800cc0c:	4b03      	ldr	r3, [pc, #12]	@ (800cc1c <osKernelGetSysTimerFreq+0x14>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	46bd      	mov	sp, r7
 800cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	20000264 	.word	0x20000264

0800cc20 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08e      	sub	sp, #56	@ 0x38
 800cc24:	af04      	add	r7, sp, #16
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc30:	f3ef 8305 	mrs	r3, IPSR
 800cc34:	617b      	str	r3, [r7, #20]
  return(result);
 800cc36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d17e      	bne.n	800cd3a <osThreadNew+0x11a>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d07b      	beq.n	800cd3a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc42:	2380      	movs	r3, #128	@ 0x80
 800cc44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc46:	2318      	movs	r3, #24
 800cc48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d045      	beq.n	800cce6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <osThreadNew+0x48>
        name = attr->name;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	699b      	ldr	r3, [r3, #24]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d002      	beq.n	800cc76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d008      	beq.n	800cc8e <osThreadNew+0x6e>
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	2b38      	cmp	r3, #56	@ 0x38
 800cc80:	d805      	bhi.n	800cc8e <osThreadNew+0x6e>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	f003 0301 	and.w	r3, r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <osThreadNew+0x72>
        return (NULL);
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e054      	b.n	800cd3c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	695b      	ldr	r3, [r3, #20]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	089b      	lsrs	r3, r3, #2
 800cca0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00e      	beq.n	800ccc8 <osThreadNew+0xa8>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68db      	ldr	r3, [r3, #12]
 800ccae:	2ba7      	cmp	r3, #167	@ 0xa7
 800ccb0:	d90a      	bls.n	800ccc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d006      	beq.n	800ccc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	695b      	ldr	r3, [r3, #20]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d002      	beq.n	800ccc8 <osThreadNew+0xa8>
        mem = 1;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	61bb      	str	r3, [r7, #24]
 800ccc6:	e010      	b.n	800ccea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10c      	bne.n	800ccea <osThreadNew+0xca>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d108      	bne.n	800ccea <osThreadNew+0xca>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	691b      	ldr	r3, [r3, #16]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d104      	bne.n	800ccea <osThreadNew+0xca>
          mem = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	e001      	b.n	800ccea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d110      	bne.n	800cd12 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccf8:	9202      	str	r2, [sp, #8]
 800ccfa:	9301      	str	r3, [sp, #4]
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	6a3a      	ldr	r2, [r7, #32]
 800cd04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f001 fb78 	bl	800e3fc <xTaskCreateStatic>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	613b      	str	r3, [r7, #16]
 800cd10:	e013      	b.n	800cd3a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d110      	bne.n	800cd3a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd18:	6a3b      	ldr	r3, [r7, #32]
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	f107 0310 	add.w	r3, r7, #16
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f001 fbc6 	bl	800e4bc <xTaskCreate>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d001      	beq.n	800cd3a <osThreadNew+0x11a>
            hTask = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd3a:	693b      	ldr	r3, [r7, #16]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3728      	adds	r7, #40	@ 0x28
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd4c:	f3ef 8305 	mrs	r3, IPSR
 800cd50:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd52:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <osDelay+0x1c>
    stat = osErrorISR;
 800cd58:	f06f 0305 	mvn.w	r3, #5
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	e007      	b.n	800cd70 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f001 fd78 	bl	800e860 <vTaskDelay>
    }
  }

  return (stat);
 800cd70:	68fb      	ldr	r3, [r7, #12]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b08a      	sub	sp, #40	@ 0x28
 800cd7e:	af02      	add	r7, sp, #8
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd8a:	f3ef 8305 	mrs	r3, IPSR
 800cd8e:	613b      	str	r3, [r7, #16]
  return(result);
 800cd90:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d15f      	bne.n	800ce56 <osMessageQueueNew+0xdc>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d05c      	beq.n	800ce56 <osMessageQueueNew+0xdc>
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d059      	beq.n	800ce56 <osMessageQueueNew+0xdc>
    mem = -1;
 800cda2:	f04f 33ff 	mov.w	r3, #4294967295
 800cda6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d029      	beq.n	800ce02 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d012      	beq.n	800cddc <osMessageQueueNew+0x62>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdbc:	d90e      	bls.n	800cddc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00a      	beq.n	800cddc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	695a      	ldr	r2, [r3, #20]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	68b9      	ldr	r1, [r7, #8]
 800cdce:	fb01 f303 	mul.w	r3, r1, r3
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d302      	bcc.n	800cddc <osMessageQueueNew+0x62>
        mem = 1;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	61bb      	str	r3, [r7, #24]
 800cdda:	e014      	b.n	800ce06 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d110      	bne.n	800ce06 <osMessageQueueNew+0x8c>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10c      	bne.n	800ce06 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d108      	bne.n	800ce06 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <osMessageQueueNew+0x8c>
          mem = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	61bb      	str	r3, [r7, #24]
 800ce00:	e001      	b.n	800ce06 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d10b      	bne.n	800ce24 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	691a      	ldr	r2, [r3, #16]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	689b      	ldr	r3, [r3, #8]
 800ce14:	2100      	movs	r1, #0
 800ce16:	9100      	str	r1, [sp, #0]
 800ce18:	68b9      	ldr	r1, [r7, #8]
 800ce1a:	68f8      	ldr	r0, [r7, #12]
 800ce1c:	f000 fc22 	bl	800d664 <xQueueGenericCreateStatic>
 800ce20:	61f8      	str	r0, [r7, #28]
 800ce22:	e008      	b.n	800ce36 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d105      	bne.n	800ce36 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	68b9      	ldr	r1, [r7, #8]
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	f000 fc95 	bl	800d75e <xQueueGenericCreate>
 800ce34:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00c      	beq.n	800ce56 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d003      	beq.n	800ce4a <osMessageQueueNew+0xd0>
        name = attr->name;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	617b      	str	r3, [r7, #20]
 800ce48:	e001      	b.n	800ce4e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ce4e:	6979      	ldr	r1, [r7, #20]
 800ce50:	69f8      	ldr	r0, [r7, #28]
 800ce52:	f001 fa75 	bl	800e340 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce56:	69fb      	ldr	r3, [r7, #28]
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3720      	adds	r7, #32
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}

0800ce60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b088      	sub	sp, #32
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	60f8      	str	r0, [r7, #12]
 800ce68:	60b9      	str	r1, [r7, #8]
 800ce6a:	603b      	str	r3, [r7, #0]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce78:	f3ef 8305 	mrs	r3, IPSR
 800ce7c:	617b      	str	r3, [r7, #20]
  return(result);
 800ce7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d028      	beq.n	800ced6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d005      	beq.n	800ce96 <osMessageQueuePut+0x36>
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d002      	beq.n	800ce96 <osMessageQueuePut+0x36>
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d003      	beq.n	800ce9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ce96:	f06f 0303 	mvn.w	r3, #3
 800ce9a:	61fb      	str	r3, [r7, #28]
 800ce9c:	e038      	b.n	800cf10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cea2:	f107 0210 	add.w	r2, r7, #16
 800cea6:	2300      	movs	r3, #0
 800cea8:	68b9      	ldr	r1, [r7, #8]
 800ceaa:	69b8      	ldr	r0, [r7, #24]
 800ceac:	f000 fdea 	bl	800da84 <xQueueGenericSendFromISR>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d003      	beq.n	800cebe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ceb6:	f06f 0302 	mvn.w	r3, #2
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	e028      	b.n	800cf10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d025      	beq.n	800cf10 <osMessageQueuePut+0xb0>
 800cec4:	4b15      	ldr	r3, [pc, #84]	@ (800cf1c <osMessageQueuePut+0xbc>)
 800cec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	e01c      	b.n	800cf10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <osMessageQueuePut+0x82>
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d103      	bne.n	800ceea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cee2:	f06f 0303 	mvn.w	r3, #3
 800cee6:	61fb      	str	r3, [r7, #28]
 800cee8:	e012      	b.n	800cf10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ceea:	2300      	movs	r3, #0
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	68b9      	ldr	r1, [r7, #8]
 800cef0:	69b8      	ldr	r0, [r7, #24]
 800cef2:	f000 fcc5 	bl	800d880 <xQueueGenericSend>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d009      	beq.n	800cf10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cf02:	f06f 0301 	mvn.w	r3, #1
 800cf06:	61fb      	str	r3, [r7, #28]
 800cf08:	e002      	b.n	800cf10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cf0a:	f06f 0302 	mvn.w	r3, #2
 800cf0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf10:	69fb      	ldr	r3, [r7, #28]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3720      	adds	r7, #32
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	e000ed04 	.word	0xe000ed04

0800cf20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b088      	sub	sp, #32
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
 800cf2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf36:	f3ef 8305 	mrs	r3, IPSR
 800cf3a:	617b      	str	r3, [r7, #20]
  return(result);
 800cf3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d028      	beq.n	800cf94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d005      	beq.n	800cf54 <osMessageQueueGet+0x34>
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d002      	beq.n	800cf54 <osMessageQueueGet+0x34>
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cf54:	f06f 0303 	mvn.w	r3, #3
 800cf58:	61fb      	str	r3, [r7, #28]
 800cf5a:	e037      	b.n	800cfcc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cf60:	f107 0310 	add.w	r3, r7, #16
 800cf64:	461a      	mov	r2, r3
 800cf66:	68b9      	ldr	r1, [r7, #8]
 800cf68:	69b8      	ldr	r0, [r7, #24]
 800cf6a:	f001 f81b 	bl	800dfa4 <xQueueReceiveFromISR>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d003      	beq.n	800cf7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf74:	f06f 0302 	mvn.w	r3, #2
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	e027      	b.n	800cfcc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d024      	beq.n	800cfcc <osMessageQueueGet+0xac>
 800cf82:	4b15      	ldr	r3, [pc, #84]	@ (800cfd8 <osMessageQueueGet+0xb8>)
 800cf84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	e01b      	b.n	800cfcc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d002      	beq.n	800cfa0 <osMessageQueueGet+0x80>
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cfa0:	f06f 0303 	mvn.w	r3, #3
 800cfa4:	61fb      	str	r3, [r7, #28]
 800cfa6:	e011      	b.n	800cfcc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfa8:	683a      	ldr	r2, [r7, #0]
 800cfaa:	68b9      	ldr	r1, [r7, #8]
 800cfac:	69b8      	ldr	r0, [r7, #24]
 800cfae:	f000 fe07 	bl	800dbc0 <xQueueReceive>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d009      	beq.n	800cfcc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d003      	beq.n	800cfc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cfbe:	f06f 0301 	mvn.w	r3, #1
 800cfc2:	61fb      	str	r3, [r7, #28]
 800cfc4:	e002      	b.n	800cfcc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cfc6:	f06f 0302 	mvn.w	r3, #2
 800cfca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfcc:	69fb      	ldr	r3, [r7, #28]
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3720      	adds	r7, #32
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	e000ed04 	.word	0xe000ed04

0800cfdc <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b08a      	sub	sp, #40	@ 0x28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d102      	bne.n	800cff4 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cff2:	e023      	b.n	800d03c <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cff4:	f3ef 8305 	mrs	r3, IPSR
 800cff8:	61bb      	str	r3, [r7, #24]
  return(result);
 800cffa:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d019      	beq.n	800d034 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d000:	f3ef 8211 	mrs	r2, BASEPRI
 800d004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d008:	f383 8811 	msr	BASEPRI, r3
 800d00c:	f3bf 8f6f 	isb	sy
 800d010:	f3bf 8f4f 	dsb	sy
 800d014:	613a      	str	r2, [r7, #16]
 800d016:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d018:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d01a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d020:	6a3b      	ldr	r3, [r7, #32]
 800d022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	627b      	str	r3, [r7, #36]	@ 0x24
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d032:	e003      	b.n	800d03c <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d034:	6a38      	ldr	r0, [r7, #32]
 800d036:	f001 f837 	bl	800e0a8 <uxQueueSpacesAvailable>
 800d03a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800d03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3728      	adds	r7, #40	@ 0x28
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
	...

0800d048 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d048:	b480      	push	{r7}
 800d04a:	b085      	sub	sp, #20
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	4a07      	ldr	r2, [pc, #28]	@ (800d074 <vApplicationGetIdleTaskMemory+0x2c>)
 800d058:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	4a06      	ldr	r2, [pc, #24]	@ (800d078 <vApplicationGetIdleTaskMemory+0x30>)
 800d05e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2280      	movs	r2, #128	@ 0x80
 800d064:	601a      	str	r2, [r3, #0]
}
 800d066:	bf00      	nop
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	20000e38 	.word	0x20000e38
 800d078:	20000ee0 	.word	0x20000ee0

0800d07c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	4a07      	ldr	r2, [pc, #28]	@ (800d0a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800d08c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	4a06      	ldr	r2, [pc, #24]	@ (800d0ac <vApplicationGetTimerTaskMemory+0x30>)
 800d092:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d09a:	601a      	str	r2, [r3, #0]
}
 800d09c:	bf00      	nop
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	200010e0 	.word	0x200010e0
 800d0ac:	20001188 	.word	0x20001188

0800d0b0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d0b6:	2020      	movs	r0, #32
 800d0b8:	f003 fe20 	bl	8010cfc <pvPortMalloc>
 800d0bc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00a      	beq.n	800d0da <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 f9aa 	bl	800d428 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d0da:	687b      	ldr	r3, [r7, #4]
	}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b090      	sub	sp, #64	@ 0x40
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10b      	bne.n	800d11c <xEventGroupWaitBits+0x38>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	623b      	str	r3, [r7, #32]
}
 800d116:	bf00      	nop
 800d118:	bf00      	nop
 800d11a:	e7fd      	b.n	800d118 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d122:	d30b      	bcc.n	800d13c <xEventGroupWaitBits+0x58>
	__asm volatile
 800d124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	61fb      	str	r3, [r7, #28]
}
 800d136:	bf00      	nop
 800d138:	bf00      	nop
 800d13a:	e7fd      	b.n	800d138 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d10b      	bne.n	800d15a <xEventGroupWaitBits+0x76>
	__asm volatile
 800d142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	61bb      	str	r3, [r7, #24]
}
 800d154:	bf00      	nop
 800d156:	bf00      	nop
 800d158:	e7fd      	b.n	800d156 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d15a:	f002 fc3d 	bl	800f9d8 <xTaskGetSchedulerState>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d102      	bne.n	800d16a <xEventGroupWaitBits+0x86>
 800d164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <xEventGroupWaitBits+0x8a>
 800d16a:	2301      	movs	r3, #1
 800d16c:	e000      	b.n	800d170 <xEventGroupWaitBits+0x8c>
 800d16e:	2300      	movs	r3, #0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10b      	bne.n	800d18c <xEventGroupWaitBits+0xa8>
	__asm volatile
 800d174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d178:	f383 8811 	msr	BASEPRI, r3
 800d17c:	f3bf 8f6f 	isb	sy
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	617b      	str	r3, [r7, #20]
}
 800d186:	bf00      	nop
 800d188:	bf00      	nop
 800d18a:	e7fd      	b.n	800d188 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800d18c:	f001 fe1c 	bl	800edc8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d196:	683a      	ldr	r2, [r7, #0]
 800d198:	68b9      	ldr	r1, [r7, #8]
 800d19a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d19c:	f000 f90d 	bl	800d3ba <prvTestWaitCondition>
 800d1a0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800d1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00e      	beq.n	800d1c6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d028      	beq.n	800d208 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	43db      	mvns	r3, r3
 800d1be:	401a      	ands	r2, r3
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e020      	b.n	800d208 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d1c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d104      	bne.n	800d1d6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1d4:	e018      	b.n	800d208 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d1e2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d1f0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f4:	1d18      	adds	r0, r3, #4
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1fe:	4619      	mov	r1, r3
 800d200:	f002 f8b8 	bl	800f374 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d208:	f001 fdec 	bl	800ede4 <xTaskResumeAll>
 800d20c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d20e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d210:	2b00      	cmp	r3, #0
 800d212:	d031      	beq.n	800d278 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800d214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d216:	2b00      	cmp	r3, #0
 800d218:	d107      	bne.n	800d22a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800d21a:	4b1a      	ldr	r3, [pc, #104]	@ (800d284 <xEventGroupWaitBits+0x1a0>)
 800d21c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d22a:	f002 fd4f 	bl	800fccc <uxTaskResetEventItemValue>
 800d22e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d11a      	bne.n	800d270 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800d23a:	f003 fc3d 	bl	8010ab8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	68b9      	ldr	r1, [r7, #8]
 800d248:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d24a:	f000 f8b6 	bl	800d3ba <prvTestWaitCondition>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d009      	beq.n	800d268 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d006      	beq.n	800d268 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	43db      	mvns	r3, r3
 800d262:	401a      	ands	r2, r3
 800d264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d266:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d268:	2301      	movs	r3, #1
 800d26a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800d26c:	f003 fc56 	bl	8010b1c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d272:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3740      	adds	r7, #64	@ 0x40
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	e000ed04 	.word	0xe000ed04

0800d288 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b08e      	sub	sp, #56	@ 0x38
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d292:	2300      	movs	r3, #0
 800d294:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800d29a:	2300      	movs	r3, #0
 800d29c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d10b      	bne.n	800d2bc <xEventGroupSetBits+0x34>
	__asm volatile
 800d2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a8:	f383 8811 	msr	BASEPRI, r3
 800d2ac:	f3bf 8f6f 	isb	sy
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	613b      	str	r3, [r7, #16]
}
 800d2b6:	bf00      	nop
 800d2b8:	bf00      	nop
 800d2ba:	e7fd      	b.n	800d2b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2c2:	d30b      	bcc.n	800d2dc <xEventGroupSetBits+0x54>
	__asm volatile
 800d2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	60fb      	str	r3, [r7, #12]
}
 800d2d6:	bf00      	nop
 800d2d8:	bf00      	nop
 800d2da:	e7fd      	b.n	800d2d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2de:	3304      	adds	r3, #4
 800d2e0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d2e8:	f001 fd6e 	bl	800edc8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	431a      	orrs	r2, r3
 800d2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d2fe:	e03c      	b.n	800d37a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d302:	685b      	ldr	r3, [r3, #4]
 800d304:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d30c:	2300      	movs	r3, #0
 800d30e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d316:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d31e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d326:	2b00      	cmp	r3, #0
 800d328:	d108      	bne.n	800d33c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	69bb      	ldr	r3, [r7, #24]
 800d330:	4013      	ands	r3, r2
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00b      	beq.n	800d34e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800d336:	2301      	movs	r3, #1
 800d338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d33a:	e008      	b.n	800d34e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	69bb      	ldr	r3, [r7, #24]
 800d342:	4013      	ands	r3, r2
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	429a      	cmp	r2, r3
 800d348:	d101      	bne.n	800d34e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d34a:	2301      	movs	r3, #1
 800d34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d350:	2b00      	cmp	r3, #0
 800d352:	d010      	beq.n	800d376 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	4313      	orrs	r3, r2
 800d364:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d36e:	4619      	mov	r1, r3
 800d370:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d372:	f002 f8cd 	bl	800f510 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800d37a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d37c:	6a3b      	ldr	r3, [r7, #32]
 800d37e:	429a      	cmp	r2, r3
 800d380:	d1be      	bne.n	800d300 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d388:	43db      	mvns	r3, r3
 800d38a:	401a      	ands	r2, r3
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d390:	f001 fd28 	bl	800ede4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d396:	681b      	ldr	r3, [r3, #0]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3738      	adds	r7, #56	@ 0x38
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7ff ff6b 	bl	800d288 <xEventGroupSetBits>
}
 800d3b2:	bf00      	nop
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b087      	sub	sp, #28
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d107      	bne.n	800d3e0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00a      	beq.n	800d3f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	617b      	str	r3, [r7, #20]
 800d3de:	e007      	b.n	800d3f0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d101      	bne.n	800d3f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d3f0:	697b      	ldr	r3, [r7, #20]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	371c      	adds	r7, #28
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr
	...

0800d400 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	68f9      	ldr	r1, [r7, #12]
 800d412:	4804      	ldr	r0, [pc, #16]	@ (800d424 <xEventGroupSetBitsFromISR+0x24>)
 800d414:	f003 fa00 	bl	8010818 <xTimerPendFunctionCallFromISR>
 800d418:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d41a:	697b      	ldr	r3, [r7, #20]
	}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3718      	adds	r7, #24
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	0800d3a1 	.word	0x0800d3a1

0800d428 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f103 0208 	add.w	r2, r3, #8
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f04f 32ff 	mov.w	r2, #4294967295
 800d440:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f103 0208 	add.w	r2, r3, #8
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f103 0208 	add.w	r2, r3, #8
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d45c:	bf00      	nop
 800d45e:	370c      	adds	r7, #12
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d482:	b480      	push	{r7}
 800d484:	b085      	sub	sp, #20
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	1c5a      	adds	r2, r3, #1
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	601a      	str	r2, [r3, #0]
}
 800d4be:	bf00      	nop
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b085      	sub	sp, #20
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e0:	d103      	bne.n	800d4ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	60fb      	str	r3, [r7, #12]
 800d4e8:	e00c      	b.n	800d504 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3308      	adds	r3, #8
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	e002      	b.n	800d4f8 <vListInsert+0x2e>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68ba      	ldr	r2, [r7, #8]
 800d500:	429a      	cmp	r2, r3
 800d502:	d2f6      	bcs.n	800d4f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	685a      	ldr	r2, [r3, #4]
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	683a      	ldr	r2, [r7, #0]
 800d512:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	683a      	ldr	r2, [r7, #0]
 800d51e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	601a      	str	r2, [r3, #0]
}
 800d530:	bf00      	nop
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	6892      	ldr	r2, [r2, #8]
 800d552:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	687a      	ldr	r2, [r7, #4]
 800d55a:	6852      	ldr	r2, [r2, #4]
 800d55c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	429a      	cmp	r2, r3
 800d566:	d103      	bne.n	800d570 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	689a      	ldr	r2, [r3, #8]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	1e5a      	subs	r2, r3, #1
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
}
 800d584:	4618      	mov	r0, r3
 800d586:	3714      	adds	r7, #20
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10b      	bne.n	800d5bc <xQueueGenericReset+0x2c>
	__asm volatile
 800d5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a8:	f383 8811 	msr	BASEPRI, r3
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	f3bf 8f4f 	dsb	sy
 800d5b4:	60bb      	str	r3, [r7, #8]
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	e7fd      	b.n	800d5b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d5bc:	f003 fa7c 	bl	8010ab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5c8:	68f9      	ldr	r1, [r7, #12]
 800d5ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5cc:	fb01 f303 	mul.w	r3, r1, r3
 800d5d0:	441a      	add	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	68f9      	ldr	r1, [r7, #12]
 800d5f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5f2:	fb01 f303 	mul.w	r3, r1, r3
 800d5f6:	441a      	add	r2, r3
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	22ff      	movs	r2, #255	@ 0xff
 800d600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	22ff      	movs	r2, #255	@ 0xff
 800d608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d114      	bne.n	800d63c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d01a      	beq.n	800d650 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	3310      	adds	r3, #16
 800d61e:	4618      	mov	r0, r3
 800d620:	f001 ff12 	bl	800f448 <xTaskRemoveFromEventList>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d012      	beq.n	800d650 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d62a:	4b0d      	ldr	r3, [pc, #52]	@ (800d660 <xQueueGenericReset+0xd0>)
 800d62c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	f3bf 8f6f 	isb	sy
 800d63a:	e009      	b.n	800d650 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	3310      	adds	r3, #16
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fef1 	bl	800d428 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	3324      	adds	r3, #36	@ 0x24
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7ff feec 	bl	800d428 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d650:	f003 fa64 	bl	8010b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d654:	2301      	movs	r3, #1
}
 800d656:	4618      	mov	r0, r3
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08e      	sub	sp, #56	@ 0x38
 800d668:	af02      	add	r7, sp, #8
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10b      	bne.n	800d690 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d68a:	bf00      	nop
 800d68c:	bf00      	nop
 800d68e:	e7fd      	b.n	800d68c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10b      	bne.n	800d6ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6a8:	bf00      	nop
 800d6aa:	bf00      	nop
 800d6ac:	e7fd      	b.n	800d6aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d002      	beq.n	800d6ba <xQueueGenericCreateStatic+0x56>
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <xQueueGenericCreateStatic+0x5a>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e000      	b.n	800d6c0 <xQueueGenericCreateStatic+0x5c>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10b      	bne.n	800d6dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c8:	f383 8811 	msr	BASEPRI, r3
 800d6cc:	f3bf 8f6f 	isb	sy
 800d6d0:	f3bf 8f4f 	dsb	sy
 800d6d4:	623b      	str	r3, [r7, #32]
}
 800d6d6:	bf00      	nop
 800d6d8:	bf00      	nop
 800d6da:	e7fd      	b.n	800d6d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d102      	bne.n	800d6e8 <xQueueGenericCreateStatic+0x84>
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d101      	bne.n	800d6ec <xQueueGenericCreateStatic+0x88>
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e000      	b.n	800d6ee <xQueueGenericCreateStatic+0x8a>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10b      	bne.n	800d70a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	61fb      	str	r3, [r7, #28]
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop
 800d708:	e7fd      	b.n	800d706 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d70a:	2350      	movs	r3, #80	@ 0x50
 800d70c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b50      	cmp	r3, #80	@ 0x50
 800d712:	d00b      	beq.n	800d72c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	61bb      	str	r3, [r7, #24]
}
 800d726:	bf00      	nop
 800d728:	bf00      	nop
 800d72a:	e7fd      	b.n	800d728 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d72c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00d      	beq.n	800d754 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d740:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	4613      	mov	r3, r2
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	68b9      	ldr	r1, [r7, #8]
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 f840 	bl	800d7d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d756:	4618      	mov	r0, r3
 800d758:	3730      	adds	r7, #48	@ 0x30
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b08a      	sub	sp, #40	@ 0x28
 800d762:	af02      	add	r7, sp, #8
 800d764:	60f8      	str	r0, [r7, #12]
 800d766:	60b9      	str	r1, [r7, #8]
 800d768:	4613      	mov	r3, r2
 800d76a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10b      	bne.n	800d78a <xQueueGenericCreate+0x2c>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	613b      	str	r3, [r7, #16]
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop
 800d788:	e7fd      	b.n	800d786 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	fb02 f303 	mul.w	r3, r2, r3
 800d792:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	3350      	adds	r3, #80	@ 0x50
 800d798:	4618      	mov	r0, r3
 800d79a:	f003 faaf 	bl	8010cfc <pvPortMalloc>
 800d79e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d011      	beq.n	800d7ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	3350      	adds	r3, #80	@ 0x50
 800d7ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7b8:	79fa      	ldrb	r2, [r7, #7]
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	697a      	ldr	r2, [r7, #20]
 800d7c2:	68b9      	ldr	r1, [r7, #8]
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 f805 	bl	800d7d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3720      	adds	r7, #32
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d103      	bne.n	800d7f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	69ba      	ldr	r2, [r7, #24]
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	e002      	b.n	800d7f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d802:	2101      	movs	r1, #1
 800d804:	69b8      	ldr	r0, [r7, #24]
 800d806:	f7ff fec3 	bl	800d590 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d80a:	69bb      	ldr	r3, [r7, #24]
 800d80c:	78fa      	ldrb	r2, [r7, #3]
 800d80e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d812:	bf00      	nop
 800d814:	3710      	adds	r7, #16
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b082      	sub	sp, #8
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00e      	beq.n	800d846 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d83a:	2300      	movs	r3, #0
 800d83c:	2200      	movs	r2, #0
 800d83e:	2100      	movs	r1, #0
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 f81d 	bl	800d880 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d846:	bf00      	nop
 800d848:	3708      	adds	r7, #8
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b086      	sub	sp, #24
 800d852:	af00      	add	r7, sp, #0
 800d854:	4603      	mov	r3, r0
 800d856:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d858:	2301      	movs	r3, #1
 800d85a:	617b      	str	r3, [r7, #20]
 800d85c:	2300      	movs	r3, #0
 800d85e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d860:	79fb      	ldrb	r3, [r7, #7]
 800d862:	461a      	mov	r2, r3
 800d864:	6939      	ldr	r1, [r7, #16]
 800d866:	6978      	ldr	r0, [r7, #20]
 800d868:	f7ff ff79 	bl	800d75e <xQueueGenericCreate>
 800d86c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7ff ffd3 	bl	800d81a <prvInitialiseMutex>

		return xNewQueue;
 800d874:	68fb      	ldr	r3, [r7, #12]
	}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b08e      	sub	sp, #56	@ 0x38
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d88e:	2300      	movs	r3, #0
 800d890:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10b      	bne.n	800d8b4 <xQueueGenericSend+0x34>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
 800d8b2:	e7fd      	b.n	800d8b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d103      	bne.n	800d8c2 <xQueueGenericSend+0x42>
 800d8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d101      	bne.n	800d8c6 <xQueueGenericSend+0x46>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <xQueueGenericSend+0x48>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10b      	bne.n	800d8e4 <xQueueGenericSend+0x64>
	__asm volatile
 800d8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d0:	f383 8811 	msr	BASEPRI, r3
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8de:	bf00      	nop
 800d8e0:	bf00      	nop
 800d8e2:	e7fd      	b.n	800d8e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d103      	bne.n	800d8f2 <xQueueGenericSend+0x72>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d101      	bne.n	800d8f6 <xQueueGenericSend+0x76>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <xQueueGenericSend+0x78>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10b      	bne.n	800d914 <xQueueGenericSend+0x94>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	623b      	str	r3, [r7, #32]
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	e7fd      	b.n	800d910 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d914:	f002 f860 	bl	800f9d8 <xTaskGetSchedulerState>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d102      	bne.n	800d924 <xQueueGenericSend+0xa4>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <xQueueGenericSend+0xa8>
 800d924:	2301      	movs	r3, #1
 800d926:	e000      	b.n	800d92a <xQueueGenericSend+0xaa>
 800d928:	2300      	movs	r3, #0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10b      	bne.n	800d946 <xQueueGenericSend+0xc6>
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	61fb      	str	r3, [r7, #28]
}
 800d940:	bf00      	nop
 800d942:	bf00      	nop
 800d944:	e7fd      	b.n	800d942 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d946:	f003 f8b7 	bl	8010ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d94c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d952:	429a      	cmp	r2, r3
 800d954:	d302      	bcc.n	800d95c <xQueueGenericSend+0xdc>
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d129      	bne.n	800d9b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	68b9      	ldr	r1, [r7, #8]
 800d960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d962:	f000 fbdd 	bl	800e120 <prvCopyDataToQueue>
 800d966:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d010      	beq.n	800d992 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d972:	3324      	adds	r3, #36	@ 0x24
 800d974:	4618      	mov	r0, r3
 800d976:	f001 fd67 	bl	800f448 <xTaskRemoveFromEventList>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d013      	beq.n	800d9a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d980:	4b3f      	ldr	r3, [pc, #252]	@ (800da80 <xQueueGenericSend+0x200>)
 800d982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	e00a      	b.n	800d9a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d007      	beq.n	800d9a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d998:	4b39      	ldr	r3, [pc, #228]	@ (800da80 <xQueueGenericSend+0x200>)
 800d99a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9a8:	f003 f8b8 	bl	8010b1c <vPortExitCritical>
				return pdPASS;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e063      	b.n	800da78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d103      	bne.n	800d9be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9b6:	f003 f8b1 	bl	8010b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e05c      	b.n	800da78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d106      	bne.n	800d9d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9c4:	f107 0314 	add.w	r3, r7, #20
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f001 fe05 	bl	800f5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9d2:	f003 f8a3 	bl	8010b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9d6:	f001 f9f7 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9da:	f003 f86d 	bl	8010ab8 <vPortEnterCritical>
 800d9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9e4:	b25b      	sxtb	r3, r3
 800d9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ea:	d103      	bne.n	800d9f4 <xQueueGenericSend+0x174>
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d9fa:	b25b      	sxtb	r3, r3
 800d9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da00:	d103      	bne.n	800da0a <xQueueGenericSend+0x18a>
 800da02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da04:	2200      	movs	r2, #0
 800da06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da0a:	f003 f887 	bl	8010b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da0e:	1d3a      	adds	r2, r7, #4
 800da10:	f107 0314 	add.w	r3, r7, #20
 800da14:	4611      	mov	r1, r2
 800da16:	4618      	mov	r0, r3
 800da18:	f001 fdf4 	bl	800f604 <xTaskCheckForTimeOut>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d124      	bne.n	800da6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da24:	f000 fc74 	bl	800e310 <prvIsQueueFull>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d018      	beq.n	800da60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da30:	3310      	adds	r3, #16
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	4611      	mov	r1, r2
 800da36:	4618      	mov	r0, r3
 800da38:	f001 fc76 	bl	800f328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da3e:	f000 fbff 	bl	800e240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da42:	f001 f9cf 	bl	800ede4 <xTaskResumeAll>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f47f af7c 	bne.w	800d946 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da4e:	4b0c      	ldr	r3, [pc, #48]	@ (800da80 <xQueueGenericSend+0x200>)
 800da50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	e772      	b.n	800d946 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da62:	f000 fbed 	bl	800e240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da66:	f001 f9bd 	bl	800ede4 <xTaskResumeAll>
 800da6a:	e76c      	b.n	800d946 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da6e:	f000 fbe7 	bl	800e240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da72:	f001 f9b7 	bl	800ede4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3738      	adds	r7, #56	@ 0x38
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	e000ed04 	.word	0xe000ed04

0800da84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b090      	sub	sp, #64	@ 0x40
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
 800da90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800da96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d10b      	bne.n	800dab4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800da9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa0:	f383 8811 	msr	BASEPRI, r3
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	f3bf 8f4f 	dsb	sy
 800daac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800daae:	bf00      	nop
 800dab0:	bf00      	nop
 800dab2:	e7fd      	b.n	800dab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d103      	bne.n	800dac2 <xQueueGenericSendFromISR+0x3e>
 800daba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <xQueueGenericSendFromISR+0x42>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e000      	b.n	800dac8 <xQueueGenericSendFromISR+0x44>
 800dac6:	2300      	movs	r3, #0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10b      	bne.n	800dae4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dacc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad0:	f383 8811 	msr	BASEPRI, r3
 800dad4:	f3bf 8f6f 	isb	sy
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dade:	bf00      	nop
 800dae0:	bf00      	nop
 800dae2:	e7fd      	b.n	800dae0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	2b02      	cmp	r3, #2
 800dae8:	d103      	bne.n	800daf2 <xQueueGenericSendFromISR+0x6e>
 800daea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d101      	bne.n	800daf6 <xQueueGenericSendFromISR+0x72>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <xQueueGenericSendFromISR+0x74>
 800daf6:	2300      	movs	r3, #0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	623b      	str	r3, [r7, #32]
}
 800db0e:	bf00      	nop
 800db10:	bf00      	nop
 800db12:	e7fd      	b.n	800db10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db14:	f003 f8b0 	bl	8010c78 <vPortValidateInterruptPriority>
	__asm volatile
 800db18:	f3ef 8211 	mrs	r2, BASEPRI
 800db1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	61fa      	str	r2, [r7, #28]
 800db2e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800db30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d302      	bcc.n	800db46 <xQueueGenericSendFromISR+0xc2>
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b02      	cmp	r3, #2
 800db44:	d12f      	bne.n	800dba6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	68b9      	ldr	r1, [r7, #8]
 800db5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db5c:	f000 fae0 	bl	800e120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db68:	d112      	bne.n	800db90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d016      	beq.n	800dba0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db74:	3324      	adds	r3, #36	@ 0x24
 800db76:	4618      	mov	r0, r3
 800db78:	f001 fc66 	bl	800f448 <xTaskRemoveFromEventList>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00e      	beq.n	800dba0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00b      	beq.n	800dba0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	e007      	b.n	800dba0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800db94:	3301      	adds	r3, #1
 800db96:	b2db      	uxtb	r3, r3
 800db98:	b25a      	sxtb	r2, r3
 800db9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dba0:	2301      	movs	r3, #1
 800dba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dba4:	e001      	b.n	800dbaa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dba6:	2300      	movs	r3, #0
 800dba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbac:	617b      	str	r3, [r7, #20]
	__asm volatile
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f383 8811 	msr	BASEPRI, r3
}
 800dbb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3740      	adds	r7, #64	@ 0x40
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b08c      	sub	sp, #48	@ 0x30
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	60f8      	str	r0, [r7, #12]
 800dbc8:	60b9      	str	r1, [r7, #8]
 800dbca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10b      	bne.n	800dbf2 <xQueueReceive+0x32>
	__asm volatile
 800dbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbde:	f383 8811 	msr	BASEPRI, r3
 800dbe2:	f3bf 8f6f 	isb	sy
 800dbe6:	f3bf 8f4f 	dsb	sy
 800dbea:	623b      	str	r3, [r7, #32]
}
 800dbec:	bf00      	nop
 800dbee:	bf00      	nop
 800dbf0:	e7fd      	b.n	800dbee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d103      	bne.n	800dc00 <xQueueReceive+0x40>
 800dbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <xQueueReceive+0x44>
 800dc00:	2301      	movs	r3, #1
 800dc02:	e000      	b.n	800dc06 <xQueueReceive+0x46>
 800dc04:	2300      	movs	r3, #0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10b      	bne.n	800dc22 <xQueueReceive+0x62>
	__asm volatile
 800dc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	61fb      	str	r3, [r7, #28]
}
 800dc1c:	bf00      	nop
 800dc1e:	bf00      	nop
 800dc20:	e7fd      	b.n	800dc1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc22:	f001 fed9 	bl	800f9d8 <xTaskGetSchedulerState>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d102      	bne.n	800dc32 <xQueueReceive+0x72>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d101      	bne.n	800dc36 <xQueueReceive+0x76>
 800dc32:	2301      	movs	r3, #1
 800dc34:	e000      	b.n	800dc38 <xQueueReceive+0x78>
 800dc36:	2300      	movs	r3, #0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d10b      	bne.n	800dc54 <xQueueReceive+0x94>
	__asm volatile
 800dc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc40:	f383 8811 	msr	BASEPRI, r3
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	f3bf 8f4f 	dsb	sy
 800dc4c:	61bb      	str	r3, [r7, #24]
}
 800dc4e:	bf00      	nop
 800dc50:	bf00      	nop
 800dc52:	e7fd      	b.n	800dc50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc54:	f002 ff30 	bl	8010ab8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d01f      	beq.n	800dca4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc64:	68b9      	ldr	r1, [r7, #8]
 800dc66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc68:	f000 fac4 	bl	800e1f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6e:	1e5a      	subs	r2, r3, #1
 800dc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00f      	beq.n	800dc9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7e:	3310      	adds	r3, #16
 800dc80:	4618      	mov	r0, r3
 800dc82:	f001 fbe1 	bl	800f448 <xTaskRemoveFromEventList>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d007      	beq.n	800dc9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc8c:	4b3c      	ldr	r3, [pc, #240]	@ (800dd80 <xQueueReceive+0x1c0>)
 800dc8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc92:	601a      	str	r2, [r3, #0]
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dc9c:	f002 ff3e 	bl	8010b1c <vPortExitCritical>
				return pdPASS;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e069      	b.n	800dd78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d103      	bne.n	800dcb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcaa:	f002 ff37 	bl	8010b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e062      	b.n	800dd78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d106      	bne.n	800dcc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcb8:	f107 0310 	add.w	r3, r7, #16
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f001 fc8b 	bl	800f5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcc6:	f002 ff29 	bl	8010b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcca:	f001 f87d 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcce:	f002 fef3 	bl	8010ab8 <vPortEnterCritical>
 800dcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcd8:	b25b      	sxtb	r3, r3
 800dcda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcde:	d103      	bne.n	800dce8 <xQueueReceive+0x128>
 800dce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcee:	b25b      	sxtb	r3, r3
 800dcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf4:	d103      	bne.n	800dcfe <xQueueReceive+0x13e>
 800dcf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcfe:	f002 ff0d 	bl	8010b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd02:	1d3a      	adds	r2, r7, #4
 800dd04:	f107 0310 	add.w	r3, r7, #16
 800dd08:	4611      	mov	r1, r2
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f001 fc7a 	bl	800f604 <xTaskCheckForTimeOut>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d123      	bne.n	800dd5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd18:	f000 fae4 	bl	800e2e4 <prvIsQueueEmpty>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d017      	beq.n	800dd52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd24:	3324      	adds	r3, #36	@ 0x24
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	4611      	mov	r1, r2
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f001 fafc 	bl	800f328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd32:	f000 fa85 	bl	800e240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd36:	f001 f855 	bl	800ede4 <xTaskResumeAll>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d189      	bne.n	800dc54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dd40:	4b0f      	ldr	r3, [pc, #60]	@ (800dd80 <xQueueReceive+0x1c0>)
 800dd42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd46:	601a      	str	r2, [r3, #0]
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	f3bf 8f6f 	isb	sy
 800dd50:	e780      	b.n	800dc54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd54:	f000 fa74 	bl	800e240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd58:	f001 f844 	bl	800ede4 <xTaskResumeAll>
 800dd5c:	e77a      	b.n	800dc54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd60:	f000 fa6e 	bl	800e240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd64:	f001 f83e 	bl	800ede4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd6a:	f000 fabb 	bl	800e2e4 <prvIsQueueEmpty>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f43f af6f 	beq.w	800dc54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3730      	adds	r7, #48	@ 0x30
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	e000ed04 	.word	0xe000ed04

0800dd84 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08e      	sub	sp, #56	@ 0x38
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dd96:	2300      	movs	r3, #0
 800dd98:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10b      	bne.n	800ddb8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda4:	f383 8811 	msr	BASEPRI, r3
 800dda8:	f3bf 8f6f 	isb	sy
 800ddac:	f3bf 8f4f 	dsb	sy
 800ddb0:	623b      	str	r3, [r7, #32]
}
 800ddb2:	bf00      	nop
 800ddb4:	bf00      	nop
 800ddb6:	e7fd      	b.n	800ddb4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00b      	beq.n	800ddd8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	61fb      	str	r3, [r7, #28]
}
 800ddd2:	bf00      	nop
 800ddd4:	bf00      	nop
 800ddd6:	e7fd      	b.n	800ddd4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddd8:	f001 fdfe 	bl	800f9d8 <xTaskGetSchedulerState>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <xQueueSemaphoreTake+0x64>
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d101      	bne.n	800ddec <xQueueSemaphoreTake+0x68>
 800dde8:	2301      	movs	r3, #1
 800ddea:	e000      	b.n	800ddee <xQueueSemaphoreTake+0x6a>
 800ddec:	2300      	movs	r3, #0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10b      	bne.n	800de0a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	61bb      	str	r3, [r7, #24]
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop
 800de08:	e7fd      	b.n	800de06 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de0a:	f002 fe55 	bl	8010ab8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de12:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de16:	2b00      	cmp	r3, #0
 800de18:	d024      	beq.n	800de64 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1c:	1e5a      	subs	r2, r3, #1
 800de1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de20:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d104      	bne.n	800de34 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de2a:	f001 ff67 	bl	800fcfc <pvTaskIncrementMutexHeldCount>
 800de2e:	4602      	mov	r2, r0
 800de30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00f      	beq.n	800de5c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3e:	3310      	adds	r3, #16
 800de40:	4618      	mov	r0, r3
 800de42:	f001 fb01 	bl	800f448 <xTaskRemoveFromEventList>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de4c:	4b54      	ldr	r3, [pc, #336]	@ (800dfa0 <xQueueSemaphoreTake+0x21c>)
 800de4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de52:	601a      	str	r2, [r3, #0]
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de5c:	f002 fe5e 	bl	8010b1c <vPortExitCritical>
				return pdPASS;
 800de60:	2301      	movs	r3, #1
 800de62:	e098      	b.n	800df96 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d112      	bne.n	800de90 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d00b      	beq.n	800de88 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	617b      	str	r3, [r7, #20]
}
 800de82:	bf00      	nop
 800de84:	bf00      	nop
 800de86:	e7fd      	b.n	800de84 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800de88:	f002 fe48 	bl	8010b1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de8c:	2300      	movs	r3, #0
 800de8e:	e082      	b.n	800df96 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de96:	f107 030c 	add.w	r3, r7, #12
 800de9a:	4618      	mov	r0, r3
 800de9c:	f001 fb9c 	bl	800f5d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dea0:	2301      	movs	r3, #1
 800dea2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dea4:	f002 fe3a 	bl	8010b1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dea8:	f000 ff8e 	bl	800edc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deac:	f002 fe04 	bl	8010ab8 <vPortEnterCritical>
 800deb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deb6:	b25b      	sxtb	r3, r3
 800deb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800debc:	d103      	bne.n	800dec6 <xQueueSemaphoreTake+0x142>
 800debe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec0:	2200      	movs	r2, #0
 800dec2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800decc:	b25b      	sxtb	r3, r3
 800dece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded2:	d103      	bne.n	800dedc <xQueueSemaphoreTake+0x158>
 800ded4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded6:	2200      	movs	r2, #0
 800ded8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dedc:	f002 fe1e 	bl	8010b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dee0:	463a      	mov	r2, r7
 800dee2:	f107 030c 	add.w	r3, r7, #12
 800dee6:	4611      	mov	r1, r2
 800dee8:	4618      	mov	r0, r3
 800deea:	f001 fb8b 	bl	800f604 <xTaskCheckForTimeOut>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d132      	bne.n	800df5a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800def4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800def6:	f000 f9f5 	bl	800e2e4 <prvIsQueueEmpty>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d026      	beq.n	800df4e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d109      	bne.n	800df1c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800df08:	f002 fdd6 	bl	8010ab8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	4618      	mov	r0, r3
 800df12:	f001 fd7f 	bl	800fa14 <xTaskPriorityInherit>
 800df16:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800df18:	f002 fe00 	bl	8010b1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1e:	3324      	adds	r3, #36	@ 0x24
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	4611      	mov	r1, r2
 800df24:	4618      	mov	r0, r3
 800df26:	f001 f9ff 	bl	800f328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df2c:	f000 f988 	bl	800e240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df30:	f000 ff58 	bl	800ede4 <xTaskResumeAll>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	f47f af67 	bne.w	800de0a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800df3c:	4b18      	ldr	r3, [pc, #96]	@ (800dfa0 <xQueueSemaphoreTake+0x21c>)
 800df3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	f3bf 8f4f 	dsb	sy
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	e75d      	b.n	800de0a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800df4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df50:	f000 f976 	bl	800e240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df54:	f000 ff46 	bl	800ede4 <xTaskResumeAll>
 800df58:	e757      	b.n	800de0a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800df5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df5c:	f000 f970 	bl	800e240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df60:	f000 ff40 	bl	800ede4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df66:	f000 f9bd 	bl	800e2e4 <prvIsQueueEmpty>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f43f af4c 	beq.w	800de0a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800df72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00d      	beq.n	800df94 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800df78:	f002 fd9e 	bl	8010ab8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800df7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df7e:	f000 f8b7 	bl	800e0f0 <prvGetDisinheritPriorityAfterTimeout>
 800df82:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800df84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df8a:	4618      	mov	r0, r3
 800df8c:	f001 fe1a 	bl	800fbc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800df90:	f002 fdc4 	bl	8010b1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df96:	4618      	mov	r0, r3
 800df98:	3738      	adds	r7, #56	@ 0x38
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	e000ed04 	.word	0xe000ed04

0800dfa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b08e      	sub	sp, #56	@ 0x38
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10b      	bne.n	800dfd2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	623b      	str	r3, [r7, #32]
}
 800dfcc:	bf00      	nop
 800dfce:	bf00      	nop
 800dfd0:	e7fd      	b.n	800dfce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d103      	bne.n	800dfe0 <xQueueReceiveFromISR+0x3c>
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d101      	bne.n	800dfe4 <xQueueReceiveFromISR+0x40>
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e000      	b.n	800dfe6 <xQueueReceiveFromISR+0x42>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10b      	bne.n	800e002 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	61fb      	str	r3, [r7, #28]
}
 800dffc:	bf00      	nop
 800dffe:	bf00      	nop
 800e000:	e7fd      	b.n	800dffe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e002:	f002 fe39 	bl	8010c78 <vPortValidateInterruptPriority>
	__asm volatile
 800e006:	f3ef 8211 	mrs	r2, BASEPRI
 800e00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	61ba      	str	r2, [r7, #24]
 800e01c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e01e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e020:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e026:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d02f      	beq.n	800e08e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e038:	68b9      	ldr	r1, [r7, #8]
 800e03a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e03c:	f000 f8da 	bl	800e1f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e042:	1e5a      	subs	r2, r3, #1
 800e044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e046:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e048:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e050:	d112      	bne.n	800e078 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d016      	beq.n	800e088 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05c:	3310      	adds	r3, #16
 800e05e:	4618      	mov	r0, r3
 800e060:	f001 f9f2 	bl	800f448 <xTaskRemoveFromEventList>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00e      	beq.n	800e088 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00b      	beq.n	800e088 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	e007      	b.n	800e088 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e07c:	3301      	adds	r3, #1
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	b25a      	sxtb	r2, r3
 800e082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e088:	2301      	movs	r3, #1
 800e08a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e08c:	e001      	b.n	800e092 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e08e:	2300      	movs	r3, #0
 800e090:	637b      	str	r3, [r7, #52]	@ 0x34
 800e092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e094:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	f383 8811 	msr	BASEPRI, r3
}
 800e09c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3738      	adds	r7, #56	@ 0x38
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b086      	sub	sp, #24
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10b      	bne.n	800e0d2 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800e0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	60fb      	str	r3, [r7, #12]
}
 800e0cc:	bf00      	nop
 800e0ce:	bf00      	nop
 800e0d0:	e7fd      	b.n	800e0ce <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800e0d2:	f002 fcf1 	bl	8010ab8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e0e2:	f002 fd1b 	bl	8010b1c <vPortExitCritical>

	return uxReturn;
 800e0e6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d006      	beq.n	800e10e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e10a:	60fb      	str	r3, [r7, #12]
 800e10c:	e001      	b.n	800e112 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e10e:	2300      	movs	r3, #0
 800e110:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e112:	68fb      	ldr	r3, [r7, #12]
	}
 800e114:	4618      	mov	r0, r3
 800e116:	3714      	adds	r7, #20
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b086      	sub	sp, #24
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e12c:	2300      	movs	r3, #0
 800e12e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10d      	bne.n	800e15a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d14d      	bne.n	800e1e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f001 fcca 	bl	800fae4 <xTaskPriorityDisinherit>
 800e150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	609a      	str	r2, [r3, #8]
 800e158:	e043      	b.n	800e1e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d119      	bne.n	800e194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	6858      	ldr	r0, [r3, #4]
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e168:	461a      	mov	r2, r3
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	f005 f917 	bl	801339e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	685a      	ldr	r2, [r3, #4]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e178:	441a      	add	r2, r3
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	429a      	cmp	r2, r3
 800e188:	d32b      	bcc.n	800e1e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	605a      	str	r2, [r3, #4]
 800e192:	e026      	b.n	800e1e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	68d8      	ldr	r0, [r3, #12]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e19c:	461a      	mov	r2, r3
 800e19e:	68b9      	ldr	r1, [r7, #8]
 800e1a0:	f005 f8fd 	bl	801339e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68da      	ldr	r2, [r3, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1ac:	425b      	negs	r3, r3
 800e1ae:	441a      	add	r2, r3
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	68da      	ldr	r2, [r3, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d207      	bcs.n	800e1d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	689a      	ldr	r2, [r3, #8]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c8:	425b      	negs	r3, r3
 800e1ca:	441a      	add	r2, r3
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d105      	bne.n	800e1e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	1c5a      	adds	r2, r3, #1
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e1ea:	697b      	ldr	r3, [r7, #20]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	6078      	str	r0, [r7, #4]
 800e1fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e202:	2b00      	cmp	r3, #0
 800e204:	d018      	beq.n	800e238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	68da      	ldr	r2, [r3, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e20e:	441a      	add	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	68da      	ldr	r2, [r3, #12]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d303      	bcc.n	800e228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	68d9      	ldr	r1, [r3, #12]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e230:	461a      	mov	r2, r3
 800e232:	6838      	ldr	r0, [r7, #0]
 800e234:	f005 f8b3 	bl	801339e <memcpy>
	}
}
 800e238:	bf00      	nop
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e248:	f002 fc36 	bl	8010ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e254:	e011      	b.n	800e27a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d012      	beq.n	800e284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3324      	adds	r3, #36	@ 0x24
 800e262:	4618      	mov	r0, r3
 800e264:	f001 f8f0 	bl	800f448 <xTaskRemoveFromEventList>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d001      	beq.n	800e272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e26e:	f001 fa2d 	bl	800f6cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	3b01      	subs	r3, #1
 800e276:	b2db      	uxtb	r3, r3
 800e278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	dce9      	bgt.n	800e256 <prvUnlockQueue+0x16>
 800e282:	e000      	b.n	800e286 <prvUnlockQueue+0x46>
					break;
 800e284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	22ff      	movs	r2, #255	@ 0xff
 800e28a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e28e:	f002 fc45 	bl	8010b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e292:	f002 fc11 	bl	8010ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e29c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e29e:	e011      	b.n	800e2c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d012      	beq.n	800e2ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3310      	adds	r3, #16
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f001 f8cb 	bl	800f448 <xTaskRemoveFromEventList>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e2b8:	f001 fa08 	bl	800f6cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2bc:	7bbb      	ldrb	r3, [r7, #14]
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	dce9      	bgt.n	800e2a0 <prvUnlockQueue+0x60>
 800e2cc:	e000      	b.n	800e2d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	22ff      	movs	r2, #255	@ 0xff
 800e2d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e2d8:	f002 fc20 	bl	8010b1c <vPortExitCritical>
}
 800e2dc:	bf00      	nop
 800e2de:	3710      	adds	r7, #16
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2ec:	f002 fbe4 	bl	8010ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d102      	bne.n	800e2fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	60fb      	str	r3, [r7, #12]
 800e2fc:	e001      	b.n	800e302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e2fe:	2300      	movs	r3, #0
 800e300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e302:	f002 fc0b 	bl	8010b1c <vPortExitCritical>

	return xReturn;
 800e306:	68fb      	ldr	r3, [r7, #12]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e318:	f002 fbce 	bl	8010ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e324:	429a      	cmp	r2, r3
 800e326:	d102      	bne.n	800e32e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e328:	2301      	movs	r3, #1
 800e32a:	60fb      	str	r3, [r7, #12]
 800e32c:	e001      	b.n	800e332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e332:	f002 fbf3 	bl	8010b1c <vPortExitCritical>

	return xReturn;
 800e336:	68fb      	ldr	r3, [r7, #12]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e34a:	2300      	movs	r3, #0
 800e34c:	60fb      	str	r3, [r7, #12]
 800e34e:	e014      	b.n	800e37a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e350:	4a0f      	ldr	r2, [pc, #60]	@ (800e390 <vQueueAddToRegistry+0x50>)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d10b      	bne.n	800e374 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e35c:	490c      	ldr	r1, [pc, #48]	@ (800e390 <vQueueAddToRegistry+0x50>)
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e366:	4a0a      	ldr	r2, [pc, #40]	@ (800e390 <vQueueAddToRegistry+0x50>)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	00db      	lsls	r3, r3, #3
 800e36c:	4413      	add	r3, r2
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e372:	e006      	b.n	800e382 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	3301      	adds	r3, #1
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2b07      	cmp	r3, #7
 800e37e:	d9e7      	bls.n	800e350 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	20001588 	.word	0x20001588

0800e394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e394:	b580      	push	{r7, lr}
 800e396:	b086      	sub	sp, #24
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3a4:	f002 fb88 	bl	8010ab8 <vPortEnterCritical>
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3ae:	b25b      	sxtb	r3, r3
 800e3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b4:	d103      	bne.n	800e3be <vQueueWaitForMessageRestricted+0x2a>
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3c4:	b25b      	sxtb	r3, r3
 800e3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ca:	d103      	bne.n	800e3d4 <vQueueWaitForMessageRestricted+0x40>
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3d4:	f002 fba2 	bl	8010b1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d106      	bne.n	800e3ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	3324      	adds	r3, #36	@ 0x24
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	68b9      	ldr	r1, [r7, #8]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f001 f801 	bl	800f3f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3ee:	6978      	ldr	r0, [r7, #20]
 800e3f0:	f7ff ff26 	bl	800e240 <prvUnlockQueue>
	}
 800e3f4:	bf00      	nop
 800e3f6:	3718      	adds	r7, #24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b08e      	sub	sp, #56	@ 0x38
 800e400:	af04      	add	r7, sp, #16
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
 800e408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e40a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d10b      	bne.n	800e428 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	623b      	str	r3, [r7, #32]
}
 800e422:	bf00      	nop
 800e424:	bf00      	nop
 800e426:	e7fd      	b.n	800e424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10b      	bne.n	800e446 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	61fb      	str	r3, [r7, #28]
}
 800e440:	bf00      	nop
 800e442:	bf00      	nop
 800e444:	e7fd      	b.n	800e442 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e446:	23a8      	movs	r3, #168	@ 0xa8
 800e448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	2ba8      	cmp	r3, #168	@ 0xa8
 800e44e:	d00b      	beq.n	800e468 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	61bb      	str	r3, [r7, #24]
}
 800e462:	bf00      	nop
 800e464:	bf00      	nop
 800e466:	e7fd      	b.n	800e464 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e468:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d01e      	beq.n	800e4ae <xTaskCreateStatic+0xb2>
 800e470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e472:	2b00      	cmp	r3, #0
 800e474:	d01b      	beq.n	800e4ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e478:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e47e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e482:	2202      	movs	r2, #2
 800e484:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e488:	2300      	movs	r3, #0
 800e48a:	9303      	str	r3, [sp, #12]
 800e48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48e:	9302      	str	r3, [sp, #8]
 800e490:	f107 0314 	add.w	r3, r7, #20
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	68b9      	ldr	r1, [r7, #8]
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f000 f851 	bl	800e548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4a8:	f000 f8f6 	bl	800e698 <prvAddNewTaskToReadyList>
 800e4ac:	e001      	b.n	800e4b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4b2:	697b      	ldr	r3, [r7, #20]
	}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3728      	adds	r7, #40	@ 0x28
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}

0800e4bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08c      	sub	sp, #48	@ 0x30
 800e4c0:	af04      	add	r7, sp, #16
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4cc:	88fb      	ldrh	r3, [r7, #6]
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f002 fc13 	bl	8010cfc <pvPortMalloc>
 800e4d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00e      	beq.n	800e4fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4de:	20a8      	movs	r0, #168	@ 0xa8
 800e4e0:	f002 fc0c 	bl	8010cfc <pvPortMalloc>
 800e4e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4e6:	69fb      	ldr	r3, [r7, #28]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d003      	beq.n	800e4f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	697a      	ldr	r2, [r7, #20]
 800e4f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4f2:	e005      	b.n	800e500 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4f4:	6978      	ldr	r0, [r7, #20]
 800e4f6:	f002 fccf 	bl	8010e98 <vPortFree>
 800e4fa:	e001      	b.n	800e500 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d017      	beq.n	800e536 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e506:	69fb      	ldr	r3, [r7, #28]
 800e508:	2200      	movs	r2, #0
 800e50a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e50e:	88fa      	ldrh	r2, [r7, #6]
 800e510:	2300      	movs	r3, #0
 800e512:	9303      	str	r3, [sp, #12]
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	9302      	str	r3, [sp, #8]
 800e518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	68b9      	ldr	r1, [r7, #8]
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f000 f80f 	bl	800e548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e52a:	69f8      	ldr	r0, [r7, #28]
 800e52c:	f000 f8b4 	bl	800e698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e530:	2301      	movs	r3, #1
 800e532:	61bb      	str	r3, [r7, #24]
 800e534:	e002      	b.n	800e53c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e536:	f04f 33ff 	mov.w	r3, #4294967295
 800e53a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e53c:	69bb      	ldr	r3, [r7, #24]
	}
 800e53e:	4618      	mov	r0, r3
 800e540:	3720      	adds	r7, #32
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
	...

0800e548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b088      	sub	sp, #32
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
 800e554:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e558:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	461a      	mov	r2, r3
 800e560:	21a5      	movs	r1, #165	@ 0xa5
 800e562:	f004 fdac 	bl	80130be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e570:	3b01      	subs	r3, #1
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e578:	69bb      	ldr	r3, [r7, #24]
 800e57a:	f023 0307 	bic.w	r3, r3, #7
 800e57e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	f003 0307 	and.w	r3, r3, #7
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00b      	beq.n	800e5a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	617b      	str	r3, [r7, #20]
}
 800e59c:	bf00      	nop
 800e59e:	bf00      	nop
 800e5a0:	e7fd      	b.n	800e59e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01f      	beq.n	800e5e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	61fb      	str	r3, [r7, #28]
 800e5ac:	e012      	b.n	800e5d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	7819      	ldrb	r1, [r3, #0]
 800e5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	3334      	adds	r3, #52	@ 0x34
 800e5be:	460a      	mov	r2, r1
 800e5c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	4413      	add	r3, r2
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d006      	beq.n	800e5dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	61fb      	str	r3, [r7, #28]
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	2b0f      	cmp	r3, #15
 800e5d8:	d9e9      	bls.n	800e5ae <prvInitialiseNewTask+0x66>
 800e5da:	e000      	b.n	800e5de <prvInitialiseNewTask+0x96>
			{
				break;
 800e5dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e5e6:	e003      	b.n	800e5f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f2:	2b37      	cmp	r3, #55	@ 0x37
 800e5f4:	d901      	bls.n	800e5fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5f6:	2337      	movs	r3, #55	@ 0x37
 800e5f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e604:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e608:	2200      	movs	r2, #0
 800e60a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60e:	3304      	adds	r3, #4
 800e610:	4618      	mov	r0, r3
 800e612:	f7fe ff29 	bl	800d468 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e618:	3318      	adds	r3, #24
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fe ff24 	bl	800d468 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e624:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e634:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e638:	2200      	movs	r2, #0
 800e63a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	2200      	movs	r2, #0
 800e642:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e648:	3354      	adds	r3, #84	@ 0x54
 800e64a:	224c      	movs	r2, #76	@ 0x4c
 800e64c:	2100      	movs	r1, #0
 800e64e:	4618      	mov	r0, r3
 800e650:	f004 fd35 	bl	80130be <memset>
 800e654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e656:	4a0d      	ldr	r2, [pc, #52]	@ (800e68c <prvInitialiseNewTask+0x144>)
 800e658:	659a      	str	r2, [r3, #88]	@ 0x58
 800e65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65c:	4a0c      	ldr	r2, [pc, #48]	@ (800e690 <prvInitialiseNewTask+0x148>)
 800e65e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e662:	4a0c      	ldr	r2, [pc, #48]	@ (800e694 <prvInitialiseNewTask+0x14c>)
 800e664:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e666:	683a      	ldr	r2, [r7, #0]
 800e668:	68f9      	ldr	r1, [r7, #12]
 800e66a:	69b8      	ldr	r0, [r7, #24]
 800e66c:	f002 f8f4 	bl	8010858 <pxPortInitialiseStack>
 800e670:	4602      	mov	r2, r0
 800e672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e67c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e67e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e682:	bf00      	nop
 800e684:	3720      	adds	r7, #32
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	20011dec 	.word	0x20011dec
 800e690:	20011e54 	.word	0x20011e54
 800e694:	20011ebc 	.word	0x20011ebc

0800e698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e6a0:	f002 fa0a 	bl	8010ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e6a4:	4b2d      	ldr	r3, [pc, #180]	@ (800e75c <prvAddNewTaskToReadyList+0xc4>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	4a2c      	ldr	r2, [pc, #176]	@ (800e75c <prvAddNewTaskToReadyList+0xc4>)
 800e6ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e6ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e760 <prvAddNewTaskToReadyList+0xc8>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6b6:	4a2a      	ldr	r2, [pc, #168]	@ (800e760 <prvAddNewTaskToReadyList+0xc8>)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6bc:	4b27      	ldr	r3, [pc, #156]	@ (800e75c <prvAddNewTaskToReadyList+0xc4>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d110      	bne.n	800e6e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6c4:	f001 f826 	bl	800f714 <prvInitialiseTaskLists>
 800e6c8:	e00d      	b.n	800e6e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6ca:	4b26      	ldr	r3, [pc, #152]	@ (800e764 <prvAddNewTaskToReadyList+0xcc>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d109      	bne.n	800e6e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6d2:	4b23      	ldr	r3, [pc, #140]	@ (800e760 <prvAddNewTaskToReadyList+0xc8>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6dc:	429a      	cmp	r2, r3
 800e6de:	d802      	bhi.n	800e6e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e760 <prvAddNewTaskToReadyList+0xc8>)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6e6:	4b20      	ldr	r3, [pc, #128]	@ (800e768 <prvAddNewTaskToReadyList+0xd0>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	4a1e      	ldr	r2, [pc, #120]	@ (800e768 <prvAddNewTaskToReadyList+0xd0>)
 800e6ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e6f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e768 <prvAddNewTaskToReadyList+0xd0>)
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6fc:	4b1b      	ldr	r3, [pc, #108]	@ (800e76c <prvAddNewTaskToReadyList+0xd4>)
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	429a      	cmp	r2, r3
 800e702:	d903      	bls.n	800e70c <prvAddNewTaskToReadyList+0x74>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e708:	4a18      	ldr	r2, [pc, #96]	@ (800e76c <prvAddNewTaskToReadyList+0xd4>)
 800e70a:	6013      	str	r3, [r2, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e710:	4613      	mov	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	4413      	add	r3, r2
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4a15      	ldr	r2, [pc, #84]	@ (800e770 <prvAddNewTaskToReadyList+0xd8>)
 800e71a:	441a      	add	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	3304      	adds	r3, #4
 800e720:	4619      	mov	r1, r3
 800e722:	4610      	mov	r0, r2
 800e724:	f7fe fead 	bl	800d482 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e728:	f002 f9f8 	bl	8010b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e72c:	4b0d      	ldr	r3, [pc, #52]	@ (800e764 <prvAddNewTaskToReadyList+0xcc>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d00e      	beq.n	800e752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e734:	4b0a      	ldr	r3, [pc, #40]	@ (800e760 <prvAddNewTaskToReadyList+0xc8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e73e:	429a      	cmp	r2, r3
 800e740:	d207      	bcs.n	800e752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e742:	4b0c      	ldr	r3, [pc, #48]	@ (800e774 <prvAddNewTaskToReadyList+0xdc>)
 800e744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e748:	601a      	str	r2, [r3, #0]
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e752:	bf00      	nop
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	20001a9c 	.word	0x20001a9c
 800e760:	200015c8 	.word	0x200015c8
 800e764:	20001aa8 	.word	0x20001aa8
 800e768:	20001ab8 	.word	0x20001ab8
 800e76c:	20001aa4 	.word	0x20001aa4
 800e770:	200015cc 	.word	0x200015cc
 800e774:	e000ed04 	.word	0xe000ed04

0800e778 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e780:	f002 f99a 	bl	8010ab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d102      	bne.n	800e790 <vTaskDelete+0x18>
 800e78a:	4b2d      	ldr	r3, [pc, #180]	@ (800e840 <vTaskDelete+0xc8>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	e000      	b.n	800e792 <vTaskDelete+0x1a>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3304      	adds	r3, #4
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fe fecf 	bl	800d53c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d004      	beq.n	800e7b0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3318      	adds	r3, #24
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fe fec6 	bl	800d53c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e7b0:	4b24      	ldr	r3, [pc, #144]	@ (800e844 <vTaskDelete+0xcc>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	4a23      	ldr	r2, [pc, #140]	@ (800e844 <vTaskDelete+0xcc>)
 800e7b8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e7ba:	4b21      	ldr	r3, [pc, #132]	@ (800e840 <vTaskDelete+0xc8>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d10b      	bne.n	800e7dc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	3304      	adds	r3, #4
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	481f      	ldr	r0, [pc, #124]	@ (800e848 <vTaskDelete+0xd0>)
 800e7cc:	f7fe fe59 	bl	800d482 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e7d0:	4b1e      	ldr	r3, [pc, #120]	@ (800e84c <vTaskDelete+0xd4>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	4a1d      	ldr	r2, [pc, #116]	@ (800e84c <vTaskDelete+0xd4>)
 800e7d8:	6013      	str	r3, [r2, #0]
 800e7da:	e009      	b.n	800e7f0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e7dc:	4b1c      	ldr	r3, [pc, #112]	@ (800e850 <vTaskDelete+0xd8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	4a1b      	ldr	r2, [pc, #108]	@ (800e850 <vTaskDelete+0xd8>)
 800e7e4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	f001 f8a0 	bl	800f92c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e7ec:	f001 f8d4 	bl	800f998 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e7f0:	f002 f994 	bl	8010b1c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e7f4:	4b17      	ldr	r3, [pc, #92]	@ (800e854 <vTaskDelete+0xdc>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d01c      	beq.n	800e836 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e7fc:	4b10      	ldr	r3, [pc, #64]	@ (800e840 <vTaskDelete+0xc8>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	429a      	cmp	r2, r3
 800e804:	d117      	bne.n	800e836 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e806:	4b14      	ldr	r3, [pc, #80]	@ (800e858 <vTaskDelete+0xe0>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00b      	beq.n	800e826 <vTaskDelete+0xae>
	__asm volatile
 800e80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e812:	f383 8811 	msr	BASEPRI, r3
 800e816:	f3bf 8f6f 	isb	sy
 800e81a:	f3bf 8f4f 	dsb	sy
 800e81e:	60bb      	str	r3, [r7, #8]
}
 800e820:	bf00      	nop
 800e822:	bf00      	nop
 800e824:	e7fd      	b.n	800e822 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e826:	4b0d      	ldr	r3, [pc, #52]	@ (800e85c <vTaskDelete+0xe4>)
 800e828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e82c:	601a      	str	r2, [r3, #0]
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e836:	bf00      	nop
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	200015c8 	.word	0x200015c8
 800e844:	20001ab8 	.word	0x20001ab8
 800e848:	20001a70 	.word	0x20001a70
 800e84c:	20001a84 	.word	0x20001a84
 800e850:	20001a9c 	.word	0x20001a9c
 800e854:	20001aa8 	.word	0x20001aa8
 800e858:	20001ac4 	.word	0x20001ac4
 800e85c:	e000ed04 	.word	0xe000ed04

0800e860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e868:	2300      	movs	r3, #0
 800e86a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d018      	beq.n	800e8a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e872:	4b14      	ldr	r3, [pc, #80]	@ (800e8c4 <vTaskDelay+0x64>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00b      	beq.n	800e892 <vTaskDelay+0x32>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	60bb      	str	r3, [r7, #8]
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	e7fd      	b.n	800e88e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e892:	f000 fa99 	bl	800edc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e896:	2100      	movs	r1, #0
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f001 fbb1 	bl	8010000 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e89e:	f000 faa1 	bl	800ede4 <xTaskResumeAll>
 800e8a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d107      	bne.n	800e8ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e8aa:	4b07      	ldr	r3, [pc, #28]	@ (800e8c8 <vTaskDelay+0x68>)
 800e8ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b0:	601a      	str	r2, [r3, #0]
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8ba:	bf00      	nop
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	20001ac4 	.word	0x20001ac4
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b088      	sub	sp, #32
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10b      	bne.n	800e8f6 <eTaskGetState+0x2a>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e2:	f383 8811 	msr	BASEPRI, r3
 800e8e6:	f3bf 8f6f 	isb	sy
 800e8ea:	f3bf 8f4f 	dsb	sy
 800e8ee:	60bb      	str	r3, [r7, #8]
}
 800e8f0:	bf00      	nop
 800e8f2:	bf00      	nop
 800e8f4:	e7fd      	b.n	800e8f2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e8f6:	4b24      	ldr	r3, [pc, #144]	@ (800e988 <eTaskGetState+0xbc>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d102      	bne.n	800e906 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e900:	2300      	movs	r3, #0
 800e902:	77fb      	strb	r3, [r7, #31]
 800e904:	e03a      	b.n	800e97c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800e906:	f002 f8d7 	bl	8010ab8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	695b      	ldr	r3, [r3, #20]
 800e90e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e910:	4b1e      	ldr	r3, [pc, #120]	@ (800e98c <eTaskGetState+0xc0>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e916:	4b1e      	ldr	r3, [pc, #120]	@ (800e990 <eTaskGetState+0xc4>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e91c:	f002 f8fe 	bl	8010b1c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	429a      	cmp	r2, r3
 800e926:	d003      	beq.n	800e930 <eTaskGetState+0x64>
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d102      	bne.n	800e936 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e930:	2302      	movs	r3, #2
 800e932:	77fb      	strb	r3, [r7, #31]
 800e934:	e022      	b.n	800e97c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	4a16      	ldr	r2, [pc, #88]	@ (800e994 <eTaskGetState+0xc8>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d112      	bne.n	800e964 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10b      	bne.n	800e95e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d102      	bne.n	800e958 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800e952:	2302      	movs	r3, #2
 800e954:	77fb      	strb	r3, [r7, #31]
 800e956:	e011      	b.n	800e97c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800e958:	2303      	movs	r3, #3
 800e95a:	77fb      	strb	r3, [r7, #31]
 800e95c:	e00e      	b.n	800e97c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e95e:	2302      	movs	r3, #2
 800e960:	77fb      	strb	r3, [r7, #31]
 800e962:	e00b      	b.n	800e97c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	4a0c      	ldr	r2, [pc, #48]	@ (800e998 <eTaskGetState+0xcc>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d002      	beq.n	800e972 <eTaskGetState+0xa6>
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d102      	bne.n	800e978 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e972:	2304      	movs	r3, #4
 800e974:	77fb      	strb	r3, [r7, #31]
 800e976:	e001      	b.n	800e97c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e978:	2301      	movs	r3, #1
 800e97a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e97c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e97e:	4618      	mov	r0, r3
 800e980:	3720      	adds	r7, #32
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	200015c8 	.word	0x200015c8
 800e98c:	20001a54 	.word	0x20001a54
 800e990:	20001a58 	.word	0x20001a58
 800e994:	20001a88 	.word	0x20001a88
 800e998:	20001a70 	.word	0x20001a70

0800e99c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b088      	sub	sp, #32
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	2b37      	cmp	r3, #55	@ 0x37
 800e9ae:	d90b      	bls.n	800e9c8 <vTaskPrioritySet+0x2c>
	__asm volatile
 800e9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b4:	f383 8811 	msr	BASEPRI, r3
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	60fb      	str	r3, [r7, #12]
}
 800e9c2:	bf00      	nop
 800e9c4:	bf00      	nop
 800e9c6:	e7fd      	b.n	800e9c4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	2b37      	cmp	r3, #55	@ 0x37
 800e9cc:	d901      	bls.n	800e9d2 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9ce:	2337      	movs	r3, #55	@ 0x37
 800e9d0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800e9d2:	f002 f871 	bl	8010ab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d102      	bne.n	800e9e2 <vTaskPrioritySet+0x46>
 800e9dc:	4b3a      	ldr	r3, [pc, #232]	@ (800eac8 <vTaskPrioritySet+0x12c>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	e000      	b.n	800e9e4 <vTaskPrioritySet+0x48>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9ea:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d063      	beq.n	800eabc <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d90d      	bls.n	800ea18 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800e9fc:	4b32      	ldr	r3, [pc, #200]	@ (800eac8 <vTaskPrioritySet+0x12c>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	69ba      	ldr	r2, [r7, #24]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d00f      	beq.n	800ea26 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ea06:	4b30      	ldr	r3, [pc, #192]	@ (800eac8 <vTaskPrioritySet+0x12c>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d309      	bcc.n	800ea26 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800ea12:	2301      	movs	r3, #1
 800ea14:	61fb      	str	r3, [r7, #28]
 800ea16:	e006      	b.n	800ea26 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800ea18:	4b2b      	ldr	r3, [pc, #172]	@ (800eac8 <vTaskPrioritySet+0x12c>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	69ba      	ldr	r2, [r7, #24]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d101      	bne.n	800ea26 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800ea22:	2301      	movs	r3, #1
 800ea24:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea2a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d102      	bne.n	800ea3e <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	683a      	ldr	r2, [r7, #0]
 800ea42:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	699b      	ldr	r3, [r3, #24]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	db04      	blt.n	800ea56 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	6959      	ldr	r1, [r3, #20]
 800ea5a:	693a      	ldr	r2, [r7, #16]
 800ea5c:	4613      	mov	r3, r2
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	009b      	lsls	r3, r3, #2
 800ea64:	4a19      	ldr	r2, [pc, #100]	@ (800eacc <vTaskPrioritySet+0x130>)
 800ea66:	4413      	add	r3, r2
 800ea68:	4299      	cmp	r1, r3
 800ea6a:	d11c      	bne.n	800eaa6 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	3304      	adds	r3, #4
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe fd63 	bl	800d53c <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea7a:	4b15      	ldr	r3, [pc, #84]	@ (800ead0 <vTaskPrioritySet+0x134>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d903      	bls.n	800ea8a <vTaskPrioritySet+0xee>
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea86:	4a12      	ldr	r2, [pc, #72]	@ (800ead0 <vTaskPrioritySet+0x134>)
 800ea88:	6013      	str	r3, [r2, #0]
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8e:	4613      	mov	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4413      	add	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4a0d      	ldr	r2, [pc, #52]	@ (800eacc <vTaskPrioritySet+0x130>)
 800ea98:	441a      	add	r2, r3
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	f7fe fcee 	bl	800d482 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800eaac:	4b09      	ldr	r3, [pc, #36]	@ (800ead4 <vTaskPrioritySet+0x138>)
 800eaae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	f3bf 8f4f 	dsb	sy
 800eab8:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800eabc:	f002 f82e 	bl	8010b1c <vPortExitCritical>
	}
 800eac0:	bf00      	nop
 800eac2:	3720      	adds	r7, #32
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	200015c8 	.word	0x200015c8
 800eacc:	200015cc 	.word	0x200015cc
 800ead0:	20001aa4 	.word	0x20001aa4
 800ead4:	e000ed04 	.word	0xe000ed04

0800ead8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eae0:	f001 ffea 	bl	8010ab8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d102      	bne.n	800eaf0 <vTaskSuspend+0x18>
 800eaea:	4b30      	ldr	r3, [pc, #192]	@ (800ebac <vTaskSuspend+0xd4>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	e000      	b.n	800eaf2 <vTaskSuspend+0x1a>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fe fd1f 	bl	800d53c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d004      	beq.n	800eb10 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	3318      	adds	r3, #24
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fe fd16 	bl	800d53c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	3304      	adds	r3, #4
 800eb14:	4619      	mov	r1, r3
 800eb16:	4826      	ldr	r0, [pc, #152]	@ (800ebb0 <vTaskSuspend+0xd8>)
 800eb18:	f7fe fcb3 	bl	800d482 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d103      	bne.n	800eb30 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800eb30:	f001 fff4 	bl	8010b1c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800eb34:	4b1f      	ldr	r3, [pc, #124]	@ (800ebb4 <vTaskSuspend+0xdc>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d005      	beq.n	800eb48 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800eb3c:	f001 ffbc 	bl	8010ab8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800eb40:	f000 ff2a 	bl	800f998 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800eb44:	f001 ffea 	bl	8010b1c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800eb48:	4b18      	ldr	r3, [pc, #96]	@ (800ebac <vTaskSuspend+0xd4>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d128      	bne.n	800eba4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800eb52:	4b18      	ldr	r3, [pc, #96]	@ (800ebb4 <vTaskSuspend+0xdc>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d018      	beq.n	800eb8c <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800eb5a:	4b17      	ldr	r3, [pc, #92]	@ (800ebb8 <vTaskSuspend+0xe0>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00b      	beq.n	800eb7a <vTaskSuspend+0xa2>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	60bb      	str	r3, [r7, #8]
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	e7fd      	b.n	800eb76 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800eb7a:	4b10      	ldr	r3, [pc, #64]	@ (800ebbc <vTaskSuspend+0xe4>)
 800eb7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb8a:	e00b      	b.n	800eba4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800eb8c:	4b08      	ldr	r3, [pc, #32]	@ (800ebb0 <vTaskSuspend+0xd8>)
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	4b0b      	ldr	r3, [pc, #44]	@ (800ebc0 <vTaskSuspend+0xe8>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d103      	bne.n	800eba0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800eb98:	4b04      	ldr	r3, [pc, #16]	@ (800ebac <vTaskSuspend+0xd4>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	601a      	str	r2, [r3, #0]
	}
 800eb9e:	e001      	b.n	800eba4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800eba0:	f000 fb5c 	bl	800f25c <vTaskSwitchContext>
	}
 800eba4:	bf00      	nop
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	200015c8 	.word	0x200015c8
 800ebb0:	20001a88 	.word	0x20001a88
 800ebb4:	20001aa8 	.word	0x20001aa8
 800ebb8:	20001ac4 	.word	0x20001ac4
 800ebbc:	e000ed04 	.word	0xe000ed04
 800ebc0:	20001a9c 	.word	0x20001a9c

0800ebc4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d10b      	bne.n	800ebf2 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800ebda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebde:	f383 8811 	msr	BASEPRI, r3
 800ebe2:	f3bf 8f6f 	isb	sy
 800ebe6:	f3bf 8f4f 	dsb	sy
 800ebea:	60fb      	str	r3, [r7, #12]
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	e7fd      	b.n	800ebee <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	695b      	ldr	r3, [r3, #20]
 800ebf6:	4a0a      	ldr	r2, [pc, #40]	@ (800ec20 <prvTaskIsTaskSuspended+0x5c>)
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d10a      	bne.n	800ec12 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec00:	4a08      	ldr	r2, [pc, #32]	@ (800ec24 <prvTaskIsTaskSuspended+0x60>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d005      	beq.n	800ec12 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d101      	bne.n	800ec12 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec12:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ec14:	4618      	mov	r0, r3
 800ec16:	371c      	adds	r7, #28
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	20001a88 	.word	0x20001a88
 800ec24:	20001a5c 	.word	0x20001a5c

0800ec28 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10b      	bne.n	800ec52 <vTaskResume+0x2a>
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	60bb      	str	r3, [r7, #8]
}
 800ec4c:	bf00      	nop
 800ec4e:	bf00      	nop
 800ec50:	e7fd      	b.n	800ec4e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ec52:	4b21      	ldr	r3, [pc, #132]	@ (800ecd8 <vTaskResume+0xb0>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d038      	beq.n	800ecce <vTaskResume+0xa6>
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d035      	beq.n	800ecce <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800ec62:	f001 ff29 	bl	8010ab8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	f7ff ffac 	bl	800ebc4 <prvTaskIsTaskSuspended>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d02b      	beq.n	800ecca <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3304      	adds	r3, #4
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fe fc60 	bl	800d53c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec80:	4b16      	ldr	r3, [pc, #88]	@ (800ecdc <vTaskResume+0xb4>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d903      	bls.n	800ec90 <vTaskResume+0x68>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec8c:	4a13      	ldr	r2, [pc, #76]	@ (800ecdc <vTaskResume+0xb4>)
 800ec8e:	6013      	str	r3, [r2, #0]
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec94:	4613      	mov	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	4a10      	ldr	r2, [pc, #64]	@ (800ece0 <vTaskResume+0xb8>)
 800ec9e:	441a      	add	r2, r3
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	3304      	adds	r3, #4
 800eca4:	4619      	mov	r1, r3
 800eca6:	4610      	mov	r0, r2
 800eca8:	f7fe fbeb 	bl	800d482 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecb0:	4b09      	ldr	r3, [pc, #36]	@ (800ecd8 <vTaskResume+0xb0>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d307      	bcc.n	800ecca <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ecba:	4b0a      	ldr	r3, [pc, #40]	@ (800ece4 <vTaskResume+0xbc>)
 800ecbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecc0:	601a      	str	r2, [r3, #0]
 800ecc2:	f3bf 8f4f 	dsb	sy
 800ecc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ecca:	f001 ff27 	bl	8010b1c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecce:	bf00      	nop
 800ecd0:	3710      	adds	r7, #16
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	200015c8 	.word	0x200015c8
 800ecdc:	20001aa4 	.word	0x20001aa4
 800ece0:	200015cc 	.word	0x200015cc
 800ece4:	e000ed04 	.word	0xe000ed04

0800ece8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08a      	sub	sp, #40	@ 0x28
 800ecec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ecf6:	463a      	mov	r2, r7
 800ecf8:	1d39      	adds	r1, r7, #4
 800ecfa:	f107 0308 	add.w	r3, r7, #8
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fe f9a2 	bl	800d048 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68ba      	ldr	r2, [r7, #8]
 800ed0a:	9202      	str	r2, [sp, #8]
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	2300      	movs	r3, #0
 800ed14:	460a      	mov	r2, r1
 800ed16:	4924      	ldr	r1, [pc, #144]	@ (800eda8 <vTaskStartScheduler+0xc0>)
 800ed18:	4824      	ldr	r0, [pc, #144]	@ (800edac <vTaskStartScheduler+0xc4>)
 800ed1a:	f7ff fb6f 	bl	800e3fc <xTaskCreateStatic>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	4a23      	ldr	r2, [pc, #140]	@ (800edb0 <vTaskStartScheduler+0xc8>)
 800ed22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed24:	4b22      	ldr	r3, [pc, #136]	@ (800edb0 <vTaskStartScheduler+0xc8>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d002      	beq.n	800ed32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	617b      	str	r3, [r7, #20]
 800ed30:	e001      	b.n	800ed36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed32:	2300      	movs	r3, #0
 800ed34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d102      	bne.n	800ed42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed3c:	f001 f9b4 	bl	80100a8 <xTimerCreateTimerTask>
 800ed40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d11b      	bne.n	800ed80 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed4c:	f383 8811 	msr	BASEPRI, r3
 800ed50:	f3bf 8f6f 	isb	sy
 800ed54:	f3bf 8f4f 	dsb	sy
 800ed58:	613b      	str	r3, [r7, #16]
}
 800ed5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed5c:	4b15      	ldr	r3, [pc, #84]	@ (800edb4 <vTaskStartScheduler+0xcc>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	3354      	adds	r3, #84	@ 0x54
 800ed62:	4a15      	ldr	r2, [pc, #84]	@ (800edb8 <vTaskStartScheduler+0xd0>)
 800ed64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed66:	4b15      	ldr	r3, [pc, #84]	@ (800edbc <vTaskStartScheduler+0xd4>)
 800ed68:	f04f 32ff 	mov.w	r2, #4294967295
 800ed6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed6e:	4b14      	ldr	r3, [pc, #80]	@ (800edc0 <vTaskStartScheduler+0xd8>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed74:	4b13      	ldr	r3, [pc, #76]	@ (800edc4 <vTaskStartScheduler+0xdc>)
 800ed76:	2200      	movs	r2, #0
 800ed78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed7a:	f001 fdf9 	bl	8010970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed7e:	e00f      	b.n	800eda0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed86:	d10b      	bne.n	800eda0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ed88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed8c:	f383 8811 	msr	BASEPRI, r3
 800ed90:	f3bf 8f6f 	isb	sy
 800ed94:	f3bf 8f4f 	dsb	sy
 800ed98:	60fb      	str	r3, [r7, #12]
}
 800ed9a:	bf00      	nop
 800ed9c:	bf00      	nop
 800ed9e:	e7fd      	b.n	800ed9c <vTaskStartScheduler+0xb4>
}
 800eda0:	bf00      	nop
 800eda2:	3718      	adds	r7, #24
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}
 800eda8:	0801659c 	.word	0x0801659c
 800edac:	0800f6e5 	.word	0x0800f6e5
 800edb0:	20001ac0 	.word	0x20001ac0
 800edb4:	200015c8 	.word	0x200015c8
 800edb8:	2000040c 	.word	0x2000040c
 800edbc:	20001abc 	.word	0x20001abc
 800edc0:	20001aa8 	.word	0x20001aa8
 800edc4:	20001aa0 	.word	0x20001aa0

0800edc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800edc8:	b480      	push	{r7}
 800edca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800edcc:	4b04      	ldr	r3, [pc, #16]	@ (800ede0 <vTaskSuspendAll+0x18>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	3301      	adds	r3, #1
 800edd2:	4a03      	ldr	r2, [pc, #12]	@ (800ede0 <vTaskSuspendAll+0x18>)
 800edd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edd6:	bf00      	nop
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr
 800ede0:	20001ac4 	.word	0x20001ac4

0800ede4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edf2:	4b42      	ldr	r3, [pc, #264]	@ (800eefc <xTaskResumeAll+0x118>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d10b      	bne.n	800ee12 <xTaskResumeAll+0x2e>
	__asm volatile
 800edfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edfe:	f383 8811 	msr	BASEPRI, r3
 800ee02:	f3bf 8f6f 	isb	sy
 800ee06:	f3bf 8f4f 	dsb	sy
 800ee0a:	603b      	str	r3, [r7, #0]
}
 800ee0c:	bf00      	nop
 800ee0e:	bf00      	nop
 800ee10:	e7fd      	b.n	800ee0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee12:	f001 fe51 	bl	8010ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee16:	4b39      	ldr	r3, [pc, #228]	@ (800eefc <xTaskResumeAll+0x118>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	4a37      	ldr	r2, [pc, #220]	@ (800eefc <xTaskResumeAll+0x118>)
 800ee1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee20:	4b36      	ldr	r3, [pc, #216]	@ (800eefc <xTaskResumeAll+0x118>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d162      	bne.n	800eeee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee28:	4b35      	ldr	r3, [pc, #212]	@ (800ef00 <xTaskResumeAll+0x11c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d05e      	beq.n	800eeee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee30:	e02f      	b.n	800ee92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee32:	4b34      	ldr	r3, [pc, #208]	@ (800ef04 <xTaskResumeAll+0x120>)
 800ee34:	68db      	ldr	r3, [r3, #12]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	3318      	adds	r3, #24
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe fb7c 	bl	800d53c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7fe fb77 	bl	800d53c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee52:	4b2d      	ldr	r3, [pc, #180]	@ (800ef08 <xTaskResumeAll+0x124>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d903      	bls.n	800ee62 <xTaskResumeAll+0x7e>
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ef08 <xTaskResumeAll+0x124>)
 800ee60:	6013      	str	r3, [r2, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee66:	4613      	mov	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4a27      	ldr	r2, [pc, #156]	@ (800ef0c <xTaskResumeAll+0x128>)
 800ee70:	441a      	add	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	3304      	adds	r3, #4
 800ee76:	4619      	mov	r1, r3
 800ee78:	4610      	mov	r0, r2
 800ee7a:	f7fe fb02 	bl	800d482 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee82:	4b23      	ldr	r3, [pc, #140]	@ (800ef10 <xTaskResumeAll+0x12c>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d302      	bcc.n	800ee92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ee8c:	4b21      	ldr	r3, [pc, #132]	@ (800ef14 <xTaskResumeAll+0x130>)
 800ee8e:	2201      	movs	r2, #1
 800ee90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee92:	4b1c      	ldr	r3, [pc, #112]	@ (800ef04 <xTaskResumeAll+0x120>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d1cb      	bne.n	800ee32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eea0:	f000 fd7a 	bl	800f998 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eea4:	4b1c      	ldr	r3, [pc, #112]	@ (800ef18 <xTaskResumeAll+0x134>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d010      	beq.n	800eed2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eeb0:	f000 f91a 	bl	800f0e8 <xTaskIncrementTick>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d002      	beq.n	800eec0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800eeba:	4b16      	ldr	r3, [pc, #88]	@ (800ef14 <xTaskResumeAll+0x130>)
 800eebc:	2201      	movs	r2, #1
 800eebe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3b01      	subs	r3, #1
 800eec4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1f1      	bne.n	800eeb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800eecc:	4b12      	ldr	r3, [pc, #72]	@ (800ef18 <xTaskResumeAll+0x134>)
 800eece:	2200      	movs	r2, #0
 800eed0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eed2:	4b10      	ldr	r3, [pc, #64]	@ (800ef14 <xTaskResumeAll+0x130>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d009      	beq.n	800eeee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eeda:	2301      	movs	r3, #1
 800eedc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eede:	4b0f      	ldr	r3, [pc, #60]	@ (800ef1c <xTaskResumeAll+0x138>)
 800eee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eee4:	601a      	str	r2, [r3, #0]
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eeee:	f001 fe15 	bl	8010b1c <vPortExitCritical>

	return xAlreadyYielded;
 800eef2:	68bb      	ldr	r3, [r7, #8]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	20001ac4 	.word	0x20001ac4
 800ef00:	20001a9c 	.word	0x20001a9c
 800ef04:	20001a5c 	.word	0x20001a5c
 800ef08:	20001aa4 	.word	0x20001aa4
 800ef0c:	200015cc 	.word	0x200015cc
 800ef10:	200015c8 	.word	0x200015c8
 800ef14:	20001ab0 	.word	0x20001ab0
 800ef18:	20001aac 	.word	0x20001aac
 800ef1c:	e000ed04 	.word	0xe000ed04

0800ef20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef26:	4b05      	ldr	r3, [pc, #20]	@ (800ef3c <xTaskGetTickCount+0x1c>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef2c:	687b      	ldr	r3, [r7, #4]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	370c      	adds	r7, #12
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	20001aa0 	.word	0x20001aa0

0800ef40 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800ef40:	b480      	push	{r7}
 800ef42:	b08b      	sub	sp, #44	@ 0x2c
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d05b      	beq.n	800f00e <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	61bb      	str	r3, [r7, #24]
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	605a      	str	r2, [r3, #4]
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	685a      	ldr	r2, [r3, #4]
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	3308      	adds	r3, #8
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d104      	bne.n	800ef7a <prvSearchForNameWithinSingleList+0x3a>
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	685a      	ldr	r2, [r3, #4]
 800ef76:	69bb      	ldr	r3, [r7, #24]
 800ef78:	605a      	str	r2, [r3, #4]
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	613b      	str	r3, [r7, #16]
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	685a      	ldr	r2, [r3, #4]
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	605a      	str	r2, [r3, #4]
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	3308      	adds	r3, #8
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d104      	bne.n	800efa6 <prvSearchForNameWithinSingleList+0x66>
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	685a      	ldr	r2, [r3, #4]
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	605a      	str	r2, [r3, #4]
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	68db      	ldr	r3, [r3, #12]
 800efac:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800efae:	2300      	movs	r3, #0
 800efb0:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efb2:	2300      	movs	r3, #0
 800efb4:	623b      	str	r3, [r7, #32]
 800efb6:	e01c      	b.n	800eff2 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800efb8:	68fa      	ldr	r2, [r7, #12]
 800efba:	6a3b      	ldr	r3, [r7, #32]
 800efbc:	4413      	add	r3, r2
 800efbe:	3334      	adds	r3, #52	@ 0x34
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	6a3b      	ldr	r3, [r7, #32]
 800efc8:	4413      	add	r3, r2
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	7afa      	ldrb	r2, [r7, #11]
 800efce:	429a      	cmp	r2, r3
 800efd0:	d002      	beq.n	800efd8 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800efd2:	2301      	movs	r3, #1
 800efd4:	61fb      	str	r3, [r7, #28]
 800efd6:	e006      	b.n	800efe6 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800efd8:	7afb      	ldrb	r3, [r7, #11]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d103      	bne.n	800efe6 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800efe2:	2301      	movs	r3, #1
 800efe4:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efec:	6a3b      	ldr	r3, [r7, #32]
 800efee:	3301      	adds	r3, #1
 800eff0:	623b      	str	r3, [r7, #32]
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	2b0f      	cmp	r3, #15
 800eff6:	d9df      	bls.n	800efb8 <prvSearchForNameWithinSingleList+0x78>
 800eff8:	e000      	b.n	800effc <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800effa:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800effc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800effe:	2b00      	cmp	r3, #0
 800f000:	d104      	bne.n	800f00c <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	429a      	cmp	r2, r3
 800f008:	d1bb      	bne.n	800ef82 <prvSearchForNameWithinSingleList+0x42>
 800f00a:	e000      	b.n	800f00e <prvSearchForNameWithinSingleList+0xce>
					break;
 800f00c:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800f00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f010:	4618      	mov	r0, r3
 800f012:	372c      	adds	r7, #44	@ 0x2c
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b086      	sub	sp, #24
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800f024:	2338      	movs	r3, #56	@ 0x38
 800f026:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7f1 f921 	bl	8000270 <strlen>
 800f02e:	4603      	mov	r3, r0
 800f030:	2b0f      	cmp	r3, #15
 800f032:	d90b      	bls.n	800f04c <xTaskGetHandle+0x30>
	__asm volatile
 800f034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	60fb      	str	r3, [r7, #12]
}
 800f046:	bf00      	nop
 800f048:	bf00      	nop
 800f04a:	e7fd      	b.n	800f048 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800f04c:	f7ff febc 	bl	800edc8 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	3b01      	subs	r3, #1
 800f054:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800f056:	697a      	ldr	r2, [r7, #20]
 800f058:	4613      	mov	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	4413      	add	r3, r2
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	4a1c      	ldr	r2, [pc, #112]	@ (800f0d4 <xTaskGetHandle+0xb8>)
 800f062:	4413      	add	r3, r2
 800f064:	6879      	ldr	r1, [r7, #4]
 800f066:	4618      	mov	r0, r3
 800f068:	f7ff ff6a 	bl	800ef40 <prvSearchForNameWithinSingleList>
 800f06c:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d103      	bne.n	800f07c <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1ea      	bne.n	800f050 <xTaskGetHandle+0x34>
 800f07a:	e000      	b.n	800f07e <xTaskGetHandle+0x62>
					break;
 800f07c:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d106      	bne.n	800f092 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800f084:	4b14      	ldr	r3, [pc, #80]	@ (800f0d8 <xTaskGetHandle+0xbc>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	6879      	ldr	r1, [r7, #4]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7ff ff58 	bl	800ef40 <prvSearchForNameWithinSingleList>
 800f090:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d106      	bne.n	800f0a6 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800f098:	4b10      	ldr	r3, [pc, #64]	@ (800f0dc <xTaskGetHandle+0xc0>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff ff4e 	bl	800ef40 <prvSearchForNameWithinSingleList>
 800f0a4:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d104      	bne.n	800f0b6 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800f0ac:	6879      	ldr	r1, [r7, #4]
 800f0ae:	480c      	ldr	r0, [pc, #48]	@ (800f0e0 <xTaskGetHandle+0xc4>)
 800f0b0:	f7ff ff46 	bl	800ef40 <prvSearchForNameWithinSingleList>
 800f0b4:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d104      	bne.n	800f0c6 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800f0bc:	6879      	ldr	r1, [r7, #4]
 800f0be:	4809      	ldr	r0, [pc, #36]	@ (800f0e4 <xTaskGetHandle+0xc8>)
 800f0c0:	f7ff ff3e 	bl	800ef40 <prvSearchForNameWithinSingleList>
 800f0c4:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800f0c6:	f7ff fe8d 	bl	800ede4 <xTaskResumeAll>

		return pxTCB;
 800f0ca:	693b      	ldr	r3, [r7, #16]
	}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3718      	adds	r7, #24
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	200015cc 	.word	0x200015cc
 800f0d8:	20001a54 	.word	0x20001a54
 800f0dc:	20001a58 	.word	0x20001a58
 800f0e0:	20001a88 	.word	0x20001a88
 800f0e4:	20001a70 	.word	0x20001a70

0800f0e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b086      	sub	sp, #24
 800f0ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0f2:	4b4f      	ldr	r3, [pc, #316]	@ (800f230 <xTaskIncrementTick+0x148>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f040 8090 	bne.w	800f21c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f0fc:	4b4d      	ldr	r3, [pc, #308]	@ (800f234 <xTaskIncrementTick+0x14c>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	3301      	adds	r3, #1
 800f102:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f104:	4a4b      	ldr	r2, [pc, #300]	@ (800f234 <xTaskIncrementTick+0x14c>)
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d121      	bne.n	800f154 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f110:	4b49      	ldr	r3, [pc, #292]	@ (800f238 <xTaskIncrementTick+0x150>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00b      	beq.n	800f132 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	603b      	str	r3, [r7, #0]
}
 800f12c:	bf00      	nop
 800f12e:	bf00      	nop
 800f130:	e7fd      	b.n	800f12e <xTaskIncrementTick+0x46>
 800f132:	4b41      	ldr	r3, [pc, #260]	@ (800f238 <xTaskIncrementTick+0x150>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	60fb      	str	r3, [r7, #12]
 800f138:	4b40      	ldr	r3, [pc, #256]	@ (800f23c <xTaskIncrementTick+0x154>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4a3e      	ldr	r2, [pc, #248]	@ (800f238 <xTaskIncrementTick+0x150>)
 800f13e:	6013      	str	r3, [r2, #0]
 800f140:	4a3e      	ldr	r2, [pc, #248]	@ (800f23c <xTaskIncrementTick+0x154>)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	4b3e      	ldr	r3, [pc, #248]	@ (800f240 <xTaskIncrementTick+0x158>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	3301      	adds	r3, #1
 800f14c:	4a3c      	ldr	r2, [pc, #240]	@ (800f240 <xTaskIncrementTick+0x158>)
 800f14e:	6013      	str	r3, [r2, #0]
 800f150:	f000 fc22 	bl	800f998 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f154:	4b3b      	ldr	r3, [pc, #236]	@ (800f244 <xTaskIncrementTick+0x15c>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d349      	bcc.n	800f1f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f15e:	4b36      	ldr	r3, [pc, #216]	@ (800f238 <xTaskIncrementTick+0x150>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d104      	bne.n	800f172 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f168:	4b36      	ldr	r3, [pc, #216]	@ (800f244 <xTaskIncrementTick+0x15c>)
 800f16a:	f04f 32ff 	mov.w	r2, #4294967295
 800f16e:	601a      	str	r2, [r3, #0]
					break;
 800f170:	e03f      	b.n	800f1f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f172:	4b31      	ldr	r3, [pc, #196]	@ (800f238 <xTaskIncrementTick+0x150>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f182:	693a      	ldr	r2, [r7, #16]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	429a      	cmp	r2, r3
 800f188:	d203      	bcs.n	800f192 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f18a:	4a2e      	ldr	r2, [pc, #184]	@ (800f244 <xTaskIncrementTick+0x15c>)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f190:	e02f      	b.n	800f1f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	3304      	adds	r3, #4
 800f196:	4618      	mov	r0, r3
 800f198:	f7fe f9d0 	bl	800d53c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d004      	beq.n	800f1ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	3318      	adds	r3, #24
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7fe f9c7 	bl	800d53c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1b2:	4b25      	ldr	r3, [pc, #148]	@ (800f248 <xTaskIncrementTick+0x160>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d903      	bls.n	800f1c2 <xTaskIncrementTick+0xda>
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1be:	4a22      	ldr	r2, [pc, #136]	@ (800f248 <xTaskIncrementTick+0x160>)
 800f1c0:	6013      	str	r3, [r2, #0]
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1c6:	4613      	mov	r3, r2
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4413      	add	r3, r2
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	4a1f      	ldr	r2, [pc, #124]	@ (800f24c <xTaskIncrementTick+0x164>)
 800f1d0:	441a      	add	r2, r3
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	3304      	adds	r3, #4
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	4610      	mov	r0, r2
 800f1da:	f7fe f952 	bl	800d482 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e2:	4b1b      	ldr	r3, [pc, #108]	@ (800f250 <xTaskIncrementTick+0x168>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d3b8      	bcc.n	800f15e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1f0:	e7b5      	b.n	800f15e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f1f2:	4b17      	ldr	r3, [pc, #92]	@ (800f250 <xTaskIncrementTick+0x168>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1f8:	4914      	ldr	r1, [pc, #80]	@ (800f24c <xTaskIncrementTick+0x164>)
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	4413      	add	r3, r2
 800f200:	009b      	lsls	r3, r3, #2
 800f202:	440b      	add	r3, r1
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d901      	bls.n	800f20e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f20a:	2301      	movs	r3, #1
 800f20c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f20e:	4b11      	ldr	r3, [pc, #68]	@ (800f254 <xTaskIncrementTick+0x16c>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d007      	beq.n	800f226 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f216:	2301      	movs	r3, #1
 800f218:	617b      	str	r3, [r7, #20]
 800f21a:	e004      	b.n	800f226 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f21c:	4b0e      	ldr	r3, [pc, #56]	@ (800f258 <xTaskIncrementTick+0x170>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	3301      	adds	r3, #1
 800f222:	4a0d      	ldr	r2, [pc, #52]	@ (800f258 <xTaskIncrementTick+0x170>)
 800f224:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f226:	697b      	ldr	r3, [r7, #20]
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3718      	adds	r7, #24
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	20001ac4 	.word	0x20001ac4
 800f234:	20001aa0 	.word	0x20001aa0
 800f238:	20001a54 	.word	0x20001a54
 800f23c:	20001a58 	.word	0x20001a58
 800f240:	20001ab4 	.word	0x20001ab4
 800f244:	20001abc 	.word	0x20001abc
 800f248:	20001aa4 	.word	0x20001aa4
 800f24c:	200015cc 	.word	0x200015cc
 800f250:	200015c8 	.word	0x200015c8
 800f254:	20001ab0 	.word	0x20001ab0
 800f258:	20001aac 	.word	0x20001aac

0800f25c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f262:	4b2b      	ldr	r3, [pc, #172]	@ (800f310 <vTaskSwitchContext+0xb4>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d003      	beq.n	800f272 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f26a:	4b2a      	ldr	r3, [pc, #168]	@ (800f314 <vTaskSwitchContext+0xb8>)
 800f26c:	2201      	movs	r2, #1
 800f26e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f270:	e047      	b.n	800f302 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f272:	4b28      	ldr	r3, [pc, #160]	@ (800f314 <vTaskSwitchContext+0xb8>)
 800f274:	2200      	movs	r2, #0
 800f276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f278:	4b27      	ldr	r3, [pc, #156]	@ (800f318 <vTaskSwitchContext+0xbc>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	60fb      	str	r3, [r7, #12]
 800f27e:	e011      	b.n	800f2a4 <vTaskSwitchContext+0x48>
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10b      	bne.n	800f29e <vTaskSwitchContext+0x42>
	__asm volatile
 800f286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f28a:	f383 8811 	msr	BASEPRI, r3
 800f28e:	f3bf 8f6f 	isb	sy
 800f292:	f3bf 8f4f 	dsb	sy
 800f296:	607b      	str	r3, [r7, #4]
}
 800f298:	bf00      	nop
 800f29a:	bf00      	nop
 800f29c:	e7fd      	b.n	800f29a <vTaskSwitchContext+0x3e>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	491d      	ldr	r1, [pc, #116]	@ (800f31c <vTaskSwitchContext+0xc0>)
 800f2a6:	68fa      	ldr	r2, [r7, #12]
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	009b      	lsls	r3, r3, #2
 800f2b0:	440b      	add	r3, r1
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d0e3      	beq.n	800f280 <vTaskSwitchContext+0x24>
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	4413      	add	r3, r2
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4a16      	ldr	r2, [pc, #88]	@ (800f31c <vTaskSwitchContext+0xc0>)
 800f2c4:	4413      	add	r3, r2
 800f2c6:	60bb      	str	r3, [r7, #8]
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	685a      	ldr	r2, [r3, #4]
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	605a      	str	r2, [r3, #4]
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	3308      	adds	r3, #8
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d104      	bne.n	800f2e8 <vTaskSwitchContext+0x8c>
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	685a      	ldr	r2, [r3, #4]
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	605a      	str	r2, [r3, #4]
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f320 <vTaskSwitchContext+0xc4>)
 800f2f0:	6013      	str	r3, [r2, #0]
 800f2f2:	4a09      	ldr	r2, [pc, #36]	@ (800f318 <vTaskSwitchContext+0xbc>)
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f2f8:	4b09      	ldr	r3, [pc, #36]	@ (800f320 <vTaskSwitchContext+0xc4>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	3354      	adds	r3, #84	@ 0x54
 800f2fe:	4a09      	ldr	r2, [pc, #36]	@ (800f324 <vTaskSwitchContext+0xc8>)
 800f300:	6013      	str	r3, [r2, #0]
}
 800f302:	bf00      	nop
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	20001ac4 	.word	0x20001ac4
 800f314:	20001ab0 	.word	0x20001ab0
 800f318:	20001aa4 	.word	0x20001aa4
 800f31c:	200015cc 	.word	0x200015cc
 800f320:	200015c8 	.word	0x200015c8
 800f324:	2000040c 	.word	0x2000040c

0800f328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10b      	bne.n	800f350 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f33c:	f383 8811 	msr	BASEPRI, r3
 800f340:	f3bf 8f6f 	isb	sy
 800f344:	f3bf 8f4f 	dsb	sy
 800f348:	60fb      	str	r3, [r7, #12]
}
 800f34a:	bf00      	nop
 800f34c:	bf00      	nop
 800f34e:	e7fd      	b.n	800f34c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f350:	4b07      	ldr	r3, [pc, #28]	@ (800f370 <vTaskPlaceOnEventList+0x48>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3318      	adds	r3, #24
 800f356:	4619      	mov	r1, r3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7fe f8b6 	bl	800d4ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f35e:	2101      	movs	r1, #1
 800f360:	6838      	ldr	r0, [r7, #0]
 800f362:	f000 fe4d 	bl	8010000 <prvAddCurrentTaskToDelayedList>
}
 800f366:	bf00      	nop
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	200015c8 	.word	0x200015c8

0800f374 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
 800f37a:	60f8      	str	r0, [r7, #12]
 800f37c:	60b9      	str	r1, [r7, #8]
 800f37e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d10b      	bne.n	800f39e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800f386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f38a:	f383 8811 	msr	BASEPRI, r3
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	f3bf 8f4f 	dsb	sy
 800f396:	617b      	str	r3, [r7, #20]
}
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	e7fd      	b.n	800f39a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f39e:	4b12      	ldr	r3, [pc, #72]	@ (800f3e8 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d10b      	bne.n	800f3be <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800f3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f3bf 8f4f 	dsb	sy
 800f3b6:	613b      	str	r3, [r7, #16]
}
 800f3b8:	bf00      	nop
 800f3ba:	bf00      	nop
 800f3bc:	e7fd      	b.n	800f3ba <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f3be:	4b0b      	ldr	r3, [pc, #44]	@ (800f3ec <vTaskPlaceOnUnorderedEventList+0x78>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3ca:	4b08      	ldr	r3, [pc, #32]	@ (800f3ec <vTaskPlaceOnUnorderedEventList+0x78>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	3318      	adds	r3, #24
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f7fe f855 	bl	800d482 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3d8:	2101      	movs	r1, #1
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f000 fe10 	bl	8010000 <prvAddCurrentTaskToDelayedList>
}
 800f3e0:	bf00      	nop
 800f3e2:	3718      	adds	r7, #24
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	20001ac4 	.word	0x20001ac4
 800f3ec:	200015c8 	.word	0x200015c8

0800f3f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b086      	sub	sp, #24
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10b      	bne.n	800f41a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f406:	f383 8811 	msr	BASEPRI, r3
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	f3bf 8f4f 	dsb	sy
 800f412:	617b      	str	r3, [r7, #20]
}
 800f414:	bf00      	nop
 800f416:	bf00      	nop
 800f418:	e7fd      	b.n	800f416 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f41a:	4b0a      	ldr	r3, [pc, #40]	@ (800f444 <vTaskPlaceOnEventListRestricted+0x54>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	3318      	adds	r3, #24
 800f420:	4619      	mov	r1, r3
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7fe f82d 	bl	800d482 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f42e:	f04f 33ff 	mov.w	r3, #4294967295
 800f432:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f434:	6879      	ldr	r1, [r7, #4]
 800f436:	68b8      	ldr	r0, [r7, #8]
 800f438:	f000 fde2 	bl	8010000 <prvAddCurrentTaskToDelayedList>
	}
 800f43c:	bf00      	nop
 800f43e:	3718      	adds	r7, #24
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	200015c8 	.word	0x200015c8

0800f448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10b      	bne.n	800f476 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f462:	f383 8811 	msr	BASEPRI, r3
 800f466:	f3bf 8f6f 	isb	sy
 800f46a:	f3bf 8f4f 	dsb	sy
 800f46e:	60fb      	str	r3, [r7, #12]
}
 800f470:	bf00      	nop
 800f472:	bf00      	nop
 800f474:	e7fd      	b.n	800f472 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	3318      	adds	r3, #24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe f85e 	bl	800d53c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f480:	4b1d      	ldr	r3, [pc, #116]	@ (800f4f8 <xTaskRemoveFromEventList+0xb0>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d11d      	bne.n	800f4c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	3304      	adds	r3, #4
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe f855 	bl	800d53c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f496:	4b19      	ldr	r3, [pc, #100]	@ (800f4fc <xTaskRemoveFromEventList+0xb4>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d903      	bls.n	800f4a6 <xTaskRemoveFromEventList+0x5e>
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a2:	4a16      	ldr	r2, [pc, #88]	@ (800f4fc <xTaskRemoveFromEventList+0xb4>)
 800f4a4:	6013      	str	r3, [r2, #0]
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	4413      	add	r3, r2
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	4a13      	ldr	r2, [pc, #76]	@ (800f500 <xTaskRemoveFromEventList+0xb8>)
 800f4b4:	441a      	add	r2, r3
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	3304      	adds	r3, #4
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	4610      	mov	r0, r2
 800f4be:	f7fd ffe0 	bl	800d482 <vListInsertEnd>
 800f4c2:	e005      	b.n	800f4d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	3318      	adds	r3, #24
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	480e      	ldr	r0, [pc, #56]	@ (800f504 <xTaskRemoveFromEventList+0xbc>)
 800f4cc:	f7fd ffd9 	bl	800d482 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f508 <xTaskRemoveFromEventList+0xc0>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d905      	bls.n	800f4ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4de:	2301      	movs	r3, #1
 800f4e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f50c <xTaskRemoveFromEventList+0xc4>)
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	e001      	b.n	800f4ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4ee:	697b      	ldr	r3, [r7, #20]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3718      	adds	r7, #24
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20001ac4 	.word	0x20001ac4
 800f4fc:	20001aa4 	.word	0x20001aa4
 800f500:	200015cc 	.word	0x200015cc
 800f504:	20001a5c 	.word	0x20001a5c
 800f508:	200015c8 	.word	0x200015c8
 800f50c:	20001ab0 	.word	0x20001ab0

0800f510 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b086      	sub	sp, #24
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f51a:	4b2a      	ldr	r3, [pc, #168]	@ (800f5c4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d10b      	bne.n	800f53a <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800f522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	613b      	str	r3, [r7, #16]
}
 800f534:	bf00      	nop
 800f536:	bf00      	nop
 800f538:	e7fd      	b.n	800f536 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10b      	bne.n	800f568 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800f550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f554:	f383 8811 	msr	BASEPRI, r3
 800f558:	f3bf 8f6f 	isb	sy
 800f55c:	f3bf 8f4f 	dsb	sy
 800f560:	60fb      	str	r3, [r7, #12]
}
 800f562:	bf00      	nop
 800f564:	bf00      	nop
 800f566:	e7fd      	b.n	800f564 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7fd ffe7 	bl	800d53c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	3304      	adds	r3, #4
 800f572:	4618      	mov	r0, r3
 800f574:	f7fd ffe2 	bl	800d53c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f57c:	4b12      	ldr	r3, [pc, #72]	@ (800f5c8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	429a      	cmp	r2, r3
 800f582:	d903      	bls.n	800f58c <vTaskRemoveFromUnorderedEventList+0x7c>
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f588:	4a0f      	ldr	r2, [pc, #60]	@ (800f5c8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f58a:	6013      	str	r3, [r2, #0]
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f590:	4613      	mov	r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	4413      	add	r3, r2
 800f596:	009b      	lsls	r3, r3, #2
 800f598:	4a0c      	ldr	r2, [pc, #48]	@ (800f5cc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f59a:	441a      	add	r2, r3
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	3304      	adds	r3, #4
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	4610      	mov	r0, r2
 800f5a4:	f7fd ff6d 	bl	800d482 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5ac:	4b08      	ldr	r3, [pc, #32]	@ (800f5d0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d902      	bls.n	800f5bc <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f5b6:	4b07      	ldr	r3, [pc, #28]	@ (800f5d4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	601a      	str	r2, [r3, #0]
	}
}
 800f5bc:	bf00      	nop
 800f5be:	3718      	adds	r7, #24
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20001ac4 	.word	0x20001ac4
 800f5c8:	20001aa4 	.word	0x20001aa4
 800f5cc:	200015cc 	.word	0x200015cc
 800f5d0:	200015c8 	.word	0x200015c8
 800f5d4:	20001ab0 	.word	0x20001ab0

0800f5d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b083      	sub	sp, #12
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5e0:	4b06      	ldr	r3, [pc, #24]	@ (800f5fc <vTaskInternalSetTimeOutState+0x24>)
 800f5e2:	681a      	ldr	r2, [r3, #0]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5e8:	4b05      	ldr	r3, [pc, #20]	@ (800f600 <vTaskInternalSetTimeOutState+0x28>)
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	605a      	str	r2, [r3, #4]
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	20001ab4 	.word	0x20001ab4
 800f600:	20001aa0 	.word	0x20001aa0

0800f604 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10b      	bne.n	800f62c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	613b      	str	r3, [r7, #16]
}
 800f626:	bf00      	nop
 800f628:	bf00      	nop
 800f62a:	e7fd      	b.n	800f628 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10b      	bne.n	800f64a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	60fb      	str	r3, [r7, #12]
}
 800f644:	bf00      	nop
 800f646:	bf00      	nop
 800f648:	e7fd      	b.n	800f646 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f64a:	f001 fa35 	bl	8010ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f64e:	4b1d      	ldr	r3, [pc, #116]	@ (800f6c4 <xTaskCheckForTimeOut+0xc0>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	69ba      	ldr	r2, [r7, #24]
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f666:	d102      	bne.n	800f66e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f668:	2300      	movs	r3, #0
 800f66a:	61fb      	str	r3, [r7, #28]
 800f66c:	e023      	b.n	800f6b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681a      	ldr	r2, [r3, #0]
 800f672:	4b15      	ldr	r3, [pc, #84]	@ (800f6c8 <xTaskCheckForTimeOut+0xc4>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	429a      	cmp	r2, r3
 800f678:	d007      	beq.n	800f68a <xTaskCheckForTimeOut+0x86>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	69ba      	ldr	r2, [r7, #24]
 800f680:	429a      	cmp	r2, r3
 800f682:	d302      	bcc.n	800f68a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f684:	2301      	movs	r3, #1
 800f686:	61fb      	str	r3, [r7, #28]
 800f688:	e015      	b.n	800f6b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	697a      	ldr	r2, [r7, #20]
 800f690:	429a      	cmp	r2, r3
 800f692:	d20b      	bcs.n	800f6ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	1ad2      	subs	r2, r2, r3
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7ff ff99 	bl	800f5d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	61fb      	str	r3, [r7, #28]
 800f6aa:	e004      	b.n	800f6b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f6b6:	f001 fa31 	bl	8010b1c <vPortExitCritical>

	return xReturn;
 800f6ba:	69fb      	ldr	r3, [r7, #28]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3720      	adds	r7, #32
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}
 800f6c4:	20001aa0 	.word	0x20001aa0
 800f6c8:	20001ab4 	.word	0x20001ab4

0800f6cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6d0:	4b03      	ldr	r3, [pc, #12]	@ (800f6e0 <vTaskMissedYield+0x14>)
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	601a      	str	r2, [r3, #0]
}
 800f6d6:	bf00      	nop
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	20001ab0 	.word	0x20001ab0

0800f6e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b082      	sub	sp, #8
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6ec:	f000 f852 	bl	800f794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6f0:	4b06      	ldr	r3, [pc, #24]	@ (800f70c <prvIdleTask+0x28>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d9f9      	bls.n	800f6ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800f6f8:	4b05      	ldr	r3, [pc, #20]	@ (800f710 <prvIdleTask+0x2c>)
 800f6fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6fe:	601a      	str	r2, [r3, #0]
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f708:	e7f0      	b.n	800f6ec <prvIdleTask+0x8>
 800f70a:	bf00      	nop
 800f70c:	200015cc 	.word	0x200015cc
 800f710:	e000ed04 	.word	0xe000ed04

0800f714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f71a:	2300      	movs	r3, #0
 800f71c:	607b      	str	r3, [r7, #4]
 800f71e:	e00c      	b.n	800f73a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f720:	687a      	ldr	r2, [r7, #4]
 800f722:	4613      	mov	r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4413      	add	r3, r2
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	4a12      	ldr	r2, [pc, #72]	@ (800f774 <prvInitialiseTaskLists+0x60>)
 800f72c:	4413      	add	r3, r2
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd fe7a 	bl	800d428 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	3301      	adds	r3, #1
 800f738:	607b      	str	r3, [r7, #4]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2b37      	cmp	r3, #55	@ 0x37
 800f73e:	d9ef      	bls.n	800f720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f740:	480d      	ldr	r0, [pc, #52]	@ (800f778 <prvInitialiseTaskLists+0x64>)
 800f742:	f7fd fe71 	bl	800d428 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f746:	480d      	ldr	r0, [pc, #52]	@ (800f77c <prvInitialiseTaskLists+0x68>)
 800f748:	f7fd fe6e 	bl	800d428 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f74c:	480c      	ldr	r0, [pc, #48]	@ (800f780 <prvInitialiseTaskLists+0x6c>)
 800f74e:	f7fd fe6b 	bl	800d428 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f752:	480c      	ldr	r0, [pc, #48]	@ (800f784 <prvInitialiseTaskLists+0x70>)
 800f754:	f7fd fe68 	bl	800d428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f758:	480b      	ldr	r0, [pc, #44]	@ (800f788 <prvInitialiseTaskLists+0x74>)
 800f75a:	f7fd fe65 	bl	800d428 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f75e:	4b0b      	ldr	r3, [pc, #44]	@ (800f78c <prvInitialiseTaskLists+0x78>)
 800f760:	4a05      	ldr	r2, [pc, #20]	@ (800f778 <prvInitialiseTaskLists+0x64>)
 800f762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f764:	4b0a      	ldr	r3, [pc, #40]	@ (800f790 <prvInitialiseTaskLists+0x7c>)
 800f766:	4a05      	ldr	r2, [pc, #20]	@ (800f77c <prvInitialiseTaskLists+0x68>)
 800f768:	601a      	str	r2, [r3, #0]
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	200015cc 	.word	0x200015cc
 800f778:	20001a2c 	.word	0x20001a2c
 800f77c:	20001a40 	.word	0x20001a40
 800f780:	20001a5c 	.word	0x20001a5c
 800f784:	20001a70 	.word	0x20001a70
 800f788:	20001a88 	.word	0x20001a88
 800f78c:	20001a54 	.word	0x20001a54
 800f790:	20001a58 	.word	0x20001a58

0800f794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b082      	sub	sp, #8
 800f798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f79a:	e019      	b.n	800f7d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f79c:	f001 f98c 	bl	8010ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a0:	4b10      	ldr	r3, [pc, #64]	@ (800f7e4 <prvCheckTasksWaitingTermination+0x50>)
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7fd fec5 	bl	800d53c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f7e8 <prvCheckTasksWaitingTermination+0x54>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	3b01      	subs	r3, #1
 800f7b8:	4a0b      	ldr	r2, [pc, #44]	@ (800f7e8 <prvCheckTasksWaitingTermination+0x54>)
 800f7ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f7ec <prvCheckTasksWaitingTermination+0x58>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	4a0a      	ldr	r2, [pc, #40]	@ (800f7ec <prvCheckTasksWaitingTermination+0x58>)
 800f7c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7c6:	f001 f9a9 	bl	8010b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f8ae 	bl	800f92c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7d0:	4b06      	ldr	r3, [pc, #24]	@ (800f7ec <prvCheckTasksWaitingTermination+0x58>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1e1      	bne.n	800f79c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	20001a70 	.word	0x20001a70
 800f7e8:	20001a9c 	.word	0x20001a9c
 800f7ec:	20001a84 	.word	0x20001a84

0800f7f0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b086      	sub	sp, #24
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d102      	bne.n	800f80a <vTaskGetInfo+0x1a>
 800f804:	4b2c      	ldr	r3, [pc, #176]	@ (800f8b8 <vTaskGetInfo+0xc8>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	e000      	b.n	800f80c <vTaskGetInfo+0x1c>
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	697a      	ldr	r2, [r7, #20]
 800f812:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	2200      	movs	r2, #0
 800f842:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800f844:	78fb      	ldrb	r3, [r7, #3]
 800f846:	2b05      	cmp	r3, #5
 800f848:	d01a      	beq.n	800f880 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800f84a:	4b1b      	ldr	r3, [pc, #108]	@ (800f8b8 <vTaskGetInfo+0xc8>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	697a      	ldr	r2, [r7, #20]
 800f850:	429a      	cmp	r2, r3
 800f852:	d103      	bne.n	800f85c <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	2200      	movs	r2, #0
 800f858:	731a      	strb	r2, [r3, #12]
 800f85a:	e018      	b.n	800f88e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	78fa      	ldrb	r2, [r7, #3]
 800f860:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800f862:	78fb      	ldrb	r3, [r7, #3]
 800f864:	2b03      	cmp	r3, #3
 800f866:	d112      	bne.n	800f88e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800f868:	f7ff faae 	bl	800edc8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f870:	2b00      	cmp	r3, #0
 800f872:	d002      	beq.n	800f87a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	2202      	movs	r2, #2
 800f878:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800f87a:	f7ff fab3 	bl	800ede4 <xTaskResumeAll>
 800f87e:	e006      	b.n	800f88e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800f880:	6978      	ldr	r0, [r7, #20]
 800f882:	f7ff f823 	bl	800e8cc <eTaskGetState>
 800f886:	4603      	mov	r3, r0
 800f888:	461a      	mov	r2, r3
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d009      	beq.n	800f8a8 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f898:	4618      	mov	r0, r3
 800f89a:	f000 f80f 	bl	800f8bc <prvTaskCheckFreeStackSpace>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800f8a6:	e002      	b.n	800f8ae <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	841a      	strh	r2, [r3, #32]
	}
 800f8ae:	bf00      	nop
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	200015c8 	.word	0x200015c8

0800f8bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f8bc:	b480      	push	{r7}
 800f8be:	b085      	sub	sp, #20
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f8c8:	e005      	b.n	800f8d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	2ba5      	cmp	r3, #165	@ 0xa5
 800f8dc:	d0f5      	beq.n	800f8ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	089b      	lsrs	r3, r3, #2
 800f8e2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	b29b      	uxth	r3, r3
	}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3714      	adds	r7, #20
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr

0800f8f4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b086      	sub	sp, #24
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d102      	bne.n	800f908 <uxTaskGetStackHighWaterMark+0x14>
 800f902:	4b09      	ldr	r3, [pc, #36]	@ (800f928 <uxTaskGetStackHighWaterMark+0x34>)
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	e000      	b.n	800f90a <uxTaskGetStackHighWaterMark+0x16>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f910:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f7ff ffd2 	bl	800f8bc <prvTaskCheckFreeStackSpace>
 800f918:	4603      	mov	r3, r0
 800f91a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800f91c:	68fb      	ldr	r3, [r7, #12]
	}
 800f91e:	4618      	mov	r0, r3
 800f920:	3718      	adds	r7, #24
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	200015c8 	.word	0x200015c8

0800f92c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3354      	adds	r3, #84	@ 0x54
 800f938:	4618      	mov	r0, r3
 800f93a:	f003 fc57 	bl	80131ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f944:	2b00      	cmp	r3, #0
 800f946:	d108      	bne.n	800f95a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f94c:	4618      	mov	r0, r3
 800f94e:	f001 faa3 	bl	8010e98 <vPortFree>
				vPortFree( pxTCB );
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f001 faa0 	bl	8010e98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f958:	e019      	b.n	800f98e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f960:	2b01      	cmp	r3, #1
 800f962:	d103      	bne.n	800f96c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f001 fa97 	bl	8010e98 <vPortFree>
	}
 800f96a:	e010      	b.n	800f98e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f972:	2b02      	cmp	r3, #2
 800f974:	d00b      	beq.n	800f98e <prvDeleteTCB+0x62>
	__asm volatile
 800f976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	60fb      	str	r3, [r7, #12]
}
 800f988:	bf00      	nop
 800f98a:	bf00      	nop
 800f98c:	e7fd      	b.n	800f98a <prvDeleteTCB+0x5e>
	}
 800f98e:	bf00      	nop
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
	...

0800f998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f99e:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d0 <prvResetNextTaskUnblockTime+0x38>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d104      	bne.n	800f9b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9a8:	4b0a      	ldr	r3, [pc, #40]	@ (800f9d4 <prvResetNextTaskUnblockTime+0x3c>)
 800f9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9b0:	e008      	b.n	800f9c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9b2:	4b07      	ldr	r3, [pc, #28]	@ (800f9d0 <prvResetNextTaskUnblockTime+0x38>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	4a04      	ldr	r2, [pc, #16]	@ (800f9d4 <prvResetNextTaskUnblockTime+0x3c>)
 800f9c2:	6013      	str	r3, [r2, #0]
}
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	20001a54 	.word	0x20001a54
 800f9d4:	20001abc 	.word	0x20001abc

0800f9d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9de:	4b0b      	ldr	r3, [pc, #44]	@ (800fa0c <xTaskGetSchedulerState+0x34>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d102      	bne.n	800f9ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	607b      	str	r3, [r7, #4]
 800f9ea:	e008      	b.n	800f9fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9ec:	4b08      	ldr	r3, [pc, #32]	@ (800fa10 <xTaskGetSchedulerState+0x38>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d102      	bne.n	800f9fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f9f4:	2302      	movs	r3, #2
 800f9f6:	607b      	str	r3, [r7, #4]
 800f9f8:	e001      	b.n	800f9fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f9fe:	687b      	ldr	r3, [r7, #4]
	}
 800fa00:	4618      	mov	r0, r3
 800fa02:	370c      	adds	r7, #12
 800fa04:	46bd      	mov	sp, r7
 800fa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0a:	4770      	bx	lr
 800fa0c:	20001aa8 	.word	0x20001aa8
 800fa10:	20001ac4 	.word	0x20001ac4

0800fa14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa20:	2300      	movs	r3, #0
 800fa22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d051      	beq.n	800face <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa2e:	4b2a      	ldr	r3, [pc, #168]	@ (800fad8 <xTaskPriorityInherit+0xc4>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d241      	bcs.n	800fabc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	699b      	ldr	r3, [r3, #24]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	db06      	blt.n	800fa4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa40:	4b25      	ldr	r3, [pc, #148]	@ (800fad8 <xTaskPriorityInherit+0xc4>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	6959      	ldr	r1, [r3, #20]
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa56:	4613      	mov	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	4413      	add	r3, r2
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	4a1f      	ldr	r2, [pc, #124]	@ (800fadc <xTaskPriorityInherit+0xc8>)
 800fa60:	4413      	add	r3, r2
 800fa62:	4299      	cmp	r1, r3
 800fa64:	d122      	bne.n	800faac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	3304      	adds	r3, #4
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7fd fd66 	bl	800d53c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa70:	4b19      	ldr	r3, [pc, #100]	@ (800fad8 <xTaskPriorityInherit+0xc4>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa7a:	68bb      	ldr	r3, [r7, #8]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa7e:	4b18      	ldr	r3, [pc, #96]	@ (800fae0 <xTaskPriorityInherit+0xcc>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d903      	bls.n	800fa8e <xTaskPriorityInherit+0x7a>
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa8a:	4a15      	ldr	r2, [pc, #84]	@ (800fae0 <xTaskPriorityInherit+0xcc>)
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa92:	4613      	mov	r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	4413      	add	r3, r2
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	4a10      	ldr	r2, [pc, #64]	@ (800fadc <xTaskPriorityInherit+0xc8>)
 800fa9c:	441a      	add	r2, r3
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	3304      	adds	r3, #4
 800faa2:	4619      	mov	r1, r3
 800faa4:	4610      	mov	r0, r2
 800faa6:	f7fd fcec 	bl	800d482 <vListInsertEnd>
 800faaa:	e004      	b.n	800fab6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800faac:	4b0a      	ldr	r3, [pc, #40]	@ (800fad8 <xTaskPriorityInherit+0xc4>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fab6:	2301      	movs	r3, #1
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	e008      	b.n	800face <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fac0:	4b05      	ldr	r3, [pc, #20]	@ (800fad8 <xTaskPriorityInherit+0xc4>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d201      	bcs.n	800face <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800faca:	2301      	movs	r3, #1
 800facc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800face:	68fb      	ldr	r3, [r7, #12]
	}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	200015c8 	.word	0x200015c8
 800fadc:	200015cc 	.word	0x200015cc
 800fae0:	20001aa4 	.word	0x20001aa4

0800fae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800faf0:	2300      	movs	r3, #0
 800faf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d058      	beq.n	800fbac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fafa:	4b2f      	ldr	r3, [pc, #188]	@ (800fbb8 <xTaskPriorityDisinherit+0xd4>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	693a      	ldr	r2, [r7, #16]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d00b      	beq.n	800fb1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	60fb      	str	r3, [r7, #12]
}
 800fb16:	bf00      	nop
 800fb18:	bf00      	nop
 800fb1a:	e7fd      	b.n	800fb18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d10b      	bne.n	800fb3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	60bb      	str	r3, [r7, #8]
}
 800fb36:	bf00      	nop
 800fb38:	bf00      	nop
 800fb3a:	e7fd      	b.n	800fb38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb40:	1e5a      	subs	r2, r3, #1
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d02c      	beq.n	800fbac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d128      	bne.n	800fbac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	3304      	adds	r3, #4
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fd fcec 	bl	800d53c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb7c:	4b0f      	ldr	r3, [pc, #60]	@ (800fbbc <xTaskPriorityDisinherit+0xd8>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d903      	bls.n	800fb8c <xTaskPriorityDisinherit+0xa8>
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb88:	4a0c      	ldr	r2, [pc, #48]	@ (800fbbc <xTaskPriorityDisinherit+0xd8>)
 800fb8a:	6013      	str	r3, [r2, #0]
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb90:	4613      	mov	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	4413      	add	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4a09      	ldr	r2, [pc, #36]	@ (800fbc0 <xTaskPriorityDisinherit+0xdc>)
 800fb9a:	441a      	add	r2, r3
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	3304      	adds	r3, #4
 800fba0:	4619      	mov	r1, r3
 800fba2:	4610      	mov	r0, r2
 800fba4:	f7fd fc6d 	bl	800d482 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbac:	697b      	ldr	r3, [r7, #20]
	}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	200015c8 	.word	0x200015c8
 800fbbc:	20001aa4 	.word	0x20001aa4
 800fbc0:	200015cc 	.word	0x200015cc

0800fbc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b088      	sub	sp, #32
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d06c      	beq.n	800fcb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d10b      	bne.n	800fbfc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	60fb      	str	r3, [r7, #12]
}
 800fbf6:	bf00      	nop
 800fbf8:	bf00      	nop
 800fbfa:	e7fd      	b.n	800fbf8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fbfc:	69bb      	ldr	r3, [r7, #24]
 800fbfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d902      	bls.n	800fc0c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	61fb      	str	r3, [r7, #28]
 800fc0a:	e002      	b.n	800fc12 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc0c:	69bb      	ldr	r3, [r7, #24]
 800fc0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc10:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc16:	69fa      	ldr	r2, [r7, #28]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d04c      	beq.n	800fcb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc1c:	69bb      	ldr	r3, [r7, #24]
 800fc1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc20:	697a      	ldr	r2, [r7, #20]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	d147      	bne.n	800fcb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc26:	4b26      	ldr	r3, [pc, #152]	@ (800fcc0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	69ba      	ldr	r2, [r7, #24]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d10b      	bne.n	800fc48 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc34:	f383 8811 	msr	BASEPRI, r3
 800fc38:	f3bf 8f6f 	isb	sy
 800fc3c:	f3bf 8f4f 	dsb	sy
 800fc40:	60bb      	str	r3, [r7, #8]
}
 800fc42:	bf00      	nop
 800fc44:	bf00      	nop
 800fc46:	e7fd      	b.n	800fc44 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc48:	69bb      	ldr	r3, [r7, #24]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc4e:	69bb      	ldr	r3, [r7, #24]
 800fc50:	69fa      	ldr	r2, [r7, #28]
 800fc52:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	699b      	ldr	r3, [r3, #24]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	db04      	blt.n	800fc66 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	6959      	ldr	r1, [r3, #20]
 800fc6a:	693a      	ldr	r2, [r7, #16]
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	4413      	add	r3, r2
 800fc72:	009b      	lsls	r3, r3, #2
 800fc74:	4a13      	ldr	r2, [pc, #76]	@ (800fcc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc76:	4413      	add	r3, r2
 800fc78:	4299      	cmp	r1, r3
 800fc7a:	d11c      	bne.n	800fcb6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	3304      	adds	r3, #4
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fd fc5b 	bl	800d53c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800fcc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d903      	bls.n	800fc9a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fc92:	69bb      	ldr	r3, [r7, #24]
 800fc94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc96:	4a0c      	ldr	r2, [pc, #48]	@ (800fcc8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc9e:	4613      	mov	r3, r2
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4413      	add	r3, r2
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	4a07      	ldr	r2, [pc, #28]	@ (800fcc4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fca8:	441a      	add	r2, r3
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	3304      	adds	r3, #4
 800fcae:	4619      	mov	r1, r3
 800fcb0:	4610      	mov	r0, r2
 800fcb2:	f7fd fbe6 	bl	800d482 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcb6:	bf00      	nop
 800fcb8:	3720      	adds	r7, #32
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200015c8 	.word	0x200015c8
 800fcc4:	200015cc 	.word	0x200015cc
 800fcc8:	20001aa4 	.word	0x20001aa4

0800fccc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800fcd2:	4b09      	ldr	r3, [pc, #36]	@ (800fcf8 <uxTaskResetEventItemValue+0x2c>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcda:	4b07      	ldr	r3, [pc, #28]	@ (800fcf8 <uxTaskResetEventItemValue+0x2c>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce0:	4b05      	ldr	r3, [pc, #20]	@ (800fcf8 <uxTaskResetEventItemValue+0x2c>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fce8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800fcea:	687b      	ldr	r3, [r7, #4]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	370c      	adds	r7, #12
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr
 800fcf8:	200015c8 	.word	0x200015c8

0800fcfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fcfc:	b480      	push	{r7}
 800fcfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd00:	4b07      	ldr	r3, [pc, #28]	@ (800fd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d004      	beq.n	800fd12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd08:	4b05      	ldr	r3, [pc, #20]	@ (800fd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd0e:	3201      	adds	r2, #1
 800fd10:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd12:	4b03      	ldr	r3, [pc, #12]	@ (800fd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd14:	681b      	ldr	r3, [r3, #0]
	}
 800fd16:	4618      	mov	r0, r3
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	200015c8 	.word	0x200015c8

0800fd24 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b084      	sub	sp, #16
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fd2e:	f000 fec3 	bl	8010ab8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fd32:	4b20      	ldr	r3, [pc, #128]	@ (800fdb4 <ulTaskNotifyTake+0x90>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d113      	bne.n	800fd66 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fd3e:	4b1d      	ldr	r3, [pc, #116]	@ (800fdb4 <ulTaskNotifyTake+0x90>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2201      	movs	r2, #1
 800fd44:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00b      	beq.n	800fd66 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd4e:	2101      	movs	r1, #1
 800fd50:	6838      	ldr	r0, [r7, #0]
 800fd52:	f000 f955 	bl	8010000 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fd56:	4b18      	ldr	r3, [pc, #96]	@ (800fdb8 <ulTaskNotifyTake+0x94>)
 800fd58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd5c:	601a      	str	r2, [r3, #0]
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fd66:	f000 fed9 	bl	8010b1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fd6a:	f000 fea5 	bl	8010ab8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fd6e:	4b11      	ldr	r3, [pc, #68]	@ (800fdb4 <ulTaskNotifyTake+0x90>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd76:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00e      	beq.n	800fd9c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d005      	beq.n	800fd90 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fd84:	4b0b      	ldr	r3, [pc, #44]	@ (800fdb4 <ulTaskNotifyTake+0x90>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2200      	movs	r2, #0
 800fd8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800fd8e:	e005      	b.n	800fd9c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800fd90:	4b08      	ldr	r3, [pc, #32]	@ (800fdb4 <ulTaskNotifyTake+0x90>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68fa      	ldr	r2, [r7, #12]
 800fd96:	3a01      	subs	r2, #1
 800fd98:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd9c:	4b05      	ldr	r3, [pc, #20]	@ (800fdb4 <ulTaskNotifyTake+0x90>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2200      	movs	r2, #0
 800fda2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800fda6:	f000 feb9 	bl	8010b1c <vPortExitCritical>

		return ulReturn;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
	}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3710      	adds	r7, #16
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	200015c8 	.word	0x200015c8
 800fdb8:	e000ed04 	.word	0xe000ed04

0800fdbc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b086      	sub	sp, #24
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
 800fdc8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fdca:	f000 fe75 	bl	8010ab8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fdce:	4b29      	ldr	r3, [pc, #164]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fdd6:	b2db      	uxtb	r3, r3
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	d01c      	beq.n	800fe16 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fddc:	4b25      	ldr	r3, [pc, #148]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	43d2      	mvns	r2, r2
 800fde8:	400a      	ands	r2, r1
 800fdea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fdee:	4b21      	ldr	r3, [pc, #132]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2201      	movs	r2, #1
 800fdf4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d00b      	beq.n	800fe16 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fdfe:	2101      	movs	r1, #1
 800fe00:	6838      	ldr	r0, [r7, #0]
 800fe02:	f000 f8fd 	bl	8010000 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fe06:	4b1c      	ldr	r3, [pc, #112]	@ (800fe78 <xTaskNotifyWait+0xbc>)
 800fe08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fe16:	f000 fe81 	bl	8010b1c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fe1a:	f000 fe4d 	bl	8010ab8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d005      	beq.n	800fe30 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fe24:	4b13      	ldr	r3, [pc, #76]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fe30:	4b10      	ldr	r3, [pc, #64]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	d002      	beq.n	800fe44 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	617b      	str	r3, [r7, #20]
 800fe42:	e00a      	b.n	800fe5a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fe44:	4b0b      	ldr	r3, [pc, #44]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	43d2      	mvns	r2, r2
 800fe50:	400a      	ands	r2, r1
 800fe52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800fe56:	2301      	movs	r3, #1
 800fe58:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe5a:	4b06      	ldr	r3, [pc, #24]	@ (800fe74 <xTaskNotifyWait+0xb8>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800fe64:	f000 fe5a 	bl	8010b1c <vPortExitCritical>

		return xReturn;
 800fe68:	697b      	ldr	r3, [r7, #20]
	}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3718      	adds	r7, #24
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	200015c8 	.word	0x200015c8
 800fe78:	e000ed04 	.word	0xe000ed04

0800fe7c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08a      	sub	sp, #40	@ 0x28
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	603b      	str	r3, [r7, #0]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10b      	bne.n	800feae <xTaskGenericNotify+0x32>
	__asm volatile
 800fe96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe9a:	f383 8811 	msr	BASEPRI, r3
 800fe9e:	f3bf 8f6f 	isb	sy
 800fea2:	f3bf 8f4f 	dsb	sy
 800fea6:	61bb      	str	r3, [r7, #24]
}
 800fea8:	bf00      	nop
 800feaa:	bf00      	nop
 800feac:	e7fd      	b.n	800feaa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800feb2:	f000 fe01 	bl	8010ab8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d004      	beq.n	800fec6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800febc:	6a3b      	ldr	r3, [r7, #32]
 800febe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fec6:	6a3b      	ldr	r3, [r7, #32]
 800fec8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fecc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	2202      	movs	r2, #2
 800fed2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	2b04      	cmp	r3, #4
 800feda:	d82e      	bhi.n	800ff3a <xTaskGenericNotify+0xbe>
 800fedc:	a201      	add	r2, pc, #4	@ (adr r2, 800fee4 <xTaskGenericNotify+0x68>)
 800fede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee2:	bf00      	nop
 800fee4:	0800ff5f 	.word	0x0800ff5f
 800fee8:	0800fef9 	.word	0x0800fef9
 800feec:	0800ff0b 	.word	0x0800ff0b
 800fef0:	0800ff1b 	.word	0x0800ff1b
 800fef4:	0800ff25 	.word	0x0800ff25
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fef8:	6a3b      	ldr	r3, [r7, #32]
 800fefa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	431a      	orrs	r2, r3
 800ff02:	6a3b      	ldr	r3, [r7, #32]
 800ff04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff08:	e02c      	b.n	800ff64 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff10:	1c5a      	adds	r2, r3, #1
 800ff12:	6a3b      	ldr	r3, [r7, #32]
 800ff14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff18:	e024      	b.n	800ff64 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	68ba      	ldr	r2, [r7, #8]
 800ff1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff22:	e01f      	b.n	800ff64 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ff24:	7ffb      	ldrb	r3, [r7, #31]
 800ff26:	2b02      	cmp	r3, #2
 800ff28:	d004      	beq.n	800ff34 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	68ba      	ldr	r2, [r7, #8]
 800ff2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ff32:	e017      	b.n	800ff64 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ff34:	2300      	movs	r3, #0
 800ff36:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ff38:	e014      	b.n	800ff64 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ff3a:	6a3b      	ldr	r3, [r7, #32]
 800ff3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff44:	d00d      	beq.n	800ff62 <xTaskGenericNotify+0xe6>
	__asm volatile
 800ff46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff4a:	f383 8811 	msr	BASEPRI, r3
 800ff4e:	f3bf 8f6f 	isb	sy
 800ff52:	f3bf 8f4f 	dsb	sy
 800ff56:	617b      	str	r3, [r7, #20]
}
 800ff58:	bf00      	nop
 800ff5a:	bf00      	nop
 800ff5c:	e7fd      	b.n	800ff5a <xTaskGenericNotify+0xde>
					break;
 800ff5e:	bf00      	nop
 800ff60:	e000      	b.n	800ff64 <xTaskGenericNotify+0xe8>

					break;
 800ff62:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ff64:	7ffb      	ldrb	r3, [r7, #31]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d13b      	bne.n	800ffe2 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff6a:	6a3b      	ldr	r3, [r7, #32]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f7fd fae4 	bl	800d53c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ff74:	6a3b      	ldr	r3, [r7, #32]
 800ff76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff78:	4b1d      	ldr	r3, [pc, #116]	@ (800fff0 <xTaskGenericNotify+0x174>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d903      	bls.n	800ff88 <xTaskGenericNotify+0x10c>
 800ff80:	6a3b      	ldr	r3, [r7, #32]
 800ff82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff84:	4a1a      	ldr	r2, [pc, #104]	@ (800fff0 <xTaskGenericNotify+0x174>)
 800ff86:	6013      	str	r3, [r2, #0]
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff8c:	4613      	mov	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	4413      	add	r3, r2
 800ff92:	009b      	lsls	r3, r3, #2
 800ff94:	4a17      	ldr	r2, [pc, #92]	@ (800fff4 <xTaskGenericNotify+0x178>)
 800ff96:	441a      	add	r2, r3
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	f7fd fa6f 	bl	800d482 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ffa4:	6a3b      	ldr	r3, [r7, #32]
 800ffa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d00b      	beq.n	800ffc4 <xTaskGenericNotify+0x148>
	__asm volatile
 800ffac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb0:	f383 8811 	msr	BASEPRI, r3
 800ffb4:	f3bf 8f6f 	isb	sy
 800ffb8:	f3bf 8f4f 	dsb	sy
 800ffbc:	613b      	str	r3, [r7, #16]
}
 800ffbe:	bf00      	nop
 800ffc0:	bf00      	nop
 800ffc2:	e7fd      	b.n	800ffc0 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffc4:	6a3b      	ldr	r3, [r7, #32]
 800ffc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffc8:	4b0b      	ldr	r3, [pc, #44]	@ (800fff8 <xTaskGenericNotify+0x17c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d907      	bls.n	800ffe2 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ffd2:	4b0a      	ldr	r3, [pc, #40]	@ (800fffc <xTaskGenericNotify+0x180>)
 800ffd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffd8:	601a      	str	r2, [r3, #0]
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ffe2:	f000 fd9b 	bl	8010b1c <vPortExitCritical>

		return xReturn;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3728      	adds	r7, #40	@ 0x28
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20001aa4 	.word	0x20001aa4
 800fff4:	200015cc 	.word	0x200015cc
 800fff8:	200015c8 	.word	0x200015c8
 800fffc:	e000ed04 	.word	0xe000ed04

08010000 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801000a:	4b21      	ldr	r3, [pc, #132]	@ (8010090 <prvAddCurrentTaskToDelayedList+0x90>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010010:	4b20      	ldr	r3, [pc, #128]	@ (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	3304      	adds	r3, #4
 8010016:	4618      	mov	r0, r3
 8010018:	f7fd fa90 	bl	800d53c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010022:	d10a      	bne.n	801003a <prvAddCurrentTaskToDelayedList+0x3a>
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d007      	beq.n	801003a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801002a:	4b1a      	ldr	r3, [pc, #104]	@ (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	3304      	adds	r3, #4
 8010030:	4619      	mov	r1, r3
 8010032:	4819      	ldr	r0, [pc, #100]	@ (8010098 <prvAddCurrentTaskToDelayedList+0x98>)
 8010034:	f7fd fa25 	bl	800d482 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010038:	e026      	b.n	8010088 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801003a:	68fa      	ldr	r2, [r7, #12]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	4413      	add	r3, r2
 8010040:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010042:	4b14      	ldr	r3, [pc, #80]	@ (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	68ba      	ldr	r2, [r7, #8]
 8010048:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801004a:	68ba      	ldr	r2, [r7, #8]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	429a      	cmp	r2, r3
 8010050:	d209      	bcs.n	8010066 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010052:	4b12      	ldr	r3, [pc, #72]	@ (801009c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	4b0f      	ldr	r3, [pc, #60]	@ (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	3304      	adds	r3, #4
 801005c:	4619      	mov	r1, r3
 801005e:	4610      	mov	r0, r2
 8010060:	f7fd fa33 	bl	800d4ca <vListInsert>
}
 8010064:	e010      	b.n	8010088 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010066:	4b0e      	ldr	r3, [pc, #56]	@ (80100a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	4b0a      	ldr	r3, [pc, #40]	@ (8010094 <prvAddCurrentTaskToDelayedList+0x94>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3304      	adds	r3, #4
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7fd fa29 	bl	800d4ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010078:	4b0a      	ldr	r3, [pc, #40]	@ (80100a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	429a      	cmp	r2, r3
 8010080:	d202      	bcs.n	8010088 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010082:	4a08      	ldr	r2, [pc, #32]	@ (80100a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	6013      	str	r3, [r2, #0]
}
 8010088:	bf00      	nop
 801008a:	3710      	adds	r7, #16
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	20001aa0 	.word	0x20001aa0
 8010094:	200015c8 	.word	0x200015c8
 8010098:	20001a88 	.word	0x20001a88
 801009c:	20001a58 	.word	0x20001a58
 80100a0:	20001a54 	.word	0x20001a54
 80100a4:	20001abc 	.word	0x20001abc

080100a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08a      	sub	sp, #40	@ 0x28
 80100ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80100ae:	2300      	movs	r3, #0
 80100b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80100b2:	f000 fb71 	bl	8010798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80100b6:	4b1d      	ldr	r3, [pc, #116]	@ (801012c <xTimerCreateTimerTask+0x84>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d021      	beq.n	8010102 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80100be:	2300      	movs	r3, #0
 80100c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80100c2:	2300      	movs	r3, #0
 80100c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80100c6:	1d3a      	adds	r2, r7, #4
 80100c8:	f107 0108 	add.w	r1, r7, #8
 80100cc:	f107 030c 	add.w	r3, r7, #12
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fc ffd3 	bl	800d07c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	9202      	str	r2, [sp, #8]
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	2302      	movs	r3, #2
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	2300      	movs	r3, #0
 80100e6:	460a      	mov	r2, r1
 80100e8:	4911      	ldr	r1, [pc, #68]	@ (8010130 <xTimerCreateTimerTask+0x88>)
 80100ea:	4812      	ldr	r0, [pc, #72]	@ (8010134 <xTimerCreateTimerTask+0x8c>)
 80100ec:	f7fe f986 	bl	800e3fc <xTaskCreateStatic>
 80100f0:	4603      	mov	r3, r0
 80100f2:	4a11      	ldr	r2, [pc, #68]	@ (8010138 <xTimerCreateTimerTask+0x90>)
 80100f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80100f6:	4b10      	ldr	r3, [pc, #64]	@ (8010138 <xTimerCreateTimerTask+0x90>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80100fe:	2301      	movs	r3, #1
 8010100:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d10b      	bne.n	8010120 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801010c:	f383 8811 	msr	BASEPRI, r3
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	f3bf 8f4f 	dsb	sy
 8010118:	613b      	str	r3, [r7, #16]
}
 801011a:	bf00      	nop
 801011c:	bf00      	nop
 801011e:	e7fd      	b.n	801011c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010120:	697b      	ldr	r3, [r7, #20]
}
 8010122:	4618      	mov	r0, r3
 8010124:	3718      	adds	r7, #24
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	20001af8 	.word	0x20001af8
 8010130:	080165a4 	.word	0x080165a4
 8010134:	08010331 	.word	0x08010331
 8010138:	20001afc 	.word	0x20001afc

0801013c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801013c:	b580      	push	{r7, lr}
 801013e:	b088      	sub	sp, #32
 8010140:	af02      	add	r7, sp, #8
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
 8010148:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801014a:	202c      	movs	r0, #44	@ 0x2c
 801014c:	f000 fdd6 	bl	8010cfc <pvPortMalloc>
 8010150:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00d      	beq.n	8010174 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	2200      	movs	r2, #0
 801015c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	9301      	str	r3, [sp, #4]
 8010164:	6a3b      	ldr	r3, [r7, #32]
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	68b9      	ldr	r1, [r7, #8]
 801016e:	68f8      	ldr	r0, [r7, #12]
 8010170:	f000 f805 	bl	801017e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8010174:	697b      	ldr	r3, [r7, #20]
	}
 8010176:	4618      	mov	r0, r3
 8010178:	3718      	adds	r7, #24
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b086      	sub	sp, #24
 8010182:	af00      	add	r7, sp, #0
 8010184:	60f8      	str	r0, [r7, #12]
 8010186:	60b9      	str	r1, [r7, #8]
 8010188:	607a      	str	r2, [r7, #4]
 801018a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d10b      	bne.n	80101aa <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8010192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	617b      	str	r3, [r7, #20]
}
 80101a4:	bf00      	nop
 80101a6:	bf00      	nop
 80101a8:	e7fd      	b.n	80101a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80101aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d01e      	beq.n	80101ee <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80101b0:	f000 faf2 	bl	8010798 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80101b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b6:	68fa      	ldr	r2, [r7, #12]
 80101b8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80101ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80101c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80101c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c8:	6a3a      	ldr	r2, [r7, #32]
 80101ca:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80101cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ce:	3304      	adds	r3, #4
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fd f949 	bl	800d468 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d008      	beq.n	80101ee <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80101dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101e2:	f043 0304 	orr.w	r3, r3, #4
 80101e6:	b2da      	uxtb	r2, r3
 80101e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80101ee:	bf00      	nop
 80101f0:	3718      	adds	r7, #24
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
	...

080101f8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b08a      	sub	sp, #40	@ 0x28
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
 8010204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010206:	2300      	movs	r3, #0
 8010208:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d10b      	bne.n	8010228 <xTimerGenericCommand+0x30>
	__asm volatile
 8010210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	623b      	str	r3, [r7, #32]
}
 8010222:	bf00      	nop
 8010224:	bf00      	nop
 8010226:	e7fd      	b.n	8010224 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010228:	4b19      	ldr	r3, [pc, #100]	@ (8010290 <xTimerGenericCommand+0x98>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d02a      	beq.n	8010286 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	2b05      	cmp	r3, #5
 8010240:	dc18      	bgt.n	8010274 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010242:	f7ff fbc9 	bl	800f9d8 <xTaskGetSchedulerState>
 8010246:	4603      	mov	r3, r0
 8010248:	2b02      	cmp	r3, #2
 801024a:	d109      	bne.n	8010260 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801024c:	4b10      	ldr	r3, [pc, #64]	@ (8010290 <xTimerGenericCommand+0x98>)
 801024e:	6818      	ldr	r0, [r3, #0]
 8010250:	f107 0110 	add.w	r1, r7, #16
 8010254:	2300      	movs	r3, #0
 8010256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010258:	f7fd fb12 	bl	800d880 <xQueueGenericSend>
 801025c:	6278      	str	r0, [r7, #36]	@ 0x24
 801025e:	e012      	b.n	8010286 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010260:	4b0b      	ldr	r3, [pc, #44]	@ (8010290 <xTimerGenericCommand+0x98>)
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	f107 0110 	add.w	r1, r7, #16
 8010268:	2300      	movs	r3, #0
 801026a:	2200      	movs	r2, #0
 801026c:	f7fd fb08 	bl	800d880 <xQueueGenericSend>
 8010270:	6278      	str	r0, [r7, #36]	@ 0x24
 8010272:	e008      	b.n	8010286 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010274:	4b06      	ldr	r3, [pc, #24]	@ (8010290 <xTimerGenericCommand+0x98>)
 8010276:	6818      	ldr	r0, [r3, #0]
 8010278:	f107 0110 	add.w	r1, r7, #16
 801027c:	2300      	movs	r3, #0
 801027e:	683a      	ldr	r2, [r7, #0]
 8010280:	f7fd fc00 	bl	800da84 <xQueueGenericSendFromISR>
 8010284:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010288:	4618      	mov	r0, r3
 801028a:	3728      	adds	r7, #40	@ 0x28
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20001af8 	.word	0x20001af8

08010294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af02      	add	r7, sp, #8
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801029e:	4b23      	ldr	r3, [pc, #140]	@ (801032c <prvProcessExpiredTimer+0x98>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	68db      	ldr	r3, [r3, #12]
 80102a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	3304      	adds	r3, #4
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7fd f945 	bl	800d53c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102b8:	f003 0304 	and.w	r3, r3, #4
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d023      	beq.n	8010308 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	699a      	ldr	r2, [r3, #24]
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	18d1      	adds	r1, r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	6978      	ldr	r0, [r7, #20]
 80102ce:	f000 f8d5 	bl	801047c <prvInsertTimerInActiveList>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d020      	beq.n	801031a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102d8:	2300      	movs	r3, #0
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	2300      	movs	r3, #0
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	2100      	movs	r1, #0
 80102e2:	6978      	ldr	r0, [r7, #20]
 80102e4:	f7ff ff88 	bl	80101f8 <xTimerGenericCommand>
 80102e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d114      	bne.n	801031a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80102f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f4:	f383 8811 	msr	BASEPRI, r3
 80102f8:	f3bf 8f6f 	isb	sy
 80102fc:	f3bf 8f4f 	dsb	sy
 8010300:	60fb      	str	r3, [r7, #12]
}
 8010302:	bf00      	nop
 8010304:	bf00      	nop
 8010306:	e7fd      	b.n	8010304 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801030e:	f023 0301 	bic.w	r3, r3, #1
 8010312:	b2da      	uxtb	r2, r3
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	6a1b      	ldr	r3, [r3, #32]
 801031e:	6978      	ldr	r0, [r7, #20]
 8010320:	4798      	blx	r3
}
 8010322:	bf00      	nop
 8010324:	3718      	adds	r7, #24
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	20001af0 	.word	0x20001af0

08010330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010338:	f107 0308 	add.w	r3, r7, #8
 801033c:	4618      	mov	r0, r3
 801033e:	f000 f859 	bl	80103f4 <prvGetNextExpireTime>
 8010342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	4619      	mov	r1, r3
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f000 f805 	bl	8010358 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801034e:	f000 f8d7 	bl	8010500 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010352:	bf00      	nop
 8010354:	e7f0      	b.n	8010338 <prvTimerTask+0x8>
	...

08010358 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010362:	f7fe fd31 	bl	800edc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010366:	f107 0308 	add.w	r3, r7, #8
 801036a:	4618      	mov	r0, r3
 801036c:	f000 f866 	bl	801043c <prvSampleTimeNow>
 8010370:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d130      	bne.n	80103da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d10a      	bne.n	8010394 <prvProcessTimerOrBlockTask+0x3c>
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	429a      	cmp	r2, r3
 8010384:	d806      	bhi.n	8010394 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010386:	f7fe fd2d 	bl	800ede4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801038a:	68f9      	ldr	r1, [r7, #12]
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff ff81 	bl	8010294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010392:	e024      	b.n	80103de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d008      	beq.n	80103ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801039a:	4b13      	ldr	r3, [pc, #76]	@ (80103e8 <prvProcessTimerOrBlockTask+0x90>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <prvProcessTimerOrBlockTask+0x50>
 80103a4:	2301      	movs	r3, #1
 80103a6:	e000      	b.n	80103aa <prvProcessTimerOrBlockTask+0x52>
 80103a8:	2300      	movs	r3, #0
 80103aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80103ac:	4b0f      	ldr	r3, [pc, #60]	@ (80103ec <prvProcessTimerOrBlockTask+0x94>)
 80103ae:	6818      	ldr	r0, [r3, #0]
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	683a      	ldr	r2, [r7, #0]
 80103b8:	4619      	mov	r1, r3
 80103ba:	f7fd ffeb 	bl	800e394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80103be:	f7fe fd11 	bl	800ede4 <xTaskResumeAll>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10a      	bne.n	80103de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80103c8:	4b09      	ldr	r3, [pc, #36]	@ (80103f0 <prvProcessTimerOrBlockTask+0x98>)
 80103ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103ce:	601a      	str	r2, [r3, #0]
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	f3bf 8f6f 	isb	sy
}
 80103d8:	e001      	b.n	80103de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80103da:	f7fe fd03 	bl	800ede4 <xTaskResumeAll>
}
 80103de:	bf00      	nop
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	20001af4 	.word	0x20001af4
 80103ec:	20001af8 	.word	0x20001af8
 80103f0:	e000ed04 	.word	0xe000ed04

080103f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103fc:	4b0e      	ldr	r3, [pc, #56]	@ (8010438 <prvGetNextExpireTime+0x44>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d101      	bne.n	801040a <prvGetNextExpireTime+0x16>
 8010406:	2201      	movs	r2, #1
 8010408:	e000      	b.n	801040c <prvGetNextExpireTime+0x18>
 801040a:	2200      	movs	r2, #0
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d105      	bne.n	8010424 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010418:	4b07      	ldr	r3, [pc, #28]	@ (8010438 <prvGetNextExpireTime+0x44>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	60fb      	str	r3, [r7, #12]
 8010422:	e001      	b.n	8010428 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010424:	2300      	movs	r3, #0
 8010426:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010428:	68fb      	ldr	r3, [r7, #12]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3714      	adds	r7, #20
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	20001af0 	.word	0x20001af0

0801043c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010444:	f7fe fd6c 	bl	800ef20 <xTaskGetTickCount>
 8010448:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801044a:	4b0b      	ldr	r3, [pc, #44]	@ (8010478 <prvSampleTimeNow+0x3c>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	68fa      	ldr	r2, [r7, #12]
 8010450:	429a      	cmp	r2, r3
 8010452:	d205      	bcs.n	8010460 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010454:	f000 f93a 	bl	80106cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2201      	movs	r2, #1
 801045c:	601a      	str	r2, [r3, #0]
 801045e:	e002      	b.n	8010466 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2200      	movs	r2, #0
 8010464:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010466:	4a04      	ldr	r2, [pc, #16]	@ (8010478 <prvSampleTimeNow+0x3c>)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801046c:	68fb      	ldr	r3, [r7, #12]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3710      	adds	r7, #16
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
 8010476:	bf00      	nop
 8010478:	20001b00 	.word	0x20001b00

0801047c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
 8010488:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801048a:	2300      	movs	r3, #0
 801048c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801049a:	68ba      	ldr	r2, [r7, #8]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d812      	bhi.n	80104c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	1ad2      	subs	r2, r2, r3
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	699b      	ldr	r3, [r3, #24]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d302      	bcc.n	80104b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80104b0:	2301      	movs	r3, #1
 80104b2:	617b      	str	r3, [r7, #20]
 80104b4:	e01b      	b.n	80104ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80104b6:	4b10      	ldr	r3, [pc, #64]	@ (80104f8 <prvInsertTimerInActiveList+0x7c>)
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	3304      	adds	r3, #4
 80104be:	4619      	mov	r1, r3
 80104c0:	4610      	mov	r0, r2
 80104c2:	f7fd f802 	bl	800d4ca <vListInsert>
 80104c6:	e012      	b.n	80104ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d206      	bcs.n	80104de <prvInsertTimerInActiveList+0x62>
 80104d0:	68ba      	ldr	r2, [r7, #8]
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d302      	bcc.n	80104de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80104d8:	2301      	movs	r3, #1
 80104da:	617b      	str	r3, [r7, #20]
 80104dc:	e007      	b.n	80104ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104de:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <prvInsertTimerInActiveList+0x80>)
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3304      	adds	r3, #4
 80104e6:	4619      	mov	r1, r3
 80104e8:	4610      	mov	r0, r2
 80104ea:	f7fc ffee 	bl	800d4ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 80104ee:	697b      	ldr	r3, [r7, #20]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3718      	adds	r7, #24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	20001af4 	.word	0x20001af4
 80104fc:	20001af0 	.word	0x20001af0

08010500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08e      	sub	sp, #56	@ 0x38
 8010504:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010506:	e0ce      	b.n	80106a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2b00      	cmp	r3, #0
 801050c:	da19      	bge.n	8010542 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801050e:	1d3b      	adds	r3, r7, #4
 8010510:	3304      	adds	r3, #4
 8010512:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010516:	2b00      	cmp	r3, #0
 8010518:	d10b      	bne.n	8010532 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801051a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801051e:	f383 8811 	msr	BASEPRI, r3
 8010522:	f3bf 8f6f 	isb	sy
 8010526:	f3bf 8f4f 	dsb	sy
 801052a:	61fb      	str	r3, [r7, #28]
}
 801052c:	bf00      	nop
 801052e:	bf00      	nop
 8010530:	e7fd      	b.n	801052e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010538:	6850      	ldr	r0, [r2, #4]
 801053a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801053c:	6892      	ldr	r2, [r2, #8]
 801053e:	4611      	mov	r1, r2
 8010540:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	f2c0 80ae 	blt.w	80106a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801054e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010550:	695b      	ldr	r3, [r3, #20]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d004      	beq.n	8010560 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010558:	3304      	adds	r3, #4
 801055a:	4618      	mov	r0, r3
 801055c:	f7fc ffee 	bl	800d53c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010560:	463b      	mov	r3, r7
 8010562:	4618      	mov	r0, r3
 8010564:	f7ff ff6a 	bl	801043c <prvSampleTimeNow>
 8010568:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b09      	cmp	r3, #9
 801056e:	f200 8097 	bhi.w	80106a0 <prvProcessReceivedCommands+0x1a0>
 8010572:	a201      	add	r2, pc, #4	@ (adr r2, 8010578 <prvProcessReceivedCommands+0x78>)
 8010574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010578:	080105a1 	.word	0x080105a1
 801057c:	080105a1 	.word	0x080105a1
 8010580:	080105a1 	.word	0x080105a1
 8010584:	08010617 	.word	0x08010617
 8010588:	0801062b 	.word	0x0801062b
 801058c:	08010677 	.word	0x08010677
 8010590:	080105a1 	.word	0x080105a1
 8010594:	080105a1 	.word	0x080105a1
 8010598:	08010617 	.word	0x08010617
 801059c:	0801062b 	.word	0x0801062b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105a6:	f043 0301 	orr.w	r3, r3, #1
 80105aa:	b2da      	uxtb	r2, r3
 80105ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105b2:	68ba      	ldr	r2, [r7, #8]
 80105b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b6:	699b      	ldr	r3, [r3, #24]
 80105b8:	18d1      	adds	r1, r2, r3
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105c0:	f7ff ff5c 	bl	801047c <prvInsertTimerInActiveList>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d06c      	beq.n	80106a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105cc:	6a1b      	ldr	r3, [r3, #32]
 80105ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105d8:	f003 0304 	and.w	r3, r3, #4
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d061      	beq.n	80106a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80105e0:	68ba      	ldr	r2, [r7, #8]
 80105e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	441a      	add	r2, r3
 80105e8:	2300      	movs	r3, #0
 80105ea:	9300      	str	r3, [sp, #0]
 80105ec:	2300      	movs	r3, #0
 80105ee:	2100      	movs	r1, #0
 80105f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105f2:	f7ff fe01 	bl	80101f8 <xTimerGenericCommand>
 80105f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80105f8:	6a3b      	ldr	r3, [r7, #32]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d152      	bne.n	80106a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80105fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	61bb      	str	r3, [r7, #24]
}
 8010610:	bf00      	nop
 8010612:	bf00      	nop
 8010614:	e7fd      	b.n	8010612 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801061c:	f023 0301 	bic.w	r3, r3, #1
 8010620:	b2da      	uxtb	r2, r3
 8010622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010624:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010628:	e03d      	b.n	80106a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801062a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010630:	f043 0301 	orr.w	r3, r3, #1
 8010634:	b2da      	uxtb	r2, r3
 8010636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010638:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801063c:	68ba      	ldr	r2, [r7, #8]
 801063e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010640:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010644:	699b      	ldr	r3, [r3, #24]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10b      	bne.n	8010662 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801064e:	f383 8811 	msr	BASEPRI, r3
 8010652:	f3bf 8f6f 	isb	sy
 8010656:	f3bf 8f4f 	dsb	sy
 801065a:	617b      	str	r3, [r7, #20]
}
 801065c:	bf00      	nop
 801065e:	bf00      	nop
 8010660:	e7fd      	b.n	801065e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010664:	699a      	ldr	r2, [r3, #24]
 8010666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010668:	18d1      	adds	r1, r2, r3
 801066a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801066c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801066e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010670:	f7ff ff04 	bl	801047c <prvInsertTimerInActiveList>
					break;
 8010674:	e017      	b.n	80106a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010678:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801067c:	f003 0302 	and.w	r3, r3, #2
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010686:	f000 fc07 	bl	8010e98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801068a:	e00c      	b.n	80106a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801068c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801068e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010692:	f023 0301 	bic.w	r3, r3, #1
 8010696:	b2da      	uxtb	r2, r3
 8010698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801069e:	e002      	b.n	80106a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80106a0:	bf00      	nop
 80106a2:	e000      	b.n	80106a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80106a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106a6:	4b08      	ldr	r3, [pc, #32]	@ (80106c8 <prvProcessReceivedCommands+0x1c8>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	1d39      	adds	r1, r7, #4
 80106ac:	2200      	movs	r2, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7fd fa86 	bl	800dbc0 <xQueueReceive>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f47f af26 	bne.w	8010508 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80106bc:	bf00      	nop
 80106be:	bf00      	nop
 80106c0:	3730      	adds	r7, #48	@ 0x30
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	20001af8 	.word	0x20001af8

080106cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b088      	sub	sp, #32
 80106d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106d2:	e049      	b.n	8010768 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106d4:	4b2e      	ldr	r3, [pc, #184]	@ (8010790 <prvSwitchTimerLists+0xc4>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106de:	4b2c      	ldr	r3, [pc, #176]	@ (8010790 <prvSwitchTimerLists+0xc4>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	3304      	adds	r3, #4
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fc ff25 	bl	800d53c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	6a1b      	ldr	r3, [r3, #32]
 80106f6:	68f8      	ldr	r0, [r7, #12]
 80106f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010700:	f003 0304 	and.w	r3, r3, #4
 8010704:	2b00      	cmp	r3, #0
 8010706:	d02f      	beq.n	8010768 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	699b      	ldr	r3, [r3, #24]
 801070c:	693a      	ldr	r2, [r7, #16]
 801070e:	4413      	add	r3, r2
 8010710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	429a      	cmp	r2, r3
 8010718:	d90e      	bls.n	8010738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	68ba      	ldr	r2, [r7, #8]
 801071e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010726:	4b1a      	ldr	r3, [pc, #104]	@ (8010790 <prvSwitchTimerLists+0xc4>)
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	3304      	adds	r3, #4
 801072e:	4619      	mov	r1, r3
 8010730:	4610      	mov	r0, r2
 8010732:	f7fc feca 	bl	800d4ca <vListInsert>
 8010736:	e017      	b.n	8010768 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010738:	2300      	movs	r3, #0
 801073a:	9300      	str	r3, [sp, #0]
 801073c:	2300      	movs	r3, #0
 801073e:	693a      	ldr	r2, [r7, #16]
 8010740:	2100      	movs	r1, #0
 8010742:	68f8      	ldr	r0, [r7, #12]
 8010744:	f7ff fd58 	bl	80101f8 <xTimerGenericCommand>
 8010748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10b      	bne.n	8010768 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010754:	f383 8811 	msr	BASEPRI, r3
 8010758:	f3bf 8f6f 	isb	sy
 801075c:	f3bf 8f4f 	dsb	sy
 8010760:	603b      	str	r3, [r7, #0]
}
 8010762:	bf00      	nop
 8010764:	bf00      	nop
 8010766:	e7fd      	b.n	8010764 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010768:	4b09      	ldr	r3, [pc, #36]	@ (8010790 <prvSwitchTimerLists+0xc4>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1b0      	bne.n	80106d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010772:	4b07      	ldr	r3, [pc, #28]	@ (8010790 <prvSwitchTimerLists+0xc4>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010778:	4b06      	ldr	r3, [pc, #24]	@ (8010794 <prvSwitchTimerLists+0xc8>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4a04      	ldr	r2, [pc, #16]	@ (8010790 <prvSwitchTimerLists+0xc4>)
 801077e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010780:	4a04      	ldr	r2, [pc, #16]	@ (8010794 <prvSwitchTimerLists+0xc8>)
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	6013      	str	r3, [r2, #0]
}
 8010786:	bf00      	nop
 8010788:	3718      	adds	r7, #24
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	20001af0 	.word	0x20001af0
 8010794:	20001af4 	.word	0x20001af4

08010798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b082      	sub	sp, #8
 801079c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801079e:	f000 f98b 	bl	8010ab8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80107a2:	4b15      	ldr	r3, [pc, #84]	@ (80107f8 <prvCheckForValidListAndQueue+0x60>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d120      	bne.n	80107ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80107aa:	4814      	ldr	r0, [pc, #80]	@ (80107fc <prvCheckForValidListAndQueue+0x64>)
 80107ac:	f7fc fe3c 	bl	800d428 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80107b0:	4813      	ldr	r0, [pc, #76]	@ (8010800 <prvCheckForValidListAndQueue+0x68>)
 80107b2:	f7fc fe39 	bl	800d428 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80107b6:	4b13      	ldr	r3, [pc, #76]	@ (8010804 <prvCheckForValidListAndQueue+0x6c>)
 80107b8:	4a10      	ldr	r2, [pc, #64]	@ (80107fc <prvCheckForValidListAndQueue+0x64>)
 80107ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80107bc:	4b12      	ldr	r3, [pc, #72]	@ (8010808 <prvCheckForValidListAndQueue+0x70>)
 80107be:	4a10      	ldr	r2, [pc, #64]	@ (8010800 <prvCheckForValidListAndQueue+0x68>)
 80107c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80107c2:	2300      	movs	r3, #0
 80107c4:	9300      	str	r3, [sp, #0]
 80107c6:	4b11      	ldr	r3, [pc, #68]	@ (801080c <prvCheckForValidListAndQueue+0x74>)
 80107c8:	4a11      	ldr	r2, [pc, #68]	@ (8010810 <prvCheckForValidListAndQueue+0x78>)
 80107ca:	2110      	movs	r1, #16
 80107cc:	200a      	movs	r0, #10
 80107ce:	f7fc ff49 	bl	800d664 <xQueueGenericCreateStatic>
 80107d2:	4603      	mov	r3, r0
 80107d4:	4a08      	ldr	r2, [pc, #32]	@ (80107f8 <prvCheckForValidListAndQueue+0x60>)
 80107d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80107d8:	4b07      	ldr	r3, [pc, #28]	@ (80107f8 <prvCheckForValidListAndQueue+0x60>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d005      	beq.n	80107ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80107e0:	4b05      	ldr	r3, [pc, #20]	@ (80107f8 <prvCheckForValidListAndQueue+0x60>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	490b      	ldr	r1, [pc, #44]	@ (8010814 <prvCheckForValidListAndQueue+0x7c>)
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fd fdaa 	bl	800e340 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80107ec:	f000 f996 	bl	8010b1c <vPortExitCritical>
}
 80107f0:	bf00      	nop
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	20001af8 	.word	0x20001af8
 80107fc:	20001ac8 	.word	0x20001ac8
 8010800:	20001adc 	.word	0x20001adc
 8010804:	20001af0 	.word	0x20001af0
 8010808:	20001af4 	.word	0x20001af4
 801080c:	20001ba4 	.word	0x20001ba4
 8010810:	20001b04 	.word	0x20001b04
 8010814:	080165ac 	.word	0x080165ac

08010818 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010818:	b580      	push	{r7, lr}
 801081a:	b08a      	sub	sp, #40	@ 0x28
 801081c:	af00      	add	r7, sp, #0
 801081e:	60f8      	str	r0, [r7, #12]
 8010820:	60b9      	str	r1, [r7, #8]
 8010822:	607a      	str	r2, [r7, #4]
 8010824:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8010826:	f06f 0301 	mvn.w	r3, #1
 801082a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010838:	4b06      	ldr	r3, [pc, #24]	@ (8010854 <xTimerPendFunctionCallFromISR+0x3c>)
 801083a:	6818      	ldr	r0, [r3, #0]
 801083c:	f107 0114 	add.w	r1, r7, #20
 8010840:	2300      	movs	r3, #0
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	f7fd f91e 	bl	800da84 <xQueueGenericSendFromISR>
 8010848:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801084a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801084c:	4618      	mov	r0, r3
 801084e:	3728      	adds	r7, #40	@ 0x28
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}
 8010854:	20001af8 	.word	0x20001af8

08010858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010858:	b480      	push	{r7}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	60f8      	str	r0, [r7, #12]
 8010860:	60b9      	str	r1, [r7, #8]
 8010862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	3b04      	subs	r3, #4
 8010868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	3b04      	subs	r3, #4
 8010876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	f023 0201 	bic.w	r2, r3, #1
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	3b04      	subs	r3, #4
 8010886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010888:	4a0c      	ldr	r2, [pc, #48]	@ (80108bc <pxPortInitialiseStack+0x64>)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	3b14      	subs	r3, #20
 8010892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010894:	687a      	ldr	r2, [r7, #4]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3b04      	subs	r3, #4
 801089e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f06f 0202 	mvn.w	r2, #2
 80108a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	3b20      	subs	r3, #32
 80108ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80108ae:	68fb      	ldr	r3, [r7, #12]
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	3714      	adds	r7, #20
 80108b4:	46bd      	mov	sp, r7
 80108b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ba:	4770      	bx	lr
 80108bc:	080108c1 	.word	0x080108c1

080108c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80108ca:	4b13      	ldr	r3, [pc, #76]	@ (8010918 <prvTaskExitError+0x58>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d2:	d00b      	beq.n	80108ec <prvTaskExitError+0x2c>
	__asm volatile
 80108d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	60fb      	str	r3, [r7, #12]
}
 80108e6:	bf00      	nop
 80108e8:	bf00      	nop
 80108ea:	e7fd      	b.n	80108e8 <prvTaskExitError+0x28>
	__asm volatile
 80108ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f0:	f383 8811 	msr	BASEPRI, r3
 80108f4:	f3bf 8f6f 	isb	sy
 80108f8:	f3bf 8f4f 	dsb	sy
 80108fc:	60bb      	str	r3, [r7, #8]
}
 80108fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010900:	bf00      	nop
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d0fc      	beq.n	8010902 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010908:	bf00      	nop
 801090a:	bf00      	nop
 801090c:	3714      	adds	r7, #20
 801090e:	46bd      	mov	sp, r7
 8010910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010914:	4770      	bx	lr
 8010916:	bf00      	nop
 8010918:	20000290 	.word	0x20000290
 801091c:	00000000 	.word	0x00000000

08010920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010920:	4b07      	ldr	r3, [pc, #28]	@ (8010940 <pxCurrentTCBConst2>)
 8010922:	6819      	ldr	r1, [r3, #0]
 8010924:	6808      	ldr	r0, [r1, #0]
 8010926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092a:	f380 8809 	msr	PSP, r0
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f04f 0000 	mov.w	r0, #0
 8010936:	f380 8811 	msr	BASEPRI, r0
 801093a:	4770      	bx	lr
 801093c:	f3af 8000 	nop.w

08010940 <pxCurrentTCBConst2>:
 8010940:	200015c8 	.word	0x200015c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010944:	bf00      	nop
 8010946:	bf00      	nop

08010948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010948:	4808      	ldr	r0, [pc, #32]	@ (801096c <prvPortStartFirstTask+0x24>)
 801094a:	6800      	ldr	r0, [r0, #0]
 801094c:	6800      	ldr	r0, [r0, #0]
 801094e:	f380 8808 	msr	MSP, r0
 8010952:	f04f 0000 	mov.w	r0, #0
 8010956:	f380 8814 	msr	CONTROL, r0
 801095a:	b662      	cpsie	i
 801095c:	b661      	cpsie	f
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	df00      	svc	0
 8010968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801096a:	bf00      	nop
 801096c:	e000ed08 	.word	0xe000ed08

08010970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010976:	4b47      	ldr	r3, [pc, #284]	@ (8010a94 <xPortStartScheduler+0x124>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a47      	ldr	r2, [pc, #284]	@ (8010a98 <xPortStartScheduler+0x128>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d10b      	bne.n	8010998 <xPortStartScheduler+0x28>
	__asm volatile
 8010980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010984:	f383 8811 	msr	BASEPRI, r3
 8010988:	f3bf 8f6f 	isb	sy
 801098c:	f3bf 8f4f 	dsb	sy
 8010990:	60fb      	str	r3, [r7, #12]
}
 8010992:	bf00      	nop
 8010994:	bf00      	nop
 8010996:	e7fd      	b.n	8010994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010998:	4b3e      	ldr	r3, [pc, #248]	@ (8010a94 <xPortStartScheduler+0x124>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4a3f      	ldr	r2, [pc, #252]	@ (8010a9c <xPortStartScheduler+0x12c>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d10b      	bne.n	80109ba <xPortStartScheduler+0x4a>
	__asm volatile
 80109a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a6:	f383 8811 	msr	BASEPRI, r3
 80109aa:	f3bf 8f6f 	isb	sy
 80109ae:	f3bf 8f4f 	dsb	sy
 80109b2:	613b      	str	r3, [r7, #16]
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop
 80109b8:	e7fd      	b.n	80109b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109ba:	4b39      	ldr	r3, [pc, #228]	@ (8010aa0 <xPortStartScheduler+0x130>)
 80109bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	22ff      	movs	r2, #255	@ 0xff
 80109ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109d4:	78fb      	ldrb	r3, [r7, #3]
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80109dc:	b2da      	uxtb	r2, r3
 80109de:	4b31      	ldr	r3, [pc, #196]	@ (8010aa4 <xPortStartScheduler+0x134>)
 80109e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109e2:	4b31      	ldr	r3, [pc, #196]	@ (8010aa8 <xPortStartScheduler+0x138>)
 80109e4:	2207      	movs	r2, #7
 80109e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109e8:	e009      	b.n	80109fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80109ea:	4b2f      	ldr	r3, [pc, #188]	@ (8010aa8 <xPortStartScheduler+0x138>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3b01      	subs	r3, #1
 80109f0:	4a2d      	ldr	r2, [pc, #180]	@ (8010aa8 <xPortStartScheduler+0x138>)
 80109f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109fe:	78fb      	ldrb	r3, [r7, #3]
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a06:	2b80      	cmp	r3, #128	@ 0x80
 8010a08:	d0ef      	beq.n	80109ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a0a:	4b27      	ldr	r3, [pc, #156]	@ (8010aa8 <xPortStartScheduler+0x138>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f1c3 0307 	rsb	r3, r3, #7
 8010a12:	2b04      	cmp	r3, #4
 8010a14:	d00b      	beq.n	8010a2e <xPortStartScheduler+0xbe>
	__asm volatile
 8010a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a1a:	f383 8811 	msr	BASEPRI, r3
 8010a1e:	f3bf 8f6f 	isb	sy
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	60bb      	str	r3, [r7, #8]
}
 8010a28:	bf00      	nop
 8010a2a:	bf00      	nop
 8010a2c:	e7fd      	b.n	8010a2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8010aa8 <xPortStartScheduler+0x138>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	021b      	lsls	r3, r3, #8
 8010a34:	4a1c      	ldr	r2, [pc, #112]	@ (8010aa8 <xPortStartScheduler+0x138>)
 8010a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a38:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa8 <xPortStartScheduler+0x138>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010a40:	4a19      	ldr	r2, [pc, #100]	@ (8010aa8 <xPortStartScheduler+0x138>)
 8010a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	b2da      	uxtb	r2, r3
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a4c:	4b17      	ldr	r3, [pc, #92]	@ (8010aac <xPortStartScheduler+0x13c>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a16      	ldr	r2, [pc, #88]	@ (8010aac <xPortStartScheduler+0x13c>)
 8010a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a58:	4b14      	ldr	r3, [pc, #80]	@ (8010aac <xPortStartScheduler+0x13c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a13      	ldr	r2, [pc, #76]	@ (8010aac <xPortStartScheduler+0x13c>)
 8010a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a64:	f000 f8da 	bl	8010c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a68:	4b11      	ldr	r3, [pc, #68]	@ (8010ab0 <xPortStartScheduler+0x140>)
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a6e:	f000 f8f9 	bl	8010c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a72:	4b10      	ldr	r3, [pc, #64]	@ (8010ab4 <xPortStartScheduler+0x144>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a0f      	ldr	r2, [pc, #60]	@ (8010ab4 <xPortStartScheduler+0x144>)
 8010a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a7e:	f7ff ff63 	bl	8010948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a82:	f7fe fbeb 	bl	800f25c <vTaskSwitchContext>
	prvTaskExitError();
 8010a86:	f7ff ff1b 	bl	80108c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3718      	adds	r7, #24
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	e000ed00 	.word	0xe000ed00
 8010a98:	410fc271 	.word	0x410fc271
 8010a9c:	410fc270 	.word	0x410fc270
 8010aa0:	e000e400 	.word	0xe000e400
 8010aa4:	20001bf4 	.word	0x20001bf4
 8010aa8:	20001bf8 	.word	0x20001bf8
 8010aac:	e000ed20 	.word	0xe000ed20
 8010ab0:	20000290 	.word	0x20000290
 8010ab4:	e000ef34 	.word	0xe000ef34

08010ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
	__asm volatile
 8010abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	607b      	str	r3, [r7, #4]
}
 8010ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010ad2:	4b10      	ldr	r3, [pc, #64]	@ (8010b14 <vPortEnterCritical+0x5c>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8010b14 <vPortEnterCritical+0x5c>)
 8010ada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010adc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b14 <vPortEnterCritical+0x5c>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d110      	bne.n	8010b06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8010b18 <vPortEnterCritical+0x60>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00b      	beq.n	8010b06 <vPortEnterCritical+0x4e>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	603b      	str	r3, [r7, #0]
}
 8010b00:	bf00      	nop
 8010b02:	bf00      	nop
 8010b04:	e7fd      	b.n	8010b02 <vPortEnterCritical+0x4a>
	}
}
 8010b06:	bf00      	nop
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	20000290 	.word	0x20000290
 8010b18:	e000ed04 	.word	0xe000ed04

08010b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b083      	sub	sp, #12
 8010b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b22:	4b12      	ldr	r3, [pc, #72]	@ (8010b6c <vPortExitCritical+0x50>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d10b      	bne.n	8010b42 <vPortExitCritical+0x26>
	__asm volatile
 8010b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b2e:	f383 8811 	msr	BASEPRI, r3
 8010b32:	f3bf 8f6f 	isb	sy
 8010b36:	f3bf 8f4f 	dsb	sy
 8010b3a:	607b      	str	r3, [r7, #4]
}
 8010b3c:	bf00      	nop
 8010b3e:	bf00      	nop
 8010b40:	e7fd      	b.n	8010b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010b42:	4b0a      	ldr	r3, [pc, #40]	@ (8010b6c <vPortExitCritical+0x50>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3b01      	subs	r3, #1
 8010b48:	4a08      	ldr	r2, [pc, #32]	@ (8010b6c <vPortExitCritical+0x50>)
 8010b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b4c:	4b07      	ldr	r3, [pc, #28]	@ (8010b6c <vPortExitCritical+0x50>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d105      	bne.n	8010b60 <vPortExitCritical+0x44>
 8010b54:	2300      	movs	r3, #0
 8010b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	f383 8811 	msr	BASEPRI, r3
}
 8010b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b60:	bf00      	nop
 8010b62:	370c      	adds	r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6a:	4770      	bx	lr
 8010b6c:	20000290 	.word	0x20000290

08010b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b70:	f3ef 8009 	mrs	r0, PSP
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	4b15      	ldr	r3, [pc, #84]	@ (8010bd0 <pxCurrentTCBConst>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	f01e 0f10 	tst.w	lr, #16
 8010b80:	bf08      	it	eq
 8010b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	6010      	str	r0, [r2, #0]
 8010b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010b94:	f380 8811 	msr	BASEPRI, r0
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f7fe fb5c 	bl	800f25c <vTaskSwitchContext>
 8010ba4:	f04f 0000 	mov.w	r0, #0
 8010ba8:	f380 8811 	msr	BASEPRI, r0
 8010bac:	bc09      	pop	{r0, r3}
 8010bae:	6819      	ldr	r1, [r3, #0]
 8010bb0:	6808      	ldr	r0, [r1, #0]
 8010bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb6:	f01e 0f10 	tst.w	lr, #16
 8010bba:	bf08      	it	eq
 8010bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bc0:	f380 8809 	msr	PSP, r0
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	f3af 8000 	nop.w

08010bd0 <pxCurrentTCBConst>:
 8010bd0:	200015c8 	.word	0x200015c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010bd4:	bf00      	nop
 8010bd6:	bf00      	nop

08010bd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8010bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be2:	f383 8811 	msr	BASEPRI, r3
 8010be6:	f3bf 8f6f 	isb	sy
 8010bea:	f3bf 8f4f 	dsb	sy
 8010bee:	607b      	str	r3, [r7, #4]
}
 8010bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010bf2:	f7fe fa79 	bl	800f0e8 <xTaskIncrementTick>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d003      	beq.n	8010c04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010bfc:	4b06      	ldr	r3, [pc, #24]	@ (8010c18 <xPortSysTickHandler+0x40>)
 8010bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c02:	601a      	str	r2, [r3, #0]
 8010c04:	2300      	movs	r3, #0
 8010c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	f383 8811 	msr	BASEPRI, r3
}
 8010c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	e000ed04 	.word	0xe000ed04

08010c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c20:	4b0b      	ldr	r3, [pc, #44]	@ (8010c50 <vPortSetupTimerInterrupt+0x34>)
 8010c22:	2200      	movs	r2, #0
 8010c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c26:	4b0b      	ldr	r3, [pc, #44]	@ (8010c54 <vPortSetupTimerInterrupt+0x38>)
 8010c28:	2200      	movs	r2, #0
 8010c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010c58 <vPortSetupTimerInterrupt+0x3c>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a0a      	ldr	r2, [pc, #40]	@ (8010c5c <vPortSetupTimerInterrupt+0x40>)
 8010c32:	fba2 2303 	umull	r2, r3, r2, r3
 8010c36:	099b      	lsrs	r3, r3, #6
 8010c38:	4a09      	ldr	r2, [pc, #36]	@ (8010c60 <vPortSetupTimerInterrupt+0x44>)
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c3e:	4b04      	ldr	r3, [pc, #16]	@ (8010c50 <vPortSetupTimerInterrupt+0x34>)
 8010c40:	2207      	movs	r2, #7
 8010c42:	601a      	str	r2, [r3, #0]
}
 8010c44:	bf00      	nop
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	e000e010 	.word	0xe000e010
 8010c54:	e000e018 	.word	0xe000e018
 8010c58:	20000264 	.word	0x20000264
 8010c5c:	10624dd3 	.word	0x10624dd3
 8010c60:	e000e014 	.word	0xe000e014

08010c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010c74 <vPortEnableVFP+0x10>
 8010c68:	6801      	ldr	r1, [r0, #0]
 8010c6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010c6e:	6001      	str	r1, [r0, #0]
 8010c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c72:	bf00      	nop
 8010c74:	e000ed88 	.word	0xe000ed88

08010c78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c78:	b480      	push	{r7}
 8010c7a:	b085      	sub	sp, #20
 8010c7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c7e:	f3ef 8305 	mrs	r3, IPSR
 8010c82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2b0f      	cmp	r3, #15
 8010c88:	d915      	bls.n	8010cb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c8a:	4a18      	ldr	r2, [pc, #96]	@ (8010cec <vPortValidateInterruptPriority+0x74>)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	4413      	add	r3, r2
 8010c90:	781b      	ldrb	r3, [r3, #0]
 8010c92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c94:	4b16      	ldr	r3, [pc, #88]	@ (8010cf0 <vPortValidateInterruptPriority+0x78>)
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	7afa      	ldrb	r2, [r7, #11]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d20b      	bcs.n	8010cb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	607b      	str	r3, [r7, #4]
}
 8010cb0:	bf00      	nop
 8010cb2:	bf00      	nop
 8010cb4:	e7fd      	b.n	8010cb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8010cf4 <vPortValidateInterruptPriority+0x7c>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8010cf8 <vPortValidateInterruptPriority+0x80>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d90b      	bls.n	8010cde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cca:	f383 8811 	msr	BASEPRI, r3
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	603b      	str	r3, [r7, #0]
}
 8010cd8:	bf00      	nop
 8010cda:	bf00      	nop
 8010cdc:	e7fd      	b.n	8010cda <vPortValidateInterruptPriority+0x62>
	}
 8010cde:	bf00      	nop
 8010ce0:	3714      	adds	r7, #20
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr
 8010cea:	bf00      	nop
 8010cec:	e000e3f0 	.word	0xe000e3f0
 8010cf0:	20001bf4 	.word	0x20001bf4
 8010cf4:	e000ed0c 	.word	0xe000ed0c
 8010cf8:	20001bf8 	.word	0x20001bf8

08010cfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08a      	sub	sp, #40	@ 0x28
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d04:	2300      	movs	r3, #0
 8010d06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d08:	f7fe f85e 	bl	800edc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e80 <pvPortMalloc+0x184>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d101      	bne.n	8010d18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d14:	f000 f924 	bl	8010f60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d18:	4b5a      	ldr	r3, [pc, #360]	@ (8010e84 <pvPortMalloc+0x188>)
 8010d1a:	681a      	ldr	r2, [r3, #0]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4013      	ands	r3, r2
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f040 8095 	bne.w	8010e50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d01e      	beq.n	8010d6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010d2c:	2208      	movs	r2, #8
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	4413      	add	r3, r2
 8010d32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f003 0307 	and.w	r3, r3, #7
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d015      	beq.n	8010d6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f023 0307 	bic.w	r3, r3, #7
 8010d44:	3308      	adds	r3, #8
 8010d46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f003 0307 	and.w	r3, r3, #7
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00b      	beq.n	8010d6a <pvPortMalloc+0x6e>
	__asm volatile
 8010d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d56:	f383 8811 	msr	BASEPRI, r3
 8010d5a:	f3bf 8f6f 	isb	sy
 8010d5e:	f3bf 8f4f 	dsb	sy
 8010d62:	617b      	str	r3, [r7, #20]
}
 8010d64:	bf00      	nop
 8010d66:	bf00      	nop
 8010d68:	e7fd      	b.n	8010d66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d06f      	beq.n	8010e50 <pvPortMalloc+0x154>
 8010d70:	4b45      	ldr	r3, [pc, #276]	@ (8010e88 <pvPortMalloc+0x18c>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d86a      	bhi.n	8010e50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d7a:	4b44      	ldr	r3, [pc, #272]	@ (8010e8c <pvPortMalloc+0x190>)
 8010d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d7e:	4b43      	ldr	r3, [pc, #268]	@ (8010e8c <pvPortMalloc+0x190>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d84:	e004      	b.n	8010d90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d903      	bls.n	8010da2 <pvPortMalloc+0xa6>
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1f1      	bne.n	8010d86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010da2:	4b37      	ldr	r3, [pc, #220]	@ (8010e80 <pvPortMalloc+0x184>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d051      	beq.n	8010e50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010dac:	6a3b      	ldr	r3, [r7, #32]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2208      	movs	r2, #8
 8010db2:	4413      	add	r3, r2
 8010db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	6a3b      	ldr	r3, [r7, #32]
 8010dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc0:	685a      	ldr	r2, [r3, #4]
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	1ad2      	subs	r2, r2, r3
 8010dc6:	2308      	movs	r3, #8
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d920      	bls.n	8010e10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4413      	add	r3, r2
 8010dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	f003 0307 	and.w	r3, r3, #7
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d00b      	beq.n	8010df8 <pvPortMalloc+0xfc>
	__asm volatile
 8010de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010de4:	f383 8811 	msr	BASEPRI, r3
 8010de8:	f3bf 8f6f 	isb	sy
 8010dec:	f3bf 8f4f 	dsb	sy
 8010df0:	613b      	str	r3, [r7, #16]
}
 8010df2:	bf00      	nop
 8010df4:	bf00      	nop
 8010df6:	e7fd      	b.n	8010df4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dfa:	685a      	ldr	r2, [r3, #4]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	1ad2      	subs	r2, r2, r3
 8010e00:	69bb      	ldr	r3, [r7, #24]
 8010e02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e0a:	69b8      	ldr	r0, [r7, #24]
 8010e0c:	f000 f90a 	bl	8011024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e10:	4b1d      	ldr	r3, [pc, #116]	@ (8010e88 <pvPortMalloc+0x18c>)
 8010e12:	681a      	ldr	r2, [r3, #0]
 8010e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	1ad3      	subs	r3, r2, r3
 8010e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8010e88 <pvPortMalloc+0x18c>)
 8010e1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8010e88 <pvPortMalloc+0x18c>)
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	4b1b      	ldr	r3, [pc, #108]	@ (8010e90 <pvPortMalloc+0x194>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d203      	bcs.n	8010e32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e2a:	4b17      	ldr	r3, [pc, #92]	@ (8010e88 <pvPortMalloc+0x18c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a18      	ldr	r2, [pc, #96]	@ (8010e90 <pvPortMalloc+0x194>)
 8010e30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e34:	685a      	ldr	r2, [r3, #4]
 8010e36:	4b13      	ldr	r3, [pc, #76]	@ (8010e84 <pvPortMalloc+0x188>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	431a      	orrs	r2, r3
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e42:	2200      	movs	r2, #0
 8010e44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010e46:	4b13      	ldr	r3, [pc, #76]	@ (8010e94 <pvPortMalloc+0x198>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	4a11      	ldr	r2, [pc, #68]	@ (8010e94 <pvPortMalloc+0x198>)
 8010e4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e50:	f7fd ffc8 	bl	800ede4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	f003 0307 	and.w	r3, r3, #7
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00b      	beq.n	8010e76 <pvPortMalloc+0x17a>
	__asm volatile
 8010e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	60fb      	str	r3, [r7, #12]
}
 8010e70:	bf00      	nop
 8010e72:	bf00      	nop
 8010e74:	e7fd      	b.n	8010e72 <pvPortMalloc+0x176>
	return pvReturn;
 8010e76:	69fb      	ldr	r3, [r7, #28]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3728      	adds	r7, #40	@ 0x28
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	20011604 	.word	0x20011604
 8010e84:	20011618 	.word	0x20011618
 8010e88:	20011608 	.word	0x20011608
 8010e8c:	200115fc 	.word	0x200115fc
 8010e90:	2001160c 	.word	0x2001160c
 8010e94:	20011610 	.word	0x20011610

08010e98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b086      	sub	sp, #24
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d04f      	beq.n	8010f4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eaa:	2308      	movs	r3, #8
 8010eac:	425b      	negs	r3, r3
 8010eae:	697a      	ldr	r2, [r7, #20]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	4b25      	ldr	r3, [pc, #148]	@ (8010f54 <vPortFree+0xbc>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4013      	ands	r3, r2
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d10b      	bne.n	8010ede <vPortFree+0x46>
	__asm volatile
 8010ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eca:	f383 8811 	msr	BASEPRI, r3
 8010ece:	f3bf 8f6f 	isb	sy
 8010ed2:	f3bf 8f4f 	dsb	sy
 8010ed6:	60fb      	str	r3, [r7, #12]
}
 8010ed8:	bf00      	nop
 8010eda:	bf00      	nop
 8010edc:	e7fd      	b.n	8010eda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00b      	beq.n	8010efe <vPortFree+0x66>
	__asm volatile
 8010ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eea:	f383 8811 	msr	BASEPRI, r3
 8010eee:	f3bf 8f6f 	isb	sy
 8010ef2:	f3bf 8f4f 	dsb	sy
 8010ef6:	60bb      	str	r3, [r7, #8]
}
 8010ef8:	bf00      	nop
 8010efa:	bf00      	nop
 8010efc:	e7fd      	b.n	8010efa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	685a      	ldr	r2, [r3, #4]
 8010f02:	4b14      	ldr	r3, [pc, #80]	@ (8010f54 <vPortFree+0xbc>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4013      	ands	r3, r2
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d01e      	beq.n	8010f4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d11a      	bne.n	8010f4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	685a      	ldr	r2, [r3, #4]
 8010f18:	4b0e      	ldr	r3, [pc, #56]	@ (8010f54 <vPortFree+0xbc>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	43db      	mvns	r3, r3
 8010f1e:	401a      	ands	r2, r3
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f24:	f7fd ff50 	bl	800edc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f58 <vPortFree+0xc0>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4413      	add	r3, r2
 8010f32:	4a09      	ldr	r2, [pc, #36]	@ (8010f58 <vPortFree+0xc0>)
 8010f34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f36:	6938      	ldr	r0, [r7, #16]
 8010f38:	f000 f874 	bl	8011024 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f3c:	4b07      	ldr	r3, [pc, #28]	@ (8010f5c <vPortFree+0xc4>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	3301      	adds	r3, #1
 8010f42:	4a06      	ldr	r2, [pc, #24]	@ (8010f5c <vPortFree+0xc4>)
 8010f44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010f46:	f7fd ff4d 	bl	800ede4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f4a:	bf00      	nop
 8010f4c:	3718      	adds	r7, #24
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	20011618 	.word	0x20011618
 8010f58:	20011608 	.word	0x20011608
 8010f5c:	20011614 	.word	0x20011614

08010f60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f66:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8010f6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f6c:	4b27      	ldr	r3, [pc, #156]	@ (801100c <prvHeapInit+0xac>)
 8010f6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	f003 0307 	and.w	r3, r3, #7
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00c      	beq.n	8010f94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	3307      	adds	r3, #7
 8010f7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f023 0307 	bic.w	r3, r3, #7
 8010f86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	1ad3      	subs	r3, r2, r3
 8010f8e:	4a1f      	ldr	r2, [pc, #124]	@ (801100c <prvHeapInit+0xac>)
 8010f90:	4413      	add	r3, r2
 8010f92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f98:	4a1d      	ldr	r2, [pc, #116]	@ (8011010 <prvHeapInit+0xb0>)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8011010 <prvHeapInit+0xb0>)
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	68ba      	ldr	r2, [r7, #8]
 8010fa8:	4413      	add	r3, r2
 8010faa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fac:	2208      	movs	r2, #8
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	1a9b      	subs	r3, r3, r2
 8010fb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f023 0307 	bic.w	r3, r3, #7
 8010fba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	4a15      	ldr	r2, [pc, #84]	@ (8011014 <prvHeapInit+0xb4>)
 8010fc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fc2:	4b14      	ldr	r3, [pc, #80]	@ (8011014 <prvHeapInit+0xb4>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fca:	4b12      	ldr	r3, [pc, #72]	@ (8011014 <prvHeapInit+0xb4>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	1ad2      	subs	r2, r2, r3
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8011014 <prvHeapInit+0xb4>)
 8010fe2:	681a      	ldr	r2, [r3, #0]
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	4a0a      	ldr	r2, [pc, #40]	@ (8011018 <prvHeapInit+0xb8>)
 8010fee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	4a09      	ldr	r2, [pc, #36]	@ (801101c <prvHeapInit+0xbc>)
 8010ff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010ff8:	4b09      	ldr	r3, [pc, #36]	@ (8011020 <prvHeapInit+0xc0>)
 8010ffa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010ffe:	601a      	str	r2, [r3, #0]
}
 8011000:	bf00      	nop
 8011002:	3714      	adds	r7, #20
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr
 801100c:	20001bfc 	.word	0x20001bfc
 8011010:	200115fc 	.word	0x200115fc
 8011014:	20011604 	.word	0x20011604
 8011018:	2001160c 	.word	0x2001160c
 801101c:	20011608 	.word	0x20011608
 8011020:	20011618 	.word	0x20011618

08011024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011024:	b480      	push	{r7}
 8011026:	b085      	sub	sp, #20
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801102c:	4b28      	ldr	r3, [pc, #160]	@ (80110d0 <prvInsertBlockIntoFreeList+0xac>)
 801102e:	60fb      	str	r3, [r7, #12]
 8011030:	e002      	b.n	8011038 <prvInsertBlockIntoFreeList+0x14>
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	60fb      	str	r3, [r7, #12]
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	687a      	ldr	r2, [r7, #4]
 801103e:	429a      	cmp	r2, r3
 8011040:	d8f7      	bhi.n	8011032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	4413      	add	r3, r2
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	429a      	cmp	r2, r3
 8011052:	d108      	bne.n	8011066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	685a      	ldr	r2, [r3, #4]
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	441a      	add	r2, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	441a      	add	r2, r3
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	429a      	cmp	r2, r3
 8011078:	d118      	bne.n	80110ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681a      	ldr	r2, [r3, #0]
 801107e:	4b15      	ldr	r3, [pc, #84]	@ (80110d4 <prvInsertBlockIntoFreeList+0xb0>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	429a      	cmp	r2, r3
 8011084:	d00d      	beq.n	80110a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	441a      	add	r2, r3
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	601a      	str	r2, [r3, #0]
 80110a0:	e008      	b.n	80110b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110a2:	4b0c      	ldr	r3, [pc, #48]	@ (80110d4 <prvInsertBlockIntoFreeList+0xb0>)
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	601a      	str	r2, [r3, #0]
 80110aa:	e003      	b.n	80110b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d002      	beq.n	80110c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	687a      	ldr	r2, [r7, #4]
 80110c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110c2:	bf00      	nop
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr
 80110ce:	bf00      	nop
 80110d0:	200115fc 	.word	0x200115fc
 80110d4:	20011604 	.word	0x20011604

080110d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80110dc:	2201      	movs	r2, #1
 80110de:	490e      	ldr	r1, [pc, #56]	@ (8011118 <MX_USB_HOST_Init+0x40>)
 80110e0:	480e      	ldr	r0, [pc, #56]	@ (801111c <MX_USB_HOST_Init+0x44>)
 80110e2:	f7f9 feb9 	bl	800ae58 <USBH_Init>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d001      	beq.n	80110f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80110ec:	f7f2 f940 	bl	8003370 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80110f0:	490b      	ldr	r1, [pc, #44]	@ (8011120 <MX_USB_HOST_Init+0x48>)
 80110f2:	480a      	ldr	r0, [pc, #40]	@ (801111c <MX_USB_HOST_Init+0x44>)
 80110f4:	f7f9 ff7d 	bl	800aff2 <USBH_RegisterClass>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d001      	beq.n	8011102 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80110fe:	f7f2 f937 	bl	8003370 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011102:	4806      	ldr	r0, [pc, #24]	@ (801111c <MX_USB_HOST_Init+0x44>)
 8011104:	f7fa f801 	bl	800b10a <USBH_Start>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801110e:	f7f2 f92f 	bl	8003370 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011112:	bf00      	nop
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	08011125 	.word	0x08011125
 801111c:	2001161c 	.word	0x2001161c
 8011120:	20000270 	.word	0x20000270

08011124 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	460b      	mov	r3, r1
 801112e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011130:	78fb      	ldrb	r3, [r7, #3]
 8011132:	3b01      	subs	r3, #1
 8011134:	2b04      	cmp	r3, #4
 8011136:	d819      	bhi.n	801116c <USBH_UserProcess+0x48>
 8011138:	a201      	add	r2, pc, #4	@ (adr r2, 8011140 <USBH_UserProcess+0x1c>)
 801113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801113e:	bf00      	nop
 8011140:	0801116d 	.word	0x0801116d
 8011144:	0801115d 	.word	0x0801115d
 8011148:	0801116d 	.word	0x0801116d
 801114c:	08011165 	.word	0x08011165
 8011150:	08011155 	.word	0x08011155
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011154:	4b09      	ldr	r3, [pc, #36]	@ (801117c <USBH_UserProcess+0x58>)
 8011156:	2203      	movs	r2, #3
 8011158:	701a      	strb	r2, [r3, #0]
  break;
 801115a:	e008      	b.n	801116e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801115c:	4b07      	ldr	r3, [pc, #28]	@ (801117c <USBH_UserProcess+0x58>)
 801115e:	2202      	movs	r2, #2
 8011160:	701a      	strb	r2, [r3, #0]
  break;
 8011162:	e004      	b.n	801116e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011164:	4b05      	ldr	r3, [pc, #20]	@ (801117c <USBH_UserProcess+0x58>)
 8011166:	2201      	movs	r2, #1
 8011168:	701a      	strb	r2, [r3, #0]
  break;
 801116a:	e000      	b.n	801116e <USBH_UserProcess+0x4a>

  default:
  break;
 801116c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801116e:	bf00      	nop
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	20011a00 	.word	0x20011a00

08011180 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b08a      	sub	sp, #40	@ 0x28
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011188:	f107 0314 	add.w	r3, r7, #20
 801118c:	2200      	movs	r2, #0
 801118e:	601a      	str	r2, [r3, #0]
 8011190:	605a      	str	r2, [r3, #4]
 8011192:	609a      	str	r2, [r3, #8]
 8011194:	60da      	str	r2, [r3, #12]
 8011196:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80111a0:	d147      	bne.n	8011232 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111a2:	2300      	movs	r3, #0
 80111a4:	613b      	str	r3, [r7, #16]
 80111a6:	4b25      	ldr	r3, [pc, #148]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 80111a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111aa:	4a24      	ldr	r2, [pc, #144]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 80111ac:	f043 0301 	orr.w	r3, r3, #1
 80111b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80111b2:	4b22      	ldr	r3, [pc, #136]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 80111b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111b6:	f003 0301 	and.w	r3, r3, #1
 80111ba:	613b      	str	r3, [r7, #16]
 80111bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80111be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80111c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80111c4:	2300      	movs	r3, #0
 80111c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111c8:	2300      	movs	r3, #0
 80111ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80111cc:	f107 0314 	add.w	r3, r7, #20
 80111d0:	4619      	mov	r1, r3
 80111d2:	481b      	ldr	r0, [pc, #108]	@ (8011240 <HAL_HCD_MspInit+0xc0>)
 80111d4:	f7f2 fe5e 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80111d8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80111dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111de:	2302      	movs	r3, #2
 80111e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111e2:	2300      	movs	r3, #0
 80111e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111e6:	2300      	movs	r3, #0
 80111e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80111ea:	230a      	movs	r3, #10
 80111ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80111ee:	f107 0314 	add.w	r3, r7, #20
 80111f2:	4619      	mov	r1, r3
 80111f4:	4812      	ldr	r0, [pc, #72]	@ (8011240 <HAL_HCD_MspInit+0xc0>)
 80111f6:	f7f2 fe4d 	bl	8003e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80111fa:	4b10      	ldr	r3, [pc, #64]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 80111fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111fe:	4a0f      	ldr	r2, [pc, #60]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 8011200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011204:	6353      	str	r3, [r2, #52]	@ 0x34
 8011206:	2300      	movs	r3, #0
 8011208:	60fb      	str	r3, [r7, #12]
 801120a:	4b0c      	ldr	r3, [pc, #48]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 801120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801120e:	4a0b      	ldr	r2, [pc, #44]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 8011210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011214:	6453      	str	r3, [r2, #68]	@ 0x44
 8011216:	4b09      	ldr	r3, [pc, #36]	@ (801123c <HAL_HCD_MspInit+0xbc>)
 8011218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801121a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801121e:	60fb      	str	r3, [r7, #12]
 8011220:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011222:	2200      	movs	r2, #0
 8011224:	2105      	movs	r1, #5
 8011226:	2043      	movs	r0, #67	@ 0x43
 8011228:	f7f2 fd78 	bl	8003d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801122c:	2043      	movs	r0, #67	@ 0x43
 801122e:	f7f2 fd91 	bl	8003d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011232:	bf00      	nop
 8011234:	3728      	adds	r7, #40	@ 0x28
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	40023800 	.word	0x40023800
 8011240:	40020000 	.word	0x40020000

08011244 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011252:	4618      	mov	r0, r3
 8011254:	f7fa fb91 	bl	800b97a <USBH_LL_IncTimer>
}
 8011258:	bf00      	nop
 801125a:	3708      	adds	r7, #8
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b082      	sub	sp, #8
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801126e:	4618      	mov	r0, r3
 8011270:	f7fa fbd1 	bl	800ba16 <USBH_LL_Connect>
}
 8011274:	bf00      	nop
 8011276:	3708      	adds	r7, #8
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801128a:	4618      	mov	r0, r3
 801128c:	f7fa fbde 	bl	800ba4c <USBH_LL_Disconnect>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	460b      	mov	r3, r1
 80112a2:	70fb      	strb	r3, [r7, #3]
 80112a4:	4613      	mov	r3, r2
 80112a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fa fc31 	bl	800bb16 <USBH_LL_NotifyURBChange>
#endif
}
 80112b4:	bf00      	nop
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fa fb7f 	bl	800b9ce <USBH_LL_PortEnabled>
}
 80112d0:	bf00      	nop
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fa fb83 	bl	800b9f2 <USBH_LL_PortDisabled>
}
 80112ec:	bf00      	nop
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b082      	sub	sp, #8
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011302:	2b01      	cmp	r3, #1
 8011304:	d12a      	bne.n	801135c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011306:	4a18      	ldr	r2, [pc, #96]	@ (8011368 <USBH_LL_Init+0x74>)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a15      	ldr	r2, [pc, #84]	@ (8011368 <USBH_LL_Init+0x74>)
 8011312:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011316:	4b14      	ldr	r3, [pc, #80]	@ (8011368 <USBH_LL_Init+0x74>)
 8011318:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801131c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801131e:	4b12      	ldr	r3, [pc, #72]	@ (8011368 <USBH_LL_Init+0x74>)
 8011320:	2208      	movs	r2, #8
 8011322:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011324:	4b10      	ldr	r3, [pc, #64]	@ (8011368 <USBH_LL_Init+0x74>)
 8011326:	2201      	movs	r2, #1
 8011328:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801132a:	4b0f      	ldr	r3, [pc, #60]	@ (8011368 <USBH_LL_Init+0x74>)
 801132c:	2200      	movs	r2, #0
 801132e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011330:	4b0d      	ldr	r3, [pc, #52]	@ (8011368 <USBH_LL_Init+0x74>)
 8011332:	2202      	movs	r2, #2
 8011334:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011336:	4b0c      	ldr	r3, [pc, #48]	@ (8011368 <USBH_LL_Init+0x74>)
 8011338:	2200      	movs	r2, #0
 801133a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801133c:	480a      	ldr	r0, [pc, #40]	@ (8011368 <USBH_LL_Init+0x74>)
 801133e:	f7f2 ffb4 	bl	80042aa <HAL_HCD_Init>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	d001      	beq.n	801134c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011348:	f7f2 f812 	bl	8003370 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801134c:	4806      	ldr	r0, [pc, #24]	@ (8011368 <USBH_LL_Init+0x74>)
 801134e:	f7f3 fc15 	bl	8004b7c <HAL_HCD_GetCurrentFrame>
 8011352:	4603      	mov	r3, r0
 8011354:	4619      	mov	r1, r3
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7fa fb00 	bl	800b95c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3708      	adds	r7, #8
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	20011a04 	.word	0x20011a04

0801136c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b084      	sub	sp, #16
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011374:	2300      	movs	r3, #0
 8011376:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011378:	2300      	movs	r3, #0
 801137a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011382:	4618      	mov	r0, r3
 8011384:	f7f3 fb82 	bl	8004a8c <HAL_HCD_Start>
 8011388:	4603      	mov	r3, r0
 801138a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801138c:	7bfb      	ldrb	r3, [r7, #15]
 801138e:	4618      	mov	r0, r3
 8011390:	f000 f95e 	bl	8011650 <USBH_Get_USB_Status>
 8011394:	4603      	mov	r3, r0
 8011396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011398:	7bbb      	ldrb	r3, [r7, #14]
}
 801139a:	4618      	mov	r0, r3
 801139c:	3710      	adds	r7, #16
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b084      	sub	sp, #16
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113aa:	2300      	movs	r3, #0
 80113ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7f3 fb8a 	bl	8004ad2 <HAL_HCD_Stop>
 80113be:	4603      	mov	r3, r0
 80113c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113c2:	7bfb      	ldrb	r3, [r7, #15]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 f943 	bl	8011650 <USBH_Get_USB_Status>
 80113ca:	4603      	mov	r3, r0
 80113cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80113e0:	2301      	movs	r3, #1
 80113e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7f3 fbd4 	bl	8004b98 <HAL_HCD_GetCurrentSpeed>
 80113f0:	4603      	mov	r3, r0
 80113f2:	2b02      	cmp	r3, #2
 80113f4:	d00c      	beq.n	8011410 <USBH_LL_GetSpeed+0x38>
 80113f6:	2b02      	cmp	r3, #2
 80113f8:	d80d      	bhi.n	8011416 <USBH_LL_GetSpeed+0x3e>
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d002      	beq.n	8011404 <USBH_LL_GetSpeed+0x2c>
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d003      	beq.n	801140a <USBH_LL_GetSpeed+0x32>
 8011402:	e008      	b.n	8011416 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011404:	2300      	movs	r3, #0
 8011406:	73fb      	strb	r3, [r7, #15]
    break;
 8011408:	e008      	b.n	801141c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801140a:	2301      	movs	r3, #1
 801140c:	73fb      	strb	r3, [r7, #15]
    break;
 801140e:	e005      	b.n	801141c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011410:	2302      	movs	r3, #2
 8011412:	73fb      	strb	r3, [r7, #15]
    break;
 8011414:	e002      	b.n	801141c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011416:	2301      	movs	r3, #1
 8011418:	73fb      	strb	r3, [r7, #15]
    break;
 801141a:	bf00      	nop
  }
  return  speed;
 801141c:	7bfb      	ldrb	r3, [r7, #15]
}
 801141e:	4618      	mov	r0, r3
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}

08011426 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011426:	b580      	push	{r7, lr}
 8011428:	b084      	sub	sp, #16
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801142e:	2300      	movs	r3, #0
 8011430:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011432:	2300      	movs	r3, #0
 8011434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801143c:	4618      	mov	r0, r3
 801143e:	f7f3 fb65 	bl	8004b0c <HAL_HCD_ResetPort>
 8011442:	4603      	mov	r3, r0
 8011444:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011446:	7bfb      	ldrb	r3, [r7, #15]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 f901 	bl	8011650 <USBH_Get_USB_Status>
 801144e:	4603      	mov	r3, r0
 8011450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011452:	7bbb      	ldrb	r3, [r7, #14]
}
 8011454:	4618      	mov	r0, r3
 8011456:	3710      	adds	r7, #16
 8011458:	46bd      	mov	sp, r7
 801145a:	bd80      	pop	{r7, pc}

0801145c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	460b      	mov	r3, r1
 8011466:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801146e:	78fa      	ldrb	r2, [r7, #3]
 8011470:	4611      	mov	r1, r2
 8011472:	4618      	mov	r0, r3
 8011474:	f7f3 fb6d 	bl	8004b52 <HAL_HCD_HC_GetXferCount>
 8011478:	4603      	mov	r3, r0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}

08011482 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011482:	b590      	push	{r4, r7, lr}
 8011484:	b089      	sub	sp, #36	@ 0x24
 8011486:	af04      	add	r7, sp, #16
 8011488:	6078      	str	r0, [r7, #4]
 801148a:	4608      	mov	r0, r1
 801148c:	4611      	mov	r1, r2
 801148e:	461a      	mov	r2, r3
 8011490:	4603      	mov	r3, r0
 8011492:	70fb      	strb	r3, [r7, #3]
 8011494:	460b      	mov	r3, r1
 8011496:	70bb      	strb	r3, [r7, #2]
 8011498:	4613      	mov	r3, r2
 801149a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801149c:	2300      	movs	r3, #0
 801149e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114a0:	2300      	movs	r3, #0
 80114a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80114aa:	787c      	ldrb	r4, [r7, #1]
 80114ac:	78ba      	ldrb	r2, [r7, #2]
 80114ae:	78f9      	ldrb	r1, [r7, #3]
 80114b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80114b2:	9302      	str	r3, [sp, #8]
 80114b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114be:	9300      	str	r3, [sp, #0]
 80114c0:	4623      	mov	r3, r4
 80114c2:	f7f2 ff59 	bl	8004378 <HAL_HCD_HC_Init>
 80114c6:	4603      	mov	r3, r0
 80114c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f000 f8bf 	bl	8011650 <USBH_Get_USB_Status>
 80114d2:	4603      	mov	r3, r0
 80114d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3714      	adds	r7, #20
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd90      	pop	{r4, r7, pc}

080114e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ec:	2300      	movs	r3, #0
 80114ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	4611      	mov	r1, r2
 80114fe:	4618      	mov	r0, r3
 8011500:	f7f2 fff2 	bl	80044e8 <HAL_HCD_HC_Halt>
 8011504:	4603      	mov	r3, r0
 8011506:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011508:	7bfb      	ldrb	r3, [r7, #15]
 801150a:	4618      	mov	r0, r3
 801150c:	f000 f8a0 	bl	8011650 <USBH_Get_USB_Status>
 8011510:	4603      	mov	r3, r0
 8011512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011514:	7bbb      	ldrb	r3, [r7, #14]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801151e:	b590      	push	{r4, r7, lr}
 8011520:	b089      	sub	sp, #36	@ 0x24
 8011522:	af04      	add	r7, sp, #16
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	4608      	mov	r0, r1
 8011528:	4611      	mov	r1, r2
 801152a:	461a      	mov	r2, r3
 801152c:	4603      	mov	r3, r0
 801152e:	70fb      	strb	r3, [r7, #3]
 8011530:	460b      	mov	r3, r1
 8011532:	70bb      	strb	r3, [r7, #2]
 8011534:	4613      	mov	r3, r2
 8011536:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011538:	2300      	movs	r3, #0
 801153a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011546:	787c      	ldrb	r4, [r7, #1]
 8011548:	78ba      	ldrb	r2, [r7, #2]
 801154a:	78f9      	ldrb	r1, [r7, #3]
 801154c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011550:	9303      	str	r3, [sp, #12]
 8011552:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011554:	9302      	str	r3, [sp, #8]
 8011556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011558:	9301      	str	r3, [sp, #4]
 801155a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	4623      	mov	r3, r4
 8011562:	f7f2 ffe5 	bl	8004530 <HAL_HCD_HC_SubmitRequest>
 8011566:	4603      	mov	r3, r0
 8011568:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801156a:	7bfb      	ldrb	r3, [r7, #15]
 801156c:	4618      	mov	r0, r3
 801156e:	f000 f86f 	bl	8011650 <USBH_Get_USB_Status>
 8011572:	4603      	mov	r3, r0
 8011574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011576:	7bbb      	ldrb	r3, [r7, #14]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3714      	adds	r7, #20
 801157c:	46bd      	mov	sp, r7
 801157e:	bd90      	pop	{r4, r7, pc}

08011580 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	460b      	mov	r3, r1
 801158a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011592:	78fa      	ldrb	r2, [r7, #3]
 8011594:	4611      	mov	r1, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7f3 fac6 	bl	8004b28 <HAL_HCD_HC_GetURBState>
 801159c:	4603      	mov	r3, r0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3708      	adds	r7, #8
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b082      	sub	sp, #8
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
 80115ae:	460b      	mov	r3, r1
 80115b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d103      	bne.n	80115c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80115bc:	78fb      	ldrb	r3, [r7, #3]
 80115be:	4618      	mov	r0, r3
 80115c0:	f000 f872 	bl	80116a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80115c4:	20c8      	movs	r0, #200	@ 0xc8
 80115c6:	f7f2 facd 	bl	8003b64 <HAL_Delay>
  return USBH_OK;
 80115ca:	2300      	movs	r3, #0
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	460b      	mov	r3, r1
 80115de:	70fb      	strb	r3, [r7, #3]
 80115e0:	4613      	mov	r3, r2
 80115e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80115ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80115ec:	78fa      	ldrb	r2, [r7, #3]
 80115ee:	68f9      	ldr	r1, [r7, #12]
 80115f0:	4613      	mov	r3, r2
 80115f2:	011b      	lsls	r3, r3, #4
 80115f4:	1a9b      	subs	r3, r3, r2
 80115f6:	009b      	lsls	r3, r3, #2
 80115f8:	440b      	add	r3, r1
 80115fa:	3317      	adds	r3, #23
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d00a      	beq.n	8011618 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011602:	78fa      	ldrb	r2, [r7, #3]
 8011604:	68f9      	ldr	r1, [r7, #12]
 8011606:	4613      	mov	r3, r2
 8011608:	011b      	lsls	r3, r3, #4
 801160a:	1a9b      	subs	r3, r3, r2
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	440b      	add	r3, r1
 8011610:	333c      	adds	r3, #60	@ 0x3c
 8011612:	78ba      	ldrb	r2, [r7, #2]
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	e009      	b.n	801162c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011618:	78fa      	ldrb	r2, [r7, #3]
 801161a:	68f9      	ldr	r1, [r7, #12]
 801161c:	4613      	mov	r3, r2
 801161e:	011b      	lsls	r3, r3, #4
 8011620:	1a9b      	subs	r3, r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	440b      	add	r3, r1
 8011626:	333d      	adds	r3, #61	@ 0x3d
 8011628:	78ba      	ldrb	r2, [r7, #2]
 801162a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3714      	adds	r7, #20
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr

0801163a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801163a:	b580      	push	{r7, lr}
 801163c:	b082      	sub	sp, #8
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f7f2 fa8e 	bl	8003b64 <HAL_Delay>
}
 8011648:	bf00      	nop
 801164a:	3708      	adds	r7, #8
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801165a:	2300      	movs	r3, #0
 801165c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	2b03      	cmp	r3, #3
 8011662:	d817      	bhi.n	8011694 <USBH_Get_USB_Status+0x44>
 8011664:	a201      	add	r2, pc, #4	@ (adr r2, 801166c <USBH_Get_USB_Status+0x1c>)
 8011666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801166a:	bf00      	nop
 801166c:	0801167d 	.word	0x0801167d
 8011670:	08011683 	.word	0x08011683
 8011674:	08011689 	.word	0x08011689
 8011678:	0801168f 	.word	0x0801168f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801167c:	2300      	movs	r3, #0
 801167e:	73fb      	strb	r3, [r7, #15]
    break;
 8011680:	e00b      	b.n	801169a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011682:	2302      	movs	r3, #2
 8011684:	73fb      	strb	r3, [r7, #15]
    break;
 8011686:	e008      	b.n	801169a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011688:	2301      	movs	r3, #1
 801168a:	73fb      	strb	r3, [r7, #15]
    break;
 801168c:	e005      	b.n	801169a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801168e:	2302      	movs	r3, #2
 8011690:	73fb      	strb	r3, [r7, #15]
    break;
 8011692:	e002      	b.n	801169a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011694:	2302      	movs	r3, #2
 8011696:	73fb      	strb	r3, [r7, #15]
    break;
 8011698:	bf00      	nop
  }
  return usb_status;
 801169a:	7bfb      	ldrb	r3, [r7, #15]
}
 801169c:	4618      	mov	r0, r3
 801169e:	3714      	adds	r7, #20
 80116a0:	46bd      	mov	sp, r7
 80116a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a6:	4770      	bx	lr

080116a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b084      	sub	sp, #16
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	4603      	mov	r3, r0
 80116b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80116b2:	79fb      	ldrb	r3, [r7, #7]
 80116b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80116b6:	79fb      	ldrb	r3, [r7, #7]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d102      	bne.n	80116c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80116bc:	2301      	movs	r3, #1
 80116be:	73fb      	strb	r3, [r7, #15]
 80116c0:	e001      	b.n	80116c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80116c2:	2300      	movs	r3, #0
 80116c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80116c6:	7bfb      	ldrb	r3, [r7, #15]
 80116c8:	461a      	mov	r2, r3
 80116ca:	2101      	movs	r1, #1
 80116cc:	4803      	ldr	r0, [pc, #12]	@ (80116dc <MX_DriverVbusFS+0x34>)
 80116ce:	f7f2 fd95 	bl	80041fc <HAL_GPIO_WritePin>
}
 80116d2:	bf00      	nop
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	40020800 	.word	0x40020800

080116e0 <atof>:
 80116e0:	2100      	movs	r1, #0
 80116e2:	f000 bec5 	b.w	8012470 <strtod>

080116e6 <atoi>:
 80116e6:	220a      	movs	r2, #10
 80116e8:	2100      	movs	r1, #0
 80116ea:	f000 bf47 	b.w	801257c <strtol>
	...

080116f0 <malloc>:
 80116f0:	4b02      	ldr	r3, [pc, #8]	@ (80116fc <malloc+0xc>)
 80116f2:	4601      	mov	r1, r0
 80116f4:	6818      	ldr	r0, [r3, #0]
 80116f6:	f000 b82d 	b.w	8011754 <_malloc_r>
 80116fa:	bf00      	nop
 80116fc:	2000040c 	.word	0x2000040c

08011700 <free>:
 8011700:	4b02      	ldr	r3, [pc, #8]	@ (801170c <free+0xc>)
 8011702:	4601      	mov	r1, r0
 8011704:	6818      	ldr	r0, [r3, #0]
 8011706:	f002 bcdb 	b.w	80140c0 <_free_r>
 801170a:	bf00      	nop
 801170c:	2000040c 	.word	0x2000040c

08011710 <sbrk_aligned>:
 8011710:	b570      	push	{r4, r5, r6, lr}
 8011712:	4e0f      	ldr	r6, [pc, #60]	@ (8011750 <sbrk_aligned+0x40>)
 8011714:	460c      	mov	r4, r1
 8011716:	6831      	ldr	r1, [r6, #0]
 8011718:	4605      	mov	r5, r0
 801171a:	b911      	cbnz	r1, 8011722 <sbrk_aligned+0x12>
 801171c:	f001 fde8 	bl	80132f0 <_sbrk_r>
 8011720:	6030      	str	r0, [r6, #0]
 8011722:	4621      	mov	r1, r4
 8011724:	4628      	mov	r0, r5
 8011726:	f001 fde3 	bl	80132f0 <_sbrk_r>
 801172a:	1c43      	adds	r3, r0, #1
 801172c:	d103      	bne.n	8011736 <sbrk_aligned+0x26>
 801172e:	f04f 34ff 	mov.w	r4, #4294967295
 8011732:	4620      	mov	r0, r4
 8011734:	bd70      	pop	{r4, r5, r6, pc}
 8011736:	1cc4      	adds	r4, r0, #3
 8011738:	f024 0403 	bic.w	r4, r4, #3
 801173c:	42a0      	cmp	r0, r4
 801173e:	d0f8      	beq.n	8011732 <sbrk_aligned+0x22>
 8011740:	1a21      	subs	r1, r4, r0
 8011742:	4628      	mov	r0, r5
 8011744:	f001 fdd4 	bl	80132f0 <_sbrk_r>
 8011748:	3001      	adds	r0, #1
 801174a:	d1f2      	bne.n	8011732 <sbrk_aligned+0x22>
 801174c:	e7ef      	b.n	801172e <sbrk_aligned+0x1e>
 801174e:	bf00      	nop
 8011750:	20011de4 	.word	0x20011de4

08011754 <_malloc_r>:
 8011754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011758:	1ccd      	adds	r5, r1, #3
 801175a:	f025 0503 	bic.w	r5, r5, #3
 801175e:	3508      	adds	r5, #8
 8011760:	2d0c      	cmp	r5, #12
 8011762:	bf38      	it	cc
 8011764:	250c      	movcc	r5, #12
 8011766:	2d00      	cmp	r5, #0
 8011768:	4606      	mov	r6, r0
 801176a:	db01      	blt.n	8011770 <_malloc_r+0x1c>
 801176c:	42a9      	cmp	r1, r5
 801176e:	d904      	bls.n	801177a <_malloc_r+0x26>
 8011770:	230c      	movs	r3, #12
 8011772:	6033      	str	r3, [r6, #0]
 8011774:	2000      	movs	r0, #0
 8011776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801177a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011850 <_malloc_r+0xfc>
 801177e:	f000 f869 	bl	8011854 <__malloc_lock>
 8011782:	f8d8 3000 	ldr.w	r3, [r8]
 8011786:	461c      	mov	r4, r3
 8011788:	bb44      	cbnz	r4, 80117dc <_malloc_r+0x88>
 801178a:	4629      	mov	r1, r5
 801178c:	4630      	mov	r0, r6
 801178e:	f7ff ffbf 	bl	8011710 <sbrk_aligned>
 8011792:	1c43      	adds	r3, r0, #1
 8011794:	4604      	mov	r4, r0
 8011796:	d158      	bne.n	801184a <_malloc_r+0xf6>
 8011798:	f8d8 4000 	ldr.w	r4, [r8]
 801179c:	4627      	mov	r7, r4
 801179e:	2f00      	cmp	r7, #0
 80117a0:	d143      	bne.n	801182a <_malloc_r+0xd6>
 80117a2:	2c00      	cmp	r4, #0
 80117a4:	d04b      	beq.n	801183e <_malloc_r+0xea>
 80117a6:	6823      	ldr	r3, [r4, #0]
 80117a8:	4639      	mov	r1, r7
 80117aa:	4630      	mov	r0, r6
 80117ac:	eb04 0903 	add.w	r9, r4, r3
 80117b0:	f001 fd9e 	bl	80132f0 <_sbrk_r>
 80117b4:	4581      	cmp	r9, r0
 80117b6:	d142      	bne.n	801183e <_malloc_r+0xea>
 80117b8:	6821      	ldr	r1, [r4, #0]
 80117ba:	1a6d      	subs	r5, r5, r1
 80117bc:	4629      	mov	r1, r5
 80117be:	4630      	mov	r0, r6
 80117c0:	f7ff ffa6 	bl	8011710 <sbrk_aligned>
 80117c4:	3001      	adds	r0, #1
 80117c6:	d03a      	beq.n	801183e <_malloc_r+0xea>
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	442b      	add	r3, r5
 80117cc:	6023      	str	r3, [r4, #0]
 80117ce:	f8d8 3000 	ldr.w	r3, [r8]
 80117d2:	685a      	ldr	r2, [r3, #4]
 80117d4:	bb62      	cbnz	r2, 8011830 <_malloc_r+0xdc>
 80117d6:	f8c8 7000 	str.w	r7, [r8]
 80117da:	e00f      	b.n	80117fc <_malloc_r+0xa8>
 80117dc:	6822      	ldr	r2, [r4, #0]
 80117de:	1b52      	subs	r2, r2, r5
 80117e0:	d420      	bmi.n	8011824 <_malloc_r+0xd0>
 80117e2:	2a0b      	cmp	r2, #11
 80117e4:	d917      	bls.n	8011816 <_malloc_r+0xc2>
 80117e6:	1961      	adds	r1, r4, r5
 80117e8:	42a3      	cmp	r3, r4
 80117ea:	6025      	str	r5, [r4, #0]
 80117ec:	bf18      	it	ne
 80117ee:	6059      	strne	r1, [r3, #4]
 80117f0:	6863      	ldr	r3, [r4, #4]
 80117f2:	bf08      	it	eq
 80117f4:	f8c8 1000 	streq.w	r1, [r8]
 80117f8:	5162      	str	r2, [r4, r5]
 80117fa:	604b      	str	r3, [r1, #4]
 80117fc:	4630      	mov	r0, r6
 80117fe:	f000 f82f 	bl	8011860 <__malloc_unlock>
 8011802:	f104 000b 	add.w	r0, r4, #11
 8011806:	1d23      	adds	r3, r4, #4
 8011808:	f020 0007 	bic.w	r0, r0, #7
 801180c:	1ac2      	subs	r2, r0, r3
 801180e:	bf1c      	itt	ne
 8011810:	1a1b      	subne	r3, r3, r0
 8011812:	50a3      	strne	r3, [r4, r2]
 8011814:	e7af      	b.n	8011776 <_malloc_r+0x22>
 8011816:	6862      	ldr	r2, [r4, #4]
 8011818:	42a3      	cmp	r3, r4
 801181a:	bf0c      	ite	eq
 801181c:	f8c8 2000 	streq.w	r2, [r8]
 8011820:	605a      	strne	r2, [r3, #4]
 8011822:	e7eb      	b.n	80117fc <_malloc_r+0xa8>
 8011824:	4623      	mov	r3, r4
 8011826:	6864      	ldr	r4, [r4, #4]
 8011828:	e7ae      	b.n	8011788 <_malloc_r+0x34>
 801182a:	463c      	mov	r4, r7
 801182c:	687f      	ldr	r7, [r7, #4]
 801182e:	e7b6      	b.n	801179e <_malloc_r+0x4a>
 8011830:	461a      	mov	r2, r3
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	42a3      	cmp	r3, r4
 8011836:	d1fb      	bne.n	8011830 <_malloc_r+0xdc>
 8011838:	2300      	movs	r3, #0
 801183a:	6053      	str	r3, [r2, #4]
 801183c:	e7de      	b.n	80117fc <_malloc_r+0xa8>
 801183e:	230c      	movs	r3, #12
 8011840:	6033      	str	r3, [r6, #0]
 8011842:	4630      	mov	r0, r6
 8011844:	f000 f80c 	bl	8011860 <__malloc_unlock>
 8011848:	e794      	b.n	8011774 <_malloc_r+0x20>
 801184a:	6005      	str	r5, [r0, #0]
 801184c:	e7d6      	b.n	80117fc <_malloc_r+0xa8>
 801184e:	bf00      	nop
 8011850:	20011de8 	.word	0x20011de8

08011854 <__malloc_lock>:
 8011854:	4801      	ldr	r0, [pc, #4]	@ (801185c <__malloc_lock+0x8>)
 8011856:	f001 bd98 	b.w	801338a <__retarget_lock_acquire_recursive>
 801185a:	bf00      	nop
 801185c:	20011f2c 	.word	0x20011f2c

08011860 <__malloc_unlock>:
 8011860:	4801      	ldr	r0, [pc, #4]	@ (8011868 <__malloc_unlock+0x8>)
 8011862:	f001 bd93 	b.w	801338c <__retarget_lock_release_recursive>
 8011866:	bf00      	nop
 8011868:	20011f2c 	.word	0x20011f2c

0801186c <sulp>:
 801186c:	b570      	push	{r4, r5, r6, lr}
 801186e:	4604      	mov	r4, r0
 8011870:	460d      	mov	r5, r1
 8011872:	ec45 4b10 	vmov	d0, r4, r5
 8011876:	4616      	mov	r6, r2
 8011878:	f003 fb24 	bl	8014ec4 <__ulp>
 801187c:	ec51 0b10 	vmov	r0, r1, d0
 8011880:	b17e      	cbz	r6, 80118a2 <sulp+0x36>
 8011882:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011886:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801188a:	2b00      	cmp	r3, #0
 801188c:	dd09      	ble.n	80118a2 <sulp+0x36>
 801188e:	051b      	lsls	r3, r3, #20
 8011890:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011894:	2400      	movs	r4, #0
 8011896:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801189a:	4622      	mov	r2, r4
 801189c:	462b      	mov	r3, r5
 801189e:	f7ee feab 	bl	80005f8 <__aeabi_dmul>
 80118a2:	ec41 0b10 	vmov	d0, r0, r1
 80118a6:	bd70      	pop	{r4, r5, r6, pc}

080118a8 <_strtod_l>:
 80118a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ac:	b09f      	sub	sp, #124	@ 0x7c
 80118ae:	460c      	mov	r4, r1
 80118b0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80118b2:	2200      	movs	r2, #0
 80118b4:	921a      	str	r2, [sp, #104]	@ 0x68
 80118b6:	9005      	str	r0, [sp, #20]
 80118b8:	f04f 0a00 	mov.w	sl, #0
 80118bc:	f04f 0b00 	mov.w	fp, #0
 80118c0:	460a      	mov	r2, r1
 80118c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80118c4:	7811      	ldrb	r1, [r2, #0]
 80118c6:	292b      	cmp	r1, #43	@ 0x2b
 80118c8:	d04a      	beq.n	8011960 <_strtod_l+0xb8>
 80118ca:	d838      	bhi.n	801193e <_strtod_l+0x96>
 80118cc:	290d      	cmp	r1, #13
 80118ce:	d832      	bhi.n	8011936 <_strtod_l+0x8e>
 80118d0:	2908      	cmp	r1, #8
 80118d2:	d832      	bhi.n	801193a <_strtod_l+0x92>
 80118d4:	2900      	cmp	r1, #0
 80118d6:	d03b      	beq.n	8011950 <_strtod_l+0xa8>
 80118d8:	2200      	movs	r2, #0
 80118da:	920e      	str	r2, [sp, #56]	@ 0x38
 80118dc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80118de:	782a      	ldrb	r2, [r5, #0]
 80118e0:	2a30      	cmp	r2, #48	@ 0x30
 80118e2:	f040 80b2 	bne.w	8011a4a <_strtod_l+0x1a2>
 80118e6:	786a      	ldrb	r2, [r5, #1]
 80118e8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80118ec:	2a58      	cmp	r2, #88	@ 0x58
 80118ee:	d16e      	bne.n	80119ce <_strtod_l+0x126>
 80118f0:	9302      	str	r3, [sp, #8]
 80118f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80118f4:	9301      	str	r3, [sp, #4]
 80118f6:	ab1a      	add	r3, sp, #104	@ 0x68
 80118f8:	9300      	str	r3, [sp, #0]
 80118fa:	4a8f      	ldr	r2, [pc, #572]	@ (8011b38 <_strtod_l+0x290>)
 80118fc:	9805      	ldr	r0, [sp, #20]
 80118fe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011900:	a919      	add	r1, sp, #100	@ 0x64
 8011902:	f002 fc8f 	bl	8014224 <__gethex>
 8011906:	f010 060f 	ands.w	r6, r0, #15
 801190a:	4604      	mov	r4, r0
 801190c:	d005      	beq.n	801191a <_strtod_l+0x72>
 801190e:	2e06      	cmp	r6, #6
 8011910:	d128      	bne.n	8011964 <_strtod_l+0xbc>
 8011912:	3501      	adds	r5, #1
 8011914:	2300      	movs	r3, #0
 8011916:	9519      	str	r5, [sp, #100]	@ 0x64
 8011918:	930e      	str	r3, [sp, #56]	@ 0x38
 801191a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801191c:	2b00      	cmp	r3, #0
 801191e:	f040 858e 	bne.w	801243e <_strtod_l+0xb96>
 8011922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011924:	b1cb      	cbz	r3, 801195a <_strtod_l+0xb2>
 8011926:	4652      	mov	r2, sl
 8011928:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801192c:	ec43 2b10 	vmov	d0, r2, r3
 8011930:	b01f      	add	sp, #124	@ 0x7c
 8011932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011936:	2920      	cmp	r1, #32
 8011938:	d1ce      	bne.n	80118d8 <_strtod_l+0x30>
 801193a:	3201      	adds	r2, #1
 801193c:	e7c1      	b.n	80118c2 <_strtod_l+0x1a>
 801193e:	292d      	cmp	r1, #45	@ 0x2d
 8011940:	d1ca      	bne.n	80118d8 <_strtod_l+0x30>
 8011942:	2101      	movs	r1, #1
 8011944:	910e      	str	r1, [sp, #56]	@ 0x38
 8011946:	1c51      	adds	r1, r2, #1
 8011948:	9119      	str	r1, [sp, #100]	@ 0x64
 801194a:	7852      	ldrb	r2, [r2, #1]
 801194c:	2a00      	cmp	r2, #0
 801194e:	d1c5      	bne.n	80118dc <_strtod_l+0x34>
 8011950:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011952:	9419      	str	r4, [sp, #100]	@ 0x64
 8011954:	2b00      	cmp	r3, #0
 8011956:	f040 8570 	bne.w	801243a <_strtod_l+0xb92>
 801195a:	4652      	mov	r2, sl
 801195c:	465b      	mov	r3, fp
 801195e:	e7e5      	b.n	801192c <_strtod_l+0x84>
 8011960:	2100      	movs	r1, #0
 8011962:	e7ef      	b.n	8011944 <_strtod_l+0x9c>
 8011964:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011966:	b13a      	cbz	r2, 8011978 <_strtod_l+0xd0>
 8011968:	2135      	movs	r1, #53	@ 0x35
 801196a:	a81c      	add	r0, sp, #112	@ 0x70
 801196c:	f003 fba4 	bl	80150b8 <__copybits>
 8011970:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011972:	9805      	ldr	r0, [sp, #20]
 8011974:	f002 ff7a 	bl	801486c <_Bfree>
 8011978:	3e01      	subs	r6, #1
 801197a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801197c:	2e04      	cmp	r6, #4
 801197e:	d806      	bhi.n	801198e <_strtod_l+0xe6>
 8011980:	e8df f006 	tbb	[pc, r6]
 8011984:	201d0314 	.word	0x201d0314
 8011988:	14          	.byte	0x14
 8011989:	00          	.byte	0x00
 801198a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801198e:	05e1      	lsls	r1, r4, #23
 8011990:	bf48      	it	mi
 8011992:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801199a:	0d1b      	lsrs	r3, r3, #20
 801199c:	051b      	lsls	r3, r3, #20
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d1bb      	bne.n	801191a <_strtod_l+0x72>
 80119a2:	f001 fcc7 	bl	8013334 <__errno>
 80119a6:	2322      	movs	r3, #34	@ 0x22
 80119a8:	6003      	str	r3, [r0, #0]
 80119aa:	e7b6      	b.n	801191a <_strtod_l+0x72>
 80119ac:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80119b0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80119b4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80119b8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80119bc:	e7e7      	b.n	801198e <_strtod_l+0xe6>
 80119be:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011b40 <_strtod_l+0x298>
 80119c2:	e7e4      	b.n	801198e <_strtod_l+0xe6>
 80119c4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80119c8:	f04f 3aff 	mov.w	sl, #4294967295
 80119cc:	e7df      	b.n	801198e <_strtod_l+0xe6>
 80119ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119d0:	1c5a      	adds	r2, r3, #1
 80119d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80119d4:	785b      	ldrb	r3, [r3, #1]
 80119d6:	2b30      	cmp	r3, #48	@ 0x30
 80119d8:	d0f9      	beq.n	80119ce <_strtod_l+0x126>
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d09d      	beq.n	801191a <_strtod_l+0x72>
 80119de:	2301      	movs	r3, #1
 80119e0:	2700      	movs	r7, #0
 80119e2:	9308      	str	r3, [sp, #32]
 80119e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80119e8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80119ea:	46b9      	mov	r9, r7
 80119ec:	220a      	movs	r2, #10
 80119ee:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80119f0:	7805      	ldrb	r5, [r0, #0]
 80119f2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80119f6:	b2d9      	uxtb	r1, r3
 80119f8:	2909      	cmp	r1, #9
 80119fa:	d928      	bls.n	8011a4e <_strtod_l+0x1a6>
 80119fc:	494f      	ldr	r1, [pc, #316]	@ (8011b3c <_strtod_l+0x294>)
 80119fe:	2201      	movs	r2, #1
 8011a00:	f001 fb72 	bl	80130e8 <strncmp>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d032      	beq.n	8011a6e <_strtod_l+0x1c6>
 8011a08:	2000      	movs	r0, #0
 8011a0a:	462a      	mov	r2, r5
 8011a0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a0e:	464d      	mov	r5, r9
 8011a10:	4603      	mov	r3, r0
 8011a12:	2a65      	cmp	r2, #101	@ 0x65
 8011a14:	d001      	beq.n	8011a1a <_strtod_l+0x172>
 8011a16:	2a45      	cmp	r2, #69	@ 0x45
 8011a18:	d114      	bne.n	8011a44 <_strtod_l+0x19c>
 8011a1a:	b91d      	cbnz	r5, 8011a24 <_strtod_l+0x17c>
 8011a1c:	9a08      	ldr	r2, [sp, #32]
 8011a1e:	4302      	orrs	r2, r0
 8011a20:	d096      	beq.n	8011950 <_strtod_l+0xa8>
 8011a22:	2500      	movs	r5, #0
 8011a24:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011a26:	1c62      	adds	r2, r4, #1
 8011a28:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a2a:	7862      	ldrb	r2, [r4, #1]
 8011a2c:	2a2b      	cmp	r2, #43	@ 0x2b
 8011a2e:	d07a      	beq.n	8011b26 <_strtod_l+0x27e>
 8011a30:	2a2d      	cmp	r2, #45	@ 0x2d
 8011a32:	d07e      	beq.n	8011b32 <_strtod_l+0x28a>
 8011a34:	f04f 0c00 	mov.w	ip, #0
 8011a38:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011a3c:	2909      	cmp	r1, #9
 8011a3e:	f240 8085 	bls.w	8011b4c <_strtod_l+0x2a4>
 8011a42:	9419      	str	r4, [sp, #100]	@ 0x64
 8011a44:	f04f 0800 	mov.w	r8, #0
 8011a48:	e0a5      	b.n	8011b96 <_strtod_l+0x2ee>
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	e7c8      	b.n	80119e0 <_strtod_l+0x138>
 8011a4e:	f1b9 0f08 	cmp.w	r9, #8
 8011a52:	bfd8      	it	le
 8011a54:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011a56:	f100 0001 	add.w	r0, r0, #1
 8011a5a:	bfda      	itte	le
 8011a5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011a60:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011a62:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011a66:	f109 0901 	add.w	r9, r9, #1
 8011a6a:	9019      	str	r0, [sp, #100]	@ 0x64
 8011a6c:	e7bf      	b.n	80119ee <_strtod_l+0x146>
 8011a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a70:	1c5a      	adds	r2, r3, #1
 8011a72:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a74:	785a      	ldrb	r2, [r3, #1]
 8011a76:	f1b9 0f00 	cmp.w	r9, #0
 8011a7a:	d03b      	beq.n	8011af4 <_strtod_l+0x24c>
 8011a7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a7e:	464d      	mov	r5, r9
 8011a80:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011a84:	2b09      	cmp	r3, #9
 8011a86:	d912      	bls.n	8011aae <_strtod_l+0x206>
 8011a88:	2301      	movs	r3, #1
 8011a8a:	e7c2      	b.n	8011a12 <_strtod_l+0x16a>
 8011a8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a8e:	1c5a      	adds	r2, r3, #1
 8011a90:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a92:	785a      	ldrb	r2, [r3, #1]
 8011a94:	3001      	adds	r0, #1
 8011a96:	2a30      	cmp	r2, #48	@ 0x30
 8011a98:	d0f8      	beq.n	8011a8c <_strtod_l+0x1e4>
 8011a9a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011a9e:	2b08      	cmp	r3, #8
 8011aa0:	f200 84d2 	bhi.w	8012448 <_strtod_l+0xba0>
 8011aa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011aa6:	900a      	str	r0, [sp, #40]	@ 0x28
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	930c      	str	r3, [sp, #48]	@ 0x30
 8011aac:	4605      	mov	r5, r0
 8011aae:	3a30      	subs	r2, #48	@ 0x30
 8011ab0:	f100 0301 	add.w	r3, r0, #1
 8011ab4:	d018      	beq.n	8011ae8 <_strtod_l+0x240>
 8011ab6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011ab8:	4419      	add	r1, r3
 8011aba:	910a      	str	r1, [sp, #40]	@ 0x28
 8011abc:	462e      	mov	r6, r5
 8011abe:	f04f 0e0a 	mov.w	lr, #10
 8011ac2:	1c71      	adds	r1, r6, #1
 8011ac4:	eba1 0c05 	sub.w	ip, r1, r5
 8011ac8:	4563      	cmp	r3, ip
 8011aca:	dc15      	bgt.n	8011af8 <_strtod_l+0x250>
 8011acc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011ad0:	182b      	adds	r3, r5, r0
 8011ad2:	2b08      	cmp	r3, #8
 8011ad4:	f105 0501 	add.w	r5, r5, #1
 8011ad8:	4405      	add	r5, r0
 8011ada:	dc1a      	bgt.n	8011b12 <_strtod_l+0x26a>
 8011adc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011ade:	230a      	movs	r3, #10
 8011ae0:	fb03 2301 	mla	r3, r3, r1, r2
 8011ae4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011aea:	1c51      	adds	r1, r2, #1
 8011aec:	9119      	str	r1, [sp, #100]	@ 0x64
 8011aee:	7852      	ldrb	r2, [r2, #1]
 8011af0:	4618      	mov	r0, r3
 8011af2:	e7c5      	b.n	8011a80 <_strtod_l+0x1d8>
 8011af4:	4648      	mov	r0, r9
 8011af6:	e7ce      	b.n	8011a96 <_strtod_l+0x1ee>
 8011af8:	2e08      	cmp	r6, #8
 8011afa:	dc05      	bgt.n	8011b08 <_strtod_l+0x260>
 8011afc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011afe:	fb0e f606 	mul.w	r6, lr, r6
 8011b02:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011b04:	460e      	mov	r6, r1
 8011b06:	e7dc      	b.n	8011ac2 <_strtod_l+0x21a>
 8011b08:	2910      	cmp	r1, #16
 8011b0a:	bfd8      	it	le
 8011b0c:	fb0e f707 	mulle.w	r7, lr, r7
 8011b10:	e7f8      	b.n	8011b04 <_strtod_l+0x25c>
 8011b12:	2b0f      	cmp	r3, #15
 8011b14:	bfdc      	itt	le
 8011b16:	230a      	movle	r3, #10
 8011b18:	fb03 2707 	mlale	r7, r3, r7, r2
 8011b1c:	e7e3      	b.n	8011ae6 <_strtod_l+0x23e>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b22:	2301      	movs	r3, #1
 8011b24:	e77a      	b.n	8011a1c <_strtod_l+0x174>
 8011b26:	f04f 0c00 	mov.w	ip, #0
 8011b2a:	1ca2      	adds	r2, r4, #2
 8011b2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b2e:	78a2      	ldrb	r2, [r4, #2]
 8011b30:	e782      	b.n	8011a38 <_strtod_l+0x190>
 8011b32:	f04f 0c01 	mov.w	ip, #1
 8011b36:	e7f8      	b.n	8011b2a <_strtod_l+0x282>
 8011b38:	080168b4 	.word	0x080168b4
 8011b3c:	08016674 	.word	0x08016674
 8011b40:	7ff00000 	.word	0x7ff00000
 8011b44:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b46:	1c51      	adds	r1, r2, #1
 8011b48:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b4a:	7852      	ldrb	r2, [r2, #1]
 8011b4c:	2a30      	cmp	r2, #48	@ 0x30
 8011b4e:	d0f9      	beq.n	8011b44 <_strtod_l+0x29c>
 8011b50:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011b54:	2908      	cmp	r1, #8
 8011b56:	f63f af75 	bhi.w	8011a44 <_strtod_l+0x19c>
 8011b5a:	3a30      	subs	r2, #48	@ 0x30
 8011b5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b5e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b60:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011b62:	f04f 080a 	mov.w	r8, #10
 8011b66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b68:	1c56      	adds	r6, r2, #1
 8011b6a:	9619      	str	r6, [sp, #100]	@ 0x64
 8011b6c:	7852      	ldrb	r2, [r2, #1]
 8011b6e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011b72:	f1be 0f09 	cmp.w	lr, #9
 8011b76:	d939      	bls.n	8011bec <_strtod_l+0x344>
 8011b78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b7a:	1a76      	subs	r6, r6, r1
 8011b7c:	2e08      	cmp	r6, #8
 8011b7e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011b82:	dc03      	bgt.n	8011b8c <_strtod_l+0x2e4>
 8011b84:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b86:	4588      	cmp	r8, r1
 8011b88:	bfa8      	it	ge
 8011b8a:	4688      	movge	r8, r1
 8011b8c:	f1bc 0f00 	cmp.w	ip, #0
 8011b90:	d001      	beq.n	8011b96 <_strtod_l+0x2ee>
 8011b92:	f1c8 0800 	rsb	r8, r8, #0
 8011b96:	2d00      	cmp	r5, #0
 8011b98:	d14e      	bne.n	8011c38 <_strtod_l+0x390>
 8011b9a:	9908      	ldr	r1, [sp, #32]
 8011b9c:	4308      	orrs	r0, r1
 8011b9e:	f47f aebc 	bne.w	801191a <_strtod_l+0x72>
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	f47f aed4 	bne.w	8011950 <_strtod_l+0xa8>
 8011ba8:	2a69      	cmp	r2, #105	@ 0x69
 8011baa:	d028      	beq.n	8011bfe <_strtod_l+0x356>
 8011bac:	dc25      	bgt.n	8011bfa <_strtod_l+0x352>
 8011bae:	2a49      	cmp	r2, #73	@ 0x49
 8011bb0:	d025      	beq.n	8011bfe <_strtod_l+0x356>
 8011bb2:	2a4e      	cmp	r2, #78	@ 0x4e
 8011bb4:	f47f aecc 	bne.w	8011950 <_strtod_l+0xa8>
 8011bb8:	499a      	ldr	r1, [pc, #616]	@ (8011e24 <_strtod_l+0x57c>)
 8011bba:	a819      	add	r0, sp, #100	@ 0x64
 8011bbc:	f002 fd54 	bl	8014668 <__match>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	f43f aec5 	beq.w	8011950 <_strtod_l+0xa8>
 8011bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	2b28      	cmp	r3, #40	@ 0x28
 8011bcc:	d12e      	bne.n	8011c2c <_strtod_l+0x384>
 8011bce:	4996      	ldr	r1, [pc, #600]	@ (8011e28 <_strtod_l+0x580>)
 8011bd0:	aa1c      	add	r2, sp, #112	@ 0x70
 8011bd2:	a819      	add	r0, sp, #100	@ 0x64
 8011bd4:	f002 fd5c 	bl	8014690 <__hexnan>
 8011bd8:	2805      	cmp	r0, #5
 8011bda:	d127      	bne.n	8011c2c <_strtod_l+0x384>
 8011bdc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bde:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011be2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011be6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011bea:	e696      	b.n	801191a <_strtod_l+0x72>
 8011bec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011bee:	fb08 2101 	mla	r1, r8, r1, r2
 8011bf2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011bf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8011bf8:	e7b5      	b.n	8011b66 <_strtod_l+0x2be>
 8011bfa:	2a6e      	cmp	r2, #110	@ 0x6e
 8011bfc:	e7da      	b.n	8011bb4 <_strtod_l+0x30c>
 8011bfe:	498b      	ldr	r1, [pc, #556]	@ (8011e2c <_strtod_l+0x584>)
 8011c00:	a819      	add	r0, sp, #100	@ 0x64
 8011c02:	f002 fd31 	bl	8014668 <__match>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	f43f aea2 	beq.w	8011950 <_strtod_l+0xa8>
 8011c0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c0e:	4988      	ldr	r1, [pc, #544]	@ (8011e30 <_strtod_l+0x588>)
 8011c10:	3b01      	subs	r3, #1
 8011c12:	a819      	add	r0, sp, #100	@ 0x64
 8011c14:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c16:	f002 fd27 	bl	8014668 <__match>
 8011c1a:	b910      	cbnz	r0, 8011c22 <_strtod_l+0x37a>
 8011c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c1e:	3301      	adds	r3, #1
 8011c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c22:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011e40 <_strtod_l+0x598>
 8011c26:	f04f 0a00 	mov.w	sl, #0
 8011c2a:	e676      	b.n	801191a <_strtod_l+0x72>
 8011c2c:	4881      	ldr	r0, [pc, #516]	@ (8011e34 <_strtod_l+0x58c>)
 8011c2e:	f001 fbc7 	bl	80133c0 <nan>
 8011c32:	ec5b ab10 	vmov	sl, fp, d0
 8011c36:	e670      	b.n	801191a <_strtod_l+0x72>
 8011c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c3a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011c3c:	eba8 0303 	sub.w	r3, r8, r3
 8011c40:	f1b9 0f00 	cmp.w	r9, #0
 8011c44:	bf08      	it	eq
 8011c46:	46a9      	moveq	r9, r5
 8011c48:	2d10      	cmp	r5, #16
 8011c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c4c:	462c      	mov	r4, r5
 8011c4e:	bfa8      	it	ge
 8011c50:	2410      	movge	r4, #16
 8011c52:	f7ee fc57 	bl	8000504 <__aeabi_ui2d>
 8011c56:	2d09      	cmp	r5, #9
 8011c58:	4682      	mov	sl, r0
 8011c5a:	468b      	mov	fp, r1
 8011c5c:	dc13      	bgt.n	8011c86 <_strtod_l+0x3de>
 8011c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f43f ae5a 	beq.w	801191a <_strtod_l+0x72>
 8011c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c68:	dd78      	ble.n	8011d5c <_strtod_l+0x4b4>
 8011c6a:	2b16      	cmp	r3, #22
 8011c6c:	dc5f      	bgt.n	8011d2e <_strtod_l+0x486>
 8011c6e:	4972      	ldr	r1, [pc, #456]	@ (8011e38 <_strtod_l+0x590>)
 8011c70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c78:	4652      	mov	r2, sl
 8011c7a:	465b      	mov	r3, fp
 8011c7c:	f7ee fcbc 	bl	80005f8 <__aeabi_dmul>
 8011c80:	4682      	mov	sl, r0
 8011c82:	468b      	mov	fp, r1
 8011c84:	e649      	b.n	801191a <_strtod_l+0x72>
 8011c86:	4b6c      	ldr	r3, [pc, #432]	@ (8011e38 <_strtod_l+0x590>)
 8011c88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c8c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011c90:	f7ee fcb2 	bl	80005f8 <__aeabi_dmul>
 8011c94:	4682      	mov	sl, r0
 8011c96:	4638      	mov	r0, r7
 8011c98:	468b      	mov	fp, r1
 8011c9a:	f7ee fc33 	bl	8000504 <__aeabi_ui2d>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	4650      	mov	r0, sl
 8011ca4:	4659      	mov	r1, fp
 8011ca6:	f7ee faf1 	bl	800028c <__adddf3>
 8011caa:	2d0f      	cmp	r5, #15
 8011cac:	4682      	mov	sl, r0
 8011cae:	468b      	mov	fp, r1
 8011cb0:	ddd5      	ble.n	8011c5e <_strtod_l+0x3b6>
 8011cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cb4:	1b2c      	subs	r4, r5, r4
 8011cb6:	441c      	add	r4, r3
 8011cb8:	2c00      	cmp	r4, #0
 8011cba:	f340 8093 	ble.w	8011de4 <_strtod_l+0x53c>
 8011cbe:	f014 030f 	ands.w	r3, r4, #15
 8011cc2:	d00a      	beq.n	8011cda <_strtod_l+0x432>
 8011cc4:	495c      	ldr	r1, [pc, #368]	@ (8011e38 <_strtod_l+0x590>)
 8011cc6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011cca:	4652      	mov	r2, sl
 8011ccc:	465b      	mov	r3, fp
 8011cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cd2:	f7ee fc91 	bl	80005f8 <__aeabi_dmul>
 8011cd6:	4682      	mov	sl, r0
 8011cd8:	468b      	mov	fp, r1
 8011cda:	f034 040f 	bics.w	r4, r4, #15
 8011cde:	d073      	beq.n	8011dc8 <_strtod_l+0x520>
 8011ce0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011ce4:	dd49      	ble.n	8011d7a <_strtod_l+0x4d2>
 8011ce6:	2400      	movs	r4, #0
 8011ce8:	46a0      	mov	r8, r4
 8011cea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011cec:	46a1      	mov	r9, r4
 8011cee:	9a05      	ldr	r2, [sp, #20]
 8011cf0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011e40 <_strtod_l+0x598>
 8011cf4:	2322      	movs	r3, #34	@ 0x22
 8011cf6:	6013      	str	r3, [r2, #0]
 8011cf8:	f04f 0a00 	mov.w	sl, #0
 8011cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f43f ae0b 	beq.w	801191a <_strtod_l+0x72>
 8011d04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d06:	9805      	ldr	r0, [sp, #20]
 8011d08:	f002 fdb0 	bl	801486c <_Bfree>
 8011d0c:	9805      	ldr	r0, [sp, #20]
 8011d0e:	4649      	mov	r1, r9
 8011d10:	f002 fdac 	bl	801486c <_Bfree>
 8011d14:	9805      	ldr	r0, [sp, #20]
 8011d16:	4641      	mov	r1, r8
 8011d18:	f002 fda8 	bl	801486c <_Bfree>
 8011d1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d1e:	9805      	ldr	r0, [sp, #20]
 8011d20:	f002 fda4 	bl	801486c <_Bfree>
 8011d24:	9805      	ldr	r0, [sp, #20]
 8011d26:	4621      	mov	r1, r4
 8011d28:	f002 fda0 	bl	801486c <_Bfree>
 8011d2c:	e5f5      	b.n	801191a <_strtod_l+0x72>
 8011d2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d30:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011d34:	4293      	cmp	r3, r2
 8011d36:	dbbc      	blt.n	8011cb2 <_strtod_l+0x40a>
 8011d38:	4c3f      	ldr	r4, [pc, #252]	@ (8011e38 <_strtod_l+0x590>)
 8011d3a:	f1c5 050f 	rsb	r5, r5, #15
 8011d3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d42:	4652      	mov	r2, sl
 8011d44:	465b      	mov	r3, fp
 8011d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d4a:	f7ee fc55 	bl	80005f8 <__aeabi_dmul>
 8011d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d50:	1b5d      	subs	r5, r3, r5
 8011d52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d5a:	e78f      	b.n	8011c7c <_strtod_l+0x3d4>
 8011d5c:	3316      	adds	r3, #22
 8011d5e:	dba8      	blt.n	8011cb2 <_strtod_l+0x40a>
 8011d60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d62:	eba3 0808 	sub.w	r8, r3, r8
 8011d66:	4b34      	ldr	r3, [pc, #208]	@ (8011e38 <_strtod_l+0x590>)
 8011d68:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011d6c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011d70:	4650      	mov	r0, sl
 8011d72:	4659      	mov	r1, fp
 8011d74:	f7ee fd6a 	bl	800084c <__aeabi_ddiv>
 8011d78:	e782      	b.n	8011c80 <_strtod_l+0x3d8>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	4f2f      	ldr	r7, [pc, #188]	@ (8011e3c <_strtod_l+0x594>)
 8011d7e:	1124      	asrs	r4, r4, #4
 8011d80:	4650      	mov	r0, sl
 8011d82:	4659      	mov	r1, fp
 8011d84:	461e      	mov	r6, r3
 8011d86:	2c01      	cmp	r4, #1
 8011d88:	dc21      	bgt.n	8011dce <_strtod_l+0x526>
 8011d8a:	b10b      	cbz	r3, 8011d90 <_strtod_l+0x4e8>
 8011d8c:	4682      	mov	sl, r0
 8011d8e:	468b      	mov	fp, r1
 8011d90:	492a      	ldr	r1, [pc, #168]	@ (8011e3c <_strtod_l+0x594>)
 8011d92:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011d96:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011d9a:	4652      	mov	r2, sl
 8011d9c:	465b      	mov	r3, fp
 8011d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011da2:	f7ee fc29 	bl	80005f8 <__aeabi_dmul>
 8011da6:	4b26      	ldr	r3, [pc, #152]	@ (8011e40 <_strtod_l+0x598>)
 8011da8:	460a      	mov	r2, r1
 8011daa:	400b      	ands	r3, r1
 8011dac:	4925      	ldr	r1, [pc, #148]	@ (8011e44 <_strtod_l+0x59c>)
 8011dae:	428b      	cmp	r3, r1
 8011db0:	4682      	mov	sl, r0
 8011db2:	d898      	bhi.n	8011ce6 <_strtod_l+0x43e>
 8011db4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011db8:	428b      	cmp	r3, r1
 8011dba:	bf86      	itte	hi
 8011dbc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011e48 <_strtod_l+0x5a0>
 8011dc0:	f04f 3aff 	movhi.w	sl, #4294967295
 8011dc4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011dc8:	2300      	movs	r3, #0
 8011dca:	9308      	str	r3, [sp, #32]
 8011dcc:	e076      	b.n	8011ebc <_strtod_l+0x614>
 8011dce:	07e2      	lsls	r2, r4, #31
 8011dd0:	d504      	bpl.n	8011ddc <_strtod_l+0x534>
 8011dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011dd6:	f7ee fc0f 	bl	80005f8 <__aeabi_dmul>
 8011dda:	2301      	movs	r3, #1
 8011ddc:	3601      	adds	r6, #1
 8011dde:	1064      	asrs	r4, r4, #1
 8011de0:	3708      	adds	r7, #8
 8011de2:	e7d0      	b.n	8011d86 <_strtod_l+0x4de>
 8011de4:	d0f0      	beq.n	8011dc8 <_strtod_l+0x520>
 8011de6:	4264      	negs	r4, r4
 8011de8:	f014 020f 	ands.w	r2, r4, #15
 8011dec:	d00a      	beq.n	8011e04 <_strtod_l+0x55c>
 8011dee:	4b12      	ldr	r3, [pc, #72]	@ (8011e38 <_strtod_l+0x590>)
 8011df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011df4:	4650      	mov	r0, sl
 8011df6:	4659      	mov	r1, fp
 8011df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfc:	f7ee fd26 	bl	800084c <__aeabi_ddiv>
 8011e00:	4682      	mov	sl, r0
 8011e02:	468b      	mov	fp, r1
 8011e04:	1124      	asrs	r4, r4, #4
 8011e06:	d0df      	beq.n	8011dc8 <_strtod_l+0x520>
 8011e08:	2c1f      	cmp	r4, #31
 8011e0a:	dd1f      	ble.n	8011e4c <_strtod_l+0x5a4>
 8011e0c:	2400      	movs	r4, #0
 8011e0e:	46a0      	mov	r8, r4
 8011e10:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011e12:	46a1      	mov	r9, r4
 8011e14:	9a05      	ldr	r2, [sp, #20]
 8011e16:	2322      	movs	r3, #34	@ 0x22
 8011e18:	f04f 0a00 	mov.w	sl, #0
 8011e1c:	f04f 0b00 	mov.w	fp, #0
 8011e20:	6013      	str	r3, [r2, #0]
 8011e22:	e76b      	b.n	8011cfc <_strtod_l+0x454>
 8011e24:	08016683 	.word	0x08016683
 8011e28:	080168a0 	.word	0x080168a0
 8011e2c:	0801667b 	.word	0x0801667b
 8011e30:	08016762 	.word	0x08016762
 8011e34:	0801675e 	.word	0x0801675e
 8011e38:	08016a28 	.word	0x08016a28
 8011e3c:	08016a00 	.word	0x08016a00
 8011e40:	7ff00000 	.word	0x7ff00000
 8011e44:	7ca00000 	.word	0x7ca00000
 8011e48:	7fefffff 	.word	0x7fefffff
 8011e4c:	f014 0310 	ands.w	r3, r4, #16
 8011e50:	bf18      	it	ne
 8011e52:	236a      	movne	r3, #106	@ 0x6a
 8011e54:	4ea9      	ldr	r6, [pc, #676]	@ (80120fc <_strtod_l+0x854>)
 8011e56:	9308      	str	r3, [sp, #32]
 8011e58:	4650      	mov	r0, sl
 8011e5a:	4659      	mov	r1, fp
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	07e7      	lsls	r7, r4, #31
 8011e60:	d504      	bpl.n	8011e6c <_strtod_l+0x5c4>
 8011e62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e66:	f7ee fbc7 	bl	80005f8 <__aeabi_dmul>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	1064      	asrs	r4, r4, #1
 8011e6e:	f106 0608 	add.w	r6, r6, #8
 8011e72:	d1f4      	bne.n	8011e5e <_strtod_l+0x5b6>
 8011e74:	b10b      	cbz	r3, 8011e7a <_strtod_l+0x5d2>
 8011e76:	4682      	mov	sl, r0
 8011e78:	468b      	mov	fp, r1
 8011e7a:	9b08      	ldr	r3, [sp, #32]
 8011e7c:	b1b3      	cbz	r3, 8011eac <_strtod_l+0x604>
 8011e7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011e82:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	4659      	mov	r1, fp
 8011e8a:	dd0f      	ble.n	8011eac <_strtod_l+0x604>
 8011e8c:	2b1f      	cmp	r3, #31
 8011e8e:	dd56      	ble.n	8011f3e <_strtod_l+0x696>
 8011e90:	2b34      	cmp	r3, #52	@ 0x34
 8011e92:	bfde      	ittt	le
 8011e94:	f04f 33ff 	movle.w	r3, #4294967295
 8011e98:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011e9c:	4093      	lslle	r3, r2
 8011e9e:	f04f 0a00 	mov.w	sl, #0
 8011ea2:	bfcc      	ite	gt
 8011ea4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011ea8:	ea03 0b01 	andle.w	fp, r3, r1
 8011eac:	2200      	movs	r2, #0
 8011eae:	2300      	movs	r3, #0
 8011eb0:	4650      	mov	r0, sl
 8011eb2:	4659      	mov	r1, fp
 8011eb4:	f7ee fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8011eb8:	2800      	cmp	r0, #0
 8011eba:	d1a7      	bne.n	8011e0c <_strtod_l+0x564>
 8011ebc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ebe:	9300      	str	r3, [sp, #0]
 8011ec0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ec2:	9805      	ldr	r0, [sp, #20]
 8011ec4:	462b      	mov	r3, r5
 8011ec6:	464a      	mov	r2, r9
 8011ec8:	f002 fd38 	bl	801493c <__s2b>
 8011ecc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	f43f af09 	beq.w	8011ce6 <_strtod_l+0x43e>
 8011ed4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ed6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ed8:	2a00      	cmp	r2, #0
 8011eda:	eba3 0308 	sub.w	r3, r3, r8
 8011ede:	bfa8      	it	ge
 8011ee0:	2300      	movge	r3, #0
 8011ee2:	9312      	str	r3, [sp, #72]	@ 0x48
 8011ee4:	2400      	movs	r4, #0
 8011ee6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011eea:	9316      	str	r3, [sp, #88]	@ 0x58
 8011eec:	46a0      	mov	r8, r4
 8011eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ef0:	9805      	ldr	r0, [sp, #20]
 8011ef2:	6859      	ldr	r1, [r3, #4]
 8011ef4:	f002 fc7a 	bl	80147ec <_Balloc>
 8011ef8:	4681      	mov	r9, r0
 8011efa:	2800      	cmp	r0, #0
 8011efc:	f43f aef7 	beq.w	8011cee <_strtod_l+0x446>
 8011f00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f02:	691a      	ldr	r2, [r3, #16]
 8011f04:	3202      	adds	r2, #2
 8011f06:	f103 010c 	add.w	r1, r3, #12
 8011f0a:	0092      	lsls	r2, r2, #2
 8011f0c:	300c      	adds	r0, #12
 8011f0e:	f001 fa46 	bl	801339e <memcpy>
 8011f12:	ec4b ab10 	vmov	d0, sl, fp
 8011f16:	9805      	ldr	r0, [sp, #20]
 8011f18:	aa1c      	add	r2, sp, #112	@ 0x70
 8011f1a:	a91b      	add	r1, sp, #108	@ 0x6c
 8011f1c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011f20:	f003 f840 	bl	8014fa4 <__d2b>
 8011f24:	901a      	str	r0, [sp, #104]	@ 0x68
 8011f26:	2800      	cmp	r0, #0
 8011f28:	f43f aee1 	beq.w	8011cee <_strtod_l+0x446>
 8011f2c:	9805      	ldr	r0, [sp, #20]
 8011f2e:	2101      	movs	r1, #1
 8011f30:	f002 fd9a 	bl	8014a68 <__i2b>
 8011f34:	4680      	mov	r8, r0
 8011f36:	b948      	cbnz	r0, 8011f4c <_strtod_l+0x6a4>
 8011f38:	f04f 0800 	mov.w	r8, #0
 8011f3c:	e6d7      	b.n	8011cee <_strtod_l+0x446>
 8011f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f42:	fa02 f303 	lsl.w	r3, r2, r3
 8011f46:	ea03 0a0a 	and.w	sl, r3, sl
 8011f4a:	e7af      	b.n	8011eac <_strtod_l+0x604>
 8011f4c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011f4e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011f50:	2d00      	cmp	r5, #0
 8011f52:	bfab      	itete	ge
 8011f54:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011f56:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011f58:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011f5a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011f5c:	bfac      	ite	ge
 8011f5e:	18ef      	addge	r7, r5, r3
 8011f60:	1b5e      	sublt	r6, r3, r5
 8011f62:	9b08      	ldr	r3, [sp, #32]
 8011f64:	1aed      	subs	r5, r5, r3
 8011f66:	4415      	add	r5, r2
 8011f68:	4b65      	ldr	r3, [pc, #404]	@ (8012100 <_strtod_l+0x858>)
 8011f6a:	3d01      	subs	r5, #1
 8011f6c:	429d      	cmp	r5, r3
 8011f6e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011f72:	da50      	bge.n	8012016 <_strtod_l+0x76e>
 8011f74:	1b5b      	subs	r3, r3, r5
 8011f76:	2b1f      	cmp	r3, #31
 8011f78:	eba2 0203 	sub.w	r2, r2, r3
 8011f7c:	f04f 0101 	mov.w	r1, #1
 8011f80:	dc3d      	bgt.n	8011ffe <_strtod_l+0x756>
 8011f82:	fa01 f303 	lsl.w	r3, r1, r3
 8011f86:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f88:	2300      	movs	r3, #0
 8011f8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8011f8c:	18bd      	adds	r5, r7, r2
 8011f8e:	9b08      	ldr	r3, [sp, #32]
 8011f90:	42af      	cmp	r7, r5
 8011f92:	4416      	add	r6, r2
 8011f94:	441e      	add	r6, r3
 8011f96:	463b      	mov	r3, r7
 8011f98:	bfa8      	it	ge
 8011f9a:	462b      	movge	r3, r5
 8011f9c:	42b3      	cmp	r3, r6
 8011f9e:	bfa8      	it	ge
 8011fa0:	4633      	movge	r3, r6
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	bfc2      	ittt	gt
 8011fa6:	1aed      	subgt	r5, r5, r3
 8011fa8:	1af6      	subgt	r6, r6, r3
 8011faa:	1aff      	subgt	r7, r7, r3
 8011fac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	dd16      	ble.n	8011fe0 <_strtod_l+0x738>
 8011fb2:	4641      	mov	r1, r8
 8011fb4:	9805      	ldr	r0, [sp, #20]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	f002 fe0e 	bl	8014bd8 <__pow5mult>
 8011fbc:	4680      	mov	r8, r0
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d0ba      	beq.n	8011f38 <_strtod_l+0x690>
 8011fc2:	4601      	mov	r1, r0
 8011fc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011fc6:	9805      	ldr	r0, [sp, #20]
 8011fc8:	f002 fd64 	bl	8014a94 <__multiply>
 8011fcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	f43f ae8d 	beq.w	8011cee <_strtod_l+0x446>
 8011fd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fd6:	9805      	ldr	r0, [sp, #20]
 8011fd8:	f002 fc48 	bl	801486c <_Bfree>
 8011fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fde:	931a      	str	r3, [sp, #104]	@ 0x68
 8011fe0:	2d00      	cmp	r5, #0
 8011fe2:	dc1d      	bgt.n	8012020 <_strtod_l+0x778>
 8011fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	dd23      	ble.n	8012032 <_strtod_l+0x78a>
 8011fea:	4649      	mov	r1, r9
 8011fec:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011fee:	9805      	ldr	r0, [sp, #20]
 8011ff0:	f002 fdf2 	bl	8014bd8 <__pow5mult>
 8011ff4:	4681      	mov	r9, r0
 8011ff6:	b9e0      	cbnz	r0, 8012032 <_strtod_l+0x78a>
 8011ff8:	f04f 0900 	mov.w	r9, #0
 8011ffc:	e677      	b.n	8011cee <_strtod_l+0x446>
 8011ffe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012002:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012006:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801200a:	35e2      	adds	r5, #226	@ 0xe2
 801200c:	fa01 f305 	lsl.w	r3, r1, r5
 8012010:	9310      	str	r3, [sp, #64]	@ 0x40
 8012012:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012014:	e7ba      	b.n	8011f8c <_strtod_l+0x6e4>
 8012016:	2300      	movs	r3, #0
 8012018:	9310      	str	r3, [sp, #64]	@ 0x40
 801201a:	2301      	movs	r3, #1
 801201c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801201e:	e7b5      	b.n	8011f8c <_strtod_l+0x6e4>
 8012020:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012022:	9805      	ldr	r0, [sp, #20]
 8012024:	462a      	mov	r2, r5
 8012026:	f002 fe31 	bl	8014c8c <__lshift>
 801202a:	901a      	str	r0, [sp, #104]	@ 0x68
 801202c:	2800      	cmp	r0, #0
 801202e:	d1d9      	bne.n	8011fe4 <_strtod_l+0x73c>
 8012030:	e65d      	b.n	8011cee <_strtod_l+0x446>
 8012032:	2e00      	cmp	r6, #0
 8012034:	dd07      	ble.n	8012046 <_strtod_l+0x79e>
 8012036:	4649      	mov	r1, r9
 8012038:	9805      	ldr	r0, [sp, #20]
 801203a:	4632      	mov	r2, r6
 801203c:	f002 fe26 	bl	8014c8c <__lshift>
 8012040:	4681      	mov	r9, r0
 8012042:	2800      	cmp	r0, #0
 8012044:	d0d8      	beq.n	8011ff8 <_strtod_l+0x750>
 8012046:	2f00      	cmp	r7, #0
 8012048:	dd08      	ble.n	801205c <_strtod_l+0x7b4>
 801204a:	4641      	mov	r1, r8
 801204c:	9805      	ldr	r0, [sp, #20]
 801204e:	463a      	mov	r2, r7
 8012050:	f002 fe1c 	bl	8014c8c <__lshift>
 8012054:	4680      	mov	r8, r0
 8012056:	2800      	cmp	r0, #0
 8012058:	f43f ae49 	beq.w	8011cee <_strtod_l+0x446>
 801205c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801205e:	9805      	ldr	r0, [sp, #20]
 8012060:	464a      	mov	r2, r9
 8012062:	f002 fe9b 	bl	8014d9c <__mdiff>
 8012066:	4604      	mov	r4, r0
 8012068:	2800      	cmp	r0, #0
 801206a:	f43f ae40 	beq.w	8011cee <_strtod_l+0x446>
 801206e:	68c3      	ldr	r3, [r0, #12]
 8012070:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012072:	2300      	movs	r3, #0
 8012074:	60c3      	str	r3, [r0, #12]
 8012076:	4641      	mov	r1, r8
 8012078:	f002 fe74 	bl	8014d64 <__mcmp>
 801207c:	2800      	cmp	r0, #0
 801207e:	da45      	bge.n	801210c <_strtod_l+0x864>
 8012080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012082:	ea53 030a 	orrs.w	r3, r3, sl
 8012086:	d16b      	bne.n	8012160 <_strtod_l+0x8b8>
 8012088:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801208c:	2b00      	cmp	r3, #0
 801208e:	d167      	bne.n	8012160 <_strtod_l+0x8b8>
 8012090:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012094:	0d1b      	lsrs	r3, r3, #20
 8012096:	051b      	lsls	r3, r3, #20
 8012098:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801209c:	d960      	bls.n	8012160 <_strtod_l+0x8b8>
 801209e:	6963      	ldr	r3, [r4, #20]
 80120a0:	b913      	cbnz	r3, 80120a8 <_strtod_l+0x800>
 80120a2:	6923      	ldr	r3, [r4, #16]
 80120a4:	2b01      	cmp	r3, #1
 80120a6:	dd5b      	ble.n	8012160 <_strtod_l+0x8b8>
 80120a8:	4621      	mov	r1, r4
 80120aa:	2201      	movs	r2, #1
 80120ac:	9805      	ldr	r0, [sp, #20]
 80120ae:	f002 fded 	bl	8014c8c <__lshift>
 80120b2:	4641      	mov	r1, r8
 80120b4:	4604      	mov	r4, r0
 80120b6:	f002 fe55 	bl	8014d64 <__mcmp>
 80120ba:	2800      	cmp	r0, #0
 80120bc:	dd50      	ble.n	8012160 <_strtod_l+0x8b8>
 80120be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120c2:	9a08      	ldr	r2, [sp, #32]
 80120c4:	0d1b      	lsrs	r3, r3, #20
 80120c6:	051b      	lsls	r3, r3, #20
 80120c8:	2a00      	cmp	r2, #0
 80120ca:	d06a      	beq.n	80121a2 <_strtod_l+0x8fa>
 80120cc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120d0:	d867      	bhi.n	80121a2 <_strtod_l+0x8fa>
 80120d2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80120d6:	f67f ae9d 	bls.w	8011e14 <_strtod_l+0x56c>
 80120da:	4b0a      	ldr	r3, [pc, #40]	@ (8012104 <_strtod_l+0x85c>)
 80120dc:	4650      	mov	r0, sl
 80120de:	4659      	mov	r1, fp
 80120e0:	2200      	movs	r2, #0
 80120e2:	f7ee fa89 	bl	80005f8 <__aeabi_dmul>
 80120e6:	4b08      	ldr	r3, [pc, #32]	@ (8012108 <_strtod_l+0x860>)
 80120e8:	400b      	ands	r3, r1
 80120ea:	4682      	mov	sl, r0
 80120ec:	468b      	mov	fp, r1
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f47f ae08 	bne.w	8011d04 <_strtod_l+0x45c>
 80120f4:	9a05      	ldr	r2, [sp, #20]
 80120f6:	2322      	movs	r3, #34	@ 0x22
 80120f8:	6013      	str	r3, [r2, #0]
 80120fa:	e603      	b.n	8011d04 <_strtod_l+0x45c>
 80120fc:	080168c8 	.word	0x080168c8
 8012100:	fffffc02 	.word	0xfffffc02
 8012104:	39500000 	.word	0x39500000
 8012108:	7ff00000 	.word	0x7ff00000
 801210c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012110:	d165      	bne.n	80121de <_strtod_l+0x936>
 8012112:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012114:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012118:	b35a      	cbz	r2, 8012172 <_strtod_l+0x8ca>
 801211a:	4a9f      	ldr	r2, [pc, #636]	@ (8012398 <_strtod_l+0xaf0>)
 801211c:	4293      	cmp	r3, r2
 801211e:	d12b      	bne.n	8012178 <_strtod_l+0x8d0>
 8012120:	9b08      	ldr	r3, [sp, #32]
 8012122:	4651      	mov	r1, sl
 8012124:	b303      	cbz	r3, 8012168 <_strtod_l+0x8c0>
 8012126:	4b9d      	ldr	r3, [pc, #628]	@ (801239c <_strtod_l+0xaf4>)
 8012128:	465a      	mov	r2, fp
 801212a:	4013      	ands	r3, r2
 801212c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012130:	f04f 32ff 	mov.w	r2, #4294967295
 8012134:	d81b      	bhi.n	801216e <_strtod_l+0x8c6>
 8012136:	0d1b      	lsrs	r3, r3, #20
 8012138:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801213c:	fa02 f303 	lsl.w	r3, r2, r3
 8012140:	4299      	cmp	r1, r3
 8012142:	d119      	bne.n	8012178 <_strtod_l+0x8d0>
 8012144:	4b96      	ldr	r3, [pc, #600]	@ (80123a0 <_strtod_l+0xaf8>)
 8012146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012148:	429a      	cmp	r2, r3
 801214a:	d102      	bne.n	8012152 <_strtod_l+0x8aa>
 801214c:	3101      	adds	r1, #1
 801214e:	f43f adce 	beq.w	8011cee <_strtod_l+0x446>
 8012152:	4b92      	ldr	r3, [pc, #584]	@ (801239c <_strtod_l+0xaf4>)
 8012154:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012156:	401a      	ands	r2, r3
 8012158:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801215c:	f04f 0a00 	mov.w	sl, #0
 8012160:	9b08      	ldr	r3, [sp, #32]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d1b9      	bne.n	80120da <_strtod_l+0x832>
 8012166:	e5cd      	b.n	8011d04 <_strtod_l+0x45c>
 8012168:	f04f 33ff 	mov.w	r3, #4294967295
 801216c:	e7e8      	b.n	8012140 <_strtod_l+0x898>
 801216e:	4613      	mov	r3, r2
 8012170:	e7e6      	b.n	8012140 <_strtod_l+0x898>
 8012172:	ea53 030a 	orrs.w	r3, r3, sl
 8012176:	d0a2      	beq.n	80120be <_strtod_l+0x816>
 8012178:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801217a:	b1db      	cbz	r3, 80121b4 <_strtod_l+0x90c>
 801217c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801217e:	4213      	tst	r3, r2
 8012180:	d0ee      	beq.n	8012160 <_strtod_l+0x8b8>
 8012182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012184:	9a08      	ldr	r2, [sp, #32]
 8012186:	4650      	mov	r0, sl
 8012188:	4659      	mov	r1, fp
 801218a:	b1bb      	cbz	r3, 80121bc <_strtod_l+0x914>
 801218c:	f7ff fb6e 	bl	801186c <sulp>
 8012190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012194:	ec53 2b10 	vmov	r2, r3, d0
 8012198:	f7ee f878 	bl	800028c <__adddf3>
 801219c:	4682      	mov	sl, r0
 801219e:	468b      	mov	fp, r1
 80121a0:	e7de      	b.n	8012160 <_strtod_l+0x8b8>
 80121a2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80121a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80121aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80121ae:	f04f 3aff 	mov.w	sl, #4294967295
 80121b2:	e7d5      	b.n	8012160 <_strtod_l+0x8b8>
 80121b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121b6:	ea13 0f0a 	tst.w	r3, sl
 80121ba:	e7e1      	b.n	8012180 <_strtod_l+0x8d8>
 80121bc:	f7ff fb56 	bl	801186c <sulp>
 80121c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121c4:	ec53 2b10 	vmov	r2, r3, d0
 80121c8:	f7ee f85e 	bl	8000288 <__aeabi_dsub>
 80121cc:	2200      	movs	r2, #0
 80121ce:	2300      	movs	r3, #0
 80121d0:	4682      	mov	sl, r0
 80121d2:	468b      	mov	fp, r1
 80121d4:	f7ee fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80121d8:	2800      	cmp	r0, #0
 80121da:	d0c1      	beq.n	8012160 <_strtod_l+0x8b8>
 80121dc:	e61a      	b.n	8011e14 <_strtod_l+0x56c>
 80121de:	4641      	mov	r1, r8
 80121e0:	4620      	mov	r0, r4
 80121e2:	f002 ff37 	bl	8015054 <__ratio>
 80121e6:	ec57 6b10 	vmov	r6, r7, d0
 80121ea:	2200      	movs	r2, #0
 80121ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80121f0:	4630      	mov	r0, r6
 80121f2:	4639      	mov	r1, r7
 80121f4:	f7ee fc7c 	bl	8000af0 <__aeabi_dcmple>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d06f      	beq.n	80122dc <_strtod_l+0xa34>
 80121fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d17a      	bne.n	80122f8 <_strtod_l+0xa50>
 8012202:	f1ba 0f00 	cmp.w	sl, #0
 8012206:	d158      	bne.n	80122ba <_strtod_l+0xa12>
 8012208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801220a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801220e:	2b00      	cmp	r3, #0
 8012210:	d15a      	bne.n	80122c8 <_strtod_l+0xa20>
 8012212:	4b64      	ldr	r3, [pc, #400]	@ (80123a4 <_strtod_l+0xafc>)
 8012214:	2200      	movs	r2, #0
 8012216:	4630      	mov	r0, r6
 8012218:	4639      	mov	r1, r7
 801221a:	f7ee fc5f 	bl	8000adc <__aeabi_dcmplt>
 801221e:	2800      	cmp	r0, #0
 8012220:	d159      	bne.n	80122d6 <_strtod_l+0xa2e>
 8012222:	4630      	mov	r0, r6
 8012224:	4639      	mov	r1, r7
 8012226:	4b60      	ldr	r3, [pc, #384]	@ (80123a8 <_strtod_l+0xb00>)
 8012228:	2200      	movs	r2, #0
 801222a:	f7ee f9e5 	bl	80005f8 <__aeabi_dmul>
 801222e:	4606      	mov	r6, r0
 8012230:	460f      	mov	r7, r1
 8012232:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012236:	9606      	str	r6, [sp, #24]
 8012238:	9307      	str	r3, [sp, #28]
 801223a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801223e:	4d57      	ldr	r5, [pc, #348]	@ (801239c <_strtod_l+0xaf4>)
 8012240:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012246:	401d      	ands	r5, r3
 8012248:	4b58      	ldr	r3, [pc, #352]	@ (80123ac <_strtod_l+0xb04>)
 801224a:	429d      	cmp	r5, r3
 801224c:	f040 80b2 	bne.w	80123b4 <_strtod_l+0xb0c>
 8012250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012252:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012256:	ec4b ab10 	vmov	d0, sl, fp
 801225a:	f002 fe33 	bl	8014ec4 <__ulp>
 801225e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012262:	ec51 0b10 	vmov	r0, r1, d0
 8012266:	f7ee f9c7 	bl	80005f8 <__aeabi_dmul>
 801226a:	4652      	mov	r2, sl
 801226c:	465b      	mov	r3, fp
 801226e:	f7ee f80d 	bl	800028c <__adddf3>
 8012272:	460b      	mov	r3, r1
 8012274:	4949      	ldr	r1, [pc, #292]	@ (801239c <_strtod_l+0xaf4>)
 8012276:	4a4e      	ldr	r2, [pc, #312]	@ (80123b0 <_strtod_l+0xb08>)
 8012278:	4019      	ands	r1, r3
 801227a:	4291      	cmp	r1, r2
 801227c:	4682      	mov	sl, r0
 801227e:	d942      	bls.n	8012306 <_strtod_l+0xa5e>
 8012280:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012282:	4b47      	ldr	r3, [pc, #284]	@ (80123a0 <_strtod_l+0xaf8>)
 8012284:	429a      	cmp	r2, r3
 8012286:	d103      	bne.n	8012290 <_strtod_l+0x9e8>
 8012288:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801228a:	3301      	adds	r3, #1
 801228c:	f43f ad2f 	beq.w	8011cee <_strtod_l+0x446>
 8012290:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80123a0 <_strtod_l+0xaf8>
 8012294:	f04f 3aff 	mov.w	sl, #4294967295
 8012298:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801229a:	9805      	ldr	r0, [sp, #20]
 801229c:	f002 fae6 	bl	801486c <_Bfree>
 80122a0:	9805      	ldr	r0, [sp, #20]
 80122a2:	4649      	mov	r1, r9
 80122a4:	f002 fae2 	bl	801486c <_Bfree>
 80122a8:	9805      	ldr	r0, [sp, #20]
 80122aa:	4641      	mov	r1, r8
 80122ac:	f002 fade 	bl	801486c <_Bfree>
 80122b0:	9805      	ldr	r0, [sp, #20]
 80122b2:	4621      	mov	r1, r4
 80122b4:	f002 fada 	bl	801486c <_Bfree>
 80122b8:	e619      	b.n	8011eee <_strtod_l+0x646>
 80122ba:	f1ba 0f01 	cmp.w	sl, #1
 80122be:	d103      	bne.n	80122c8 <_strtod_l+0xa20>
 80122c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	f43f ada6 	beq.w	8011e14 <_strtod_l+0x56c>
 80122c8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012378 <_strtod_l+0xad0>
 80122cc:	4f35      	ldr	r7, [pc, #212]	@ (80123a4 <_strtod_l+0xafc>)
 80122ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122d2:	2600      	movs	r6, #0
 80122d4:	e7b1      	b.n	801223a <_strtod_l+0x992>
 80122d6:	4f34      	ldr	r7, [pc, #208]	@ (80123a8 <_strtod_l+0xb00>)
 80122d8:	2600      	movs	r6, #0
 80122da:	e7aa      	b.n	8012232 <_strtod_l+0x98a>
 80122dc:	4b32      	ldr	r3, [pc, #200]	@ (80123a8 <_strtod_l+0xb00>)
 80122de:	4630      	mov	r0, r6
 80122e0:	4639      	mov	r1, r7
 80122e2:	2200      	movs	r2, #0
 80122e4:	f7ee f988 	bl	80005f8 <__aeabi_dmul>
 80122e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122ea:	4606      	mov	r6, r0
 80122ec:	460f      	mov	r7, r1
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d09f      	beq.n	8012232 <_strtod_l+0x98a>
 80122f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80122f6:	e7a0      	b.n	801223a <_strtod_l+0x992>
 80122f8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012380 <_strtod_l+0xad8>
 80122fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012300:	ec57 6b17 	vmov	r6, r7, d7
 8012304:	e799      	b.n	801223a <_strtod_l+0x992>
 8012306:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801230a:	9b08      	ldr	r3, [sp, #32]
 801230c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1c1      	bne.n	8012298 <_strtod_l+0x9f0>
 8012314:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012318:	0d1b      	lsrs	r3, r3, #20
 801231a:	051b      	lsls	r3, r3, #20
 801231c:	429d      	cmp	r5, r3
 801231e:	d1bb      	bne.n	8012298 <_strtod_l+0x9f0>
 8012320:	4630      	mov	r0, r6
 8012322:	4639      	mov	r1, r7
 8012324:	f7ee fc78 	bl	8000c18 <__aeabi_d2lz>
 8012328:	f7ee f938 	bl	800059c <__aeabi_l2d>
 801232c:	4602      	mov	r2, r0
 801232e:	460b      	mov	r3, r1
 8012330:	4630      	mov	r0, r6
 8012332:	4639      	mov	r1, r7
 8012334:	f7ed ffa8 	bl	8000288 <__aeabi_dsub>
 8012338:	460b      	mov	r3, r1
 801233a:	4602      	mov	r2, r0
 801233c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012340:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012344:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012346:	ea46 060a 	orr.w	r6, r6, sl
 801234a:	431e      	orrs	r6, r3
 801234c:	d06f      	beq.n	801242e <_strtod_l+0xb86>
 801234e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012388 <_strtod_l+0xae0>)
 8012350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012354:	f7ee fbc2 	bl	8000adc <__aeabi_dcmplt>
 8012358:	2800      	cmp	r0, #0
 801235a:	f47f acd3 	bne.w	8011d04 <_strtod_l+0x45c>
 801235e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012390 <_strtod_l+0xae8>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012368:	f7ee fbd6 	bl	8000b18 <__aeabi_dcmpgt>
 801236c:	2800      	cmp	r0, #0
 801236e:	d093      	beq.n	8012298 <_strtod_l+0x9f0>
 8012370:	e4c8      	b.n	8011d04 <_strtod_l+0x45c>
 8012372:	bf00      	nop
 8012374:	f3af 8000 	nop.w
 8012378:	00000000 	.word	0x00000000
 801237c:	bff00000 	.word	0xbff00000
 8012380:	00000000 	.word	0x00000000
 8012384:	3ff00000 	.word	0x3ff00000
 8012388:	94a03595 	.word	0x94a03595
 801238c:	3fdfffff 	.word	0x3fdfffff
 8012390:	35afe535 	.word	0x35afe535
 8012394:	3fe00000 	.word	0x3fe00000
 8012398:	000fffff 	.word	0x000fffff
 801239c:	7ff00000 	.word	0x7ff00000
 80123a0:	7fefffff 	.word	0x7fefffff
 80123a4:	3ff00000 	.word	0x3ff00000
 80123a8:	3fe00000 	.word	0x3fe00000
 80123ac:	7fe00000 	.word	0x7fe00000
 80123b0:	7c9fffff 	.word	0x7c9fffff
 80123b4:	9b08      	ldr	r3, [sp, #32]
 80123b6:	b323      	cbz	r3, 8012402 <_strtod_l+0xb5a>
 80123b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80123bc:	d821      	bhi.n	8012402 <_strtod_l+0xb5a>
 80123be:	a328      	add	r3, pc, #160	@ (adr r3, 8012460 <_strtod_l+0xbb8>)
 80123c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c4:	4630      	mov	r0, r6
 80123c6:	4639      	mov	r1, r7
 80123c8:	f7ee fb92 	bl	8000af0 <__aeabi_dcmple>
 80123cc:	b1a0      	cbz	r0, 80123f8 <_strtod_l+0xb50>
 80123ce:	4639      	mov	r1, r7
 80123d0:	4630      	mov	r0, r6
 80123d2:	f7ee fbe9 	bl	8000ba8 <__aeabi_d2uiz>
 80123d6:	2801      	cmp	r0, #1
 80123d8:	bf38      	it	cc
 80123da:	2001      	movcc	r0, #1
 80123dc:	f7ee f892 	bl	8000504 <__aeabi_ui2d>
 80123e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123e2:	4606      	mov	r6, r0
 80123e4:	460f      	mov	r7, r1
 80123e6:	b9fb      	cbnz	r3, 8012428 <_strtod_l+0xb80>
 80123e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80123ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80123ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80123f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80123f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80123f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80123fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80123fe:	1b5b      	subs	r3, r3, r5
 8012400:	9311      	str	r3, [sp, #68]	@ 0x44
 8012402:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012406:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801240a:	f002 fd5b 	bl	8014ec4 <__ulp>
 801240e:	4650      	mov	r0, sl
 8012410:	ec53 2b10 	vmov	r2, r3, d0
 8012414:	4659      	mov	r1, fp
 8012416:	f7ee f8ef 	bl	80005f8 <__aeabi_dmul>
 801241a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801241e:	f7ed ff35 	bl	800028c <__adddf3>
 8012422:	4682      	mov	sl, r0
 8012424:	468b      	mov	fp, r1
 8012426:	e770      	b.n	801230a <_strtod_l+0xa62>
 8012428:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801242c:	e7e0      	b.n	80123f0 <_strtod_l+0xb48>
 801242e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012468 <_strtod_l+0xbc0>)
 8012430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012434:	f7ee fb52 	bl	8000adc <__aeabi_dcmplt>
 8012438:	e798      	b.n	801236c <_strtod_l+0xac4>
 801243a:	2300      	movs	r3, #0
 801243c:	930e      	str	r3, [sp, #56]	@ 0x38
 801243e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012442:	6013      	str	r3, [r2, #0]
 8012444:	f7ff ba6d 	b.w	8011922 <_strtod_l+0x7a>
 8012448:	2a65      	cmp	r2, #101	@ 0x65
 801244a:	f43f ab68 	beq.w	8011b1e <_strtod_l+0x276>
 801244e:	2a45      	cmp	r2, #69	@ 0x45
 8012450:	f43f ab65 	beq.w	8011b1e <_strtod_l+0x276>
 8012454:	2301      	movs	r3, #1
 8012456:	f7ff bba0 	b.w	8011b9a <_strtod_l+0x2f2>
 801245a:	bf00      	nop
 801245c:	f3af 8000 	nop.w
 8012460:	ffc00000 	.word	0xffc00000
 8012464:	41dfffff 	.word	0x41dfffff
 8012468:	94a03595 	.word	0x94a03595
 801246c:	3fcfffff 	.word	0x3fcfffff

08012470 <strtod>:
 8012470:	460a      	mov	r2, r1
 8012472:	4601      	mov	r1, r0
 8012474:	4802      	ldr	r0, [pc, #8]	@ (8012480 <strtod+0x10>)
 8012476:	4b03      	ldr	r3, [pc, #12]	@ (8012484 <strtod+0x14>)
 8012478:	6800      	ldr	r0, [r0, #0]
 801247a:	f7ff ba15 	b.w	80118a8 <_strtod_l>
 801247e:	bf00      	nop
 8012480:	2000040c 	.word	0x2000040c
 8012484:	200002a0 	.word	0x200002a0

08012488 <_strtol_l.isra.0>:
 8012488:	2b24      	cmp	r3, #36	@ 0x24
 801248a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801248e:	4686      	mov	lr, r0
 8012490:	4690      	mov	r8, r2
 8012492:	d801      	bhi.n	8012498 <_strtol_l.isra.0+0x10>
 8012494:	2b01      	cmp	r3, #1
 8012496:	d106      	bne.n	80124a6 <_strtol_l.isra.0+0x1e>
 8012498:	f000 ff4c 	bl	8013334 <__errno>
 801249c:	2316      	movs	r3, #22
 801249e:	6003      	str	r3, [r0, #0]
 80124a0:	2000      	movs	r0, #0
 80124a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124a6:	4834      	ldr	r0, [pc, #208]	@ (8012578 <_strtol_l.isra.0+0xf0>)
 80124a8:	460d      	mov	r5, r1
 80124aa:	462a      	mov	r2, r5
 80124ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124b0:	5d06      	ldrb	r6, [r0, r4]
 80124b2:	f016 0608 	ands.w	r6, r6, #8
 80124b6:	d1f8      	bne.n	80124aa <_strtol_l.isra.0+0x22>
 80124b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80124ba:	d110      	bne.n	80124de <_strtol_l.isra.0+0x56>
 80124bc:	782c      	ldrb	r4, [r5, #0]
 80124be:	2601      	movs	r6, #1
 80124c0:	1c95      	adds	r5, r2, #2
 80124c2:	f033 0210 	bics.w	r2, r3, #16
 80124c6:	d115      	bne.n	80124f4 <_strtol_l.isra.0+0x6c>
 80124c8:	2c30      	cmp	r4, #48	@ 0x30
 80124ca:	d10d      	bne.n	80124e8 <_strtol_l.isra.0+0x60>
 80124cc:	782a      	ldrb	r2, [r5, #0]
 80124ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80124d2:	2a58      	cmp	r2, #88	@ 0x58
 80124d4:	d108      	bne.n	80124e8 <_strtol_l.isra.0+0x60>
 80124d6:	786c      	ldrb	r4, [r5, #1]
 80124d8:	3502      	adds	r5, #2
 80124da:	2310      	movs	r3, #16
 80124dc:	e00a      	b.n	80124f4 <_strtol_l.isra.0+0x6c>
 80124de:	2c2b      	cmp	r4, #43	@ 0x2b
 80124e0:	bf04      	itt	eq
 80124e2:	782c      	ldrbeq	r4, [r5, #0]
 80124e4:	1c95      	addeq	r5, r2, #2
 80124e6:	e7ec      	b.n	80124c2 <_strtol_l.isra.0+0x3a>
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d1f6      	bne.n	80124da <_strtol_l.isra.0+0x52>
 80124ec:	2c30      	cmp	r4, #48	@ 0x30
 80124ee:	bf14      	ite	ne
 80124f0:	230a      	movne	r3, #10
 80124f2:	2308      	moveq	r3, #8
 80124f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80124f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80124fc:	2200      	movs	r2, #0
 80124fe:	fbbc f9f3 	udiv	r9, ip, r3
 8012502:	4610      	mov	r0, r2
 8012504:	fb03 ca19 	mls	sl, r3, r9, ip
 8012508:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801250c:	2f09      	cmp	r7, #9
 801250e:	d80f      	bhi.n	8012530 <_strtol_l.isra.0+0xa8>
 8012510:	463c      	mov	r4, r7
 8012512:	42a3      	cmp	r3, r4
 8012514:	dd1b      	ble.n	801254e <_strtol_l.isra.0+0xc6>
 8012516:	1c57      	adds	r7, r2, #1
 8012518:	d007      	beq.n	801252a <_strtol_l.isra.0+0xa2>
 801251a:	4581      	cmp	r9, r0
 801251c:	d314      	bcc.n	8012548 <_strtol_l.isra.0+0xc0>
 801251e:	d101      	bne.n	8012524 <_strtol_l.isra.0+0x9c>
 8012520:	45a2      	cmp	sl, r4
 8012522:	db11      	blt.n	8012548 <_strtol_l.isra.0+0xc0>
 8012524:	fb00 4003 	mla	r0, r0, r3, r4
 8012528:	2201      	movs	r2, #1
 801252a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801252e:	e7eb      	b.n	8012508 <_strtol_l.isra.0+0x80>
 8012530:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012534:	2f19      	cmp	r7, #25
 8012536:	d801      	bhi.n	801253c <_strtol_l.isra.0+0xb4>
 8012538:	3c37      	subs	r4, #55	@ 0x37
 801253a:	e7ea      	b.n	8012512 <_strtol_l.isra.0+0x8a>
 801253c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012540:	2f19      	cmp	r7, #25
 8012542:	d804      	bhi.n	801254e <_strtol_l.isra.0+0xc6>
 8012544:	3c57      	subs	r4, #87	@ 0x57
 8012546:	e7e4      	b.n	8012512 <_strtol_l.isra.0+0x8a>
 8012548:	f04f 32ff 	mov.w	r2, #4294967295
 801254c:	e7ed      	b.n	801252a <_strtol_l.isra.0+0xa2>
 801254e:	1c53      	adds	r3, r2, #1
 8012550:	d108      	bne.n	8012564 <_strtol_l.isra.0+0xdc>
 8012552:	2322      	movs	r3, #34	@ 0x22
 8012554:	f8ce 3000 	str.w	r3, [lr]
 8012558:	4660      	mov	r0, ip
 801255a:	f1b8 0f00 	cmp.w	r8, #0
 801255e:	d0a0      	beq.n	80124a2 <_strtol_l.isra.0+0x1a>
 8012560:	1e69      	subs	r1, r5, #1
 8012562:	e006      	b.n	8012572 <_strtol_l.isra.0+0xea>
 8012564:	b106      	cbz	r6, 8012568 <_strtol_l.isra.0+0xe0>
 8012566:	4240      	negs	r0, r0
 8012568:	f1b8 0f00 	cmp.w	r8, #0
 801256c:	d099      	beq.n	80124a2 <_strtol_l.isra.0+0x1a>
 801256e:	2a00      	cmp	r2, #0
 8012570:	d1f6      	bne.n	8012560 <_strtol_l.isra.0+0xd8>
 8012572:	f8c8 1000 	str.w	r1, [r8]
 8012576:	e794      	b.n	80124a2 <_strtol_l.isra.0+0x1a>
 8012578:	080168f1 	.word	0x080168f1

0801257c <strtol>:
 801257c:	4613      	mov	r3, r2
 801257e:	460a      	mov	r2, r1
 8012580:	4601      	mov	r1, r0
 8012582:	4802      	ldr	r0, [pc, #8]	@ (801258c <strtol+0x10>)
 8012584:	6800      	ldr	r0, [r0, #0]
 8012586:	f7ff bf7f 	b.w	8012488 <_strtol_l.isra.0>
 801258a:	bf00      	nop
 801258c:	2000040c 	.word	0x2000040c

08012590 <__cvt>:
 8012590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012594:	ec57 6b10 	vmov	r6, r7, d0
 8012598:	2f00      	cmp	r7, #0
 801259a:	460c      	mov	r4, r1
 801259c:	4619      	mov	r1, r3
 801259e:	463b      	mov	r3, r7
 80125a0:	bfbb      	ittet	lt
 80125a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80125a6:	461f      	movlt	r7, r3
 80125a8:	2300      	movge	r3, #0
 80125aa:	232d      	movlt	r3, #45	@ 0x2d
 80125ac:	700b      	strb	r3, [r1, #0]
 80125ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80125b4:	4691      	mov	r9, r2
 80125b6:	f023 0820 	bic.w	r8, r3, #32
 80125ba:	bfbc      	itt	lt
 80125bc:	4632      	movlt	r2, r6
 80125be:	4616      	movlt	r6, r2
 80125c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80125c4:	d005      	beq.n	80125d2 <__cvt+0x42>
 80125c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80125ca:	d100      	bne.n	80125ce <__cvt+0x3e>
 80125cc:	3401      	adds	r4, #1
 80125ce:	2102      	movs	r1, #2
 80125d0:	e000      	b.n	80125d4 <__cvt+0x44>
 80125d2:	2103      	movs	r1, #3
 80125d4:	ab03      	add	r3, sp, #12
 80125d6:	9301      	str	r3, [sp, #4]
 80125d8:	ab02      	add	r3, sp, #8
 80125da:	9300      	str	r3, [sp, #0]
 80125dc:	ec47 6b10 	vmov	d0, r6, r7
 80125e0:	4653      	mov	r3, sl
 80125e2:	4622      	mov	r2, r4
 80125e4:	f000 ff9c 	bl	8013520 <_dtoa_r>
 80125e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80125ec:	4605      	mov	r5, r0
 80125ee:	d119      	bne.n	8012624 <__cvt+0x94>
 80125f0:	f019 0f01 	tst.w	r9, #1
 80125f4:	d00e      	beq.n	8012614 <__cvt+0x84>
 80125f6:	eb00 0904 	add.w	r9, r0, r4
 80125fa:	2200      	movs	r2, #0
 80125fc:	2300      	movs	r3, #0
 80125fe:	4630      	mov	r0, r6
 8012600:	4639      	mov	r1, r7
 8012602:	f7ee fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 8012606:	b108      	cbz	r0, 801260c <__cvt+0x7c>
 8012608:	f8cd 900c 	str.w	r9, [sp, #12]
 801260c:	2230      	movs	r2, #48	@ 0x30
 801260e:	9b03      	ldr	r3, [sp, #12]
 8012610:	454b      	cmp	r3, r9
 8012612:	d31e      	bcc.n	8012652 <__cvt+0xc2>
 8012614:	9b03      	ldr	r3, [sp, #12]
 8012616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012618:	1b5b      	subs	r3, r3, r5
 801261a:	4628      	mov	r0, r5
 801261c:	6013      	str	r3, [r2, #0]
 801261e:	b004      	add	sp, #16
 8012620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012624:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012628:	eb00 0904 	add.w	r9, r0, r4
 801262c:	d1e5      	bne.n	80125fa <__cvt+0x6a>
 801262e:	7803      	ldrb	r3, [r0, #0]
 8012630:	2b30      	cmp	r3, #48	@ 0x30
 8012632:	d10a      	bne.n	801264a <__cvt+0xba>
 8012634:	2200      	movs	r2, #0
 8012636:	2300      	movs	r3, #0
 8012638:	4630      	mov	r0, r6
 801263a:	4639      	mov	r1, r7
 801263c:	f7ee fa44 	bl	8000ac8 <__aeabi_dcmpeq>
 8012640:	b918      	cbnz	r0, 801264a <__cvt+0xba>
 8012642:	f1c4 0401 	rsb	r4, r4, #1
 8012646:	f8ca 4000 	str.w	r4, [sl]
 801264a:	f8da 3000 	ldr.w	r3, [sl]
 801264e:	4499      	add	r9, r3
 8012650:	e7d3      	b.n	80125fa <__cvt+0x6a>
 8012652:	1c59      	adds	r1, r3, #1
 8012654:	9103      	str	r1, [sp, #12]
 8012656:	701a      	strb	r2, [r3, #0]
 8012658:	e7d9      	b.n	801260e <__cvt+0x7e>

0801265a <__exponent>:
 801265a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801265c:	2900      	cmp	r1, #0
 801265e:	bfba      	itte	lt
 8012660:	4249      	neglt	r1, r1
 8012662:	232d      	movlt	r3, #45	@ 0x2d
 8012664:	232b      	movge	r3, #43	@ 0x2b
 8012666:	2909      	cmp	r1, #9
 8012668:	7002      	strb	r2, [r0, #0]
 801266a:	7043      	strb	r3, [r0, #1]
 801266c:	dd29      	ble.n	80126c2 <__exponent+0x68>
 801266e:	f10d 0307 	add.w	r3, sp, #7
 8012672:	461d      	mov	r5, r3
 8012674:	270a      	movs	r7, #10
 8012676:	461a      	mov	r2, r3
 8012678:	fbb1 f6f7 	udiv	r6, r1, r7
 801267c:	fb07 1416 	mls	r4, r7, r6, r1
 8012680:	3430      	adds	r4, #48	@ 0x30
 8012682:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012686:	460c      	mov	r4, r1
 8012688:	2c63      	cmp	r4, #99	@ 0x63
 801268a:	f103 33ff 	add.w	r3, r3, #4294967295
 801268e:	4631      	mov	r1, r6
 8012690:	dcf1      	bgt.n	8012676 <__exponent+0x1c>
 8012692:	3130      	adds	r1, #48	@ 0x30
 8012694:	1e94      	subs	r4, r2, #2
 8012696:	f803 1c01 	strb.w	r1, [r3, #-1]
 801269a:	1c41      	adds	r1, r0, #1
 801269c:	4623      	mov	r3, r4
 801269e:	42ab      	cmp	r3, r5
 80126a0:	d30a      	bcc.n	80126b8 <__exponent+0x5e>
 80126a2:	f10d 0309 	add.w	r3, sp, #9
 80126a6:	1a9b      	subs	r3, r3, r2
 80126a8:	42ac      	cmp	r4, r5
 80126aa:	bf88      	it	hi
 80126ac:	2300      	movhi	r3, #0
 80126ae:	3302      	adds	r3, #2
 80126b0:	4403      	add	r3, r0
 80126b2:	1a18      	subs	r0, r3, r0
 80126b4:	b003      	add	sp, #12
 80126b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80126bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80126c0:	e7ed      	b.n	801269e <__exponent+0x44>
 80126c2:	2330      	movs	r3, #48	@ 0x30
 80126c4:	3130      	adds	r1, #48	@ 0x30
 80126c6:	7083      	strb	r3, [r0, #2]
 80126c8:	70c1      	strb	r1, [r0, #3]
 80126ca:	1d03      	adds	r3, r0, #4
 80126cc:	e7f1      	b.n	80126b2 <__exponent+0x58>
	...

080126d0 <_printf_float>:
 80126d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	b08d      	sub	sp, #52	@ 0x34
 80126d6:	460c      	mov	r4, r1
 80126d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80126dc:	4616      	mov	r6, r2
 80126de:	461f      	mov	r7, r3
 80126e0:	4605      	mov	r5, r0
 80126e2:	f000 fd6f 	bl	80131c4 <_localeconv_r>
 80126e6:	6803      	ldr	r3, [r0, #0]
 80126e8:	9304      	str	r3, [sp, #16]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7ed fdc0 	bl	8000270 <strlen>
 80126f0:	2300      	movs	r3, #0
 80126f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80126f4:	f8d8 3000 	ldr.w	r3, [r8]
 80126f8:	9005      	str	r0, [sp, #20]
 80126fa:	3307      	adds	r3, #7
 80126fc:	f023 0307 	bic.w	r3, r3, #7
 8012700:	f103 0208 	add.w	r2, r3, #8
 8012704:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012708:	f8d4 b000 	ldr.w	fp, [r4]
 801270c:	f8c8 2000 	str.w	r2, [r8]
 8012710:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012714:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012718:	9307      	str	r3, [sp, #28]
 801271a:	f8cd 8018 	str.w	r8, [sp, #24]
 801271e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012726:	4b9c      	ldr	r3, [pc, #624]	@ (8012998 <_printf_float+0x2c8>)
 8012728:	f04f 32ff 	mov.w	r2, #4294967295
 801272c:	f7ee f9fe 	bl	8000b2c <__aeabi_dcmpun>
 8012730:	bb70      	cbnz	r0, 8012790 <_printf_float+0xc0>
 8012732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012736:	4b98      	ldr	r3, [pc, #608]	@ (8012998 <_printf_float+0x2c8>)
 8012738:	f04f 32ff 	mov.w	r2, #4294967295
 801273c:	f7ee f9d8 	bl	8000af0 <__aeabi_dcmple>
 8012740:	bb30      	cbnz	r0, 8012790 <_printf_float+0xc0>
 8012742:	2200      	movs	r2, #0
 8012744:	2300      	movs	r3, #0
 8012746:	4640      	mov	r0, r8
 8012748:	4649      	mov	r1, r9
 801274a:	f7ee f9c7 	bl	8000adc <__aeabi_dcmplt>
 801274e:	b110      	cbz	r0, 8012756 <_printf_float+0x86>
 8012750:	232d      	movs	r3, #45	@ 0x2d
 8012752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012756:	4a91      	ldr	r2, [pc, #580]	@ (801299c <_printf_float+0x2cc>)
 8012758:	4b91      	ldr	r3, [pc, #580]	@ (80129a0 <_printf_float+0x2d0>)
 801275a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801275e:	bf8c      	ite	hi
 8012760:	4690      	movhi	r8, r2
 8012762:	4698      	movls	r8, r3
 8012764:	2303      	movs	r3, #3
 8012766:	6123      	str	r3, [r4, #16]
 8012768:	f02b 0304 	bic.w	r3, fp, #4
 801276c:	6023      	str	r3, [r4, #0]
 801276e:	f04f 0900 	mov.w	r9, #0
 8012772:	9700      	str	r7, [sp, #0]
 8012774:	4633      	mov	r3, r6
 8012776:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012778:	4621      	mov	r1, r4
 801277a:	4628      	mov	r0, r5
 801277c:	f000 f9d2 	bl	8012b24 <_printf_common>
 8012780:	3001      	adds	r0, #1
 8012782:	f040 808d 	bne.w	80128a0 <_printf_float+0x1d0>
 8012786:	f04f 30ff 	mov.w	r0, #4294967295
 801278a:	b00d      	add	sp, #52	@ 0x34
 801278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012790:	4642      	mov	r2, r8
 8012792:	464b      	mov	r3, r9
 8012794:	4640      	mov	r0, r8
 8012796:	4649      	mov	r1, r9
 8012798:	f7ee f9c8 	bl	8000b2c <__aeabi_dcmpun>
 801279c:	b140      	cbz	r0, 80127b0 <_printf_float+0xe0>
 801279e:	464b      	mov	r3, r9
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	bfbc      	itt	lt
 80127a4:	232d      	movlt	r3, #45	@ 0x2d
 80127a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80127aa:	4a7e      	ldr	r2, [pc, #504]	@ (80129a4 <_printf_float+0x2d4>)
 80127ac:	4b7e      	ldr	r3, [pc, #504]	@ (80129a8 <_printf_float+0x2d8>)
 80127ae:	e7d4      	b.n	801275a <_printf_float+0x8a>
 80127b0:	6863      	ldr	r3, [r4, #4]
 80127b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80127b6:	9206      	str	r2, [sp, #24]
 80127b8:	1c5a      	adds	r2, r3, #1
 80127ba:	d13b      	bne.n	8012834 <_printf_float+0x164>
 80127bc:	2306      	movs	r3, #6
 80127be:	6063      	str	r3, [r4, #4]
 80127c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80127c4:	2300      	movs	r3, #0
 80127c6:	6022      	str	r2, [r4, #0]
 80127c8:	9303      	str	r3, [sp, #12]
 80127ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80127cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80127d0:	ab09      	add	r3, sp, #36	@ 0x24
 80127d2:	9300      	str	r3, [sp, #0]
 80127d4:	6861      	ldr	r1, [r4, #4]
 80127d6:	ec49 8b10 	vmov	d0, r8, r9
 80127da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80127de:	4628      	mov	r0, r5
 80127e0:	f7ff fed6 	bl	8012590 <__cvt>
 80127e4:	9b06      	ldr	r3, [sp, #24]
 80127e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80127e8:	2b47      	cmp	r3, #71	@ 0x47
 80127ea:	4680      	mov	r8, r0
 80127ec:	d129      	bne.n	8012842 <_printf_float+0x172>
 80127ee:	1cc8      	adds	r0, r1, #3
 80127f0:	db02      	blt.n	80127f8 <_printf_float+0x128>
 80127f2:	6863      	ldr	r3, [r4, #4]
 80127f4:	4299      	cmp	r1, r3
 80127f6:	dd41      	ble.n	801287c <_printf_float+0x1ac>
 80127f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80127fc:	fa5f fa8a 	uxtb.w	sl, sl
 8012800:	3901      	subs	r1, #1
 8012802:	4652      	mov	r2, sl
 8012804:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012808:	9109      	str	r1, [sp, #36]	@ 0x24
 801280a:	f7ff ff26 	bl	801265a <__exponent>
 801280e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012810:	1813      	adds	r3, r2, r0
 8012812:	2a01      	cmp	r2, #1
 8012814:	4681      	mov	r9, r0
 8012816:	6123      	str	r3, [r4, #16]
 8012818:	dc02      	bgt.n	8012820 <_printf_float+0x150>
 801281a:	6822      	ldr	r2, [r4, #0]
 801281c:	07d2      	lsls	r2, r2, #31
 801281e:	d501      	bpl.n	8012824 <_printf_float+0x154>
 8012820:	3301      	adds	r3, #1
 8012822:	6123      	str	r3, [r4, #16]
 8012824:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012828:	2b00      	cmp	r3, #0
 801282a:	d0a2      	beq.n	8012772 <_printf_float+0xa2>
 801282c:	232d      	movs	r3, #45	@ 0x2d
 801282e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012832:	e79e      	b.n	8012772 <_printf_float+0xa2>
 8012834:	9a06      	ldr	r2, [sp, #24]
 8012836:	2a47      	cmp	r2, #71	@ 0x47
 8012838:	d1c2      	bne.n	80127c0 <_printf_float+0xf0>
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1c0      	bne.n	80127c0 <_printf_float+0xf0>
 801283e:	2301      	movs	r3, #1
 8012840:	e7bd      	b.n	80127be <_printf_float+0xee>
 8012842:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012846:	d9db      	bls.n	8012800 <_printf_float+0x130>
 8012848:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801284c:	d118      	bne.n	8012880 <_printf_float+0x1b0>
 801284e:	2900      	cmp	r1, #0
 8012850:	6863      	ldr	r3, [r4, #4]
 8012852:	dd0b      	ble.n	801286c <_printf_float+0x19c>
 8012854:	6121      	str	r1, [r4, #16]
 8012856:	b913      	cbnz	r3, 801285e <_printf_float+0x18e>
 8012858:	6822      	ldr	r2, [r4, #0]
 801285a:	07d0      	lsls	r0, r2, #31
 801285c:	d502      	bpl.n	8012864 <_printf_float+0x194>
 801285e:	3301      	adds	r3, #1
 8012860:	440b      	add	r3, r1
 8012862:	6123      	str	r3, [r4, #16]
 8012864:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012866:	f04f 0900 	mov.w	r9, #0
 801286a:	e7db      	b.n	8012824 <_printf_float+0x154>
 801286c:	b913      	cbnz	r3, 8012874 <_printf_float+0x1a4>
 801286e:	6822      	ldr	r2, [r4, #0]
 8012870:	07d2      	lsls	r2, r2, #31
 8012872:	d501      	bpl.n	8012878 <_printf_float+0x1a8>
 8012874:	3302      	adds	r3, #2
 8012876:	e7f4      	b.n	8012862 <_printf_float+0x192>
 8012878:	2301      	movs	r3, #1
 801287a:	e7f2      	b.n	8012862 <_printf_float+0x192>
 801287c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012882:	4299      	cmp	r1, r3
 8012884:	db05      	blt.n	8012892 <_printf_float+0x1c2>
 8012886:	6823      	ldr	r3, [r4, #0]
 8012888:	6121      	str	r1, [r4, #16]
 801288a:	07d8      	lsls	r0, r3, #31
 801288c:	d5ea      	bpl.n	8012864 <_printf_float+0x194>
 801288e:	1c4b      	adds	r3, r1, #1
 8012890:	e7e7      	b.n	8012862 <_printf_float+0x192>
 8012892:	2900      	cmp	r1, #0
 8012894:	bfd4      	ite	le
 8012896:	f1c1 0202 	rsble	r2, r1, #2
 801289a:	2201      	movgt	r2, #1
 801289c:	4413      	add	r3, r2
 801289e:	e7e0      	b.n	8012862 <_printf_float+0x192>
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	055a      	lsls	r2, r3, #21
 80128a4:	d407      	bmi.n	80128b6 <_printf_float+0x1e6>
 80128a6:	6923      	ldr	r3, [r4, #16]
 80128a8:	4642      	mov	r2, r8
 80128aa:	4631      	mov	r1, r6
 80128ac:	4628      	mov	r0, r5
 80128ae:	47b8      	blx	r7
 80128b0:	3001      	adds	r0, #1
 80128b2:	d12b      	bne.n	801290c <_printf_float+0x23c>
 80128b4:	e767      	b.n	8012786 <_printf_float+0xb6>
 80128b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80128ba:	f240 80dd 	bls.w	8012a78 <_printf_float+0x3a8>
 80128be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80128c2:	2200      	movs	r2, #0
 80128c4:	2300      	movs	r3, #0
 80128c6:	f7ee f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80128ca:	2800      	cmp	r0, #0
 80128cc:	d033      	beq.n	8012936 <_printf_float+0x266>
 80128ce:	4a37      	ldr	r2, [pc, #220]	@ (80129ac <_printf_float+0x2dc>)
 80128d0:	2301      	movs	r3, #1
 80128d2:	4631      	mov	r1, r6
 80128d4:	4628      	mov	r0, r5
 80128d6:	47b8      	blx	r7
 80128d8:	3001      	adds	r0, #1
 80128da:	f43f af54 	beq.w	8012786 <_printf_float+0xb6>
 80128de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80128e2:	4543      	cmp	r3, r8
 80128e4:	db02      	blt.n	80128ec <_printf_float+0x21c>
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	07d8      	lsls	r0, r3, #31
 80128ea:	d50f      	bpl.n	801290c <_printf_float+0x23c>
 80128ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128f0:	4631      	mov	r1, r6
 80128f2:	4628      	mov	r0, r5
 80128f4:	47b8      	blx	r7
 80128f6:	3001      	adds	r0, #1
 80128f8:	f43f af45 	beq.w	8012786 <_printf_float+0xb6>
 80128fc:	f04f 0900 	mov.w	r9, #0
 8012900:	f108 38ff 	add.w	r8, r8, #4294967295
 8012904:	f104 0a1a 	add.w	sl, r4, #26
 8012908:	45c8      	cmp	r8, r9
 801290a:	dc09      	bgt.n	8012920 <_printf_float+0x250>
 801290c:	6823      	ldr	r3, [r4, #0]
 801290e:	079b      	lsls	r3, r3, #30
 8012910:	f100 8103 	bmi.w	8012b1a <_printf_float+0x44a>
 8012914:	68e0      	ldr	r0, [r4, #12]
 8012916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012918:	4298      	cmp	r0, r3
 801291a:	bfb8      	it	lt
 801291c:	4618      	movlt	r0, r3
 801291e:	e734      	b.n	801278a <_printf_float+0xba>
 8012920:	2301      	movs	r3, #1
 8012922:	4652      	mov	r2, sl
 8012924:	4631      	mov	r1, r6
 8012926:	4628      	mov	r0, r5
 8012928:	47b8      	blx	r7
 801292a:	3001      	adds	r0, #1
 801292c:	f43f af2b 	beq.w	8012786 <_printf_float+0xb6>
 8012930:	f109 0901 	add.w	r9, r9, #1
 8012934:	e7e8      	b.n	8012908 <_printf_float+0x238>
 8012936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012938:	2b00      	cmp	r3, #0
 801293a:	dc39      	bgt.n	80129b0 <_printf_float+0x2e0>
 801293c:	4a1b      	ldr	r2, [pc, #108]	@ (80129ac <_printf_float+0x2dc>)
 801293e:	2301      	movs	r3, #1
 8012940:	4631      	mov	r1, r6
 8012942:	4628      	mov	r0, r5
 8012944:	47b8      	blx	r7
 8012946:	3001      	adds	r0, #1
 8012948:	f43f af1d 	beq.w	8012786 <_printf_float+0xb6>
 801294c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012950:	ea59 0303 	orrs.w	r3, r9, r3
 8012954:	d102      	bne.n	801295c <_printf_float+0x28c>
 8012956:	6823      	ldr	r3, [r4, #0]
 8012958:	07d9      	lsls	r1, r3, #31
 801295a:	d5d7      	bpl.n	801290c <_printf_float+0x23c>
 801295c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012960:	4631      	mov	r1, r6
 8012962:	4628      	mov	r0, r5
 8012964:	47b8      	blx	r7
 8012966:	3001      	adds	r0, #1
 8012968:	f43f af0d 	beq.w	8012786 <_printf_float+0xb6>
 801296c:	f04f 0a00 	mov.w	sl, #0
 8012970:	f104 0b1a 	add.w	fp, r4, #26
 8012974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012976:	425b      	negs	r3, r3
 8012978:	4553      	cmp	r3, sl
 801297a:	dc01      	bgt.n	8012980 <_printf_float+0x2b0>
 801297c:	464b      	mov	r3, r9
 801297e:	e793      	b.n	80128a8 <_printf_float+0x1d8>
 8012980:	2301      	movs	r3, #1
 8012982:	465a      	mov	r2, fp
 8012984:	4631      	mov	r1, r6
 8012986:	4628      	mov	r0, r5
 8012988:	47b8      	blx	r7
 801298a:	3001      	adds	r0, #1
 801298c:	f43f aefb 	beq.w	8012786 <_printf_float+0xb6>
 8012990:	f10a 0a01 	add.w	sl, sl, #1
 8012994:	e7ee      	b.n	8012974 <_printf_float+0x2a4>
 8012996:	bf00      	nop
 8012998:	7fefffff 	.word	0x7fefffff
 801299c:	0801667a 	.word	0x0801667a
 80129a0:	08016676 	.word	0x08016676
 80129a4:	08016682 	.word	0x08016682
 80129a8:	0801667e 	.word	0x0801667e
 80129ac:	08016686 	.word	0x08016686
 80129b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80129b6:	4553      	cmp	r3, sl
 80129b8:	bfa8      	it	ge
 80129ba:	4653      	movge	r3, sl
 80129bc:	2b00      	cmp	r3, #0
 80129be:	4699      	mov	r9, r3
 80129c0:	dc36      	bgt.n	8012a30 <_printf_float+0x360>
 80129c2:	f04f 0b00 	mov.w	fp, #0
 80129c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129ca:	f104 021a 	add.w	r2, r4, #26
 80129ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129d0:	9306      	str	r3, [sp, #24]
 80129d2:	eba3 0309 	sub.w	r3, r3, r9
 80129d6:	455b      	cmp	r3, fp
 80129d8:	dc31      	bgt.n	8012a3e <_printf_float+0x36e>
 80129da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129dc:	459a      	cmp	sl, r3
 80129de:	dc3a      	bgt.n	8012a56 <_printf_float+0x386>
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	07da      	lsls	r2, r3, #31
 80129e4:	d437      	bmi.n	8012a56 <_printf_float+0x386>
 80129e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129e8:	ebaa 0903 	sub.w	r9, sl, r3
 80129ec:	9b06      	ldr	r3, [sp, #24]
 80129ee:	ebaa 0303 	sub.w	r3, sl, r3
 80129f2:	4599      	cmp	r9, r3
 80129f4:	bfa8      	it	ge
 80129f6:	4699      	movge	r9, r3
 80129f8:	f1b9 0f00 	cmp.w	r9, #0
 80129fc:	dc33      	bgt.n	8012a66 <_printf_float+0x396>
 80129fe:	f04f 0800 	mov.w	r8, #0
 8012a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a06:	f104 0b1a 	add.w	fp, r4, #26
 8012a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a0c:	ebaa 0303 	sub.w	r3, sl, r3
 8012a10:	eba3 0309 	sub.w	r3, r3, r9
 8012a14:	4543      	cmp	r3, r8
 8012a16:	f77f af79 	ble.w	801290c <_printf_float+0x23c>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	465a      	mov	r2, fp
 8012a1e:	4631      	mov	r1, r6
 8012a20:	4628      	mov	r0, r5
 8012a22:	47b8      	blx	r7
 8012a24:	3001      	adds	r0, #1
 8012a26:	f43f aeae 	beq.w	8012786 <_printf_float+0xb6>
 8012a2a:	f108 0801 	add.w	r8, r8, #1
 8012a2e:	e7ec      	b.n	8012a0a <_printf_float+0x33a>
 8012a30:	4642      	mov	r2, r8
 8012a32:	4631      	mov	r1, r6
 8012a34:	4628      	mov	r0, r5
 8012a36:	47b8      	blx	r7
 8012a38:	3001      	adds	r0, #1
 8012a3a:	d1c2      	bne.n	80129c2 <_printf_float+0x2f2>
 8012a3c:	e6a3      	b.n	8012786 <_printf_float+0xb6>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	4631      	mov	r1, r6
 8012a42:	4628      	mov	r0, r5
 8012a44:	9206      	str	r2, [sp, #24]
 8012a46:	47b8      	blx	r7
 8012a48:	3001      	adds	r0, #1
 8012a4a:	f43f ae9c 	beq.w	8012786 <_printf_float+0xb6>
 8012a4e:	9a06      	ldr	r2, [sp, #24]
 8012a50:	f10b 0b01 	add.w	fp, fp, #1
 8012a54:	e7bb      	b.n	80129ce <_printf_float+0x2fe>
 8012a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a5a:	4631      	mov	r1, r6
 8012a5c:	4628      	mov	r0, r5
 8012a5e:	47b8      	blx	r7
 8012a60:	3001      	adds	r0, #1
 8012a62:	d1c0      	bne.n	80129e6 <_printf_float+0x316>
 8012a64:	e68f      	b.n	8012786 <_printf_float+0xb6>
 8012a66:	9a06      	ldr	r2, [sp, #24]
 8012a68:	464b      	mov	r3, r9
 8012a6a:	4442      	add	r2, r8
 8012a6c:	4631      	mov	r1, r6
 8012a6e:	4628      	mov	r0, r5
 8012a70:	47b8      	blx	r7
 8012a72:	3001      	adds	r0, #1
 8012a74:	d1c3      	bne.n	80129fe <_printf_float+0x32e>
 8012a76:	e686      	b.n	8012786 <_printf_float+0xb6>
 8012a78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a7c:	f1ba 0f01 	cmp.w	sl, #1
 8012a80:	dc01      	bgt.n	8012a86 <_printf_float+0x3b6>
 8012a82:	07db      	lsls	r3, r3, #31
 8012a84:	d536      	bpl.n	8012af4 <_printf_float+0x424>
 8012a86:	2301      	movs	r3, #1
 8012a88:	4642      	mov	r2, r8
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	47b8      	blx	r7
 8012a90:	3001      	adds	r0, #1
 8012a92:	f43f ae78 	beq.w	8012786 <_printf_float+0xb6>
 8012a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a9a:	4631      	mov	r1, r6
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	47b8      	blx	r7
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	f43f ae70 	beq.w	8012786 <_printf_float+0xb6>
 8012aa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012aaa:	2200      	movs	r2, #0
 8012aac:	2300      	movs	r3, #0
 8012aae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ab2:	f7ee f809 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ab6:	b9c0      	cbnz	r0, 8012aea <_printf_float+0x41a>
 8012ab8:	4653      	mov	r3, sl
 8012aba:	f108 0201 	add.w	r2, r8, #1
 8012abe:	4631      	mov	r1, r6
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	47b8      	blx	r7
 8012ac4:	3001      	adds	r0, #1
 8012ac6:	d10c      	bne.n	8012ae2 <_printf_float+0x412>
 8012ac8:	e65d      	b.n	8012786 <_printf_float+0xb6>
 8012aca:	2301      	movs	r3, #1
 8012acc:	465a      	mov	r2, fp
 8012ace:	4631      	mov	r1, r6
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	47b8      	blx	r7
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	f43f ae56 	beq.w	8012786 <_printf_float+0xb6>
 8012ada:	f108 0801 	add.w	r8, r8, #1
 8012ade:	45d0      	cmp	r8, sl
 8012ae0:	dbf3      	blt.n	8012aca <_printf_float+0x3fa>
 8012ae2:	464b      	mov	r3, r9
 8012ae4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012ae8:	e6df      	b.n	80128aa <_printf_float+0x1da>
 8012aea:	f04f 0800 	mov.w	r8, #0
 8012aee:	f104 0b1a 	add.w	fp, r4, #26
 8012af2:	e7f4      	b.n	8012ade <_printf_float+0x40e>
 8012af4:	2301      	movs	r3, #1
 8012af6:	4642      	mov	r2, r8
 8012af8:	e7e1      	b.n	8012abe <_printf_float+0x3ee>
 8012afa:	2301      	movs	r3, #1
 8012afc:	464a      	mov	r2, r9
 8012afe:	4631      	mov	r1, r6
 8012b00:	4628      	mov	r0, r5
 8012b02:	47b8      	blx	r7
 8012b04:	3001      	adds	r0, #1
 8012b06:	f43f ae3e 	beq.w	8012786 <_printf_float+0xb6>
 8012b0a:	f108 0801 	add.w	r8, r8, #1
 8012b0e:	68e3      	ldr	r3, [r4, #12]
 8012b10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b12:	1a5b      	subs	r3, r3, r1
 8012b14:	4543      	cmp	r3, r8
 8012b16:	dcf0      	bgt.n	8012afa <_printf_float+0x42a>
 8012b18:	e6fc      	b.n	8012914 <_printf_float+0x244>
 8012b1a:	f04f 0800 	mov.w	r8, #0
 8012b1e:	f104 0919 	add.w	r9, r4, #25
 8012b22:	e7f4      	b.n	8012b0e <_printf_float+0x43e>

08012b24 <_printf_common>:
 8012b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b28:	4616      	mov	r6, r2
 8012b2a:	4698      	mov	r8, r3
 8012b2c:	688a      	ldr	r2, [r1, #8]
 8012b2e:	690b      	ldr	r3, [r1, #16]
 8012b30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b34:	4293      	cmp	r3, r2
 8012b36:	bfb8      	it	lt
 8012b38:	4613      	movlt	r3, r2
 8012b3a:	6033      	str	r3, [r6, #0]
 8012b3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b40:	4607      	mov	r7, r0
 8012b42:	460c      	mov	r4, r1
 8012b44:	b10a      	cbz	r2, 8012b4a <_printf_common+0x26>
 8012b46:	3301      	adds	r3, #1
 8012b48:	6033      	str	r3, [r6, #0]
 8012b4a:	6823      	ldr	r3, [r4, #0]
 8012b4c:	0699      	lsls	r1, r3, #26
 8012b4e:	bf42      	ittt	mi
 8012b50:	6833      	ldrmi	r3, [r6, #0]
 8012b52:	3302      	addmi	r3, #2
 8012b54:	6033      	strmi	r3, [r6, #0]
 8012b56:	6825      	ldr	r5, [r4, #0]
 8012b58:	f015 0506 	ands.w	r5, r5, #6
 8012b5c:	d106      	bne.n	8012b6c <_printf_common+0x48>
 8012b5e:	f104 0a19 	add.w	sl, r4, #25
 8012b62:	68e3      	ldr	r3, [r4, #12]
 8012b64:	6832      	ldr	r2, [r6, #0]
 8012b66:	1a9b      	subs	r3, r3, r2
 8012b68:	42ab      	cmp	r3, r5
 8012b6a:	dc26      	bgt.n	8012bba <_printf_common+0x96>
 8012b6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012b70:	6822      	ldr	r2, [r4, #0]
 8012b72:	3b00      	subs	r3, #0
 8012b74:	bf18      	it	ne
 8012b76:	2301      	movne	r3, #1
 8012b78:	0692      	lsls	r2, r2, #26
 8012b7a:	d42b      	bmi.n	8012bd4 <_printf_common+0xb0>
 8012b7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012b80:	4641      	mov	r1, r8
 8012b82:	4638      	mov	r0, r7
 8012b84:	47c8      	blx	r9
 8012b86:	3001      	adds	r0, #1
 8012b88:	d01e      	beq.n	8012bc8 <_printf_common+0xa4>
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	6922      	ldr	r2, [r4, #16]
 8012b8e:	f003 0306 	and.w	r3, r3, #6
 8012b92:	2b04      	cmp	r3, #4
 8012b94:	bf02      	ittt	eq
 8012b96:	68e5      	ldreq	r5, [r4, #12]
 8012b98:	6833      	ldreq	r3, [r6, #0]
 8012b9a:	1aed      	subeq	r5, r5, r3
 8012b9c:	68a3      	ldr	r3, [r4, #8]
 8012b9e:	bf0c      	ite	eq
 8012ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ba4:	2500      	movne	r5, #0
 8012ba6:	4293      	cmp	r3, r2
 8012ba8:	bfc4      	itt	gt
 8012baa:	1a9b      	subgt	r3, r3, r2
 8012bac:	18ed      	addgt	r5, r5, r3
 8012bae:	2600      	movs	r6, #0
 8012bb0:	341a      	adds	r4, #26
 8012bb2:	42b5      	cmp	r5, r6
 8012bb4:	d11a      	bne.n	8012bec <_printf_common+0xc8>
 8012bb6:	2000      	movs	r0, #0
 8012bb8:	e008      	b.n	8012bcc <_printf_common+0xa8>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	4652      	mov	r2, sl
 8012bbe:	4641      	mov	r1, r8
 8012bc0:	4638      	mov	r0, r7
 8012bc2:	47c8      	blx	r9
 8012bc4:	3001      	adds	r0, #1
 8012bc6:	d103      	bne.n	8012bd0 <_printf_common+0xac>
 8012bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bd0:	3501      	adds	r5, #1
 8012bd2:	e7c6      	b.n	8012b62 <_printf_common+0x3e>
 8012bd4:	18e1      	adds	r1, r4, r3
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	2030      	movs	r0, #48	@ 0x30
 8012bda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012bde:	4422      	add	r2, r4
 8012be0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012be4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012be8:	3302      	adds	r3, #2
 8012bea:	e7c7      	b.n	8012b7c <_printf_common+0x58>
 8012bec:	2301      	movs	r3, #1
 8012bee:	4622      	mov	r2, r4
 8012bf0:	4641      	mov	r1, r8
 8012bf2:	4638      	mov	r0, r7
 8012bf4:	47c8      	blx	r9
 8012bf6:	3001      	adds	r0, #1
 8012bf8:	d0e6      	beq.n	8012bc8 <_printf_common+0xa4>
 8012bfa:	3601      	adds	r6, #1
 8012bfc:	e7d9      	b.n	8012bb2 <_printf_common+0x8e>
	...

08012c00 <_printf_i>:
 8012c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c04:	7e0f      	ldrb	r7, [r1, #24]
 8012c06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c08:	2f78      	cmp	r7, #120	@ 0x78
 8012c0a:	4691      	mov	r9, r2
 8012c0c:	4680      	mov	r8, r0
 8012c0e:	460c      	mov	r4, r1
 8012c10:	469a      	mov	sl, r3
 8012c12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c16:	d807      	bhi.n	8012c28 <_printf_i+0x28>
 8012c18:	2f62      	cmp	r7, #98	@ 0x62
 8012c1a:	d80a      	bhi.n	8012c32 <_printf_i+0x32>
 8012c1c:	2f00      	cmp	r7, #0
 8012c1e:	f000 80d1 	beq.w	8012dc4 <_printf_i+0x1c4>
 8012c22:	2f58      	cmp	r7, #88	@ 0x58
 8012c24:	f000 80b8 	beq.w	8012d98 <_printf_i+0x198>
 8012c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c30:	e03a      	b.n	8012ca8 <_printf_i+0xa8>
 8012c32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c36:	2b15      	cmp	r3, #21
 8012c38:	d8f6      	bhi.n	8012c28 <_printf_i+0x28>
 8012c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8012c40 <_printf_i+0x40>)
 8012c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c40:	08012c99 	.word	0x08012c99
 8012c44:	08012cad 	.word	0x08012cad
 8012c48:	08012c29 	.word	0x08012c29
 8012c4c:	08012c29 	.word	0x08012c29
 8012c50:	08012c29 	.word	0x08012c29
 8012c54:	08012c29 	.word	0x08012c29
 8012c58:	08012cad 	.word	0x08012cad
 8012c5c:	08012c29 	.word	0x08012c29
 8012c60:	08012c29 	.word	0x08012c29
 8012c64:	08012c29 	.word	0x08012c29
 8012c68:	08012c29 	.word	0x08012c29
 8012c6c:	08012dab 	.word	0x08012dab
 8012c70:	08012cd7 	.word	0x08012cd7
 8012c74:	08012d65 	.word	0x08012d65
 8012c78:	08012c29 	.word	0x08012c29
 8012c7c:	08012c29 	.word	0x08012c29
 8012c80:	08012dcd 	.word	0x08012dcd
 8012c84:	08012c29 	.word	0x08012c29
 8012c88:	08012cd7 	.word	0x08012cd7
 8012c8c:	08012c29 	.word	0x08012c29
 8012c90:	08012c29 	.word	0x08012c29
 8012c94:	08012d6d 	.word	0x08012d6d
 8012c98:	6833      	ldr	r3, [r6, #0]
 8012c9a:	1d1a      	adds	r2, r3, #4
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	6032      	str	r2, [r6, #0]
 8012ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012ca8:	2301      	movs	r3, #1
 8012caa:	e09c      	b.n	8012de6 <_printf_i+0x1e6>
 8012cac:	6833      	ldr	r3, [r6, #0]
 8012cae:	6820      	ldr	r0, [r4, #0]
 8012cb0:	1d19      	adds	r1, r3, #4
 8012cb2:	6031      	str	r1, [r6, #0]
 8012cb4:	0606      	lsls	r6, r0, #24
 8012cb6:	d501      	bpl.n	8012cbc <_printf_i+0xbc>
 8012cb8:	681d      	ldr	r5, [r3, #0]
 8012cba:	e003      	b.n	8012cc4 <_printf_i+0xc4>
 8012cbc:	0645      	lsls	r5, r0, #25
 8012cbe:	d5fb      	bpl.n	8012cb8 <_printf_i+0xb8>
 8012cc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012cc4:	2d00      	cmp	r5, #0
 8012cc6:	da03      	bge.n	8012cd0 <_printf_i+0xd0>
 8012cc8:	232d      	movs	r3, #45	@ 0x2d
 8012cca:	426d      	negs	r5, r5
 8012ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cd0:	4858      	ldr	r0, [pc, #352]	@ (8012e34 <_printf_i+0x234>)
 8012cd2:	230a      	movs	r3, #10
 8012cd4:	e011      	b.n	8012cfa <_printf_i+0xfa>
 8012cd6:	6821      	ldr	r1, [r4, #0]
 8012cd8:	6833      	ldr	r3, [r6, #0]
 8012cda:	0608      	lsls	r0, r1, #24
 8012cdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ce0:	d402      	bmi.n	8012ce8 <_printf_i+0xe8>
 8012ce2:	0649      	lsls	r1, r1, #25
 8012ce4:	bf48      	it	mi
 8012ce6:	b2ad      	uxthmi	r5, r5
 8012ce8:	2f6f      	cmp	r7, #111	@ 0x6f
 8012cea:	4852      	ldr	r0, [pc, #328]	@ (8012e34 <_printf_i+0x234>)
 8012cec:	6033      	str	r3, [r6, #0]
 8012cee:	bf14      	ite	ne
 8012cf0:	230a      	movne	r3, #10
 8012cf2:	2308      	moveq	r3, #8
 8012cf4:	2100      	movs	r1, #0
 8012cf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012cfa:	6866      	ldr	r6, [r4, #4]
 8012cfc:	60a6      	str	r6, [r4, #8]
 8012cfe:	2e00      	cmp	r6, #0
 8012d00:	db05      	blt.n	8012d0e <_printf_i+0x10e>
 8012d02:	6821      	ldr	r1, [r4, #0]
 8012d04:	432e      	orrs	r6, r5
 8012d06:	f021 0104 	bic.w	r1, r1, #4
 8012d0a:	6021      	str	r1, [r4, #0]
 8012d0c:	d04b      	beq.n	8012da6 <_printf_i+0x1a6>
 8012d0e:	4616      	mov	r6, r2
 8012d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d14:	fb03 5711 	mls	r7, r3, r1, r5
 8012d18:	5dc7      	ldrb	r7, [r0, r7]
 8012d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d1e:	462f      	mov	r7, r5
 8012d20:	42bb      	cmp	r3, r7
 8012d22:	460d      	mov	r5, r1
 8012d24:	d9f4      	bls.n	8012d10 <_printf_i+0x110>
 8012d26:	2b08      	cmp	r3, #8
 8012d28:	d10b      	bne.n	8012d42 <_printf_i+0x142>
 8012d2a:	6823      	ldr	r3, [r4, #0]
 8012d2c:	07df      	lsls	r7, r3, #31
 8012d2e:	d508      	bpl.n	8012d42 <_printf_i+0x142>
 8012d30:	6923      	ldr	r3, [r4, #16]
 8012d32:	6861      	ldr	r1, [r4, #4]
 8012d34:	4299      	cmp	r1, r3
 8012d36:	bfde      	ittt	le
 8012d38:	2330      	movle	r3, #48	@ 0x30
 8012d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d42:	1b92      	subs	r2, r2, r6
 8012d44:	6122      	str	r2, [r4, #16]
 8012d46:	f8cd a000 	str.w	sl, [sp]
 8012d4a:	464b      	mov	r3, r9
 8012d4c:	aa03      	add	r2, sp, #12
 8012d4e:	4621      	mov	r1, r4
 8012d50:	4640      	mov	r0, r8
 8012d52:	f7ff fee7 	bl	8012b24 <_printf_common>
 8012d56:	3001      	adds	r0, #1
 8012d58:	d14a      	bne.n	8012df0 <_printf_i+0x1f0>
 8012d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5e:	b004      	add	sp, #16
 8012d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d64:	6823      	ldr	r3, [r4, #0]
 8012d66:	f043 0320 	orr.w	r3, r3, #32
 8012d6a:	6023      	str	r3, [r4, #0]
 8012d6c:	4832      	ldr	r0, [pc, #200]	@ (8012e38 <_printf_i+0x238>)
 8012d6e:	2778      	movs	r7, #120	@ 0x78
 8012d70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012d74:	6823      	ldr	r3, [r4, #0]
 8012d76:	6831      	ldr	r1, [r6, #0]
 8012d78:	061f      	lsls	r7, r3, #24
 8012d7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012d7e:	d402      	bmi.n	8012d86 <_printf_i+0x186>
 8012d80:	065f      	lsls	r7, r3, #25
 8012d82:	bf48      	it	mi
 8012d84:	b2ad      	uxthmi	r5, r5
 8012d86:	6031      	str	r1, [r6, #0]
 8012d88:	07d9      	lsls	r1, r3, #31
 8012d8a:	bf44      	itt	mi
 8012d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8012d90:	6023      	strmi	r3, [r4, #0]
 8012d92:	b11d      	cbz	r5, 8012d9c <_printf_i+0x19c>
 8012d94:	2310      	movs	r3, #16
 8012d96:	e7ad      	b.n	8012cf4 <_printf_i+0xf4>
 8012d98:	4826      	ldr	r0, [pc, #152]	@ (8012e34 <_printf_i+0x234>)
 8012d9a:	e7e9      	b.n	8012d70 <_printf_i+0x170>
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	f023 0320 	bic.w	r3, r3, #32
 8012da2:	6023      	str	r3, [r4, #0]
 8012da4:	e7f6      	b.n	8012d94 <_printf_i+0x194>
 8012da6:	4616      	mov	r6, r2
 8012da8:	e7bd      	b.n	8012d26 <_printf_i+0x126>
 8012daa:	6833      	ldr	r3, [r6, #0]
 8012dac:	6825      	ldr	r5, [r4, #0]
 8012dae:	6961      	ldr	r1, [r4, #20]
 8012db0:	1d18      	adds	r0, r3, #4
 8012db2:	6030      	str	r0, [r6, #0]
 8012db4:	062e      	lsls	r6, r5, #24
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	d501      	bpl.n	8012dbe <_printf_i+0x1be>
 8012dba:	6019      	str	r1, [r3, #0]
 8012dbc:	e002      	b.n	8012dc4 <_printf_i+0x1c4>
 8012dbe:	0668      	lsls	r0, r5, #25
 8012dc0:	d5fb      	bpl.n	8012dba <_printf_i+0x1ba>
 8012dc2:	8019      	strh	r1, [r3, #0]
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	6123      	str	r3, [r4, #16]
 8012dc8:	4616      	mov	r6, r2
 8012dca:	e7bc      	b.n	8012d46 <_printf_i+0x146>
 8012dcc:	6833      	ldr	r3, [r6, #0]
 8012dce:	1d1a      	adds	r2, r3, #4
 8012dd0:	6032      	str	r2, [r6, #0]
 8012dd2:	681e      	ldr	r6, [r3, #0]
 8012dd4:	6862      	ldr	r2, [r4, #4]
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	4630      	mov	r0, r6
 8012dda:	f7ed f9f9 	bl	80001d0 <memchr>
 8012dde:	b108      	cbz	r0, 8012de4 <_printf_i+0x1e4>
 8012de0:	1b80      	subs	r0, r0, r6
 8012de2:	6060      	str	r0, [r4, #4]
 8012de4:	6863      	ldr	r3, [r4, #4]
 8012de6:	6123      	str	r3, [r4, #16]
 8012de8:	2300      	movs	r3, #0
 8012dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dee:	e7aa      	b.n	8012d46 <_printf_i+0x146>
 8012df0:	6923      	ldr	r3, [r4, #16]
 8012df2:	4632      	mov	r2, r6
 8012df4:	4649      	mov	r1, r9
 8012df6:	4640      	mov	r0, r8
 8012df8:	47d0      	blx	sl
 8012dfa:	3001      	adds	r0, #1
 8012dfc:	d0ad      	beq.n	8012d5a <_printf_i+0x15a>
 8012dfe:	6823      	ldr	r3, [r4, #0]
 8012e00:	079b      	lsls	r3, r3, #30
 8012e02:	d413      	bmi.n	8012e2c <_printf_i+0x22c>
 8012e04:	68e0      	ldr	r0, [r4, #12]
 8012e06:	9b03      	ldr	r3, [sp, #12]
 8012e08:	4298      	cmp	r0, r3
 8012e0a:	bfb8      	it	lt
 8012e0c:	4618      	movlt	r0, r3
 8012e0e:	e7a6      	b.n	8012d5e <_printf_i+0x15e>
 8012e10:	2301      	movs	r3, #1
 8012e12:	4632      	mov	r2, r6
 8012e14:	4649      	mov	r1, r9
 8012e16:	4640      	mov	r0, r8
 8012e18:	47d0      	blx	sl
 8012e1a:	3001      	adds	r0, #1
 8012e1c:	d09d      	beq.n	8012d5a <_printf_i+0x15a>
 8012e1e:	3501      	adds	r5, #1
 8012e20:	68e3      	ldr	r3, [r4, #12]
 8012e22:	9903      	ldr	r1, [sp, #12]
 8012e24:	1a5b      	subs	r3, r3, r1
 8012e26:	42ab      	cmp	r3, r5
 8012e28:	dcf2      	bgt.n	8012e10 <_printf_i+0x210>
 8012e2a:	e7eb      	b.n	8012e04 <_printf_i+0x204>
 8012e2c:	2500      	movs	r5, #0
 8012e2e:	f104 0619 	add.w	r6, r4, #25
 8012e32:	e7f5      	b.n	8012e20 <_printf_i+0x220>
 8012e34:	08016688 	.word	0x08016688
 8012e38:	08016699 	.word	0x08016699

08012e3c <std>:
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	b510      	push	{r4, lr}
 8012e40:	4604      	mov	r4, r0
 8012e42:	e9c0 3300 	strd	r3, r3, [r0]
 8012e46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e4a:	6083      	str	r3, [r0, #8]
 8012e4c:	8181      	strh	r1, [r0, #12]
 8012e4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012e50:	81c2      	strh	r2, [r0, #14]
 8012e52:	6183      	str	r3, [r0, #24]
 8012e54:	4619      	mov	r1, r3
 8012e56:	2208      	movs	r2, #8
 8012e58:	305c      	adds	r0, #92	@ 0x5c
 8012e5a:	f000 f930 	bl	80130be <memset>
 8012e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8012e94 <std+0x58>)
 8012e60:	6263      	str	r3, [r4, #36]	@ 0x24
 8012e62:	4b0d      	ldr	r3, [pc, #52]	@ (8012e98 <std+0x5c>)
 8012e64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012e66:	4b0d      	ldr	r3, [pc, #52]	@ (8012e9c <std+0x60>)
 8012e68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea0 <std+0x64>)
 8012e6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea4 <std+0x68>)
 8012e70:	6224      	str	r4, [r4, #32]
 8012e72:	429c      	cmp	r4, r3
 8012e74:	d006      	beq.n	8012e84 <std+0x48>
 8012e76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012e7a:	4294      	cmp	r4, r2
 8012e7c:	d002      	beq.n	8012e84 <std+0x48>
 8012e7e:	33d0      	adds	r3, #208	@ 0xd0
 8012e80:	429c      	cmp	r4, r3
 8012e82:	d105      	bne.n	8012e90 <std+0x54>
 8012e84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e8c:	f000 ba7c 	b.w	8013388 <__retarget_lock_init_recursive>
 8012e90:	bd10      	pop	{r4, pc}
 8012e92:	bf00      	nop
 8012e94:	08013005 	.word	0x08013005
 8012e98:	08013027 	.word	0x08013027
 8012e9c:	0801305f 	.word	0x0801305f
 8012ea0:	08013083 	.word	0x08013083
 8012ea4:	20011dec 	.word	0x20011dec

08012ea8 <stdio_exit_handler>:
 8012ea8:	4a02      	ldr	r2, [pc, #8]	@ (8012eb4 <stdio_exit_handler+0xc>)
 8012eaa:	4903      	ldr	r1, [pc, #12]	@ (8012eb8 <stdio_exit_handler+0x10>)
 8012eac:	4803      	ldr	r0, [pc, #12]	@ (8012ebc <stdio_exit_handler+0x14>)
 8012eae:	f000 b869 	b.w	8012f84 <_fwalk_sglue>
 8012eb2:	bf00      	nop
 8012eb4:	20000294 	.word	0x20000294
 8012eb8:	08015511 	.word	0x08015511
 8012ebc:	20000410 	.word	0x20000410

08012ec0 <cleanup_stdio>:
 8012ec0:	6841      	ldr	r1, [r0, #4]
 8012ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8012ef4 <cleanup_stdio+0x34>)
 8012ec4:	4299      	cmp	r1, r3
 8012ec6:	b510      	push	{r4, lr}
 8012ec8:	4604      	mov	r4, r0
 8012eca:	d001      	beq.n	8012ed0 <cleanup_stdio+0x10>
 8012ecc:	f002 fb20 	bl	8015510 <_fflush_r>
 8012ed0:	68a1      	ldr	r1, [r4, #8]
 8012ed2:	4b09      	ldr	r3, [pc, #36]	@ (8012ef8 <cleanup_stdio+0x38>)
 8012ed4:	4299      	cmp	r1, r3
 8012ed6:	d002      	beq.n	8012ede <cleanup_stdio+0x1e>
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f002 fb19 	bl	8015510 <_fflush_r>
 8012ede:	68e1      	ldr	r1, [r4, #12]
 8012ee0:	4b06      	ldr	r3, [pc, #24]	@ (8012efc <cleanup_stdio+0x3c>)
 8012ee2:	4299      	cmp	r1, r3
 8012ee4:	d004      	beq.n	8012ef0 <cleanup_stdio+0x30>
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eec:	f002 bb10 	b.w	8015510 <_fflush_r>
 8012ef0:	bd10      	pop	{r4, pc}
 8012ef2:	bf00      	nop
 8012ef4:	20011dec 	.word	0x20011dec
 8012ef8:	20011e54 	.word	0x20011e54
 8012efc:	20011ebc 	.word	0x20011ebc

08012f00 <global_stdio_init.part.0>:
 8012f00:	b510      	push	{r4, lr}
 8012f02:	4b0b      	ldr	r3, [pc, #44]	@ (8012f30 <global_stdio_init.part.0+0x30>)
 8012f04:	4c0b      	ldr	r4, [pc, #44]	@ (8012f34 <global_stdio_init.part.0+0x34>)
 8012f06:	4a0c      	ldr	r2, [pc, #48]	@ (8012f38 <global_stdio_init.part.0+0x38>)
 8012f08:	601a      	str	r2, [r3, #0]
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	2104      	movs	r1, #4
 8012f10:	f7ff ff94 	bl	8012e3c <std>
 8012f14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012f18:	2201      	movs	r2, #1
 8012f1a:	2109      	movs	r1, #9
 8012f1c:	f7ff ff8e 	bl	8012e3c <std>
 8012f20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012f24:	2202      	movs	r2, #2
 8012f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f2a:	2112      	movs	r1, #18
 8012f2c:	f7ff bf86 	b.w	8012e3c <std>
 8012f30:	20011f24 	.word	0x20011f24
 8012f34:	20011dec 	.word	0x20011dec
 8012f38:	08012ea9 	.word	0x08012ea9

08012f3c <__sfp_lock_acquire>:
 8012f3c:	4801      	ldr	r0, [pc, #4]	@ (8012f44 <__sfp_lock_acquire+0x8>)
 8012f3e:	f000 ba24 	b.w	801338a <__retarget_lock_acquire_recursive>
 8012f42:	bf00      	nop
 8012f44:	20011f2d 	.word	0x20011f2d

08012f48 <__sfp_lock_release>:
 8012f48:	4801      	ldr	r0, [pc, #4]	@ (8012f50 <__sfp_lock_release+0x8>)
 8012f4a:	f000 ba1f 	b.w	801338c <__retarget_lock_release_recursive>
 8012f4e:	bf00      	nop
 8012f50:	20011f2d 	.word	0x20011f2d

08012f54 <__sinit>:
 8012f54:	b510      	push	{r4, lr}
 8012f56:	4604      	mov	r4, r0
 8012f58:	f7ff fff0 	bl	8012f3c <__sfp_lock_acquire>
 8012f5c:	6a23      	ldr	r3, [r4, #32]
 8012f5e:	b11b      	cbz	r3, 8012f68 <__sinit+0x14>
 8012f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f64:	f7ff bff0 	b.w	8012f48 <__sfp_lock_release>
 8012f68:	4b04      	ldr	r3, [pc, #16]	@ (8012f7c <__sinit+0x28>)
 8012f6a:	6223      	str	r3, [r4, #32]
 8012f6c:	4b04      	ldr	r3, [pc, #16]	@ (8012f80 <__sinit+0x2c>)
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d1f5      	bne.n	8012f60 <__sinit+0xc>
 8012f74:	f7ff ffc4 	bl	8012f00 <global_stdio_init.part.0>
 8012f78:	e7f2      	b.n	8012f60 <__sinit+0xc>
 8012f7a:	bf00      	nop
 8012f7c:	08012ec1 	.word	0x08012ec1
 8012f80:	20011f24 	.word	0x20011f24

08012f84 <_fwalk_sglue>:
 8012f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f88:	4607      	mov	r7, r0
 8012f8a:	4688      	mov	r8, r1
 8012f8c:	4614      	mov	r4, r2
 8012f8e:	2600      	movs	r6, #0
 8012f90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f94:	f1b9 0901 	subs.w	r9, r9, #1
 8012f98:	d505      	bpl.n	8012fa6 <_fwalk_sglue+0x22>
 8012f9a:	6824      	ldr	r4, [r4, #0]
 8012f9c:	2c00      	cmp	r4, #0
 8012f9e:	d1f7      	bne.n	8012f90 <_fwalk_sglue+0xc>
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa6:	89ab      	ldrh	r3, [r5, #12]
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	d907      	bls.n	8012fbc <_fwalk_sglue+0x38>
 8012fac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	d003      	beq.n	8012fbc <_fwalk_sglue+0x38>
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	4638      	mov	r0, r7
 8012fb8:	47c0      	blx	r8
 8012fba:	4306      	orrs	r6, r0
 8012fbc:	3568      	adds	r5, #104	@ 0x68
 8012fbe:	e7e9      	b.n	8012f94 <_fwalk_sglue+0x10>

08012fc0 <siprintf>:
 8012fc0:	b40e      	push	{r1, r2, r3}
 8012fc2:	b510      	push	{r4, lr}
 8012fc4:	b09d      	sub	sp, #116	@ 0x74
 8012fc6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012fc8:	9002      	str	r0, [sp, #8]
 8012fca:	9006      	str	r0, [sp, #24]
 8012fcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012fd0:	480a      	ldr	r0, [pc, #40]	@ (8012ffc <siprintf+0x3c>)
 8012fd2:	9107      	str	r1, [sp, #28]
 8012fd4:	9104      	str	r1, [sp, #16]
 8012fd6:	490a      	ldr	r1, [pc, #40]	@ (8013000 <siprintf+0x40>)
 8012fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fdc:	9105      	str	r1, [sp, #20]
 8012fde:	2400      	movs	r4, #0
 8012fe0:	a902      	add	r1, sp, #8
 8012fe2:	6800      	ldr	r0, [r0, #0]
 8012fe4:	9301      	str	r3, [sp, #4]
 8012fe6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012fe8:	f002 f912 	bl	8015210 <_svfiprintf_r>
 8012fec:	9b02      	ldr	r3, [sp, #8]
 8012fee:	701c      	strb	r4, [r3, #0]
 8012ff0:	b01d      	add	sp, #116	@ 0x74
 8012ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ff6:	b003      	add	sp, #12
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	2000040c 	.word	0x2000040c
 8013000:	ffff0208 	.word	0xffff0208

08013004 <__sread>:
 8013004:	b510      	push	{r4, lr}
 8013006:	460c      	mov	r4, r1
 8013008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801300c:	f000 f95e 	bl	80132cc <_read_r>
 8013010:	2800      	cmp	r0, #0
 8013012:	bfab      	itete	ge
 8013014:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013016:	89a3      	ldrhlt	r3, [r4, #12]
 8013018:	181b      	addge	r3, r3, r0
 801301a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801301e:	bfac      	ite	ge
 8013020:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013022:	81a3      	strhlt	r3, [r4, #12]
 8013024:	bd10      	pop	{r4, pc}

08013026 <__swrite>:
 8013026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801302a:	461f      	mov	r7, r3
 801302c:	898b      	ldrh	r3, [r1, #12]
 801302e:	05db      	lsls	r3, r3, #23
 8013030:	4605      	mov	r5, r0
 8013032:	460c      	mov	r4, r1
 8013034:	4616      	mov	r6, r2
 8013036:	d505      	bpl.n	8013044 <__swrite+0x1e>
 8013038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801303c:	2302      	movs	r3, #2
 801303e:	2200      	movs	r2, #0
 8013040:	f000 f932 	bl	80132a8 <_lseek_r>
 8013044:	89a3      	ldrh	r3, [r4, #12]
 8013046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801304a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801304e:	81a3      	strh	r3, [r4, #12]
 8013050:	4632      	mov	r2, r6
 8013052:	463b      	mov	r3, r7
 8013054:	4628      	mov	r0, r5
 8013056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801305a:	f000 b959 	b.w	8013310 <_write_r>

0801305e <__sseek>:
 801305e:	b510      	push	{r4, lr}
 8013060:	460c      	mov	r4, r1
 8013062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013066:	f000 f91f 	bl	80132a8 <_lseek_r>
 801306a:	1c43      	adds	r3, r0, #1
 801306c:	89a3      	ldrh	r3, [r4, #12]
 801306e:	bf15      	itete	ne
 8013070:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013072:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013076:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801307a:	81a3      	strheq	r3, [r4, #12]
 801307c:	bf18      	it	ne
 801307e:	81a3      	strhne	r3, [r4, #12]
 8013080:	bd10      	pop	{r4, pc}

08013082 <__sclose>:
 8013082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013086:	f000 b8a1 	b.w	80131cc <_close_r>

0801308a <memmove>:
 801308a:	4288      	cmp	r0, r1
 801308c:	b510      	push	{r4, lr}
 801308e:	eb01 0402 	add.w	r4, r1, r2
 8013092:	d902      	bls.n	801309a <memmove+0x10>
 8013094:	4284      	cmp	r4, r0
 8013096:	4623      	mov	r3, r4
 8013098:	d807      	bhi.n	80130aa <memmove+0x20>
 801309a:	1e43      	subs	r3, r0, #1
 801309c:	42a1      	cmp	r1, r4
 801309e:	d008      	beq.n	80130b2 <memmove+0x28>
 80130a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130a8:	e7f8      	b.n	801309c <memmove+0x12>
 80130aa:	4402      	add	r2, r0
 80130ac:	4601      	mov	r1, r0
 80130ae:	428a      	cmp	r2, r1
 80130b0:	d100      	bne.n	80130b4 <memmove+0x2a>
 80130b2:	bd10      	pop	{r4, pc}
 80130b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130bc:	e7f7      	b.n	80130ae <memmove+0x24>

080130be <memset>:
 80130be:	4402      	add	r2, r0
 80130c0:	4603      	mov	r3, r0
 80130c2:	4293      	cmp	r3, r2
 80130c4:	d100      	bne.n	80130c8 <memset+0xa>
 80130c6:	4770      	bx	lr
 80130c8:	f803 1b01 	strb.w	r1, [r3], #1
 80130cc:	e7f9      	b.n	80130c2 <memset+0x4>

080130ce <strchr>:
 80130ce:	b2c9      	uxtb	r1, r1
 80130d0:	4603      	mov	r3, r0
 80130d2:	4618      	mov	r0, r3
 80130d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130d8:	b112      	cbz	r2, 80130e0 <strchr+0x12>
 80130da:	428a      	cmp	r2, r1
 80130dc:	d1f9      	bne.n	80130d2 <strchr+0x4>
 80130de:	4770      	bx	lr
 80130e0:	2900      	cmp	r1, #0
 80130e2:	bf18      	it	ne
 80130e4:	2000      	movne	r0, #0
 80130e6:	4770      	bx	lr

080130e8 <strncmp>:
 80130e8:	b510      	push	{r4, lr}
 80130ea:	b16a      	cbz	r2, 8013108 <strncmp+0x20>
 80130ec:	3901      	subs	r1, #1
 80130ee:	1884      	adds	r4, r0, r2
 80130f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d103      	bne.n	8013104 <strncmp+0x1c>
 80130fc:	42a0      	cmp	r0, r4
 80130fe:	d001      	beq.n	8013104 <strncmp+0x1c>
 8013100:	2a00      	cmp	r2, #0
 8013102:	d1f5      	bne.n	80130f0 <strncmp+0x8>
 8013104:	1ad0      	subs	r0, r2, r3
 8013106:	bd10      	pop	{r4, pc}
 8013108:	4610      	mov	r0, r2
 801310a:	e7fc      	b.n	8013106 <strncmp+0x1e>

0801310c <strtok>:
 801310c:	4b16      	ldr	r3, [pc, #88]	@ (8013168 <strtok+0x5c>)
 801310e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013112:	681f      	ldr	r7, [r3, #0]
 8013114:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013116:	4605      	mov	r5, r0
 8013118:	460e      	mov	r6, r1
 801311a:	b9ec      	cbnz	r4, 8013158 <strtok+0x4c>
 801311c:	2050      	movs	r0, #80	@ 0x50
 801311e:	f7fe fae7 	bl	80116f0 <malloc>
 8013122:	4602      	mov	r2, r0
 8013124:	6478      	str	r0, [r7, #68]	@ 0x44
 8013126:	b920      	cbnz	r0, 8013132 <strtok+0x26>
 8013128:	4b10      	ldr	r3, [pc, #64]	@ (801316c <strtok+0x60>)
 801312a:	4811      	ldr	r0, [pc, #68]	@ (8013170 <strtok+0x64>)
 801312c:	215b      	movs	r1, #91	@ 0x5b
 801312e:	f000 f94f 	bl	80133d0 <__assert_func>
 8013132:	e9c0 4400 	strd	r4, r4, [r0]
 8013136:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801313a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801313e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013142:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8013146:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801314a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801314e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013152:	6184      	str	r4, [r0, #24]
 8013154:	7704      	strb	r4, [r0, #28]
 8013156:	6244      	str	r4, [r0, #36]	@ 0x24
 8013158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801315a:	4631      	mov	r1, r6
 801315c:	4628      	mov	r0, r5
 801315e:	2301      	movs	r3, #1
 8013160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013164:	f000 b806 	b.w	8013174 <__strtok_r>
 8013168:	2000040c 	.word	0x2000040c
 801316c:	080166aa 	.word	0x080166aa
 8013170:	080166c1 	.word	0x080166c1

08013174 <__strtok_r>:
 8013174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	b908      	cbnz	r0, 801317e <__strtok_r+0xa>
 801317a:	6814      	ldr	r4, [r2, #0]
 801317c:	b144      	cbz	r4, 8013190 <__strtok_r+0x1c>
 801317e:	4620      	mov	r0, r4
 8013180:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013184:	460f      	mov	r7, r1
 8013186:	f817 6b01 	ldrb.w	r6, [r7], #1
 801318a:	b91e      	cbnz	r6, 8013194 <__strtok_r+0x20>
 801318c:	b965      	cbnz	r5, 80131a8 <__strtok_r+0x34>
 801318e:	6015      	str	r5, [r2, #0]
 8013190:	2000      	movs	r0, #0
 8013192:	e005      	b.n	80131a0 <__strtok_r+0x2c>
 8013194:	42b5      	cmp	r5, r6
 8013196:	d1f6      	bne.n	8013186 <__strtok_r+0x12>
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1f0      	bne.n	801317e <__strtok_r+0xa>
 801319c:	6014      	str	r4, [r2, #0]
 801319e:	7003      	strb	r3, [r0, #0]
 80131a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131a2:	461c      	mov	r4, r3
 80131a4:	e00c      	b.n	80131c0 <__strtok_r+0x4c>
 80131a6:	b91d      	cbnz	r5, 80131b0 <__strtok_r+0x3c>
 80131a8:	4627      	mov	r7, r4
 80131aa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80131ae:	460e      	mov	r6, r1
 80131b0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80131b4:	42ab      	cmp	r3, r5
 80131b6:	d1f6      	bne.n	80131a6 <__strtok_r+0x32>
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d0f2      	beq.n	80131a2 <__strtok_r+0x2e>
 80131bc:	2300      	movs	r3, #0
 80131be:	703b      	strb	r3, [r7, #0]
 80131c0:	6014      	str	r4, [r2, #0]
 80131c2:	e7ed      	b.n	80131a0 <__strtok_r+0x2c>

080131c4 <_localeconv_r>:
 80131c4:	4800      	ldr	r0, [pc, #0]	@ (80131c8 <_localeconv_r+0x4>)
 80131c6:	4770      	bx	lr
 80131c8:	20000390 	.word	0x20000390

080131cc <_close_r>:
 80131cc:	b538      	push	{r3, r4, r5, lr}
 80131ce:	4d06      	ldr	r5, [pc, #24]	@ (80131e8 <_close_r+0x1c>)
 80131d0:	2300      	movs	r3, #0
 80131d2:	4604      	mov	r4, r0
 80131d4:	4608      	mov	r0, r1
 80131d6:	602b      	str	r3, [r5, #0]
 80131d8:	f7f0 fbdc 	bl	8003994 <_close>
 80131dc:	1c43      	adds	r3, r0, #1
 80131de:	d102      	bne.n	80131e6 <_close_r+0x1a>
 80131e0:	682b      	ldr	r3, [r5, #0]
 80131e2:	b103      	cbz	r3, 80131e6 <_close_r+0x1a>
 80131e4:	6023      	str	r3, [r4, #0]
 80131e6:	bd38      	pop	{r3, r4, r5, pc}
 80131e8:	20011f28 	.word	0x20011f28

080131ec <_reclaim_reent>:
 80131ec:	4b2d      	ldr	r3, [pc, #180]	@ (80132a4 <_reclaim_reent+0xb8>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	4283      	cmp	r3, r0
 80131f2:	b570      	push	{r4, r5, r6, lr}
 80131f4:	4604      	mov	r4, r0
 80131f6:	d053      	beq.n	80132a0 <_reclaim_reent+0xb4>
 80131f8:	69c3      	ldr	r3, [r0, #28]
 80131fa:	b31b      	cbz	r3, 8013244 <_reclaim_reent+0x58>
 80131fc:	68db      	ldr	r3, [r3, #12]
 80131fe:	b163      	cbz	r3, 801321a <_reclaim_reent+0x2e>
 8013200:	2500      	movs	r5, #0
 8013202:	69e3      	ldr	r3, [r4, #28]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	5959      	ldr	r1, [r3, r5]
 8013208:	b9b1      	cbnz	r1, 8013238 <_reclaim_reent+0x4c>
 801320a:	3504      	adds	r5, #4
 801320c:	2d80      	cmp	r5, #128	@ 0x80
 801320e:	d1f8      	bne.n	8013202 <_reclaim_reent+0x16>
 8013210:	69e3      	ldr	r3, [r4, #28]
 8013212:	4620      	mov	r0, r4
 8013214:	68d9      	ldr	r1, [r3, #12]
 8013216:	f000 ff53 	bl	80140c0 <_free_r>
 801321a:	69e3      	ldr	r3, [r4, #28]
 801321c:	6819      	ldr	r1, [r3, #0]
 801321e:	b111      	cbz	r1, 8013226 <_reclaim_reent+0x3a>
 8013220:	4620      	mov	r0, r4
 8013222:	f000 ff4d 	bl	80140c0 <_free_r>
 8013226:	69e3      	ldr	r3, [r4, #28]
 8013228:	689d      	ldr	r5, [r3, #8]
 801322a:	b15d      	cbz	r5, 8013244 <_reclaim_reent+0x58>
 801322c:	4629      	mov	r1, r5
 801322e:	4620      	mov	r0, r4
 8013230:	682d      	ldr	r5, [r5, #0]
 8013232:	f000 ff45 	bl	80140c0 <_free_r>
 8013236:	e7f8      	b.n	801322a <_reclaim_reent+0x3e>
 8013238:	680e      	ldr	r6, [r1, #0]
 801323a:	4620      	mov	r0, r4
 801323c:	f000 ff40 	bl	80140c0 <_free_r>
 8013240:	4631      	mov	r1, r6
 8013242:	e7e1      	b.n	8013208 <_reclaim_reent+0x1c>
 8013244:	6961      	ldr	r1, [r4, #20]
 8013246:	b111      	cbz	r1, 801324e <_reclaim_reent+0x62>
 8013248:	4620      	mov	r0, r4
 801324a:	f000 ff39 	bl	80140c0 <_free_r>
 801324e:	69e1      	ldr	r1, [r4, #28]
 8013250:	b111      	cbz	r1, 8013258 <_reclaim_reent+0x6c>
 8013252:	4620      	mov	r0, r4
 8013254:	f000 ff34 	bl	80140c0 <_free_r>
 8013258:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801325a:	b111      	cbz	r1, 8013262 <_reclaim_reent+0x76>
 801325c:	4620      	mov	r0, r4
 801325e:	f000 ff2f 	bl	80140c0 <_free_r>
 8013262:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013264:	b111      	cbz	r1, 801326c <_reclaim_reent+0x80>
 8013266:	4620      	mov	r0, r4
 8013268:	f000 ff2a 	bl	80140c0 <_free_r>
 801326c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801326e:	b111      	cbz	r1, 8013276 <_reclaim_reent+0x8a>
 8013270:	4620      	mov	r0, r4
 8013272:	f000 ff25 	bl	80140c0 <_free_r>
 8013276:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013278:	b111      	cbz	r1, 8013280 <_reclaim_reent+0x94>
 801327a:	4620      	mov	r0, r4
 801327c:	f000 ff20 	bl	80140c0 <_free_r>
 8013280:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013282:	b111      	cbz	r1, 801328a <_reclaim_reent+0x9e>
 8013284:	4620      	mov	r0, r4
 8013286:	f000 ff1b 	bl	80140c0 <_free_r>
 801328a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801328c:	b111      	cbz	r1, 8013294 <_reclaim_reent+0xa8>
 801328e:	4620      	mov	r0, r4
 8013290:	f000 ff16 	bl	80140c0 <_free_r>
 8013294:	6a23      	ldr	r3, [r4, #32]
 8013296:	b11b      	cbz	r3, 80132a0 <_reclaim_reent+0xb4>
 8013298:	4620      	mov	r0, r4
 801329a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801329e:	4718      	bx	r3
 80132a0:	bd70      	pop	{r4, r5, r6, pc}
 80132a2:	bf00      	nop
 80132a4:	2000040c 	.word	0x2000040c

080132a8 <_lseek_r>:
 80132a8:	b538      	push	{r3, r4, r5, lr}
 80132aa:	4d07      	ldr	r5, [pc, #28]	@ (80132c8 <_lseek_r+0x20>)
 80132ac:	4604      	mov	r4, r0
 80132ae:	4608      	mov	r0, r1
 80132b0:	4611      	mov	r1, r2
 80132b2:	2200      	movs	r2, #0
 80132b4:	602a      	str	r2, [r5, #0]
 80132b6:	461a      	mov	r2, r3
 80132b8:	f7f0 fb93 	bl	80039e2 <_lseek>
 80132bc:	1c43      	adds	r3, r0, #1
 80132be:	d102      	bne.n	80132c6 <_lseek_r+0x1e>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	b103      	cbz	r3, 80132c6 <_lseek_r+0x1e>
 80132c4:	6023      	str	r3, [r4, #0]
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
 80132c8:	20011f28 	.word	0x20011f28

080132cc <_read_r>:
 80132cc:	b538      	push	{r3, r4, r5, lr}
 80132ce:	4d07      	ldr	r5, [pc, #28]	@ (80132ec <_read_r+0x20>)
 80132d0:	4604      	mov	r4, r0
 80132d2:	4608      	mov	r0, r1
 80132d4:	4611      	mov	r1, r2
 80132d6:	2200      	movs	r2, #0
 80132d8:	602a      	str	r2, [r5, #0]
 80132da:	461a      	mov	r2, r3
 80132dc:	f7f0 fb21 	bl	8003922 <_read>
 80132e0:	1c43      	adds	r3, r0, #1
 80132e2:	d102      	bne.n	80132ea <_read_r+0x1e>
 80132e4:	682b      	ldr	r3, [r5, #0]
 80132e6:	b103      	cbz	r3, 80132ea <_read_r+0x1e>
 80132e8:	6023      	str	r3, [r4, #0]
 80132ea:	bd38      	pop	{r3, r4, r5, pc}
 80132ec:	20011f28 	.word	0x20011f28

080132f0 <_sbrk_r>:
 80132f0:	b538      	push	{r3, r4, r5, lr}
 80132f2:	4d06      	ldr	r5, [pc, #24]	@ (801330c <_sbrk_r+0x1c>)
 80132f4:	2300      	movs	r3, #0
 80132f6:	4604      	mov	r4, r0
 80132f8:	4608      	mov	r0, r1
 80132fa:	602b      	str	r3, [r5, #0]
 80132fc:	f7f0 fb7e 	bl	80039fc <_sbrk>
 8013300:	1c43      	adds	r3, r0, #1
 8013302:	d102      	bne.n	801330a <_sbrk_r+0x1a>
 8013304:	682b      	ldr	r3, [r5, #0]
 8013306:	b103      	cbz	r3, 801330a <_sbrk_r+0x1a>
 8013308:	6023      	str	r3, [r4, #0]
 801330a:	bd38      	pop	{r3, r4, r5, pc}
 801330c:	20011f28 	.word	0x20011f28

08013310 <_write_r>:
 8013310:	b538      	push	{r3, r4, r5, lr}
 8013312:	4d07      	ldr	r5, [pc, #28]	@ (8013330 <_write_r+0x20>)
 8013314:	4604      	mov	r4, r0
 8013316:	4608      	mov	r0, r1
 8013318:	4611      	mov	r1, r2
 801331a:	2200      	movs	r2, #0
 801331c:	602a      	str	r2, [r5, #0]
 801331e:	461a      	mov	r2, r3
 8013320:	f7f0 fb1c 	bl	800395c <_write>
 8013324:	1c43      	adds	r3, r0, #1
 8013326:	d102      	bne.n	801332e <_write_r+0x1e>
 8013328:	682b      	ldr	r3, [r5, #0]
 801332a:	b103      	cbz	r3, 801332e <_write_r+0x1e>
 801332c:	6023      	str	r3, [r4, #0]
 801332e:	bd38      	pop	{r3, r4, r5, pc}
 8013330:	20011f28 	.word	0x20011f28

08013334 <__errno>:
 8013334:	4b01      	ldr	r3, [pc, #4]	@ (801333c <__errno+0x8>)
 8013336:	6818      	ldr	r0, [r3, #0]
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	2000040c 	.word	0x2000040c

08013340 <__libc_init_array>:
 8013340:	b570      	push	{r4, r5, r6, lr}
 8013342:	4d0d      	ldr	r5, [pc, #52]	@ (8013378 <__libc_init_array+0x38>)
 8013344:	4c0d      	ldr	r4, [pc, #52]	@ (801337c <__libc_init_array+0x3c>)
 8013346:	1b64      	subs	r4, r4, r5
 8013348:	10a4      	asrs	r4, r4, #2
 801334a:	2600      	movs	r6, #0
 801334c:	42a6      	cmp	r6, r4
 801334e:	d109      	bne.n	8013364 <__libc_init_array+0x24>
 8013350:	4d0b      	ldr	r5, [pc, #44]	@ (8013380 <__libc_init_array+0x40>)
 8013352:	4c0c      	ldr	r4, [pc, #48]	@ (8013384 <__libc_init_array+0x44>)
 8013354:	f002 fc04 	bl	8015b60 <_init>
 8013358:	1b64      	subs	r4, r4, r5
 801335a:	10a4      	asrs	r4, r4, #2
 801335c:	2600      	movs	r6, #0
 801335e:	42a6      	cmp	r6, r4
 8013360:	d105      	bne.n	801336e <__libc_init_array+0x2e>
 8013362:	bd70      	pop	{r4, r5, r6, pc}
 8013364:	f855 3b04 	ldr.w	r3, [r5], #4
 8013368:	4798      	blx	r3
 801336a:	3601      	adds	r6, #1
 801336c:	e7ee      	b.n	801334c <__libc_init_array+0xc>
 801336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013372:	4798      	blx	r3
 8013374:	3601      	adds	r6, #1
 8013376:	e7f2      	b.n	801335e <__libc_init_array+0x1e>
 8013378:	08016af8 	.word	0x08016af8
 801337c:	08016af8 	.word	0x08016af8
 8013380:	08016af8 	.word	0x08016af8
 8013384:	08016afc 	.word	0x08016afc

08013388 <__retarget_lock_init_recursive>:
 8013388:	4770      	bx	lr

0801338a <__retarget_lock_acquire_recursive>:
 801338a:	4770      	bx	lr

0801338c <__retarget_lock_release_recursive>:
 801338c:	4770      	bx	lr

0801338e <strcpy>:
 801338e:	4603      	mov	r3, r0
 8013390:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013394:	f803 2b01 	strb.w	r2, [r3], #1
 8013398:	2a00      	cmp	r2, #0
 801339a:	d1f9      	bne.n	8013390 <strcpy+0x2>
 801339c:	4770      	bx	lr

0801339e <memcpy>:
 801339e:	440a      	add	r2, r1
 80133a0:	4291      	cmp	r1, r2
 80133a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80133a6:	d100      	bne.n	80133aa <memcpy+0xc>
 80133a8:	4770      	bx	lr
 80133aa:	b510      	push	{r4, lr}
 80133ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133b4:	4291      	cmp	r1, r2
 80133b6:	d1f9      	bne.n	80133ac <memcpy+0xe>
 80133b8:	bd10      	pop	{r4, pc}
 80133ba:	0000      	movs	r0, r0
 80133bc:	0000      	movs	r0, r0
	...

080133c0 <nan>:
 80133c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80133c8 <nan+0x8>
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop
 80133c8:	00000000 	.word	0x00000000
 80133cc:	7ff80000 	.word	0x7ff80000

080133d0 <__assert_func>:
 80133d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80133d2:	4614      	mov	r4, r2
 80133d4:	461a      	mov	r2, r3
 80133d6:	4b09      	ldr	r3, [pc, #36]	@ (80133fc <__assert_func+0x2c>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4605      	mov	r5, r0
 80133dc:	68d8      	ldr	r0, [r3, #12]
 80133de:	b14c      	cbz	r4, 80133f4 <__assert_func+0x24>
 80133e0:	4b07      	ldr	r3, [pc, #28]	@ (8013400 <__assert_func+0x30>)
 80133e2:	9100      	str	r1, [sp, #0]
 80133e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133e8:	4906      	ldr	r1, [pc, #24]	@ (8013404 <__assert_func+0x34>)
 80133ea:	462b      	mov	r3, r5
 80133ec:	f002 f8b8 	bl	8015560 <fiprintf>
 80133f0:	f002 f8c8 	bl	8015584 <abort>
 80133f4:	4b04      	ldr	r3, [pc, #16]	@ (8013408 <__assert_func+0x38>)
 80133f6:	461c      	mov	r4, r3
 80133f8:	e7f3      	b.n	80133e2 <__assert_func+0x12>
 80133fa:	bf00      	nop
 80133fc:	2000040c 	.word	0x2000040c
 8013400:	08016723 	.word	0x08016723
 8013404:	08016730 	.word	0x08016730
 8013408:	0801675e 	.word	0x0801675e

0801340c <quorem>:
 801340c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013410:	6903      	ldr	r3, [r0, #16]
 8013412:	690c      	ldr	r4, [r1, #16]
 8013414:	42a3      	cmp	r3, r4
 8013416:	4607      	mov	r7, r0
 8013418:	db7e      	blt.n	8013518 <quorem+0x10c>
 801341a:	3c01      	subs	r4, #1
 801341c:	f101 0814 	add.w	r8, r1, #20
 8013420:	00a3      	lsls	r3, r4, #2
 8013422:	f100 0514 	add.w	r5, r0, #20
 8013426:	9300      	str	r3, [sp, #0]
 8013428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801342c:	9301      	str	r3, [sp, #4]
 801342e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013436:	3301      	adds	r3, #1
 8013438:	429a      	cmp	r2, r3
 801343a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801343e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013442:	d32e      	bcc.n	80134a2 <quorem+0x96>
 8013444:	f04f 0a00 	mov.w	sl, #0
 8013448:	46c4      	mov	ip, r8
 801344a:	46ae      	mov	lr, r5
 801344c:	46d3      	mov	fp, sl
 801344e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013452:	b298      	uxth	r0, r3
 8013454:	fb06 a000 	mla	r0, r6, r0, sl
 8013458:	0c02      	lsrs	r2, r0, #16
 801345a:	0c1b      	lsrs	r3, r3, #16
 801345c:	fb06 2303 	mla	r3, r6, r3, r2
 8013460:	f8de 2000 	ldr.w	r2, [lr]
 8013464:	b280      	uxth	r0, r0
 8013466:	b292      	uxth	r2, r2
 8013468:	1a12      	subs	r2, r2, r0
 801346a:	445a      	add	r2, fp
 801346c:	f8de 0000 	ldr.w	r0, [lr]
 8013470:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013474:	b29b      	uxth	r3, r3
 8013476:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801347a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801347e:	b292      	uxth	r2, r2
 8013480:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013484:	45e1      	cmp	r9, ip
 8013486:	f84e 2b04 	str.w	r2, [lr], #4
 801348a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801348e:	d2de      	bcs.n	801344e <quorem+0x42>
 8013490:	9b00      	ldr	r3, [sp, #0]
 8013492:	58eb      	ldr	r3, [r5, r3]
 8013494:	b92b      	cbnz	r3, 80134a2 <quorem+0x96>
 8013496:	9b01      	ldr	r3, [sp, #4]
 8013498:	3b04      	subs	r3, #4
 801349a:	429d      	cmp	r5, r3
 801349c:	461a      	mov	r2, r3
 801349e:	d32f      	bcc.n	8013500 <quorem+0xf4>
 80134a0:	613c      	str	r4, [r7, #16]
 80134a2:	4638      	mov	r0, r7
 80134a4:	f001 fc5e 	bl	8014d64 <__mcmp>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	db25      	blt.n	80134f8 <quorem+0xec>
 80134ac:	4629      	mov	r1, r5
 80134ae:	2000      	movs	r0, #0
 80134b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80134b4:	f8d1 c000 	ldr.w	ip, [r1]
 80134b8:	fa1f fe82 	uxth.w	lr, r2
 80134bc:	fa1f f38c 	uxth.w	r3, ip
 80134c0:	eba3 030e 	sub.w	r3, r3, lr
 80134c4:	4403      	add	r3, r0
 80134c6:	0c12      	lsrs	r2, r2, #16
 80134c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80134cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134d6:	45c1      	cmp	r9, r8
 80134d8:	f841 3b04 	str.w	r3, [r1], #4
 80134dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80134e0:	d2e6      	bcs.n	80134b0 <quorem+0xa4>
 80134e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80134e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80134ea:	b922      	cbnz	r2, 80134f6 <quorem+0xea>
 80134ec:	3b04      	subs	r3, #4
 80134ee:	429d      	cmp	r5, r3
 80134f0:	461a      	mov	r2, r3
 80134f2:	d30b      	bcc.n	801350c <quorem+0x100>
 80134f4:	613c      	str	r4, [r7, #16]
 80134f6:	3601      	adds	r6, #1
 80134f8:	4630      	mov	r0, r6
 80134fa:	b003      	add	sp, #12
 80134fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013500:	6812      	ldr	r2, [r2, #0]
 8013502:	3b04      	subs	r3, #4
 8013504:	2a00      	cmp	r2, #0
 8013506:	d1cb      	bne.n	80134a0 <quorem+0x94>
 8013508:	3c01      	subs	r4, #1
 801350a:	e7c6      	b.n	801349a <quorem+0x8e>
 801350c:	6812      	ldr	r2, [r2, #0]
 801350e:	3b04      	subs	r3, #4
 8013510:	2a00      	cmp	r2, #0
 8013512:	d1ef      	bne.n	80134f4 <quorem+0xe8>
 8013514:	3c01      	subs	r4, #1
 8013516:	e7ea      	b.n	80134ee <quorem+0xe2>
 8013518:	2000      	movs	r0, #0
 801351a:	e7ee      	b.n	80134fa <quorem+0xee>
 801351c:	0000      	movs	r0, r0
	...

08013520 <_dtoa_r>:
 8013520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013524:	69c7      	ldr	r7, [r0, #28]
 8013526:	b097      	sub	sp, #92	@ 0x5c
 8013528:	ed8d 0b04 	vstr	d0, [sp, #16]
 801352c:	ec55 4b10 	vmov	r4, r5, d0
 8013530:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013532:	9107      	str	r1, [sp, #28]
 8013534:	4681      	mov	r9, r0
 8013536:	920c      	str	r2, [sp, #48]	@ 0x30
 8013538:	9311      	str	r3, [sp, #68]	@ 0x44
 801353a:	b97f      	cbnz	r7, 801355c <_dtoa_r+0x3c>
 801353c:	2010      	movs	r0, #16
 801353e:	f7fe f8d7 	bl	80116f0 <malloc>
 8013542:	4602      	mov	r2, r0
 8013544:	f8c9 001c 	str.w	r0, [r9, #28]
 8013548:	b920      	cbnz	r0, 8013554 <_dtoa_r+0x34>
 801354a:	4ba9      	ldr	r3, [pc, #676]	@ (80137f0 <_dtoa_r+0x2d0>)
 801354c:	21ef      	movs	r1, #239	@ 0xef
 801354e:	48a9      	ldr	r0, [pc, #676]	@ (80137f4 <_dtoa_r+0x2d4>)
 8013550:	f7ff ff3e 	bl	80133d0 <__assert_func>
 8013554:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013558:	6007      	str	r7, [r0, #0]
 801355a:	60c7      	str	r7, [r0, #12]
 801355c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013560:	6819      	ldr	r1, [r3, #0]
 8013562:	b159      	cbz	r1, 801357c <_dtoa_r+0x5c>
 8013564:	685a      	ldr	r2, [r3, #4]
 8013566:	604a      	str	r2, [r1, #4]
 8013568:	2301      	movs	r3, #1
 801356a:	4093      	lsls	r3, r2
 801356c:	608b      	str	r3, [r1, #8]
 801356e:	4648      	mov	r0, r9
 8013570:	f001 f97c 	bl	801486c <_Bfree>
 8013574:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013578:	2200      	movs	r2, #0
 801357a:	601a      	str	r2, [r3, #0]
 801357c:	1e2b      	subs	r3, r5, #0
 801357e:	bfb9      	ittee	lt
 8013580:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013584:	9305      	strlt	r3, [sp, #20]
 8013586:	2300      	movge	r3, #0
 8013588:	6033      	strge	r3, [r6, #0]
 801358a:	9f05      	ldr	r7, [sp, #20]
 801358c:	4b9a      	ldr	r3, [pc, #616]	@ (80137f8 <_dtoa_r+0x2d8>)
 801358e:	bfbc      	itt	lt
 8013590:	2201      	movlt	r2, #1
 8013592:	6032      	strlt	r2, [r6, #0]
 8013594:	43bb      	bics	r3, r7
 8013596:	d112      	bne.n	80135be <_dtoa_r+0x9e>
 8013598:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801359a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801359e:	6013      	str	r3, [r2, #0]
 80135a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80135a4:	4323      	orrs	r3, r4
 80135a6:	f000 855a 	beq.w	801405e <_dtoa_r+0xb3e>
 80135aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80135ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801380c <_dtoa_r+0x2ec>
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f000 855c 	beq.w	801406e <_dtoa_r+0xb4e>
 80135b6:	f10a 0303 	add.w	r3, sl, #3
 80135ba:	f000 bd56 	b.w	801406a <_dtoa_r+0xb4a>
 80135be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80135c2:	2200      	movs	r2, #0
 80135c4:	ec51 0b17 	vmov	r0, r1, d7
 80135c8:	2300      	movs	r3, #0
 80135ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80135ce:	f7ed fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80135d2:	4680      	mov	r8, r0
 80135d4:	b158      	cbz	r0, 80135ee <_dtoa_r+0xce>
 80135d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80135d8:	2301      	movs	r3, #1
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80135de:	b113      	cbz	r3, 80135e6 <_dtoa_r+0xc6>
 80135e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80135e2:	4b86      	ldr	r3, [pc, #536]	@ (80137fc <_dtoa_r+0x2dc>)
 80135e4:	6013      	str	r3, [r2, #0]
 80135e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013810 <_dtoa_r+0x2f0>
 80135ea:	f000 bd40 	b.w	801406e <_dtoa_r+0xb4e>
 80135ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80135f2:	aa14      	add	r2, sp, #80	@ 0x50
 80135f4:	a915      	add	r1, sp, #84	@ 0x54
 80135f6:	4648      	mov	r0, r9
 80135f8:	f001 fcd4 	bl	8014fa4 <__d2b>
 80135fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013600:	9002      	str	r0, [sp, #8]
 8013602:	2e00      	cmp	r6, #0
 8013604:	d078      	beq.n	80136f8 <_dtoa_r+0x1d8>
 8013606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013608:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801360c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013614:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013618:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801361c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013620:	4619      	mov	r1, r3
 8013622:	2200      	movs	r2, #0
 8013624:	4b76      	ldr	r3, [pc, #472]	@ (8013800 <_dtoa_r+0x2e0>)
 8013626:	f7ec fe2f 	bl	8000288 <__aeabi_dsub>
 801362a:	a36b      	add	r3, pc, #428	@ (adr r3, 80137d8 <_dtoa_r+0x2b8>)
 801362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013630:	f7ec ffe2 	bl	80005f8 <__aeabi_dmul>
 8013634:	a36a      	add	r3, pc, #424	@ (adr r3, 80137e0 <_dtoa_r+0x2c0>)
 8013636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363a:	f7ec fe27 	bl	800028c <__adddf3>
 801363e:	4604      	mov	r4, r0
 8013640:	4630      	mov	r0, r6
 8013642:	460d      	mov	r5, r1
 8013644:	f7ec ff6e 	bl	8000524 <__aeabi_i2d>
 8013648:	a367      	add	r3, pc, #412	@ (adr r3, 80137e8 <_dtoa_r+0x2c8>)
 801364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364e:	f7ec ffd3 	bl	80005f8 <__aeabi_dmul>
 8013652:	4602      	mov	r2, r0
 8013654:	460b      	mov	r3, r1
 8013656:	4620      	mov	r0, r4
 8013658:	4629      	mov	r1, r5
 801365a:	f7ec fe17 	bl	800028c <__adddf3>
 801365e:	4604      	mov	r4, r0
 8013660:	460d      	mov	r5, r1
 8013662:	f7ed fa79 	bl	8000b58 <__aeabi_d2iz>
 8013666:	2200      	movs	r2, #0
 8013668:	4607      	mov	r7, r0
 801366a:	2300      	movs	r3, #0
 801366c:	4620      	mov	r0, r4
 801366e:	4629      	mov	r1, r5
 8013670:	f7ed fa34 	bl	8000adc <__aeabi_dcmplt>
 8013674:	b140      	cbz	r0, 8013688 <_dtoa_r+0x168>
 8013676:	4638      	mov	r0, r7
 8013678:	f7ec ff54 	bl	8000524 <__aeabi_i2d>
 801367c:	4622      	mov	r2, r4
 801367e:	462b      	mov	r3, r5
 8013680:	f7ed fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8013684:	b900      	cbnz	r0, 8013688 <_dtoa_r+0x168>
 8013686:	3f01      	subs	r7, #1
 8013688:	2f16      	cmp	r7, #22
 801368a:	d852      	bhi.n	8013732 <_dtoa_r+0x212>
 801368c:	4b5d      	ldr	r3, [pc, #372]	@ (8013804 <_dtoa_r+0x2e4>)
 801368e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801369a:	f7ed fa1f 	bl	8000adc <__aeabi_dcmplt>
 801369e:	2800      	cmp	r0, #0
 80136a0:	d049      	beq.n	8013736 <_dtoa_r+0x216>
 80136a2:	3f01      	subs	r7, #1
 80136a4:	2300      	movs	r3, #0
 80136a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80136a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80136aa:	1b9b      	subs	r3, r3, r6
 80136ac:	1e5a      	subs	r2, r3, #1
 80136ae:	bf45      	ittet	mi
 80136b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80136b4:	9300      	strmi	r3, [sp, #0]
 80136b6:	2300      	movpl	r3, #0
 80136b8:	2300      	movmi	r3, #0
 80136ba:	9206      	str	r2, [sp, #24]
 80136bc:	bf54      	ite	pl
 80136be:	9300      	strpl	r3, [sp, #0]
 80136c0:	9306      	strmi	r3, [sp, #24]
 80136c2:	2f00      	cmp	r7, #0
 80136c4:	db39      	blt.n	801373a <_dtoa_r+0x21a>
 80136c6:	9b06      	ldr	r3, [sp, #24]
 80136c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80136ca:	443b      	add	r3, r7
 80136cc:	9306      	str	r3, [sp, #24]
 80136ce:	2300      	movs	r3, #0
 80136d0:	9308      	str	r3, [sp, #32]
 80136d2:	9b07      	ldr	r3, [sp, #28]
 80136d4:	2b09      	cmp	r3, #9
 80136d6:	d863      	bhi.n	80137a0 <_dtoa_r+0x280>
 80136d8:	2b05      	cmp	r3, #5
 80136da:	bfc4      	itt	gt
 80136dc:	3b04      	subgt	r3, #4
 80136de:	9307      	strgt	r3, [sp, #28]
 80136e0:	9b07      	ldr	r3, [sp, #28]
 80136e2:	f1a3 0302 	sub.w	r3, r3, #2
 80136e6:	bfcc      	ite	gt
 80136e8:	2400      	movgt	r4, #0
 80136ea:	2401      	movle	r4, #1
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	d863      	bhi.n	80137b8 <_dtoa_r+0x298>
 80136f0:	e8df f003 	tbb	[pc, r3]
 80136f4:	2b375452 	.word	0x2b375452
 80136f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80136fc:	441e      	add	r6, r3
 80136fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013702:	2b20      	cmp	r3, #32
 8013704:	bfc1      	itttt	gt
 8013706:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801370a:	409f      	lslgt	r7, r3
 801370c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013710:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013714:	bfd6      	itet	le
 8013716:	f1c3 0320 	rsble	r3, r3, #32
 801371a:	ea47 0003 	orrgt.w	r0, r7, r3
 801371e:	fa04 f003 	lslle.w	r0, r4, r3
 8013722:	f7ec feef 	bl	8000504 <__aeabi_ui2d>
 8013726:	2201      	movs	r2, #1
 8013728:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801372c:	3e01      	subs	r6, #1
 801372e:	9212      	str	r2, [sp, #72]	@ 0x48
 8013730:	e776      	b.n	8013620 <_dtoa_r+0x100>
 8013732:	2301      	movs	r3, #1
 8013734:	e7b7      	b.n	80136a6 <_dtoa_r+0x186>
 8013736:	9010      	str	r0, [sp, #64]	@ 0x40
 8013738:	e7b6      	b.n	80136a8 <_dtoa_r+0x188>
 801373a:	9b00      	ldr	r3, [sp, #0]
 801373c:	1bdb      	subs	r3, r3, r7
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	427b      	negs	r3, r7
 8013742:	9308      	str	r3, [sp, #32]
 8013744:	2300      	movs	r3, #0
 8013746:	930d      	str	r3, [sp, #52]	@ 0x34
 8013748:	e7c3      	b.n	80136d2 <_dtoa_r+0x1b2>
 801374a:	2301      	movs	r3, #1
 801374c:	9309      	str	r3, [sp, #36]	@ 0x24
 801374e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013750:	eb07 0b03 	add.w	fp, r7, r3
 8013754:	f10b 0301 	add.w	r3, fp, #1
 8013758:	2b01      	cmp	r3, #1
 801375a:	9303      	str	r3, [sp, #12]
 801375c:	bfb8      	it	lt
 801375e:	2301      	movlt	r3, #1
 8013760:	e006      	b.n	8013770 <_dtoa_r+0x250>
 8013762:	2301      	movs	r3, #1
 8013764:	9309      	str	r3, [sp, #36]	@ 0x24
 8013766:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013768:	2b00      	cmp	r3, #0
 801376a:	dd28      	ble.n	80137be <_dtoa_r+0x29e>
 801376c:	469b      	mov	fp, r3
 801376e:	9303      	str	r3, [sp, #12]
 8013770:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013774:	2100      	movs	r1, #0
 8013776:	2204      	movs	r2, #4
 8013778:	f102 0514 	add.w	r5, r2, #20
 801377c:	429d      	cmp	r5, r3
 801377e:	d926      	bls.n	80137ce <_dtoa_r+0x2ae>
 8013780:	6041      	str	r1, [r0, #4]
 8013782:	4648      	mov	r0, r9
 8013784:	f001 f832 	bl	80147ec <_Balloc>
 8013788:	4682      	mov	sl, r0
 801378a:	2800      	cmp	r0, #0
 801378c:	d142      	bne.n	8013814 <_dtoa_r+0x2f4>
 801378e:	4b1e      	ldr	r3, [pc, #120]	@ (8013808 <_dtoa_r+0x2e8>)
 8013790:	4602      	mov	r2, r0
 8013792:	f240 11af 	movw	r1, #431	@ 0x1af
 8013796:	e6da      	b.n	801354e <_dtoa_r+0x2e>
 8013798:	2300      	movs	r3, #0
 801379a:	e7e3      	b.n	8013764 <_dtoa_r+0x244>
 801379c:	2300      	movs	r3, #0
 801379e:	e7d5      	b.n	801374c <_dtoa_r+0x22c>
 80137a0:	2401      	movs	r4, #1
 80137a2:	2300      	movs	r3, #0
 80137a4:	9307      	str	r3, [sp, #28]
 80137a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80137a8:	f04f 3bff 	mov.w	fp, #4294967295
 80137ac:	2200      	movs	r2, #0
 80137ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80137b2:	2312      	movs	r3, #18
 80137b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80137b6:	e7db      	b.n	8013770 <_dtoa_r+0x250>
 80137b8:	2301      	movs	r3, #1
 80137ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80137bc:	e7f4      	b.n	80137a8 <_dtoa_r+0x288>
 80137be:	f04f 0b01 	mov.w	fp, #1
 80137c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80137c6:	465b      	mov	r3, fp
 80137c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80137cc:	e7d0      	b.n	8013770 <_dtoa_r+0x250>
 80137ce:	3101      	adds	r1, #1
 80137d0:	0052      	lsls	r2, r2, #1
 80137d2:	e7d1      	b.n	8013778 <_dtoa_r+0x258>
 80137d4:	f3af 8000 	nop.w
 80137d8:	636f4361 	.word	0x636f4361
 80137dc:	3fd287a7 	.word	0x3fd287a7
 80137e0:	8b60c8b3 	.word	0x8b60c8b3
 80137e4:	3fc68a28 	.word	0x3fc68a28
 80137e8:	509f79fb 	.word	0x509f79fb
 80137ec:	3fd34413 	.word	0x3fd34413
 80137f0:	080166aa 	.word	0x080166aa
 80137f4:	0801676c 	.word	0x0801676c
 80137f8:	7ff00000 	.word	0x7ff00000
 80137fc:	08016687 	.word	0x08016687
 8013800:	3ff80000 	.word	0x3ff80000
 8013804:	08016a28 	.word	0x08016a28
 8013808:	080167c4 	.word	0x080167c4
 801380c:	08016768 	.word	0x08016768
 8013810:	08016686 	.word	0x08016686
 8013814:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013818:	6018      	str	r0, [r3, #0]
 801381a:	9b03      	ldr	r3, [sp, #12]
 801381c:	2b0e      	cmp	r3, #14
 801381e:	f200 80a1 	bhi.w	8013964 <_dtoa_r+0x444>
 8013822:	2c00      	cmp	r4, #0
 8013824:	f000 809e 	beq.w	8013964 <_dtoa_r+0x444>
 8013828:	2f00      	cmp	r7, #0
 801382a:	dd33      	ble.n	8013894 <_dtoa_r+0x374>
 801382c:	4b9c      	ldr	r3, [pc, #624]	@ (8013aa0 <_dtoa_r+0x580>)
 801382e:	f007 020f 	and.w	r2, r7, #15
 8013832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013836:	ed93 7b00 	vldr	d7, [r3]
 801383a:	05f8      	lsls	r0, r7, #23
 801383c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013840:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013844:	d516      	bpl.n	8013874 <_dtoa_r+0x354>
 8013846:	4b97      	ldr	r3, [pc, #604]	@ (8013aa4 <_dtoa_r+0x584>)
 8013848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801384c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013850:	f7ec fffc 	bl	800084c <__aeabi_ddiv>
 8013854:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013858:	f004 040f 	and.w	r4, r4, #15
 801385c:	2603      	movs	r6, #3
 801385e:	4d91      	ldr	r5, [pc, #580]	@ (8013aa4 <_dtoa_r+0x584>)
 8013860:	b954      	cbnz	r4, 8013878 <_dtoa_r+0x358>
 8013862:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801386a:	f7ec ffef 	bl	800084c <__aeabi_ddiv>
 801386e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013872:	e028      	b.n	80138c6 <_dtoa_r+0x3a6>
 8013874:	2602      	movs	r6, #2
 8013876:	e7f2      	b.n	801385e <_dtoa_r+0x33e>
 8013878:	07e1      	lsls	r1, r4, #31
 801387a:	d508      	bpl.n	801388e <_dtoa_r+0x36e>
 801387c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013880:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013884:	f7ec feb8 	bl	80005f8 <__aeabi_dmul>
 8013888:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801388c:	3601      	adds	r6, #1
 801388e:	1064      	asrs	r4, r4, #1
 8013890:	3508      	adds	r5, #8
 8013892:	e7e5      	b.n	8013860 <_dtoa_r+0x340>
 8013894:	f000 80af 	beq.w	80139f6 <_dtoa_r+0x4d6>
 8013898:	427c      	negs	r4, r7
 801389a:	4b81      	ldr	r3, [pc, #516]	@ (8013aa0 <_dtoa_r+0x580>)
 801389c:	4d81      	ldr	r5, [pc, #516]	@ (8013aa4 <_dtoa_r+0x584>)
 801389e:	f004 020f 	and.w	r2, r4, #15
 80138a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80138ae:	f7ec fea3 	bl	80005f8 <__aeabi_dmul>
 80138b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138b6:	1124      	asrs	r4, r4, #4
 80138b8:	2300      	movs	r3, #0
 80138ba:	2602      	movs	r6, #2
 80138bc:	2c00      	cmp	r4, #0
 80138be:	f040 808f 	bne.w	80139e0 <_dtoa_r+0x4c0>
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d1d3      	bne.n	801386e <_dtoa_r+0x34e>
 80138c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	f000 8094 	beq.w	80139fa <_dtoa_r+0x4da>
 80138d2:	4b75      	ldr	r3, [pc, #468]	@ (8013aa8 <_dtoa_r+0x588>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	4620      	mov	r0, r4
 80138d8:	4629      	mov	r1, r5
 80138da:	f7ed f8ff 	bl	8000adc <__aeabi_dcmplt>
 80138de:	2800      	cmp	r0, #0
 80138e0:	f000 808b 	beq.w	80139fa <_dtoa_r+0x4da>
 80138e4:	9b03      	ldr	r3, [sp, #12]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f000 8087 	beq.w	80139fa <_dtoa_r+0x4da>
 80138ec:	f1bb 0f00 	cmp.w	fp, #0
 80138f0:	dd34      	ble.n	801395c <_dtoa_r+0x43c>
 80138f2:	4620      	mov	r0, r4
 80138f4:	4b6d      	ldr	r3, [pc, #436]	@ (8013aac <_dtoa_r+0x58c>)
 80138f6:	2200      	movs	r2, #0
 80138f8:	4629      	mov	r1, r5
 80138fa:	f7ec fe7d 	bl	80005f8 <__aeabi_dmul>
 80138fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013902:	f107 38ff 	add.w	r8, r7, #4294967295
 8013906:	3601      	adds	r6, #1
 8013908:	465c      	mov	r4, fp
 801390a:	4630      	mov	r0, r6
 801390c:	f7ec fe0a 	bl	8000524 <__aeabi_i2d>
 8013910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013914:	f7ec fe70 	bl	80005f8 <__aeabi_dmul>
 8013918:	4b65      	ldr	r3, [pc, #404]	@ (8013ab0 <_dtoa_r+0x590>)
 801391a:	2200      	movs	r2, #0
 801391c:	f7ec fcb6 	bl	800028c <__adddf3>
 8013920:	4605      	mov	r5, r0
 8013922:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013926:	2c00      	cmp	r4, #0
 8013928:	d16a      	bne.n	8013a00 <_dtoa_r+0x4e0>
 801392a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801392e:	4b61      	ldr	r3, [pc, #388]	@ (8013ab4 <_dtoa_r+0x594>)
 8013930:	2200      	movs	r2, #0
 8013932:	f7ec fca9 	bl	8000288 <__aeabi_dsub>
 8013936:	4602      	mov	r2, r0
 8013938:	460b      	mov	r3, r1
 801393a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801393e:	462a      	mov	r2, r5
 8013940:	4633      	mov	r3, r6
 8013942:	f7ed f8e9 	bl	8000b18 <__aeabi_dcmpgt>
 8013946:	2800      	cmp	r0, #0
 8013948:	f040 8298 	bne.w	8013e7c <_dtoa_r+0x95c>
 801394c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013950:	462a      	mov	r2, r5
 8013952:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013956:	f7ed f8c1 	bl	8000adc <__aeabi_dcmplt>
 801395a:	bb38      	cbnz	r0, 80139ac <_dtoa_r+0x48c>
 801395c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8013960:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013964:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013966:	2b00      	cmp	r3, #0
 8013968:	f2c0 8157 	blt.w	8013c1a <_dtoa_r+0x6fa>
 801396c:	2f0e      	cmp	r7, #14
 801396e:	f300 8154 	bgt.w	8013c1a <_dtoa_r+0x6fa>
 8013972:	4b4b      	ldr	r3, [pc, #300]	@ (8013aa0 <_dtoa_r+0x580>)
 8013974:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013978:	ed93 7b00 	vldr	d7, [r3]
 801397c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801397e:	2b00      	cmp	r3, #0
 8013980:	ed8d 7b00 	vstr	d7, [sp]
 8013984:	f280 80e5 	bge.w	8013b52 <_dtoa_r+0x632>
 8013988:	9b03      	ldr	r3, [sp, #12]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f300 80e1 	bgt.w	8013b52 <_dtoa_r+0x632>
 8013990:	d10c      	bne.n	80139ac <_dtoa_r+0x48c>
 8013992:	4b48      	ldr	r3, [pc, #288]	@ (8013ab4 <_dtoa_r+0x594>)
 8013994:	2200      	movs	r2, #0
 8013996:	ec51 0b17 	vmov	r0, r1, d7
 801399a:	f7ec fe2d 	bl	80005f8 <__aeabi_dmul>
 801399e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139a2:	f7ed f8af 	bl	8000b04 <__aeabi_dcmpge>
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f000 8266 	beq.w	8013e78 <_dtoa_r+0x958>
 80139ac:	2400      	movs	r4, #0
 80139ae:	4625      	mov	r5, r4
 80139b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139b2:	4656      	mov	r6, sl
 80139b4:	ea6f 0803 	mvn.w	r8, r3
 80139b8:	2700      	movs	r7, #0
 80139ba:	4621      	mov	r1, r4
 80139bc:	4648      	mov	r0, r9
 80139be:	f000 ff55 	bl	801486c <_Bfree>
 80139c2:	2d00      	cmp	r5, #0
 80139c4:	f000 80bd 	beq.w	8013b42 <_dtoa_r+0x622>
 80139c8:	b12f      	cbz	r7, 80139d6 <_dtoa_r+0x4b6>
 80139ca:	42af      	cmp	r7, r5
 80139cc:	d003      	beq.n	80139d6 <_dtoa_r+0x4b6>
 80139ce:	4639      	mov	r1, r7
 80139d0:	4648      	mov	r0, r9
 80139d2:	f000 ff4b 	bl	801486c <_Bfree>
 80139d6:	4629      	mov	r1, r5
 80139d8:	4648      	mov	r0, r9
 80139da:	f000 ff47 	bl	801486c <_Bfree>
 80139de:	e0b0      	b.n	8013b42 <_dtoa_r+0x622>
 80139e0:	07e2      	lsls	r2, r4, #31
 80139e2:	d505      	bpl.n	80139f0 <_dtoa_r+0x4d0>
 80139e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80139e8:	f7ec fe06 	bl	80005f8 <__aeabi_dmul>
 80139ec:	3601      	adds	r6, #1
 80139ee:	2301      	movs	r3, #1
 80139f0:	1064      	asrs	r4, r4, #1
 80139f2:	3508      	adds	r5, #8
 80139f4:	e762      	b.n	80138bc <_dtoa_r+0x39c>
 80139f6:	2602      	movs	r6, #2
 80139f8:	e765      	b.n	80138c6 <_dtoa_r+0x3a6>
 80139fa:	9c03      	ldr	r4, [sp, #12]
 80139fc:	46b8      	mov	r8, r7
 80139fe:	e784      	b.n	801390a <_dtoa_r+0x3ea>
 8013a00:	4b27      	ldr	r3, [pc, #156]	@ (8013aa0 <_dtoa_r+0x580>)
 8013a02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013a0c:	4454      	add	r4, sl
 8013a0e:	2900      	cmp	r1, #0
 8013a10:	d054      	beq.n	8013abc <_dtoa_r+0x59c>
 8013a12:	4929      	ldr	r1, [pc, #164]	@ (8013ab8 <_dtoa_r+0x598>)
 8013a14:	2000      	movs	r0, #0
 8013a16:	f7ec ff19 	bl	800084c <__aeabi_ddiv>
 8013a1a:	4633      	mov	r3, r6
 8013a1c:	462a      	mov	r2, r5
 8013a1e:	f7ec fc33 	bl	8000288 <__aeabi_dsub>
 8013a22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a26:	4656      	mov	r6, sl
 8013a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a2c:	f7ed f894 	bl	8000b58 <__aeabi_d2iz>
 8013a30:	4605      	mov	r5, r0
 8013a32:	f7ec fd77 	bl	8000524 <__aeabi_i2d>
 8013a36:	4602      	mov	r2, r0
 8013a38:	460b      	mov	r3, r1
 8013a3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a3e:	f7ec fc23 	bl	8000288 <__aeabi_dsub>
 8013a42:	3530      	adds	r5, #48	@ 0x30
 8013a44:	4602      	mov	r2, r0
 8013a46:	460b      	mov	r3, r1
 8013a48:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a4c:	f806 5b01 	strb.w	r5, [r6], #1
 8013a50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013a54:	f7ed f842 	bl	8000adc <__aeabi_dcmplt>
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	d172      	bne.n	8013b42 <_dtoa_r+0x622>
 8013a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a60:	4911      	ldr	r1, [pc, #68]	@ (8013aa8 <_dtoa_r+0x588>)
 8013a62:	2000      	movs	r0, #0
 8013a64:	f7ec fc10 	bl	8000288 <__aeabi_dsub>
 8013a68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013a6c:	f7ed f836 	bl	8000adc <__aeabi_dcmplt>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	f040 80b4 	bne.w	8013bde <_dtoa_r+0x6be>
 8013a76:	42a6      	cmp	r6, r4
 8013a78:	f43f af70 	beq.w	801395c <_dtoa_r+0x43c>
 8013a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013a80:	4b0a      	ldr	r3, [pc, #40]	@ (8013aac <_dtoa_r+0x58c>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	f7ec fdb8 	bl	80005f8 <__aeabi_dmul>
 8013a88:	4b08      	ldr	r3, [pc, #32]	@ (8013aac <_dtoa_r+0x58c>)
 8013a8a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a8e:	2200      	movs	r2, #0
 8013a90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a94:	f7ec fdb0 	bl	80005f8 <__aeabi_dmul>
 8013a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a9c:	e7c4      	b.n	8013a28 <_dtoa_r+0x508>
 8013a9e:	bf00      	nop
 8013aa0:	08016a28 	.word	0x08016a28
 8013aa4:	08016a00 	.word	0x08016a00
 8013aa8:	3ff00000 	.word	0x3ff00000
 8013aac:	40240000 	.word	0x40240000
 8013ab0:	401c0000 	.word	0x401c0000
 8013ab4:	40140000 	.word	0x40140000
 8013ab8:	3fe00000 	.word	0x3fe00000
 8013abc:	4631      	mov	r1, r6
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f7ec fd9a 	bl	80005f8 <__aeabi_dmul>
 8013ac4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013ac8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013aca:	4656      	mov	r6, sl
 8013acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ad0:	f7ed f842 	bl	8000b58 <__aeabi_d2iz>
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	f7ec fd25 	bl	8000524 <__aeabi_i2d>
 8013ada:	4602      	mov	r2, r0
 8013adc:	460b      	mov	r3, r1
 8013ade:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ae2:	f7ec fbd1 	bl	8000288 <__aeabi_dsub>
 8013ae6:	3530      	adds	r5, #48	@ 0x30
 8013ae8:	f806 5b01 	strb.w	r5, [r6], #1
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	42a6      	cmp	r6, r4
 8013af2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013af6:	f04f 0200 	mov.w	r2, #0
 8013afa:	d124      	bne.n	8013b46 <_dtoa_r+0x626>
 8013afc:	4baf      	ldr	r3, [pc, #700]	@ (8013dbc <_dtoa_r+0x89c>)
 8013afe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b02:	f7ec fbc3 	bl	800028c <__adddf3>
 8013b06:	4602      	mov	r2, r0
 8013b08:	460b      	mov	r3, r1
 8013b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b0e:	f7ed f803 	bl	8000b18 <__aeabi_dcmpgt>
 8013b12:	2800      	cmp	r0, #0
 8013b14:	d163      	bne.n	8013bde <_dtoa_r+0x6be>
 8013b16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013b1a:	49a8      	ldr	r1, [pc, #672]	@ (8013dbc <_dtoa_r+0x89c>)
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	f7ec fbb3 	bl	8000288 <__aeabi_dsub>
 8013b22:	4602      	mov	r2, r0
 8013b24:	460b      	mov	r3, r1
 8013b26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b2a:	f7ec ffd7 	bl	8000adc <__aeabi_dcmplt>
 8013b2e:	2800      	cmp	r0, #0
 8013b30:	f43f af14 	beq.w	801395c <_dtoa_r+0x43c>
 8013b34:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013b36:	1e73      	subs	r3, r6, #1
 8013b38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b3a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013b3e:	2b30      	cmp	r3, #48	@ 0x30
 8013b40:	d0f8      	beq.n	8013b34 <_dtoa_r+0x614>
 8013b42:	4647      	mov	r7, r8
 8013b44:	e03b      	b.n	8013bbe <_dtoa_r+0x69e>
 8013b46:	4b9e      	ldr	r3, [pc, #632]	@ (8013dc0 <_dtoa_r+0x8a0>)
 8013b48:	f7ec fd56 	bl	80005f8 <__aeabi_dmul>
 8013b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b50:	e7bc      	b.n	8013acc <_dtoa_r+0x5ac>
 8013b52:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013b56:	4656      	mov	r6, sl
 8013b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	4629      	mov	r1, r5
 8013b60:	f7ec fe74 	bl	800084c <__aeabi_ddiv>
 8013b64:	f7ec fff8 	bl	8000b58 <__aeabi_d2iz>
 8013b68:	4680      	mov	r8, r0
 8013b6a:	f7ec fcdb 	bl	8000524 <__aeabi_i2d>
 8013b6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b72:	f7ec fd41 	bl	80005f8 <__aeabi_dmul>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	4620      	mov	r0, r4
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013b82:	f7ec fb81 	bl	8000288 <__aeabi_dsub>
 8013b86:	f806 4b01 	strb.w	r4, [r6], #1
 8013b8a:	9d03      	ldr	r5, [sp, #12]
 8013b8c:	eba6 040a 	sub.w	r4, r6, sl
 8013b90:	42a5      	cmp	r5, r4
 8013b92:	4602      	mov	r2, r0
 8013b94:	460b      	mov	r3, r1
 8013b96:	d133      	bne.n	8013c00 <_dtoa_r+0x6e0>
 8013b98:	f7ec fb78 	bl	800028c <__adddf3>
 8013b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	460d      	mov	r5, r1
 8013ba4:	f7ec ffb8 	bl	8000b18 <__aeabi_dcmpgt>
 8013ba8:	b9c0      	cbnz	r0, 8013bdc <_dtoa_r+0x6bc>
 8013baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bae:	4620      	mov	r0, r4
 8013bb0:	4629      	mov	r1, r5
 8013bb2:	f7ec ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bb6:	b110      	cbz	r0, 8013bbe <_dtoa_r+0x69e>
 8013bb8:	f018 0f01 	tst.w	r8, #1
 8013bbc:	d10e      	bne.n	8013bdc <_dtoa_r+0x6bc>
 8013bbe:	9902      	ldr	r1, [sp, #8]
 8013bc0:	4648      	mov	r0, r9
 8013bc2:	f000 fe53 	bl	801486c <_Bfree>
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	7033      	strb	r3, [r6, #0]
 8013bca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013bcc:	3701      	adds	r7, #1
 8013bce:	601f      	str	r7, [r3, #0]
 8013bd0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	f000 824b 	beq.w	801406e <_dtoa_r+0xb4e>
 8013bd8:	601e      	str	r6, [r3, #0]
 8013bda:	e248      	b.n	801406e <_dtoa_r+0xb4e>
 8013bdc:	46b8      	mov	r8, r7
 8013bde:	4633      	mov	r3, r6
 8013be0:	461e      	mov	r6, r3
 8013be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013be6:	2a39      	cmp	r2, #57	@ 0x39
 8013be8:	d106      	bne.n	8013bf8 <_dtoa_r+0x6d8>
 8013bea:	459a      	cmp	sl, r3
 8013bec:	d1f8      	bne.n	8013be0 <_dtoa_r+0x6c0>
 8013bee:	2230      	movs	r2, #48	@ 0x30
 8013bf0:	f108 0801 	add.w	r8, r8, #1
 8013bf4:	f88a 2000 	strb.w	r2, [sl]
 8013bf8:	781a      	ldrb	r2, [r3, #0]
 8013bfa:	3201      	adds	r2, #1
 8013bfc:	701a      	strb	r2, [r3, #0]
 8013bfe:	e7a0      	b.n	8013b42 <_dtoa_r+0x622>
 8013c00:	4b6f      	ldr	r3, [pc, #444]	@ (8013dc0 <_dtoa_r+0x8a0>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	f7ec fcf8 	bl	80005f8 <__aeabi_dmul>
 8013c08:	2200      	movs	r2, #0
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	4604      	mov	r4, r0
 8013c0e:	460d      	mov	r5, r1
 8013c10:	f7ec ff5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d09f      	beq.n	8013b58 <_dtoa_r+0x638>
 8013c18:	e7d1      	b.n	8013bbe <_dtoa_r+0x69e>
 8013c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c1c:	2a00      	cmp	r2, #0
 8013c1e:	f000 80ea 	beq.w	8013df6 <_dtoa_r+0x8d6>
 8013c22:	9a07      	ldr	r2, [sp, #28]
 8013c24:	2a01      	cmp	r2, #1
 8013c26:	f300 80cd 	bgt.w	8013dc4 <_dtoa_r+0x8a4>
 8013c2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c2c:	2a00      	cmp	r2, #0
 8013c2e:	f000 80c1 	beq.w	8013db4 <_dtoa_r+0x894>
 8013c32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013c36:	9c08      	ldr	r4, [sp, #32]
 8013c38:	9e00      	ldr	r6, [sp, #0]
 8013c3a:	9a00      	ldr	r2, [sp, #0]
 8013c3c:	441a      	add	r2, r3
 8013c3e:	9200      	str	r2, [sp, #0]
 8013c40:	9a06      	ldr	r2, [sp, #24]
 8013c42:	2101      	movs	r1, #1
 8013c44:	441a      	add	r2, r3
 8013c46:	4648      	mov	r0, r9
 8013c48:	9206      	str	r2, [sp, #24]
 8013c4a:	f000 ff0d 	bl	8014a68 <__i2b>
 8013c4e:	4605      	mov	r5, r0
 8013c50:	b166      	cbz	r6, 8013c6c <_dtoa_r+0x74c>
 8013c52:	9b06      	ldr	r3, [sp, #24]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	dd09      	ble.n	8013c6c <_dtoa_r+0x74c>
 8013c58:	42b3      	cmp	r3, r6
 8013c5a:	9a00      	ldr	r2, [sp, #0]
 8013c5c:	bfa8      	it	ge
 8013c5e:	4633      	movge	r3, r6
 8013c60:	1ad2      	subs	r2, r2, r3
 8013c62:	9200      	str	r2, [sp, #0]
 8013c64:	9a06      	ldr	r2, [sp, #24]
 8013c66:	1af6      	subs	r6, r6, r3
 8013c68:	1ad3      	subs	r3, r2, r3
 8013c6a:	9306      	str	r3, [sp, #24]
 8013c6c:	9b08      	ldr	r3, [sp, #32]
 8013c6e:	b30b      	cbz	r3, 8013cb4 <_dtoa_r+0x794>
 8013c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f000 80c6 	beq.w	8013e04 <_dtoa_r+0x8e4>
 8013c78:	2c00      	cmp	r4, #0
 8013c7a:	f000 80c0 	beq.w	8013dfe <_dtoa_r+0x8de>
 8013c7e:	4629      	mov	r1, r5
 8013c80:	4622      	mov	r2, r4
 8013c82:	4648      	mov	r0, r9
 8013c84:	f000 ffa8 	bl	8014bd8 <__pow5mult>
 8013c88:	9a02      	ldr	r2, [sp, #8]
 8013c8a:	4601      	mov	r1, r0
 8013c8c:	4605      	mov	r5, r0
 8013c8e:	4648      	mov	r0, r9
 8013c90:	f000 ff00 	bl	8014a94 <__multiply>
 8013c94:	9902      	ldr	r1, [sp, #8]
 8013c96:	4680      	mov	r8, r0
 8013c98:	4648      	mov	r0, r9
 8013c9a:	f000 fde7 	bl	801486c <_Bfree>
 8013c9e:	9b08      	ldr	r3, [sp, #32]
 8013ca0:	1b1b      	subs	r3, r3, r4
 8013ca2:	9308      	str	r3, [sp, #32]
 8013ca4:	f000 80b1 	beq.w	8013e0a <_dtoa_r+0x8ea>
 8013ca8:	9a08      	ldr	r2, [sp, #32]
 8013caa:	4641      	mov	r1, r8
 8013cac:	4648      	mov	r0, r9
 8013cae:	f000 ff93 	bl	8014bd8 <__pow5mult>
 8013cb2:	9002      	str	r0, [sp, #8]
 8013cb4:	2101      	movs	r1, #1
 8013cb6:	4648      	mov	r0, r9
 8013cb8:	f000 fed6 	bl	8014a68 <__i2b>
 8013cbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f000 81d8 	beq.w	8014076 <_dtoa_r+0xb56>
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	4601      	mov	r1, r0
 8013cca:	4648      	mov	r0, r9
 8013ccc:	f000 ff84 	bl	8014bd8 <__pow5mult>
 8013cd0:	9b07      	ldr	r3, [sp, #28]
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	f300 809f 	bgt.w	8013e18 <_dtoa_r+0x8f8>
 8013cda:	9b04      	ldr	r3, [sp, #16]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	f040 8097 	bne.w	8013e10 <_dtoa_r+0x8f0>
 8013ce2:	9b05      	ldr	r3, [sp, #20]
 8013ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	f040 8093 	bne.w	8013e14 <_dtoa_r+0x8f4>
 8013cee:	9b05      	ldr	r3, [sp, #20]
 8013cf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013cf4:	0d1b      	lsrs	r3, r3, #20
 8013cf6:	051b      	lsls	r3, r3, #20
 8013cf8:	b133      	cbz	r3, 8013d08 <_dtoa_r+0x7e8>
 8013cfa:	9b00      	ldr	r3, [sp, #0]
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	9300      	str	r3, [sp, #0]
 8013d00:	9b06      	ldr	r3, [sp, #24]
 8013d02:	3301      	adds	r3, #1
 8013d04:	9306      	str	r3, [sp, #24]
 8013d06:	2301      	movs	r3, #1
 8013d08:	9308      	str	r3, [sp, #32]
 8013d0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f000 81b8 	beq.w	8014082 <_dtoa_r+0xb62>
 8013d12:	6923      	ldr	r3, [r4, #16]
 8013d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013d18:	6918      	ldr	r0, [r3, #16]
 8013d1a:	f000 fe59 	bl	80149d0 <__hi0bits>
 8013d1e:	f1c0 0020 	rsb	r0, r0, #32
 8013d22:	9b06      	ldr	r3, [sp, #24]
 8013d24:	4418      	add	r0, r3
 8013d26:	f010 001f 	ands.w	r0, r0, #31
 8013d2a:	f000 8082 	beq.w	8013e32 <_dtoa_r+0x912>
 8013d2e:	f1c0 0320 	rsb	r3, r0, #32
 8013d32:	2b04      	cmp	r3, #4
 8013d34:	dd73      	ble.n	8013e1e <_dtoa_r+0x8fe>
 8013d36:	9b00      	ldr	r3, [sp, #0]
 8013d38:	f1c0 001c 	rsb	r0, r0, #28
 8013d3c:	4403      	add	r3, r0
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	9b06      	ldr	r3, [sp, #24]
 8013d42:	4403      	add	r3, r0
 8013d44:	4406      	add	r6, r0
 8013d46:	9306      	str	r3, [sp, #24]
 8013d48:	9b00      	ldr	r3, [sp, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	dd05      	ble.n	8013d5a <_dtoa_r+0x83a>
 8013d4e:	9902      	ldr	r1, [sp, #8]
 8013d50:	461a      	mov	r2, r3
 8013d52:	4648      	mov	r0, r9
 8013d54:	f000 ff9a 	bl	8014c8c <__lshift>
 8013d58:	9002      	str	r0, [sp, #8]
 8013d5a:	9b06      	ldr	r3, [sp, #24]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	dd05      	ble.n	8013d6c <_dtoa_r+0x84c>
 8013d60:	4621      	mov	r1, r4
 8013d62:	461a      	mov	r2, r3
 8013d64:	4648      	mov	r0, r9
 8013d66:	f000 ff91 	bl	8014c8c <__lshift>
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d061      	beq.n	8013e36 <_dtoa_r+0x916>
 8013d72:	9802      	ldr	r0, [sp, #8]
 8013d74:	4621      	mov	r1, r4
 8013d76:	f000 fff5 	bl	8014d64 <__mcmp>
 8013d7a:	2800      	cmp	r0, #0
 8013d7c:	da5b      	bge.n	8013e36 <_dtoa_r+0x916>
 8013d7e:	2300      	movs	r3, #0
 8013d80:	9902      	ldr	r1, [sp, #8]
 8013d82:	220a      	movs	r2, #10
 8013d84:	4648      	mov	r0, r9
 8013d86:	f000 fd93 	bl	80148b0 <__multadd>
 8013d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d8c:	9002      	str	r0, [sp, #8]
 8013d8e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	f000 8177 	beq.w	8014086 <_dtoa_r+0xb66>
 8013d98:	4629      	mov	r1, r5
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	220a      	movs	r2, #10
 8013d9e:	4648      	mov	r0, r9
 8013da0:	f000 fd86 	bl	80148b0 <__multadd>
 8013da4:	f1bb 0f00 	cmp.w	fp, #0
 8013da8:	4605      	mov	r5, r0
 8013daa:	dc6f      	bgt.n	8013e8c <_dtoa_r+0x96c>
 8013dac:	9b07      	ldr	r3, [sp, #28]
 8013dae:	2b02      	cmp	r3, #2
 8013db0:	dc49      	bgt.n	8013e46 <_dtoa_r+0x926>
 8013db2:	e06b      	b.n	8013e8c <_dtoa_r+0x96c>
 8013db4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013db6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013dba:	e73c      	b.n	8013c36 <_dtoa_r+0x716>
 8013dbc:	3fe00000 	.word	0x3fe00000
 8013dc0:	40240000 	.word	0x40240000
 8013dc4:	9b03      	ldr	r3, [sp, #12]
 8013dc6:	1e5c      	subs	r4, r3, #1
 8013dc8:	9b08      	ldr	r3, [sp, #32]
 8013dca:	42a3      	cmp	r3, r4
 8013dcc:	db09      	blt.n	8013de2 <_dtoa_r+0x8c2>
 8013dce:	1b1c      	subs	r4, r3, r4
 8013dd0:	9b03      	ldr	r3, [sp, #12]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f6bf af30 	bge.w	8013c38 <_dtoa_r+0x718>
 8013dd8:	9b00      	ldr	r3, [sp, #0]
 8013dda:	9a03      	ldr	r2, [sp, #12]
 8013ddc:	1a9e      	subs	r6, r3, r2
 8013dde:	2300      	movs	r3, #0
 8013de0:	e72b      	b.n	8013c3a <_dtoa_r+0x71a>
 8013de2:	9b08      	ldr	r3, [sp, #32]
 8013de4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013de6:	9408      	str	r4, [sp, #32]
 8013de8:	1ae3      	subs	r3, r4, r3
 8013dea:	441a      	add	r2, r3
 8013dec:	9e00      	ldr	r6, [sp, #0]
 8013dee:	9b03      	ldr	r3, [sp, #12]
 8013df0:	920d      	str	r2, [sp, #52]	@ 0x34
 8013df2:	2400      	movs	r4, #0
 8013df4:	e721      	b.n	8013c3a <_dtoa_r+0x71a>
 8013df6:	9c08      	ldr	r4, [sp, #32]
 8013df8:	9e00      	ldr	r6, [sp, #0]
 8013dfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013dfc:	e728      	b.n	8013c50 <_dtoa_r+0x730>
 8013dfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013e02:	e751      	b.n	8013ca8 <_dtoa_r+0x788>
 8013e04:	9a08      	ldr	r2, [sp, #32]
 8013e06:	9902      	ldr	r1, [sp, #8]
 8013e08:	e750      	b.n	8013cac <_dtoa_r+0x78c>
 8013e0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013e0e:	e751      	b.n	8013cb4 <_dtoa_r+0x794>
 8013e10:	2300      	movs	r3, #0
 8013e12:	e779      	b.n	8013d08 <_dtoa_r+0x7e8>
 8013e14:	9b04      	ldr	r3, [sp, #16]
 8013e16:	e777      	b.n	8013d08 <_dtoa_r+0x7e8>
 8013e18:	2300      	movs	r3, #0
 8013e1a:	9308      	str	r3, [sp, #32]
 8013e1c:	e779      	b.n	8013d12 <_dtoa_r+0x7f2>
 8013e1e:	d093      	beq.n	8013d48 <_dtoa_r+0x828>
 8013e20:	9a00      	ldr	r2, [sp, #0]
 8013e22:	331c      	adds	r3, #28
 8013e24:	441a      	add	r2, r3
 8013e26:	9200      	str	r2, [sp, #0]
 8013e28:	9a06      	ldr	r2, [sp, #24]
 8013e2a:	441a      	add	r2, r3
 8013e2c:	441e      	add	r6, r3
 8013e2e:	9206      	str	r2, [sp, #24]
 8013e30:	e78a      	b.n	8013d48 <_dtoa_r+0x828>
 8013e32:	4603      	mov	r3, r0
 8013e34:	e7f4      	b.n	8013e20 <_dtoa_r+0x900>
 8013e36:	9b03      	ldr	r3, [sp, #12]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	46b8      	mov	r8, r7
 8013e3c:	dc20      	bgt.n	8013e80 <_dtoa_r+0x960>
 8013e3e:	469b      	mov	fp, r3
 8013e40:	9b07      	ldr	r3, [sp, #28]
 8013e42:	2b02      	cmp	r3, #2
 8013e44:	dd1e      	ble.n	8013e84 <_dtoa_r+0x964>
 8013e46:	f1bb 0f00 	cmp.w	fp, #0
 8013e4a:	f47f adb1 	bne.w	80139b0 <_dtoa_r+0x490>
 8013e4e:	4621      	mov	r1, r4
 8013e50:	465b      	mov	r3, fp
 8013e52:	2205      	movs	r2, #5
 8013e54:	4648      	mov	r0, r9
 8013e56:	f000 fd2b 	bl	80148b0 <__multadd>
 8013e5a:	4601      	mov	r1, r0
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	9802      	ldr	r0, [sp, #8]
 8013e60:	f000 ff80 	bl	8014d64 <__mcmp>
 8013e64:	2800      	cmp	r0, #0
 8013e66:	f77f ada3 	ble.w	80139b0 <_dtoa_r+0x490>
 8013e6a:	4656      	mov	r6, sl
 8013e6c:	2331      	movs	r3, #49	@ 0x31
 8013e6e:	f806 3b01 	strb.w	r3, [r6], #1
 8013e72:	f108 0801 	add.w	r8, r8, #1
 8013e76:	e59f      	b.n	80139b8 <_dtoa_r+0x498>
 8013e78:	9c03      	ldr	r4, [sp, #12]
 8013e7a:	46b8      	mov	r8, r7
 8013e7c:	4625      	mov	r5, r4
 8013e7e:	e7f4      	b.n	8013e6a <_dtoa_r+0x94a>
 8013e80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	f000 8101 	beq.w	801408e <_dtoa_r+0xb6e>
 8013e8c:	2e00      	cmp	r6, #0
 8013e8e:	dd05      	ble.n	8013e9c <_dtoa_r+0x97c>
 8013e90:	4629      	mov	r1, r5
 8013e92:	4632      	mov	r2, r6
 8013e94:	4648      	mov	r0, r9
 8013e96:	f000 fef9 	bl	8014c8c <__lshift>
 8013e9a:	4605      	mov	r5, r0
 8013e9c:	9b08      	ldr	r3, [sp, #32]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d05c      	beq.n	8013f5c <_dtoa_r+0xa3c>
 8013ea2:	6869      	ldr	r1, [r5, #4]
 8013ea4:	4648      	mov	r0, r9
 8013ea6:	f000 fca1 	bl	80147ec <_Balloc>
 8013eaa:	4606      	mov	r6, r0
 8013eac:	b928      	cbnz	r0, 8013eba <_dtoa_r+0x99a>
 8013eae:	4b82      	ldr	r3, [pc, #520]	@ (80140b8 <_dtoa_r+0xb98>)
 8013eb0:	4602      	mov	r2, r0
 8013eb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013eb6:	f7ff bb4a 	b.w	801354e <_dtoa_r+0x2e>
 8013eba:	692a      	ldr	r2, [r5, #16]
 8013ebc:	3202      	adds	r2, #2
 8013ebe:	0092      	lsls	r2, r2, #2
 8013ec0:	f105 010c 	add.w	r1, r5, #12
 8013ec4:	300c      	adds	r0, #12
 8013ec6:	f7ff fa6a 	bl	801339e <memcpy>
 8013eca:	2201      	movs	r2, #1
 8013ecc:	4631      	mov	r1, r6
 8013ece:	4648      	mov	r0, r9
 8013ed0:	f000 fedc 	bl	8014c8c <__lshift>
 8013ed4:	f10a 0301 	add.w	r3, sl, #1
 8013ed8:	9300      	str	r3, [sp, #0]
 8013eda:	eb0a 030b 	add.w	r3, sl, fp
 8013ede:	9308      	str	r3, [sp, #32]
 8013ee0:	9b04      	ldr	r3, [sp, #16]
 8013ee2:	f003 0301 	and.w	r3, r3, #1
 8013ee6:	462f      	mov	r7, r5
 8013ee8:	9306      	str	r3, [sp, #24]
 8013eea:	4605      	mov	r5, r0
 8013eec:	9b00      	ldr	r3, [sp, #0]
 8013eee:	9802      	ldr	r0, [sp, #8]
 8013ef0:	4621      	mov	r1, r4
 8013ef2:	f103 3bff 	add.w	fp, r3, #4294967295
 8013ef6:	f7ff fa89 	bl	801340c <quorem>
 8013efa:	4603      	mov	r3, r0
 8013efc:	3330      	adds	r3, #48	@ 0x30
 8013efe:	9003      	str	r0, [sp, #12]
 8013f00:	4639      	mov	r1, r7
 8013f02:	9802      	ldr	r0, [sp, #8]
 8013f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f06:	f000 ff2d 	bl	8014d64 <__mcmp>
 8013f0a:	462a      	mov	r2, r5
 8013f0c:	9004      	str	r0, [sp, #16]
 8013f0e:	4621      	mov	r1, r4
 8013f10:	4648      	mov	r0, r9
 8013f12:	f000 ff43 	bl	8014d9c <__mdiff>
 8013f16:	68c2      	ldr	r2, [r0, #12]
 8013f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f1a:	4606      	mov	r6, r0
 8013f1c:	bb02      	cbnz	r2, 8013f60 <_dtoa_r+0xa40>
 8013f1e:	4601      	mov	r1, r0
 8013f20:	9802      	ldr	r0, [sp, #8]
 8013f22:	f000 ff1f 	bl	8014d64 <__mcmp>
 8013f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f28:	4602      	mov	r2, r0
 8013f2a:	4631      	mov	r1, r6
 8013f2c:	4648      	mov	r0, r9
 8013f2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013f30:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f32:	f000 fc9b 	bl	801486c <_Bfree>
 8013f36:	9b07      	ldr	r3, [sp, #28]
 8013f38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013f3a:	9e00      	ldr	r6, [sp, #0]
 8013f3c:	ea42 0103 	orr.w	r1, r2, r3
 8013f40:	9b06      	ldr	r3, [sp, #24]
 8013f42:	4319      	orrs	r1, r3
 8013f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f46:	d10d      	bne.n	8013f64 <_dtoa_r+0xa44>
 8013f48:	2b39      	cmp	r3, #57	@ 0x39
 8013f4a:	d027      	beq.n	8013f9c <_dtoa_r+0xa7c>
 8013f4c:	9a04      	ldr	r2, [sp, #16]
 8013f4e:	2a00      	cmp	r2, #0
 8013f50:	dd01      	ble.n	8013f56 <_dtoa_r+0xa36>
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	3331      	adds	r3, #49	@ 0x31
 8013f56:	f88b 3000 	strb.w	r3, [fp]
 8013f5a:	e52e      	b.n	80139ba <_dtoa_r+0x49a>
 8013f5c:	4628      	mov	r0, r5
 8013f5e:	e7b9      	b.n	8013ed4 <_dtoa_r+0x9b4>
 8013f60:	2201      	movs	r2, #1
 8013f62:	e7e2      	b.n	8013f2a <_dtoa_r+0xa0a>
 8013f64:	9904      	ldr	r1, [sp, #16]
 8013f66:	2900      	cmp	r1, #0
 8013f68:	db04      	blt.n	8013f74 <_dtoa_r+0xa54>
 8013f6a:	9807      	ldr	r0, [sp, #28]
 8013f6c:	4301      	orrs	r1, r0
 8013f6e:	9806      	ldr	r0, [sp, #24]
 8013f70:	4301      	orrs	r1, r0
 8013f72:	d120      	bne.n	8013fb6 <_dtoa_r+0xa96>
 8013f74:	2a00      	cmp	r2, #0
 8013f76:	ddee      	ble.n	8013f56 <_dtoa_r+0xa36>
 8013f78:	9902      	ldr	r1, [sp, #8]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	2201      	movs	r2, #1
 8013f7e:	4648      	mov	r0, r9
 8013f80:	f000 fe84 	bl	8014c8c <__lshift>
 8013f84:	4621      	mov	r1, r4
 8013f86:	9002      	str	r0, [sp, #8]
 8013f88:	f000 feec 	bl	8014d64 <__mcmp>
 8013f8c:	2800      	cmp	r0, #0
 8013f8e:	9b00      	ldr	r3, [sp, #0]
 8013f90:	dc02      	bgt.n	8013f98 <_dtoa_r+0xa78>
 8013f92:	d1e0      	bne.n	8013f56 <_dtoa_r+0xa36>
 8013f94:	07da      	lsls	r2, r3, #31
 8013f96:	d5de      	bpl.n	8013f56 <_dtoa_r+0xa36>
 8013f98:	2b39      	cmp	r3, #57	@ 0x39
 8013f9a:	d1da      	bne.n	8013f52 <_dtoa_r+0xa32>
 8013f9c:	2339      	movs	r3, #57	@ 0x39
 8013f9e:	f88b 3000 	strb.w	r3, [fp]
 8013fa2:	4633      	mov	r3, r6
 8013fa4:	461e      	mov	r6, r3
 8013fa6:	3b01      	subs	r3, #1
 8013fa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013fac:	2a39      	cmp	r2, #57	@ 0x39
 8013fae:	d04e      	beq.n	801404e <_dtoa_r+0xb2e>
 8013fb0:	3201      	adds	r2, #1
 8013fb2:	701a      	strb	r2, [r3, #0]
 8013fb4:	e501      	b.n	80139ba <_dtoa_r+0x49a>
 8013fb6:	2a00      	cmp	r2, #0
 8013fb8:	dd03      	ble.n	8013fc2 <_dtoa_r+0xaa2>
 8013fba:	2b39      	cmp	r3, #57	@ 0x39
 8013fbc:	d0ee      	beq.n	8013f9c <_dtoa_r+0xa7c>
 8013fbe:	3301      	adds	r3, #1
 8013fc0:	e7c9      	b.n	8013f56 <_dtoa_r+0xa36>
 8013fc2:	9a00      	ldr	r2, [sp, #0]
 8013fc4:	9908      	ldr	r1, [sp, #32]
 8013fc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013fca:	428a      	cmp	r2, r1
 8013fcc:	d028      	beq.n	8014020 <_dtoa_r+0xb00>
 8013fce:	9902      	ldr	r1, [sp, #8]
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	220a      	movs	r2, #10
 8013fd4:	4648      	mov	r0, r9
 8013fd6:	f000 fc6b 	bl	80148b0 <__multadd>
 8013fda:	42af      	cmp	r7, r5
 8013fdc:	9002      	str	r0, [sp, #8]
 8013fde:	f04f 0300 	mov.w	r3, #0
 8013fe2:	f04f 020a 	mov.w	r2, #10
 8013fe6:	4639      	mov	r1, r7
 8013fe8:	4648      	mov	r0, r9
 8013fea:	d107      	bne.n	8013ffc <_dtoa_r+0xadc>
 8013fec:	f000 fc60 	bl	80148b0 <__multadd>
 8013ff0:	4607      	mov	r7, r0
 8013ff2:	4605      	mov	r5, r0
 8013ff4:	9b00      	ldr	r3, [sp, #0]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	9300      	str	r3, [sp, #0]
 8013ffa:	e777      	b.n	8013eec <_dtoa_r+0x9cc>
 8013ffc:	f000 fc58 	bl	80148b0 <__multadd>
 8014000:	4629      	mov	r1, r5
 8014002:	4607      	mov	r7, r0
 8014004:	2300      	movs	r3, #0
 8014006:	220a      	movs	r2, #10
 8014008:	4648      	mov	r0, r9
 801400a:	f000 fc51 	bl	80148b0 <__multadd>
 801400e:	4605      	mov	r5, r0
 8014010:	e7f0      	b.n	8013ff4 <_dtoa_r+0xad4>
 8014012:	f1bb 0f00 	cmp.w	fp, #0
 8014016:	bfcc      	ite	gt
 8014018:	465e      	movgt	r6, fp
 801401a:	2601      	movle	r6, #1
 801401c:	4456      	add	r6, sl
 801401e:	2700      	movs	r7, #0
 8014020:	9902      	ldr	r1, [sp, #8]
 8014022:	9300      	str	r3, [sp, #0]
 8014024:	2201      	movs	r2, #1
 8014026:	4648      	mov	r0, r9
 8014028:	f000 fe30 	bl	8014c8c <__lshift>
 801402c:	4621      	mov	r1, r4
 801402e:	9002      	str	r0, [sp, #8]
 8014030:	f000 fe98 	bl	8014d64 <__mcmp>
 8014034:	2800      	cmp	r0, #0
 8014036:	dcb4      	bgt.n	8013fa2 <_dtoa_r+0xa82>
 8014038:	d102      	bne.n	8014040 <_dtoa_r+0xb20>
 801403a:	9b00      	ldr	r3, [sp, #0]
 801403c:	07db      	lsls	r3, r3, #31
 801403e:	d4b0      	bmi.n	8013fa2 <_dtoa_r+0xa82>
 8014040:	4633      	mov	r3, r6
 8014042:	461e      	mov	r6, r3
 8014044:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014048:	2a30      	cmp	r2, #48	@ 0x30
 801404a:	d0fa      	beq.n	8014042 <_dtoa_r+0xb22>
 801404c:	e4b5      	b.n	80139ba <_dtoa_r+0x49a>
 801404e:	459a      	cmp	sl, r3
 8014050:	d1a8      	bne.n	8013fa4 <_dtoa_r+0xa84>
 8014052:	2331      	movs	r3, #49	@ 0x31
 8014054:	f108 0801 	add.w	r8, r8, #1
 8014058:	f88a 3000 	strb.w	r3, [sl]
 801405c:	e4ad      	b.n	80139ba <_dtoa_r+0x49a>
 801405e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014060:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80140bc <_dtoa_r+0xb9c>
 8014064:	b11b      	cbz	r3, 801406e <_dtoa_r+0xb4e>
 8014066:	f10a 0308 	add.w	r3, sl, #8
 801406a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801406c:	6013      	str	r3, [r2, #0]
 801406e:	4650      	mov	r0, sl
 8014070:	b017      	add	sp, #92	@ 0x5c
 8014072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014076:	9b07      	ldr	r3, [sp, #28]
 8014078:	2b01      	cmp	r3, #1
 801407a:	f77f ae2e 	ble.w	8013cda <_dtoa_r+0x7ba>
 801407e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014080:	9308      	str	r3, [sp, #32]
 8014082:	2001      	movs	r0, #1
 8014084:	e64d      	b.n	8013d22 <_dtoa_r+0x802>
 8014086:	f1bb 0f00 	cmp.w	fp, #0
 801408a:	f77f aed9 	ble.w	8013e40 <_dtoa_r+0x920>
 801408e:	4656      	mov	r6, sl
 8014090:	9802      	ldr	r0, [sp, #8]
 8014092:	4621      	mov	r1, r4
 8014094:	f7ff f9ba 	bl	801340c <quorem>
 8014098:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801409c:	f806 3b01 	strb.w	r3, [r6], #1
 80140a0:	eba6 020a 	sub.w	r2, r6, sl
 80140a4:	4593      	cmp	fp, r2
 80140a6:	ddb4      	ble.n	8014012 <_dtoa_r+0xaf2>
 80140a8:	9902      	ldr	r1, [sp, #8]
 80140aa:	2300      	movs	r3, #0
 80140ac:	220a      	movs	r2, #10
 80140ae:	4648      	mov	r0, r9
 80140b0:	f000 fbfe 	bl	80148b0 <__multadd>
 80140b4:	9002      	str	r0, [sp, #8]
 80140b6:	e7eb      	b.n	8014090 <_dtoa_r+0xb70>
 80140b8:	080167c4 	.word	0x080167c4
 80140bc:	0801675f 	.word	0x0801675f

080140c0 <_free_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4605      	mov	r5, r0
 80140c4:	2900      	cmp	r1, #0
 80140c6:	d041      	beq.n	801414c <_free_r+0x8c>
 80140c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140cc:	1f0c      	subs	r4, r1, #4
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	bfb8      	it	lt
 80140d2:	18e4      	addlt	r4, r4, r3
 80140d4:	f7fd fbbe 	bl	8011854 <__malloc_lock>
 80140d8:	4a1d      	ldr	r2, [pc, #116]	@ (8014150 <_free_r+0x90>)
 80140da:	6813      	ldr	r3, [r2, #0]
 80140dc:	b933      	cbnz	r3, 80140ec <_free_r+0x2c>
 80140de:	6063      	str	r3, [r4, #4]
 80140e0:	6014      	str	r4, [r2, #0]
 80140e2:	4628      	mov	r0, r5
 80140e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140e8:	f7fd bbba 	b.w	8011860 <__malloc_unlock>
 80140ec:	42a3      	cmp	r3, r4
 80140ee:	d908      	bls.n	8014102 <_free_r+0x42>
 80140f0:	6820      	ldr	r0, [r4, #0]
 80140f2:	1821      	adds	r1, r4, r0
 80140f4:	428b      	cmp	r3, r1
 80140f6:	bf01      	itttt	eq
 80140f8:	6819      	ldreq	r1, [r3, #0]
 80140fa:	685b      	ldreq	r3, [r3, #4]
 80140fc:	1809      	addeq	r1, r1, r0
 80140fe:	6021      	streq	r1, [r4, #0]
 8014100:	e7ed      	b.n	80140de <_free_r+0x1e>
 8014102:	461a      	mov	r2, r3
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	b10b      	cbz	r3, 801410c <_free_r+0x4c>
 8014108:	42a3      	cmp	r3, r4
 801410a:	d9fa      	bls.n	8014102 <_free_r+0x42>
 801410c:	6811      	ldr	r1, [r2, #0]
 801410e:	1850      	adds	r0, r2, r1
 8014110:	42a0      	cmp	r0, r4
 8014112:	d10b      	bne.n	801412c <_free_r+0x6c>
 8014114:	6820      	ldr	r0, [r4, #0]
 8014116:	4401      	add	r1, r0
 8014118:	1850      	adds	r0, r2, r1
 801411a:	4283      	cmp	r3, r0
 801411c:	6011      	str	r1, [r2, #0]
 801411e:	d1e0      	bne.n	80140e2 <_free_r+0x22>
 8014120:	6818      	ldr	r0, [r3, #0]
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	6053      	str	r3, [r2, #4]
 8014126:	4408      	add	r0, r1
 8014128:	6010      	str	r0, [r2, #0]
 801412a:	e7da      	b.n	80140e2 <_free_r+0x22>
 801412c:	d902      	bls.n	8014134 <_free_r+0x74>
 801412e:	230c      	movs	r3, #12
 8014130:	602b      	str	r3, [r5, #0]
 8014132:	e7d6      	b.n	80140e2 <_free_r+0x22>
 8014134:	6820      	ldr	r0, [r4, #0]
 8014136:	1821      	adds	r1, r4, r0
 8014138:	428b      	cmp	r3, r1
 801413a:	bf04      	itt	eq
 801413c:	6819      	ldreq	r1, [r3, #0]
 801413e:	685b      	ldreq	r3, [r3, #4]
 8014140:	6063      	str	r3, [r4, #4]
 8014142:	bf04      	itt	eq
 8014144:	1809      	addeq	r1, r1, r0
 8014146:	6021      	streq	r1, [r4, #0]
 8014148:	6054      	str	r4, [r2, #4]
 801414a:	e7ca      	b.n	80140e2 <_free_r+0x22>
 801414c:	bd38      	pop	{r3, r4, r5, pc}
 801414e:	bf00      	nop
 8014150:	20011de8 	.word	0x20011de8

08014154 <rshift>:
 8014154:	6903      	ldr	r3, [r0, #16]
 8014156:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801415a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801415e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014162:	f100 0414 	add.w	r4, r0, #20
 8014166:	dd45      	ble.n	80141f4 <rshift+0xa0>
 8014168:	f011 011f 	ands.w	r1, r1, #31
 801416c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014170:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014174:	d10c      	bne.n	8014190 <rshift+0x3c>
 8014176:	f100 0710 	add.w	r7, r0, #16
 801417a:	4629      	mov	r1, r5
 801417c:	42b1      	cmp	r1, r6
 801417e:	d334      	bcc.n	80141ea <rshift+0x96>
 8014180:	1a9b      	subs	r3, r3, r2
 8014182:	009b      	lsls	r3, r3, #2
 8014184:	1eea      	subs	r2, r5, #3
 8014186:	4296      	cmp	r6, r2
 8014188:	bf38      	it	cc
 801418a:	2300      	movcc	r3, #0
 801418c:	4423      	add	r3, r4
 801418e:	e015      	b.n	80141bc <rshift+0x68>
 8014190:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014194:	f1c1 0820 	rsb	r8, r1, #32
 8014198:	40cf      	lsrs	r7, r1
 801419a:	f105 0e04 	add.w	lr, r5, #4
 801419e:	46a1      	mov	r9, r4
 80141a0:	4576      	cmp	r6, lr
 80141a2:	46f4      	mov	ip, lr
 80141a4:	d815      	bhi.n	80141d2 <rshift+0x7e>
 80141a6:	1a9a      	subs	r2, r3, r2
 80141a8:	0092      	lsls	r2, r2, #2
 80141aa:	3a04      	subs	r2, #4
 80141ac:	3501      	adds	r5, #1
 80141ae:	42ae      	cmp	r6, r5
 80141b0:	bf38      	it	cc
 80141b2:	2200      	movcc	r2, #0
 80141b4:	18a3      	adds	r3, r4, r2
 80141b6:	50a7      	str	r7, [r4, r2]
 80141b8:	b107      	cbz	r7, 80141bc <rshift+0x68>
 80141ba:	3304      	adds	r3, #4
 80141bc:	1b1a      	subs	r2, r3, r4
 80141be:	42a3      	cmp	r3, r4
 80141c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141c4:	bf08      	it	eq
 80141c6:	2300      	moveq	r3, #0
 80141c8:	6102      	str	r2, [r0, #16]
 80141ca:	bf08      	it	eq
 80141cc:	6143      	streq	r3, [r0, #20]
 80141ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141d2:	f8dc c000 	ldr.w	ip, [ip]
 80141d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80141da:	ea4c 0707 	orr.w	r7, ip, r7
 80141de:	f849 7b04 	str.w	r7, [r9], #4
 80141e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80141e6:	40cf      	lsrs	r7, r1
 80141e8:	e7da      	b.n	80141a0 <rshift+0x4c>
 80141ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80141ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80141f2:	e7c3      	b.n	801417c <rshift+0x28>
 80141f4:	4623      	mov	r3, r4
 80141f6:	e7e1      	b.n	80141bc <rshift+0x68>

080141f8 <__hexdig_fun>:
 80141f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80141fc:	2b09      	cmp	r3, #9
 80141fe:	d802      	bhi.n	8014206 <__hexdig_fun+0xe>
 8014200:	3820      	subs	r0, #32
 8014202:	b2c0      	uxtb	r0, r0
 8014204:	4770      	bx	lr
 8014206:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801420a:	2b05      	cmp	r3, #5
 801420c:	d801      	bhi.n	8014212 <__hexdig_fun+0x1a>
 801420e:	3847      	subs	r0, #71	@ 0x47
 8014210:	e7f7      	b.n	8014202 <__hexdig_fun+0xa>
 8014212:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014216:	2b05      	cmp	r3, #5
 8014218:	d801      	bhi.n	801421e <__hexdig_fun+0x26>
 801421a:	3827      	subs	r0, #39	@ 0x27
 801421c:	e7f1      	b.n	8014202 <__hexdig_fun+0xa>
 801421e:	2000      	movs	r0, #0
 8014220:	4770      	bx	lr
	...

08014224 <__gethex>:
 8014224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014228:	b085      	sub	sp, #20
 801422a:	468a      	mov	sl, r1
 801422c:	9302      	str	r3, [sp, #8]
 801422e:	680b      	ldr	r3, [r1, #0]
 8014230:	9001      	str	r0, [sp, #4]
 8014232:	4690      	mov	r8, r2
 8014234:	1c9c      	adds	r4, r3, #2
 8014236:	46a1      	mov	r9, r4
 8014238:	f814 0b01 	ldrb.w	r0, [r4], #1
 801423c:	2830      	cmp	r0, #48	@ 0x30
 801423e:	d0fa      	beq.n	8014236 <__gethex+0x12>
 8014240:	eba9 0303 	sub.w	r3, r9, r3
 8014244:	f1a3 0b02 	sub.w	fp, r3, #2
 8014248:	f7ff ffd6 	bl	80141f8 <__hexdig_fun>
 801424c:	4605      	mov	r5, r0
 801424e:	2800      	cmp	r0, #0
 8014250:	d168      	bne.n	8014324 <__gethex+0x100>
 8014252:	49a0      	ldr	r1, [pc, #640]	@ (80144d4 <__gethex+0x2b0>)
 8014254:	2201      	movs	r2, #1
 8014256:	4648      	mov	r0, r9
 8014258:	f7fe ff46 	bl	80130e8 <strncmp>
 801425c:	4607      	mov	r7, r0
 801425e:	2800      	cmp	r0, #0
 8014260:	d167      	bne.n	8014332 <__gethex+0x10e>
 8014262:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014266:	4626      	mov	r6, r4
 8014268:	f7ff ffc6 	bl	80141f8 <__hexdig_fun>
 801426c:	2800      	cmp	r0, #0
 801426e:	d062      	beq.n	8014336 <__gethex+0x112>
 8014270:	4623      	mov	r3, r4
 8014272:	7818      	ldrb	r0, [r3, #0]
 8014274:	2830      	cmp	r0, #48	@ 0x30
 8014276:	4699      	mov	r9, r3
 8014278:	f103 0301 	add.w	r3, r3, #1
 801427c:	d0f9      	beq.n	8014272 <__gethex+0x4e>
 801427e:	f7ff ffbb 	bl	80141f8 <__hexdig_fun>
 8014282:	fab0 f580 	clz	r5, r0
 8014286:	096d      	lsrs	r5, r5, #5
 8014288:	f04f 0b01 	mov.w	fp, #1
 801428c:	464a      	mov	r2, r9
 801428e:	4616      	mov	r6, r2
 8014290:	3201      	adds	r2, #1
 8014292:	7830      	ldrb	r0, [r6, #0]
 8014294:	f7ff ffb0 	bl	80141f8 <__hexdig_fun>
 8014298:	2800      	cmp	r0, #0
 801429a:	d1f8      	bne.n	801428e <__gethex+0x6a>
 801429c:	498d      	ldr	r1, [pc, #564]	@ (80144d4 <__gethex+0x2b0>)
 801429e:	2201      	movs	r2, #1
 80142a0:	4630      	mov	r0, r6
 80142a2:	f7fe ff21 	bl	80130e8 <strncmp>
 80142a6:	2800      	cmp	r0, #0
 80142a8:	d13f      	bne.n	801432a <__gethex+0x106>
 80142aa:	b944      	cbnz	r4, 80142be <__gethex+0x9a>
 80142ac:	1c74      	adds	r4, r6, #1
 80142ae:	4622      	mov	r2, r4
 80142b0:	4616      	mov	r6, r2
 80142b2:	3201      	adds	r2, #1
 80142b4:	7830      	ldrb	r0, [r6, #0]
 80142b6:	f7ff ff9f 	bl	80141f8 <__hexdig_fun>
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d1f8      	bne.n	80142b0 <__gethex+0x8c>
 80142be:	1ba4      	subs	r4, r4, r6
 80142c0:	00a7      	lsls	r7, r4, #2
 80142c2:	7833      	ldrb	r3, [r6, #0]
 80142c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80142c8:	2b50      	cmp	r3, #80	@ 0x50
 80142ca:	d13e      	bne.n	801434a <__gethex+0x126>
 80142cc:	7873      	ldrb	r3, [r6, #1]
 80142ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80142d0:	d033      	beq.n	801433a <__gethex+0x116>
 80142d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80142d4:	d034      	beq.n	8014340 <__gethex+0x11c>
 80142d6:	1c71      	adds	r1, r6, #1
 80142d8:	2400      	movs	r4, #0
 80142da:	7808      	ldrb	r0, [r1, #0]
 80142dc:	f7ff ff8c 	bl	80141f8 <__hexdig_fun>
 80142e0:	1e43      	subs	r3, r0, #1
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	2b18      	cmp	r3, #24
 80142e6:	d830      	bhi.n	801434a <__gethex+0x126>
 80142e8:	f1a0 0210 	sub.w	r2, r0, #16
 80142ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80142f0:	f7ff ff82 	bl	80141f8 <__hexdig_fun>
 80142f4:	f100 3cff 	add.w	ip, r0, #4294967295
 80142f8:	fa5f fc8c 	uxtb.w	ip, ip
 80142fc:	f1bc 0f18 	cmp.w	ip, #24
 8014300:	f04f 030a 	mov.w	r3, #10
 8014304:	d91e      	bls.n	8014344 <__gethex+0x120>
 8014306:	b104      	cbz	r4, 801430a <__gethex+0xe6>
 8014308:	4252      	negs	r2, r2
 801430a:	4417      	add	r7, r2
 801430c:	f8ca 1000 	str.w	r1, [sl]
 8014310:	b1ed      	cbz	r5, 801434e <__gethex+0x12a>
 8014312:	f1bb 0f00 	cmp.w	fp, #0
 8014316:	bf0c      	ite	eq
 8014318:	2506      	moveq	r5, #6
 801431a:	2500      	movne	r5, #0
 801431c:	4628      	mov	r0, r5
 801431e:	b005      	add	sp, #20
 8014320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014324:	2500      	movs	r5, #0
 8014326:	462c      	mov	r4, r5
 8014328:	e7b0      	b.n	801428c <__gethex+0x68>
 801432a:	2c00      	cmp	r4, #0
 801432c:	d1c7      	bne.n	80142be <__gethex+0x9a>
 801432e:	4627      	mov	r7, r4
 8014330:	e7c7      	b.n	80142c2 <__gethex+0x9e>
 8014332:	464e      	mov	r6, r9
 8014334:	462f      	mov	r7, r5
 8014336:	2501      	movs	r5, #1
 8014338:	e7c3      	b.n	80142c2 <__gethex+0x9e>
 801433a:	2400      	movs	r4, #0
 801433c:	1cb1      	adds	r1, r6, #2
 801433e:	e7cc      	b.n	80142da <__gethex+0xb6>
 8014340:	2401      	movs	r4, #1
 8014342:	e7fb      	b.n	801433c <__gethex+0x118>
 8014344:	fb03 0002 	mla	r0, r3, r2, r0
 8014348:	e7ce      	b.n	80142e8 <__gethex+0xc4>
 801434a:	4631      	mov	r1, r6
 801434c:	e7de      	b.n	801430c <__gethex+0xe8>
 801434e:	eba6 0309 	sub.w	r3, r6, r9
 8014352:	3b01      	subs	r3, #1
 8014354:	4629      	mov	r1, r5
 8014356:	2b07      	cmp	r3, #7
 8014358:	dc0a      	bgt.n	8014370 <__gethex+0x14c>
 801435a:	9801      	ldr	r0, [sp, #4]
 801435c:	f000 fa46 	bl	80147ec <_Balloc>
 8014360:	4604      	mov	r4, r0
 8014362:	b940      	cbnz	r0, 8014376 <__gethex+0x152>
 8014364:	4b5c      	ldr	r3, [pc, #368]	@ (80144d8 <__gethex+0x2b4>)
 8014366:	4602      	mov	r2, r0
 8014368:	21e4      	movs	r1, #228	@ 0xe4
 801436a:	485c      	ldr	r0, [pc, #368]	@ (80144dc <__gethex+0x2b8>)
 801436c:	f7ff f830 	bl	80133d0 <__assert_func>
 8014370:	3101      	adds	r1, #1
 8014372:	105b      	asrs	r3, r3, #1
 8014374:	e7ef      	b.n	8014356 <__gethex+0x132>
 8014376:	f100 0a14 	add.w	sl, r0, #20
 801437a:	2300      	movs	r3, #0
 801437c:	4655      	mov	r5, sl
 801437e:	469b      	mov	fp, r3
 8014380:	45b1      	cmp	r9, r6
 8014382:	d337      	bcc.n	80143f4 <__gethex+0x1d0>
 8014384:	f845 bb04 	str.w	fp, [r5], #4
 8014388:	eba5 050a 	sub.w	r5, r5, sl
 801438c:	10ad      	asrs	r5, r5, #2
 801438e:	6125      	str	r5, [r4, #16]
 8014390:	4658      	mov	r0, fp
 8014392:	f000 fb1d 	bl	80149d0 <__hi0bits>
 8014396:	016d      	lsls	r5, r5, #5
 8014398:	f8d8 6000 	ldr.w	r6, [r8]
 801439c:	1a2d      	subs	r5, r5, r0
 801439e:	42b5      	cmp	r5, r6
 80143a0:	dd54      	ble.n	801444c <__gethex+0x228>
 80143a2:	1bad      	subs	r5, r5, r6
 80143a4:	4629      	mov	r1, r5
 80143a6:	4620      	mov	r0, r4
 80143a8:	f000 fea9 	bl	80150fe <__any_on>
 80143ac:	4681      	mov	r9, r0
 80143ae:	b178      	cbz	r0, 80143d0 <__gethex+0x1ac>
 80143b0:	1e6b      	subs	r3, r5, #1
 80143b2:	1159      	asrs	r1, r3, #5
 80143b4:	f003 021f 	and.w	r2, r3, #31
 80143b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80143bc:	f04f 0901 	mov.w	r9, #1
 80143c0:	fa09 f202 	lsl.w	r2, r9, r2
 80143c4:	420a      	tst	r2, r1
 80143c6:	d003      	beq.n	80143d0 <__gethex+0x1ac>
 80143c8:	454b      	cmp	r3, r9
 80143ca:	dc36      	bgt.n	801443a <__gethex+0x216>
 80143cc:	f04f 0902 	mov.w	r9, #2
 80143d0:	4629      	mov	r1, r5
 80143d2:	4620      	mov	r0, r4
 80143d4:	f7ff febe 	bl	8014154 <rshift>
 80143d8:	442f      	add	r7, r5
 80143da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143de:	42bb      	cmp	r3, r7
 80143e0:	da42      	bge.n	8014468 <__gethex+0x244>
 80143e2:	9801      	ldr	r0, [sp, #4]
 80143e4:	4621      	mov	r1, r4
 80143e6:	f000 fa41 	bl	801486c <_Bfree>
 80143ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80143ec:	2300      	movs	r3, #0
 80143ee:	6013      	str	r3, [r2, #0]
 80143f0:	25a3      	movs	r5, #163	@ 0xa3
 80143f2:	e793      	b.n	801431c <__gethex+0xf8>
 80143f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80143f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80143fa:	d012      	beq.n	8014422 <__gethex+0x1fe>
 80143fc:	2b20      	cmp	r3, #32
 80143fe:	d104      	bne.n	801440a <__gethex+0x1e6>
 8014400:	f845 bb04 	str.w	fp, [r5], #4
 8014404:	f04f 0b00 	mov.w	fp, #0
 8014408:	465b      	mov	r3, fp
 801440a:	7830      	ldrb	r0, [r6, #0]
 801440c:	9303      	str	r3, [sp, #12]
 801440e:	f7ff fef3 	bl	80141f8 <__hexdig_fun>
 8014412:	9b03      	ldr	r3, [sp, #12]
 8014414:	f000 000f 	and.w	r0, r0, #15
 8014418:	4098      	lsls	r0, r3
 801441a:	ea4b 0b00 	orr.w	fp, fp, r0
 801441e:	3304      	adds	r3, #4
 8014420:	e7ae      	b.n	8014380 <__gethex+0x15c>
 8014422:	45b1      	cmp	r9, r6
 8014424:	d8ea      	bhi.n	80143fc <__gethex+0x1d8>
 8014426:	492b      	ldr	r1, [pc, #172]	@ (80144d4 <__gethex+0x2b0>)
 8014428:	9303      	str	r3, [sp, #12]
 801442a:	2201      	movs	r2, #1
 801442c:	4630      	mov	r0, r6
 801442e:	f7fe fe5b 	bl	80130e8 <strncmp>
 8014432:	9b03      	ldr	r3, [sp, #12]
 8014434:	2800      	cmp	r0, #0
 8014436:	d1e1      	bne.n	80143fc <__gethex+0x1d8>
 8014438:	e7a2      	b.n	8014380 <__gethex+0x15c>
 801443a:	1ea9      	subs	r1, r5, #2
 801443c:	4620      	mov	r0, r4
 801443e:	f000 fe5e 	bl	80150fe <__any_on>
 8014442:	2800      	cmp	r0, #0
 8014444:	d0c2      	beq.n	80143cc <__gethex+0x1a8>
 8014446:	f04f 0903 	mov.w	r9, #3
 801444a:	e7c1      	b.n	80143d0 <__gethex+0x1ac>
 801444c:	da09      	bge.n	8014462 <__gethex+0x23e>
 801444e:	1b75      	subs	r5, r6, r5
 8014450:	4621      	mov	r1, r4
 8014452:	9801      	ldr	r0, [sp, #4]
 8014454:	462a      	mov	r2, r5
 8014456:	f000 fc19 	bl	8014c8c <__lshift>
 801445a:	1b7f      	subs	r7, r7, r5
 801445c:	4604      	mov	r4, r0
 801445e:	f100 0a14 	add.w	sl, r0, #20
 8014462:	f04f 0900 	mov.w	r9, #0
 8014466:	e7b8      	b.n	80143da <__gethex+0x1b6>
 8014468:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801446c:	42bd      	cmp	r5, r7
 801446e:	dd6f      	ble.n	8014550 <__gethex+0x32c>
 8014470:	1bed      	subs	r5, r5, r7
 8014472:	42ae      	cmp	r6, r5
 8014474:	dc34      	bgt.n	80144e0 <__gethex+0x2bc>
 8014476:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801447a:	2b02      	cmp	r3, #2
 801447c:	d022      	beq.n	80144c4 <__gethex+0x2a0>
 801447e:	2b03      	cmp	r3, #3
 8014480:	d024      	beq.n	80144cc <__gethex+0x2a8>
 8014482:	2b01      	cmp	r3, #1
 8014484:	d115      	bne.n	80144b2 <__gethex+0x28e>
 8014486:	42ae      	cmp	r6, r5
 8014488:	d113      	bne.n	80144b2 <__gethex+0x28e>
 801448a:	2e01      	cmp	r6, #1
 801448c:	d10b      	bne.n	80144a6 <__gethex+0x282>
 801448e:	9a02      	ldr	r2, [sp, #8]
 8014490:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014494:	6013      	str	r3, [r2, #0]
 8014496:	2301      	movs	r3, #1
 8014498:	6123      	str	r3, [r4, #16]
 801449a:	f8ca 3000 	str.w	r3, [sl]
 801449e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144a0:	2562      	movs	r5, #98	@ 0x62
 80144a2:	601c      	str	r4, [r3, #0]
 80144a4:	e73a      	b.n	801431c <__gethex+0xf8>
 80144a6:	1e71      	subs	r1, r6, #1
 80144a8:	4620      	mov	r0, r4
 80144aa:	f000 fe28 	bl	80150fe <__any_on>
 80144ae:	2800      	cmp	r0, #0
 80144b0:	d1ed      	bne.n	801448e <__gethex+0x26a>
 80144b2:	9801      	ldr	r0, [sp, #4]
 80144b4:	4621      	mov	r1, r4
 80144b6:	f000 f9d9 	bl	801486c <_Bfree>
 80144ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80144bc:	2300      	movs	r3, #0
 80144be:	6013      	str	r3, [r2, #0]
 80144c0:	2550      	movs	r5, #80	@ 0x50
 80144c2:	e72b      	b.n	801431c <__gethex+0xf8>
 80144c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d1f3      	bne.n	80144b2 <__gethex+0x28e>
 80144ca:	e7e0      	b.n	801448e <__gethex+0x26a>
 80144cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1dd      	bne.n	801448e <__gethex+0x26a>
 80144d2:	e7ee      	b.n	80144b2 <__gethex+0x28e>
 80144d4:	08016674 	.word	0x08016674
 80144d8:	080167c4 	.word	0x080167c4
 80144dc:	080167d5 	.word	0x080167d5
 80144e0:	1e6f      	subs	r7, r5, #1
 80144e2:	f1b9 0f00 	cmp.w	r9, #0
 80144e6:	d130      	bne.n	801454a <__gethex+0x326>
 80144e8:	b127      	cbz	r7, 80144f4 <__gethex+0x2d0>
 80144ea:	4639      	mov	r1, r7
 80144ec:	4620      	mov	r0, r4
 80144ee:	f000 fe06 	bl	80150fe <__any_on>
 80144f2:	4681      	mov	r9, r0
 80144f4:	117a      	asrs	r2, r7, #5
 80144f6:	2301      	movs	r3, #1
 80144f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80144fc:	f007 071f 	and.w	r7, r7, #31
 8014500:	40bb      	lsls	r3, r7
 8014502:	4213      	tst	r3, r2
 8014504:	4629      	mov	r1, r5
 8014506:	4620      	mov	r0, r4
 8014508:	bf18      	it	ne
 801450a:	f049 0902 	orrne.w	r9, r9, #2
 801450e:	f7ff fe21 	bl	8014154 <rshift>
 8014512:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014516:	1b76      	subs	r6, r6, r5
 8014518:	2502      	movs	r5, #2
 801451a:	f1b9 0f00 	cmp.w	r9, #0
 801451e:	d047      	beq.n	80145b0 <__gethex+0x38c>
 8014520:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014524:	2b02      	cmp	r3, #2
 8014526:	d015      	beq.n	8014554 <__gethex+0x330>
 8014528:	2b03      	cmp	r3, #3
 801452a:	d017      	beq.n	801455c <__gethex+0x338>
 801452c:	2b01      	cmp	r3, #1
 801452e:	d109      	bne.n	8014544 <__gethex+0x320>
 8014530:	f019 0f02 	tst.w	r9, #2
 8014534:	d006      	beq.n	8014544 <__gethex+0x320>
 8014536:	f8da 3000 	ldr.w	r3, [sl]
 801453a:	ea49 0903 	orr.w	r9, r9, r3
 801453e:	f019 0f01 	tst.w	r9, #1
 8014542:	d10e      	bne.n	8014562 <__gethex+0x33e>
 8014544:	f045 0510 	orr.w	r5, r5, #16
 8014548:	e032      	b.n	80145b0 <__gethex+0x38c>
 801454a:	f04f 0901 	mov.w	r9, #1
 801454e:	e7d1      	b.n	80144f4 <__gethex+0x2d0>
 8014550:	2501      	movs	r5, #1
 8014552:	e7e2      	b.n	801451a <__gethex+0x2f6>
 8014554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014556:	f1c3 0301 	rsb	r3, r3, #1
 801455a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801455c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801455e:	2b00      	cmp	r3, #0
 8014560:	d0f0      	beq.n	8014544 <__gethex+0x320>
 8014562:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014566:	f104 0314 	add.w	r3, r4, #20
 801456a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801456e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014572:	f04f 0c00 	mov.w	ip, #0
 8014576:	4618      	mov	r0, r3
 8014578:	f853 2b04 	ldr.w	r2, [r3], #4
 801457c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014580:	d01b      	beq.n	80145ba <__gethex+0x396>
 8014582:	3201      	adds	r2, #1
 8014584:	6002      	str	r2, [r0, #0]
 8014586:	2d02      	cmp	r5, #2
 8014588:	f104 0314 	add.w	r3, r4, #20
 801458c:	d13c      	bne.n	8014608 <__gethex+0x3e4>
 801458e:	f8d8 2000 	ldr.w	r2, [r8]
 8014592:	3a01      	subs	r2, #1
 8014594:	42b2      	cmp	r2, r6
 8014596:	d109      	bne.n	80145ac <__gethex+0x388>
 8014598:	1171      	asrs	r1, r6, #5
 801459a:	2201      	movs	r2, #1
 801459c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145a0:	f006 061f 	and.w	r6, r6, #31
 80145a4:	fa02 f606 	lsl.w	r6, r2, r6
 80145a8:	421e      	tst	r6, r3
 80145aa:	d13a      	bne.n	8014622 <__gethex+0x3fe>
 80145ac:	f045 0520 	orr.w	r5, r5, #32
 80145b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145b2:	601c      	str	r4, [r3, #0]
 80145b4:	9b02      	ldr	r3, [sp, #8]
 80145b6:	601f      	str	r7, [r3, #0]
 80145b8:	e6b0      	b.n	801431c <__gethex+0xf8>
 80145ba:	4299      	cmp	r1, r3
 80145bc:	f843 cc04 	str.w	ip, [r3, #-4]
 80145c0:	d8d9      	bhi.n	8014576 <__gethex+0x352>
 80145c2:	68a3      	ldr	r3, [r4, #8]
 80145c4:	459b      	cmp	fp, r3
 80145c6:	db17      	blt.n	80145f8 <__gethex+0x3d4>
 80145c8:	6861      	ldr	r1, [r4, #4]
 80145ca:	9801      	ldr	r0, [sp, #4]
 80145cc:	3101      	adds	r1, #1
 80145ce:	f000 f90d 	bl	80147ec <_Balloc>
 80145d2:	4681      	mov	r9, r0
 80145d4:	b918      	cbnz	r0, 80145de <__gethex+0x3ba>
 80145d6:	4b1a      	ldr	r3, [pc, #104]	@ (8014640 <__gethex+0x41c>)
 80145d8:	4602      	mov	r2, r0
 80145da:	2184      	movs	r1, #132	@ 0x84
 80145dc:	e6c5      	b.n	801436a <__gethex+0x146>
 80145de:	6922      	ldr	r2, [r4, #16]
 80145e0:	3202      	adds	r2, #2
 80145e2:	f104 010c 	add.w	r1, r4, #12
 80145e6:	0092      	lsls	r2, r2, #2
 80145e8:	300c      	adds	r0, #12
 80145ea:	f7fe fed8 	bl	801339e <memcpy>
 80145ee:	4621      	mov	r1, r4
 80145f0:	9801      	ldr	r0, [sp, #4]
 80145f2:	f000 f93b 	bl	801486c <_Bfree>
 80145f6:	464c      	mov	r4, r9
 80145f8:	6923      	ldr	r3, [r4, #16]
 80145fa:	1c5a      	adds	r2, r3, #1
 80145fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014600:	6122      	str	r2, [r4, #16]
 8014602:	2201      	movs	r2, #1
 8014604:	615a      	str	r2, [r3, #20]
 8014606:	e7be      	b.n	8014586 <__gethex+0x362>
 8014608:	6922      	ldr	r2, [r4, #16]
 801460a:	455a      	cmp	r2, fp
 801460c:	dd0b      	ble.n	8014626 <__gethex+0x402>
 801460e:	2101      	movs	r1, #1
 8014610:	4620      	mov	r0, r4
 8014612:	f7ff fd9f 	bl	8014154 <rshift>
 8014616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801461a:	3701      	adds	r7, #1
 801461c:	42bb      	cmp	r3, r7
 801461e:	f6ff aee0 	blt.w	80143e2 <__gethex+0x1be>
 8014622:	2501      	movs	r5, #1
 8014624:	e7c2      	b.n	80145ac <__gethex+0x388>
 8014626:	f016 061f 	ands.w	r6, r6, #31
 801462a:	d0fa      	beq.n	8014622 <__gethex+0x3fe>
 801462c:	4453      	add	r3, sl
 801462e:	f1c6 0620 	rsb	r6, r6, #32
 8014632:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014636:	f000 f9cb 	bl	80149d0 <__hi0bits>
 801463a:	42b0      	cmp	r0, r6
 801463c:	dbe7      	blt.n	801460e <__gethex+0x3ea>
 801463e:	e7f0      	b.n	8014622 <__gethex+0x3fe>
 8014640:	080167c4 	.word	0x080167c4

08014644 <L_shift>:
 8014644:	f1c2 0208 	rsb	r2, r2, #8
 8014648:	0092      	lsls	r2, r2, #2
 801464a:	b570      	push	{r4, r5, r6, lr}
 801464c:	f1c2 0620 	rsb	r6, r2, #32
 8014650:	6843      	ldr	r3, [r0, #4]
 8014652:	6804      	ldr	r4, [r0, #0]
 8014654:	fa03 f506 	lsl.w	r5, r3, r6
 8014658:	432c      	orrs	r4, r5
 801465a:	40d3      	lsrs	r3, r2
 801465c:	6004      	str	r4, [r0, #0]
 801465e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014662:	4288      	cmp	r0, r1
 8014664:	d3f4      	bcc.n	8014650 <L_shift+0xc>
 8014666:	bd70      	pop	{r4, r5, r6, pc}

08014668 <__match>:
 8014668:	b530      	push	{r4, r5, lr}
 801466a:	6803      	ldr	r3, [r0, #0]
 801466c:	3301      	adds	r3, #1
 801466e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014672:	b914      	cbnz	r4, 801467a <__match+0x12>
 8014674:	6003      	str	r3, [r0, #0]
 8014676:	2001      	movs	r0, #1
 8014678:	bd30      	pop	{r4, r5, pc}
 801467a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801467e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014682:	2d19      	cmp	r5, #25
 8014684:	bf98      	it	ls
 8014686:	3220      	addls	r2, #32
 8014688:	42a2      	cmp	r2, r4
 801468a:	d0f0      	beq.n	801466e <__match+0x6>
 801468c:	2000      	movs	r0, #0
 801468e:	e7f3      	b.n	8014678 <__match+0x10>

08014690 <__hexnan>:
 8014690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014694:	680b      	ldr	r3, [r1, #0]
 8014696:	6801      	ldr	r1, [r0, #0]
 8014698:	115e      	asrs	r6, r3, #5
 801469a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801469e:	f013 031f 	ands.w	r3, r3, #31
 80146a2:	b087      	sub	sp, #28
 80146a4:	bf18      	it	ne
 80146a6:	3604      	addne	r6, #4
 80146a8:	2500      	movs	r5, #0
 80146aa:	1f37      	subs	r7, r6, #4
 80146ac:	4682      	mov	sl, r0
 80146ae:	4690      	mov	r8, r2
 80146b0:	9301      	str	r3, [sp, #4]
 80146b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80146b6:	46b9      	mov	r9, r7
 80146b8:	463c      	mov	r4, r7
 80146ba:	9502      	str	r5, [sp, #8]
 80146bc:	46ab      	mov	fp, r5
 80146be:	784a      	ldrb	r2, [r1, #1]
 80146c0:	1c4b      	adds	r3, r1, #1
 80146c2:	9303      	str	r3, [sp, #12]
 80146c4:	b342      	cbz	r2, 8014718 <__hexnan+0x88>
 80146c6:	4610      	mov	r0, r2
 80146c8:	9105      	str	r1, [sp, #20]
 80146ca:	9204      	str	r2, [sp, #16]
 80146cc:	f7ff fd94 	bl	80141f8 <__hexdig_fun>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d151      	bne.n	8014778 <__hexnan+0xe8>
 80146d4:	9a04      	ldr	r2, [sp, #16]
 80146d6:	9905      	ldr	r1, [sp, #20]
 80146d8:	2a20      	cmp	r2, #32
 80146da:	d818      	bhi.n	801470e <__hexnan+0x7e>
 80146dc:	9b02      	ldr	r3, [sp, #8]
 80146de:	459b      	cmp	fp, r3
 80146e0:	dd13      	ble.n	801470a <__hexnan+0x7a>
 80146e2:	454c      	cmp	r4, r9
 80146e4:	d206      	bcs.n	80146f4 <__hexnan+0x64>
 80146e6:	2d07      	cmp	r5, #7
 80146e8:	dc04      	bgt.n	80146f4 <__hexnan+0x64>
 80146ea:	462a      	mov	r2, r5
 80146ec:	4649      	mov	r1, r9
 80146ee:	4620      	mov	r0, r4
 80146f0:	f7ff ffa8 	bl	8014644 <L_shift>
 80146f4:	4544      	cmp	r4, r8
 80146f6:	d952      	bls.n	801479e <__hexnan+0x10e>
 80146f8:	2300      	movs	r3, #0
 80146fa:	f1a4 0904 	sub.w	r9, r4, #4
 80146fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8014702:	f8cd b008 	str.w	fp, [sp, #8]
 8014706:	464c      	mov	r4, r9
 8014708:	461d      	mov	r5, r3
 801470a:	9903      	ldr	r1, [sp, #12]
 801470c:	e7d7      	b.n	80146be <__hexnan+0x2e>
 801470e:	2a29      	cmp	r2, #41	@ 0x29
 8014710:	d157      	bne.n	80147c2 <__hexnan+0x132>
 8014712:	3102      	adds	r1, #2
 8014714:	f8ca 1000 	str.w	r1, [sl]
 8014718:	f1bb 0f00 	cmp.w	fp, #0
 801471c:	d051      	beq.n	80147c2 <__hexnan+0x132>
 801471e:	454c      	cmp	r4, r9
 8014720:	d206      	bcs.n	8014730 <__hexnan+0xa0>
 8014722:	2d07      	cmp	r5, #7
 8014724:	dc04      	bgt.n	8014730 <__hexnan+0xa0>
 8014726:	462a      	mov	r2, r5
 8014728:	4649      	mov	r1, r9
 801472a:	4620      	mov	r0, r4
 801472c:	f7ff ff8a 	bl	8014644 <L_shift>
 8014730:	4544      	cmp	r4, r8
 8014732:	d936      	bls.n	80147a2 <__hexnan+0x112>
 8014734:	f1a8 0204 	sub.w	r2, r8, #4
 8014738:	4623      	mov	r3, r4
 801473a:	f853 1b04 	ldr.w	r1, [r3], #4
 801473e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014742:	429f      	cmp	r7, r3
 8014744:	d2f9      	bcs.n	801473a <__hexnan+0xaa>
 8014746:	1b3b      	subs	r3, r7, r4
 8014748:	f023 0303 	bic.w	r3, r3, #3
 801474c:	3304      	adds	r3, #4
 801474e:	3401      	adds	r4, #1
 8014750:	3e03      	subs	r6, #3
 8014752:	42b4      	cmp	r4, r6
 8014754:	bf88      	it	hi
 8014756:	2304      	movhi	r3, #4
 8014758:	4443      	add	r3, r8
 801475a:	2200      	movs	r2, #0
 801475c:	f843 2b04 	str.w	r2, [r3], #4
 8014760:	429f      	cmp	r7, r3
 8014762:	d2fb      	bcs.n	801475c <__hexnan+0xcc>
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	b91b      	cbnz	r3, 8014770 <__hexnan+0xe0>
 8014768:	4547      	cmp	r7, r8
 801476a:	d128      	bne.n	80147be <__hexnan+0x12e>
 801476c:	2301      	movs	r3, #1
 801476e:	603b      	str	r3, [r7, #0]
 8014770:	2005      	movs	r0, #5
 8014772:	b007      	add	sp, #28
 8014774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014778:	3501      	adds	r5, #1
 801477a:	2d08      	cmp	r5, #8
 801477c:	f10b 0b01 	add.w	fp, fp, #1
 8014780:	dd06      	ble.n	8014790 <__hexnan+0x100>
 8014782:	4544      	cmp	r4, r8
 8014784:	d9c1      	bls.n	801470a <__hexnan+0x7a>
 8014786:	2300      	movs	r3, #0
 8014788:	f844 3c04 	str.w	r3, [r4, #-4]
 801478c:	2501      	movs	r5, #1
 801478e:	3c04      	subs	r4, #4
 8014790:	6822      	ldr	r2, [r4, #0]
 8014792:	f000 000f 	and.w	r0, r0, #15
 8014796:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801479a:	6020      	str	r0, [r4, #0]
 801479c:	e7b5      	b.n	801470a <__hexnan+0x7a>
 801479e:	2508      	movs	r5, #8
 80147a0:	e7b3      	b.n	801470a <__hexnan+0x7a>
 80147a2:	9b01      	ldr	r3, [sp, #4]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d0dd      	beq.n	8014764 <__hexnan+0xd4>
 80147a8:	f1c3 0320 	rsb	r3, r3, #32
 80147ac:	f04f 32ff 	mov.w	r2, #4294967295
 80147b0:	40da      	lsrs	r2, r3
 80147b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80147b6:	4013      	ands	r3, r2
 80147b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80147bc:	e7d2      	b.n	8014764 <__hexnan+0xd4>
 80147be:	3f04      	subs	r7, #4
 80147c0:	e7d0      	b.n	8014764 <__hexnan+0xd4>
 80147c2:	2004      	movs	r0, #4
 80147c4:	e7d5      	b.n	8014772 <__hexnan+0xe2>

080147c6 <__ascii_mbtowc>:
 80147c6:	b082      	sub	sp, #8
 80147c8:	b901      	cbnz	r1, 80147cc <__ascii_mbtowc+0x6>
 80147ca:	a901      	add	r1, sp, #4
 80147cc:	b142      	cbz	r2, 80147e0 <__ascii_mbtowc+0x1a>
 80147ce:	b14b      	cbz	r3, 80147e4 <__ascii_mbtowc+0x1e>
 80147d0:	7813      	ldrb	r3, [r2, #0]
 80147d2:	600b      	str	r3, [r1, #0]
 80147d4:	7812      	ldrb	r2, [r2, #0]
 80147d6:	1e10      	subs	r0, r2, #0
 80147d8:	bf18      	it	ne
 80147da:	2001      	movne	r0, #1
 80147dc:	b002      	add	sp, #8
 80147de:	4770      	bx	lr
 80147e0:	4610      	mov	r0, r2
 80147e2:	e7fb      	b.n	80147dc <__ascii_mbtowc+0x16>
 80147e4:	f06f 0001 	mvn.w	r0, #1
 80147e8:	e7f8      	b.n	80147dc <__ascii_mbtowc+0x16>
	...

080147ec <_Balloc>:
 80147ec:	b570      	push	{r4, r5, r6, lr}
 80147ee:	69c6      	ldr	r6, [r0, #28]
 80147f0:	4604      	mov	r4, r0
 80147f2:	460d      	mov	r5, r1
 80147f4:	b976      	cbnz	r6, 8014814 <_Balloc+0x28>
 80147f6:	2010      	movs	r0, #16
 80147f8:	f7fc ff7a 	bl	80116f0 <malloc>
 80147fc:	4602      	mov	r2, r0
 80147fe:	61e0      	str	r0, [r4, #28]
 8014800:	b920      	cbnz	r0, 801480c <_Balloc+0x20>
 8014802:	4b18      	ldr	r3, [pc, #96]	@ (8014864 <_Balloc+0x78>)
 8014804:	4818      	ldr	r0, [pc, #96]	@ (8014868 <_Balloc+0x7c>)
 8014806:	216b      	movs	r1, #107	@ 0x6b
 8014808:	f7fe fde2 	bl	80133d0 <__assert_func>
 801480c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014810:	6006      	str	r6, [r0, #0]
 8014812:	60c6      	str	r6, [r0, #12]
 8014814:	69e6      	ldr	r6, [r4, #28]
 8014816:	68f3      	ldr	r3, [r6, #12]
 8014818:	b183      	cbz	r3, 801483c <_Balloc+0x50>
 801481a:	69e3      	ldr	r3, [r4, #28]
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014822:	b9b8      	cbnz	r0, 8014854 <_Balloc+0x68>
 8014824:	2101      	movs	r1, #1
 8014826:	fa01 f605 	lsl.w	r6, r1, r5
 801482a:	1d72      	adds	r2, r6, #5
 801482c:	0092      	lsls	r2, r2, #2
 801482e:	4620      	mov	r0, r4
 8014830:	f000 feaf 	bl	8015592 <_calloc_r>
 8014834:	b160      	cbz	r0, 8014850 <_Balloc+0x64>
 8014836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801483a:	e00e      	b.n	801485a <_Balloc+0x6e>
 801483c:	2221      	movs	r2, #33	@ 0x21
 801483e:	2104      	movs	r1, #4
 8014840:	4620      	mov	r0, r4
 8014842:	f000 fea6 	bl	8015592 <_calloc_r>
 8014846:	69e3      	ldr	r3, [r4, #28]
 8014848:	60f0      	str	r0, [r6, #12]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d1e4      	bne.n	801481a <_Balloc+0x2e>
 8014850:	2000      	movs	r0, #0
 8014852:	bd70      	pop	{r4, r5, r6, pc}
 8014854:	6802      	ldr	r2, [r0, #0]
 8014856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801485a:	2300      	movs	r3, #0
 801485c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014860:	e7f7      	b.n	8014852 <_Balloc+0x66>
 8014862:	bf00      	nop
 8014864:	080166aa 	.word	0x080166aa
 8014868:	08016835 	.word	0x08016835

0801486c <_Bfree>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	69c6      	ldr	r6, [r0, #28]
 8014870:	4605      	mov	r5, r0
 8014872:	460c      	mov	r4, r1
 8014874:	b976      	cbnz	r6, 8014894 <_Bfree+0x28>
 8014876:	2010      	movs	r0, #16
 8014878:	f7fc ff3a 	bl	80116f0 <malloc>
 801487c:	4602      	mov	r2, r0
 801487e:	61e8      	str	r0, [r5, #28]
 8014880:	b920      	cbnz	r0, 801488c <_Bfree+0x20>
 8014882:	4b09      	ldr	r3, [pc, #36]	@ (80148a8 <_Bfree+0x3c>)
 8014884:	4809      	ldr	r0, [pc, #36]	@ (80148ac <_Bfree+0x40>)
 8014886:	218f      	movs	r1, #143	@ 0x8f
 8014888:	f7fe fda2 	bl	80133d0 <__assert_func>
 801488c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014890:	6006      	str	r6, [r0, #0]
 8014892:	60c6      	str	r6, [r0, #12]
 8014894:	b13c      	cbz	r4, 80148a6 <_Bfree+0x3a>
 8014896:	69eb      	ldr	r3, [r5, #28]
 8014898:	6862      	ldr	r2, [r4, #4]
 801489a:	68db      	ldr	r3, [r3, #12]
 801489c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148a0:	6021      	str	r1, [r4, #0]
 80148a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80148a6:	bd70      	pop	{r4, r5, r6, pc}
 80148a8:	080166aa 	.word	0x080166aa
 80148ac:	08016835 	.word	0x08016835

080148b0 <__multadd>:
 80148b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148b4:	690d      	ldr	r5, [r1, #16]
 80148b6:	4607      	mov	r7, r0
 80148b8:	460c      	mov	r4, r1
 80148ba:	461e      	mov	r6, r3
 80148bc:	f101 0c14 	add.w	ip, r1, #20
 80148c0:	2000      	movs	r0, #0
 80148c2:	f8dc 3000 	ldr.w	r3, [ip]
 80148c6:	b299      	uxth	r1, r3
 80148c8:	fb02 6101 	mla	r1, r2, r1, r6
 80148cc:	0c1e      	lsrs	r6, r3, #16
 80148ce:	0c0b      	lsrs	r3, r1, #16
 80148d0:	fb02 3306 	mla	r3, r2, r6, r3
 80148d4:	b289      	uxth	r1, r1
 80148d6:	3001      	adds	r0, #1
 80148d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80148dc:	4285      	cmp	r5, r0
 80148de:	f84c 1b04 	str.w	r1, [ip], #4
 80148e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80148e6:	dcec      	bgt.n	80148c2 <__multadd+0x12>
 80148e8:	b30e      	cbz	r6, 801492e <__multadd+0x7e>
 80148ea:	68a3      	ldr	r3, [r4, #8]
 80148ec:	42ab      	cmp	r3, r5
 80148ee:	dc19      	bgt.n	8014924 <__multadd+0x74>
 80148f0:	6861      	ldr	r1, [r4, #4]
 80148f2:	4638      	mov	r0, r7
 80148f4:	3101      	adds	r1, #1
 80148f6:	f7ff ff79 	bl	80147ec <_Balloc>
 80148fa:	4680      	mov	r8, r0
 80148fc:	b928      	cbnz	r0, 801490a <__multadd+0x5a>
 80148fe:	4602      	mov	r2, r0
 8014900:	4b0c      	ldr	r3, [pc, #48]	@ (8014934 <__multadd+0x84>)
 8014902:	480d      	ldr	r0, [pc, #52]	@ (8014938 <__multadd+0x88>)
 8014904:	21ba      	movs	r1, #186	@ 0xba
 8014906:	f7fe fd63 	bl	80133d0 <__assert_func>
 801490a:	6922      	ldr	r2, [r4, #16]
 801490c:	3202      	adds	r2, #2
 801490e:	f104 010c 	add.w	r1, r4, #12
 8014912:	0092      	lsls	r2, r2, #2
 8014914:	300c      	adds	r0, #12
 8014916:	f7fe fd42 	bl	801339e <memcpy>
 801491a:	4621      	mov	r1, r4
 801491c:	4638      	mov	r0, r7
 801491e:	f7ff ffa5 	bl	801486c <_Bfree>
 8014922:	4644      	mov	r4, r8
 8014924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014928:	3501      	adds	r5, #1
 801492a:	615e      	str	r6, [r3, #20]
 801492c:	6125      	str	r5, [r4, #16]
 801492e:	4620      	mov	r0, r4
 8014930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014934:	080167c4 	.word	0x080167c4
 8014938:	08016835 	.word	0x08016835

0801493c <__s2b>:
 801493c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014940:	460c      	mov	r4, r1
 8014942:	4615      	mov	r5, r2
 8014944:	461f      	mov	r7, r3
 8014946:	2209      	movs	r2, #9
 8014948:	3308      	adds	r3, #8
 801494a:	4606      	mov	r6, r0
 801494c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014950:	2100      	movs	r1, #0
 8014952:	2201      	movs	r2, #1
 8014954:	429a      	cmp	r2, r3
 8014956:	db09      	blt.n	801496c <__s2b+0x30>
 8014958:	4630      	mov	r0, r6
 801495a:	f7ff ff47 	bl	80147ec <_Balloc>
 801495e:	b940      	cbnz	r0, 8014972 <__s2b+0x36>
 8014960:	4602      	mov	r2, r0
 8014962:	4b19      	ldr	r3, [pc, #100]	@ (80149c8 <__s2b+0x8c>)
 8014964:	4819      	ldr	r0, [pc, #100]	@ (80149cc <__s2b+0x90>)
 8014966:	21d3      	movs	r1, #211	@ 0xd3
 8014968:	f7fe fd32 	bl	80133d0 <__assert_func>
 801496c:	0052      	lsls	r2, r2, #1
 801496e:	3101      	adds	r1, #1
 8014970:	e7f0      	b.n	8014954 <__s2b+0x18>
 8014972:	9b08      	ldr	r3, [sp, #32]
 8014974:	6143      	str	r3, [r0, #20]
 8014976:	2d09      	cmp	r5, #9
 8014978:	f04f 0301 	mov.w	r3, #1
 801497c:	6103      	str	r3, [r0, #16]
 801497e:	dd16      	ble.n	80149ae <__s2b+0x72>
 8014980:	f104 0909 	add.w	r9, r4, #9
 8014984:	46c8      	mov	r8, r9
 8014986:	442c      	add	r4, r5
 8014988:	f818 3b01 	ldrb.w	r3, [r8], #1
 801498c:	4601      	mov	r1, r0
 801498e:	3b30      	subs	r3, #48	@ 0x30
 8014990:	220a      	movs	r2, #10
 8014992:	4630      	mov	r0, r6
 8014994:	f7ff ff8c 	bl	80148b0 <__multadd>
 8014998:	45a0      	cmp	r8, r4
 801499a:	d1f5      	bne.n	8014988 <__s2b+0x4c>
 801499c:	f1a5 0408 	sub.w	r4, r5, #8
 80149a0:	444c      	add	r4, r9
 80149a2:	1b2d      	subs	r5, r5, r4
 80149a4:	1963      	adds	r3, r4, r5
 80149a6:	42bb      	cmp	r3, r7
 80149a8:	db04      	blt.n	80149b4 <__s2b+0x78>
 80149aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149ae:	340a      	adds	r4, #10
 80149b0:	2509      	movs	r5, #9
 80149b2:	e7f6      	b.n	80149a2 <__s2b+0x66>
 80149b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149b8:	4601      	mov	r1, r0
 80149ba:	3b30      	subs	r3, #48	@ 0x30
 80149bc:	220a      	movs	r2, #10
 80149be:	4630      	mov	r0, r6
 80149c0:	f7ff ff76 	bl	80148b0 <__multadd>
 80149c4:	e7ee      	b.n	80149a4 <__s2b+0x68>
 80149c6:	bf00      	nop
 80149c8:	080167c4 	.word	0x080167c4
 80149cc:	08016835 	.word	0x08016835

080149d0 <__hi0bits>:
 80149d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80149d4:	4603      	mov	r3, r0
 80149d6:	bf36      	itet	cc
 80149d8:	0403      	lslcc	r3, r0, #16
 80149da:	2000      	movcs	r0, #0
 80149dc:	2010      	movcc	r0, #16
 80149de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80149e2:	bf3c      	itt	cc
 80149e4:	021b      	lslcc	r3, r3, #8
 80149e6:	3008      	addcc	r0, #8
 80149e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80149ec:	bf3c      	itt	cc
 80149ee:	011b      	lslcc	r3, r3, #4
 80149f0:	3004      	addcc	r0, #4
 80149f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149f6:	bf3c      	itt	cc
 80149f8:	009b      	lslcc	r3, r3, #2
 80149fa:	3002      	addcc	r0, #2
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	db05      	blt.n	8014a0c <__hi0bits+0x3c>
 8014a00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a04:	f100 0001 	add.w	r0, r0, #1
 8014a08:	bf08      	it	eq
 8014a0a:	2020      	moveq	r0, #32
 8014a0c:	4770      	bx	lr

08014a0e <__lo0bits>:
 8014a0e:	6803      	ldr	r3, [r0, #0]
 8014a10:	4602      	mov	r2, r0
 8014a12:	f013 0007 	ands.w	r0, r3, #7
 8014a16:	d00b      	beq.n	8014a30 <__lo0bits+0x22>
 8014a18:	07d9      	lsls	r1, r3, #31
 8014a1a:	d421      	bmi.n	8014a60 <__lo0bits+0x52>
 8014a1c:	0798      	lsls	r0, r3, #30
 8014a1e:	bf49      	itett	mi
 8014a20:	085b      	lsrmi	r3, r3, #1
 8014a22:	089b      	lsrpl	r3, r3, #2
 8014a24:	2001      	movmi	r0, #1
 8014a26:	6013      	strmi	r3, [r2, #0]
 8014a28:	bf5c      	itt	pl
 8014a2a:	6013      	strpl	r3, [r2, #0]
 8014a2c:	2002      	movpl	r0, #2
 8014a2e:	4770      	bx	lr
 8014a30:	b299      	uxth	r1, r3
 8014a32:	b909      	cbnz	r1, 8014a38 <__lo0bits+0x2a>
 8014a34:	0c1b      	lsrs	r3, r3, #16
 8014a36:	2010      	movs	r0, #16
 8014a38:	b2d9      	uxtb	r1, r3
 8014a3a:	b909      	cbnz	r1, 8014a40 <__lo0bits+0x32>
 8014a3c:	3008      	adds	r0, #8
 8014a3e:	0a1b      	lsrs	r3, r3, #8
 8014a40:	0719      	lsls	r1, r3, #28
 8014a42:	bf04      	itt	eq
 8014a44:	091b      	lsreq	r3, r3, #4
 8014a46:	3004      	addeq	r0, #4
 8014a48:	0799      	lsls	r1, r3, #30
 8014a4a:	bf04      	itt	eq
 8014a4c:	089b      	lsreq	r3, r3, #2
 8014a4e:	3002      	addeq	r0, #2
 8014a50:	07d9      	lsls	r1, r3, #31
 8014a52:	d403      	bmi.n	8014a5c <__lo0bits+0x4e>
 8014a54:	085b      	lsrs	r3, r3, #1
 8014a56:	f100 0001 	add.w	r0, r0, #1
 8014a5a:	d003      	beq.n	8014a64 <__lo0bits+0x56>
 8014a5c:	6013      	str	r3, [r2, #0]
 8014a5e:	4770      	bx	lr
 8014a60:	2000      	movs	r0, #0
 8014a62:	4770      	bx	lr
 8014a64:	2020      	movs	r0, #32
 8014a66:	4770      	bx	lr

08014a68 <__i2b>:
 8014a68:	b510      	push	{r4, lr}
 8014a6a:	460c      	mov	r4, r1
 8014a6c:	2101      	movs	r1, #1
 8014a6e:	f7ff febd 	bl	80147ec <_Balloc>
 8014a72:	4602      	mov	r2, r0
 8014a74:	b928      	cbnz	r0, 8014a82 <__i2b+0x1a>
 8014a76:	4b05      	ldr	r3, [pc, #20]	@ (8014a8c <__i2b+0x24>)
 8014a78:	4805      	ldr	r0, [pc, #20]	@ (8014a90 <__i2b+0x28>)
 8014a7a:	f240 1145 	movw	r1, #325	@ 0x145
 8014a7e:	f7fe fca7 	bl	80133d0 <__assert_func>
 8014a82:	2301      	movs	r3, #1
 8014a84:	6144      	str	r4, [r0, #20]
 8014a86:	6103      	str	r3, [r0, #16]
 8014a88:	bd10      	pop	{r4, pc}
 8014a8a:	bf00      	nop
 8014a8c:	080167c4 	.word	0x080167c4
 8014a90:	08016835 	.word	0x08016835

08014a94 <__multiply>:
 8014a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a98:	4617      	mov	r7, r2
 8014a9a:	690a      	ldr	r2, [r1, #16]
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	bfa8      	it	ge
 8014aa2:	463b      	movge	r3, r7
 8014aa4:	4689      	mov	r9, r1
 8014aa6:	bfa4      	itt	ge
 8014aa8:	460f      	movge	r7, r1
 8014aaa:	4699      	movge	r9, r3
 8014aac:	693d      	ldr	r5, [r7, #16]
 8014aae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	eb05 060a 	add.w	r6, r5, sl
 8014aba:	42b3      	cmp	r3, r6
 8014abc:	b085      	sub	sp, #20
 8014abe:	bfb8      	it	lt
 8014ac0:	3101      	addlt	r1, #1
 8014ac2:	f7ff fe93 	bl	80147ec <_Balloc>
 8014ac6:	b930      	cbnz	r0, 8014ad6 <__multiply+0x42>
 8014ac8:	4602      	mov	r2, r0
 8014aca:	4b41      	ldr	r3, [pc, #260]	@ (8014bd0 <__multiply+0x13c>)
 8014acc:	4841      	ldr	r0, [pc, #260]	@ (8014bd4 <__multiply+0x140>)
 8014ace:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014ad2:	f7fe fc7d 	bl	80133d0 <__assert_func>
 8014ad6:	f100 0414 	add.w	r4, r0, #20
 8014ada:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014ade:	4623      	mov	r3, r4
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	4573      	cmp	r3, lr
 8014ae4:	d320      	bcc.n	8014b28 <__multiply+0x94>
 8014ae6:	f107 0814 	add.w	r8, r7, #20
 8014aea:	f109 0114 	add.w	r1, r9, #20
 8014aee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014af2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014af6:	9302      	str	r3, [sp, #8]
 8014af8:	1beb      	subs	r3, r5, r7
 8014afa:	3b15      	subs	r3, #21
 8014afc:	f023 0303 	bic.w	r3, r3, #3
 8014b00:	3304      	adds	r3, #4
 8014b02:	3715      	adds	r7, #21
 8014b04:	42bd      	cmp	r5, r7
 8014b06:	bf38      	it	cc
 8014b08:	2304      	movcc	r3, #4
 8014b0a:	9301      	str	r3, [sp, #4]
 8014b0c:	9b02      	ldr	r3, [sp, #8]
 8014b0e:	9103      	str	r1, [sp, #12]
 8014b10:	428b      	cmp	r3, r1
 8014b12:	d80c      	bhi.n	8014b2e <__multiply+0x9a>
 8014b14:	2e00      	cmp	r6, #0
 8014b16:	dd03      	ble.n	8014b20 <__multiply+0x8c>
 8014b18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d055      	beq.n	8014bcc <__multiply+0x138>
 8014b20:	6106      	str	r6, [r0, #16]
 8014b22:	b005      	add	sp, #20
 8014b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b28:	f843 2b04 	str.w	r2, [r3], #4
 8014b2c:	e7d9      	b.n	8014ae2 <__multiply+0x4e>
 8014b2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014b32:	f1ba 0f00 	cmp.w	sl, #0
 8014b36:	d01f      	beq.n	8014b78 <__multiply+0xe4>
 8014b38:	46c4      	mov	ip, r8
 8014b3a:	46a1      	mov	r9, r4
 8014b3c:	2700      	movs	r7, #0
 8014b3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014b42:	f8d9 3000 	ldr.w	r3, [r9]
 8014b46:	fa1f fb82 	uxth.w	fp, r2
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014b50:	443b      	add	r3, r7
 8014b52:	f8d9 7000 	ldr.w	r7, [r9]
 8014b56:	0c12      	lsrs	r2, r2, #16
 8014b58:	0c3f      	lsrs	r7, r7, #16
 8014b5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8014b5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b68:	4565      	cmp	r5, ip
 8014b6a:	f849 3b04 	str.w	r3, [r9], #4
 8014b6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014b72:	d8e4      	bhi.n	8014b3e <__multiply+0xaa>
 8014b74:	9b01      	ldr	r3, [sp, #4]
 8014b76:	50e7      	str	r7, [r4, r3]
 8014b78:	9b03      	ldr	r3, [sp, #12]
 8014b7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014b7e:	3104      	adds	r1, #4
 8014b80:	f1b9 0f00 	cmp.w	r9, #0
 8014b84:	d020      	beq.n	8014bc8 <__multiply+0x134>
 8014b86:	6823      	ldr	r3, [r4, #0]
 8014b88:	4647      	mov	r7, r8
 8014b8a:	46a4      	mov	ip, r4
 8014b8c:	f04f 0a00 	mov.w	sl, #0
 8014b90:	f8b7 b000 	ldrh.w	fp, [r7]
 8014b94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014b98:	fb09 220b 	mla	r2, r9, fp, r2
 8014b9c:	4452      	add	r2, sl
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ba4:	f84c 3b04 	str.w	r3, [ip], #4
 8014ba8:	f857 3b04 	ldr.w	r3, [r7], #4
 8014bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bb0:	f8bc 3000 	ldrh.w	r3, [ip]
 8014bb4:	fb09 330a 	mla	r3, r9, sl, r3
 8014bb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014bbc:	42bd      	cmp	r5, r7
 8014bbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bc2:	d8e5      	bhi.n	8014b90 <__multiply+0xfc>
 8014bc4:	9a01      	ldr	r2, [sp, #4]
 8014bc6:	50a3      	str	r3, [r4, r2]
 8014bc8:	3404      	adds	r4, #4
 8014bca:	e79f      	b.n	8014b0c <__multiply+0x78>
 8014bcc:	3e01      	subs	r6, #1
 8014bce:	e7a1      	b.n	8014b14 <__multiply+0x80>
 8014bd0:	080167c4 	.word	0x080167c4
 8014bd4:	08016835 	.word	0x08016835

08014bd8 <__pow5mult>:
 8014bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bdc:	4615      	mov	r5, r2
 8014bde:	f012 0203 	ands.w	r2, r2, #3
 8014be2:	4607      	mov	r7, r0
 8014be4:	460e      	mov	r6, r1
 8014be6:	d007      	beq.n	8014bf8 <__pow5mult+0x20>
 8014be8:	4c25      	ldr	r4, [pc, #148]	@ (8014c80 <__pow5mult+0xa8>)
 8014bea:	3a01      	subs	r2, #1
 8014bec:	2300      	movs	r3, #0
 8014bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014bf2:	f7ff fe5d 	bl	80148b0 <__multadd>
 8014bf6:	4606      	mov	r6, r0
 8014bf8:	10ad      	asrs	r5, r5, #2
 8014bfa:	d03d      	beq.n	8014c78 <__pow5mult+0xa0>
 8014bfc:	69fc      	ldr	r4, [r7, #28]
 8014bfe:	b97c      	cbnz	r4, 8014c20 <__pow5mult+0x48>
 8014c00:	2010      	movs	r0, #16
 8014c02:	f7fc fd75 	bl	80116f0 <malloc>
 8014c06:	4602      	mov	r2, r0
 8014c08:	61f8      	str	r0, [r7, #28]
 8014c0a:	b928      	cbnz	r0, 8014c18 <__pow5mult+0x40>
 8014c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8014c84 <__pow5mult+0xac>)
 8014c0e:	481e      	ldr	r0, [pc, #120]	@ (8014c88 <__pow5mult+0xb0>)
 8014c10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c14:	f7fe fbdc 	bl	80133d0 <__assert_func>
 8014c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c1c:	6004      	str	r4, [r0, #0]
 8014c1e:	60c4      	str	r4, [r0, #12]
 8014c20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c28:	b94c      	cbnz	r4, 8014c3e <__pow5mult+0x66>
 8014c2a:	f240 2171 	movw	r1, #625	@ 0x271
 8014c2e:	4638      	mov	r0, r7
 8014c30:	f7ff ff1a 	bl	8014a68 <__i2b>
 8014c34:	2300      	movs	r3, #0
 8014c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	6003      	str	r3, [r0, #0]
 8014c3e:	f04f 0900 	mov.w	r9, #0
 8014c42:	07eb      	lsls	r3, r5, #31
 8014c44:	d50a      	bpl.n	8014c5c <__pow5mult+0x84>
 8014c46:	4631      	mov	r1, r6
 8014c48:	4622      	mov	r2, r4
 8014c4a:	4638      	mov	r0, r7
 8014c4c:	f7ff ff22 	bl	8014a94 <__multiply>
 8014c50:	4631      	mov	r1, r6
 8014c52:	4680      	mov	r8, r0
 8014c54:	4638      	mov	r0, r7
 8014c56:	f7ff fe09 	bl	801486c <_Bfree>
 8014c5a:	4646      	mov	r6, r8
 8014c5c:	106d      	asrs	r5, r5, #1
 8014c5e:	d00b      	beq.n	8014c78 <__pow5mult+0xa0>
 8014c60:	6820      	ldr	r0, [r4, #0]
 8014c62:	b938      	cbnz	r0, 8014c74 <__pow5mult+0x9c>
 8014c64:	4622      	mov	r2, r4
 8014c66:	4621      	mov	r1, r4
 8014c68:	4638      	mov	r0, r7
 8014c6a:	f7ff ff13 	bl	8014a94 <__multiply>
 8014c6e:	6020      	str	r0, [r4, #0]
 8014c70:	f8c0 9000 	str.w	r9, [r0]
 8014c74:	4604      	mov	r4, r0
 8014c76:	e7e4      	b.n	8014c42 <__pow5mult+0x6a>
 8014c78:	4630      	mov	r0, r6
 8014c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c7e:	bf00      	nop
 8014c80:	080169f4 	.word	0x080169f4
 8014c84:	080166aa 	.word	0x080166aa
 8014c88:	08016835 	.word	0x08016835

08014c8c <__lshift>:
 8014c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c90:	460c      	mov	r4, r1
 8014c92:	6849      	ldr	r1, [r1, #4]
 8014c94:	6923      	ldr	r3, [r4, #16]
 8014c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014c9a:	68a3      	ldr	r3, [r4, #8]
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	4691      	mov	r9, r2
 8014ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014ca4:	f108 0601 	add.w	r6, r8, #1
 8014ca8:	42b3      	cmp	r3, r6
 8014caa:	db0b      	blt.n	8014cc4 <__lshift+0x38>
 8014cac:	4638      	mov	r0, r7
 8014cae:	f7ff fd9d 	bl	80147ec <_Balloc>
 8014cb2:	4605      	mov	r5, r0
 8014cb4:	b948      	cbnz	r0, 8014cca <__lshift+0x3e>
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	4b28      	ldr	r3, [pc, #160]	@ (8014d5c <__lshift+0xd0>)
 8014cba:	4829      	ldr	r0, [pc, #164]	@ (8014d60 <__lshift+0xd4>)
 8014cbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014cc0:	f7fe fb86 	bl	80133d0 <__assert_func>
 8014cc4:	3101      	adds	r1, #1
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	e7ee      	b.n	8014ca8 <__lshift+0x1c>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	f100 0114 	add.w	r1, r0, #20
 8014cd0:	f100 0210 	add.w	r2, r0, #16
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	4553      	cmp	r3, sl
 8014cd8:	db33      	blt.n	8014d42 <__lshift+0xb6>
 8014cda:	6920      	ldr	r0, [r4, #16]
 8014cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ce0:	f104 0314 	add.w	r3, r4, #20
 8014ce4:	f019 091f 	ands.w	r9, r9, #31
 8014ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014cec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014cf0:	d02b      	beq.n	8014d4a <__lshift+0xbe>
 8014cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8014cf6:	468a      	mov	sl, r1
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	6818      	ldr	r0, [r3, #0]
 8014cfc:	fa00 f009 	lsl.w	r0, r0, r9
 8014d00:	4310      	orrs	r0, r2
 8014d02:	f84a 0b04 	str.w	r0, [sl], #4
 8014d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d0a:	459c      	cmp	ip, r3
 8014d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d10:	d8f3      	bhi.n	8014cfa <__lshift+0x6e>
 8014d12:	ebac 0304 	sub.w	r3, ip, r4
 8014d16:	3b15      	subs	r3, #21
 8014d18:	f023 0303 	bic.w	r3, r3, #3
 8014d1c:	3304      	adds	r3, #4
 8014d1e:	f104 0015 	add.w	r0, r4, #21
 8014d22:	4560      	cmp	r0, ip
 8014d24:	bf88      	it	hi
 8014d26:	2304      	movhi	r3, #4
 8014d28:	50ca      	str	r2, [r1, r3]
 8014d2a:	b10a      	cbz	r2, 8014d30 <__lshift+0xa4>
 8014d2c:	f108 0602 	add.w	r6, r8, #2
 8014d30:	3e01      	subs	r6, #1
 8014d32:	4638      	mov	r0, r7
 8014d34:	612e      	str	r6, [r5, #16]
 8014d36:	4621      	mov	r1, r4
 8014d38:	f7ff fd98 	bl	801486c <_Bfree>
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d46:	3301      	adds	r3, #1
 8014d48:	e7c5      	b.n	8014cd6 <__lshift+0x4a>
 8014d4a:	3904      	subs	r1, #4
 8014d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d50:	f841 2f04 	str.w	r2, [r1, #4]!
 8014d54:	459c      	cmp	ip, r3
 8014d56:	d8f9      	bhi.n	8014d4c <__lshift+0xc0>
 8014d58:	e7ea      	b.n	8014d30 <__lshift+0xa4>
 8014d5a:	bf00      	nop
 8014d5c:	080167c4 	.word	0x080167c4
 8014d60:	08016835 	.word	0x08016835

08014d64 <__mcmp>:
 8014d64:	690a      	ldr	r2, [r1, #16]
 8014d66:	4603      	mov	r3, r0
 8014d68:	6900      	ldr	r0, [r0, #16]
 8014d6a:	1a80      	subs	r0, r0, r2
 8014d6c:	b530      	push	{r4, r5, lr}
 8014d6e:	d10e      	bne.n	8014d8e <__mcmp+0x2a>
 8014d70:	3314      	adds	r3, #20
 8014d72:	3114      	adds	r1, #20
 8014d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d84:	4295      	cmp	r5, r2
 8014d86:	d003      	beq.n	8014d90 <__mcmp+0x2c>
 8014d88:	d205      	bcs.n	8014d96 <__mcmp+0x32>
 8014d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d8e:	bd30      	pop	{r4, r5, pc}
 8014d90:	42a3      	cmp	r3, r4
 8014d92:	d3f3      	bcc.n	8014d7c <__mcmp+0x18>
 8014d94:	e7fb      	b.n	8014d8e <__mcmp+0x2a>
 8014d96:	2001      	movs	r0, #1
 8014d98:	e7f9      	b.n	8014d8e <__mcmp+0x2a>
	...

08014d9c <__mdiff>:
 8014d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da0:	4689      	mov	r9, r1
 8014da2:	4606      	mov	r6, r0
 8014da4:	4611      	mov	r1, r2
 8014da6:	4648      	mov	r0, r9
 8014da8:	4614      	mov	r4, r2
 8014daa:	f7ff ffdb 	bl	8014d64 <__mcmp>
 8014dae:	1e05      	subs	r5, r0, #0
 8014db0:	d112      	bne.n	8014dd8 <__mdiff+0x3c>
 8014db2:	4629      	mov	r1, r5
 8014db4:	4630      	mov	r0, r6
 8014db6:	f7ff fd19 	bl	80147ec <_Balloc>
 8014dba:	4602      	mov	r2, r0
 8014dbc:	b928      	cbnz	r0, 8014dca <__mdiff+0x2e>
 8014dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8014ebc <__mdiff+0x120>)
 8014dc0:	f240 2137 	movw	r1, #567	@ 0x237
 8014dc4:	483e      	ldr	r0, [pc, #248]	@ (8014ec0 <__mdiff+0x124>)
 8014dc6:	f7fe fb03 	bl	80133d0 <__assert_func>
 8014dca:	2301      	movs	r3, #1
 8014dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	b003      	add	sp, #12
 8014dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd8:	bfbc      	itt	lt
 8014dda:	464b      	movlt	r3, r9
 8014ddc:	46a1      	movlt	r9, r4
 8014dde:	4630      	mov	r0, r6
 8014de0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014de4:	bfba      	itte	lt
 8014de6:	461c      	movlt	r4, r3
 8014de8:	2501      	movlt	r5, #1
 8014dea:	2500      	movge	r5, #0
 8014dec:	f7ff fcfe 	bl	80147ec <_Balloc>
 8014df0:	4602      	mov	r2, r0
 8014df2:	b918      	cbnz	r0, 8014dfc <__mdiff+0x60>
 8014df4:	4b31      	ldr	r3, [pc, #196]	@ (8014ebc <__mdiff+0x120>)
 8014df6:	f240 2145 	movw	r1, #581	@ 0x245
 8014dfa:	e7e3      	b.n	8014dc4 <__mdiff+0x28>
 8014dfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e00:	6926      	ldr	r6, [r4, #16]
 8014e02:	60c5      	str	r5, [r0, #12]
 8014e04:	f109 0310 	add.w	r3, r9, #16
 8014e08:	f109 0514 	add.w	r5, r9, #20
 8014e0c:	f104 0e14 	add.w	lr, r4, #20
 8014e10:	f100 0b14 	add.w	fp, r0, #20
 8014e14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014e18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014e1c:	9301      	str	r3, [sp, #4]
 8014e1e:	46d9      	mov	r9, fp
 8014e20:	f04f 0c00 	mov.w	ip, #0
 8014e24:	9b01      	ldr	r3, [sp, #4]
 8014e26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e2e:	9301      	str	r3, [sp, #4]
 8014e30:	fa1f f38a 	uxth.w	r3, sl
 8014e34:	4619      	mov	r1, r3
 8014e36:	b283      	uxth	r3, r0
 8014e38:	1acb      	subs	r3, r1, r3
 8014e3a:	0c00      	lsrs	r0, r0, #16
 8014e3c:	4463      	add	r3, ip
 8014e3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014e42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014e4c:	4576      	cmp	r6, lr
 8014e4e:	f849 3b04 	str.w	r3, [r9], #4
 8014e52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e56:	d8e5      	bhi.n	8014e24 <__mdiff+0x88>
 8014e58:	1b33      	subs	r3, r6, r4
 8014e5a:	3b15      	subs	r3, #21
 8014e5c:	f023 0303 	bic.w	r3, r3, #3
 8014e60:	3415      	adds	r4, #21
 8014e62:	3304      	adds	r3, #4
 8014e64:	42a6      	cmp	r6, r4
 8014e66:	bf38      	it	cc
 8014e68:	2304      	movcc	r3, #4
 8014e6a:	441d      	add	r5, r3
 8014e6c:	445b      	add	r3, fp
 8014e6e:	461e      	mov	r6, r3
 8014e70:	462c      	mov	r4, r5
 8014e72:	4544      	cmp	r4, r8
 8014e74:	d30e      	bcc.n	8014e94 <__mdiff+0xf8>
 8014e76:	f108 0103 	add.w	r1, r8, #3
 8014e7a:	1b49      	subs	r1, r1, r5
 8014e7c:	f021 0103 	bic.w	r1, r1, #3
 8014e80:	3d03      	subs	r5, #3
 8014e82:	45a8      	cmp	r8, r5
 8014e84:	bf38      	it	cc
 8014e86:	2100      	movcc	r1, #0
 8014e88:	440b      	add	r3, r1
 8014e8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e8e:	b191      	cbz	r1, 8014eb6 <__mdiff+0x11a>
 8014e90:	6117      	str	r7, [r2, #16]
 8014e92:	e79d      	b.n	8014dd0 <__mdiff+0x34>
 8014e94:	f854 1b04 	ldr.w	r1, [r4], #4
 8014e98:	46e6      	mov	lr, ip
 8014e9a:	0c08      	lsrs	r0, r1, #16
 8014e9c:	fa1c fc81 	uxtah	ip, ip, r1
 8014ea0:	4471      	add	r1, lr
 8014ea2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014ea6:	b289      	uxth	r1, r1
 8014ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014eac:	f846 1b04 	str.w	r1, [r6], #4
 8014eb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014eb4:	e7dd      	b.n	8014e72 <__mdiff+0xd6>
 8014eb6:	3f01      	subs	r7, #1
 8014eb8:	e7e7      	b.n	8014e8a <__mdiff+0xee>
 8014eba:	bf00      	nop
 8014ebc:	080167c4 	.word	0x080167c4
 8014ec0:	08016835 	.word	0x08016835

08014ec4 <__ulp>:
 8014ec4:	b082      	sub	sp, #8
 8014ec6:	ed8d 0b00 	vstr	d0, [sp]
 8014eca:	9a01      	ldr	r2, [sp, #4]
 8014ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8014f0c <__ulp+0x48>)
 8014ece:	4013      	ands	r3, r2
 8014ed0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	dc08      	bgt.n	8014eea <__ulp+0x26>
 8014ed8:	425b      	negs	r3, r3
 8014eda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014ede:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014ee2:	da04      	bge.n	8014eee <__ulp+0x2a>
 8014ee4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014ee8:	4113      	asrs	r3, r2
 8014eea:	2200      	movs	r2, #0
 8014eec:	e008      	b.n	8014f00 <__ulp+0x3c>
 8014eee:	f1a2 0314 	sub.w	r3, r2, #20
 8014ef2:	2b1e      	cmp	r3, #30
 8014ef4:	bfda      	itte	le
 8014ef6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014efa:	40da      	lsrle	r2, r3
 8014efc:	2201      	movgt	r2, #1
 8014efe:	2300      	movs	r3, #0
 8014f00:	4619      	mov	r1, r3
 8014f02:	4610      	mov	r0, r2
 8014f04:	ec41 0b10 	vmov	d0, r0, r1
 8014f08:	b002      	add	sp, #8
 8014f0a:	4770      	bx	lr
 8014f0c:	7ff00000 	.word	0x7ff00000

08014f10 <__b2d>:
 8014f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f14:	6906      	ldr	r6, [r0, #16]
 8014f16:	f100 0814 	add.w	r8, r0, #20
 8014f1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014f1e:	1f37      	subs	r7, r6, #4
 8014f20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f24:	4610      	mov	r0, r2
 8014f26:	f7ff fd53 	bl	80149d0 <__hi0bits>
 8014f2a:	f1c0 0320 	rsb	r3, r0, #32
 8014f2e:	280a      	cmp	r0, #10
 8014f30:	600b      	str	r3, [r1, #0]
 8014f32:	491b      	ldr	r1, [pc, #108]	@ (8014fa0 <__b2d+0x90>)
 8014f34:	dc15      	bgt.n	8014f62 <__b2d+0x52>
 8014f36:	f1c0 0c0b 	rsb	ip, r0, #11
 8014f3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8014f3e:	45b8      	cmp	r8, r7
 8014f40:	ea43 0501 	orr.w	r5, r3, r1
 8014f44:	bf34      	ite	cc
 8014f46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f4a:	2300      	movcs	r3, #0
 8014f4c:	3015      	adds	r0, #21
 8014f4e:	fa02 f000 	lsl.w	r0, r2, r0
 8014f52:	fa23 f30c 	lsr.w	r3, r3, ip
 8014f56:	4303      	orrs	r3, r0
 8014f58:	461c      	mov	r4, r3
 8014f5a:	ec45 4b10 	vmov	d0, r4, r5
 8014f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f62:	45b8      	cmp	r8, r7
 8014f64:	bf3a      	itte	cc
 8014f66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8014f6e:	2300      	movcs	r3, #0
 8014f70:	380b      	subs	r0, #11
 8014f72:	d012      	beq.n	8014f9a <__b2d+0x8a>
 8014f74:	f1c0 0120 	rsb	r1, r0, #32
 8014f78:	fa23 f401 	lsr.w	r4, r3, r1
 8014f7c:	4082      	lsls	r2, r0
 8014f7e:	4322      	orrs	r2, r4
 8014f80:	4547      	cmp	r7, r8
 8014f82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014f86:	bf8c      	ite	hi
 8014f88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014f8c:	2200      	movls	r2, #0
 8014f8e:	4083      	lsls	r3, r0
 8014f90:	40ca      	lsrs	r2, r1
 8014f92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014f96:	4313      	orrs	r3, r2
 8014f98:	e7de      	b.n	8014f58 <__b2d+0x48>
 8014f9a:	ea42 0501 	orr.w	r5, r2, r1
 8014f9e:	e7db      	b.n	8014f58 <__b2d+0x48>
 8014fa0:	3ff00000 	.word	0x3ff00000

08014fa4 <__d2b>:
 8014fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014fa8:	460f      	mov	r7, r1
 8014faa:	2101      	movs	r1, #1
 8014fac:	ec59 8b10 	vmov	r8, r9, d0
 8014fb0:	4616      	mov	r6, r2
 8014fb2:	f7ff fc1b 	bl	80147ec <_Balloc>
 8014fb6:	4604      	mov	r4, r0
 8014fb8:	b930      	cbnz	r0, 8014fc8 <__d2b+0x24>
 8014fba:	4602      	mov	r2, r0
 8014fbc:	4b23      	ldr	r3, [pc, #140]	@ (801504c <__d2b+0xa8>)
 8014fbe:	4824      	ldr	r0, [pc, #144]	@ (8015050 <__d2b+0xac>)
 8014fc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8014fc4:	f7fe fa04 	bl	80133d0 <__assert_func>
 8014fc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014fcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fd0:	b10d      	cbz	r5, 8014fd6 <__d2b+0x32>
 8014fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014fd6:	9301      	str	r3, [sp, #4]
 8014fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8014fdc:	d023      	beq.n	8015026 <__d2b+0x82>
 8014fde:	4668      	mov	r0, sp
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	f7ff fd14 	bl	8014a0e <__lo0bits>
 8014fe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014fea:	b1d0      	cbz	r0, 8015022 <__d2b+0x7e>
 8014fec:	f1c0 0320 	rsb	r3, r0, #32
 8014ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8014ff4:	430b      	orrs	r3, r1
 8014ff6:	40c2      	lsrs	r2, r0
 8014ff8:	6163      	str	r3, [r4, #20]
 8014ffa:	9201      	str	r2, [sp, #4]
 8014ffc:	9b01      	ldr	r3, [sp, #4]
 8014ffe:	61a3      	str	r3, [r4, #24]
 8015000:	2b00      	cmp	r3, #0
 8015002:	bf0c      	ite	eq
 8015004:	2201      	moveq	r2, #1
 8015006:	2202      	movne	r2, #2
 8015008:	6122      	str	r2, [r4, #16]
 801500a:	b1a5      	cbz	r5, 8015036 <__d2b+0x92>
 801500c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015010:	4405      	add	r5, r0
 8015012:	603d      	str	r5, [r7, #0]
 8015014:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015018:	6030      	str	r0, [r6, #0]
 801501a:	4620      	mov	r0, r4
 801501c:	b003      	add	sp, #12
 801501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015022:	6161      	str	r1, [r4, #20]
 8015024:	e7ea      	b.n	8014ffc <__d2b+0x58>
 8015026:	a801      	add	r0, sp, #4
 8015028:	f7ff fcf1 	bl	8014a0e <__lo0bits>
 801502c:	9b01      	ldr	r3, [sp, #4]
 801502e:	6163      	str	r3, [r4, #20]
 8015030:	3020      	adds	r0, #32
 8015032:	2201      	movs	r2, #1
 8015034:	e7e8      	b.n	8015008 <__d2b+0x64>
 8015036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801503a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801503e:	6038      	str	r0, [r7, #0]
 8015040:	6918      	ldr	r0, [r3, #16]
 8015042:	f7ff fcc5 	bl	80149d0 <__hi0bits>
 8015046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801504a:	e7e5      	b.n	8015018 <__d2b+0x74>
 801504c:	080167c4 	.word	0x080167c4
 8015050:	08016835 	.word	0x08016835

08015054 <__ratio>:
 8015054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015058:	b085      	sub	sp, #20
 801505a:	e9cd 1000 	strd	r1, r0, [sp]
 801505e:	a902      	add	r1, sp, #8
 8015060:	f7ff ff56 	bl	8014f10 <__b2d>
 8015064:	9800      	ldr	r0, [sp, #0]
 8015066:	a903      	add	r1, sp, #12
 8015068:	ec55 4b10 	vmov	r4, r5, d0
 801506c:	f7ff ff50 	bl	8014f10 <__b2d>
 8015070:	9b01      	ldr	r3, [sp, #4]
 8015072:	6919      	ldr	r1, [r3, #16]
 8015074:	9b00      	ldr	r3, [sp, #0]
 8015076:	691b      	ldr	r3, [r3, #16]
 8015078:	1ac9      	subs	r1, r1, r3
 801507a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801507e:	1a9b      	subs	r3, r3, r2
 8015080:	ec5b ab10 	vmov	sl, fp, d0
 8015084:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015088:	2b00      	cmp	r3, #0
 801508a:	bfce      	itee	gt
 801508c:	462a      	movgt	r2, r5
 801508e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015092:	465a      	movle	r2, fp
 8015094:	462f      	mov	r7, r5
 8015096:	46d9      	mov	r9, fp
 8015098:	bfcc      	ite	gt
 801509a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801509e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80150a2:	464b      	mov	r3, r9
 80150a4:	4652      	mov	r2, sl
 80150a6:	4620      	mov	r0, r4
 80150a8:	4639      	mov	r1, r7
 80150aa:	f7eb fbcf 	bl	800084c <__aeabi_ddiv>
 80150ae:	ec41 0b10 	vmov	d0, r0, r1
 80150b2:	b005      	add	sp, #20
 80150b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150b8 <__copybits>:
 80150b8:	3901      	subs	r1, #1
 80150ba:	b570      	push	{r4, r5, r6, lr}
 80150bc:	1149      	asrs	r1, r1, #5
 80150be:	6914      	ldr	r4, [r2, #16]
 80150c0:	3101      	adds	r1, #1
 80150c2:	f102 0314 	add.w	r3, r2, #20
 80150c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80150ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80150ce:	1f05      	subs	r5, r0, #4
 80150d0:	42a3      	cmp	r3, r4
 80150d2:	d30c      	bcc.n	80150ee <__copybits+0x36>
 80150d4:	1aa3      	subs	r3, r4, r2
 80150d6:	3b11      	subs	r3, #17
 80150d8:	f023 0303 	bic.w	r3, r3, #3
 80150dc:	3211      	adds	r2, #17
 80150de:	42a2      	cmp	r2, r4
 80150e0:	bf88      	it	hi
 80150e2:	2300      	movhi	r3, #0
 80150e4:	4418      	add	r0, r3
 80150e6:	2300      	movs	r3, #0
 80150e8:	4288      	cmp	r0, r1
 80150ea:	d305      	bcc.n	80150f8 <__copybits+0x40>
 80150ec:	bd70      	pop	{r4, r5, r6, pc}
 80150ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80150f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80150f6:	e7eb      	b.n	80150d0 <__copybits+0x18>
 80150f8:	f840 3b04 	str.w	r3, [r0], #4
 80150fc:	e7f4      	b.n	80150e8 <__copybits+0x30>

080150fe <__any_on>:
 80150fe:	f100 0214 	add.w	r2, r0, #20
 8015102:	6900      	ldr	r0, [r0, #16]
 8015104:	114b      	asrs	r3, r1, #5
 8015106:	4298      	cmp	r0, r3
 8015108:	b510      	push	{r4, lr}
 801510a:	db11      	blt.n	8015130 <__any_on+0x32>
 801510c:	dd0a      	ble.n	8015124 <__any_on+0x26>
 801510e:	f011 011f 	ands.w	r1, r1, #31
 8015112:	d007      	beq.n	8015124 <__any_on+0x26>
 8015114:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015118:	fa24 f001 	lsr.w	r0, r4, r1
 801511c:	fa00 f101 	lsl.w	r1, r0, r1
 8015120:	428c      	cmp	r4, r1
 8015122:	d10b      	bne.n	801513c <__any_on+0x3e>
 8015124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015128:	4293      	cmp	r3, r2
 801512a:	d803      	bhi.n	8015134 <__any_on+0x36>
 801512c:	2000      	movs	r0, #0
 801512e:	bd10      	pop	{r4, pc}
 8015130:	4603      	mov	r3, r0
 8015132:	e7f7      	b.n	8015124 <__any_on+0x26>
 8015134:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015138:	2900      	cmp	r1, #0
 801513a:	d0f5      	beq.n	8015128 <__any_on+0x2a>
 801513c:	2001      	movs	r0, #1
 801513e:	e7f6      	b.n	801512e <__any_on+0x30>

08015140 <__ascii_wctomb>:
 8015140:	4603      	mov	r3, r0
 8015142:	4608      	mov	r0, r1
 8015144:	b141      	cbz	r1, 8015158 <__ascii_wctomb+0x18>
 8015146:	2aff      	cmp	r2, #255	@ 0xff
 8015148:	d904      	bls.n	8015154 <__ascii_wctomb+0x14>
 801514a:	228a      	movs	r2, #138	@ 0x8a
 801514c:	601a      	str	r2, [r3, #0]
 801514e:	f04f 30ff 	mov.w	r0, #4294967295
 8015152:	4770      	bx	lr
 8015154:	700a      	strb	r2, [r1, #0]
 8015156:	2001      	movs	r0, #1
 8015158:	4770      	bx	lr

0801515a <__ssputs_r>:
 801515a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801515e:	688e      	ldr	r6, [r1, #8]
 8015160:	461f      	mov	r7, r3
 8015162:	42be      	cmp	r6, r7
 8015164:	680b      	ldr	r3, [r1, #0]
 8015166:	4682      	mov	sl, r0
 8015168:	460c      	mov	r4, r1
 801516a:	4690      	mov	r8, r2
 801516c:	d82d      	bhi.n	80151ca <__ssputs_r+0x70>
 801516e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015172:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015176:	d026      	beq.n	80151c6 <__ssputs_r+0x6c>
 8015178:	6965      	ldr	r5, [r4, #20]
 801517a:	6909      	ldr	r1, [r1, #16]
 801517c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015180:	eba3 0901 	sub.w	r9, r3, r1
 8015184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015188:	1c7b      	adds	r3, r7, #1
 801518a:	444b      	add	r3, r9
 801518c:	106d      	asrs	r5, r5, #1
 801518e:	429d      	cmp	r5, r3
 8015190:	bf38      	it	cc
 8015192:	461d      	movcc	r5, r3
 8015194:	0553      	lsls	r3, r2, #21
 8015196:	d527      	bpl.n	80151e8 <__ssputs_r+0x8e>
 8015198:	4629      	mov	r1, r5
 801519a:	f7fc fadb 	bl	8011754 <_malloc_r>
 801519e:	4606      	mov	r6, r0
 80151a0:	b360      	cbz	r0, 80151fc <__ssputs_r+0xa2>
 80151a2:	6921      	ldr	r1, [r4, #16]
 80151a4:	464a      	mov	r2, r9
 80151a6:	f7fe f8fa 	bl	801339e <memcpy>
 80151aa:	89a3      	ldrh	r3, [r4, #12]
 80151ac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151b4:	81a3      	strh	r3, [r4, #12]
 80151b6:	6126      	str	r6, [r4, #16]
 80151b8:	6165      	str	r5, [r4, #20]
 80151ba:	444e      	add	r6, r9
 80151bc:	eba5 0509 	sub.w	r5, r5, r9
 80151c0:	6026      	str	r6, [r4, #0]
 80151c2:	60a5      	str	r5, [r4, #8]
 80151c4:	463e      	mov	r6, r7
 80151c6:	42be      	cmp	r6, r7
 80151c8:	d900      	bls.n	80151cc <__ssputs_r+0x72>
 80151ca:	463e      	mov	r6, r7
 80151cc:	6820      	ldr	r0, [r4, #0]
 80151ce:	4632      	mov	r2, r6
 80151d0:	4641      	mov	r1, r8
 80151d2:	f7fd ff5a 	bl	801308a <memmove>
 80151d6:	68a3      	ldr	r3, [r4, #8]
 80151d8:	1b9b      	subs	r3, r3, r6
 80151da:	60a3      	str	r3, [r4, #8]
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	4433      	add	r3, r6
 80151e0:	6023      	str	r3, [r4, #0]
 80151e2:	2000      	movs	r0, #0
 80151e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151e8:	462a      	mov	r2, r5
 80151ea:	f000 f9e6 	bl	80155ba <_realloc_r>
 80151ee:	4606      	mov	r6, r0
 80151f0:	2800      	cmp	r0, #0
 80151f2:	d1e0      	bne.n	80151b6 <__ssputs_r+0x5c>
 80151f4:	6921      	ldr	r1, [r4, #16]
 80151f6:	4650      	mov	r0, sl
 80151f8:	f7fe ff62 	bl	80140c0 <_free_r>
 80151fc:	230c      	movs	r3, #12
 80151fe:	f8ca 3000 	str.w	r3, [sl]
 8015202:	89a3      	ldrh	r3, [r4, #12]
 8015204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015208:	81a3      	strh	r3, [r4, #12]
 801520a:	f04f 30ff 	mov.w	r0, #4294967295
 801520e:	e7e9      	b.n	80151e4 <__ssputs_r+0x8a>

08015210 <_svfiprintf_r>:
 8015210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015214:	4698      	mov	r8, r3
 8015216:	898b      	ldrh	r3, [r1, #12]
 8015218:	061b      	lsls	r3, r3, #24
 801521a:	b09d      	sub	sp, #116	@ 0x74
 801521c:	4607      	mov	r7, r0
 801521e:	460d      	mov	r5, r1
 8015220:	4614      	mov	r4, r2
 8015222:	d510      	bpl.n	8015246 <_svfiprintf_r+0x36>
 8015224:	690b      	ldr	r3, [r1, #16]
 8015226:	b973      	cbnz	r3, 8015246 <_svfiprintf_r+0x36>
 8015228:	2140      	movs	r1, #64	@ 0x40
 801522a:	f7fc fa93 	bl	8011754 <_malloc_r>
 801522e:	6028      	str	r0, [r5, #0]
 8015230:	6128      	str	r0, [r5, #16]
 8015232:	b930      	cbnz	r0, 8015242 <_svfiprintf_r+0x32>
 8015234:	230c      	movs	r3, #12
 8015236:	603b      	str	r3, [r7, #0]
 8015238:	f04f 30ff 	mov.w	r0, #4294967295
 801523c:	b01d      	add	sp, #116	@ 0x74
 801523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015242:	2340      	movs	r3, #64	@ 0x40
 8015244:	616b      	str	r3, [r5, #20]
 8015246:	2300      	movs	r3, #0
 8015248:	9309      	str	r3, [sp, #36]	@ 0x24
 801524a:	2320      	movs	r3, #32
 801524c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015250:	f8cd 800c 	str.w	r8, [sp, #12]
 8015254:	2330      	movs	r3, #48	@ 0x30
 8015256:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80153f4 <_svfiprintf_r+0x1e4>
 801525a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801525e:	f04f 0901 	mov.w	r9, #1
 8015262:	4623      	mov	r3, r4
 8015264:	469a      	mov	sl, r3
 8015266:	f813 2b01 	ldrb.w	r2, [r3], #1
 801526a:	b10a      	cbz	r2, 8015270 <_svfiprintf_r+0x60>
 801526c:	2a25      	cmp	r2, #37	@ 0x25
 801526e:	d1f9      	bne.n	8015264 <_svfiprintf_r+0x54>
 8015270:	ebba 0b04 	subs.w	fp, sl, r4
 8015274:	d00b      	beq.n	801528e <_svfiprintf_r+0x7e>
 8015276:	465b      	mov	r3, fp
 8015278:	4622      	mov	r2, r4
 801527a:	4629      	mov	r1, r5
 801527c:	4638      	mov	r0, r7
 801527e:	f7ff ff6c 	bl	801515a <__ssputs_r>
 8015282:	3001      	adds	r0, #1
 8015284:	f000 80a7 	beq.w	80153d6 <_svfiprintf_r+0x1c6>
 8015288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801528a:	445a      	add	r2, fp
 801528c:	9209      	str	r2, [sp, #36]	@ 0x24
 801528e:	f89a 3000 	ldrb.w	r3, [sl]
 8015292:	2b00      	cmp	r3, #0
 8015294:	f000 809f 	beq.w	80153d6 <_svfiprintf_r+0x1c6>
 8015298:	2300      	movs	r3, #0
 801529a:	f04f 32ff 	mov.w	r2, #4294967295
 801529e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152a2:	f10a 0a01 	add.w	sl, sl, #1
 80152a6:	9304      	str	r3, [sp, #16]
 80152a8:	9307      	str	r3, [sp, #28]
 80152aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80152b0:	4654      	mov	r4, sl
 80152b2:	2205      	movs	r2, #5
 80152b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152b8:	484e      	ldr	r0, [pc, #312]	@ (80153f4 <_svfiprintf_r+0x1e4>)
 80152ba:	f7ea ff89 	bl	80001d0 <memchr>
 80152be:	9a04      	ldr	r2, [sp, #16]
 80152c0:	b9d8      	cbnz	r0, 80152fa <_svfiprintf_r+0xea>
 80152c2:	06d0      	lsls	r0, r2, #27
 80152c4:	bf44      	itt	mi
 80152c6:	2320      	movmi	r3, #32
 80152c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152cc:	0711      	lsls	r1, r2, #28
 80152ce:	bf44      	itt	mi
 80152d0:	232b      	movmi	r3, #43	@ 0x2b
 80152d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152d6:	f89a 3000 	ldrb.w	r3, [sl]
 80152da:	2b2a      	cmp	r3, #42	@ 0x2a
 80152dc:	d015      	beq.n	801530a <_svfiprintf_r+0xfa>
 80152de:	9a07      	ldr	r2, [sp, #28]
 80152e0:	4654      	mov	r4, sl
 80152e2:	2000      	movs	r0, #0
 80152e4:	f04f 0c0a 	mov.w	ip, #10
 80152e8:	4621      	mov	r1, r4
 80152ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152ee:	3b30      	subs	r3, #48	@ 0x30
 80152f0:	2b09      	cmp	r3, #9
 80152f2:	d94b      	bls.n	801538c <_svfiprintf_r+0x17c>
 80152f4:	b1b0      	cbz	r0, 8015324 <_svfiprintf_r+0x114>
 80152f6:	9207      	str	r2, [sp, #28]
 80152f8:	e014      	b.n	8015324 <_svfiprintf_r+0x114>
 80152fa:	eba0 0308 	sub.w	r3, r0, r8
 80152fe:	fa09 f303 	lsl.w	r3, r9, r3
 8015302:	4313      	orrs	r3, r2
 8015304:	9304      	str	r3, [sp, #16]
 8015306:	46a2      	mov	sl, r4
 8015308:	e7d2      	b.n	80152b0 <_svfiprintf_r+0xa0>
 801530a:	9b03      	ldr	r3, [sp, #12]
 801530c:	1d19      	adds	r1, r3, #4
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	9103      	str	r1, [sp, #12]
 8015312:	2b00      	cmp	r3, #0
 8015314:	bfbb      	ittet	lt
 8015316:	425b      	neglt	r3, r3
 8015318:	f042 0202 	orrlt.w	r2, r2, #2
 801531c:	9307      	strge	r3, [sp, #28]
 801531e:	9307      	strlt	r3, [sp, #28]
 8015320:	bfb8      	it	lt
 8015322:	9204      	strlt	r2, [sp, #16]
 8015324:	7823      	ldrb	r3, [r4, #0]
 8015326:	2b2e      	cmp	r3, #46	@ 0x2e
 8015328:	d10a      	bne.n	8015340 <_svfiprintf_r+0x130>
 801532a:	7863      	ldrb	r3, [r4, #1]
 801532c:	2b2a      	cmp	r3, #42	@ 0x2a
 801532e:	d132      	bne.n	8015396 <_svfiprintf_r+0x186>
 8015330:	9b03      	ldr	r3, [sp, #12]
 8015332:	1d1a      	adds	r2, r3, #4
 8015334:	681b      	ldr	r3, [r3, #0]
 8015336:	9203      	str	r2, [sp, #12]
 8015338:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801533c:	3402      	adds	r4, #2
 801533e:	9305      	str	r3, [sp, #20]
 8015340:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015404 <_svfiprintf_r+0x1f4>
 8015344:	7821      	ldrb	r1, [r4, #0]
 8015346:	2203      	movs	r2, #3
 8015348:	4650      	mov	r0, sl
 801534a:	f7ea ff41 	bl	80001d0 <memchr>
 801534e:	b138      	cbz	r0, 8015360 <_svfiprintf_r+0x150>
 8015350:	9b04      	ldr	r3, [sp, #16]
 8015352:	eba0 000a 	sub.w	r0, r0, sl
 8015356:	2240      	movs	r2, #64	@ 0x40
 8015358:	4082      	lsls	r2, r0
 801535a:	4313      	orrs	r3, r2
 801535c:	3401      	adds	r4, #1
 801535e:	9304      	str	r3, [sp, #16]
 8015360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015364:	4824      	ldr	r0, [pc, #144]	@ (80153f8 <_svfiprintf_r+0x1e8>)
 8015366:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801536a:	2206      	movs	r2, #6
 801536c:	f7ea ff30 	bl	80001d0 <memchr>
 8015370:	2800      	cmp	r0, #0
 8015372:	d036      	beq.n	80153e2 <_svfiprintf_r+0x1d2>
 8015374:	4b21      	ldr	r3, [pc, #132]	@ (80153fc <_svfiprintf_r+0x1ec>)
 8015376:	bb1b      	cbnz	r3, 80153c0 <_svfiprintf_r+0x1b0>
 8015378:	9b03      	ldr	r3, [sp, #12]
 801537a:	3307      	adds	r3, #7
 801537c:	f023 0307 	bic.w	r3, r3, #7
 8015380:	3308      	adds	r3, #8
 8015382:	9303      	str	r3, [sp, #12]
 8015384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015386:	4433      	add	r3, r6
 8015388:	9309      	str	r3, [sp, #36]	@ 0x24
 801538a:	e76a      	b.n	8015262 <_svfiprintf_r+0x52>
 801538c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015390:	460c      	mov	r4, r1
 8015392:	2001      	movs	r0, #1
 8015394:	e7a8      	b.n	80152e8 <_svfiprintf_r+0xd8>
 8015396:	2300      	movs	r3, #0
 8015398:	3401      	adds	r4, #1
 801539a:	9305      	str	r3, [sp, #20]
 801539c:	4619      	mov	r1, r3
 801539e:	f04f 0c0a 	mov.w	ip, #10
 80153a2:	4620      	mov	r0, r4
 80153a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153a8:	3a30      	subs	r2, #48	@ 0x30
 80153aa:	2a09      	cmp	r2, #9
 80153ac:	d903      	bls.n	80153b6 <_svfiprintf_r+0x1a6>
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d0c6      	beq.n	8015340 <_svfiprintf_r+0x130>
 80153b2:	9105      	str	r1, [sp, #20]
 80153b4:	e7c4      	b.n	8015340 <_svfiprintf_r+0x130>
 80153b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80153ba:	4604      	mov	r4, r0
 80153bc:	2301      	movs	r3, #1
 80153be:	e7f0      	b.n	80153a2 <_svfiprintf_r+0x192>
 80153c0:	ab03      	add	r3, sp, #12
 80153c2:	9300      	str	r3, [sp, #0]
 80153c4:	462a      	mov	r2, r5
 80153c6:	4b0e      	ldr	r3, [pc, #56]	@ (8015400 <_svfiprintf_r+0x1f0>)
 80153c8:	a904      	add	r1, sp, #16
 80153ca:	4638      	mov	r0, r7
 80153cc:	f7fd f980 	bl	80126d0 <_printf_float>
 80153d0:	1c42      	adds	r2, r0, #1
 80153d2:	4606      	mov	r6, r0
 80153d4:	d1d6      	bne.n	8015384 <_svfiprintf_r+0x174>
 80153d6:	89ab      	ldrh	r3, [r5, #12]
 80153d8:	065b      	lsls	r3, r3, #25
 80153da:	f53f af2d 	bmi.w	8015238 <_svfiprintf_r+0x28>
 80153de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80153e0:	e72c      	b.n	801523c <_svfiprintf_r+0x2c>
 80153e2:	ab03      	add	r3, sp, #12
 80153e4:	9300      	str	r3, [sp, #0]
 80153e6:	462a      	mov	r2, r5
 80153e8:	4b05      	ldr	r3, [pc, #20]	@ (8015400 <_svfiprintf_r+0x1f0>)
 80153ea:	a904      	add	r1, sp, #16
 80153ec:	4638      	mov	r0, r7
 80153ee:	f7fd fc07 	bl	8012c00 <_printf_i>
 80153f2:	e7ed      	b.n	80153d0 <_svfiprintf_r+0x1c0>
 80153f4:	0801688e 	.word	0x0801688e
 80153f8:	08016898 	.word	0x08016898
 80153fc:	080126d1 	.word	0x080126d1
 8015400:	0801515b 	.word	0x0801515b
 8015404:	08016894 	.word	0x08016894

08015408 <__sflush_r>:
 8015408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015410:	0716      	lsls	r6, r2, #28
 8015412:	4605      	mov	r5, r0
 8015414:	460c      	mov	r4, r1
 8015416:	d454      	bmi.n	80154c2 <__sflush_r+0xba>
 8015418:	684b      	ldr	r3, [r1, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	dc02      	bgt.n	8015424 <__sflush_r+0x1c>
 801541e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015420:	2b00      	cmp	r3, #0
 8015422:	dd48      	ble.n	80154b6 <__sflush_r+0xae>
 8015424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015426:	2e00      	cmp	r6, #0
 8015428:	d045      	beq.n	80154b6 <__sflush_r+0xae>
 801542a:	2300      	movs	r3, #0
 801542c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015430:	682f      	ldr	r7, [r5, #0]
 8015432:	6a21      	ldr	r1, [r4, #32]
 8015434:	602b      	str	r3, [r5, #0]
 8015436:	d030      	beq.n	801549a <__sflush_r+0x92>
 8015438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801543a:	89a3      	ldrh	r3, [r4, #12]
 801543c:	0759      	lsls	r1, r3, #29
 801543e:	d505      	bpl.n	801544c <__sflush_r+0x44>
 8015440:	6863      	ldr	r3, [r4, #4]
 8015442:	1ad2      	subs	r2, r2, r3
 8015444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015446:	b10b      	cbz	r3, 801544c <__sflush_r+0x44>
 8015448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801544a:	1ad2      	subs	r2, r2, r3
 801544c:	2300      	movs	r3, #0
 801544e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015450:	6a21      	ldr	r1, [r4, #32]
 8015452:	4628      	mov	r0, r5
 8015454:	47b0      	blx	r6
 8015456:	1c43      	adds	r3, r0, #1
 8015458:	89a3      	ldrh	r3, [r4, #12]
 801545a:	d106      	bne.n	801546a <__sflush_r+0x62>
 801545c:	6829      	ldr	r1, [r5, #0]
 801545e:	291d      	cmp	r1, #29
 8015460:	d82b      	bhi.n	80154ba <__sflush_r+0xb2>
 8015462:	4a2a      	ldr	r2, [pc, #168]	@ (801550c <__sflush_r+0x104>)
 8015464:	40ca      	lsrs	r2, r1
 8015466:	07d6      	lsls	r6, r2, #31
 8015468:	d527      	bpl.n	80154ba <__sflush_r+0xb2>
 801546a:	2200      	movs	r2, #0
 801546c:	6062      	str	r2, [r4, #4]
 801546e:	04d9      	lsls	r1, r3, #19
 8015470:	6922      	ldr	r2, [r4, #16]
 8015472:	6022      	str	r2, [r4, #0]
 8015474:	d504      	bpl.n	8015480 <__sflush_r+0x78>
 8015476:	1c42      	adds	r2, r0, #1
 8015478:	d101      	bne.n	801547e <__sflush_r+0x76>
 801547a:	682b      	ldr	r3, [r5, #0]
 801547c:	b903      	cbnz	r3, 8015480 <__sflush_r+0x78>
 801547e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015482:	602f      	str	r7, [r5, #0]
 8015484:	b1b9      	cbz	r1, 80154b6 <__sflush_r+0xae>
 8015486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801548a:	4299      	cmp	r1, r3
 801548c:	d002      	beq.n	8015494 <__sflush_r+0x8c>
 801548e:	4628      	mov	r0, r5
 8015490:	f7fe fe16 	bl	80140c0 <_free_r>
 8015494:	2300      	movs	r3, #0
 8015496:	6363      	str	r3, [r4, #52]	@ 0x34
 8015498:	e00d      	b.n	80154b6 <__sflush_r+0xae>
 801549a:	2301      	movs	r3, #1
 801549c:	4628      	mov	r0, r5
 801549e:	47b0      	blx	r6
 80154a0:	4602      	mov	r2, r0
 80154a2:	1c50      	adds	r0, r2, #1
 80154a4:	d1c9      	bne.n	801543a <__sflush_r+0x32>
 80154a6:	682b      	ldr	r3, [r5, #0]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d0c6      	beq.n	801543a <__sflush_r+0x32>
 80154ac:	2b1d      	cmp	r3, #29
 80154ae:	d001      	beq.n	80154b4 <__sflush_r+0xac>
 80154b0:	2b16      	cmp	r3, #22
 80154b2:	d11e      	bne.n	80154f2 <__sflush_r+0xea>
 80154b4:	602f      	str	r7, [r5, #0]
 80154b6:	2000      	movs	r0, #0
 80154b8:	e022      	b.n	8015500 <__sflush_r+0xf8>
 80154ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154be:	b21b      	sxth	r3, r3
 80154c0:	e01b      	b.n	80154fa <__sflush_r+0xf2>
 80154c2:	690f      	ldr	r7, [r1, #16]
 80154c4:	2f00      	cmp	r7, #0
 80154c6:	d0f6      	beq.n	80154b6 <__sflush_r+0xae>
 80154c8:	0793      	lsls	r3, r2, #30
 80154ca:	680e      	ldr	r6, [r1, #0]
 80154cc:	bf08      	it	eq
 80154ce:	694b      	ldreq	r3, [r1, #20]
 80154d0:	600f      	str	r7, [r1, #0]
 80154d2:	bf18      	it	ne
 80154d4:	2300      	movne	r3, #0
 80154d6:	eba6 0807 	sub.w	r8, r6, r7
 80154da:	608b      	str	r3, [r1, #8]
 80154dc:	f1b8 0f00 	cmp.w	r8, #0
 80154e0:	dde9      	ble.n	80154b6 <__sflush_r+0xae>
 80154e2:	6a21      	ldr	r1, [r4, #32]
 80154e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80154e6:	4643      	mov	r3, r8
 80154e8:	463a      	mov	r2, r7
 80154ea:	4628      	mov	r0, r5
 80154ec:	47b0      	blx	r6
 80154ee:	2800      	cmp	r0, #0
 80154f0:	dc08      	bgt.n	8015504 <__sflush_r+0xfc>
 80154f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154fa:	81a3      	strh	r3, [r4, #12]
 80154fc:	f04f 30ff 	mov.w	r0, #4294967295
 8015500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015504:	4407      	add	r7, r0
 8015506:	eba8 0800 	sub.w	r8, r8, r0
 801550a:	e7e7      	b.n	80154dc <__sflush_r+0xd4>
 801550c:	20400001 	.word	0x20400001

08015510 <_fflush_r>:
 8015510:	b538      	push	{r3, r4, r5, lr}
 8015512:	690b      	ldr	r3, [r1, #16]
 8015514:	4605      	mov	r5, r0
 8015516:	460c      	mov	r4, r1
 8015518:	b913      	cbnz	r3, 8015520 <_fflush_r+0x10>
 801551a:	2500      	movs	r5, #0
 801551c:	4628      	mov	r0, r5
 801551e:	bd38      	pop	{r3, r4, r5, pc}
 8015520:	b118      	cbz	r0, 801552a <_fflush_r+0x1a>
 8015522:	6a03      	ldr	r3, [r0, #32]
 8015524:	b90b      	cbnz	r3, 801552a <_fflush_r+0x1a>
 8015526:	f7fd fd15 	bl	8012f54 <__sinit>
 801552a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d0f3      	beq.n	801551a <_fflush_r+0xa>
 8015532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015534:	07d0      	lsls	r0, r2, #31
 8015536:	d404      	bmi.n	8015542 <_fflush_r+0x32>
 8015538:	0599      	lsls	r1, r3, #22
 801553a:	d402      	bmi.n	8015542 <_fflush_r+0x32>
 801553c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801553e:	f7fd ff24 	bl	801338a <__retarget_lock_acquire_recursive>
 8015542:	4628      	mov	r0, r5
 8015544:	4621      	mov	r1, r4
 8015546:	f7ff ff5f 	bl	8015408 <__sflush_r>
 801554a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801554c:	07da      	lsls	r2, r3, #31
 801554e:	4605      	mov	r5, r0
 8015550:	d4e4      	bmi.n	801551c <_fflush_r+0xc>
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	059b      	lsls	r3, r3, #22
 8015556:	d4e1      	bmi.n	801551c <_fflush_r+0xc>
 8015558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801555a:	f7fd ff17 	bl	801338c <__retarget_lock_release_recursive>
 801555e:	e7dd      	b.n	801551c <_fflush_r+0xc>

08015560 <fiprintf>:
 8015560:	b40e      	push	{r1, r2, r3}
 8015562:	b503      	push	{r0, r1, lr}
 8015564:	4601      	mov	r1, r0
 8015566:	ab03      	add	r3, sp, #12
 8015568:	4805      	ldr	r0, [pc, #20]	@ (8015580 <fiprintf+0x20>)
 801556a:	f853 2b04 	ldr.w	r2, [r3], #4
 801556e:	6800      	ldr	r0, [r0, #0]
 8015570:	9301      	str	r3, [sp, #4]
 8015572:	f000 f879 	bl	8015668 <_vfiprintf_r>
 8015576:	b002      	add	sp, #8
 8015578:	f85d eb04 	ldr.w	lr, [sp], #4
 801557c:	b003      	add	sp, #12
 801557e:	4770      	bx	lr
 8015580:	2000040c 	.word	0x2000040c

08015584 <abort>:
 8015584:	b508      	push	{r3, lr}
 8015586:	2006      	movs	r0, #6
 8015588:	f000 fa42 	bl	8015a10 <raise>
 801558c:	2001      	movs	r0, #1
 801558e:	f7ee f9bd 	bl	800390c <_exit>

08015592 <_calloc_r>:
 8015592:	b570      	push	{r4, r5, r6, lr}
 8015594:	fba1 5402 	umull	r5, r4, r1, r2
 8015598:	b934      	cbnz	r4, 80155a8 <_calloc_r+0x16>
 801559a:	4629      	mov	r1, r5
 801559c:	f7fc f8da 	bl	8011754 <_malloc_r>
 80155a0:	4606      	mov	r6, r0
 80155a2:	b928      	cbnz	r0, 80155b0 <_calloc_r+0x1e>
 80155a4:	4630      	mov	r0, r6
 80155a6:	bd70      	pop	{r4, r5, r6, pc}
 80155a8:	220c      	movs	r2, #12
 80155aa:	6002      	str	r2, [r0, #0]
 80155ac:	2600      	movs	r6, #0
 80155ae:	e7f9      	b.n	80155a4 <_calloc_r+0x12>
 80155b0:	462a      	mov	r2, r5
 80155b2:	4621      	mov	r1, r4
 80155b4:	f7fd fd83 	bl	80130be <memset>
 80155b8:	e7f4      	b.n	80155a4 <_calloc_r+0x12>

080155ba <_realloc_r>:
 80155ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155be:	4607      	mov	r7, r0
 80155c0:	4614      	mov	r4, r2
 80155c2:	460d      	mov	r5, r1
 80155c4:	b921      	cbnz	r1, 80155d0 <_realloc_r+0x16>
 80155c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155ca:	4611      	mov	r1, r2
 80155cc:	f7fc b8c2 	b.w	8011754 <_malloc_r>
 80155d0:	b92a      	cbnz	r2, 80155de <_realloc_r+0x24>
 80155d2:	f7fe fd75 	bl	80140c0 <_free_r>
 80155d6:	4625      	mov	r5, r4
 80155d8:	4628      	mov	r0, r5
 80155da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155de:	f000 fa33 	bl	8015a48 <_malloc_usable_size_r>
 80155e2:	4284      	cmp	r4, r0
 80155e4:	4606      	mov	r6, r0
 80155e6:	d802      	bhi.n	80155ee <_realloc_r+0x34>
 80155e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80155ec:	d8f4      	bhi.n	80155d8 <_realloc_r+0x1e>
 80155ee:	4621      	mov	r1, r4
 80155f0:	4638      	mov	r0, r7
 80155f2:	f7fc f8af 	bl	8011754 <_malloc_r>
 80155f6:	4680      	mov	r8, r0
 80155f8:	b908      	cbnz	r0, 80155fe <_realloc_r+0x44>
 80155fa:	4645      	mov	r5, r8
 80155fc:	e7ec      	b.n	80155d8 <_realloc_r+0x1e>
 80155fe:	42b4      	cmp	r4, r6
 8015600:	4622      	mov	r2, r4
 8015602:	4629      	mov	r1, r5
 8015604:	bf28      	it	cs
 8015606:	4632      	movcs	r2, r6
 8015608:	f7fd fec9 	bl	801339e <memcpy>
 801560c:	4629      	mov	r1, r5
 801560e:	4638      	mov	r0, r7
 8015610:	f7fe fd56 	bl	80140c0 <_free_r>
 8015614:	e7f1      	b.n	80155fa <_realloc_r+0x40>

08015616 <__sfputc_r>:
 8015616:	6893      	ldr	r3, [r2, #8]
 8015618:	3b01      	subs	r3, #1
 801561a:	2b00      	cmp	r3, #0
 801561c:	b410      	push	{r4}
 801561e:	6093      	str	r3, [r2, #8]
 8015620:	da08      	bge.n	8015634 <__sfputc_r+0x1e>
 8015622:	6994      	ldr	r4, [r2, #24]
 8015624:	42a3      	cmp	r3, r4
 8015626:	db01      	blt.n	801562c <__sfputc_r+0x16>
 8015628:	290a      	cmp	r1, #10
 801562a:	d103      	bne.n	8015634 <__sfputc_r+0x1e>
 801562c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015630:	f000 b932 	b.w	8015898 <__swbuf_r>
 8015634:	6813      	ldr	r3, [r2, #0]
 8015636:	1c58      	adds	r0, r3, #1
 8015638:	6010      	str	r0, [r2, #0]
 801563a:	7019      	strb	r1, [r3, #0]
 801563c:	4608      	mov	r0, r1
 801563e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015642:	4770      	bx	lr

08015644 <__sfputs_r>:
 8015644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015646:	4606      	mov	r6, r0
 8015648:	460f      	mov	r7, r1
 801564a:	4614      	mov	r4, r2
 801564c:	18d5      	adds	r5, r2, r3
 801564e:	42ac      	cmp	r4, r5
 8015650:	d101      	bne.n	8015656 <__sfputs_r+0x12>
 8015652:	2000      	movs	r0, #0
 8015654:	e007      	b.n	8015666 <__sfputs_r+0x22>
 8015656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801565a:	463a      	mov	r2, r7
 801565c:	4630      	mov	r0, r6
 801565e:	f7ff ffda 	bl	8015616 <__sfputc_r>
 8015662:	1c43      	adds	r3, r0, #1
 8015664:	d1f3      	bne.n	801564e <__sfputs_r+0xa>
 8015666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015668 <_vfiprintf_r>:
 8015668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801566c:	460d      	mov	r5, r1
 801566e:	b09d      	sub	sp, #116	@ 0x74
 8015670:	4614      	mov	r4, r2
 8015672:	4698      	mov	r8, r3
 8015674:	4606      	mov	r6, r0
 8015676:	b118      	cbz	r0, 8015680 <_vfiprintf_r+0x18>
 8015678:	6a03      	ldr	r3, [r0, #32]
 801567a:	b90b      	cbnz	r3, 8015680 <_vfiprintf_r+0x18>
 801567c:	f7fd fc6a 	bl	8012f54 <__sinit>
 8015680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015682:	07d9      	lsls	r1, r3, #31
 8015684:	d405      	bmi.n	8015692 <_vfiprintf_r+0x2a>
 8015686:	89ab      	ldrh	r3, [r5, #12]
 8015688:	059a      	lsls	r2, r3, #22
 801568a:	d402      	bmi.n	8015692 <_vfiprintf_r+0x2a>
 801568c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801568e:	f7fd fe7c 	bl	801338a <__retarget_lock_acquire_recursive>
 8015692:	89ab      	ldrh	r3, [r5, #12]
 8015694:	071b      	lsls	r3, r3, #28
 8015696:	d501      	bpl.n	801569c <_vfiprintf_r+0x34>
 8015698:	692b      	ldr	r3, [r5, #16]
 801569a:	b99b      	cbnz	r3, 80156c4 <_vfiprintf_r+0x5c>
 801569c:	4629      	mov	r1, r5
 801569e:	4630      	mov	r0, r6
 80156a0:	f000 f938 	bl	8015914 <__swsetup_r>
 80156a4:	b170      	cbz	r0, 80156c4 <_vfiprintf_r+0x5c>
 80156a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156a8:	07dc      	lsls	r4, r3, #31
 80156aa:	d504      	bpl.n	80156b6 <_vfiprintf_r+0x4e>
 80156ac:	f04f 30ff 	mov.w	r0, #4294967295
 80156b0:	b01d      	add	sp, #116	@ 0x74
 80156b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b6:	89ab      	ldrh	r3, [r5, #12]
 80156b8:	0598      	lsls	r0, r3, #22
 80156ba:	d4f7      	bmi.n	80156ac <_vfiprintf_r+0x44>
 80156bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156be:	f7fd fe65 	bl	801338c <__retarget_lock_release_recursive>
 80156c2:	e7f3      	b.n	80156ac <_vfiprintf_r+0x44>
 80156c4:	2300      	movs	r3, #0
 80156c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80156c8:	2320      	movs	r3, #32
 80156ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80156ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80156d2:	2330      	movs	r3, #48	@ 0x30
 80156d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015884 <_vfiprintf_r+0x21c>
 80156d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80156dc:	f04f 0901 	mov.w	r9, #1
 80156e0:	4623      	mov	r3, r4
 80156e2:	469a      	mov	sl, r3
 80156e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156e8:	b10a      	cbz	r2, 80156ee <_vfiprintf_r+0x86>
 80156ea:	2a25      	cmp	r2, #37	@ 0x25
 80156ec:	d1f9      	bne.n	80156e2 <_vfiprintf_r+0x7a>
 80156ee:	ebba 0b04 	subs.w	fp, sl, r4
 80156f2:	d00b      	beq.n	801570c <_vfiprintf_r+0xa4>
 80156f4:	465b      	mov	r3, fp
 80156f6:	4622      	mov	r2, r4
 80156f8:	4629      	mov	r1, r5
 80156fa:	4630      	mov	r0, r6
 80156fc:	f7ff ffa2 	bl	8015644 <__sfputs_r>
 8015700:	3001      	adds	r0, #1
 8015702:	f000 80a7 	beq.w	8015854 <_vfiprintf_r+0x1ec>
 8015706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015708:	445a      	add	r2, fp
 801570a:	9209      	str	r2, [sp, #36]	@ 0x24
 801570c:	f89a 3000 	ldrb.w	r3, [sl]
 8015710:	2b00      	cmp	r3, #0
 8015712:	f000 809f 	beq.w	8015854 <_vfiprintf_r+0x1ec>
 8015716:	2300      	movs	r3, #0
 8015718:	f04f 32ff 	mov.w	r2, #4294967295
 801571c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015720:	f10a 0a01 	add.w	sl, sl, #1
 8015724:	9304      	str	r3, [sp, #16]
 8015726:	9307      	str	r3, [sp, #28]
 8015728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801572c:	931a      	str	r3, [sp, #104]	@ 0x68
 801572e:	4654      	mov	r4, sl
 8015730:	2205      	movs	r2, #5
 8015732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015736:	4853      	ldr	r0, [pc, #332]	@ (8015884 <_vfiprintf_r+0x21c>)
 8015738:	f7ea fd4a 	bl	80001d0 <memchr>
 801573c:	9a04      	ldr	r2, [sp, #16]
 801573e:	b9d8      	cbnz	r0, 8015778 <_vfiprintf_r+0x110>
 8015740:	06d1      	lsls	r1, r2, #27
 8015742:	bf44      	itt	mi
 8015744:	2320      	movmi	r3, #32
 8015746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801574a:	0713      	lsls	r3, r2, #28
 801574c:	bf44      	itt	mi
 801574e:	232b      	movmi	r3, #43	@ 0x2b
 8015750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015754:	f89a 3000 	ldrb.w	r3, [sl]
 8015758:	2b2a      	cmp	r3, #42	@ 0x2a
 801575a:	d015      	beq.n	8015788 <_vfiprintf_r+0x120>
 801575c:	9a07      	ldr	r2, [sp, #28]
 801575e:	4654      	mov	r4, sl
 8015760:	2000      	movs	r0, #0
 8015762:	f04f 0c0a 	mov.w	ip, #10
 8015766:	4621      	mov	r1, r4
 8015768:	f811 3b01 	ldrb.w	r3, [r1], #1
 801576c:	3b30      	subs	r3, #48	@ 0x30
 801576e:	2b09      	cmp	r3, #9
 8015770:	d94b      	bls.n	801580a <_vfiprintf_r+0x1a2>
 8015772:	b1b0      	cbz	r0, 80157a2 <_vfiprintf_r+0x13a>
 8015774:	9207      	str	r2, [sp, #28]
 8015776:	e014      	b.n	80157a2 <_vfiprintf_r+0x13a>
 8015778:	eba0 0308 	sub.w	r3, r0, r8
 801577c:	fa09 f303 	lsl.w	r3, r9, r3
 8015780:	4313      	orrs	r3, r2
 8015782:	9304      	str	r3, [sp, #16]
 8015784:	46a2      	mov	sl, r4
 8015786:	e7d2      	b.n	801572e <_vfiprintf_r+0xc6>
 8015788:	9b03      	ldr	r3, [sp, #12]
 801578a:	1d19      	adds	r1, r3, #4
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	9103      	str	r1, [sp, #12]
 8015790:	2b00      	cmp	r3, #0
 8015792:	bfbb      	ittet	lt
 8015794:	425b      	neglt	r3, r3
 8015796:	f042 0202 	orrlt.w	r2, r2, #2
 801579a:	9307      	strge	r3, [sp, #28]
 801579c:	9307      	strlt	r3, [sp, #28]
 801579e:	bfb8      	it	lt
 80157a0:	9204      	strlt	r2, [sp, #16]
 80157a2:	7823      	ldrb	r3, [r4, #0]
 80157a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80157a6:	d10a      	bne.n	80157be <_vfiprintf_r+0x156>
 80157a8:	7863      	ldrb	r3, [r4, #1]
 80157aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80157ac:	d132      	bne.n	8015814 <_vfiprintf_r+0x1ac>
 80157ae:	9b03      	ldr	r3, [sp, #12]
 80157b0:	1d1a      	adds	r2, r3, #4
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	9203      	str	r2, [sp, #12]
 80157b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80157ba:	3402      	adds	r4, #2
 80157bc:	9305      	str	r3, [sp, #20]
 80157be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015894 <_vfiprintf_r+0x22c>
 80157c2:	7821      	ldrb	r1, [r4, #0]
 80157c4:	2203      	movs	r2, #3
 80157c6:	4650      	mov	r0, sl
 80157c8:	f7ea fd02 	bl	80001d0 <memchr>
 80157cc:	b138      	cbz	r0, 80157de <_vfiprintf_r+0x176>
 80157ce:	9b04      	ldr	r3, [sp, #16]
 80157d0:	eba0 000a 	sub.w	r0, r0, sl
 80157d4:	2240      	movs	r2, #64	@ 0x40
 80157d6:	4082      	lsls	r2, r0
 80157d8:	4313      	orrs	r3, r2
 80157da:	3401      	adds	r4, #1
 80157dc:	9304      	str	r3, [sp, #16]
 80157de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157e2:	4829      	ldr	r0, [pc, #164]	@ (8015888 <_vfiprintf_r+0x220>)
 80157e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80157e8:	2206      	movs	r2, #6
 80157ea:	f7ea fcf1 	bl	80001d0 <memchr>
 80157ee:	2800      	cmp	r0, #0
 80157f0:	d03f      	beq.n	8015872 <_vfiprintf_r+0x20a>
 80157f2:	4b26      	ldr	r3, [pc, #152]	@ (801588c <_vfiprintf_r+0x224>)
 80157f4:	bb1b      	cbnz	r3, 801583e <_vfiprintf_r+0x1d6>
 80157f6:	9b03      	ldr	r3, [sp, #12]
 80157f8:	3307      	adds	r3, #7
 80157fa:	f023 0307 	bic.w	r3, r3, #7
 80157fe:	3308      	adds	r3, #8
 8015800:	9303      	str	r3, [sp, #12]
 8015802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015804:	443b      	add	r3, r7
 8015806:	9309      	str	r3, [sp, #36]	@ 0x24
 8015808:	e76a      	b.n	80156e0 <_vfiprintf_r+0x78>
 801580a:	fb0c 3202 	mla	r2, ip, r2, r3
 801580e:	460c      	mov	r4, r1
 8015810:	2001      	movs	r0, #1
 8015812:	e7a8      	b.n	8015766 <_vfiprintf_r+0xfe>
 8015814:	2300      	movs	r3, #0
 8015816:	3401      	adds	r4, #1
 8015818:	9305      	str	r3, [sp, #20]
 801581a:	4619      	mov	r1, r3
 801581c:	f04f 0c0a 	mov.w	ip, #10
 8015820:	4620      	mov	r0, r4
 8015822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015826:	3a30      	subs	r2, #48	@ 0x30
 8015828:	2a09      	cmp	r2, #9
 801582a:	d903      	bls.n	8015834 <_vfiprintf_r+0x1cc>
 801582c:	2b00      	cmp	r3, #0
 801582e:	d0c6      	beq.n	80157be <_vfiprintf_r+0x156>
 8015830:	9105      	str	r1, [sp, #20]
 8015832:	e7c4      	b.n	80157be <_vfiprintf_r+0x156>
 8015834:	fb0c 2101 	mla	r1, ip, r1, r2
 8015838:	4604      	mov	r4, r0
 801583a:	2301      	movs	r3, #1
 801583c:	e7f0      	b.n	8015820 <_vfiprintf_r+0x1b8>
 801583e:	ab03      	add	r3, sp, #12
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	462a      	mov	r2, r5
 8015844:	4b12      	ldr	r3, [pc, #72]	@ (8015890 <_vfiprintf_r+0x228>)
 8015846:	a904      	add	r1, sp, #16
 8015848:	4630      	mov	r0, r6
 801584a:	f7fc ff41 	bl	80126d0 <_printf_float>
 801584e:	4607      	mov	r7, r0
 8015850:	1c78      	adds	r0, r7, #1
 8015852:	d1d6      	bne.n	8015802 <_vfiprintf_r+0x19a>
 8015854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015856:	07d9      	lsls	r1, r3, #31
 8015858:	d405      	bmi.n	8015866 <_vfiprintf_r+0x1fe>
 801585a:	89ab      	ldrh	r3, [r5, #12]
 801585c:	059a      	lsls	r2, r3, #22
 801585e:	d402      	bmi.n	8015866 <_vfiprintf_r+0x1fe>
 8015860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015862:	f7fd fd93 	bl	801338c <__retarget_lock_release_recursive>
 8015866:	89ab      	ldrh	r3, [r5, #12]
 8015868:	065b      	lsls	r3, r3, #25
 801586a:	f53f af1f 	bmi.w	80156ac <_vfiprintf_r+0x44>
 801586e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015870:	e71e      	b.n	80156b0 <_vfiprintf_r+0x48>
 8015872:	ab03      	add	r3, sp, #12
 8015874:	9300      	str	r3, [sp, #0]
 8015876:	462a      	mov	r2, r5
 8015878:	4b05      	ldr	r3, [pc, #20]	@ (8015890 <_vfiprintf_r+0x228>)
 801587a:	a904      	add	r1, sp, #16
 801587c:	4630      	mov	r0, r6
 801587e:	f7fd f9bf 	bl	8012c00 <_printf_i>
 8015882:	e7e4      	b.n	801584e <_vfiprintf_r+0x1e6>
 8015884:	0801688e 	.word	0x0801688e
 8015888:	08016898 	.word	0x08016898
 801588c:	080126d1 	.word	0x080126d1
 8015890:	08015645 	.word	0x08015645
 8015894:	08016894 	.word	0x08016894

08015898 <__swbuf_r>:
 8015898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801589a:	460e      	mov	r6, r1
 801589c:	4614      	mov	r4, r2
 801589e:	4605      	mov	r5, r0
 80158a0:	b118      	cbz	r0, 80158aa <__swbuf_r+0x12>
 80158a2:	6a03      	ldr	r3, [r0, #32]
 80158a4:	b90b      	cbnz	r3, 80158aa <__swbuf_r+0x12>
 80158a6:	f7fd fb55 	bl	8012f54 <__sinit>
 80158aa:	69a3      	ldr	r3, [r4, #24]
 80158ac:	60a3      	str	r3, [r4, #8]
 80158ae:	89a3      	ldrh	r3, [r4, #12]
 80158b0:	071a      	lsls	r2, r3, #28
 80158b2:	d501      	bpl.n	80158b8 <__swbuf_r+0x20>
 80158b4:	6923      	ldr	r3, [r4, #16]
 80158b6:	b943      	cbnz	r3, 80158ca <__swbuf_r+0x32>
 80158b8:	4621      	mov	r1, r4
 80158ba:	4628      	mov	r0, r5
 80158bc:	f000 f82a 	bl	8015914 <__swsetup_r>
 80158c0:	b118      	cbz	r0, 80158ca <__swbuf_r+0x32>
 80158c2:	f04f 37ff 	mov.w	r7, #4294967295
 80158c6:	4638      	mov	r0, r7
 80158c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ca:	6823      	ldr	r3, [r4, #0]
 80158cc:	6922      	ldr	r2, [r4, #16]
 80158ce:	1a98      	subs	r0, r3, r2
 80158d0:	6963      	ldr	r3, [r4, #20]
 80158d2:	b2f6      	uxtb	r6, r6
 80158d4:	4283      	cmp	r3, r0
 80158d6:	4637      	mov	r7, r6
 80158d8:	dc05      	bgt.n	80158e6 <__swbuf_r+0x4e>
 80158da:	4621      	mov	r1, r4
 80158dc:	4628      	mov	r0, r5
 80158de:	f7ff fe17 	bl	8015510 <_fflush_r>
 80158e2:	2800      	cmp	r0, #0
 80158e4:	d1ed      	bne.n	80158c2 <__swbuf_r+0x2a>
 80158e6:	68a3      	ldr	r3, [r4, #8]
 80158e8:	3b01      	subs	r3, #1
 80158ea:	60a3      	str	r3, [r4, #8]
 80158ec:	6823      	ldr	r3, [r4, #0]
 80158ee:	1c5a      	adds	r2, r3, #1
 80158f0:	6022      	str	r2, [r4, #0]
 80158f2:	701e      	strb	r6, [r3, #0]
 80158f4:	6962      	ldr	r2, [r4, #20]
 80158f6:	1c43      	adds	r3, r0, #1
 80158f8:	429a      	cmp	r2, r3
 80158fa:	d004      	beq.n	8015906 <__swbuf_r+0x6e>
 80158fc:	89a3      	ldrh	r3, [r4, #12]
 80158fe:	07db      	lsls	r3, r3, #31
 8015900:	d5e1      	bpl.n	80158c6 <__swbuf_r+0x2e>
 8015902:	2e0a      	cmp	r6, #10
 8015904:	d1df      	bne.n	80158c6 <__swbuf_r+0x2e>
 8015906:	4621      	mov	r1, r4
 8015908:	4628      	mov	r0, r5
 801590a:	f7ff fe01 	bl	8015510 <_fflush_r>
 801590e:	2800      	cmp	r0, #0
 8015910:	d0d9      	beq.n	80158c6 <__swbuf_r+0x2e>
 8015912:	e7d6      	b.n	80158c2 <__swbuf_r+0x2a>

08015914 <__swsetup_r>:
 8015914:	b538      	push	{r3, r4, r5, lr}
 8015916:	4b29      	ldr	r3, [pc, #164]	@ (80159bc <__swsetup_r+0xa8>)
 8015918:	4605      	mov	r5, r0
 801591a:	6818      	ldr	r0, [r3, #0]
 801591c:	460c      	mov	r4, r1
 801591e:	b118      	cbz	r0, 8015928 <__swsetup_r+0x14>
 8015920:	6a03      	ldr	r3, [r0, #32]
 8015922:	b90b      	cbnz	r3, 8015928 <__swsetup_r+0x14>
 8015924:	f7fd fb16 	bl	8012f54 <__sinit>
 8015928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801592c:	0719      	lsls	r1, r3, #28
 801592e:	d422      	bmi.n	8015976 <__swsetup_r+0x62>
 8015930:	06da      	lsls	r2, r3, #27
 8015932:	d407      	bmi.n	8015944 <__swsetup_r+0x30>
 8015934:	2209      	movs	r2, #9
 8015936:	602a      	str	r2, [r5, #0]
 8015938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801593c:	81a3      	strh	r3, [r4, #12]
 801593e:	f04f 30ff 	mov.w	r0, #4294967295
 8015942:	e033      	b.n	80159ac <__swsetup_r+0x98>
 8015944:	0758      	lsls	r0, r3, #29
 8015946:	d512      	bpl.n	801596e <__swsetup_r+0x5a>
 8015948:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801594a:	b141      	cbz	r1, 801595e <__swsetup_r+0x4a>
 801594c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015950:	4299      	cmp	r1, r3
 8015952:	d002      	beq.n	801595a <__swsetup_r+0x46>
 8015954:	4628      	mov	r0, r5
 8015956:	f7fe fbb3 	bl	80140c0 <_free_r>
 801595a:	2300      	movs	r3, #0
 801595c:	6363      	str	r3, [r4, #52]	@ 0x34
 801595e:	89a3      	ldrh	r3, [r4, #12]
 8015960:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015964:	81a3      	strh	r3, [r4, #12]
 8015966:	2300      	movs	r3, #0
 8015968:	6063      	str	r3, [r4, #4]
 801596a:	6923      	ldr	r3, [r4, #16]
 801596c:	6023      	str	r3, [r4, #0]
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	f043 0308 	orr.w	r3, r3, #8
 8015974:	81a3      	strh	r3, [r4, #12]
 8015976:	6923      	ldr	r3, [r4, #16]
 8015978:	b94b      	cbnz	r3, 801598e <__swsetup_r+0x7a>
 801597a:	89a3      	ldrh	r3, [r4, #12]
 801597c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015984:	d003      	beq.n	801598e <__swsetup_r+0x7a>
 8015986:	4621      	mov	r1, r4
 8015988:	4628      	mov	r0, r5
 801598a:	f000 f88b 	bl	8015aa4 <__smakebuf_r>
 801598e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015992:	f013 0201 	ands.w	r2, r3, #1
 8015996:	d00a      	beq.n	80159ae <__swsetup_r+0x9a>
 8015998:	2200      	movs	r2, #0
 801599a:	60a2      	str	r2, [r4, #8]
 801599c:	6962      	ldr	r2, [r4, #20]
 801599e:	4252      	negs	r2, r2
 80159a0:	61a2      	str	r2, [r4, #24]
 80159a2:	6922      	ldr	r2, [r4, #16]
 80159a4:	b942      	cbnz	r2, 80159b8 <__swsetup_r+0xa4>
 80159a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80159aa:	d1c5      	bne.n	8015938 <__swsetup_r+0x24>
 80159ac:	bd38      	pop	{r3, r4, r5, pc}
 80159ae:	0799      	lsls	r1, r3, #30
 80159b0:	bf58      	it	pl
 80159b2:	6962      	ldrpl	r2, [r4, #20]
 80159b4:	60a2      	str	r2, [r4, #8]
 80159b6:	e7f4      	b.n	80159a2 <__swsetup_r+0x8e>
 80159b8:	2000      	movs	r0, #0
 80159ba:	e7f7      	b.n	80159ac <__swsetup_r+0x98>
 80159bc:	2000040c 	.word	0x2000040c

080159c0 <_raise_r>:
 80159c0:	291f      	cmp	r1, #31
 80159c2:	b538      	push	{r3, r4, r5, lr}
 80159c4:	4605      	mov	r5, r0
 80159c6:	460c      	mov	r4, r1
 80159c8:	d904      	bls.n	80159d4 <_raise_r+0x14>
 80159ca:	2316      	movs	r3, #22
 80159cc:	6003      	str	r3, [r0, #0]
 80159ce:	f04f 30ff 	mov.w	r0, #4294967295
 80159d2:	bd38      	pop	{r3, r4, r5, pc}
 80159d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80159d6:	b112      	cbz	r2, 80159de <_raise_r+0x1e>
 80159d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159dc:	b94b      	cbnz	r3, 80159f2 <_raise_r+0x32>
 80159de:	4628      	mov	r0, r5
 80159e0:	f000 f830 	bl	8015a44 <_getpid_r>
 80159e4:	4622      	mov	r2, r4
 80159e6:	4601      	mov	r1, r0
 80159e8:	4628      	mov	r0, r5
 80159ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159ee:	f000 b817 	b.w	8015a20 <_kill_r>
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d00a      	beq.n	8015a0c <_raise_r+0x4c>
 80159f6:	1c59      	adds	r1, r3, #1
 80159f8:	d103      	bne.n	8015a02 <_raise_r+0x42>
 80159fa:	2316      	movs	r3, #22
 80159fc:	6003      	str	r3, [r0, #0]
 80159fe:	2001      	movs	r0, #1
 8015a00:	e7e7      	b.n	80159d2 <_raise_r+0x12>
 8015a02:	2100      	movs	r1, #0
 8015a04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a08:	4620      	mov	r0, r4
 8015a0a:	4798      	blx	r3
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	e7e0      	b.n	80159d2 <_raise_r+0x12>

08015a10 <raise>:
 8015a10:	4b02      	ldr	r3, [pc, #8]	@ (8015a1c <raise+0xc>)
 8015a12:	4601      	mov	r1, r0
 8015a14:	6818      	ldr	r0, [r3, #0]
 8015a16:	f7ff bfd3 	b.w	80159c0 <_raise_r>
 8015a1a:	bf00      	nop
 8015a1c:	2000040c 	.word	0x2000040c

08015a20 <_kill_r>:
 8015a20:	b538      	push	{r3, r4, r5, lr}
 8015a22:	4d07      	ldr	r5, [pc, #28]	@ (8015a40 <_kill_r+0x20>)
 8015a24:	2300      	movs	r3, #0
 8015a26:	4604      	mov	r4, r0
 8015a28:	4608      	mov	r0, r1
 8015a2a:	4611      	mov	r1, r2
 8015a2c:	602b      	str	r3, [r5, #0]
 8015a2e:	f7ed ff5d 	bl	80038ec <_kill>
 8015a32:	1c43      	adds	r3, r0, #1
 8015a34:	d102      	bne.n	8015a3c <_kill_r+0x1c>
 8015a36:	682b      	ldr	r3, [r5, #0]
 8015a38:	b103      	cbz	r3, 8015a3c <_kill_r+0x1c>
 8015a3a:	6023      	str	r3, [r4, #0]
 8015a3c:	bd38      	pop	{r3, r4, r5, pc}
 8015a3e:	bf00      	nop
 8015a40:	20011f28 	.word	0x20011f28

08015a44 <_getpid_r>:
 8015a44:	f7ed bf4a 	b.w	80038dc <_getpid>

08015a48 <_malloc_usable_size_r>:
 8015a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a4c:	1f18      	subs	r0, r3, #4
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	bfbc      	itt	lt
 8015a52:	580b      	ldrlt	r3, [r1, r0]
 8015a54:	18c0      	addlt	r0, r0, r3
 8015a56:	4770      	bx	lr

08015a58 <__swhatbuf_r>:
 8015a58:	b570      	push	{r4, r5, r6, lr}
 8015a5a:	460c      	mov	r4, r1
 8015a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a60:	2900      	cmp	r1, #0
 8015a62:	b096      	sub	sp, #88	@ 0x58
 8015a64:	4615      	mov	r5, r2
 8015a66:	461e      	mov	r6, r3
 8015a68:	da0d      	bge.n	8015a86 <__swhatbuf_r+0x2e>
 8015a6a:	89a3      	ldrh	r3, [r4, #12]
 8015a6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015a70:	f04f 0100 	mov.w	r1, #0
 8015a74:	bf14      	ite	ne
 8015a76:	2340      	movne	r3, #64	@ 0x40
 8015a78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015a7c:	2000      	movs	r0, #0
 8015a7e:	6031      	str	r1, [r6, #0]
 8015a80:	602b      	str	r3, [r5, #0]
 8015a82:	b016      	add	sp, #88	@ 0x58
 8015a84:	bd70      	pop	{r4, r5, r6, pc}
 8015a86:	466a      	mov	r2, sp
 8015a88:	f000 f848 	bl	8015b1c <_fstat_r>
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	dbec      	blt.n	8015a6a <__swhatbuf_r+0x12>
 8015a90:	9901      	ldr	r1, [sp, #4]
 8015a92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015a96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015a9a:	4259      	negs	r1, r3
 8015a9c:	4159      	adcs	r1, r3
 8015a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015aa2:	e7eb      	b.n	8015a7c <__swhatbuf_r+0x24>

08015aa4 <__smakebuf_r>:
 8015aa4:	898b      	ldrh	r3, [r1, #12]
 8015aa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015aa8:	079d      	lsls	r5, r3, #30
 8015aaa:	4606      	mov	r6, r0
 8015aac:	460c      	mov	r4, r1
 8015aae:	d507      	bpl.n	8015ac0 <__smakebuf_r+0x1c>
 8015ab0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015ab4:	6023      	str	r3, [r4, #0]
 8015ab6:	6123      	str	r3, [r4, #16]
 8015ab8:	2301      	movs	r3, #1
 8015aba:	6163      	str	r3, [r4, #20]
 8015abc:	b003      	add	sp, #12
 8015abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ac0:	ab01      	add	r3, sp, #4
 8015ac2:	466a      	mov	r2, sp
 8015ac4:	f7ff ffc8 	bl	8015a58 <__swhatbuf_r>
 8015ac8:	9f00      	ldr	r7, [sp, #0]
 8015aca:	4605      	mov	r5, r0
 8015acc:	4639      	mov	r1, r7
 8015ace:	4630      	mov	r0, r6
 8015ad0:	f7fb fe40 	bl	8011754 <_malloc_r>
 8015ad4:	b948      	cbnz	r0, 8015aea <__smakebuf_r+0x46>
 8015ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ada:	059a      	lsls	r2, r3, #22
 8015adc:	d4ee      	bmi.n	8015abc <__smakebuf_r+0x18>
 8015ade:	f023 0303 	bic.w	r3, r3, #3
 8015ae2:	f043 0302 	orr.w	r3, r3, #2
 8015ae6:	81a3      	strh	r3, [r4, #12]
 8015ae8:	e7e2      	b.n	8015ab0 <__smakebuf_r+0xc>
 8015aea:	89a3      	ldrh	r3, [r4, #12]
 8015aec:	6020      	str	r0, [r4, #0]
 8015aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015af2:	81a3      	strh	r3, [r4, #12]
 8015af4:	9b01      	ldr	r3, [sp, #4]
 8015af6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015afa:	b15b      	cbz	r3, 8015b14 <__smakebuf_r+0x70>
 8015afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b00:	4630      	mov	r0, r6
 8015b02:	f000 f81d 	bl	8015b40 <_isatty_r>
 8015b06:	b128      	cbz	r0, 8015b14 <__smakebuf_r+0x70>
 8015b08:	89a3      	ldrh	r3, [r4, #12]
 8015b0a:	f023 0303 	bic.w	r3, r3, #3
 8015b0e:	f043 0301 	orr.w	r3, r3, #1
 8015b12:	81a3      	strh	r3, [r4, #12]
 8015b14:	89a3      	ldrh	r3, [r4, #12]
 8015b16:	431d      	orrs	r5, r3
 8015b18:	81a5      	strh	r5, [r4, #12]
 8015b1a:	e7cf      	b.n	8015abc <__smakebuf_r+0x18>

08015b1c <_fstat_r>:
 8015b1c:	b538      	push	{r3, r4, r5, lr}
 8015b1e:	4d07      	ldr	r5, [pc, #28]	@ (8015b3c <_fstat_r+0x20>)
 8015b20:	2300      	movs	r3, #0
 8015b22:	4604      	mov	r4, r0
 8015b24:	4608      	mov	r0, r1
 8015b26:	4611      	mov	r1, r2
 8015b28:	602b      	str	r3, [r5, #0]
 8015b2a:	f7ed ff3f 	bl	80039ac <_fstat>
 8015b2e:	1c43      	adds	r3, r0, #1
 8015b30:	d102      	bne.n	8015b38 <_fstat_r+0x1c>
 8015b32:	682b      	ldr	r3, [r5, #0]
 8015b34:	b103      	cbz	r3, 8015b38 <_fstat_r+0x1c>
 8015b36:	6023      	str	r3, [r4, #0]
 8015b38:	bd38      	pop	{r3, r4, r5, pc}
 8015b3a:	bf00      	nop
 8015b3c:	20011f28 	.word	0x20011f28

08015b40 <_isatty_r>:
 8015b40:	b538      	push	{r3, r4, r5, lr}
 8015b42:	4d06      	ldr	r5, [pc, #24]	@ (8015b5c <_isatty_r+0x1c>)
 8015b44:	2300      	movs	r3, #0
 8015b46:	4604      	mov	r4, r0
 8015b48:	4608      	mov	r0, r1
 8015b4a:	602b      	str	r3, [r5, #0]
 8015b4c:	f7ed ff3e 	bl	80039cc <_isatty>
 8015b50:	1c43      	adds	r3, r0, #1
 8015b52:	d102      	bne.n	8015b5a <_isatty_r+0x1a>
 8015b54:	682b      	ldr	r3, [r5, #0]
 8015b56:	b103      	cbz	r3, 8015b5a <_isatty_r+0x1a>
 8015b58:	6023      	str	r3, [r4, #0]
 8015b5a:	bd38      	pop	{r3, r4, r5, pc}
 8015b5c:	20011f28 	.word	0x20011f28

08015b60 <_init>:
 8015b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b62:	bf00      	nop
 8015b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b66:	bc08      	pop	{r3}
 8015b68:	469e      	mov	lr, r3
 8015b6a:	4770      	bx	lr

08015b6c <_fini>:
 8015b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b6e:	bf00      	nop
 8015b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b72:	bc08      	pop	{r3}
 8015b74:	469e      	mov	lr, r3
 8015b76:	4770      	bx	lr
