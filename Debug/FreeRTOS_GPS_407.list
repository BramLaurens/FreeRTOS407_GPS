
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011da4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c5c  08011f34  08011f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b90  08012b90  000142e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012b90  08012b90  00013b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b98  08012b98  000142e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b98  08012b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b9c  08012b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  08012ba0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011374  200002e8  08012e88  000142e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001165c  08012e88  0001465c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e94b  00000000  00000000  00014318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075be  00000000  00000000  00042c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025f0  00000000  00000000  0004a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d2f  00000000  00000000  0004c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c93f  00000000  00000000  0004e547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035a5b  00000000  00000000  0007ae86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e548f  00000000  00000000  000b08e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00195d70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a984  00000000  00000000  00195db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a0738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e8 	.word	0x200002e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011f1c 	.word	0x08011f1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	08011f1c 	.word	0x08011f1c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <toggle_led+0x30>)
 80005bc:	f002 ff6f 	bl	800349e <HAL_GPIO_TogglePin>
	osDelay(20);
 80005c0:	2014      	movs	r0, #20
 80005c2:	f00b fcf7 	bl	800bfb4 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <toggle_led+0x30>)
 80005ce:	f002 ff66 	bl	800349e <HAL_GPIO_TogglePin>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <ARM_keys_IRQ+0x58>)
 80005ea:	f001 fc21 	bl	8001e30 <UART_puts>
 80005ee:	4813      	ldr	r0, [pc, #76]	@ (800063c <ARM_keys_IRQ+0x5c>)
 80005f0:	f001 fc1e 	bl	8001e30 <UART_puts>
 80005f4:	4812      	ldr	r0, [pc, #72]	@ (8000640 <ARM_keys_IRQ+0x60>)
 80005f6:	f001 fc1b 	bl	8001e30 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <ARM_keys_IRQ+0x64>)
 80005fc:	f00d fe46 	bl	800e28c <xTaskGetHandle>
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <ARM_keys_IRQ+0x68>)
 800060a:	f000 fb35 	bl	8000c78 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <ARM_keys_IRQ+0x6c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2201      	movs	r2, #1
 800061c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000620:	f00b fe98 	bl	800c354 <xEventGroupWaitBits>
 8000624:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000626:	2300      	movs	r3, #0
 8000628:	2203      	movs	r2, #3
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f00e fd5d 	bl	800f0ec <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000632:	bf00      	nop
 8000634:	e7eb      	b.n	800060e <ARM_keys_IRQ+0x2e>
 8000636:	bf00      	nop
 8000638:	08011f34 	.word	0x08011f34
 800063c:	080128ec 	.word	0x080128ec
 8000640:	08011f38 	.word	0x08011f38
 8000644:	08011f44 	.word	0x08011f44
 8000648:	08011f54 	.word	0x08011f54
 800064c:	20000314 	.word	0x20000314

08000650 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	2000      	movs	r0, #0
 8000666:	f00e fce1 	bl	800f02c <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <ARM_keys_task+0xc4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f04f 31ff 	mov.w	r1, #4294967295
 8000672:	4618      	mov	r0, r3
 8000674:	f00c fcbe 	bl	800cff4 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fb8b 	bl	8001d98 <LED_put>
	    BUZZER_put (500);
 8000682:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000686:	f001 f8a7 	bl	80017d8 <BUZZER_put>
		osDelay(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068e:	f00b fc91 	bl	800bfb4 <osDelay>

		UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8000692:	4821      	ldr	r0, [pc, #132]	@ (8000718 <ARM_keys_task+0xc8>)
 8000694:	f001 fbcc 	bl	8001e30 <UART_puts>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fbe4 	bl	8001e68 <UART_putint>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <ARM_keys_task+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <ARM_keys_task+0x6a>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <ARM_keys_task+0xc8>)
 80006ae:	f001 fbbf 	bl	8001e30 <UART_puts>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fbd7 	bl	8001e68 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <ARM_keys_task+0xc4>)
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	f00c fa14 	bl	800caf0 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e015      	b.n	80006fa <ARM_keys_task+0xaa>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <ARM_keys_task+0x96>
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <ARM_keys_task+0x90>
 80006da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006de:	e004      	b.n	80006ea <ARM_keys_task+0x9a>
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	e001      	b.n	80006ea <ARM_keys_task+0x9a>
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff5c 	bl	80005ac <toggle_led>
		for (i=0; i<3; i++)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	dde6      	ble.n	80006ce <ARM_keys_task+0x7e>
	  	}
     	taskYIELD(); // done, force context switch
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <ARM_keys_task+0xd0>)
 8000702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000710:	e7a2      	b.n	8000658 <ARM_keys_task+0x8>
 8000712:	bf00      	nop
 8000714:	20000310 	.word	0x20000310
 8000718:	08011f64 	.word	0x08011f64
 800071c:	20000304 	.word	0x20000304
 8000720:	e000ed04 	.word	0xe000ed04

08000724 <GPS_parser>:
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/

void GPS_parser(void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	osDelay(100);
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f00b fc41 	bl	800bfb4 <osDelay>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <GPS_parser+0x24>)
 8000734:	f001 fb7c 	bl	8001e30 <UART_puts>
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <GPS_parser+0x28>)
 800073a:	f001 fb79 	bl	8001e30 <UART_puts>

	while (TRUE)
	{
		osDelay(1000);
 800073e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000742:	f00b fc37 	bl	800bfb4 <osDelay>
 8000746:	e7fa      	b.n	800073e <GPS_parser+0x1a>
 8000748:	080128fc 	.word	0x080128fc
 800074c:	08011f84 	.word	0x08011f84

08000750 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8000760:	4847      	ldr	r0, [pc, #284]	@ (8000880 <UART_keys_IRQ+0x130>)
 8000762:	f001 fb65 	bl	8001e30 <UART_puts>
 8000766:	4847      	ldr	r0, [pc, #284]	@ (8000884 <UART_keys_IRQ+0x134>)
 8000768:	f001 fb62 	bl	8001e30 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 800076c:	4846      	ldr	r0, [pc, #280]	@ (8000888 <UART_keys_IRQ+0x138>)
 800076e:	f00d fd8d 	bl	800e28c <xTaskGetHandle>
 8000772:	6278      	str	r0, [r7, #36]	@ 0x24
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 800077a:	4844      	ldr	r0, [pc, #272]	@ (800088c <UART_keys_IRQ+0x13c>)
 800077c:	f000 fa7c 	bl	8000c78 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8000780:	4b43      	ldr	r3, [pc, #268]	@ (8000890 <UART_keys_IRQ+0x140>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	f107 0218 	add.w	r2, r7, #24
 8000788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800078a:	4413      	add	r3, r2
 800078c:	f04f 32ff 	mov.w	r2, #4294967295
 8000790:	4619      	mov	r1, r3
 8000792:	f00c fb4d 	bl	800ce30 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8000796:	f107 0218 	add.w	r2, r7, #24
 800079a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d06b      	beq.n	800087c <UART_keys_IRQ+0x12c>
 80007a4:	f107 0218 	add.w	r2, r7, #24
 80007a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d064      	beq.n	800087c <UART_keys_IRQ+0x12c>
 80007b2:	f107 0218 	add.w	r2, r7, #24
 80007b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b0d      	cmp	r3, #13
 80007be:	d05d      	beq.n	800087c <UART_keys_IRQ+0x12c>
 80007c0:	f107 0218 	add.w	r2, r7, #24
 80007c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b20      	cmp	r3, #32
 80007cc:	d056      	beq.n	800087c <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80007ce:	f107 0218 	add.w	r2, r7, #24
 80007d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d4:	4413      	add	r3, r2
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b0a      	cmp	r3, #10
 80007da:	d108      	bne.n	80007ee <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80007dc:	f107 0218 	add.w	r2, r7, #24
 80007e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007e2:	4413      	add	r3, r2
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007ec:	e00d      	b.n	800080a <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 80007ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f0:	2b08      	cmp	r3, #8
 80007f2:	d10a      	bne.n	800080a <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 80007f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f6:	3301      	adds	r3, #1
 80007f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007fa:	f107 0218 	add.w	r2, r7, #24
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	4413      	add	r3, r2
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8000806:	2301      	movs	r3, #1
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 800080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800080c:	2b00      	cmp	r3, #0
 800080e:	d031      	beq.n	8000874 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 8000810:	f107 0218 	add.w	r2, r7, #24
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f010 fc69 	bl	80110f2 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	220a      	movs	r2, #10
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f010 fafe 	bl	8010e2a <memset>
			finish = FALSE;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8000836:	f107 010c 	add.w	r1, r7, #12
 800083a:	2300      	movs	r3, #0
 800083c:	2203      	movs	r2, #3
 800083e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000840:	f00e fc54 	bl	800f0ec <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 8000844:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <UART_keys_IRQ+0x144>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	2b00      	cmp	r3, #0
 800084e:	d097      	beq.n	8000780 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8000850:	4811      	ldr	r0, [pc, #68]	@ (8000898 <UART_keys_IRQ+0x148>)
 8000852:	f001 faed 	bl	8001e30 <UART_puts>
 8000856:	480a      	ldr	r0, [pc, #40]	@ (8000880 <UART_keys_IRQ+0x130>)
 8000858:	f001 faea 	bl	8001e30 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 800085c:	480f      	ldr	r0, [pc, #60]	@ (800089c <UART_keys_IRQ+0x14c>)
 800085e:	f001 fae7 	bl	8001e30 <UART_puts>
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fae2 	bl	8001e30 <UART_puts>
				UART_puts("\r\n");
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <UART_keys_IRQ+0x150>)
 800086e:	f001 fadf 	bl	8001e30 <UART_puts>
 8000872:	e785      	b.n	8000780 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8000874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000876:	3301      	adds	r3, #1
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800087a:	e781      	b.n	8000780 <UART_keys_IRQ+0x30>
			continue;
 800087c:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800087e:	e77f      	b.n	8000780 <UART_keys_IRQ+0x30>
 8000880:	08012908 	.word	0x08012908
 8000884:	08011fdc 	.word	0x08011fdc
 8000888:	08011f90 	.word	0x08011f90
 800088c:	08012000 	.word	0x08012000
 8000890:	20000308 	.word	0x20000308
 8000894:	20000304 	.word	0x20000304
 8000898:	08011fc0 	.word	0x08011fc0
 800089c:	08012010 	.word	0x08012010
 80008a0:	08011fd8 	.word	0x08011fd8

080008a4 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 80008ac:	4bab      	ldr	r3, [pc, #684]	@ (8000b5c <UART_menu+0x2b8>)
 80008ae:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80008b0:	48ab      	ldr	r0, [pc, #684]	@ (8000b60 <UART_menu+0x2bc>)
 80008b2:	f001 fabd 	bl	8001e30 <UART_puts>
 80008b6:	48ab      	ldr	r0, [pc, #684]	@ (8000b64 <UART_menu+0x2c0>)
 80008b8:	f001 faba 	bl	8001e30 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	2001      	movs	r0, #1
 80008c2:	f00e fb67 	bl	800ef94 <ulTaskNotifyTake>
 80008c6:	4603      	mov	r3, r0
 80008c8:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4aa4      	ldr	r2, [pc, #656]	@ (8000b68 <UART_menu+0x2c4>)
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d102      	bne.n	80008e8 <UART_menu+0x44>
 80008e2:	7dfb      	ldrb	r3, [r7, #23]
 80008e4:	3b20      	subs	r3, #32
 80008e6:	e000      	b.n	80008ea <UART_menu+0x46>
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	3b30      	subs	r3, #48	@ 0x30
 80008ec:	2b24      	cmp	r3, #36	@ 0x24
 80008ee:	d84d      	bhi.n	800098c <UART_menu+0xe8>
 80008f0:	a201      	add	r2, pc, #4	@ (adr r2, 80008f8 <UART_menu+0x54>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	0800099b 	.word	0x0800099b
 80008fc:	080009d7 	.word	0x080009d7
 8000900:	08000a03 	.word	0x08000a03
 8000904:	08000a2f 	.word	0x08000a2f
 8000908:	08000a5b 	.word	0x08000a5b
 800090c:	08000a87 	.word	0x08000a87
 8000910:	0800098d 	.word	0x0800098d
 8000914:	0800098d 	.word	0x0800098d
 8000918:	0800098d 	.word	0x0800098d
 800091c:	0800098d 	.word	0x0800098d
 8000920:	0800098d 	.word	0x0800098d
 8000924:	0800098d 	.word	0x0800098d
 8000928:	0800098d 	.word	0x0800098d
 800092c:	0800098d 	.word	0x0800098d
 8000930:	0800098d 	.word	0x0800098d
 8000934:	0800098d 	.word	0x0800098d
 8000938:	0800098d 	.word	0x0800098d
 800093c:	0800098d 	.word	0x0800098d
 8000940:	0800098d 	.word	0x0800098d
 8000944:	0800098d 	.word	0x0800098d
 8000948:	08000ab3 	.word	0x08000ab3
 800094c:	0800098d 	.word	0x0800098d
 8000950:	0800098d 	.word	0x0800098d
 8000954:	0800098d 	.word	0x0800098d
 8000958:	0800098d 	.word	0x0800098d
 800095c:	0800098d 	.word	0x0800098d
 8000960:	0800098d 	.word	0x0800098d
 8000964:	0800098d 	.word	0x0800098d
 8000968:	0800098d 	.word	0x0800098d
 800096c:	08000ad7 	.word	0x08000ad7
 8000970:	0800098d 	.word	0x0800098d
 8000974:	0800098d 	.word	0x0800098d
 8000978:	08000ae3 	.word	0x08000ae3
 800097c:	0800098d 	.word	0x0800098d
 8000980:	0800098d 	.word	0x0800098d
 8000984:	08000b27 	.word	0x08000b27
 8000988:	08000add 	.word	0x08000add
		{
		default:  UART_puts(s);
 800098c:	69b8      	ldr	r0, [r7, #24]
 800098e:	f001 fa4f 	bl	8001e30 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8000992:	4876      	ldr	r0, [pc, #472]	@ (8000b6c <UART_menu+0x2c8>)
 8000994:	f001 fa4c 	bl	8001e30 <UART_puts>
				  break;
 8000998:	e0df      	b.n	8000b5a <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 800099a:	4b75      	ldr	r3, [pc, #468]	@ (8000b70 <UART_menu+0x2cc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <UART_menu+0x102>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e000      	b.n	80009a8 <UART_menu+0x104>
 80009a6:	23ff      	movs	r3, #255	@ 0xff
 80009a8:	4a71      	ldr	r2, [pc, #452]	@ (8000b70 <UART_menu+0x2cc>)
 80009aa:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 80009ac:	4871      	ldr	r0, [pc, #452]	@ (8000b74 <UART_menu+0x2d0>)
 80009ae:	f001 fa3f 	bl	8001e30 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 80009b2:	4b6f      	ldr	r3, [pc, #444]	@ (8000b70 <UART_menu+0x2cc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2bff      	cmp	r3, #255	@ 0xff
 80009b8:	d101      	bne.n	80009be <UART_menu+0x11a>
 80009ba:	4b6f      	ldr	r3, [pc, #444]	@ (8000b78 <UART_menu+0x2d4>)
 80009bc:	e000      	b.n	80009c0 <UART_menu+0x11c>
 80009be:	4b6f      	ldr	r3, [pc, #444]	@ (8000b7c <UART_menu+0x2d8>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fa35 	bl	8001e30 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 80009c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000b70 <UART_menu+0x2cc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f040 80c0 	bne.w	8000b50 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80009d0:	f000 f944 	bl	8000c5c <DisplayMenu>
				  break;
 80009d4:	e0bc      	b.n	8000b50 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80009d6:	4b66      	ldr	r3, [pc, #408]	@ (8000b70 <UART_menu+0x2cc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f083 0301 	eor.w	r3, r3, #1
 80009de:	4a64      	ldr	r2, [pc, #400]	@ (8000b70 <UART_menu+0x2cc>)
 80009e0:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80009e2:	4867      	ldr	r0, [pc, #412]	@ (8000b80 <UART_menu+0x2dc>)
 80009e4:	f001 fa24 	bl	8001e30 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80009e8:	4b61      	ldr	r3, [pc, #388]	@ (8000b70 <UART_menu+0x2cc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <UART_menu+0x154>
 80009f4:	4b60      	ldr	r3, [pc, #384]	@ (8000b78 <UART_menu+0x2d4>)
 80009f6:	e000      	b.n	80009fa <UART_menu+0x156>
 80009f8:	4b60      	ldr	r3, [pc, #384]	@ (8000b7c <UART_menu+0x2d8>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fa18 	bl	8001e30 <UART_puts>
				  break;
 8000a00:	e0ab      	b.n	8000b5a <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 8000a02:	4b5b      	ldr	r3, [pc, #364]	@ (8000b70 <UART_menu+0x2cc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f083 0302 	eor.w	r3, r3, #2
 8000a0a:	4a59      	ldr	r2, [pc, #356]	@ (8000b70 <UART_menu+0x2cc>)
 8000a0c:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 8000a0e:	485d      	ldr	r0, [pc, #372]	@ (8000b84 <UART_menu+0x2e0>)
 8000a10:	f001 fa0e 	bl	8001e30 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a14:	4b56      	ldr	r3, [pc, #344]	@ (8000b70 <UART_menu+0x2cc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0302 	and.w	r3, r3, #2
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <UART_menu+0x180>
 8000a20:	4b55      	ldr	r3, [pc, #340]	@ (8000b78 <UART_menu+0x2d4>)
 8000a22:	e000      	b.n	8000a26 <UART_menu+0x182>
 8000a24:	4b55      	ldr	r3, [pc, #340]	@ (8000b7c <UART_menu+0x2d8>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fa02 	bl	8001e30 <UART_puts>
				  break;
 8000a2c:	e095      	b.n	8000b5a <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8000a2e:	4b50      	ldr	r3, [pc, #320]	@ (8000b70 <UART_menu+0x2cc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f083 0304 	eor.w	r3, r3, #4
 8000a36:	4a4e      	ldr	r2, [pc, #312]	@ (8000b70 <UART_menu+0x2cc>)
 8000a38:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8000a3a:	4853      	ldr	r0, [pc, #332]	@ (8000b88 <UART_menu+0x2e4>)
 8000a3c:	f001 f9f8 	bl	8001e30 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a40:	4b4b      	ldr	r3, [pc, #300]	@ (8000b70 <UART_menu+0x2cc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <UART_menu+0x1ac>
 8000a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b78 <UART_menu+0x2d4>)
 8000a4e:	e000      	b.n	8000a52 <UART_menu+0x1ae>
 8000a50:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <UART_menu+0x2d8>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 f9ec 	bl	8001e30 <UART_puts>
				  break;
 8000a58:	e07f      	b.n	8000b5a <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8000a5a:	4b45      	ldr	r3, [pc, #276]	@ (8000b70 <UART_menu+0x2cc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f083 0308 	eor.w	r3, r3, #8
 8000a62:	4a43      	ldr	r2, [pc, #268]	@ (8000b70 <UART_menu+0x2cc>)
 8000a64:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8000a66:	4849      	ldr	r0, [pc, #292]	@ (8000b8c <UART_menu+0x2e8>)
 8000a68:	f001 f9e2 	bl	8001e30 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a6c:	4b40      	ldr	r3, [pc, #256]	@ (8000b70 <UART_menu+0x2cc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <UART_menu+0x1d8>
 8000a78:	4b3f      	ldr	r3, [pc, #252]	@ (8000b78 <UART_menu+0x2d4>)
 8000a7a:	e000      	b.n	8000a7e <UART_menu+0x1da>
 8000a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b7c <UART_menu+0x2d8>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f9d6 	bl	8001e30 <UART_puts>
				  break;
 8000a84:	e069      	b.n	8000b5a <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8000a86:	4b3a      	ldr	r3, [pc, #232]	@ (8000b70 <UART_menu+0x2cc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f083 0310 	eor.w	r3, r3, #16
 8000a8e:	4a38      	ldr	r2, [pc, #224]	@ (8000b70 <UART_menu+0x2cc>)
 8000a90:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8000a92:	483f      	ldr	r0, [pc, #252]	@ (8000b90 <UART_menu+0x2ec>)
 8000a94:	f001 f9cc 	bl	8001e30 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <UART_menu+0x2cc>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <UART_menu+0x204>
 8000aa4:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <UART_menu+0x2d4>)
 8000aa6:	e000      	b.n	8000aaa <UART_menu+0x206>
 8000aa8:	4b34      	ldr	r3, [pc, #208]	@ (8000b7c <UART_menu+0x2d8>)
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 f9c0 	bl	8001e30 <UART_puts>
				  break;
 8000ab0:	e053      	b.n	8000b5a <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f00f ff4a 	bl	8010950 <atoi>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <UART_menu+0x2f0>)
 8000ac2:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 8000ac4:	4834      	ldr	r0, [pc, #208]	@ (8000b98 <UART_menu+0x2f4>)
 8000ac6:	f001 f9b3 	bl	8001e30 <UART_puts>
 8000aca:	4b32      	ldr	r3, [pc, #200]	@ (8000b94 <UART_menu+0x2f0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 f9ca 	bl	8001e68 <UART_putint>
				  break;
 8000ad4:	e041      	b.n	8000b5a <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8000ad6:	f000 f8c1 	bl	8000c5c <DisplayMenu>
				  break;
 8000ada:	e03e      	b.n	8000b5a <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8000adc:	f000 fa2c 	bl	8000f38 <DisplayTaskData>
				  break;
 8000ae0:	e03b      	b.n	8000b5a <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 8000ae2:	69f9      	ldr	r1, [r7, #28]
 8000ae4:	69b8      	ldr	r0, [r7, #24]
 8000ae6:	f010 f9c7 	bl	8010e78 <strtok>
 8000aea:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8000aec:	69f9      	ldr	r1, [r7, #28]
 8000aee:	2000      	movs	r0, #0
 8000af0:	f010 f9c2 	bl	8010e78 <strtok>
 8000af4:	61b8      	str	r0, [r7, #24]
 8000af6:	69b8      	ldr	r0, [r7, #24]
 8000af8:	f00f ff2a 	bl	8010950 <atoi>
 8000afc:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 8000afe:	69f9      	ldr	r1, [r7, #28]
 8000b00:	2000      	movs	r0, #0
 8000b02:	f010 f9b9 	bl	8010e78 <strtok>
 8000b06:	61b8      	str	r0, [r7, #24]
 8000b08:	69b8      	ldr	r0, [r7, #24]
 8000b0a:	f00f ff21 	bl	8010950 <atoi>
 8000b0e:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d01e      	beq.n	8000b54 <UART_menu+0x2b0>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d01b      	beq.n	8000b54 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8000b1c:	68f9      	ldr	r1, [r7, #12]
 8000b1e:	6938      	ldr	r0, [r7, #16]
 8000b20:	f000 f986 	bl	8000e30 <SetTaskPriority>
				  break;
 8000b24:	e016      	b.n	8000b54 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8000b26:	69f9      	ldr	r1, [r7, #28]
 8000b28:	69b8      	ldr	r0, [r7, #24]
 8000b2a:	f010 f9a5 	bl	8010e78 <strtok>
 8000b2e:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8000b30:	69f9      	ldr	r1, [r7, #28]
 8000b32:	2000      	movs	r0, #0
 8000b34:	f010 f9a0 	bl	8010e78 <strtok>
 8000b38:	61b8      	str	r0, [r7, #24]
 8000b3a:	69b8      	ldr	r0, [r7, #24]
 8000b3c:	f00f ff08 	bl	8010950 <atoi>
 8000b40:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d007      	beq.n	8000b58 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8000b48:	6938      	ldr	r0, [r7, #16]
 8000b4a:	f000 f9ad 	bl	8000ea8 <StartStopTask>
				  break;
 8000b4e:	e003      	b.n	8000b58 <UART_menu+0x2b4>
				  break;
 8000b50:	bf00      	nop
 8000b52:	e6b3      	b.n	80008bc <UART_menu+0x18>
				  break;
 8000b54:	bf00      	nop
 8000b56:	e6b1      	b.n	80008bc <UART_menu+0x18>
				  break;
 8000b58:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b5a:	e6af      	b.n	80008bc <UART_menu+0x18>
 8000b5c:	0801202c 	.word	0x0801202c
 8000b60:	08012918 	.word	0x08012918
 8000b64:	08012030 	.word	0x08012030
 8000b68:	080129ac 	.word	0x080129ac
 8000b6c:	0801203c 	.word	0x0801203c
 8000b70:	20000304 	.word	0x20000304
 8000b74:	08012050 	.word	0x08012050
 8000b78:	08012068 	.word	0x08012068
 8000b7c:	08012070 	.word	0x08012070
 8000b80:	08012078 	.word	0x08012078
 8000b84:	0801208c 	.word	0x0801208c
 8000b88:	080120a0 	.word	0x080120a0
 8000b8c:	080120b4 	.word	0x080120b4
 8000b90:	080120c8 	.word	0x080120c8
 8000b94:	20000248 	.word	0x20000248
 8000b98:	080120d8 	.word	0x080120d8

08000b9c <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09c      	sub	sp, #112	@ 0x70
 8000ba0:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <DisplayVersion+0x98>)
 8000ba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8000ba6:	f000 ff59 	bl	8001a5c <LCD_clear>
	LCD_puts(app_nameLCD);
 8000baa:	4b23      	ldr	r3, [pc, #140]	@ (8000c38 <DisplayVersion+0x9c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f001 f84c 	bl	8001c4c <LCD_puts>

	UART_puts(app_name);
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <DisplayVersion+0xa0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f939 	bl	8001e30 <UART_puts>
	UART_puts(functionality);
 8000bbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000bc0:	f001 f936 	bl	8001e30 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8000bc4:	f107 0108 	add.w	r1, r7, #8
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2264      	movs	r2, #100	@ 0x64
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00b f8fb 	bl	800bdc8 <osKernelGetInfo>
	UART_puts("\t-----");
 8000bd2:	481b      	ldr	r0, [pc, #108]	@ (8000c40 <DisplayVersion+0xa4>)
 8000bd4:	f001 f92c 	bl	8001e30 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8000bd8:	481a      	ldr	r0, [pc, #104]	@ (8000c44 <DisplayVersion+0xa8>)
 8000bda:	f001 f929 	bl	8001e30 <UART_puts>
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f924 	bl	8001e30 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <DisplayVersion+0xac>)
 8000bea:	f001 f921 	bl	8001e30 <UART_puts>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 f939 	bl	8001e68 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8000bf6:	4815      	ldr	r0, [pc, #84]	@ (8000c4c <DisplayVersion+0xb0>)
 8000bf8:	f001 f91a 	bl	8001e30 <UART_puts>
 8000bfc:	f00b f93c 	bl	800be78 <osKernelGetSysTimerFreq>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <DisplayVersion+0xb4>)
 8000c04:	fba2 2303 	umull	r2, r3, r2, r3
 8000c08:	0c9b      	lsrs	r3, r3, #18
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f92c 	bl	8001e68 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 8000c10:	4810      	ldr	r0, [pc, #64]	@ (8000c54 <DisplayVersion+0xb8>)
 8000c12:	f001 f90d 	bl	8001e30 <UART_puts>
 8000c16:	f00b f925 	bl	800be64 <osKernelGetTickFreq>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 f923 	bl	8001e68 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 8000c22:	480d      	ldr	r0, [pc, #52]	@ (8000c58 <DisplayVersion+0xbc>)
 8000c24:	f001 f904 	bl	8001e30 <UART_puts>

    DisplayMenu();
 8000c28:	f000 f818 	bl	8000c5c <DisplayMenu>
}
 8000c2c:	bf00      	nop
 8000c2e:	3770      	adds	r7, #112	@ 0x70
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	080121b8 	.word	0x080121b8
 8000c38:	20000004 	.word	0x20000004
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	08012328 	.word	0x08012328
 8000c44:	08012330 	.word	0x08012330
 8000c48:	08012334 	.word	0x08012334
 8000c4c:	08012344 	.word	0x08012344
 8000c50:	431bde83 	.word	0x431bde83
 8000c54:	08012360 	.word	0x08012360
 8000c58:	08012378 	.word	0x08012378

08000c5c <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
	char *menu =
 8000c62:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <DisplayMenu+0x18>)
 8000c64:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f001 f8e2 	bl	8001e30 <UART_puts>
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	08012384 	.word	0x08012384

08000c78 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 ffe3 	bl	8001c4c <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f001 f8d2 	bl	8001e30 <UART_puts>
 8000c8c:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <error_HaltOS+0x2c>)
 8000c8e:	f001 f8cf 	bl	8001e30 <UART_puts>

	BUZZER_put(1000);
 8000c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c96:	f000 fd9f 	bl	80017d8 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8000c9a:	f00d f9cd 	bl	800e038 <vTaskSuspendAll>

	while (TRUE)
 8000c9e:	bf00      	nop
 8000ca0:	e7fd      	b.n	8000c9e <error_HaltOS+0x26>
 8000ca2:	bf00      	nop
 8000ca4:	080125c4 	.word	0x080125c4

08000ca8 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f00b ff05 	bl	800cabe <xQueueCreateMutex>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4a30      	ldr	r2, [pc, #192]	@ (8000d78 <CreateHandles+0xd0>)
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b2f      	ldr	r3, [pc, #188]	@ (8000d78 <CreateHandles+0xd0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 8000cc2:	482e      	ldr	r0, [pc, #184]	@ (8000d7c <CreateHandles+0xd4>)
 8000cc4:	f7ff ffd8 	bl	8000c78 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2104      	movs	r1, #4
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f00b fe7e 	bl	800c9ce <xQueueGenericCreate>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d80 <CreateHandles+0xd8>)
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <CreateHandles+0xd8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 8000ce0:	4828      	ldr	r0, [pc, #160]	@ (8000d84 <CreateHandles+0xdc>)
 8000ce2:	f7ff ffc9 	bl	8000c78 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2053      	movs	r0, #83	@ 0x53
 8000cec:	f00b fe6f 	bl	800c9ce <xQueueGenericCreate>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4a25      	ldr	r2, [pc, #148]	@ (8000d88 <CreateHandles+0xe0>)
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <CreateHandles+0xe0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 8000cfe:	4823      	ldr	r0, [pc, #140]	@ (8000d8c <CreateHandles+0xe4>)
 8000d00:	f7ff ffba 	bl	8000c78 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8000d04:	f00b fb0c 	bl	800c320 <xEventGroupCreate>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <CreateHandles+0xe8>)
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <CreateHandles+0xe8>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 8000d16:	481f      	ldr	r0, [pc, #124]	@ (8000d94 <CreateHandles+0xec>)
 8000d18:	f7ff ffae 	bl	8000c78 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <CreateHandles+0xf0>)
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d28:	481c      	ldr	r0, [pc, #112]	@ (8000d9c <CreateHandles+0xf4>)
 8000d2a:	f00e fb3f 	bl	800f3ac <xTimerCreate>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a1b      	ldr	r2, [pc, #108]	@ (8000da0 <CreateHandles+0xf8>)
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <CreateHandles+0xf8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8000d3c:	4819      	ldr	r0, [pc, #100]	@ (8000da4 <CreateHandles+0xfc>)
 8000d3e:	f7ff ff9b 	bl	8000c78 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8000d42:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <CreateHandles+0x100>)
 8000d44:	f001 f874 	bl	8001e30 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8000d48:	4818      	ldr	r0, [pc, #96]	@ (8000dac <CreateHandles+0x104>)
 8000d4a:	f001 f871 	bl	8001e30 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8000d4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d52:	f001 f889 	bl	8001e68 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 8000d56:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <CreateHandles+0xf8>)
 8000d58:	681c      	ldr	r4, [r3, #0]
 8000d5a:	f00d fa19 	bl	800e190 <xTaskGetTickCount>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	2300      	movs	r3, #0
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	2300      	movs	r3, #0
 8000d66:	2101      	movs	r1, #1
 8000d68:	4620      	mov	r0, r4
 8000d6a:	f00e fb7d 	bl	800f468 <xTimerGenericCommand>
}
 8000d6e:	bf00      	nop
 8000d70:	3704      	adds	r7, #4
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000310 	.word	0x20000310
 8000d7c:	080125dc 	.word	0x080125dc
 8000d80:	20000308 	.word	0x20000308
 8000d84:	080125ec 	.word	0x080125ec
 8000d88:	2000030c 	.word	0x2000030c
 8000d8c:	080125fc 	.word	0x080125fc
 8000d90:	20000314 	.word	0x20000314
 8000d94:	0801260c 	.word	0x0801260c
 8000d98:	08000db1 	.word	0x08000db1
 8000d9c:	08012620 	.word	0x08012620
 8000da0:	20000318 	.word	0x20000318
 8000da4:	08012628 	.word	0x08012628
 8000da8:	08012638 	.word	0x08012638
 8000dac:	0801265c 	.word	0x0801265c

08000db0 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8000db4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <Timer1_Handler+0x14>)
 8000dba:	f002 fb70 	bl	800349e <HAL_GPIO_TogglePin>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <CreateTasks+0x5c>)
 8000dd0:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8000dd2:	f00d f931 	bl	800e038 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8000dd6:	e016      	b.n	8000e06 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8000dd8:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <CreateTasks+0x60>)
 8000dda:	f001 f829 	bl	8001e30 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 f824 	bl	8001e30 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6818      	ldr	r0, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6859      	ldr	r1, [r3, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3308      	adds	r3, #8
 8000df4:	461a      	mov	r2, r3
 8000df6:	f00b f84b 	bl	800be90 <osThreadNew>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3330      	adds	r3, #48	@ 0x30
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1e4      	bne.n	8000dd8 <CreateTasks+0x10>
	}

	UART_puts("\r\n");
 8000e0e:	4807      	ldr	r0, [pc, #28]	@ (8000e2c <CreateTasks+0x64>)
 8000e10:	f001 f80e 	bl	8001e30 <UART_puts>
	xTaskResumeAll();   // start nu de scheduler: play ball
 8000e14:	f00d f91e 	bl	800e054 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8000e18:	f000 f88e 	bl	8000f38 <DisplayTaskData>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000008 	.word	0x20000008
 8000e28:	08012670 	.word	0x08012670
 8000e2c:	0801267c 	.word	0x0801267c

08000e30 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <SetTaskPriority+0x6c>)
 8000e3c:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000e3e:	2301      	movs	r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	e023      	b.n	8000e8c <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d119      	bne.n	8000e80 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00c fed6 	bl	800dc0c <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8000e60:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <SetTaskPriority+0x70>)
 8000e62:	f000 ffe5 	bl	8001e30 <UART_puts>
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 ffe0 	bl	8001e30 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <SetTaskPriority+0x74>)
 8000e72:	f000 ffdd 	bl	8001e30 <UART_puts>
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 fff5 	bl	8001e68 <UART_putint>
			return;
 8000e7e:	e009      	b.n	8000e94 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3330      	adds	r3, #48	@ 0x30
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1d7      	bne.n	8000e44 <SetTaskPriority+0x14>
		}
}
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	08012680 	.word	0x08012680
 8000ea4:	0801268c 	.word	0x0801268c

08000ea8 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <StartStopTask+0x80>)
 8000eb2:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000eb8:	e02e      	b.n	8000f18 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d124      	bne.n	8000f0c <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8000ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000ec6:	f107 010c 	add.w	r1, r7, #12
 8000eca:	2305      	movs	r3, #5
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f00d fdc7 	bl	800ea60 <vTaskGetInfo>
			UART_puts("\r\n");
 8000ed2:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <StartStopTask+0x84>)
 8000ed4:	f000 ffac 	bl	8001e30 <UART_puts>
			UART_puts(ptd->attr.name);
 8000ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ffa7 	bl	8001e30 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8000ee2:	7e3b      	ldrb	r3, [r7, #24]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d108      	bne.n	8000efa <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8000ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00c ffd3 	bl	800de98 <vTaskResume>
				UART_puts(" resumed.");
 8000ef2:	480f      	ldr	r0, [pc, #60]	@ (8000f30 <StartStopTask+0x88>)
 8000ef4:	f000 ff9c 	bl	8001e30 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8000ef8:	e012      	b.n	8000f20 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8000efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00c ff22 	bl	800dd48 <vTaskSuspend>
				UART_puts(" suspended.");
 8000f04:	480b      	ldr	r0, [pc, #44]	@ (8000f34 <StartStopTask+0x8c>)
 8000f06:	f000 ff93 	bl	8001e30 <UART_puts>
 8000f0a:	e009      	b.n	8000f20 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0e:	3330      	adds	r3, #48	@ 0x30
 8000f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f14:	3301      	adds	r3, #1
 8000f16:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1cc      	bne.n	8000eba <StartStopTask+0x12>
		}
}
 8000f20:	3738      	adds	r7, #56	@ 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	0801267c 	.word	0x0801267c
 8000f30:	080126a0 	.word	0x080126a0
 8000f34:	080126ac 	.word	0x080126ac

08000f38 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	@ 0x38
 8000f3c:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8000f3e:	4b47      	ldr	r3, [pc, #284]	@ (800105c <DisplayTaskData+0x124>)
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8000f46:	2301      	movs	r3, #1
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f4a:	e062      	b.n	8001012 <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8000f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00d fe07 	bl	800eb64 <uxTaskGetStackHighWaterMark>
 8000f56:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8000f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5a:	2264      	movs	r2, #100	@ 0x64
 8000f5c:	fb03 f202 	mul.w	r2, r3, r2
 8000f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8000f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f70:	4413      	add	r3, r2
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8000f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f76:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000f78:	4639      	mov	r1, r7
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f00d fd6f 	bl	800ea60 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8000f82:	4837      	ldr	r0, [pc, #220]	@ (8001060 <DisplayTaskData+0x128>)
 8000f84:	f000 ff54 	bl	8001e30 <UART_puts>
 8000f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000f8a:	f000 ff6d 	bl	8001e68 <UART_putint>
 8000f8e:	4835      	ldr	r0, [pc, #212]	@ (8001064 <DisplayTaskData+0x12c>)
 8000f90:	f000 ff4e 	bl	8001e30 <UART_puts>
		UART_puts(ptd->attr.name);
 8000f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 ff49 	bl	8001e30 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8000f9e:	4832      	ldr	r0, [pc, #200]	@ (8001068 <DisplayTaskData+0x130>)
 8000fa0:	f000 ff46 	bl	8001e30 <UART_puts>
 8000fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 ff5d 	bl	8001e68 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8000fae:	482f      	ldr	r0, [pc, #188]	@ (800106c <DisplayTaskData+0x134>)
 8000fb0:	f000 ff3e 	bl	8001e30 <UART_puts>
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 ff54 	bl	8001e68 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 8000fc0:	482b      	ldr	r0, [pc, #172]	@ (8001070 <DisplayTaskData+0x138>)
 8000fc2:	f000 ff35 	bl	8001e30 <UART_puts>
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc8:	69da      	ldr	r2, [r3, #28]
 8000fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 ff49 	bl	8001e68 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8000fd6:	4827      	ldr	r0, [pc, #156]	@ (8001074 <DisplayTaskData+0x13c>)
 8000fd8:	f000 ff2a 	bl	8001e30 <UART_puts>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 ff40 	bl	8001e68 <UART_putint>
 8000fe8:	4823      	ldr	r0, [pc, #140]	@ (8001078 <DisplayTaskData+0x140>)
 8000fea:	f000 ff21 	bl	8001e30 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8000fee:	4823      	ldr	r0, [pc, #140]	@ (800107c <DisplayTaskData+0x144>)
 8000ff0:	f000 ff1e 	bl	8001e30 <UART_puts>
 8000ff4:	7b3b      	ldrb	r3, [r7, #12]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d101      	bne.n	8000ffe <DisplayTaskData+0xc6>
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <DisplayTaskData+0x148>)
 8000ffc:	e000      	b.n	8001000 <DisplayTaskData+0xc8>
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <DisplayTaskData+0x14c>)
 8001000:	4618      	mov	r0, r3
 8001002:	f000 ff15 	bl	8001e30 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001008:	3330      	adds	r3, #48	@ 0x30
 800100a:	637b      	str	r3, [r7, #52]	@ 0x34
 800100c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800100e:	3301      	adds	r3, #1
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d198      	bne.n	8000f4c <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 800101a:	481b      	ldr	r0, [pc, #108]	@ (8001088 <DisplayTaskData+0x150>)
 800101c:	f000 ff08 	bl	8001e30 <UART_puts>
 8001020:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8001024:	f000 ff20 	bl	8001e68 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 8001028:	4818      	ldr	r0, [pc, #96]	@ (800108c <DisplayTaskData+0x154>)
 800102a:	f000 ff01 	bl	8001e30 <UART_puts>
 800102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4618      	mov	r0, r3
 8001034:	f000 ff18 	bl	8001e68 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 8001038:	4815      	ldr	r0, [pc, #84]	@ (8001090 <DisplayTaskData+0x158>)
 800103a:	f000 fef9 	bl	8001e30 <UART_puts>
 800103e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001040:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 ff0e 	bl	8001e68 <UART_putint>
	UART_puts("\r\n");
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <DisplayTaskData+0x15c>)
 800104e:	f000 feef 	bl	8001e30 <UART_puts>
}
 8001052:	bf00      	nop
 8001054:	3738      	adds	r7, #56	@ 0x38
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	080126b8 	.word	0x080126b8
 8001064:	080126c0 	.word	0x080126c0
 8001068:	080126c4 	.word	0x080126c4
 800106c:	080126d4 	.word	0x080126d4
 8001070:	080126e4 	.word	0x080126e4
 8001074:	080126f0 	.word	0x080126f0
 8001078:	080126fc 	.word	0x080126fc
 800107c:	08012700 	.word	0x08012700
 8001080:	0801270c 	.word	0x0801270c
 8001084:	08012718 	.word	0x08012718
 8001088:	08012720 	.word	0x08012720
 800108c:	08012730 	.word	0x08012730
 8001090:	0801274c 	.word	0x0801274c
 8001094:	0801267c 	.word	0x0801267c

08001098 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 80010a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <fill_GNRMC+0x100>)
 80010a2:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 80010a4:	2247      	movs	r2, #71	@ 0x47
 80010a6:	2100      	movs	r1, #0
 80010a8:	483c      	ldr	r0, [pc, #240]	@ (800119c <fill_GNRMC+0x104>)
 80010aa:	f00f febe 	bl	8010e2a <memset>

	s = strtok(message, tok); // 0. header;
 80010ae:	68f9      	ldr	r1, [r7, #12]
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f00f fee1 	bl	8010e78 <strtok>
 80010b6:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	4838      	ldr	r0, [pc, #224]	@ (800119c <fill_GNRMC+0x104>)
 80010bc:	f010 f819 	bl	80110f2 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 80010c0:	68f9      	ldr	r1, [r7, #12]
 80010c2:	2000      	movs	r0, #0
 80010c4:	f00f fed8 	bl	8010e78 <strtok>
 80010c8:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	2000      	movs	r0, #0
 80010ce:	f00f fed3 	bl	8010e78 <strtok>
 80010d2:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	4b30      	ldr	r3, [pc, #192]	@ (800119c <fill_GNRMC+0x104>)
 80010da:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	2000      	movs	r0, #0
 80010e0:	f00f feca 	bl	8010e78 <strtok>
 80010e4:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	482d      	ldr	r0, [pc, #180]	@ (80011a0 <fill_GNRMC+0x108>)
 80010ea:	f010 f802 	bl	80110f2 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	2000      	movs	r0, #0
 80010f2:	f00f fec1 	bl	8010e78 <strtok>
 80010f6:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	2000      	movs	r0, #0
 80010fc:	f00f febc 	bl	8010e78 <strtok>
 8001100:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 8001102:	68b9      	ldr	r1, [r7, #8]
 8001104:	4827      	ldr	r0, [pc, #156]	@ (80011a4 <fill_GNRMC+0x10c>)
 8001106:	f00f fff4 	bl	80110f2 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	2000      	movs	r0, #0
 800110e:	f00f feb3 	bl	8010e78 <strtok>
 8001112:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 8001114:	68f9      	ldr	r1, [r7, #12]
 8001116:	2000      	movs	r0, #0
 8001118:	f00f feae 	bl	8010e78 <strtok>
 800111c:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 800111e:	68b9      	ldr	r1, [r7, #8]
 8001120:	4821      	ldr	r0, [pc, #132]	@ (80011a8 <fill_GNRMC+0x110>)
 8001122:	f00f ffe6 	bl	80110f2 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001126:	68f9      	ldr	r1, [r7, #12]
 8001128:	2000      	movs	r0, #0
 800112a:	f00f fea5 	bl	8010e78 <strtok>
 800112e:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	481e      	ldr	r0, [pc, #120]	@ (80011ac <fill_GNRMC+0x114>)
 8001134:	f00f ffdd 	bl	80110f2 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001138:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <fill_GNRMC+0x118>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	2b00      	cmp	r3, #0
 8001142:	d025      	beq.n	8001190 <fill_GNRMC+0xf8>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001144:	481b      	ldr	r0, [pc, #108]	@ (80011b4 <fill_GNRMC+0x11c>)
 8001146:	f000 fe73 	bl	8001e30 <UART_puts>
 800114a:	4814      	ldr	r0, [pc, #80]	@ (800119c <fill_GNRMC+0x104>)
 800114c:	f000 fe70 	bl	8001e30 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001150:	4819      	ldr	r0, [pc, #100]	@ (80011b8 <fill_GNRMC+0x120>)
 8001152:	f000 fe6d 	bl	8001e30 <UART_puts>
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <fill_GNRMC+0x104>)
 8001158:	7c5b      	ldrb	r3, [r3, #17]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fe56 	bl	8001e0c <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001160:	4816      	ldr	r0, [pc, #88]	@ (80011bc <fill_GNRMC+0x124>)
 8001162:	f000 fe65 	bl	8001e30 <UART_puts>
 8001166:	480e      	ldr	r0, [pc, #56]	@ (80011a0 <fill_GNRMC+0x108>)
 8001168:	f000 fe62 	bl	8001e30 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 800116c:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <fill_GNRMC+0x128>)
 800116e:	f000 fe5f 	bl	8001e30 <UART_puts>
 8001172:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <fill_GNRMC+0x10c>)
 8001174:	f000 fe5c 	bl	8001e30 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001178:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <fill_GNRMC+0x12c>)
 800117a:	f000 fe59 	bl	8001e30 <UART_puts>
 800117e:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <fill_GNRMC+0x110>)
 8001180:	f000 fe56 	bl	8001e30 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001184:	4810      	ldr	r0, [pc, #64]	@ (80011c8 <fill_GNRMC+0x130>)
 8001186:	f000 fe53 	bl	8001e30 <UART_puts>
 800118a:	4808      	ldr	r0, [pc, #32]	@ (80011ac <fill_GNRMC+0x114>)
 800118c:	f000 fe50 	bl	8001e30 <UART_puts>
	}
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	08012764 	.word	0x08012764
 800119c:	2000031c 	.word	0x2000031c
 80011a0:	2000032e 	.word	0x2000032e
 80011a4:	20000339 	.word	0x20000339
 80011a8:	20000344 	.word	0x20000344
 80011ac:	2000034a 	.word	0x2000034a
 80011b0:	20000304 	.word	0x20000304
 80011b4:	08012768 	.word	0x08012768
 80011b8:	08012778 	.word	0x08012778
 80011bc:	08012788 	.word	0x08012788
 80011c0:	08012798 	.word	0x08012798
 80011c4:	080127a8 	.word	0x080127a8
 80011c8:	080127b8 	.word	0x080127b8

080011cc <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09c      	sub	sp, #112	@ 0x70
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 80011d8:	2300      	movs	r3, #0
 80011da:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 80011dc:	2300      	movs	r3, #0
 80011de:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80011e0:	4855      	ldr	r0, [pc, #340]	@ (8001338 <GPS_getNMEA+0x16c>)
 80011e2:	f000 fe25 	bl	8001e30 <UART_puts>
 80011e6:	4855      	ldr	r0, [pc, #340]	@ (800133c <GPS_getNMEA+0x170>)
 80011e8:	f000 fe22 	bl	8001e30 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80011ec:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <GPS_getNMEA+0x174>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00b fe19 	bl	800ce30 <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 80011fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001202:	2b24      	cmp	r3, #36	@ 0x24
 8001204:	d10a      	bne.n	800121c <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	2253      	movs	r2, #83	@ 0x53
 800120c:	2100      	movs	r1, #0
 800120e:	4618      	mov	r0, r3
 8001210:	f00f fe0b 	bl	8010e2a <memset>
			pos = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 8001218:	2301      	movs	r3, #1
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 800121c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8088 	beq.w	8001334 <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 8001224:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 8001228:	f107 020c 	add.w	r2, r7, #12
 800122c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800122e:	4413      	add	r3, r2
 8001230:	460a      	mov	r2, r1
 8001232:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001236:	2b05      	cmp	r3, #5
 8001238:	d130      	bne.n	800129c <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 800123a:	2300      	movs	r3, #0
 800123c:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	3301      	adds	r3, #1
 8001244:	2205      	movs	r2, #5
 8001246:	493f      	ldr	r1, [pc, #252]	@ (8001344 <GPS_getNMEA+0x178>)
 8001248:	4618      	mov	r0, r3
 800124a:	f00f fe03 	bl	8010e54 <strncmp>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <GPS_getNMEA+0x8e>
 8001254:	2301      	movs	r3, #1
 8001256:	667b      	str	r3, [r7, #100]	@ 0x64
 8001258:	e01a      	b.n	8001290 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	3301      	adds	r3, #1
 8001260:	2205      	movs	r2, #5
 8001262:	4939      	ldr	r1, [pc, #228]	@ (8001348 <GPS_getNMEA+0x17c>)
 8001264:	4618      	mov	r0, r3
 8001266:	f00f fdf5 	bl	8010e54 <strncmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d102      	bne.n	8001276 <GPS_getNMEA+0xaa>
 8001270:	2302      	movs	r3, #2
 8001272:	667b      	str	r3, [r7, #100]	@ 0x64
 8001274:	e00c      	b.n	8001290 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	3301      	adds	r3, #1
 800127c:	2205      	movs	r2, #5
 800127e:	4933      	ldr	r1, [pc, #204]	@ (800134c <GPS_getNMEA+0x180>)
 8001280:	4618      	mov	r0, r3
 8001282:	f00f fde7 	bl	8010e54 <strncmp>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <GPS_getNMEA+0xc4>
 800128c:	2303      	movs	r3, #3
 800128e:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8001290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 8001296:	2300      	movs	r3, #0
 8001298:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 800129a:	e04c      	b.n	8001336 <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 800129c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800129e:	2b51      	cmp	r3, #81	@ 0x51
 80012a0:	dd02      	ble.n	80012a8 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 80012a2:	2300      	movs	r3, #0
 80012a4:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80012a6:	e046      	b.n	8001336 <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 80012a8:	f107 020c 	add.w	r2, r7, #12
 80012ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0d      	cmp	r3, #13
 80012b4:	d13a      	bne.n	800132c <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 80012b6:	f107 020c 	add.w	r2, r7, #12
 80012ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012bc:	4413      	add	r3, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f88e 	bl	80013e8 <checksum_valid>
 80012cc:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 80012ce:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <GPS_getNMEA+0x184>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 80012da:	481e      	ldr	r0, [pc, #120]	@ (8001354 <GPS_getNMEA+0x188>)
 80012dc:	f000 fda8 	bl	8001e30 <UART_puts>
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 fda3 	bl	8001e30 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 80012ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <GPS_getNMEA+0x128>
 80012f0:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <GPS_getNMEA+0x18c>)
 80012f2:	e000      	b.n	80012f6 <GPS_getNMEA+0x12a>
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <GPS_getNMEA+0x190>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fd9a 	bl	8001e30 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 80012fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d011      	beq.n	8001326 <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 8001302:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <GPS_getNMEA+0x14c>
 8001308:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800130a:	2b00      	cmp	r3, #0
 800130c:	dd0a      	ble.n	8001324 <GPS_getNMEA+0x158>
 800130e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001310:	3b02      	subs	r3, #2
 8001312:	2b01      	cmp	r3, #1
 8001314:	d806      	bhi.n	8001324 <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 8001316:	e006      	b.n	8001326 <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff febb 	bl	8001098 <fill_GNRMC>
						     break;
 8001322:	e000      	b.n	8001326 <GPS_getNMEA+0x15a>
				default:     break;
 8001324:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 8001326:	2300      	movs	r3, #0
 8001328:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 800132a:	e004      	b.n	8001336 <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 800132c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800132e:	3301      	adds	r3, #1
 8001330:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001332:	e75b      	b.n	80011ec <GPS_getNMEA+0x20>
			continue;
 8001334:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001336:	e759      	b.n	80011ec <GPS_getNMEA+0x20>
 8001338:	08012924 	.word	0x08012924
 800133c:	080127c8 	.word	0x080127c8
 8001340:	2000030c 	.word	0x2000030c
 8001344:	080127d4 	.word	0x080127d4
 8001348:	080127dc 	.word	0x080127dc
 800134c:	080127e4 	.word	0x080127e4
 8001350:	20000304 	.word	0x20000304
 8001354:	080127ec 	.word	0x080127ec
 8001358:	080127fc 	.word	0x080127fc
 800135c:	08012808 	.word	0x08012808

08001360 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f000 f813 	bl	8001398 <hexchar2int>
 8001372:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3301      	adds	r3, #1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f809 	bl	8001398 <hexchar2int>
 8001386:	4602      	mov	r2, r0
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]

	return value;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <hexchar2int>:


int hexchar2int(char c)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80013a6:	d905      	bls.n	80013b4 <hexchar2int+0x1c>
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b39      	cmp	r3, #57	@ 0x39
 80013ac:	d802      	bhi.n	80013b4 <hexchar2int+0x1c>
        return (c - '0');
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3b30      	subs	r3, #48	@ 0x30
 80013b2:	e013      	b.n	80013dc <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	2b40      	cmp	r3, #64	@ 0x40
 80013b8:	d905      	bls.n	80013c6 <hexchar2int+0x2e>
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b46      	cmp	r3, #70	@ 0x46
 80013be:	d802      	bhi.n	80013c6 <hexchar2int+0x2e>
        return (c - 'A' + 10);
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	3b37      	subs	r3, #55	@ 0x37
 80013c4:	e00a      	b.n	80013dc <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b60      	cmp	r3, #96	@ 0x60
 80013ca:	d905      	bls.n	80013d8 <hexchar2int+0x40>
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b66      	cmp	r3, #102	@ 0x66
 80013d0:	d802      	bhi.n	80013d8 <hexchar2int+0x40>
        return (c - 'a' + 10);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	3b57      	subs	r3, #87	@ 0x57
 80013d6:	e001      	b.n	80013dc <hexchar2int+0x44>
    return (-1);
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 80013f4:	212a      	movs	r1, #42	@ 0x2a
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f00f fd1f 	bl	8010e3a <strchr>
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d022      	beq.n	800144a <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 800140a:	2301      	movs	r3, #1
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e009      	b.n	8001424 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	7cfb      	ldrb	r3, [r7, #19]
 800141a:	4053      	eors	r3, r2
 800141c:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	3301      	adds	r3, #1
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7fe fed3 	bl	80001d0 <strlen>
 800142a:	4602      	mov	r2, r0
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	429a      	cmp	r2, r3
 8001430:	d8ee      	bhi.n	8001410 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff92 	bl	8001360 <hex2int>
 800143c:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 800143e:	7cfb      	ldrb	r3, [r7, #19]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	429a      	cmp	r2, r3
 8001444:	d101      	bne.n	800144a <checksum_valid+0x62>
			return (1);
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <checksum_valid+0x64>
	}

	return (0);
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800145c:	4820      	ldr	r0, [pc, #128]	@ (80014e0 <LED_Task1+0x8c>)
 800145e:	f000 fce7 	bl	8001e30 <UART_puts>
 8001462:	4820      	ldr	r0, [pc, #128]	@ (80014e4 <LED_Task1+0x90>)
 8001464:	f000 fce4 	bl	8001e30 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001468:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <LED_Task1+0x94>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	4618      	mov	r0, r3
 8001472:	f00b fdbf 	bl	800cff4 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	e01c      	b.n	80014ba <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	b29b      	uxth	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fc87 	bl	8001d98 <LED_put>
           	osDelay(os_delay);
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <LED_Task1+0x98>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f00a fd90 	bl	800bfb4 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001494:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <LED_Task1+0x9c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 80014a0:	4814      	ldr	r0, [pc, #80]	@ (80014f4 <LED_Task1+0xa0>)
 80014a2:	f000 fcc5 	bl	8001e30 <UART_puts>
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fcdd 	bl	8001e68 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	105b      	asrs	r3, r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	dddf      	ble.n	8001480 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <LED_Task1+0x94>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	f00b fb11 	bl	800caf0 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <LED_Task1+0xa4>)
 80014d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	f3bf 8f4f 	dsb	sy
 80014da:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 80014de:	e7c3      	b.n	8001468 <LED_Task1+0x14>
 80014e0:	08012930 	.word	0x08012930
 80014e4:	08012814 	.word	0x08012814
 80014e8:	20000310 	.word	0x20000310
 80014ec:	20000248 	.word	0x20000248
 80014f0:	20000304 	.word	0x20000304
 80014f4:	08012820 	.word	0x08012820
 80014f8:	e000ed04 	.word	0xe000ed04

080014fc <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001504:	4820      	ldr	r0, [pc, #128]	@ (8001588 <LED_Task2+0x8c>)
 8001506:	f000 fc93 	bl	8001e30 <UART_puts>
 800150a:	4820      	ldr	r0, [pc, #128]	@ (800158c <LED_Task2+0x90>)
 800150c:	f000 fc90 	bl	8001e30 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001510:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <LED_Task2+0x94>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f04f 31ff 	mov.w	r1, #4294967295
 8001518:	4618      	mov	r0, r3
 800151a:	f00b fd6b 	bl	800cff4 <xQueueSemaphoreTake>
		leds = 1;
 800151e:	2301      	movs	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	e01c      	b.n	8001562 <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4618      	mov	r0, r3
 800152e:	f000 fc33 	bl	8001d98 <LED_put>
          	osDelay(os_delay);
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <LED_Task2+0x98>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f00a fd3c 	bl	800bfb4 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800153c:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <LED_Task2+0x9c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8001548:	4814      	ldr	r0, [pc, #80]	@ (800159c <LED_Task2+0xa0>)
 800154a:	f000 fc71 	bl	8001e30 <UART_puts>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f000 fc89 	bl	8001e68 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b07      	cmp	r3, #7
 8001566:	dddf      	ble.n	8001528 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8001568:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <LED_Task2+0x94>)
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	2300      	movs	r3, #0
 800156e:	2200      	movs	r2, #0
 8001570:	2100      	movs	r1, #0
 8001572:	f00b fabd 	bl	800caf0 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <LED_Task2+0xa4>)
 8001578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001586:	e7c3      	b.n	8001510 <LED_Task2+0x14>
 8001588:	0801293c 	.word	0x0801293c
 800158c:	08012814 	.word	0x08012814
 8001590:	20000310 	.word	0x20000310
 8001594:	20000248 	.word	0x20000248
 8001598:	20000304 	.word	0x20000304
 800159c:	0801282c 	.word	0x0801282c
 80015a0:	e000ed04 	.word	0xe000ed04

080015a4 <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 80015ac:	4830      	ldr	r0, [pc, #192]	@ (8001670 <LED_Task3+0xcc>)
 80015ae:	f00c fe6d 	bl	800e28c <xTaskGetHandle>
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 80015ba:	482e      	ldr	r0, [pc, #184]	@ (8001674 <LED_Task3+0xd0>)
 80015bc:	f7ff fb5c 	bl	8000c78 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80015c0:	482d      	ldr	r0, [pc, #180]	@ (8001678 <LED_Task3+0xd4>)
 80015c2:	f000 fc35 	bl	8001e30 <UART_puts>
 80015c6:	482d      	ldr	r0, [pc, #180]	@ (800167c <LED_Task3+0xd8>)
 80015c8:	f000 fc32 	bl	8001e30 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 80015cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001680 <LED_Task3+0xdc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00b fd0d 	bl	800cff4 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e02d      	b.n	800163c <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <LED_Task3+0x48>
 80015e6:	2318      	movs	r3, #24
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	e00d      	b.n	8001608 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <LED_Task3+0x54>
 80015f2:	2324      	movs	r3, #36	@ 0x24
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e007      	b.n	8001608 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d102      	bne.n	8001604 <LED_Task3+0x60>
 80015fe:	2342      	movs	r3, #66	@ 0x42
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e001      	b.n	8001608 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 8001604:	2381      	movs	r3, #129	@ 0x81
 8001606:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fbc3 	bl	8001d98 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 8001612:	4b1c      	ldr	r3, [pc, #112]	@ (8001684 <LED_Task3+0xe0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f00a fccc 	bl	800bfb4 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800161c:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <LED_Task3+0xe4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 8001628:	4818      	ldr	r0, [pc, #96]	@ (800168c <LED_Task3+0xe8>)
 800162a:	f000 fc01 	bl	8001e30 <UART_puts>
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fc19 	bl	8001e68 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b03      	cmp	r3, #3
 8001640:	ddce      	ble.n	80015e0 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <LED_Task3+0xdc>)
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	2300      	movs	r3, #0
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	f00b fa50 	bl	800caf0 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 8001650:	2300      	movs	r3, #0
 8001652:	2202      	movs	r2, #2
 8001654:	2100      	movs	r1, #0
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f00d fd48 	bl	800f0ec <xTaskGenericNotify>
		osDelay(200);
 800165c:	20c8      	movs	r0, #200	@ 0xc8
 800165e:	f00a fca9 	bl	800bfb4 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 8001662:	f04f 31ff 	mov.w	r1, #4294967295
 8001666:	2001      	movs	r0, #1
 8001668:	f00d fc94 	bl	800ef94 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 800166c:	e7ae      	b.n	80015cc <LED_Task3+0x28>
 800166e:	bf00      	nop
 8001670:	08012838 	.word	0x08012838
 8001674:	08012844 	.word	0x08012844
 8001678:	08012948 	.word	0x08012948
 800167c:	08012814 	.word	0x08012814
 8001680:	20000310 	.word	0x20000310
 8001684:	20000248 	.word	0x20000248
 8001688:	20000304 	.word	0x20000304
 800168c:	08012850 	.word	0x08012850

08001690 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8001698:	4830      	ldr	r0, [pc, #192]	@ (800175c <LED_Task4+0xcc>)
 800169a:	f00c fdf7 	bl	800e28c <xTaskGetHandle>
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 80016a6:	482e      	ldr	r0, [pc, #184]	@ (8001760 <LED_Task4+0xd0>)
 80016a8:	f7ff fae6 	bl	8000c78 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80016ac:	482d      	ldr	r0, [pc, #180]	@ (8001764 <LED_Task4+0xd4>)
 80016ae:	f000 fbbf 	bl	8001e30 <UART_puts>
 80016b2:	482d      	ldr	r0, [pc, #180]	@ (8001768 <LED_Task4+0xd8>)
 80016b4:	f000 fbbc 	bl	8001e30 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	2001      	movs	r0, #1
 80016be:	f00d fc69 	bl	800ef94 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 80016c2:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <LED_Task4+0xdc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00b fc92 	bl	800cff4 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e02d      	b.n	8001732 <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <LED_Task4+0x52>
 80016dc:	2381      	movs	r3, #129	@ 0x81
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	e00d      	b.n	80016fe <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d102      	bne.n	80016ee <LED_Task4+0x5e>
 80016e8:	2342      	movs	r3, #66	@ 0x42
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	e007      	b.n	80016fe <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d102      	bne.n	80016fa <LED_Task4+0x6a>
 80016f4:	2324      	movs	r3, #36	@ 0x24
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	e001      	b.n	80016fe <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 80016fa:	2318      	movs	r3, #24
 80016fc:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	b29b      	uxth	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fb48 	bl	8001d98 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <LED_Task4+0xe0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f00a fc51 	bl	800bfb4 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <LED_Task4+0xe4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 800171e:	4816      	ldr	r0, [pc, #88]	@ (8001778 <LED_Task4+0xe8>)
 8001720:	f000 fb86 	bl	8001e30 <UART_puts>
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fb9e 	bl	8001e68 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3301      	adds	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b03      	cmp	r3, #3
 8001736:	ddce      	ble.n	80016d6 <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <LED_Task4+0xdc>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	2300      	movs	r3, #0
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	f00b f9d5 	bl	800caf0 <xQueueGenericSend>
		osDelay(200);
 8001746:	20c8      	movs	r0, #200	@ 0xc8
 8001748:	f00a fc34 	bl	800bfb4 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 800174c:	2300      	movs	r3, #0
 800174e:	2202      	movs	r2, #2
 8001750:	2100      	movs	r1, #0
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f00d fcca 	bl	800f0ec <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8001758:	e7ae      	b.n	80016b8 <LED_Task4+0x28>
 800175a:	bf00      	nop
 800175c:	08012860 	.word	0x08012860
 8001760:	0801286c 	.word	0x0801286c
 8001764:	08012954 	.word	0x08012954
 8001768:	08012814 	.word	0x08012814
 800176c:	20000310 	.word	0x20000310
 8001770:	20000248 	.word	0x20000248
 8001774:	20000304 	.word	0x20000304
 8001778:	08012878 	.word	0x08012878

0800177c <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b098      	sub	sp, #96	@ 0x60
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001784:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <Student_task1+0x4c>)
 8001786:	f000 fb53 	bl	8001e30 <UART_puts>
 800178a:	4810      	ldr	r0, [pc, #64]	@ (80017cc <Student_task1+0x50>)
 800178c:	f000 fb50 	bl	8001e30 <UART_puts>
	char buf[80];
	unsigned int i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 8001794:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001798:	f00a fc0c 	bl	800bfb4 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <Student_task1+0x54>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f5      	beq.n	8001794 <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 80017a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017ae:	f107 000c 	add.w	r0, r7, #12
 80017b2:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <Student_task1+0x4c>)
 80017b4:	4907      	ldr	r1, [pc, #28]	@ (80017d4 <Student_task1+0x58>)
 80017b6:	f00f fad3 	bl	8010d60 <siprintf>
			UART_puts(buf);
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fb36 	bl	8001e30 <UART_puts>
       	osDelay(1000);
 80017c4:	e7e6      	b.n	8001794 <Student_task1+0x18>
 80017c6:	bf00      	nop
 80017c8:	08012960 	.word	0x08012960
 80017cc:	08012888 	.word	0x08012888
 80017d0:	20000304 	.word	0x20000304
 80017d4:	08012894 	.word	0x08012894

080017d8 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 80017e4:	e023      	b.n	800182e <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ec:	4815      	ldr	r0, [pc, #84]	@ (8001844 <BUZZER_put+0x6c>)
 80017ee:	f001 fe3d 	bl	800346c <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e002      	b.n	80017fe <BUZZER_put+0x26>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	441a      	add	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	429a      	cmp	r2, r3
 8001808:	d8f6      	bhi.n	80017f8 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <BUZZER_put+0x6c>)
 8001812:	f001 fe2b 	bl	800346c <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e002      	b.n	8001822 <BUZZER_put+0x4a>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	441a      	add	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	429a      	cmp	r2, r3
 800182c:	d8f6      	bhi.n	800181c <BUZZER_put+0x44>
	while (k++<100)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	60ba      	str	r2, [r7, #8]
 8001834:	2b63      	cmp	r3, #99	@ 0x63
 8001836:	d9d6      	bls.n	80017e6 <BUZZER_put+0xe>
	}
}
 8001838:	bf00      	nop
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40020800 	.word	0x40020800

08001848 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <KEYS_init+0x6c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <KEYS_init+0x6c>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <KEYS_init+0x6c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 8001876:	f640 030e 	movw	r3, #2062	@ 0x80e
 800187a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <KEYS_init+0x70>)
 8001882:	f001 fc3f 	bl	8003104 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 8001886:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800188a:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8001890:	2302      	movs	r3, #2
 8001892:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	4619      	mov	r1, r3
 8001898:	4807      	ldr	r0, [pc, #28]	@ (80018b8 <KEYS_init+0x70>)
 800189a:	f001 fc33 	bl	8003104 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	f640 010e 	movw	r1, #2062	@ 0x80e
 80018a4:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <KEYS_init+0x70>)
 80018a6:	f001 fde1 	bl	800346c <HAL_GPIO_WritePin>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020c00 	.word	0x40020c00

080018bc <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <KEYS_initISR+0x4c>)
 80018d0:	f001 fdcc 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	2102      	movs	r1, #2
 80018dc:	480a      	ldr	r0, [pc, #40]	@ (8001908 <KEYS_initISR+0x4c>)
 80018de:	f001 fdc5 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	2108      	movs	r1, #8
 80018ea:	4807      	ldr	r0, [pc, #28]	@ (8001908 <KEYS_initISR+0x4c>)
 80018ec:	f001 fdbe 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	2104      	movs	r1, #4
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <KEYS_initISR+0x4c>)
 80018fa:	f001 fdb7 	bl	800346c <HAL_GPIO_WritePin>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020c00 	.word	0x40020c00

0800190c <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001920:	4827      	ldr	r0, [pc, #156]	@ (80019c0 <KEYS_read+0xb4>)
 8001922:	f001 fda3 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	2108      	movs	r1, #8
 800192a:	4825      	ldr	r0, [pc, #148]	@ (80019c0 <KEYS_read+0xb4>)
 800192c:	f001 fd9e 	bl	800346c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8001930:	f000 f848 	bl	80019c4 <KEYS_kolom>
 8001934:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <KEYS_read+0x36>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	330c      	adds	r3, #12
 8001940:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2108      	movs	r1, #8
 8001946:	481e      	ldr	r0, [pc, #120]	@ (80019c0 <KEYS_read+0xb4>)
 8001948:	f001 fd90 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 800194c:	2201      	movs	r2, #1
 800194e:	2104      	movs	r1, #4
 8001950:	481b      	ldr	r0, [pc, #108]	@ (80019c0 <KEYS_read+0xb4>)
 8001952:	f001 fd8b 	bl	800346c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8001956:	f000 f835 	bl	80019c4 <KEYS_kolom>
 800195a:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <KEYS_read+0x5c>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	3308      	adds	r3, #8
 8001966:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 8001968:	2200      	movs	r2, #0
 800196a:	2104      	movs	r1, #4
 800196c:	4814      	ldr	r0, [pc, #80]	@ (80019c0 <KEYS_read+0xb4>)
 800196e:	f001 fd7d 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 8001972:	2201      	movs	r2, #1
 8001974:	2102      	movs	r1, #2
 8001976:	4812      	ldr	r0, [pc, #72]	@ (80019c0 <KEYS_read+0xb4>)
 8001978:	f001 fd78 	bl	800346c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800197c:	f000 f822 	bl	80019c4 <KEYS_kolom>
 8001980:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <KEYS_read+0x82>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3304      	adds	r3, #4
 800198c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2102      	movs	r1, #2
 8001992:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <KEYS_read+0xb4>)
 8001994:	f001 fd6a 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800199e:	4808      	ldr	r0, [pc, #32]	@ (80019c0 <KEYS_read+0xb4>)
 80019a0:	f001 fd64 	bl	800346c <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80019a4:	f000 f80e 	bl	80019c4 <KEYS_kolom>
 80019a8:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <KEYS_read+0xa8>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	607b      	str	r3, [r7, #4]

	return out;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020c00 	.word	0x40020c00

080019c4 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 80019ce:	2140      	movs	r1, #64	@ 0x40
 80019d0:	4814      	ldr	r0, [pc, #80]	@ (8001a24 <KEYS_kolom+0x60>)
 80019d2:	f001 fd33 	bl	800343c <HAL_GPIO_ReadPin>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <KEYS_kolom+0x1c>
 80019dc:	2301      	movs	r3, #1
 80019de:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	4810      	ldr	r0, [pc, #64]	@ (8001a24 <KEYS_kolom+0x60>)
 80019e4:	f001 fd2a 	bl	800343c <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <KEYS_kolom+0x2e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 80019f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f6:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <KEYS_kolom+0x60>)
 80019f8:	f001 fd20 	bl	800343c <HAL_GPIO_ReadPin>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <KEYS_kolom+0x42>
 8001a02:	2303      	movs	r3, #3
 8001a04:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 8001a06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a0a:	4806      	ldr	r0, [pc, #24]	@ (8001a24 <KEYS_kolom+0x60>)
 8001a0c:	f001 fd16 	bl	800343c <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <KEYS_kolom+0x56>
 8001a16:	2304      	movs	r3, #4
 8001a18:	607b      	str	r3, [r7, #4]
	return key;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020c00 	.word	0x40020c00

08001a28 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4809      	ldr	r0, [pc, #36]	@ (8001a58 <ClearBits+0x30>)
 8001a32:	f001 fd1b 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <ClearBits+0x30>)
 8001a3c:	f001 fd16 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2120      	movs	r1, #32
 8001a44:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <ClearBits+0x30>)
 8001a46:	f001 fd11 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2140      	movs	r1, #64	@ 0x40
 8001a4e:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <ClearBits+0x30>)
 8001a50:	f001 fd0c 	bl	800346c <HAL_GPIO_WritePin>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8001a60:	2001      	movs	r0, #1
 8001a62:	f000 f967 	bl	8001d34 <LCD_writecontrol>
   curpos=0;               // reset position
 8001a66:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <LCD_clear+0x1c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8001a6c:	2005      	movs	r0, #5
 8001a6e:	f001 f9b1 	bl	8002dd4 <HAL_Delay>
//   busyflag();

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000363 	.word	0x20000363

08001a7c <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <LCD_init+0x11c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	4a43      	ldr	r2, [pc, #268]	@ (8001b98 <LCD_init+0x11c>)
 8001a8c:	f043 0310 	orr.w	r3, r3, #16
 8001a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a92:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <LCD_init+0x11c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <LCD_init+0x11c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8001b98 <LCD_init+0x11c>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b3a      	ldr	r3, [pc, #232]	@ (8001b98 <LCD_init+0x11c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b36      	ldr	r3, [pc, #216]	@ (8001b98 <LCD_init+0x11c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a35      	ldr	r2, [pc, #212]	@ (8001b98 <LCD_init+0x11c>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b33      	ldr	r3, [pc, #204]	@ (8001b98 <LCD_init+0x11c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8001ae2:	2378      	movs	r3, #120	@ 0x78
 8001ae4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	482b      	ldr	r0, [pc, #172]	@ (8001b9c <LCD_init+0x120>)
 8001aee:	f001 fb09 	bl	8003104 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8001af2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001af6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	4828      	ldr	r0, [pc, #160]	@ (8001ba0 <LCD_init+0x124>)
 8001b00:	f001 fb00 	bl	8003104 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8001b04:	2301      	movs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8001b08:	f107 030c 	add.w	r3, r7, #12
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4825      	ldr	r0, [pc, #148]	@ (8001ba4 <LCD_init+0x128>)
 8001b10:	f001 faf8 	bl	8003104 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1a:	4821      	ldr	r0, [pc, #132]	@ (8001ba0 <LCD_init+0x124>)
 8001b1c:	f001 fca6 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2101      	movs	r1, #1
 8001b24:	481f      	ldr	r0, [pc, #124]	@ (8001ba4 <LCD_init+0x128>)
 8001b26:	f001 fca1 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b30:	481b      	ldr	r0, [pc, #108]	@ (8001ba0 <LCD_init+0x124>)
 8001b32:	f001 fc9b 	bl	800346c <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8001b36:	200f      	movs	r0, #15
 8001b38:	f001 f94c 	bl	8002dd4 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 8001b3c:	2030      	movs	r0, #48	@ 0x30
 8001b3e:	f000 f8c7 	bl	8001cd0 <LCD_writebyte>
    HAL_Delay(70);
 8001b42:	2046      	movs	r0, #70	@ 0x46
 8001b44:	f001 f946 	bl	8002dd4 <HAL_Delay>
    LCD_writebyte(0x30);
 8001b48:	2030      	movs	r0, #48	@ 0x30
 8001b4a:	f000 f8c1 	bl	8001cd0 <LCD_writebyte>
    LCD_writebyte(0x30);
 8001b4e:	2030      	movs	r0, #48	@ 0x30
 8001b50:	f000 f8be 	bl	8001cd0 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8001b54:	2002      	movs	r0, #2
 8001b56:	f000 f8bb 	bl	8001cd0 <LCD_writebyte>
    HAL_Delay(5);
 8001b5a:	2005      	movs	r0, #5
 8001b5c:	f001 f93a 	bl	8002dd4 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8001b60:	202c      	movs	r0, #44	@ 0x2c
 8001b62:	f000 f8b5 	bl	8001cd0 <LCD_writebyte>
    HAL_Delay(15);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f001 f934 	bl	8002dd4 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8001b6c:	200c      	movs	r0, #12
 8001b6e:	f000 f8af 	bl	8001cd0 <LCD_writebyte>
    HAL_Delay(15);
 8001b72:	200f      	movs	r0, #15
 8001b74:	f001 f92e 	bl	8002dd4 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f000 f8a9 	bl	8001cd0 <LCD_writebyte>
    HAL_Delay(15);
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f001 f928 	bl	8002dd4 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8001b84:	2006      	movs	r0, #6
 8001b86:	f000 f8a3 	bl	8001cd0 <LCD_writebyte>
    HAL_Delay(15);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f001 f922 	bl	8002dd4 <HAL_Delay>
}
 8001b90:	bf00      	nop
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00

08001ba8 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb8:	480b      	ldr	r0, [pc, #44]	@ (8001be8 <LCD_putchar+0x40>)
 8001bba:	f001 fc57 	bl	800346c <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f885 	bl	8001cd0 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8001bc6:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <LCD_putchar+0x44>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <LCD_putchar+0x44>)
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <LCD_putchar+0x44>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d102      	bne.n	8001be0 <LCD_putchar+0x38>
    	curpos=0;
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <LCD_putchar+0x44>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40020800 	.word	0x40020800
 8001bec:	20000363 	.word	0x20000363

08001bf0 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73bb      	strb	r3, [r7, #14]
 8001bfc:	e019      	b.n	8001c32 <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <LCD_put+0x58>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d10b      	bne.n	8001c1e <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e005      	b.n	8001c18 <LCD_put+0x28>
 8001c0c:	2014      	movs	r0, #20
 8001c0e:	f000 f891 	bl	8001d34 <LCD_writecontrol>
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	3301      	adds	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b1f      	cmp	r3, #31
 8001c1c:	d9f6      	bls.n	8001c0c <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ffbe 	bl	8001ba8 <LCD_putchar>
    for (k=0; string[k]; k++)
 8001c2c:	7bbb      	ldrb	r3, [r7, #14]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	73bb      	strb	r3, [r7, #14]
 8001c32:	7bbb      	ldrb	r3, [r7, #14]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1df      	bne.n	8001bfe <LCD_put+0xe>
    }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000363 	.word	0x20000363

08001c4c <LCD_puts>:

void LCD_puts(char *c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ffcb 	bl	8001bf0 <LCD_put>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8001c6e:	f7ff fedb 	bl	8001a28 <ClearBits>

    if (data & 0x01)
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2140      	movs	r1, #64	@ 0x40
 8001c80:	4812      	ldr	r0, [pc, #72]	@ (8001ccc <LCD_writenibble+0x68>)
 8001c82:	f001 fbf3 	bl	800346c <HAL_GPIO_WritePin>

	if (data & 0x02)
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	2120      	movs	r1, #32
 8001c94:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <LCD_writenibble+0x68>)
 8001c96:	f001 fbe9 	bl	800346c <HAL_GPIO_WritePin>

	if (data & 0x04)
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2110      	movs	r1, #16
 8001ca8:	4808      	ldr	r0, [pc, #32]	@ (8001ccc <LCD_writenibble+0x68>)
 8001caa:	f001 fbdf 	bl	800346c <HAL_GPIO_WritePin>

	if (data & 0x08)
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2108      	movs	r1, #8
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <LCD_writenibble+0x68>)
 8001cbe:	f001 fbd5 	bl	800346c <HAL_GPIO_WritePin>

}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2101      	movs	r1, #1
 8001cde:	4814      	ldr	r0, [pc, #80]	@ (8001d30 <LCD_writebyte+0x60>)
 8001ce0:	f001 fbc4 	bl	800346c <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ffba 	bl	8001c64 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	480e      	ldr	r0, [pc, #56]	@ (8001d30 <LCD_writebyte+0x60>)
 8001cf6:	f001 fbb9 	bl	800346c <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f001 f86a 	bl	8002dd4 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2101      	movs	r1, #1
 8001d04:	480a      	ldr	r0, [pc, #40]	@ (8001d30 <LCD_writebyte+0x60>)
 8001d06:	f001 fbb1 	bl	800346c <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ffa6 	bl	8001c64 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4804      	ldr	r0, [pc, #16]	@ (8001d30 <LCD_writebyte+0x60>)
 8001d1e:	f001 fba5 	bl	800346c <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001d22:	2002      	movs	r0, #2
 8001d24:	f001 f856 	bl	8002dd4 <HAL_Delay>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d44:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <LCD_writecontrol+0x28>)
 8001d46:	f001 fb91 	bl	800346c <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ffbf 	bl	8001cd0 <LCD_writebyte>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40020800 	.word	0x40020800

08001d60 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d6a:	4809      	ldr	r0, [pc, #36]	@ (8001d90 <LED_init+0x30>)
 8001d6c:	f001 fb7e 	bl	800346c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <LED_init+0x34>)
 8001d78:	f001 fb78 	bl	800346c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2102      	movs	r1, #2
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <LED_init+0x34>)
 8001d82:	f001 fb73 	bl	800346c <HAL_GPIO_WritePin>
    LED_put(0);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f000 f806 	bl	8001d98 <LED_put>
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40020400 	.word	0x40020400

08001d98 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8001da2:	2380      	movs	r3, #128	@ 0x80
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e01c      	b.n	8001de2 <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bf14      	ite	ne
 8001db2:	2301      	movne	r3, #1
 8001db4:	2300      	moveq	r3, #0
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dbe:	4811      	ldr	r0, [pc, #68]	@ (8001e04 <LED_put+0x6c>)
 8001dc0:	f001 fb54 	bl	800346c <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dca:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <LED_put+0x70>)
 8001dcc:	f001 fb4e 	bl	800346c <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd6:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <LED_put+0x70>)
 8001dd8:	f001 fb48 	bl	800346c <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1df      	bne.n	8001da8 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2102      	movs	r1, #2
 8001dec:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <LED_put+0x70>)
 8001dee:	f001 fb3d 	bl	800346c <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2102      	movs	r1, #2
 8001df6:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <LED_put+0x70>)
 8001df8:	f001 fb38 	bl	800346c <HAL_GPIO_WritePin>
}
 8001dfc:	bf00      	nop
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400

08001e0c <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8001e16:	1df9      	adds	r1, r7, #7
 8001e18:	2364      	movs	r3, #100	@ 0x64
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4803      	ldr	r0, [pc, #12]	@ (8001e2c <UART_putchar+0x20>)
 8001e1e:	f005 fc15 	bl	800764c <HAL_UART_Transmit>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200004a0 	.word	0x200004a0

08001e30 <UART_puts>:

void UART_puts(const char *s)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e009      	b.n	8001e52 <UART_puts+0x22>
		UART_putchar(s[i]);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ffe0 	bl	8001e0c <UART_putchar>
	for (i=0; s[i]; i++)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ef      	bne.n	8001e3e <UART_puts+0xe>
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8001e70:	210a      	movs	r1, #10
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f804 	bl	8001e80 <UART_putnum>
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d129      	bne.n	8001eea <UART_putnum+0x6a>
    {
        c[i]='0';
 8001e96:	f107 0208 	add.w	r2, r7, #8
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	2230      	movs	r2, #48	@ 0x30
 8001ea0:	701a      	strb	r2, [r3, #0]
        i--;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	e030      	b.n	8001f0c <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8001eaa:	78fa      	ldrb	r2, [r7, #3]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	fbb3 f1f2 	udiv	r1, r3, r2
 8001eb2:	fb01 f202 	mul.w	r2, r1, r2
 8001eb6:	1a9b      	subs	r3, r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8001ec4:	4a15      	ldr	r2, [pc, #84]	@ (8001f1c <UART_putnum+0x9c>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b259      	sxtb	r1, r3
 8001ece:	f107 0208 	add.w	r2, r7, #8
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	701a      	strb	r2, [r3, #0]
            i--;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <UART_putnum+0x6a>
                num=0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
        while(num>0)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1dc      	bne.n	8001eaa <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8001ef0:	e00c      	b.n	8001f0c <UART_putnum+0x8c>
    {
        i++;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8001ef8:	f107 0208 	add.w	r2, r7, #8
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	4413      	add	r3, r2
 8001f00:	f993 3000 	ldrsb.w	r3, [r3]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff ff80 	bl	8001e0c <UART_putchar>
    while(i<15)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2b0e      	cmp	r3, #14
 8001f10:	ddef      	ble.n	8001ef2 <UART_putnum+0x72>
    }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000024c 	.word	0x2000024c

08001f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f24:	f000 ff14 	bl	8002d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f28:	f000 f830 	bl	8001f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f2c:	f000 f980 	bl	8002230 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f30:	f000 f896 	bl	8002060 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001f34:	f000 f8c2 	bl	80020bc <MX_I2S3_Init>
  MX_SPI1_Init();
 8001f38:	f000 f8f0 	bl	800211c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f3c:	f000 f94e 	bl	80021dc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001f40:	f000 f922 	bl	8002188 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8001f44:	f7ff fd9a 	bl	8001a7c <LCD_init>
  KEYS_init();
 8001f48:	f7ff fc7e 	bl	8001848 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	f7ff fcb5 	bl	80018bc <KEYS_initISR>
  LED_init();
 8001f52:	f7ff ff05 	bl	8001d60 <LED_init>

  DisplayVersion();
 8001f56:	f7fe fe21 	bl	8000b9c <DisplayVersion>
  osDelay(500); // time to read version
 8001f5a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f5e:	f00a f829 	bl	800bfb4 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f62:	f009 ff0d 	bl	800bd80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f66:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <main+0x60>)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <main+0x64>)
 8001f6c:	f009 ff90 	bl	800be90 <osThreadNew>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <main+0x68>)
 8001f74:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f76:	f009 ff4f 	bl	800be18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f7a:	bf00      	nop
 8001f7c:	e7fd      	b.n	8001f7a <main+0x5a>
 8001f7e:	bf00      	nop
 8001f80:	08012970 	.word	0x08012970
 8001f84:	08002559 	.word	0x08002559
 8001f88:	200004e8 	.word	0x200004e8

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b094      	sub	sp, #80	@ 0x50
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	2230      	movs	r2, #48	@ 0x30
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f00e ff45 	bl	8010e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	4b28      	ldr	r3, [pc, #160]	@ (8002058 <SystemClock_Config+0xcc>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <SystemClock_Config+0xcc>)
 8001fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc0:	4b25      	ldr	r3, [pc, #148]	@ (8002058 <SystemClock_Config+0xcc>)
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <SystemClock_Config+0xd0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	@ (800205c <SystemClock_Config+0xd0>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <SystemClock_Config+0xd0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002000:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002004:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002006:	2302      	movs	r3, #2
 8002008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800200a:	2307      	movs	r3, #7
 800200c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	4618      	mov	r0, r3
 8002014:	f004 f99a 	bl	800634c <HAL_RCC_OscConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800201e:	f000 fadf 	bl	80025e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002022:	230f      	movs	r3, #15
 8002024:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002026:	2302      	movs	r3, #2
 8002028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800202e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002034:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2105      	movs	r1, #5
 8002040:	4618      	mov	r0, r3
 8002042:	f004 fbfb 	bl	800683c <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800204c:	f000 fac8 	bl	80025e0 <Error_Handler>
  }
}
 8002050:	bf00      	nop
 8002052:	3750      	adds	r7, #80	@ 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <MX_I2C1_Init+0x50>)
 8002066:	4a13      	ldr	r2, [pc, #76]	@ (80020b4 <MX_I2C1_Init+0x54>)
 8002068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <MX_I2C1_Init+0x50>)
 800206c:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <MX_I2C1_Init+0x58>)
 800206e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_I2C1_Init+0x50>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <MX_I2C1_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <MX_I2C1_Init+0x50>)
 800207e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <MX_I2C1_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <MX_I2C1_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <MX_I2C1_Init+0x50>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <MX_I2C1_Init+0x50>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	@ (80020b0 <MX_I2C1_Init+0x50>)
 800209e:	f003 fb71 	bl	8005784 <HAL_I2C_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020a8:	f000 fa9a 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20000364 	.word	0x20000364
 80020b4:	40005400 	.word	0x40005400
 80020b8:	000186a0 	.word	0x000186a0

080020bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80020c0:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020c2:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <MX_I2S3_Init+0x58>)
 80020c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80020c6:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80020da:	4b0d      	ldr	r3, [pc, #52]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002118 <MX_I2S3_Init+0x5c>)
 80020e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80020e8:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80020ee:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_I2S3_Init+0x54>)
 80020fc:	f003 fc86 	bl	8005a0c <HAL_I2S_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002106:	f000 fa6b 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200003b8 	.word	0x200003b8
 8002114:	40003c00 	.word	0x40003c00
 8002118:	00017700 	.word	0x00017700

0800211c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002122:	4a18      	ldr	r2, [pc, #96]	@ (8002184 <MX_SPI1_Init+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002126:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002128:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800212c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800212e:	4b14      	ldr	r3, [pc, #80]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002136:	2200      	movs	r2, #0
 8002138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213a:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <MX_SPI1_Init+0x64>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002140:	4b0f      	ldr	r3, [pc, #60]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002146:	4b0e      	ldr	r3, [pc, #56]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800214c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002154:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <MX_SPI1_Init+0x64>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002160:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002162:	2200      	movs	r2, #0
 8002164:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <MX_SPI1_Init+0x64>)
 8002168:	220a      	movs	r2, #10
 800216a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800216c:	4804      	ldr	r0, [pc, #16]	@ (8002180 <MX_SPI1_Init+0x64>)
 800216e:	f004 fef9 	bl	8006f64 <HAL_SPI_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002178:	f000 fa32 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000400 	.word	0x20000400
 8002184:	40013000 	.word	0x40013000

08002188 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <MX_UART4_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <MX_UART4_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <MX_UART4_Init+0x4c>)
 8002194:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002198:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <MX_UART4_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021c0:	f005 f9f4 	bl	80075ac <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80021ca:	f000 fa09 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000458 	.word	0x20000458
 80021d8:	40004c00 	.word	0x40004c00

080021dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <MX_USART2_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002214:	f005 f9ca 	bl	80075ac <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f000 f9df 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200004a0 	.word	0x200004a0
 800222c:	40004400 	.word	0x40004400

08002230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	@ 0x30
 8002234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	4b8e      	ldr	r3, [pc, #568]	@ (8002484 <MX_GPIO_Init+0x254>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a8d      	ldr	r2, [pc, #564]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b8b      	ldr	r3, [pc, #556]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	61bb      	str	r3, [r7, #24]
 8002260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	4b87      	ldr	r3, [pc, #540]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a86      	ldr	r2, [pc, #536]	@ (8002484 <MX_GPIO_Init+0x254>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b84      	ldr	r3, [pc, #528]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	4b80      	ldr	r3, [pc, #512]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a7f      	ldr	r2, [pc, #508]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b7d      	ldr	r3, [pc, #500]	@ (8002484 <MX_GPIO_Init+0x254>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b79      	ldr	r3, [pc, #484]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a78      	ldr	r2, [pc, #480]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b72      	ldr	r3, [pc, #456]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a71      	ldr	r2, [pc, #452]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	4a6a      	ldr	r2, [pc, #424]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022dc:	f043 0308 	orr.w	r3, r3, #8
 80022e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e2:	4b68      	ldr	r3, [pc, #416]	@ (8002484 <MX_GPIO_Init+0x254>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2108      	movs	r1, #8
 80022f2:	4865      	ldr	r0, [pc, #404]	@ (8002488 <MX_GPIO_Init+0x258>)
 80022f4:	f001 f8ba 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2101      	movs	r1, #1
 80022fc:	4863      	ldr	r0, [pc, #396]	@ (800248c <MX_GPIO_Init+0x25c>)
 80022fe:	f001 f8b5 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002308:	4861      	ldr	r0, [pc, #388]	@ (8002490 <MX_GPIO_Init+0x260>)
 800230a:	f001 f8af 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800230e:	2200      	movs	r2, #0
 8002310:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002314:	485f      	ldr	r0, [pc, #380]	@ (8002494 <MX_GPIO_Init+0x264>)
 8002316:	f001 f8a9 	bl	800346c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002320:	485a      	ldr	r0, [pc, #360]	@ (800248c <MX_GPIO_Init+0x25c>)
 8002322:	f001 f8a3 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800232c:	485a      	ldr	r0, [pc, #360]	@ (8002498 <MX_GPIO_Init+0x268>)
 800232e:	f001 f89d 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002332:	2308      	movs	r3, #8
 8002334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	484f      	ldr	r0, [pc, #316]	@ (8002488 <MX_GPIO_Init+0x258>)
 800234a:	f000 fedb 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 800234e:	f240 1301 	movw	r3, #257	@ 0x101
 8002352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4849      	ldr	r0, [pc, #292]	@ (800248c <MX_GPIO_Init+0x25c>)
 8002368:	f000 fecc 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800236c:	2308      	movs	r3, #8
 800236e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800237c:	2305      	movs	r3, #5
 800237e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	4841      	ldr	r0, [pc, #260]	@ (800248c <MX_GPIO_Init+0x25c>)
 8002388:	f000 febc 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 800238c:	2301      	movs	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002390:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	483b      	ldr	r0, [pc, #236]	@ (8002490 <MX_GPIO_Init+0x260>)
 80023a2:	f000 feaf 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 80023a6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	4834      	ldr	r0, [pc, #208]	@ (8002490 <MX_GPIO_Init+0x260>)
 80023c0:	f000 fea0 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80023c4:	2304      	movs	r3, #4
 80023c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	482e      	ldr	r0, [pc, #184]	@ (8002490 <MX_GPIO_Init+0x260>)
 80023d8:	f000 fe94 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80023dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ee:	2305      	movs	r3, #5
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	4825      	ldr	r0, [pc, #148]	@ (8002490 <MX_GPIO_Init+0x260>)
 80023fa:	f000 fe83 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023fe:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002402:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2301      	movs	r3, #1
 8002406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002410:	f107 031c 	add.w	r3, r7, #28
 8002414:	4619      	mov	r1, r3
 8002416:	481f      	ldr	r0, [pc, #124]	@ (8002494 <MX_GPIO_Init+0x264>)
 8002418:	f000 fe74 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 800241c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4818      	ldr	r0, [pc, #96]	@ (8002498 <MX_GPIO_Init+0x268>)
 8002436:	f000 fe65 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800243a:	2320      	movs	r3, #32
 800243c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	4811      	ldr	r0, [pc, #68]	@ (8002494 <MX_GPIO_Init+0x264>)
 800244e:	f000 fe59 	bl	8003104 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002452:	2302      	movs	r3, #2
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002456:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800245a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4808      	ldr	r0, [pc, #32]	@ (8002488 <MX_GPIO_Init+0x258>)
 8002468:	f000 fe4c 	bl	8003104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2105      	movs	r1, #5
 8002470:	2006      	movs	r0, #6
 8002472:	f000 fd8b 	bl	8002f8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002476:	2006      	movs	r0, #6
 8002478:	f000 fda4 	bl	8002fc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800247c:	bf00      	nop
 800247e:	3730      	adds	r7, #48	@ 0x30
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	40021000 	.word	0x40021000
 800248c:	40020800 	.word	0x40020800
 8002490:	40020400 	.word	0x40020400
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40020000 	.word	0x40020000

0800249c <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a23      	ldr	r2, [pc, #140]	@ (800253c <HAL_UART_RxCpltCallback+0xa0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11d      	bne.n	80024ee <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 80024b2:	f107 030e 	add.w	r3, r7, #14
 80024b6:	2201      	movs	r2, #1
 80024b8:	4619      	mov	r1, r3
 80024ba:	4821      	ldr	r0, [pc, #132]	@ (8002540 <HAL_UART_RxCpltCallback+0xa4>)
 80024bc:	f005 f951 	bl	8007762 <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 80024c0:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_UART_RxCpltCallback+0xa8>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	f107 0208 	add.w	r2, r7, #8
 80024c8:	f107 010e 	add.w	r1, r7, #14
 80024cc:	2300      	movs	r3, #0
 80024ce:	f00a fc11 	bl	800ccf4 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00a      	beq.n	80024ee <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_UART_RxCpltCallback+0x52>
 80024de:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <HAL_UART_RxCpltCallback+0xac>)
 80024e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a16      	ldr	r2, [pc, #88]	@ (800254c <HAL_UART_RxCpltCallback+0xb0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d11d      	bne.n	8002534 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 80024f8:	f107 030f 	add.w	r3, r7, #15
 80024fc:	2201      	movs	r2, #1
 80024fe:	4619      	mov	r1, r3
 8002500:	4813      	ldr	r0, [pc, #76]	@ (8002550 <HAL_UART_RxCpltCallback+0xb4>)
 8002502:	f005 f92e 	bl	8007762 <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_UART_RxCpltCallback+0xb8>)
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	f107 0208 	add.w	r2, r7, #8
 800250e:	f107 010f 	add.w	r1, r7, #15
 8002512:	2300      	movs	r3, #0
 8002514:	f00a fbee 	bl	800ccf4 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_UART_RxCpltCallback+0x98>
 8002524:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <HAL_UART_RxCpltCallback+0xac>)
 8002526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	f3bf 8f6f 	isb	sy
	}

}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40004400 	.word	0x40004400
 8002540:	200004a0 	.word	0x200004a0
 8002544:	20000308 	.word	0x20000308
 8002548:	e000ed04 	.word	0xe000ed04
 800254c:	40004c00 	.word	0x40004c00
 8002550:	20000458 	.word	0x20000458
 8002554:	2000030c 	.word	0x2000030c

08002558 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002560:	f00d fef2 	bl	8010348 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8002564:	f7fe fba0 	bl	8000ca8 <CreateHandles>
  CreateTasks();
 8002568:	f7fe fc2e 	bl	8000dc8 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 800256c:	f107 030e 	add.w	r3, r7, #14
 8002570:	2201      	movs	r2, #1
 8002572:	4619      	mov	r1, r3
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <StartDefaultTask+0x54>)
 8002576:	f005 f8f4 	bl	8007762 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 800257a:	f107 030f 	add.w	r3, r7, #15
 800257e:	2201      	movs	r2, #1
 8002580:	4619      	mov	r1, r3
 8002582:	480b      	ldr	r0, [pc, #44]	@ (80025b0 <StartDefaultTask+0x58>)
 8002584:	f005 f8ed 	bl	8007762 <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fc6c 	bl	8001e68 <UART_putint>
 8002590:	4808      	ldr	r0, [pc, #32]	@ (80025b4 <StartDefaultTask+0x5c>)
 8002592:	f7ff fc4d 	bl	8001e30 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002596:	2001      	movs	r0, #1
 8002598:	f009 fd0c 	bl	800bfb4 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <StartDefaultTask+0x60>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f00b fa21 	bl	800d9e8 <vTaskDelete>
    osDelay(1);
 80025a6:	bf00      	nop
 80025a8:	e7f5      	b.n	8002596 <StartDefaultTask+0x3e>
 80025aa:	bf00      	nop
 80025ac:	200004a0 	.word	0x200004a0
 80025b0:	20000458 	.word	0x20000458
 80025b4:	080128ac 	.word	0x080128ac
 80025b8:	200004e8 	.word	0x200004e8

080025bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80025ce:	f000 fbe1 	bl	8002d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40010000 	.word	0x40010000

080025e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <Error_Handler+0x8>

080025ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <HAL_MspInit+0x54>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	4a11      	ldr	r2, [pc, #68]	@ (8002640 <HAL_MspInit+0x54>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002600:	6453      	str	r3, [r2, #68]	@ 0x44
 8002602:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <HAL_MspInit+0x54>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_MspInit+0x54>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <HAL_MspInit+0x54>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	@ 0x40
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_MspInit+0x54>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	210f      	movs	r1, #15
 800262e:	f06f 0001 	mvn.w	r0, #1
 8002632:	f000 fcab 	bl	8002f8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	@ 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <HAL_I2C_MspInit+0x84>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12c      	bne.n	80026c0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002682:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002688:	2312      	movs	r3, #18
 800268a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800268c:	2301      	movs	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002694:	2304      	movs	r3, #4
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4619      	mov	r1, r3
 800269e:	480c      	ldr	r0, [pc, #48]	@ (80026d0 <HAL_I2C_MspInit+0x8c>)
 80026a0:	f000 fd30 	bl	8003104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	4a07      	ldr	r2, [pc, #28]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 80026ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b4:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026c0:	bf00      	nop
 80026c2:	3728      	adds	r7, #40	@ 0x28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40005400 	.word	0x40005400
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020400 	.word	0x40020400

080026d4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08e      	sub	sp, #56	@ 0x38
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a31      	ldr	r2, [pc, #196]	@ (80027c4 <HAL_I2S_MspInit+0xf0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d15a      	bne.n	80027ba <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002704:	2301      	movs	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002708:	23c0      	movs	r3, #192	@ 0xc0
 800270a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800270c:	2302      	movs	r3, #2
 800270e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fae3 	bl	8006ce0 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002720:	f7ff ff5e 	bl	80025e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	4b27      	ldr	r3, [pc, #156]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272c:	4a26      	ldr	r2, [pc, #152]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 800272e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002732:	6413      	str	r3, [r2, #64]	@ 0x40
 8002734:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002748:	4a1f      	ldr	r2, [pc, #124]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	4a18      	ldr	r2, [pc, #96]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6313      	str	r3, [r2, #48]	@ 0x30
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <HAL_I2S_MspInit+0xf4>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002778:	2310      	movs	r3, #16
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002788:	2306      	movs	r3, #6
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800278c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002790:	4619      	mov	r1, r3
 8002792:	480e      	ldr	r0, [pc, #56]	@ (80027cc <HAL_I2S_MspInit+0xf8>)
 8002794:	f000 fcb6 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002798:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027aa:	2306      	movs	r3, #6
 80027ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b2:	4619      	mov	r1, r3
 80027b4:	4806      	ldr	r0, [pc, #24]	@ (80027d0 <HAL_I2S_MspInit+0xfc>)
 80027b6:	f000 fca5 	bl	8003104 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80027ba:	bf00      	nop
 80027bc:	3738      	adds	r7, #56	@ 0x38
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40003c00 	.word	0x40003c00
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020800 	.word	0x40020800

080027d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	@ 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <HAL_SPI_MspInit+0x84>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d12b      	bne.n	800284e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_SPI_MspInit+0x88>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	4a17      	ldr	r2, [pc, #92]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002800:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002804:	6453      	str	r3, [r2, #68]	@ 0x44
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <HAL_SPI_MspInit+0x88>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <HAL_SPI_MspInit+0x88>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800282e:	23e0      	movs	r3, #224	@ 0xe0
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800283e:	2305      	movs	r3, #5
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	4805      	ldr	r0, [pc, #20]	@ (8002860 <HAL_SPI_MspInit+0x8c>)
 800284a:	f000 fc5b 	bl	8003104 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800284e:	bf00      	nop
 8002850:	3728      	adds	r7, #40	@ 0x28
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40013000 	.word	0x40013000
 800285c:	40023800 	.word	0x40023800
 8002860:	40020000 	.word	0x40020000

08002864 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800286c:	f107 031c 	add.w	r3, r7, #28
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a3a      	ldr	r2, [pc, #232]	@ (800296c <HAL_UART_MspInit+0x108>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d134      	bne.n	80028f0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	4b39      	ldr	r3, [pc, #228]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	4a38      	ldr	r2, [pc, #224]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 8002890:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002894:	6413      	str	r3, [r2, #64]	@ 0x40
 8002896:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	4a31      	ldr	r2, [pc, #196]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028be:	2303      	movs	r3, #3
 80028c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028ce:	2308      	movs	r3, #8
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	4826      	ldr	r0, [pc, #152]	@ (8002974 <HAL_UART_MspInit+0x110>)
 80028da:	f000 fc13 	bl	8003104 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2105      	movs	r1, #5
 80028e2:	2034      	movs	r0, #52	@ 0x34
 80028e4:	f000 fb52 	bl	8002f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028e8:	2034      	movs	r0, #52	@ 0x34
 80028ea:	f000 fb6b 	bl	8002fc4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ee:	e038      	b.n	8002962 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a20      	ldr	r2, [pc, #128]	@ (8002978 <HAL_UART_MspInit+0x114>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d133      	bne.n	8002962 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 8002904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b19      	ldr	r3, [pc, #100]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	@ 0x30
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_UART_MspInit+0x10c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002932:	230c      	movs	r3, #12
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002942:	2307      	movs	r3, #7
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	f107 031c 	add.w	r3, r7, #28
 800294a:	4619      	mov	r1, r3
 800294c:	4809      	ldr	r0, [pc, #36]	@ (8002974 <HAL_UART_MspInit+0x110>)
 800294e:	f000 fbd9 	bl	8003104 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	2026      	movs	r0, #38	@ 0x26
 8002958:	f000 fb18 	bl	8002f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800295c:	2026      	movs	r0, #38	@ 0x26
 800295e:	f000 fb31 	bl	8002fc4 <HAL_NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3730      	adds	r7, #48	@ 0x30
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40004c00 	.word	0x40004c00
 8002970:	40023800 	.word	0x40023800
 8002974:	40020000 	.word	0x40020000
 8002978:	40004400 	.word	0x40004400

0800297c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	@ 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <HAL_InitTick+0xd4>)
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	4a2e      	ldr	r2, [pc, #184]	@ (8002a50 <HAL_InitTick+0xd4>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6453      	str	r3, [r2, #68]	@ 0x44
 800299c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a50 <HAL_InitTick+0xd4>)
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a8:	f107 020c 	add.w	r2, r7, #12
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 f962 	bl	8006c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80029b8:	f004 f94c 	bl	8006c54 <HAL_RCC_GetPCLK2Freq>
 80029bc:	4603      	mov	r3, r0
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	4a23      	ldr	r2, [pc, #140]	@ (8002a54 <HAL_InitTick+0xd8>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9b      	lsrs	r3, r3, #18
 80029cc:	3b01      	subs	r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029d0:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029d2:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <HAL_InitTick+0xe0>)
 80029d4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029de:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f0:	4b19      	ldr	r3, [pc, #100]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80029f6:	4818      	ldr	r0, [pc, #96]	@ (8002a58 <HAL_InitTick+0xdc>)
 80029f8:	f004 fb3d 	bl	8007076 <HAL_TIM_Base_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002a02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11b      	bne.n	8002a42 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002a0a:	4813      	ldr	r0, [pc, #76]	@ (8002a58 <HAL_InitTick+0xdc>)
 8002a0c:	f004 fb8c 	bl	8007128 <HAL_TIM_Base_Start_IT>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002a16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d111      	bne.n	8002a42 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a1e:	2019      	movs	r0, #25
 8002a20:	f000 fad0 	bl	8002fc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b0f      	cmp	r3, #15
 8002a28:	d808      	bhi.n	8002a3c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	2019      	movs	r0, #25
 8002a30:	f000 faac 	bl	8002f8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <HAL_InitTick+0xe4>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e002      	b.n	8002a42 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3730      	adds	r7, #48	@ 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	431bde83 	.word	0x431bde83
 8002a58:	200004ec 	.word	0x200004ec
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	20000260 	.word	0x20000260

08002a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <NMI_Handler+0x4>

08002a6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <HardFault_Handler+0x4>

08002a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <MemManage_Handler+0x4>

08002a7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a80:	bf00      	nop
 8002a82:	e7fd      	b.n	8002a80 <BusFault_Handler+0x4>

08002a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <UsageFault_Handler+0x4>

08002a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 fd14 	bl	80034d4 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8002aac:	f7fe ff2e 	bl	800190c <KEYS_read>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <EXTI0_IRQHandler+0x58>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	463a      	mov	r2, r7
 8002abc:	4618      	mov	r0, r3
 8002abe:	f009 fdd7 	bl	800c670 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f7fe fefa 	bl	80018bc <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <EXTI0_IRQHandler+0x48>
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <EXTI0_IRQHandler+0x5c>)
 8002ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f000 fcf5 	bl	80034d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000314 	.word	0x20000314
 8002af8:	e000ed04 	.word	0xe000ed04

08002afc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b02:	f004 fb81 	bl	8007208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	200004ec 	.word	0x200004ec

08002b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <USART2_IRQHandler+0x10>)
 8002b16:	f004 fe49 	bl	80077ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200004a0 	.word	0x200004a0

08002b24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002b28:	4802      	ldr	r0, [pc, #8]	@ (8002b34 <UART4_IRQHandler+0x10>)
 8002b2a:	f004 fe3f 	bl	80077ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000458 	.word	0x20000458

08002b38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <OTG_FS_IRQHandler+0x10>)
 8002b3e:	f000 ffcd 	bl	8003adc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20011130 	.word	0x20011130

08002b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	return 1;
 8002b50:	2301      	movs	r3, #1
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_kill>:

int _kill(int pid, int sig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b66:	f00e fa97 	bl	8011098 <__errno>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2216      	movs	r2, #22
 8002b6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_exit>:

void _exit (int status)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ffe7 	bl	8002b5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b8e:	bf00      	nop
 8002b90:	e7fd      	b.n	8002b8e <_exit+0x12>

08002b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e00a      	b.n	8002bba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	4601      	mov	r1, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	b2ca      	uxtb	r2, r1
 8002bb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	dbf0      	blt.n	8002ba4 <_read+0x12>
	}

return len;
 8002bc2:	687b      	ldr	r3, [r7, #4]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e009      	b.n	8002bf2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	60ba      	str	r2, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dbf1      	blt.n	8002bde <_write+0x12>
	}
	return len;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_close>:

int _close(int file)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c2c:	605a      	str	r2, [r3, #4]
	return 0;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_isatty>:

int _isatty(int file)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	return 1;
 8002c44:	2301      	movs	r3, #1
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
	return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c74:	4a14      	ldr	r2, [pc, #80]	@ (8002cc8 <_sbrk+0x5c>)
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <_sbrk+0x60>)
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <_sbrk+0x64>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c88:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <_sbrk+0x64>)
 8002c8a:	4a12      	ldr	r2, [pc, #72]	@ (8002cd4 <_sbrk+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8e:	4b10      	ldr	r3, [pc, #64]	@ (8002cd0 <_sbrk+0x64>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c9c:	f00e f9fc 	bl	8011098 <__errno>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	e009      	b.n	8002cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <_sbrk+0x64>)
 8002cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20020000 	.word	0x20020000
 8002ccc:	00000400 	.word	0x00000400
 8002cd0:	20000534 	.word	0x20000534
 8002cd4:	20011660 	.word	0x20011660

08002cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <SystemInit+0x20>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce2:	4a05      	ldr	r2, [pc, #20]	@ (8002cf8 <SystemInit+0x20>)
 8002ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d00:	480d      	ldr	r0, [pc, #52]	@ (8002d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d02:	490e      	ldr	r1, [pc, #56]	@ (8002d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d04:	4a0e      	ldr	r2, [pc, #56]	@ (8002d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d08:	e002      	b.n	8002d10 <LoopCopyDataInit>

08002d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0e:	3304      	adds	r3, #4

08002d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d14:	d3f9      	bcc.n	8002d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d16:	4a0b      	ldr	r2, [pc, #44]	@ (8002d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d18:	4c0b      	ldr	r4, [pc, #44]	@ (8002d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d1c:	e001      	b.n	8002d22 <LoopFillZerobss>

08002d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d20:	3204      	adds	r2, #4

08002d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d24:	d3fb      	bcc.n	8002d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d26:	f7ff ffd7 	bl	8002cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2a:	f00e f9bb 	bl	80110a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2e:	f7ff f8f7 	bl	8001f20 <main>
  bx  lr    
 8002d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	200002e8 	.word	0x200002e8
  ldr r2, =_sidata
 8002d40:	08012ba0 	.word	0x08012ba0
  ldr r2, =_sbss
 8002d44:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 8002d48:	2001165c 	.word	0x2001165c

08002d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d54:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0d      	ldr	r2, [pc, #52]	@ (8002d90 <HAL_Init+0x40>)
 8002d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <HAL_Init+0x40>)
 8002d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d6c:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <HAL_Init+0x40>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 f8fc 	bl	8002f76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f7ff fdfc 	bl	800297c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d84:	f7ff fc32 	bl	80025ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00

08002d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_IncTick+0x20>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_IncTick+0x24>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	4a04      	ldr	r2, [pc, #16]	@ (8002db8 <HAL_IncTick+0x24>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000264 	.word	0x20000264
 8002db8:	20000538 	.word	0x20000538

08002dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc0:	4b03      	ldr	r3, [pc, #12]	@ (8002dd0 <HAL_GetTick+0x14>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000538 	.word	0x20000538

08002dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7ff ffee 	bl	8002dbc <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d005      	beq.n	8002dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dee:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <HAL_Delay+0x44>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4413      	add	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dfa:	bf00      	nop
 8002dfc:	f7ff ffde 	bl	8002dbc <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d8f7      	bhi.n	8002dfc <HAL_Delay+0x28>
  {
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000264 	.word	0x20000264

08002e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <__NVIC_SetPriorityGrouping+0x44>)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	60d3      	str	r3, [r2, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e68:	4b04      	ldr	r3, [pc, #16]	@ (8002e7c <__NVIC_GetPriorityGrouping+0x18>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	f003 0307 	and.w	r3, r3, #7
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db0b      	blt.n	8002eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4907      	ldr	r1, [pc, #28]	@ (8002eb8 <__NVIC_EnableIRQ+0x38>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100

08002ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	6039      	str	r1, [r7, #0]
 8002ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	db0a      	blt.n	8002ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	490c      	ldr	r1, [pc, #48]	@ (8002f08 <__NVIC_SetPriority+0x4c>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	0112      	lsls	r2, r2, #4
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ee4:	e00a      	b.n	8002efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4908      	ldr	r1, [pc, #32]	@ (8002f0c <__NVIC_SetPriority+0x50>)
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	3b04      	subs	r3, #4
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	440b      	add	r3, r1
 8002efa:	761a      	strb	r2, [r3, #24]
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000e100 	.word	0xe000e100
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	@ 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f1c3 0307 	rsb	r3, r3, #7
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	bf28      	it	cs
 8002f2e:	2304      	movcs	r3, #4
 8002f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3304      	adds	r3, #4
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <NVIC_EncodePriority+0x30>
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3b03      	subs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <NVIC_EncodePriority+0x32>
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	401a      	ands	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f58:	f04f 31ff 	mov.w	r1, #4294967295
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	43d9      	mvns	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	4313      	orrs	r3, r2
         );
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	@ 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff ff4c 	bl	8002e1c <__NVIC_SetPriorityGrouping>
}
 8002f84:	bf00      	nop
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f9e:	f7ff ff61 	bl	8002e64 <__NVIC_GetPriorityGrouping>
 8002fa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	6978      	ldr	r0, [r7, #20]
 8002faa:	f7ff ffb1 	bl	8002f10 <NVIC_EncodePriority>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff ff80 	bl	8002ebc <__NVIC_SetPriority>
}
 8002fbc:	bf00      	nop
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff54 	bl	8002e80 <__NVIC_EnableIRQ>
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fee:	f7ff fee5 	bl	8002dbc <HAL_GetTick>
 8002ff2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d008      	beq.n	8003012 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2280      	movs	r2, #128	@ 0x80
 8003004:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e052      	b.n	80030b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0216 	bic.w	r2, r2, #22
 8003020:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003030:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_DMA_Abort+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0208 	bic.w	r2, r2, #8
 8003050:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	e013      	b.n	800308c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003064:	f7ff feaa 	bl	8002dbc <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b05      	cmp	r3, #5
 8003070:	d90c      	bls.n	800308c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2203      	movs	r2, #3
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e015      	b.n	80030b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e4      	bne.n	8003064 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	223f      	movs	r2, #63	@ 0x3f
 80030a0:	409a      	lsls	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d004      	beq.n	80030de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2280      	movs	r2, #128	@ 0x80
 80030d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00c      	b.n	80030f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2205      	movs	r2, #5
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	e16b      	b.n	80033f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003120:	2201      	movs	r2, #1
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	429a      	cmp	r2, r3
 800313a:	f040 815a 	bne.w	80033f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b01      	cmp	r3, #1
 8003148:	d005      	beq.n	8003156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003152:	2b02      	cmp	r3, #2
 8003154:	d130      	bne.n	80031b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800318c:	2201      	movs	r2, #1
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 0201 	and.w	r2, r3, #1
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d017      	beq.n	80031f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	2203      	movs	r2, #3
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d123      	bne.n	8003248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	08da      	lsrs	r2, r3, #3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3208      	adds	r2, #8
 8003208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800320c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	69b9      	ldr	r1, [r7, #24]
 8003244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0203 	and.w	r2, r3, #3
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80b4 	beq.w	80033f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	4b60      	ldr	r3, [pc, #384]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	4a5f      	ldr	r2, [pc, #380]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 8003294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003298:	6453      	str	r3, [r2, #68]	@ 0x44
 800329a:	4b5d      	ldr	r3, [pc, #372]	@ (8003410 <HAL_GPIO_Init+0x30c>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003414 <HAL_GPIO_Init+0x310>)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a52      	ldr	r2, [pc, #328]	@ (8003418 <HAL_GPIO_Init+0x314>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d02b      	beq.n	800332a <HAL_GPIO_Init+0x226>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a51      	ldr	r2, [pc, #324]	@ (800341c <HAL_GPIO_Init+0x318>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d025      	beq.n	8003326 <HAL_GPIO_Init+0x222>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a50      	ldr	r2, [pc, #320]	@ (8003420 <HAL_GPIO_Init+0x31c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01f      	beq.n	8003322 <HAL_GPIO_Init+0x21e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003424 <HAL_GPIO_Init+0x320>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d019      	beq.n	800331e <HAL_GPIO_Init+0x21a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003428 <HAL_GPIO_Init+0x324>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <HAL_GPIO_Init+0x216>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4d      	ldr	r2, [pc, #308]	@ (800342c <HAL_GPIO_Init+0x328>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00d      	beq.n	8003316 <HAL_GPIO_Init+0x212>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003430 <HAL_GPIO_Init+0x32c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <HAL_GPIO_Init+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4b      	ldr	r2, [pc, #300]	@ (8003434 <HAL_GPIO_Init+0x330>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_GPIO_Init+0x20a>
 800330a:	2307      	movs	r3, #7
 800330c:	e00e      	b.n	800332c <HAL_GPIO_Init+0x228>
 800330e:	2308      	movs	r3, #8
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003312:	2306      	movs	r3, #6
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x228>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x228>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x228>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x228>
 800332a:	2300      	movs	r3, #0
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	@ (8003414 <HAL_GPIO_Init+0x310>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_GPIO_Init+0x334>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336e:	4a32      	ldr	r2, [pc, #200]	@ (8003438 <HAL_GPIO_Init+0x334>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003374:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_GPIO_Init+0x334>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003398:	4a27      	ldr	r2, [pc, #156]	@ (8003438 <HAL_GPIO_Init+0x334>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339e:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_GPIO_Init+0x334>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f ae90 	bls.w	8003120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	@ 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40013c00 	.word	0x40013c00

0800343c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
 8003458:	e001      	b.n	800345e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800345a:	2300      	movs	r3, #0
 800345c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800345e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003488:	e003      	b.n	8003492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800348a:	887b      	ldrh	r3, [r7, #2]
 800348c:	041a      	lsls	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800349e:	b480      	push	{r7}
 80034a0:	b085      	sub	sp, #20
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034b0:	887a      	ldrh	r2, [r7, #2]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4013      	ands	r3, r2
 80034b6:	041a      	lsls	r2, r3, #16
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	400b      	ands	r3, r1
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	619a      	str	r2, [r3, #24]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034de:	4b08      	ldr	r3, [pc, #32]	@ (8003500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	4013      	ands	r3, r2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ea:	4a05      	ldr	r2, [pc, #20]	@ (8003500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034f0:	88fb      	ldrh	r3, [r7, #6]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f806 	bl	8003504 <HAL_GPIO_EXTI_Callback>
  }
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af02      	add	r7, sp, #8
 8003520:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e059      	b.n	80035e0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f00c ff52 	bl	80103f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2203      	movs	r2, #3
 8003550:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355a:	d102      	bne.n	8003562 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f005 f901 	bl	800876e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7c1a      	ldrb	r2, [r3, #16]
 8003574:	f88d 2000 	strb.w	r2, [sp]
 8003578:	3304      	adds	r3, #4
 800357a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800357c:	f005 f882 	bl	8008684 <USB_CoreInit>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e026      	b.n	80035e0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f005 f8f9 	bl	8008790 <USB_SetCurrentMode>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e017      	b.n	80035e0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7c1a      	ldrb	r2, [r3, #16]
 80035b8:	f88d 2000 	strb.w	r2, [sp]
 80035bc:	3304      	adds	r3, #4
 80035be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035c0:	f005 faa2 	bl	8008b08 <USB_HostInit>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e004      	b.n	80035e0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b08b      	sub	sp, #44	@ 0x2c
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	70fb      	strb	r3, [r7, #3]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70bb      	strb	r3, [r7, #2]
 80035fe:	4613      	mov	r3, r2
 8003600:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003602:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003604:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_HCD_HC_Init+0x2c>
 8003610:	2302      	movs	r3, #2
 8003612:	e09d      	b.n	8003750 <HAL_HCD_HC_Init+0x168>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3319      	adds	r3, #25
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	3314      	adds	r3, #20
 8003640:	787a      	ldrb	r2, [r7, #1]
 8003642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	3315      	adds	r3, #21
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3326      	adds	r3, #38	@ 0x26
 8003668:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800366c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	78bb      	ldrb	r3, [r7, #2]
 8003672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003676:	b2d8      	uxtb	r0, r3
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	3316      	adds	r3, #22
 8003686:	4602      	mov	r2, r0
 8003688:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	4619      	mov	r1, r3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fbc8 	bl	8003e24 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003694:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da0a      	bge.n	80036b2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3317      	adds	r3, #23
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e009      	b.n	80036c6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3317      	adds	r3, #23
 80036c2:	2200      	movs	r2, #0
 80036c4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 fb80 	bl	8008dd0 <USB_GetHostSpeed>
 80036d0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80036d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d10b      	bne.n	80036f2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80036da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d107      	bne.n	80036f2 <HAL_HCD_HC_Init+0x10a>
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2bbc      	cmp	r3, #188	@ 0xbc
 80036ec:	d901      	bls.n	80036f2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80036ee:	23bc      	movs	r3, #188	@ 0xbc
 80036f0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3318      	adds	r3, #24
 8003702:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	b298      	uxth	r0, r3
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	3328      	adds	r3, #40	@ 0x28
 800371c:	4602      	mov	r2, r0
 800371e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	b29b      	uxth	r3, r3
 8003728:	787c      	ldrb	r4, [r7, #1]
 800372a:	78ba      	ldrb	r2, [r7, #2]
 800372c:	78f9      	ldrb	r1, [r7, #3]
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4623      	mov	r3, r4
 800373e:	f005 fb6f 	bl	8008e20 <USB_HC_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	371c      	adds	r7, #28
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}

08003758 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_HCD_HC_Halt+0x1e>
 8003772:	2302      	movs	r3, #2
 8003774:	e00f      	b.n	8003796 <HAL_HCD_HC_Halt+0x3e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f005 ff01 	bl	800958e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	70fb      	strb	r3, [r7, #3]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70bb      	strb	r3, [r7, #2]
 80037b6:	4613      	mov	r3, r2
 80037b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3317      	adds	r3, #23
 80037ca:	78ba      	ldrb	r2, [r7, #2]
 80037cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	3326      	adds	r3, #38	@ 0x26
 80037de:	787a      	ldrb	r2, [r7, #1]
 80037e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037e2:	7c3b      	ldrb	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d114      	bne.n	8003812 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	332a      	adds	r3, #42	@ 0x2a
 80037f8:	2203      	movs	r2, #3
 80037fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	3319      	adds	r3, #25
 800380c:	7f3a      	ldrb	r2, [r7, #28]
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e009      	b.n	8003826 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	332a      	adds	r3, #42	@ 0x2a
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003826:	787b      	ldrb	r3, [r7, #1]
 8003828:	2b03      	cmp	r3, #3
 800382a:	f200 8102 	bhi.w	8003a32 <HAL_HCD_HC_SubmitRequest+0x292>
 800382e:	a201      	add	r2, pc, #4	@ (adr r2, 8003834 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003834:	08003845 	.word	0x08003845
 8003838:	08003a1d 	.word	0x08003a1d
 800383c:	08003909 	.word	0x08003909
 8003840:	08003993 	.word	0x08003993
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003844:	7c3b      	ldrb	r3, [r7, #16]
 8003846:	2b01      	cmp	r3, #1
 8003848:	f040 80f5 	bne.w	8003a36 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800384c:	78bb      	ldrb	r3, [r7, #2]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d12d      	bne.n	80038ae <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003852:	8b3b      	ldrh	r3, [r7, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	333d      	adds	r3, #61	@ 0x3d
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	333d      	adds	r3, #61	@ 0x3d
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	332a      	adds	r3, #42	@ 0x2a
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003896:	e0ce      	b.n	8003a36 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	332a      	adds	r3, #42	@ 0x2a
 80038a8:	2202      	movs	r2, #2
 80038aa:	701a      	strb	r2, [r3, #0]
      break;
 80038ac:	e0c3      	b.n	8003a36 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	331a      	adds	r3, #26
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	f040 80b8 	bne.w	8003a36 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	333c      	adds	r3, #60	@ 0x3c
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10a      	bne.n	80038f2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	332a      	adds	r3, #42	@ 0x2a
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
      break;
 80038f0:	e0a1      	b.n	8003a36 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	332a      	adds	r3, #42	@ 0x2a
 8003902:	2202      	movs	r2, #2
 8003904:	701a      	strb	r2, [r3, #0]
      break;
 8003906:	e096      	b.n	8003a36 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003908:	78bb      	ldrb	r3, [r7, #2]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d120      	bne.n	8003950 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	333d      	adds	r3, #61	@ 0x3d
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	332a      	adds	r3, #42	@ 0x2a
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003938:	e07e      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	332a      	adds	r3, #42	@ 0x2a
 800394a:	2202      	movs	r2, #2
 800394c:	701a      	strb	r2, [r3, #0]
      break;
 800394e:	e073      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	333c      	adds	r3, #60	@ 0x3c
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	332a      	adds	r3, #42	@ 0x2a
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
      break;
 800397a:	e05d      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	332a      	adds	r3, #42	@ 0x2a
 800398c:	2202      	movs	r2, #2
 800398e:	701a      	strb	r2, [r3, #0]
      break;
 8003990:	e052      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003992:	78bb      	ldrb	r3, [r7, #2]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d120      	bne.n	80039da <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	333d      	adds	r3, #61	@ 0x3d
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	332a      	adds	r3, #42	@ 0x2a
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039c2:	e039      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	332a      	adds	r3, #42	@ 0x2a
 80039d4:	2202      	movs	r2, #2
 80039d6:	701a      	strb	r2, [r3, #0]
      break;
 80039d8:	e02e      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	333c      	adds	r3, #60	@ 0x3c
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	332a      	adds	r3, #42	@ 0x2a
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
      break;
 8003a04:	e018      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	332a      	adds	r3, #42	@ 0x2a
 8003a16:	2202      	movs	r2, #2
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e00d      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	332a      	adds	r3, #42	@ 0x2a
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
      break;
 8003a30:	e002      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003a36:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	332c      	adds	r3, #44	@ 0x2c
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	8b39      	ldrh	r1, [r7, #24]
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4403      	add	r3, r0
 8003a5c:	3334      	adds	r3, #52	@ 0x34
 8003a5e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334c      	adds	r3, #76	@ 0x4c
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3338      	adds	r3, #56	@ 0x38
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	3315      	adds	r3, #21
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	334d      	adds	r3, #77	@ 0x4d
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	3310      	adds	r3, #16
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	1d19      	adds	r1, r3, #4
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	799b      	ldrb	r3, [r3, #6]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f005 fad4 	bl	8009078 <USB_HC_StartXfer>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop

08003adc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 ffc2 	bl	8008a7c <USB_GetMode>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	f040 80fb 	bne.w	8003cf6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 ff85 	bl	8008a14 <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80f1 	beq.w	8003cf4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 ff7c 	bl	8008a14 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b26:	d104      	bne.n	8003b32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 ff6c 	bl	8008a14 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b46:	d104      	bne.n	8003b52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 ff5c 	bl	8008a14 <USB_ReadInterrupts>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b66:	d104      	bne.n	8003b72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 ff4c 	bl	8008a14 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d103      	bne.n	8003b8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 ff3e 	bl	8008a14 <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ba2:	d120      	bne.n	8003be6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003bac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d113      	bne.n	8003be6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003bbe:	2110      	movs	r1, #16
 8003bc0:	6938      	ldr	r0, [r7, #16]
 8003bc2:	f004 fe31 	bl	8008828 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003bc6:	6938      	ldr	r0, [r7, #16]
 8003bc8:	f004 fe60 	bl	800888c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7a5b      	ldrb	r3, [r3, #9]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d105      	bne.n	8003be0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 f858 	bl	8008c90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f00c fc83 	bl	80104ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 ff12 	bl	8008a14 <USB_ReadInterrupts>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bfa:	d102      	bne.n	8003c02 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f001 fd4d 	bl	800569c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f004 ff04 	bl	8008a14 <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d106      	bne.n	8003c24 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f00c fc4c 	bl	80104b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f004 fef3 	bl	8008a14 <USB_ReadInterrupts>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c38:	d139      	bne.n	8003cae <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f005 fc94 	bl	800956c <USB_HC_ReadInterrupt>
 8003c44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e025      	b.n	8003c98 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d018      	beq.n	8003c92 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c76:	d106      	bne.n	8003c86 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f905 	bl	8003e8e <HCD_HC_IN_IRQHandler>
 8003c84:	e005      	b.n	8003c92 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 ff67 	bl	8004b60 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3301      	adds	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	795b      	ldrb	r3, [r3, #5]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d3d3      	bcc.n	8003c4c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f004 feae 	bl	8008a14 <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d101      	bne.n	8003cc6 <HAL_HCD_IRQHandler+0x1ea>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_HCD_IRQHandler+0x1ec>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d014      	beq.n	8003cf6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0210 	bic.w	r2, r2, #16
 8003cda:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f001 fbfe 	bl	80054de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699a      	ldr	r2, [r3, #24]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0210 	orr.w	r2, r2, #16
 8003cf0:	619a      	str	r2, [r3, #24]
 8003cf2:	e000      	b.n	8003cf6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003cf4:	bf00      	nop
    }
  }
}
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_HCD_Start+0x16>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e013      	b.n	8003d3a <HAL_HCD_Start+0x3e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 f81c 	bl	8008d5e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f004 fd0e 	bl	800874c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_HCD_Stop+0x16>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e00d      	b.n	8003d74 <HAL_HCD_Stop+0x32>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f005 fd6f 	bl	8009848 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 ffbe 	bl	8008d0a <USB_ResetPort>
 8003d8e:	4603      	mov	r3, r0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	334c      	adds	r3, #76	@ 0x4c
 8003db4:	781b      	ldrb	r3, [r3, #0]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	3338      	adds	r3, #56	@ 0x38
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f005 f800 	bl	8008dfe <USB_GetCurrentFrame>
 8003dfe:	4603      	mov	r3, r0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f004 ffdb 	bl	8008dd0 <USB_GetHostSpeed>
 8003e1a:	4603      	mov	r3, r0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	331a      	adds	r3, #26
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	331b      	adds	r3, #27
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3325      	adds	r3, #37	@ 0x25
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3324      	adds	r3, #36	@ 0x24
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	460b      	mov	r3, r1
 8003e98:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f004 fdc4 	bl	8008a3a <USB_ReadChInterrupts>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d11a      	bne.n	8003ef2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2304      	movs	r3, #4
 8003ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334d      	adds	r3, #77	@ 0x4d
 8003ede:	2207      	movs	r2, #7
 8003ee0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 fb4f 	bl	800958e <USB_HC_Halt>
 8003ef0:	e09e      	b.n	8004030 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f004 fd9d 	bl	8008a3a <USB_ReadChInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0a:	d11b      	bne.n	8003f44 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334d      	adds	r3, #77	@ 0x4d
 8003f30:	2208      	movs	r2, #8
 8003f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f005 fb26 	bl	800958e <USB_HC_Halt>
 8003f42:	e075      	b.n	8004030 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f004 fd74 	bl	8008a3a <USB_ReadChInterrupts>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d11a      	bne.n	8003f92 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2308      	movs	r3, #8
 8003f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	334d      	adds	r3, #77	@ 0x4d
 8003f7e:	2206      	movs	r2, #6
 8003f80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f005 faff 	bl	800958e <USB_HC_Halt>
 8003f90:	e04e      	b.n	8004030 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	4611      	mov	r1, r2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f004 fd4d 	bl	8008a3a <USB_ReadChInterrupts>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d11b      	bne.n	8003fe4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fbe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	334d      	adds	r3, #77	@ 0x4d
 8003fd0:	2209      	movs	r2, #9
 8003fd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	78fa      	ldrb	r2, [r7, #3]
 8003fda:	4611      	mov	r1, r2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f005 fad6 	bl	800958e <USB_HC_Halt>
 8003fe2:	e025      	b.n	8004030 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 fd24 	bl	8008a3a <USB_ReadChInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff8:	2b80      	cmp	r3, #128	@ 0x80
 8003ffa:	d119      	bne.n	8004030 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004008:	461a      	mov	r2, r3
 800400a:	2380      	movs	r3, #128	@ 0x80
 800400c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	334d      	adds	r3, #77	@ 0x4d
 800401e:	2207      	movs	r2, #7
 8004020:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	4611      	mov	r1, r2
 800402a:	4618      	mov	r0, r3
 800402c:	f005 faaf 	bl	800958e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f004 fcfe 	bl	8008a3a <USB_ReadChInterrupts>
 800403e:	4603      	mov	r3, r0
 8004040:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004048:	d112      	bne.n	8004070 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f005 fa9b 	bl	800958e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004064:	461a      	mov	r2, r3
 8004066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800406a:	6093      	str	r3, [r2, #8]
 800406c:	f000 bd75 	b.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f004 fcde 	bl	8008a3a <USB_ReadChInterrupts>
 800407e:	4603      	mov	r3, r0
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 8128 	bne.w	80042da <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004096:	461a      	mov	r2, r3
 8004098:	2320      	movs	r3, #32
 800409a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	331b      	adds	r3, #27
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d119      	bne.n	80040e6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040b2:	78fa      	ldrb	r2, [r7, #3]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	331b      	adds	r3, #27
 80040c2:	2200      	movs	r2, #0
 80040c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	0151      	lsls	r1, r2, #5
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	440a      	add	r2, r1
 80040dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	799b      	ldrb	r3, [r3, #6]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01b      	beq.n	8004126 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3330      	adds	r3, #48	@ 0x30
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4413      	add	r3, r2
 8004108:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	1ac9      	subs	r1, r1, r3
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4403      	add	r3, r0
 8004122:	3338      	adds	r3, #56	@ 0x38
 8004124:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334d      	adds	r3, #77	@ 0x4d
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3344      	adds	r3, #68	@ 0x44
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415a:	461a      	mov	r2, r3
 800415c:	2301      	movs	r3, #1
 800415e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	3326      	adds	r3, #38	@ 0x26
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	3326      	adds	r3, #38	@ 0x26
 8004186:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004188:	2b02      	cmp	r3, #2
 800418a:	d110      	bne.n	80041ae <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f005 f9fa 	bl	800958e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a6:	461a      	mov	r2, r3
 80041a8:	2310      	movs	r3, #16
 80041aa:	6093      	str	r3, [r2, #8]
 80041ac:	e03d      	b.n	800422a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3326      	adds	r3, #38	@ 0x26
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d00a      	beq.n	80041da <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3326      	adds	r3, #38	@ 0x26
 80041d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d127      	bne.n	800422a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041f8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	334c      	adds	r3, #76	@ 0x4c
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	334c      	adds	r3, #76	@ 0x4c
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f00c f96f 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	799b      	ldrb	r3, [r3, #6]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d13b      	bne.n	80042aa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3338      	adds	r3, #56	@ 0x38
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4403      	add	r3, r0
 8004252:	3328      	adds	r3, #40	@ 0x28
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	440b      	add	r3, r1
 8004258:	1e59      	subs	r1, r3, #1
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4403      	add	r3, r0
 8004268:	3328      	adds	r3, #40	@ 0x28
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8470 	beq.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	333c      	adds	r3, #60	@ 0x3c
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	f083 0301 	eor.w	r3, r3, #1
 8004292:	b2d8      	uxtb	r0, r3
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	333c      	adds	r3, #60	@ 0x3c
 80042a2:	4602      	mov	r2, r0
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	f000 bc58 	b.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	333c      	adds	r3, #60	@ 0x3c
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	78fa      	ldrb	r2, [r7, #3]
 80042be:	f083 0301 	eor.w	r3, r3, #1
 80042c2:	b2d8      	uxtb	r0, r3
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	333c      	adds	r3, #60	@ 0x3c
 80042d2:	4602      	mov	r2, r0
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	f000 bc40 	b.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f004 fba9 	bl	8008a3a <USB_ReadChInterrupts>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d131      	bne.n	8004356 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	2320      	movs	r3, #32
 8004302:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	331a      	adds	r3, #26
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	f040 841f 	bne.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	1a9b      	subs	r3, r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	331b      	adds	r3, #27
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004330:	78fa      	ldrb	r2, [r7, #3]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	1a9b      	subs	r3, r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	334d      	adds	r3, #77	@ 0x4d
 8004340:	2203      	movs	r2, #3
 8004342:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	78fa      	ldrb	r2, [r7, #3]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f005 f91e 	bl	800958e <USB_HC_Halt>
 8004352:	f000 bc02 	b.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f004 fb6b 	bl	8008a3a <USB_ReadChInterrupts>
 8004364:	4603      	mov	r3, r0
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	f040 8305 	bne.w	800497a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437c:	461a      	mov	r2, r3
 800437e:	2302      	movs	r3, #2
 8004380:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	334d      	adds	r3, #77	@ 0x4d
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d114      	bne.n	80043c2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	334d      	adds	r3, #77	@ 0x4d
 80043a8:	2202      	movs	r2, #2
 80043aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334c      	adds	r3, #76	@ 0x4c
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
 80043c0:	e2cc      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334d      	adds	r3, #77	@ 0x4d
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d114      	bne.n	8004402 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	334d      	adds	r3, #77	@ 0x4d
 80043e8:	2202      	movs	r2, #2
 80043ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334c      	adds	r3, #76	@ 0x4c
 80043fc:	2205      	movs	r2, #5
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e2ac      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	334d      	adds	r3, #77	@ 0x4d
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b07      	cmp	r3, #7
 8004416:	d00b      	beq.n	8004430 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800442a:	2b09      	cmp	r3, #9
 800442c:	f040 80a6 	bne.w	800457c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	334d      	adds	r3, #77	@ 0x4d
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3344      	adds	r3, #68	@ 0x44
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4403      	add	r3, r0
 8004464:	3344      	adds	r3, #68	@ 0x44
 8004466:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	3344      	adds	r3, #68	@ 0x44
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d943      	bls.n	8004506 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	3344      	adds	r3, #68	@ 0x44
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	331a      	adds	r3, #26
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d123      	bne.n	80044f0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	331b      	adds	r3, #27
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	331c      	adds	r3, #28
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ee:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334c      	adds	r3, #76	@ 0x4c
 8004500:	2204      	movs	r2, #4
 8004502:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004504:	e229      	b.n	800495a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	334c      	adds	r3, #76	@ 0x4c
 8004516:	2202      	movs	r2, #2
 8004518:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	011b      	lsls	r3, r3, #4
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3326      	adds	r3, #38	@ 0x26
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004530:	78fa      	ldrb	r2, [r7, #3]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	4613      	mov	r3, r2
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	3326      	adds	r3, #38	@ 0x26
 8004540:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004542:	2b02      	cmp	r3, #2
 8004544:	f040 8209 	bne.w	800495a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004548:	78fb      	ldrb	r3, [r7, #3]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800455e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004566:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004574:	461a      	mov	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800457a:	e1ee      	b.n	800495a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	334d      	adds	r3, #77	@ 0x4d
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b05      	cmp	r3, #5
 8004590:	f040 80c8 	bne.w	8004724 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	334d      	adds	r3, #77	@ 0x4d
 80045a4:	2202      	movs	r2, #2
 80045a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	331b      	adds	r3, #27
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	f040 81ce 	bne.w	800495c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	3326      	adds	r3, #38	@ 0x26
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d16b      	bne.n	80046ae <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	3348      	adds	r3, #72	@ 0x48
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	1c59      	adds	r1, r3, #1
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4403      	add	r3, r0
 80045f6:	3348      	adds	r3, #72	@ 0x48
 80045f8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3348      	adds	r3, #72	@ 0x48
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d943      	bls.n	8004698 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	3348      	adds	r3, #72	@ 0x48
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	331b      	adds	r3, #27
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	3344      	adds	r3, #68	@ 0x44
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d809      	bhi.n	8004662 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	331c      	adds	r3, #28
 800465e:	2201      	movs	r2, #1
 8004660:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	015a      	lsls	r2, r3, #5
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	0151      	lsls	r1, r2, #5
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	440a      	add	r2, r1
 8004678:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800467c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004680:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	334c      	adds	r3, #76	@ 0x4c
 8004692:	2204      	movs	r2, #4
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e014      	b.n	80046c2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334c      	adds	r3, #76	@ 0x4c
 80046a8:	2202      	movs	r2, #2
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e009      	b.n	80046c2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334c      	adds	r3, #76	@ 0x4c
 80046be:	2202      	movs	r2, #2
 80046c0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3326      	adds	r3, #38	@ 0x26
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	3326      	adds	r3, #38	@ 0x26
 80046e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	f040 8136 	bne.w	800495c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004706:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800470e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e11b      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	334d      	adds	r3, #77	@ 0x4d
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	2b03      	cmp	r3, #3
 8004738:	f040 8081 	bne.w	800483e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	334d      	adds	r3, #77	@ 0x4d
 800474c:	2202      	movs	r2, #2
 800474e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	331b      	adds	r3, #27
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	f040 80fa 	bne.w	800495c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	334c      	adds	r3, #76	@ 0x4c
 8004778:	2202      	movs	r2, #2
 800477a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	440a      	add	r2, r1
 8004792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004796:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	0151      	lsls	r1, r2, #5
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	440a      	add	r2, r1
 80047b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047ba:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	78fa      	ldrb	r2, [r7, #3]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047d6:	f023 0320 	bic.w	r3, r3, #32
 80047da:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3326      	adds	r3, #38	@ 0x26
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3326      	adds	r3, #38	@ 0x26
 8004802:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004804:	2b02      	cmp	r3, #2
 8004806:	f040 80a9 	bne.w	800495c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004820:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004828:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	e08e      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	334d      	adds	r3, #77	@ 0x4d
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d143      	bne.n	80048dc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	4613      	mov	r3, r2
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	440b      	add	r3, r1
 8004862:	334d      	adds	r3, #77	@ 0x4d
 8004864:	2202      	movs	r2, #2
 8004866:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	334c      	adds	r3, #76	@ 0x4c
 8004878:	2202      	movs	r2, #2
 800487a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	3326      	adds	r3, #38	@ 0x26
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	3326      	adds	r3, #38	@ 0x26
 80048a2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d159      	bne.n	800495c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d4:	461a      	mov	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e03f      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80048dc:	78fa      	ldrb	r2, [r7, #3]
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	334d      	adds	r3, #77	@ 0x4d
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d126      	bne.n	8004940 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	334d      	adds	r3, #77	@ 0x4d
 8004902:	2202      	movs	r2, #2
 8004904:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3344      	adds	r3, #68	@ 0x44
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1c59      	adds	r1, r3, #1
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4403      	add	r3, r0
 8004926:	3344      	adds	r3, #68	@ 0x44
 8004928:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	334c      	adds	r3, #76	@ 0x4c
 800493a:	2204      	movs	r2, #4
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e00d      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	334d      	adds	r3, #77	@ 0x4d
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b02      	cmp	r3, #2
 8004954:	f000 8100 	beq.w	8004b58 <HCD_HC_IN_IRQHandler+0xcca>
 8004958:	e000      	b.n	800495c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800495a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	334c      	adds	r3, #76	@ 0x4c
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	4619      	mov	r1, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f00b fdc8 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004978:	e0ef      	b.n	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f004 f859 	bl	8008a3a <USB_ReadChInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d12f      	bne.n	80049f2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800499e:	461a      	mov	r2, r3
 80049a0:	2340      	movs	r3, #64	@ 0x40
 80049a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	334d      	adds	r3, #77	@ 0x4d
 80049b4:	2205      	movs	r2, #5
 80049b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	331a      	adds	r3, #26
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3344      	adds	r3, #68	@ 0x44
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 fdcf 	bl	800958e <USB_HC_Halt>
 80049f0:	e0b3      	b.n	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f004 f81d 	bl	8008a3a <USB_ReadChInterrupts>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	f040 80a7 	bne.w	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	3326      	adds	r3, #38	@ 0x26
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d11b      	bne.n	8004a5a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	011b      	lsls	r3, r3, #4
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3344      	adds	r3, #68	@ 0x44
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	334d      	adds	r3, #77	@ 0x4d
 8004a46:	2204      	movs	r2, #4
 8004a48:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f004 fd9b 	bl	800958e <USB_HC_Halt>
 8004a58:	e03f      	b.n	8004ada <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3326      	adds	r3, #38	@ 0x26
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	1a9b      	subs	r3, r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3326      	adds	r3, #38	@ 0x26
 8004a80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d129      	bne.n	8004ada <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	3344      	adds	r3, #68	@ 0x44
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	799b      	ldrb	r3, [r3, #6]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HCD_HC_IN_IRQHandler+0xc2a>
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	440b      	add	r3, r1
 8004ab0:	331b      	adds	r3, #27
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d110      	bne.n	8004ada <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	4613      	mov	r3, r2
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	1a9b      	subs	r3, r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	334d      	adds	r3, #77	@ 0x4d
 8004ac8:	2204      	movs	r2, #4
 8004aca:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f004 fd5a 	bl	800958e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	331b      	adds	r3, #27
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d129      	bne.n	8004b44 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	4613      	mov	r3, r2
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	1a9b      	subs	r3, r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	331b      	adds	r3, #27
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b22:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b3e:	f043 0320 	orr.w	r3, r3, #32
 8004b42:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b50:	461a      	mov	r2, r3
 8004b52:	2310      	movs	r3, #16
 8004b54:	6093      	str	r3, [r2, #8]
 8004b56:	e000      	b.n	8004b5a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b58:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f003 ff5b 	bl	8008a3a <USB_ReadChInterrupts>
 8004b84:	4603      	mov	r3, r0
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d11b      	bne.n	8004bc6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2304      	movs	r3, #4
 8004b9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	334d      	adds	r3, #77	@ 0x4d
 8004bb0:	2207      	movs	r2, #7
 8004bb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 fce6 	bl	800958e <USB_HC_Halt>
 8004bc2:	f000 bc89 	b.w	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	4611      	mov	r1, r2
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f003 ff33 	bl	8008a3a <USB_ReadChInterrupts>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	f040 8082 	bne.w	8004ce4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bec:	461a      	mov	r2, r3
 8004bee:	2320      	movs	r3, #32
 8004bf0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3319      	adds	r3, #25
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d124      	bne.n	8004c52 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3319      	adds	r3, #25
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	334c      	adds	r3, #76	@ 0x4c
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	334d      	adds	r3, #77	@ 0x4d
 8004c40:	2203      	movs	r2, #3
 8004c42:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f004 fc9e 	bl	800958e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	331a      	adds	r3, #26
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f040 8437 	bne.w	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	331b      	adds	r3, #27
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 842b 	bne.w	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3326      	adds	r3, #38	@ 0x26
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d009      	beq.n	8004cac <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	331b      	adds	r3, #27
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	011b      	lsls	r3, r3, #4
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	334d      	adds	r3, #77	@ 0x4d
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f004 fc60 	bl	800958e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3344      	adds	r3, #68	@ 0x44
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e3f9      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f003 fea4 	bl	8008a3a <USB_ReadChInterrupts>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfc:	d111      	bne.n	8004d22 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f004 fc37 	bl	800958e <USB_HC_Halt>
 8004d20:	e3da      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f003 fe85 	bl	8008a3a <USB_ReadChInterrupts>
 8004d30:	4603      	mov	r3, r0
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d168      	bne.n	8004e0c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	3344      	adds	r3, #68	@ 0x44
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	4611      	mov	r1, r2
 8004d56:	4618      	mov	r0, r3
 8004d58:	f003 fe6f 	bl	8008a3a <USB_ReadChInterrupts>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	2b40      	cmp	r3, #64	@ 0x40
 8004d64:	d112      	bne.n	8004d8c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	3319      	adds	r3, #25
 8004d76:	2201      	movs	r2, #1
 8004d78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d86:	461a      	mov	r2, r3
 8004d88:	2340      	movs	r3, #64	@ 0x40
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004d8c:	78fa      	ldrb	r2, [r7, #3]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	331b      	adds	r3, #27
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d019      	beq.n	8004dd6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004da2:	78fa      	ldrb	r2, [r7, #3]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	331b      	adds	r3, #27
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	0151      	lsls	r1, r2, #5
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	440a      	add	r2, r1
 8004dcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de2:	461a      	mov	r2, r3
 8004de4:	2301      	movs	r3, #1
 8004de6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004de8:	78fa      	ldrb	r2, [r7, #3]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	334d      	adds	r3, #77	@ 0x4d
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	4611      	mov	r1, r2
 8004e04:	4618      	mov	r0, r3
 8004e06:	f004 fbc2 	bl	800958e <USB_HC_Halt>
 8004e0a:	e365      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fe10 	bl	8008a3a <USB_ReadChInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e20:	2b40      	cmp	r3, #64	@ 0x40
 8004e22:	d139      	bne.n	8004e98 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	334d      	adds	r3, #77	@ 0x4d
 8004e34:	2205      	movs	r2, #5
 8004e36:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	331a      	adds	r3, #26
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3319      	adds	r3, #25
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	3344      	adds	r3, #68	@ 0x44
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f004 fb85 	bl	800958e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e90:	461a      	mov	r2, r3
 8004e92:	2340      	movs	r3, #64	@ 0x40
 8004e94:	6093      	str	r3, [r2, #8]
 8004e96:	e31f      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	78fa      	ldrb	r2, [r7, #3]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f003 fdca 	bl	8008a3a <USB_ReadChInterrupts>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d11a      	bne.n	8004ee6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	334d      	adds	r3, #77	@ 0x4d
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 fb55 	bl	800958e <USB_HC_Halt>
 8004ee4:	e2f8      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	4611      	mov	r1, r2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f003 fda3 	bl	8008a3a <USB_ReadChInterrupts>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d144      	bne.n	8004f88 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3344      	adds	r3, #68	@ 0x44
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	1a9b      	subs	r3, r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	334d      	adds	r3, #77	@ 0x4d
 8004f22:	2204      	movs	r2, #4
 8004f24:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3319      	adds	r3, #25
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d114      	bne.n	8004f66 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	3319      	adds	r3, #25
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 fb0d 	bl	800958e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f80:	461a      	mov	r2, r3
 8004f82:	2310      	movs	r3, #16
 8004f84:	6093      	str	r3, [r2, #8]
 8004f86:	e2a7      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f003 fd52 	bl	8008a3a <USB_ReadChInterrupts>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9c:	2b80      	cmp	r3, #128	@ 0x80
 8004f9e:	f040 8083 	bne.w	80050a8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	799b      	ldrb	r3, [r3, #6]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d111      	bne.n	8004fce <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	334d      	adds	r3, #77	@ 0x4d
 8004fba:	2207      	movs	r2, #7
 8004fbc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f004 fae1 	bl	800958e <USB_HC_Halt>
 8004fcc:	e062      	b.n	8005094 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	3344      	adds	r3, #68	@ 0x44
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	1c59      	adds	r1, r3, #1
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4403      	add	r3, r0
 8004fee:	3344      	adds	r3, #68	@ 0x44
 8004ff0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	3344      	adds	r3, #68	@ 0x44
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d922      	bls.n	800504e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	3344      	adds	r3, #68	@ 0x44
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	334c      	adds	r3, #76	@ 0x4c
 800502c:	2204      	movs	r2, #4
 800502e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	334c      	adds	r3, #76	@ 0x4c
 8005040:	781a      	ldrb	r2, [r3, #0]
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f00b fa5e 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
 800504c:	e022      	b.n	8005094 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	334c      	adds	r3, #76	@ 0x4c
 800505e:	2202      	movs	r2, #2
 8005060:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005078:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005080:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800508e:	461a      	mov	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	2380      	movs	r3, #128	@ 0x80
 80050a4:	6093      	str	r3, [r2, #8]
 80050a6:	e217      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f003 fcc2 	bl	8008a3a <USB_ReadChInterrupts>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c0:	d11b      	bne.n	80050fa <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334d      	adds	r3, #77	@ 0x4d
 80050d2:	2209      	movs	r2, #9
 80050d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	4611      	mov	r1, r2
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fa55 	bl	800958e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f0:	461a      	mov	r2, r3
 80050f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050f6:	6093      	str	r3, [r2, #8]
 80050f8:	e1ee      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f003 fc99 	bl	8008a3a <USB_ReadChInterrupts>
 8005108:	4603      	mov	r3, r0
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	f040 81df 	bne.w	80054d2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005120:	461a      	mov	r2, r3
 8005122:	2302      	movs	r3, #2
 8005124:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005126:	78fa      	ldrb	r2, [r7, #3]
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	334d      	adds	r3, #77	@ 0x4d
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 8093 	bne.w	8005264 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800513e:	78fa      	ldrb	r2, [r7, #3]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	011b      	lsls	r3, r3, #4
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	334d      	adds	r3, #77	@ 0x4d
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	334c      	adds	r3, #76	@ 0x4c
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005166:	78fa      	ldrb	r2, [r7, #3]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3326      	adds	r3, #38	@ 0x26
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b02      	cmp	r3, #2
 800517a:	d00b      	beq.n	8005194 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	3326      	adds	r3, #38	@ 0x26
 800518c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800518e:	2b03      	cmp	r3, #3
 8005190:	f040 8190 	bne.w	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	799b      	ldrb	r3, [r3, #6]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d115      	bne.n	80051c8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	333d      	adds	r3, #61	@ 0x3d
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	f083 0301 	eor.w	r3, r3, #1
 80051b4:	b2d8      	uxtb	r0, r3
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	333d      	adds	r3, #61	@ 0x3d
 80051c4:	4602      	mov	r2, r0
 80051c6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	799b      	ldrb	r3, [r3, #6]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	f040 8171 	bne.w	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	3334      	adds	r3, #52	@ 0x34
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8165 	beq.w	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	3334      	adds	r3, #52	@ 0x34
 80051fa:	6819      	ldr	r1, [r3, #0]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4403      	add	r3, r0
 800520a:	3328      	adds	r3, #40	@ 0x28
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	440b      	add	r3, r1
 8005210:	1e59      	subs	r1, r3, #1
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4403      	add	r3, r0
 8005220:	3328      	adds	r3, #40	@ 0x28
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	fbb1 f3f3 	udiv	r3, r1, r3
 8005228:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 813f 	beq.w	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	4613      	mov	r3, r2
 800523c:	011b      	lsls	r3, r3, #4
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	440b      	add	r3, r1
 8005244:	333d      	adds	r3, #61	@ 0x3d
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	f083 0301 	eor.w	r3, r3, #1
 800524e:	b2d8      	uxtb	r0, r3
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	333d      	adds	r3, #61	@ 0x3d
 800525e:	4602      	mov	r2, r0
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e127      	b.n	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	334d      	adds	r3, #77	@ 0x4d
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b03      	cmp	r3, #3
 8005278:	d120      	bne.n	80052bc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	334d      	adds	r3, #77	@ 0x4d
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	331b      	adds	r3, #27
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	f040 8107 	bne.w	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	334c      	adds	r3, #76	@ 0x4c
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e0fb      	b.n	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	334d      	adds	r3, #77	@ 0x4d
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d13a      	bne.n	8005348 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	334d      	adds	r3, #77	@ 0x4d
 80052e2:	2202      	movs	r2, #2
 80052e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	334c      	adds	r3, #76	@ 0x4c
 80052f6:	2202      	movs	r2, #2
 80052f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	331b      	adds	r3, #27
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	f040 80d1 	bne.w	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	331b      	adds	r3, #27
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4413      	add	r3, r2
 800532e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	440a      	add	r2, r1
 800533c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005344:	6053      	str	r3, [r2, #4]
 8005346:	e0b5      	b.n	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	334d      	adds	r3, #77	@ 0x4d
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b05      	cmp	r3, #5
 800535c:	d114      	bne.n	8005388 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	334d      	adds	r3, #77	@ 0x4d
 800536e:	2202      	movs	r2, #2
 8005370:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	334c      	adds	r3, #76	@ 0x4c
 8005382:	2202      	movs	r2, #2
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e095      	b.n	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	334d      	adds	r3, #77	@ 0x4d
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b06      	cmp	r3, #6
 800539c:	d114      	bne.n	80053c8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	334d      	adds	r3, #77	@ 0x4d
 80053ae:	2202      	movs	r2, #2
 80053b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	334c      	adds	r3, #76	@ 0x4c
 80053c2:	2205      	movs	r2, #5
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e075      	b.n	80054b4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053c8:	78fa      	ldrb	r2, [r7, #3]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	1a9b      	subs	r3, r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	334d      	adds	r3, #77	@ 0x4d
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b07      	cmp	r3, #7
 80053dc:	d00a      	beq.n	80053f4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	334d      	adds	r3, #77	@ 0x4d
 80053ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053f0:	2b09      	cmp	r3, #9
 80053f2:	d170      	bne.n	80054d6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	1a9b      	subs	r3, r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	334d      	adds	r3, #77	@ 0x4d
 8005404:	2202      	movs	r2, #2
 8005406:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	3344      	adds	r3, #68	@ 0x44
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4403      	add	r3, r0
 8005428:	3344      	adds	r3, #68	@ 0x44
 800542a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	3344      	adds	r3, #68	@ 0x44
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d914      	bls.n	800546c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	3344      	adds	r3, #68	@ 0x44
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	334c      	adds	r3, #76	@ 0x4c
 8005466:	2204      	movs	r2, #4
 8005468:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800546a:	e022      	b.n	80054b2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800546c:	78fa      	ldrb	r2, [r7, #3]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	334c      	adds	r3, #76	@ 0x4c
 800547c:	2202      	movs	r2, #2
 800547e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4413      	add	r3, r2
 8005488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005496:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800549e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ac:	461a      	mov	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80054b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	334c      	adds	r3, #76	@ 0x4c
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	4619      	mov	r1, r3
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f00b f81c 	bl	8010508 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054d0:	e002      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80054d6:	bf00      	nop
  }
}
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b08a      	sub	sp, #40	@ 0x28
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	0c5b      	lsrs	r3, r3, #17
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	091b      	lsrs	r3, r3, #4
 800550e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005512:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d004      	beq.n	8005524 <HCD_RXQLVL_IRQHandler+0x46>
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b05      	cmp	r3, #5
 800551e:	f000 80b6 	beq.w	800568e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005522:	e0b7      	b.n	8005694 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80b3 	beq.w	8005692 <HCD_RXQLVL_IRQHandler+0x1b4>
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4613      	mov	r3, r2
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	332c      	adds	r3, #44	@ 0x2c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80a7 	beq.w	8005692 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	3338      	adds	r3, #56	@ 0x38
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	18d1      	adds	r1, r2, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4613      	mov	r3, r2
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4403      	add	r3, r0
 8005568:	3334      	adds	r3, #52	@ 0x34
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4299      	cmp	r1, r3
 800556e:	f200 8083 	bhi.w	8005678 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	332c      	adds	r3, #44	@ 0x2c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	b292      	uxth	r2, r2
 800558c:	4619      	mov	r1, r3
 800558e:	f003 f9e9 	bl	8008964 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4613      	mov	r3, r2
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	332c      	adds	r3, #44	@ 0x2c
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	18d1      	adds	r1, r2, r3
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4403      	add	r3, r0
 80055b6:	332c      	adds	r3, #44	@ 0x2c
 80055b8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4613      	mov	r3, r2
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	3338      	adds	r3, #56	@ 0x38
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	18d1      	adds	r1, r2, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4403      	add	r3, r0
 80055de:	3338      	adds	r3, #56	@ 0x38
 80055e0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	0cdb      	lsrs	r3, r3, #19
 80055f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4613      	mov	r3, r2
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	1a9b      	subs	r3, r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	3328      	adds	r3, #40	@ 0x28
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4293      	cmp	r3, r2
 8005610:	d13f      	bne.n	8005692 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d03c      	beq.n	8005692 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800562e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005644:	461a      	mov	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	4613      	mov	r3, r2
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	333c      	adds	r3, #60	@ 0x3c
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f083 0301 	eor.w	r3, r3, #1
 8005660:	b2d8      	uxtb	r0, r3
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	333c      	adds	r3, #60	@ 0x3c
 8005672:	4602      	mov	r2, r0
 8005674:	701a      	strb	r2, [r3, #0]
      break;
 8005676:	e00c      	b.n	8005692 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4613      	mov	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	334c      	adds	r3, #76	@ 0x4c
 8005688:	2204      	movs	r2, #4
 800568a:	701a      	strb	r2, [r3, #0]
      break;
 800568c:	e001      	b.n	8005692 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005692:	bf00      	nop
  }
}
 8005694:	bf00      	nop
 8005696:	3728      	adds	r7, #40	@ 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80056c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d10b      	bne.n	80056ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d102      	bne.n	80056e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f00a fef6 	bl	80104d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f043 0302 	orr.w	r3, r3, #2
 80056ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b08      	cmp	r3, #8
 80056f4:	d132      	bne.n	800575c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b04      	cmp	r3, #4
 8005706:	d126      	bne.n	8005756 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	7a5b      	ldrb	r3, [r3, #9]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d113      	bne.n	8005738 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005716:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800571a:	d106      	bne.n	800572a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2102      	movs	r1, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f003 fab4 	bl	8008c90 <USB_InitFSLSPClkSel>
 8005728:	e011      	b.n	800574e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2101      	movs	r1, #1
 8005730:	4618      	mov	r0, r3
 8005732:	f003 faad 	bl	8008c90 <USB_InitFSLSPClkSel>
 8005736:	e00a      	b.n	800574e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	79db      	ldrb	r3, [r3, #7]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d106      	bne.n	800574e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005746:	461a      	mov	r2, r3
 8005748:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800574c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f00a feec 	bl	801052c <HAL_HCD_PortEnabled_Callback>
 8005754:	e002      	b.n	800575c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f00a fef6 	bl	8010548 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b20      	cmp	r3, #32
 8005764:	d103      	bne.n	800576e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f043 0320 	orr.w	r3, r3, #32
 800576c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6013      	str	r3, [r2, #0]
}
 800577a:	bf00      	nop
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e12b      	b.n	80059ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fc ff4a 	bl	8002644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2224      	movs	r2, #36	@ 0x24
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0201 	bic.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057e8:	f001 fa20 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 80057ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4a81      	ldr	r2, [pc, #516]	@ (80059f8 <HAL_I2C_Init+0x274>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d807      	bhi.n	8005808 <HAL_I2C_Init+0x84>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4a80      	ldr	r2, [pc, #512]	@ (80059fc <HAL_I2C_Init+0x278>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	bf94      	ite	ls
 8005800:	2301      	movls	r3, #1
 8005802:	2300      	movhi	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e006      	b.n	8005816 <HAL_I2C_Init+0x92>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a7d      	ldr	r2, [pc, #500]	@ (8005a00 <HAL_I2C_Init+0x27c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	bf94      	ite	ls
 8005810:	2301      	movls	r3, #1
 8005812:	2300      	movhi	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e0e7      	b.n	80059ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4a78      	ldr	r2, [pc, #480]	@ (8005a04 <HAL_I2C_Init+0x280>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0c9b      	lsrs	r3, r3, #18
 8005828:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a6a      	ldr	r2, [pc, #424]	@ (80059f8 <HAL_I2C_Init+0x274>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d802      	bhi.n	8005858 <HAL_I2C_Init+0xd4>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	3301      	adds	r3, #1
 8005856:	e009      	b.n	800586c <HAL_I2C_Init+0xe8>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	4a69      	ldr	r2, [pc, #420]	@ (8005a08 <HAL_I2C_Init+0x284>)
 8005864:	fba2 2303 	umull	r2, r3, r2, r3
 8005868:	099b      	lsrs	r3, r3, #6
 800586a:	3301      	adds	r3, #1
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6812      	ldr	r2, [r2, #0]
 8005870:	430b      	orrs	r3, r1
 8005872:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800587e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	495c      	ldr	r1, [pc, #368]	@ (80059f8 <HAL_I2C_Init+0x274>)
 8005888:	428b      	cmp	r3, r1
 800588a:	d819      	bhi.n	80058c0 <HAL_I2C_Init+0x13c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1e59      	subs	r1, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	005b      	lsls	r3, r3, #1
 8005896:	fbb1 f3f3 	udiv	r3, r1, r3
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058a0:	400b      	ands	r3, r1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_I2C_Init+0x138>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	1e59      	subs	r1, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80058b4:	3301      	adds	r3, #1
 80058b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ba:	e051      	b.n	8005960 <HAL_I2C_Init+0x1dc>
 80058bc:	2304      	movs	r3, #4
 80058be:	e04f      	b.n	8005960 <HAL_I2C_Init+0x1dc>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d111      	bne.n	80058ec <HAL_I2C_Init+0x168>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	1e58      	subs	r0, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	440b      	add	r3, r1
 80058d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80058da:	3301      	adds	r3, #1
 80058dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e012      	b.n	8005912 <HAL_I2C_Init+0x18e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	1e58      	subs	r0, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6859      	ldr	r1, [r3, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	0099      	lsls	r1, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005902:	3301      	adds	r3, #1
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Init+0x196>
 8005916:	2301      	movs	r3, #1
 8005918:	e022      	b.n	8005960 <HAL_I2C_Init+0x1dc>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10e      	bne.n	8005940 <HAL_I2C_Init+0x1bc>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	1e58      	subs	r0, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	440b      	add	r3, r1
 8005930:	fbb0 f3f3 	udiv	r3, r0, r3
 8005934:	3301      	adds	r3, #1
 8005936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800593a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593e:	e00f      	b.n	8005960 <HAL_I2C_Init+0x1dc>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1e58      	subs	r0, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6859      	ldr	r1, [r3, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	440b      	add	r3, r1
 800594e:	0099      	lsls	r1, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	fbb0 f3f3 	udiv	r3, r0, r3
 8005956:	3301      	adds	r3, #1
 8005958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800595c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	6809      	ldr	r1, [r1, #0]
 8005964:	4313      	orrs	r3, r2
 8005966:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69da      	ldr	r2, [r3, #28]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800598e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6911      	ldr	r1, [r2, #16]
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	68d2      	ldr	r2, [r2, #12]
 800599a:	4311      	orrs	r1, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	000186a0 	.word	0x000186a0
 80059fc:	001e847f 	.word	0x001e847f
 8005a00:	003d08ff 	.word	0x003d08ff
 8005a04:	431bde83 	.word	0x431bde83
 8005a08:	10624dd3 	.word	0x10624dd3

08005a0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e128      	b.n	8005c70 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d109      	bne.n	8005a3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a90      	ldr	r2, [pc, #576]	@ (8005c78 <HAL_I2S_Init+0x26c>)
 8005a36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fc fe4b 	bl	80026d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a54:	f023 030f 	bic.w	r3, r3, #15
 8005a58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d060      	beq.n	8005b2c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a72:	2310      	movs	r3, #16
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e001      	b.n	8005a7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a78:	2320      	movs	r3, #32
 8005a7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d802      	bhi.n	8005a8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f001 fa0a 	bl	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a90:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a9a:	d125      	bne.n	8005ae8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	3305      	adds	r3, #5
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	e01f      	b.n	8005b06 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	461a      	mov	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae2:	3305      	adds	r3, #5
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	e00e      	b.n	8005b06 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	461a      	mov	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	3305      	adds	r3, #5
 8005b04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4a5c      	ldr	r2, [pc, #368]	@ (8005c7c <HAL_I2S_Init+0x270>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	021b      	lsls	r3, r3, #8
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e003      	b.n	8005b34 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d902      	bls.n	8005b40 <HAL_I2S_Init+0x134>
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	2bff      	cmp	r3, #255	@ 0xff
 8005b3e:	d907      	bls.n	8005b50 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b44:	f043 0210 	orr.w	r2, r3, #16
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e08f      	b.n	8005c70 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	ea42 0103 	orr.w	r1, r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b6e:	f023 030f 	bic.w	r3, r3, #15
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6851      	ldr	r1, [r2, #4]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6892      	ldr	r2, [r2, #8]
 8005b7a:	4311      	orrs	r1, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	68d2      	ldr	r2, [r2, #12]
 8005b80:	4311      	orrs	r1, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6992      	ldr	r2, [r2, #24]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b92:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d161      	bne.n	8005c60 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a38      	ldr	r2, [pc, #224]	@ (8005c80 <HAL_I2S_Init+0x274>)
 8005ba0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a37      	ldr	r2, [pc, #220]	@ (8005c84 <HAL_I2S_Init+0x278>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <HAL_I2S_Init+0x1a4>
 8005bac:	4b36      	ldr	r3, [pc, #216]	@ (8005c88 <HAL_I2S_Init+0x27c>)
 8005bae:	e001      	b.n	8005bb4 <HAL_I2S_Init+0x1a8>
 8005bb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6812      	ldr	r2, [r2, #0]
 8005bba:	4932      	ldr	r1, [pc, #200]	@ (8005c84 <HAL_I2S_Init+0x278>)
 8005bbc:	428a      	cmp	r2, r1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_I2S_Init+0x1b8>
 8005bc0:	4a31      	ldr	r2, [pc, #196]	@ (8005c88 <HAL_I2S_Init+0x27c>)
 8005bc2:	e001      	b.n	8005bc8 <HAL_I2S_Init+0x1bc>
 8005bc4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005bc8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005bcc:	f023 030f 	bic.w	r3, r3, #15
 8005bd0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8005c84 <HAL_I2S_Init+0x278>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <HAL_I2S_Init+0x1d4>
 8005bdc:	4b2a      	ldr	r3, [pc, #168]	@ (8005c88 <HAL_I2S_Init+0x27c>)
 8005bde:	e001      	b.n	8005be4 <HAL_I2S_Init+0x1d8>
 8005be0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005be4:	2202      	movs	r2, #2
 8005be6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a25      	ldr	r2, [pc, #148]	@ (8005c84 <HAL_I2S_Init+0x278>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2S_Init+0x1ea>
 8005bf2:	4b25      	ldr	r3, [pc, #148]	@ (8005c88 <HAL_I2S_Init+0x27c>)
 8005bf4:	e001      	b.n	8005bfa <HAL_I2S_Init+0x1ee>
 8005bf6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c06:	d003      	beq.n	8005c10 <HAL_I2S_Init+0x204>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e001      	b.n	8005c1c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c26:	4313      	orrs	r3, r2
 8005c28:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c30:	4313      	orrs	r3, r2
 8005c32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c48:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8005c84 <HAL_I2S_Init+0x278>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d101      	bne.n	8005c58 <HAL_I2S_Init+0x24c>
 8005c54:	4b0c      	ldr	r3, [pc, #48]	@ (8005c88 <HAL_I2S_Init+0x27c>)
 8005c56:	e001      	b.n	8005c5c <HAL_I2S_Init+0x250>
 8005c58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c5c:	897a      	ldrh	r2, [r7, #10]
 8005c5e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08005d83 	.word	0x08005d83
 8005c7c:	cccccccd 	.word	0xcccccccd
 8005c80:	08005e99 	.word	0x08005e99
 8005c84:	40003800 	.word	0x40003800
 8005c88:	40003400 	.word	0x40003400

08005c8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	1c9a      	adds	r2, r3, #2
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10e      	bne.n	8005d1c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d0c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff ffb8 	bl	8005c8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d36:	b292      	uxth	r2, r2
 8005d38:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	1c9a      	adds	r2, r3, #2
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10e      	bne.n	8005d7a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff ff93 	bl	8005ca0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b086      	sub	sp, #24
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d13a      	bne.n	8005e14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d109      	bne.n	8005dbc <I2S_IRQHandler+0x3a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db2:	2b40      	cmp	r3, #64	@ 0x40
 8005db4:	d102      	bne.n	8005dbc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff ffb4 	bl	8005d24 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc2:	2b40      	cmp	r3, #64	@ 0x40
 8005dc4:	d126      	bne.n	8005e14 <I2S_IRQHandler+0x92>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f003 0320 	and.w	r3, r3, #32
 8005dd0:	2b20      	cmp	r3, #32
 8005dd2:	d11f      	bne.n	8005e14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005de2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e06:	f043 0202 	orr.w	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff ff50 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d136      	bne.n	8005e8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d109      	bne.n	8005e3e <I2S_IRQHandler+0xbc>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b80      	cmp	r3, #128	@ 0x80
 8005e36:	d102      	bne.n	8005e3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff ff45 	bl	8005cc8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d122      	bne.n	8005e8e <I2S_IRQHandler+0x10c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d11b      	bne.n	8005e8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e80:	f043 0204 	orr.w	r2, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff ff13 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a92      	ldr	r2, [pc, #584]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005eb2:	4b92      	ldr	r3, [pc, #584]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005eb4:	e001      	b.n	8005eba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005eb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a8b      	ldr	r2, [pc, #556]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d101      	bne.n	8005ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005ed0:	4b8a      	ldr	r3, [pc, #552]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ed2:	e001      	b.n	8005ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ed4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d004      	beq.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 8099 	bne.w	8006022 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d107      	bne.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f925 	bl	8006154 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f9c8 	bl	80062b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2a:	2b40      	cmp	r3, #64	@ 0x40
 8005f2c:	d13a      	bne.n	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d035      	beq.n	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a6e      	ldr	r2, [pc, #440]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d101      	bne.n	8005f46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f42:	4b6e      	ldr	r3, [pc, #440]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f44:	e001      	b.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4969      	ldr	r1, [pc, #420]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f52:	428b      	cmp	r3, r1
 8005f54:	d101      	bne.n	8005f5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f56:	4b69      	ldr	r3, [pc, #420]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f58:	e001      	b.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f043 0202 	orr.w	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff fe88 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	f040 80c3 	bne.w	8006136 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80bd 	beq.w	8006136 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a49      	ldr	r2, [pc, #292]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005fd6:	4b49      	ldr	r3, [pc, #292]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fd8:	e001      	b.n	8005fde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005fda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4944      	ldr	r1, [pc, #272]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fe6:	428b      	cmp	r3, r1
 8005fe8:	d101      	bne.n	8005fee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005fea:	4b44      	ldr	r3, [pc, #272]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fec:	e001      	b.n	8005ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005fee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ff2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ff6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	60bb      	str	r3, [r7, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]
 8006004:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006012:	f043 0204 	orr.w	r2, r3, #4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fe4a 	bl	8005cb4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006020:	e089      	b.n	8006136 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b02      	cmp	r3, #2
 800602a:	d107      	bne.n	800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8be 	bl	80061b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d107      	bne.n	8006056 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8fd 	bl	8006250 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605c:	2b40      	cmp	r3, #64	@ 0x40
 800605e:	d12f      	bne.n	80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d02a      	beq.n	80060c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006078:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1e      	ldr	r2, [pc, #120]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d101      	bne.n	8006088 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006084:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006086:	e001      	b.n	800608c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006088:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4919      	ldr	r1, [pc, #100]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006094:	428b      	cmp	r3, r1
 8006096:	d101      	bne.n	800609c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006098:	4b18      	ldr	r3, [pc, #96]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800609a:	e001      	b.n	80060a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800609c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b2:	f043 0202 	orr.w	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff fdfa 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b08      	cmp	r3, #8
 80060c8:	d136      	bne.n	8006138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d031      	beq.n	8006138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a07      	ldr	r2, [pc, #28]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80060de:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060e0:	e001      	b.n	80060e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80060e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4902      	ldr	r1, [pc, #8]	@ (80060f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060ee:	428b      	cmp	r3, r1
 80060f0:	d106      	bne.n	8006100 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80060f2:	4b02      	ldr	r3, [pc, #8]	@ (80060fc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060f4:	e006      	b.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80060f6:	bf00      	nop
 80060f8:	40003800 	.word	0x40003800
 80060fc:	40003400 	.word	0x40003400
 8006100:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006104:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006108:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006118:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006126:	f043 0204 	orr.w	r2, r3, #4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7ff fdc0 	bl	8005cb4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006134:	e000      	b.n	8006138 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006136:	bf00      	nop
}
 8006138:	bf00      	nop
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	1c99      	adds	r1, r3, #2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6251      	str	r1, [r2, #36]	@ 0x24
 8006166:	881a      	ldrh	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d113      	bne.n	80061ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006194:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff ffc9 	bl	8006140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c4:	1c99      	adds	r1, r3, #2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80061ca:	8819      	ldrh	r1, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <I2SEx_TxISR_I2SExt+0x90>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d101      	bne.n	80061da <I2SEx_TxISR_I2SExt+0x22>
 80061d6:	4b1d      	ldr	r3, [pc, #116]	@ (800624c <I2SEx_TxISR_I2SExt+0x94>)
 80061d8:	e001      	b.n	80061de <I2SEx_TxISR_I2SExt+0x26>
 80061da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061de:	460a      	mov	r2, r1
 80061e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d121      	bne.n	800623e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a12      	ldr	r2, [pc, #72]	@ (8006248 <I2SEx_TxISR_I2SExt+0x90>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d101      	bne.n	8006208 <I2SEx_TxISR_I2SExt+0x50>
 8006204:	4b11      	ldr	r3, [pc, #68]	@ (800624c <I2SEx_TxISR_I2SExt+0x94>)
 8006206:	e001      	b.n	800620c <I2SEx_TxISR_I2SExt+0x54>
 8006208:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	490d      	ldr	r1, [pc, #52]	@ (8006248 <I2SEx_TxISR_I2SExt+0x90>)
 8006214:	428b      	cmp	r3, r1
 8006216:	d101      	bne.n	800621c <I2SEx_TxISR_I2SExt+0x64>
 8006218:	4b0c      	ldr	r3, [pc, #48]	@ (800624c <I2SEx_TxISR_I2SExt+0x94>)
 800621a:	e001      	b.n	8006220 <I2SEx_TxISR_I2SExt+0x68>
 800621c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006220:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006224:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff ff81 	bl	8006140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800623e:	bf00      	nop
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40003800 	.word	0x40003800
 800624c:	40003400 	.word	0x40003400

08006250 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68d8      	ldr	r0, [r3, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006262:	1c99      	adds	r1, r3, #2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006268:	b282      	uxth	r2, r0
 800626a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d113      	bne.n	80062ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006292:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff ff4a 	bl	8006140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a20      	ldr	r2, [pc, #128]	@ (8006344 <I2SEx_RxISR_I2SExt+0x90>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d101      	bne.n	80062ca <I2SEx_RxISR_I2SExt+0x16>
 80062c6:	4b20      	ldr	r3, [pc, #128]	@ (8006348 <I2SEx_RxISR_I2SExt+0x94>)
 80062c8:	e001      	b.n	80062ce <I2SEx_RxISR_I2SExt+0x1a>
 80062ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062ce:	68d8      	ldr	r0, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	1c99      	adds	r1, r3, #2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062da:	b282      	uxth	r2, r0
 80062dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d121      	bne.n	800633a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a12      	ldr	r2, [pc, #72]	@ (8006344 <I2SEx_RxISR_I2SExt+0x90>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d101      	bne.n	8006304 <I2SEx_RxISR_I2SExt+0x50>
 8006300:	4b11      	ldr	r3, [pc, #68]	@ (8006348 <I2SEx_RxISR_I2SExt+0x94>)
 8006302:	e001      	b.n	8006308 <I2SEx_RxISR_I2SExt+0x54>
 8006304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	490d      	ldr	r1, [pc, #52]	@ (8006344 <I2SEx_RxISR_I2SExt+0x90>)
 8006310:	428b      	cmp	r3, r1
 8006312:	d101      	bne.n	8006318 <I2SEx_RxISR_I2SExt+0x64>
 8006314:	4b0c      	ldr	r3, [pc, #48]	@ (8006348 <I2SEx_RxISR_I2SExt+0x94>)
 8006316:	e001      	b.n	800631c <I2SEx_RxISR_I2SExt+0x68>
 8006318:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800631c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006320:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d106      	bne.n	800633a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff ff03 	bl	8006140 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40003800 	.word	0x40003800
 8006348:	40003400 	.word	0x40003400

0800634c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e267      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d075      	beq.n	8006456 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800636a:	4b88      	ldr	r3, [pc, #544]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
 8006372:	2b04      	cmp	r3, #4
 8006374:	d00c      	beq.n	8006390 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006376:	4b85      	ldr	r3, [pc, #532]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800637e:	2b08      	cmp	r3, #8
 8006380:	d112      	bne.n	80063a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006382:	4b82      	ldr	r3, [pc, #520]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800638e:	d10b      	bne.n	80063a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006390:	4b7e      	ldr	r3, [pc, #504]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d05b      	beq.n	8006454 <HAL_RCC_OscConfig+0x108>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d157      	bne.n	8006454 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e242      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b0:	d106      	bne.n	80063c0 <HAL_RCC_OscConfig+0x74>
 80063b2:	4b76      	ldr	r3, [pc, #472]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a75      	ldr	r2, [pc, #468]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e01d      	b.n	80063fc <HAL_RCC_OscConfig+0xb0>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063c8:	d10c      	bne.n	80063e4 <HAL_RCC_OscConfig+0x98>
 80063ca:	4b70      	ldr	r3, [pc, #448]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a6f      	ldr	r2, [pc, #444]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4b6d      	ldr	r3, [pc, #436]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6c      	ldr	r2, [pc, #432]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	e00b      	b.n	80063fc <HAL_RCC_OscConfig+0xb0>
 80063e4:	4b69      	ldr	r3, [pc, #420]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a68      	ldr	r2, [pc, #416]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b66      	ldr	r3, [pc, #408]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a65      	ldr	r2, [pc, #404]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80063f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d013      	beq.n	800642c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006404:	f7fc fcda 	bl	8002dbc <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800640c:	f7fc fcd6 	bl	8002dbc <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	@ 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e207      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641e:	4b5b      	ldr	r3, [pc, #364]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0xc0>
 800642a:	e014      	b.n	8006456 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fc fcc6 	bl	8002dbc <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006434:	f7fc fcc2 	bl	8002dbc <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	@ 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e1f3      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006446:	4b51      	ldr	r3, [pc, #324]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0xe8>
 8006452:	e000      	b.n	8006456 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d063      	beq.n	800652a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006462:	4b4a      	ldr	r3, [pc, #296]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00b      	beq.n	8006486 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800646e:	4b47      	ldr	r3, [pc, #284]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006476:	2b08      	cmp	r3, #8
 8006478:	d11c      	bne.n	80064b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647a:	4b44      	ldr	r3, [pc, #272]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d116      	bne.n	80064b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006486:	4b41      	ldr	r3, [pc, #260]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0302 	and.w	r3, r3, #2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_RCC_OscConfig+0x152>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d001      	beq.n	800649e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e1c7      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649e:	4b3b      	ldr	r3, [pc, #236]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4937      	ldr	r1, [pc, #220]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b2:	e03a      	b.n	800652a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d020      	beq.n	80064fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064bc:	4b34      	ldr	r3, [pc, #208]	@ (8006590 <HAL_RCC_OscConfig+0x244>)
 80064be:	2201      	movs	r2, #1
 80064c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c2:	f7fc fc7b 	bl	8002dbc <HAL_GetTick>
 80064c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c8:	e008      	b.n	80064dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ca:	f7fc fc77 	bl	8002dbc <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d901      	bls.n	80064dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e1a8      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064dc:	4b2b      	ldr	r3, [pc, #172]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0302 	and.w	r3, r3, #2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0f0      	beq.n	80064ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e8:	4b28      	ldr	r3, [pc, #160]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4925      	ldr	r1, [pc, #148]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	600b      	str	r3, [r1, #0]
 80064fc:	e015      	b.n	800652a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064fe:	4b24      	ldr	r3, [pc, #144]	@ (8006590 <HAL_RCC_OscConfig+0x244>)
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fc fc5a 	bl	8002dbc <HAL_GetTick>
 8006508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650c:	f7fc fc56 	bl	8002dbc <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e187      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651e:	4b1b      	ldr	r3, [pc, #108]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d036      	beq.n	80065a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800653e:	4b15      	ldr	r3, [pc, #84]	@ (8006594 <HAL_RCC_OscConfig+0x248>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fc fc3a 	bl	8002dbc <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800654c:	f7fc fc36 	bl	8002dbc <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b02      	cmp	r3, #2
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e167      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655e:	4b0b      	ldr	r3, [pc, #44]	@ (800658c <HAL_RCC_OscConfig+0x240>)
 8006560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x200>
 800656a:	e01b      	b.n	80065a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656c:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <HAL_RCC_OscConfig+0x248>)
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006572:	f7fc fc23 	bl	8002dbc <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006578:	e00e      	b.n	8006598 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657a:	f7fc fc1f 	bl	8002dbc <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d907      	bls.n	8006598 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e150      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
 800658c:	40023800 	.word	0x40023800
 8006590:	42470000 	.word	0x42470000
 8006594:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006598:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800659a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1ea      	bne.n	800657a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f000 8097 	beq.w	80066e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065b6:	4b81      	ldr	r3, [pc, #516]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10f      	bne.n	80065e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	4b7d      	ldr	r3, [pc, #500]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	4a7c      	ldr	r2, [pc, #496]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80065cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065d2:	4b7a      	ldr	r3, [pc, #488]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065de:	2301      	movs	r3, #1
 80065e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e2:	4b77      	ldr	r3, [pc, #476]	@ (80067c0 <HAL_RCC_OscConfig+0x474>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d118      	bne.n	8006620 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ee:	4b74      	ldr	r3, [pc, #464]	@ (80067c0 <HAL_RCC_OscConfig+0x474>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a73      	ldr	r2, [pc, #460]	@ (80067c0 <HAL_RCC_OscConfig+0x474>)
 80065f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065fa:	f7fc fbdf 	bl	8002dbc <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006602:	f7fc fbdb 	bl	8002dbc <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e10c      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	4b6a      	ldr	r3, [pc, #424]	@ (80067c0 <HAL_RCC_OscConfig+0x474>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0f0      	beq.n	8006602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d106      	bne.n	8006636 <HAL_RCC_OscConfig+0x2ea>
 8006628:	4b64      	ldr	r3, [pc, #400]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662c:	4a63      	ldr	r2, [pc, #396]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6713      	str	r3, [r2, #112]	@ 0x70
 8006634:	e01c      	b.n	8006670 <HAL_RCC_OscConfig+0x324>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	2b05      	cmp	r3, #5
 800663c:	d10c      	bne.n	8006658 <HAL_RCC_OscConfig+0x30c>
 800663e:	4b5f      	ldr	r3, [pc, #380]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	4a5e      	ldr	r2, [pc, #376]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006644:	f043 0304 	orr.w	r3, r3, #4
 8006648:	6713      	str	r3, [r2, #112]	@ 0x70
 800664a:	4b5c      	ldr	r3, [pc, #368]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664e:	4a5b      	ldr	r2, [pc, #364]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006650:	f043 0301 	orr.w	r3, r3, #1
 8006654:	6713      	str	r3, [r2, #112]	@ 0x70
 8006656:	e00b      	b.n	8006670 <HAL_RCC_OscConfig+0x324>
 8006658:	4b58      	ldr	r3, [pc, #352]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665c:	4a57      	ldr	r2, [pc, #348]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	6713      	str	r3, [r2, #112]	@ 0x70
 8006664:	4b55      	ldr	r3, [pc, #340]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006668:	4a54      	ldr	r2, [pc, #336]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 0304 	bic.w	r3, r3, #4
 800666e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d015      	beq.n	80066a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006678:	f7fc fba0 	bl	8002dbc <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	e00a      	b.n	8006696 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006680:	f7fc fb9c 	bl	8002dbc <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800668e:	4293      	cmp	r3, r2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e0cb      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006696:	4b49      	ldr	r3, [pc, #292]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0ee      	beq.n	8006680 <HAL_RCC_OscConfig+0x334>
 80066a2:	e014      	b.n	80066ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a4:	f7fc fb8a 	bl	8002dbc <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066aa:	e00a      	b.n	80066c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ac:	f7fc fb86 	bl	8002dbc <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e0b5      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c2:	4b3e      	ldr	r3, [pc, #248]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1ee      	bne.n	80066ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d105      	bne.n	80066e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d4:	4b39      	ldr	r3, [pc, #228]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80066d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d8:	4a38      	ldr	r2, [pc, #224]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80066da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80a1 	beq.w	800682c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066ea:	4b34      	ldr	r3, [pc, #208]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 030c 	and.w	r3, r3, #12
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d05c      	beq.n	80067b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d141      	bne.n	8006782 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fe:	4b31      	ldr	r3, [pc, #196]	@ (80067c4 <HAL_RCC_OscConfig+0x478>)
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006704:	f7fc fb5a 	bl	8002dbc <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670c:	f7fc fb56 	bl	8002dbc <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e087      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671e:	4b27      	ldr	r3, [pc, #156]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f0      	bne.n	800670c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69da      	ldr	r2, [r3, #28]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006738:	019b      	lsls	r3, r3, #6
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	085b      	lsrs	r3, r3, #1
 8006742:	3b01      	subs	r3, #1
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	061b      	lsls	r3, r3, #24
 800674e:	491b      	ldr	r1, [pc, #108]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006754:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <HAL_RCC_OscConfig+0x478>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675a:	f7fc fb2f 	bl	8002dbc <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006762:	f7fc fb2b 	bl	8002dbc <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e05c      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006774:	4b11      	ldr	r3, [pc, #68]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <HAL_RCC_OscConfig+0x416>
 8006780:	e054      	b.n	800682c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006782:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <HAL_RCC_OscConfig+0x478>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006788:	f7fc fb18 	bl	8002dbc <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006790:	f7fc fb14 	bl	8002dbc <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e045      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a2:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <HAL_RCC_OscConfig+0x470>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x444>
 80067ae:	e03d      	b.n	800682c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d107      	bne.n	80067c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e038      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
 80067bc:	40023800 	.word	0x40023800
 80067c0:	40007000 	.word	0x40007000
 80067c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006838 <HAL_RCC_OscConfig+0x4ec>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d028      	beq.n	8006828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d121      	bne.n	8006828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d11a      	bne.n	8006828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067f8:	4013      	ands	r3, r2
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006800:	4293      	cmp	r3, r2
 8006802:	d111      	bne.n	8006828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	3b01      	subs	r3, #1
 8006812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006814:	429a      	cmp	r2, r3
 8006816:	d107      	bne.n	8006828 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e000      	b.n	800682e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	40023800 	.word	0x40023800

0800683c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0cc      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006850:	4b68      	ldr	r3, [pc, #416]	@ (80069f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d90c      	bls.n	8006878 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b65      	ldr	r3, [pc, #404]	@ (80069f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006860:	683a      	ldr	r2, [r7, #0]
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006866:	4b63      	ldr	r3, [pc, #396]	@ (80069f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d001      	beq.n	8006878 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0b8      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d020      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006890:	4b59      	ldr	r3, [pc, #356]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4a58      	ldr	r2, [pc, #352]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800689a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068a8:	4b53      	ldr	r3, [pc, #332]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	4a52      	ldr	r2, [pc, #328]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b4:	4b50      	ldr	r3, [pc, #320]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	494d      	ldr	r1, [pc, #308]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d044      	beq.n	800695c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d107      	bne.n	80068ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068da:	4b47      	ldr	r3, [pc, #284]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d119      	bne.n	800691a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e07f      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d003      	beq.n	80068fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fa:	4b3f      	ldr	r3, [pc, #252]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e06f      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800690a:	4b3b      	ldr	r3, [pc, #236]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e067      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800691a:	4b37      	ldr	r3, [pc, #220]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f023 0203 	bic.w	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4934      	ldr	r1, [pc, #208]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	4313      	orrs	r3, r2
 800692a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800692c:	f7fc fa46 	bl	8002dbc <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006932:	e00a      	b.n	800694a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7fc fa42 	bl	8002dbc <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e04f      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	4b2b      	ldr	r3, [pc, #172]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 020c 	and.w	r2, r3, #12
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d1eb      	bne.n	8006934 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800695c:	4b25      	ldr	r3, [pc, #148]	@ (80069f4 <HAL_RCC_ClockConfig+0x1b8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d20c      	bcs.n	8006984 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b22      	ldr	r3, [pc, #136]	@ (80069f4 <HAL_RCC_ClockConfig+0x1b8>)
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006972:	4b20      	ldr	r3, [pc, #128]	@ (80069f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d001      	beq.n	8006984 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e032      	b.n	80069ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d008      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006990:	4b19      	ldr	r3, [pc, #100]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	4916      	ldr	r1, [pc, #88]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ae:	4b12      	ldr	r3, [pc, #72]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	490e      	ldr	r1, [pc, #56]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069c2:	f000 f821 	bl	8006a08 <HAL_RCC_GetSysClockFreq>
 80069c6:	4602      	mov	r2, r0
 80069c8:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	490a      	ldr	r1, [pc, #40]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	5ccb      	ldrb	r3, [r1, r3]
 80069d6:	fa22 f303 	lsr.w	r3, r2, r3
 80069da:	4a09      	ldr	r2, [pc, #36]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80069dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069de:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <HAL_RCC_ClockConfig+0x1c8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fb ffca 	bl	800297c <HAL_InitTick>

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	40023c00 	.word	0x40023c00
 80069f8:	40023800 	.word	0x40023800
 80069fc:	08012994 	.word	0x08012994
 8006a00:	2000025c 	.word	0x2000025c
 8006a04:	20000260 	.word	0x20000260

08006a08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a0c:	b094      	sub	sp, #80	@ 0x50
 8006a0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a20:	4b79      	ldr	r3, [pc, #484]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d00d      	beq.n	8006a48 <HAL_RCC_GetSysClockFreq+0x40>
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	f200 80e1 	bhi.w	8006bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <HAL_RCC_GetSysClockFreq+0x34>
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d003      	beq.n	8006a42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a3a:	e0db      	b.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a3c:	4b73      	ldr	r3, [pc, #460]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8006a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a40:	e0db      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a42:	4b73      	ldr	r3, [pc, #460]	@ (8006c10 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a46:	e0d8      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a48:	4b6f      	ldr	r3, [pc, #444]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a52:	4b6d      	ldr	r3, [pc, #436]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d063      	beq.n	8006b26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	099b      	lsrs	r3, r3, #6
 8006a64:	2200      	movs	r2, #0
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a72:	2300      	movs	r3, #0
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	462b      	mov	r3, r5
 8006a7e:	f04f 0000 	mov.w	r0, #0
 8006a82:	f04f 0100 	mov.w	r1, #0
 8006a86:	0159      	lsls	r1, r3, #5
 8006a88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a8c:	0150      	lsls	r0, r2, #5
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4621      	mov	r1, r4
 8006a94:	1a51      	subs	r1, r2, r1
 8006a96:	6139      	str	r1, [r7, #16]
 8006a98:	4629      	mov	r1, r5
 8006a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	f04f 0300 	mov.w	r3, #0
 8006aa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006aac:	4659      	mov	r1, fp
 8006aae:	018b      	lsls	r3, r1, #6
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ab6:	4651      	mov	r1, sl
 8006ab8:	018a      	lsls	r2, r1, #6
 8006aba:	4651      	mov	r1, sl
 8006abc:	ebb2 0801 	subs.w	r8, r2, r1
 8006ac0:	4659      	mov	r1, fp
 8006ac2:	eb63 0901 	sbc.w	r9, r3, r1
 8006ac6:	f04f 0200 	mov.w	r2, #0
 8006aca:	f04f 0300 	mov.w	r3, #0
 8006ace:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ad2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ad6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ada:	4690      	mov	r8, r2
 8006adc:	4699      	mov	r9, r3
 8006ade:	4623      	mov	r3, r4
 8006ae0:	eb18 0303 	adds.w	r3, r8, r3
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	eb49 0303 	adc.w	r3, r9, r3
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006afa:	4629      	mov	r1, r5
 8006afc:	024b      	lsls	r3, r1, #9
 8006afe:	4621      	mov	r1, r4
 8006b00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b04:	4621      	mov	r1, r4
 8006b06:	024a      	lsls	r2, r1, #9
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b0e:	2200      	movs	r2, #0
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b18:	f7f9 fbb2 	bl	8000280 <__aeabi_uldivmod>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4613      	mov	r3, r2
 8006b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b24:	e058      	b.n	8006bd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b26:	4b38      	ldr	r3, [pc, #224]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	099b      	lsrs	r3, r3, #6
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	4611      	mov	r1, r2
 8006b32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b36:	623b      	str	r3, [r7, #32]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b40:	4642      	mov	r2, r8
 8006b42:	464b      	mov	r3, r9
 8006b44:	f04f 0000 	mov.w	r0, #0
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	0159      	lsls	r1, r3, #5
 8006b4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b52:	0150      	lsls	r0, r2, #5
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4641      	mov	r1, r8
 8006b5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b5e:	4649      	mov	r1, r9
 8006b60:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b78:	ebb2 040a 	subs.w	r4, r2, sl
 8006b7c:	eb63 050b 	sbc.w	r5, r3, fp
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	00eb      	lsls	r3, r5, #3
 8006b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b8e:	00e2      	lsls	r2, r4, #3
 8006b90:	4614      	mov	r4, r2
 8006b92:	461d      	mov	r5, r3
 8006b94:	4643      	mov	r3, r8
 8006b96:	18e3      	adds	r3, r4, r3
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	eb45 0303 	adc.w	r3, r5, r3
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	f04f 0200 	mov.w	r2, #0
 8006ba6:	f04f 0300 	mov.w	r3, #0
 8006baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bae:	4629      	mov	r1, r5
 8006bb0:	028b      	lsls	r3, r1, #10
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bb8:	4621      	mov	r1, r4
 8006bba:	028a      	lsls	r2, r1, #10
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	61fa      	str	r2, [r7, #28]
 8006bc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bcc:	f7f9 fb58 	bl	8000280 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	3301      	adds	r3, #1
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bf2:	e002      	b.n	8006bfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bf4:	4b05      	ldr	r3, [pc, #20]	@ (8006c0c <HAL_RCC_GetSysClockFreq+0x204>)
 8006bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3750      	adds	r7, #80	@ 0x50
 8006c00:	46bd      	mov	sp, r7
 8006c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c06:	bf00      	nop
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	00f42400 	.word	0x00f42400
 8006c10:	007a1200 	.word	0x007a1200

08006c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c18:	4b03      	ldr	r3, [pc, #12]	@ (8006c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	2000025c 	.word	0x2000025c

08006c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c30:	f7ff fff0 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	0a9b      	lsrs	r3, r3, #10
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4903      	ldr	r1, [pc, #12]	@ (8006c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	080129a4 	.word	0x080129a4

08006c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c58:	f7ff ffdc 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	4b05      	ldr	r3, [pc, #20]	@ (8006c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	0b5b      	lsrs	r3, r3, #13
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	4903      	ldr	r1, [pc, #12]	@ (8006c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c6a:	5ccb      	ldrb	r3, [r1, r3]
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40023800 	.word	0x40023800
 8006c78:	080129a4 	.word	0x080129a4

08006c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	220f      	movs	r2, #15
 8006c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c8c:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0203 	and.w	r2, r3, #3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c98:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006cb0:	4b09      	ldr	r3, [pc, #36]	@ (8006cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	08db      	lsrs	r3, r3, #3
 8006cb6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cbe:	4b07      	ldr	r3, [pc, #28]	@ (8006cdc <HAL_RCC_GetClockConfig+0x60>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0207 	and.w	r2, r3, #7
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	601a      	str	r2, [r3, #0]
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40023c00 	.word	0x40023c00

08006ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d035      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d08:	4b62      	ldr	r3, [pc, #392]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0e:	f7fc f855 	bl	8002dbc <HAL_GetTick>
 8006d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d14:	e008      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d16:	f7fc f851 	bl	8002dbc <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e0b0      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d28:	4b5b      	ldr	r3, [pc, #364]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f0      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	019a      	lsls	r2, r3, #6
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	071b      	lsls	r3, r3, #28
 8006d40:	4955      	ldr	r1, [pc, #340]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d48:	4b52      	ldr	r3, [pc, #328]	@ (8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d4e:	f7fc f835 	bl	8002dbc <HAL_GetTick>
 8006d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d54:	e008      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d56:	f7fc f831 	bl	8002dbc <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e090      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d68:	4b4b      	ldr	r3, [pc, #300]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8083 	beq.w	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	4b44      	ldr	r3, [pc, #272]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	4a43      	ldr	r2, [pc, #268]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d92:	4b41      	ldr	r3, [pc, #260]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a3e      	ldr	r2, [pc, #248]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006daa:	f7fc f807 	bl	8002dbc <HAL_GetTick>
 8006dae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db2:	f7fc f803 	bl	8002dbc <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e062      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dc4:	4b35      	ldr	r3, [pc, #212]	@ (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d0f0      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006dd0:	4b31      	ldr	r3, [pc, #196]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dd8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d02f      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d028      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dee:	4b2a      	ldr	r3, [pc, #168]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006df8:	4b29      	ldr	r3, [pc, #164]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dfe:	4b28      	ldr	r3, [pc, #160]	@ (8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e04:	4a24      	ldr	r2, [pc, #144]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e0a:	4b23      	ldr	r3, [pc, #140]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d114      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e16:	f7fb ffd1 	bl	8002dbc <HAL_GetTick>
 8006e1a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1c:	e00a      	b.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e1e:	f7fb ffcd 	bl	8002dbc <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e02a      	b.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e34:	4b18      	ldr	r3, [pc, #96]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0ee      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e4c:	d10d      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e62:	490d      	ldr	r1, [pc, #52]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	608b      	str	r3, [r1, #8]
 8006e68:	e005      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e74:	6093      	str	r3, [r2, #8]
 8006e76:	4b08      	ldr	r3, [pc, #32]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e82:	4905      	ldr	r1, [pc, #20]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	42470068 	.word	0x42470068
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	40007000 	.word	0x40007000
 8006ea0:	42470e40 	.word	0x42470e40

08006ea4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d13f      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ec2:	4b24      	ldr	r3, [pc, #144]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eca:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d006      	beq.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ed8:	d12f      	bne.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006eda:	4b1f      	ldr	r3, [pc, #124]	@ (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006edc:	617b      	str	r3, [r7, #20]
          break;
 8006ede:	e02f      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eec:	d108      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006eee:	4b19      	ldr	r3, [pc, #100]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ef6:	4a19      	ldr	r2, [pc, #100]	@ (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	e007      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006f00:	4b14      	ldr	r3, [pc, #80]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f08:	4a15      	ldr	r2, [pc, #84]	@ (8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006f10:	4b10      	ldr	r3, [pc, #64]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f16:	099b      	lsrs	r3, r3, #6
 8006f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006f24:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f2a:	0f1b      	lsrs	r3, r3, #28
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f36:	617b      	str	r3, [r7, #20]
          break;
 8006f38:	e002      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
          break;
 8006f3e:	bf00      	nop
        }
      }
      break;
 8006f40:	e000      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006f42:	bf00      	nop
    }
  }
  return frequency;
 8006f44:	697b      	ldr	r3, [r7, #20]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40023800 	.word	0x40023800
 8006f58:	00bb8000 	.word	0x00bb8000
 8006f5c:	007a1200 	.word	0x007a1200
 8006f60:	00f42400 	.word	0x00f42400

08006f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e07b      	b.n	800706e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d108      	bne.n	8006f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f86:	d009      	beq.n	8006f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	61da      	str	r2, [r3, #28]
 8006f8e:	e005      	b.n	8006f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d106      	bne.n	8006fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fb fc0c 	bl	80027d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fe4:	431a      	orrs	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007020:	ea42 0103 	orr.w	r1, r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007028:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	f003 0104 	and.w	r1, r3, #4
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	f003 0210 	and.w	r2, r3, #16
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800705c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e041      	b.n	800710c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d106      	bne.n	80070a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f839 	bl	8007114 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f000 f9bf 	bl	8007438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b01      	cmp	r3, #1
 800713a:	d001      	beq.n	8007140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e04e      	b.n	80071de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2202      	movs	r2, #2
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a23      	ldr	r2, [pc, #140]	@ (80071ec <HAL_TIM_Base_Start_IT+0xc4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d022      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800716a:	d01d      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1f      	ldr	r2, [pc, #124]	@ (80071f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d018      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1e      	ldr	r2, [pc, #120]	@ (80071f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1c      	ldr	r2, [pc, #112]	@ (80071f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00e      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a1b      	ldr	r2, [pc, #108]	@ (80071fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d009      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a19      	ldr	r2, [pc, #100]	@ (8007200 <HAL_TIM_Base_Start_IT+0xd8>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x80>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a18      	ldr	r2, [pc, #96]	@ (8007204 <HAL_TIM_Base_Start_IT+0xdc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d111      	bne.n	80071cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b06      	cmp	r3, #6
 80071b8:	d010      	beq.n	80071dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0201 	orr.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ca:	e007      	b.n	80071dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40010400 	.word	0x40010400
 8007200:	40014000 	.word	0x40014000
 8007204:	40001800 	.word	0x40001800

08007208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d020      	beq.n	800726c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01b      	beq.n	800726c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f06f 0202 	mvn.w	r2, #2
 800723c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f8d2 	bl	80073fc <HAL_TIM_IC_CaptureCallback>
 8007258:	e005      	b.n	8007266 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8c4 	bl	80073e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8d5 	bl	8007410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f003 0304 	and.w	r3, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	d020      	beq.n	80072b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01b      	beq.n	80072b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0204 	mvn.w	r2, #4
 8007288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8ac 	bl	80073fc <HAL_TIM_IC_CaptureCallback>
 80072a4:	e005      	b.n	80072b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f89e 	bl	80073e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8af 	bl	8007410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d020      	beq.n	8007304 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f003 0308 	and.w	r3, r3, #8
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01b      	beq.n	8007304 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f06f 0208 	mvn.w	r2, #8
 80072d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2204      	movs	r2, #4
 80072da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f886 	bl	80073fc <HAL_TIM_IC_CaptureCallback>
 80072f0:	e005      	b.n	80072fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f878 	bl	80073e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f889 	bl	8007410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	d020      	beq.n	8007350 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f003 0310 	and.w	r3, r3, #16
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01b      	beq.n	8007350 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0210 	mvn.w	r2, #16
 8007320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2208      	movs	r2, #8
 8007326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007332:	2b00      	cmp	r3, #0
 8007334:	d003      	beq.n	800733e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f860 	bl	80073fc <HAL_TIM_IC_CaptureCallback>
 800733c:	e005      	b.n	800734a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f852 	bl	80073e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f863 	bl	8007410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00c      	beq.n	8007374 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d007      	beq.n	8007374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0201 	mvn.w	r2, #1
 800736c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fb f924 	bl	80025bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00c      	beq.n	8007398 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007384:	2b00      	cmp	r3, #0
 8007386:	d007      	beq.n	8007398 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f900 	bl	8007598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d007      	beq.n	80073bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f834 	bl	8007424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00c      	beq.n	80073e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f06f 0220 	mvn.w	r2, #32
 80073d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f8d2 	bl	8007584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a43      	ldr	r2, [pc, #268]	@ (8007558 <TIM_Base_SetConfig+0x120>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d013      	beq.n	8007478 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007456:	d00f      	beq.n	8007478 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a40      	ldr	r2, [pc, #256]	@ (800755c <TIM_Base_SetConfig+0x124>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d00b      	beq.n	8007478 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3f      	ldr	r2, [pc, #252]	@ (8007560 <TIM_Base_SetConfig+0x128>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d007      	beq.n	8007478 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a3e      	ldr	r2, [pc, #248]	@ (8007564 <TIM_Base_SetConfig+0x12c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d003      	beq.n	8007478 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a3d      	ldr	r2, [pc, #244]	@ (8007568 <TIM_Base_SetConfig+0x130>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d108      	bne.n	800748a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a32      	ldr	r2, [pc, #200]	@ (8007558 <TIM_Base_SetConfig+0x120>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d02b      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007498:	d027      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2f      	ldr	r2, [pc, #188]	@ (800755c <TIM_Base_SetConfig+0x124>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d023      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007560 <TIM_Base_SetConfig+0x128>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d01f      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007564 <TIM_Base_SetConfig+0x12c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01b      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007568 <TIM_Base_SetConfig+0x130>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d017      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2b      	ldr	r2, [pc, #172]	@ (800756c <TIM_Base_SetConfig+0x134>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d013      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007570 <TIM_Base_SetConfig+0x138>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00f      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a29      	ldr	r2, [pc, #164]	@ (8007574 <TIM_Base_SetConfig+0x13c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00b      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a28      	ldr	r2, [pc, #160]	@ (8007578 <TIM_Base_SetConfig+0x140>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d007      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a27      	ldr	r2, [pc, #156]	@ (800757c <TIM_Base_SetConfig+0x144>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d003      	beq.n	80074ea <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a26      	ldr	r2, [pc, #152]	@ (8007580 <TIM_Base_SetConfig+0x148>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d108      	bne.n	80074fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	695b      	ldr	r3, [r3, #20]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a0e      	ldr	r2, [pc, #56]	@ (8007558 <TIM_Base_SetConfig+0x120>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d003      	beq.n	800752a <TIM_Base_SetConfig+0xf2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a10      	ldr	r2, [pc, #64]	@ (8007568 <TIM_Base_SetConfig+0x130>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d103      	bne.n	8007532 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f043 0204 	orr.w	r2, r3, #4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	601a      	str	r2, [r3, #0]
}
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	40010000 	.word	0x40010000
 800755c:	40000400 	.word	0x40000400
 8007560:	40000800 	.word	0x40000800
 8007564:	40000c00 	.word	0x40000c00
 8007568:	40010400 	.word	0x40010400
 800756c:	40014000 	.word	0x40014000
 8007570:	40014400 	.word	0x40014400
 8007574:	40014800 	.word	0x40014800
 8007578:	40001800 	.word	0x40001800
 800757c:	40001c00 	.word	0x40001c00
 8007580:	40002000 	.word	0x40002000

08007584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e042      	b.n	8007644 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fb f946 	bl	8002864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2224      	movs	r2, #36	@ 0x24
 80075dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fdd3 	bl	800819c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	691a      	ldr	r2, [r3, #16]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b20      	cmp	r3, #32
 800766a:	d175      	bne.n	8007758 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <HAL_UART_Transmit+0x2c>
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e06e      	b.n	800775a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2221      	movs	r2, #33	@ 0x21
 8007686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800768a:	f7fb fb97 	bl	8002dbc <HAL_GetTick>
 800768e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	88fa      	ldrh	r2, [r7, #6]
 8007694:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	88fa      	ldrh	r2, [r7, #6]
 800769a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076a4:	d108      	bne.n	80076b8 <HAL_UART_Transmit+0x6c>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d104      	bne.n	80076b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61bb      	str	r3, [r7, #24]
 80076b6:	e003      	b.n	80076c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80076c0:	e02e      	b.n	8007720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2200      	movs	r2, #0
 80076ca:	2180      	movs	r1, #128	@ 0x80
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fb37 	bl	8007d40 <UART_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e03a      	b.n	800775a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	3302      	adds	r3, #2
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	e007      	b.n	8007712 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	781a      	ldrb	r2, [r3, #0]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	3301      	adds	r3, #1
 8007710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1cb      	bne.n	80076c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2200      	movs	r2, #0
 8007732:	2140      	movs	r1, #64	@ 0x40
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fb03 	bl	8007d40 <UART_WaitOnFlagUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e006      	b.n	800775a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	e000      	b.n	800775a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007758:	2302      	movs	r3, #2
  }
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	4613      	mov	r3, r2
 800776e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b20      	cmp	r3, #32
 800777a:	d112      	bne.n	80077a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_UART_Receive_IT+0x26>
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e00b      	b.n	80077a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007792:	88fb      	ldrh	r3, [r7, #6]
 8007794:	461a      	mov	r2, r3
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f000 fb2a 	bl	8007df2 <UART_Start_Receive_IT>
 800779e:	4603      	mov	r3, r0
 80077a0:	e000      	b.n	80077a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b0ba      	sub	sp, #232	@ 0xe8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077d8:	2300      	movs	r3, #0
 80077da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f003 030f 	and.w	r3, r3, #15
 80077e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f6:	f003 0320 	and.w	r3, r3, #32
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <HAL_UART_IRQHandler+0x66>
 80077fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fc07 	bl	800801e <UART_Receive_IT>
      return;
 8007810:	e273      	b.n	8007cfa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80de 	beq.w	80079d8 <HAL_UART_IRQHandler+0x22c>
 800781c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d106      	bne.n	8007836 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800782c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 80d1 	beq.w	80079d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00b      	beq.n	800785a <HAL_UART_IRQHandler+0xae>
 8007842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007852:	f043 0201 	orr.w	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800785a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <HAL_UART_IRQHandler+0xd2>
 8007866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	f043 0202 	orr.w	r2, r3, #2
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <HAL_UART_IRQHandler+0xf6>
 800788a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d005      	beq.n	80078a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789a:	f043 0204 	orr.w	r2, r3, #4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d011      	beq.n	80078d2 <HAL_UART_IRQHandler+0x126>
 80078ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ca:	f043 0208 	orr.w	r2, r3, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 820a 	beq.w	8007cf0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d008      	beq.n	80078fa <HAL_UART_IRQHandler+0x14e>
 80078e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ec:	f003 0320 	and.w	r3, r3, #32
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fb92 	bl	800801e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007904:	2b40      	cmp	r3, #64	@ 0x40
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d103      	bne.n	8007926 <HAL_UART_IRQHandler+0x17a>
 800791e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007922:	2b00      	cmp	r3, #0
 8007924:	d04f      	beq.n	80079c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa9d 	bl	8007e66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007936:	2b40      	cmp	r3, #64	@ 0x40
 8007938:	d141      	bne.n	80079be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3314      	adds	r3, #20
 8007940:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3314      	adds	r3, #20
 8007962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007966:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800796a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800797e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1d9      	bne.n	800793a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d013      	beq.n	80079b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007992:	4a8a      	ldr	r2, [pc, #552]	@ (8007bbc <HAL_UART_IRQHandler+0x410>)
 8007994:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	4618      	mov	r0, r3
 800799c:	f7fb fb90 	bl	80030c0 <HAL_DMA_Abort_IT>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80079b0:	4610      	mov	r0, r2
 80079b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079b4:	e00e      	b.n	80079d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f9ac 	bl	8007d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079bc:	e00a      	b.n	80079d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9a8 	bl	8007d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	e006      	b.n	80079d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f9a4 	bl	8007d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80079d2:	e18d      	b.n	8007cf0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	bf00      	nop
    return;
 80079d6:	e18b      	b.n	8007cf0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f040 8167 	bne.w	8007cb0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8160 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80079f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f4:	f003 0310 	and.w	r3, r3, #16
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8159 	beq.w	8007cb0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	60bb      	str	r3, [r7, #8]
 8007a12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1e:	2b40      	cmp	r3, #64	@ 0x40
 8007a20:	f040 80ce 	bne.w	8007bc0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 80a9 	beq.w	8007b8c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a42:	429a      	cmp	r2, r3
 8007a44:	f080 80a2 	bcs.w	8007b8c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a4e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a5a:	f000 8088 	beq.w	8007b6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	330c      	adds	r3, #12
 8007a86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1d9      	bne.n	8007a5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007aba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007ace:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007ad2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e1      	bne.n	8007aaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3314      	adds	r3, #20
 8007aec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3314      	adds	r3, #20
 8007b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e3      	bne.n	8007ae6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	330c      	adds	r3, #12
 8007b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	330c      	adds	r3, #12
 8007b4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b52:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e3      	bne.n	8007b2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fb fa39 	bl	8002fe0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2202      	movs	r2, #2
 8007b72:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f8cf 	bl	8007d28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b8a:	e0b3      	b.n	8007cf4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b94:	429a      	cmp	r2, r3
 8007b96:	f040 80ad 	bne.w	8007cf4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ba4:	f040 80a6 	bne.w	8007cf4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8b7 	bl	8007d28 <HAL_UARTEx_RxEventCallback>
      return;
 8007bba:	e09b      	b.n	8007cf4 <HAL_UART_IRQHandler+0x548>
 8007bbc:	08007f2d 	.word	0x08007f2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 808e 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8089 	beq.w	8007cf8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	330c      	adds	r3, #12
 8007c06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e3      	bne.n	8007be6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3314      	adds	r3, #20
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c42:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e3      	bne.n	8007c1e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f023 0310 	bic.w	r3, r3, #16
 8007c7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	330c      	adds	r3, #12
 8007c84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c88:	61fa      	str	r2, [r7, #28]
 8007c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	617b      	str	r3, [r7, #20]
   return(result);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e3      	bne.n	8007c64 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f83d 	bl	8007d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cae:	e023      	b.n	8007cf8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x524>
 8007cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f940 	bl	8007f4e <UART_Transmit_IT>
    return;
 8007cce:	e014      	b.n	8007cfa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00e      	beq.n	8007cfa <HAL_UART_IRQHandler+0x54e>
 8007cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f980 	bl	8007fee <UART_EndTransmit_IT>
    return;
 8007cee:	e004      	b.n	8007cfa <HAL_UART_IRQHandler+0x54e>
    return;
 8007cf0:	bf00      	nop
 8007cf2:	e002      	b.n	8007cfa <HAL_UART_IRQHandler+0x54e>
      return;
 8007cf4:	bf00      	nop
 8007cf6:	e000      	b.n	8007cfa <HAL_UART_IRQHandler+0x54e>
      return;
 8007cf8:	bf00      	nop
  }
}
 8007cfa:	37e8      	adds	r7, #232	@ 0xe8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d50:	e03b      	b.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d58:	d037      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d5a:	f7fb f82f 	bl	8002dbc <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	6a3a      	ldr	r2, [r7, #32]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d302      	bcc.n	8007d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d101      	bne.n	8007d74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e03a      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	f003 0304 	and.w	r3, r3, #4
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d023      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b80      	cmp	r3, #128	@ 0x80
 8007d86:	d020      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b40      	cmp	r3, #64	@ 0x40
 8007d8c:	d01d      	beq.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d116      	bne.n	8007dca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f000 f857 	bl	8007e66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2208      	movs	r2, #8
 8007dbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e00f      	b.n	8007dea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	bf0c      	ite	eq
 8007dda:	2301      	moveq	r3, #1
 8007ddc:	2300      	movne	r3, #0
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	461a      	mov	r2, r3
 8007de2:	79fb      	ldrb	r3, [r7, #7]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d0b4      	beq.n	8007d52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	88fa      	ldrh	r2, [r7, #6]
 8007e0a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2222      	movs	r2, #34	@ 0x22
 8007e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e36:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695a      	ldr	r2, [r3, #20]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0220 	orr.w	r2, r2, #32
 8007e56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b095      	sub	sp, #84	@ 0x54
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	330c      	adds	r3, #12
 8007e74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ec8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e5      	bne.n	8007ea2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d119      	bne.n	8007f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f023 0310 	bic.w	r3, r3, #16
 8007ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007efe:	61ba      	str	r2, [r7, #24]
 8007f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6979      	ldr	r1, [r7, #20]
 8007f04:	69ba      	ldr	r2, [r7, #24]
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e5      	bne.n	8007ede <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007f20:	bf00      	nop
 8007f22:	3754      	adds	r7, #84	@ 0x54
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f7ff fee7 	bl	8007d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f46:	bf00      	nop
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b21      	cmp	r3, #33	@ 0x21
 8007f60:	d13e      	bne.n	8007fe0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f6a:	d114      	bne.n	8007f96 <UART_Transmit_IT+0x48>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d110      	bne.n	8007f96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a1b      	ldr	r3, [r3, #32]
 8007f78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	1c9a      	adds	r2, r3, #2
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	621a      	str	r2, [r3, #32]
 8007f94:	e008      	b.n	8007fa8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	1c59      	adds	r1, r3, #1
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6211      	str	r1, [r2, #32]
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10f      	bne.n	8007fdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e000      	b.n	8007fe2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fe0:	2302      	movs	r3, #2
  }
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b082      	sub	sp, #8
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008004:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2220      	movs	r2, #32
 800800a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff fe76 	bl	8007d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b08c      	sub	sp, #48	@ 0x30
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008026:	2300      	movs	r3, #0
 8008028:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b22      	cmp	r3, #34	@ 0x22
 8008038:	f040 80aa 	bne.w	8008190 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008044:	d115      	bne.n	8008072 <UART_Receive_IT+0x54>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d111      	bne.n	8008072 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008052:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008060:	b29a      	uxth	r2, r3
 8008062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806a:	1c9a      	adds	r2, r3, #2
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008070:	e024      	b.n	80080bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008076:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008080:	d007      	beq.n	8008092 <UART_Receive_IT+0x74>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <UART_Receive_IT+0x82>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	b2da      	uxtb	r2, r3
 800809a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e008      	b.n	80080b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4619      	mov	r1, r3
 80080ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d15d      	bne.n	800818c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0220 	bic.w	r2, r2, #32
 80080de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695a      	ldr	r2, [r3, #20]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008112:	2b01      	cmp	r3, #1
 8008114:	d135      	bne.n	8008182 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	613b      	str	r3, [r7, #16]
   return(result);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 0310 	bic.w	r3, r3, #16
 8008132:	627b      	str	r3, [r7, #36]	@ 0x24
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800813c:	623a      	str	r2, [r7, #32]
 800813e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69f9      	ldr	r1, [r7, #28]
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	61bb      	str	r3, [r7, #24]
   return(result);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0310 	and.w	r3, r3, #16
 800815a:	2b10      	cmp	r3, #16
 800815c:	d10a      	bne.n	8008174 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fdd4 	bl	8007d28 <HAL_UARTEx_RxEventCallback>
 8008180:	e002      	b.n	8008188 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fa f98a 	bl	800249c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	e002      	b.n	8008192 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3730      	adds	r7, #48	@ 0x30
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800819c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081a0:	b0c0      	sub	sp, #256	@ 0x100
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b8:	68d9      	ldr	r1, [r3, #12]
 80081ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	ea40 0301 	orr.w	r3, r0, r1
 80081c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80081c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d0:	691b      	ldr	r3, [r3, #16]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	431a      	orrs	r2, r3
 80081dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80081f4:	f021 010c 	bic.w	r1, r1, #12
 80081f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008202:	430b      	orrs	r3, r1
 8008204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008216:	6999      	ldr	r1, [r3, #24]
 8008218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	ea40 0301 	orr.w	r3, r0, r1
 8008222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b8f      	ldr	r3, [pc, #572]	@ (8008468 <UART_SetConfig+0x2cc>)
 800822c:	429a      	cmp	r2, r3
 800822e:	d005      	beq.n	800823c <UART_SetConfig+0xa0>
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b8d      	ldr	r3, [pc, #564]	@ (800846c <UART_SetConfig+0x2d0>)
 8008238:	429a      	cmp	r2, r3
 800823a:	d104      	bne.n	8008246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800823c:	f7fe fd0a 	bl	8006c54 <HAL_RCC_GetPCLK2Freq>
 8008240:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008244:	e003      	b.n	800824e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008246:	f7fe fcf1 	bl	8006c2c <HAL_RCC_GetPCLK1Freq>
 800824a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800824e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008258:	f040 810c 	bne.w	8008474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800825c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008260:	2200      	movs	r2, #0
 8008262:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008266:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800826a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800826e:	4622      	mov	r2, r4
 8008270:	462b      	mov	r3, r5
 8008272:	1891      	adds	r1, r2, r2
 8008274:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008276:	415b      	adcs	r3, r3
 8008278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800827a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800827e:	4621      	mov	r1, r4
 8008280:	eb12 0801 	adds.w	r8, r2, r1
 8008284:	4629      	mov	r1, r5
 8008286:	eb43 0901 	adc.w	r9, r3, r1
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800829a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800829e:	4690      	mov	r8, r2
 80082a0:	4699      	mov	r9, r3
 80082a2:	4623      	mov	r3, r4
 80082a4:	eb18 0303 	adds.w	r3, r8, r3
 80082a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082ac:	462b      	mov	r3, r5
 80082ae:	eb49 0303 	adc.w	r3, r9, r3
 80082b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80082b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80082c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80082c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80082ca:	460b      	mov	r3, r1
 80082cc:	18db      	adds	r3, r3, r3
 80082ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80082d0:	4613      	mov	r3, r2
 80082d2:	eb42 0303 	adc.w	r3, r2, r3
 80082d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80082d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082e0:	f7f7 ffce 	bl	8000280 <__aeabi_uldivmod>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4b61      	ldr	r3, [pc, #388]	@ (8008470 <UART_SetConfig+0x2d4>)
 80082ea:	fba3 2302 	umull	r2, r3, r3, r2
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	011c      	lsls	r4, r3, #4
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	1891      	adds	r1, r2, r2
 800830a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800830c:	415b      	adcs	r3, r3
 800830e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008314:	4641      	mov	r1, r8
 8008316:	eb12 0a01 	adds.w	sl, r2, r1
 800831a:	4649      	mov	r1, r9
 800831c:	eb43 0b01 	adc.w	fp, r3, r1
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800832c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008334:	4692      	mov	sl, r2
 8008336:	469b      	mov	fp, r3
 8008338:	4643      	mov	r3, r8
 800833a:	eb1a 0303 	adds.w	r3, sl, r3
 800833e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008342:	464b      	mov	r3, r9
 8008344:	eb4b 0303 	adc.w	r3, fp, r3
 8008348:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008358:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800835c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008360:	460b      	mov	r3, r1
 8008362:	18db      	adds	r3, r3, r3
 8008364:	643b      	str	r3, [r7, #64]	@ 0x40
 8008366:	4613      	mov	r3, r2
 8008368:	eb42 0303 	adc.w	r3, r2, r3
 800836c:	647b      	str	r3, [r7, #68]	@ 0x44
 800836e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008376:	f7f7 ff83 	bl	8000280 <__aeabi_uldivmod>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	4611      	mov	r1, r2
 8008380:	4b3b      	ldr	r3, [pc, #236]	@ (8008470 <UART_SetConfig+0x2d4>)
 8008382:	fba3 2301 	umull	r2, r3, r3, r1
 8008386:	095b      	lsrs	r3, r3, #5
 8008388:	2264      	movs	r2, #100	@ 0x64
 800838a:	fb02 f303 	mul.w	r3, r2, r3
 800838e:	1acb      	subs	r3, r1, r3
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008396:	4b36      	ldr	r3, [pc, #216]	@ (8008470 <UART_SetConfig+0x2d4>)
 8008398:	fba3 2302 	umull	r2, r3, r3, r2
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80083a4:	441c      	add	r4, r3
 80083a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083aa:	2200      	movs	r2, #0
 80083ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80083b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80083b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80083b8:	4642      	mov	r2, r8
 80083ba:	464b      	mov	r3, r9
 80083bc:	1891      	adds	r1, r2, r2
 80083be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80083c0:	415b      	adcs	r3, r3
 80083c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083c8:	4641      	mov	r1, r8
 80083ca:	1851      	adds	r1, r2, r1
 80083cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80083ce:	4649      	mov	r1, r9
 80083d0:	414b      	adcs	r3, r1
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083e0:	4659      	mov	r1, fp
 80083e2:	00cb      	lsls	r3, r1, #3
 80083e4:	4651      	mov	r1, sl
 80083e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083ea:	4651      	mov	r1, sl
 80083ec:	00ca      	lsls	r2, r1, #3
 80083ee:	4610      	mov	r0, r2
 80083f0:	4619      	mov	r1, r3
 80083f2:	4603      	mov	r3, r0
 80083f4:	4642      	mov	r2, r8
 80083f6:	189b      	adds	r3, r3, r2
 80083f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083fc:	464b      	mov	r3, r9
 80083fe:	460a      	mov	r2, r1
 8008400:	eb42 0303 	adc.w	r3, r2, r3
 8008404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008414:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800841c:	460b      	mov	r3, r1
 800841e:	18db      	adds	r3, r3, r3
 8008420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008422:	4613      	mov	r3, r2
 8008424:	eb42 0303 	adc.w	r3, r2, r3
 8008428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800842a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800842e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008432:	f7f7 ff25 	bl	8000280 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <UART_SetConfig+0x2d4>)
 800843c:	fba3 1302 	umull	r1, r3, r3, r2
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	2164      	movs	r1, #100	@ 0x64
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	3332      	adds	r3, #50	@ 0x32
 800844e:	4a08      	ldr	r2, [pc, #32]	@ (8008470 <UART_SetConfig+0x2d4>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	095b      	lsrs	r3, r3, #5
 8008456:	f003 0207 	and.w	r2, r3, #7
 800845a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4422      	add	r2, r4
 8008462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008464:	e106      	b.n	8008674 <UART_SetConfig+0x4d8>
 8008466:	bf00      	nop
 8008468:	40011000 	.word	0x40011000
 800846c:	40011400 	.word	0x40011400
 8008470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008478:	2200      	movs	r2, #0
 800847a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800847e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008486:	4642      	mov	r2, r8
 8008488:	464b      	mov	r3, r9
 800848a:	1891      	adds	r1, r2, r2
 800848c:	6239      	str	r1, [r7, #32]
 800848e:	415b      	adcs	r3, r3
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
 8008492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008496:	4641      	mov	r1, r8
 8008498:	1854      	adds	r4, r2, r1
 800849a:	4649      	mov	r1, r9
 800849c:	eb43 0501 	adc.w	r5, r3, r1
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	00eb      	lsls	r3, r5, #3
 80084aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ae:	00e2      	lsls	r2, r4, #3
 80084b0:	4614      	mov	r4, r2
 80084b2:	461d      	mov	r5, r3
 80084b4:	4643      	mov	r3, r8
 80084b6:	18e3      	adds	r3, r4, r3
 80084b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80084bc:	464b      	mov	r3, r9
 80084be:	eb45 0303 	adc.w	r3, r5, r3
 80084c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80084c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80084d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084d6:	f04f 0200 	mov.w	r2, #0
 80084da:	f04f 0300 	mov.w	r3, #0
 80084de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084e2:	4629      	mov	r1, r5
 80084e4:	008b      	lsls	r3, r1, #2
 80084e6:	4621      	mov	r1, r4
 80084e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084ec:	4621      	mov	r1, r4
 80084ee:	008a      	lsls	r2, r1, #2
 80084f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80084f4:	f7f7 fec4 	bl	8000280 <__aeabi_uldivmod>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4b60      	ldr	r3, [pc, #384]	@ (8008680 <UART_SetConfig+0x4e4>)
 80084fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008502:	095b      	lsrs	r3, r3, #5
 8008504:	011c      	lsls	r4, r3, #4
 8008506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800850a:	2200      	movs	r2, #0
 800850c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008518:	4642      	mov	r2, r8
 800851a:	464b      	mov	r3, r9
 800851c:	1891      	adds	r1, r2, r2
 800851e:	61b9      	str	r1, [r7, #24]
 8008520:	415b      	adcs	r3, r3
 8008522:	61fb      	str	r3, [r7, #28]
 8008524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008528:	4641      	mov	r1, r8
 800852a:	1851      	adds	r1, r2, r1
 800852c:	6139      	str	r1, [r7, #16]
 800852e:	4649      	mov	r1, r9
 8008530:	414b      	adcs	r3, r1
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	f04f 0200 	mov.w	r2, #0
 8008538:	f04f 0300 	mov.w	r3, #0
 800853c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008540:	4659      	mov	r1, fp
 8008542:	00cb      	lsls	r3, r1, #3
 8008544:	4651      	mov	r1, sl
 8008546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854a:	4651      	mov	r1, sl
 800854c:	00ca      	lsls	r2, r1, #3
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	4603      	mov	r3, r0
 8008554:	4642      	mov	r2, r8
 8008556:	189b      	adds	r3, r3, r2
 8008558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800855c:	464b      	mov	r3, r9
 800855e:	460a      	mov	r2, r1
 8008560:	eb42 0303 	adc.w	r3, r2, r3
 8008564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008572:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008580:	4649      	mov	r1, r9
 8008582:	008b      	lsls	r3, r1, #2
 8008584:	4641      	mov	r1, r8
 8008586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800858a:	4641      	mov	r1, r8
 800858c:	008a      	lsls	r2, r1, #2
 800858e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008592:	f7f7 fe75 	bl	8000280 <__aeabi_uldivmod>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4611      	mov	r1, r2
 800859c:	4b38      	ldr	r3, [pc, #224]	@ (8008680 <UART_SetConfig+0x4e4>)
 800859e:	fba3 2301 	umull	r2, r3, r3, r1
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	2264      	movs	r2, #100	@ 0x64
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
 80085aa:	1acb      	subs	r3, r1, r3
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	3332      	adds	r3, #50	@ 0x32
 80085b0:	4a33      	ldr	r2, [pc, #204]	@ (8008680 <UART_SetConfig+0x4e4>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085bc:	441c      	add	r4, r3
 80085be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085c2:	2200      	movs	r2, #0
 80085c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80085c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80085c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80085cc:	4642      	mov	r2, r8
 80085ce:	464b      	mov	r3, r9
 80085d0:	1891      	adds	r1, r2, r2
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	415b      	adcs	r3, r3
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085dc:	4641      	mov	r1, r8
 80085de:	1851      	adds	r1, r2, r1
 80085e0:	6039      	str	r1, [r7, #0]
 80085e2:	4649      	mov	r1, r9
 80085e4:	414b      	adcs	r3, r1
 80085e6:	607b      	str	r3, [r7, #4]
 80085e8:	f04f 0200 	mov.w	r2, #0
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085f4:	4659      	mov	r1, fp
 80085f6:	00cb      	lsls	r3, r1, #3
 80085f8:	4651      	mov	r1, sl
 80085fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085fe:	4651      	mov	r1, sl
 8008600:	00ca      	lsls	r2, r1, #3
 8008602:	4610      	mov	r0, r2
 8008604:	4619      	mov	r1, r3
 8008606:	4603      	mov	r3, r0
 8008608:	4642      	mov	r2, r8
 800860a:	189b      	adds	r3, r3, r2
 800860c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800860e:	464b      	mov	r3, r9
 8008610:	460a      	mov	r2, r1
 8008612:	eb42 0303 	adc.w	r3, r2, r3
 8008616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	663b      	str	r3, [r7, #96]	@ 0x60
 8008622:	667a      	str	r2, [r7, #100]	@ 0x64
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008630:	4649      	mov	r1, r9
 8008632:	008b      	lsls	r3, r1, #2
 8008634:	4641      	mov	r1, r8
 8008636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800863a:	4641      	mov	r1, r8
 800863c:	008a      	lsls	r2, r1, #2
 800863e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008642:	f7f7 fe1d 	bl	8000280 <__aeabi_uldivmod>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <UART_SetConfig+0x4e4>)
 800864c:	fba3 1302 	umull	r1, r3, r3, r2
 8008650:	095b      	lsrs	r3, r3, #5
 8008652:	2164      	movs	r1, #100	@ 0x64
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	3332      	adds	r3, #50	@ 0x32
 800865e:	4a08      	ldr	r2, [pc, #32]	@ (8008680 <UART_SetConfig+0x4e4>)
 8008660:	fba2 2303 	umull	r2, r3, r2, r3
 8008664:	095b      	lsrs	r3, r3, #5
 8008666:	f003 020f 	and.w	r2, r3, #15
 800866a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4422      	add	r2, r4
 8008672:	609a      	str	r2, [r3, #8]
}
 8008674:	bf00      	nop
 8008676:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800867a:	46bd      	mov	sp, r7
 800867c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008680:	51eb851f 	.word	0x51eb851f

08008684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008684:	b084      	sub	sp, #16
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	f107 001c 	add.w	r0, r7, #28
 8008692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008696:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800869a:	2b01      	cmp	r3, #1
 800869c:	d123      	bne.n	80086e6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80086b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d105      	bne.n	80086da <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9dc 	bl	8008a98 <USB_CoreReset>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	e01b      	b.n	800871e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9d0 	bl	8008a98 <USB_CoreReset>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086fc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008708:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008710:	e005      	b.n	800871e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800871e:	7fbb      	ldrb	r3, [r7, #30]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d10b      	bne.n	800873c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f043 0206 	orr.w	r2, r3, #6
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f043 0220 	orr.w	r2, r3, #32
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008748:	b004      	add	sp, #16
 800874a:	4770      	bx	lr

0800874c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f043 0201 	orr.w	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f023 0201 	bic.w	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d115      	bne.n	80087de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087be:	200a      	movs	r0, #10
 80087c0:	f7fa fb08 	bl	8002dd4 <HAL_Delay>
      ms += 10U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	330a      	adds	r3, #10
 80087c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f956 	bl	8008a7c <USB_GetMode>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d01e      	beq.n	8008814 <USB_SetCurrentMode+0x84>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80087da:	d9f0      	bls.n	80087be <USB_SetCurrentMode+0x2e>
 80087dc:	e01a      	b.n	8008814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d115      	bne.n	8008810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087f0:	200a      	movs	r0, #10
 80087f2:	f7fa faef 	bl	8002dd4 <HAL_Delay>
      ms += 10U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	330a      	adds	r3, #10
 80087fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f93d 	bl	8008a7c <USB_GetMode>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <USB_SetCurrentMode+0x84>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2bc7      	cmp	r3, #199	@ 0xc7
 800880c:	d9f0      	bls.n	80087f0 <USB_SetCurrentMode+0x60>
 800880e:	e001      	b.n	8008814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e005      	b.n	8008820 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2bc8      	cmp	r3, #200	@ 0xc8
 8008818:	d101      	bne.n	800881e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008842:	d901      	bls.n	8008848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e01b      	b.n	8008880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	daf2      	bge.n	8008836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	019b      	lsls	r3, r3, #6
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800886c:	d901      	bls.n	8008872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e006      	b.n	8008880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b20      	cmp	r3, #32
 800887c:	d0f0      	beq.n	8008860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088a4:	d901      	bls.n	80088aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e018      	b.n	80088dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	daf2      	bge.n	8008898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2210      	movs	r2, #16
 80088ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088c8:	d901      	bls.n	80088ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e006      	b.n	80088dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0310 	and.w	r3, r3, #16
 80088d6:	2b10      	cmp	r3, #16
 80088d8:	d0f0      	beq.n	80088bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b089      	sub	sp, #36	@ 0x24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4611      	mov	r1, r2
 80088f4:	461a      	mov	r2, r3
 80088f6:	460b      	mov	r3, r1
 80088f8:	71fb      	strb	r3, [r7, #7]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008906:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800890a:	2b00      	cmp	r3, #0
 800890c:	d123      	bne.n	8008956 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800890e:	88bb      	ldrh	r3, [r7, #4]
 8008910:	3303      	adds	r3, #3
 8008912:	089b      	lsrs	r3, r3, #2
 8008914:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008916:	2300      	movs	r3, #0
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	e018      	b.n	800894e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	031a      	lsls	r2, r3, #12
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4413      	add	r3, r2
 8008924:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008928:	461a      	mov	r2, r3
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	3301      	adds	r3, #1
 8008934:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3301      	adds	r3, #1
 800893a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	3301      	adds	r3, #1
 8008940:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	3301      	adds	r3, #1
 8008946:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	3301      	adds	r3, #1
 800894c:	61bb      	str	r3, [r7, #24]
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3e2      	bcc.n	800891c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3724      	adds	r7, #36	@ 0x24
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008964:	b480      	push	{r7}
 8008966:	b08b      	sub	sp, #44	@ 0x2c
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	089b      	lsrs	r3, r3, #2
 800897e:	b29b      	uxth	r3, r3
 8008980:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800898a:	2300      	movs	r3, #0
 800898c:	623b      	str	r3, [r7, #32]
 800898e:	e014      	b.n	80089ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	601a      	str	r2, [r3, #0]
    pDest++;
 800899c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899e:	3301      	adds	r3, #1
 80089a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	3301      	adds	r3, #1
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	3301      	adds	r3, #1
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80089ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b0:	3301      	adds	r3, #1
 80089b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	3301      	adds	r3, #1
 80089b8:	623b      	str	r3, [r7, #32]
 80089ba:	6a3a      	ldr	r2, [r7, #32]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d3e6      	bcc.n	8008990 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80089c2:	8bfb      	ldrh	r3, [r7, #30]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01e      	beq.n	8008a06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d2:	461a      	mov	r2, r3
 80089d4:	f107 0310 	add.w	r3, r7, #16
 80089d8:	6812      	ldr	r2, [r2, #0]
 80089da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	fa22 f303 	lsr.w	r3, r2, r3
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	701a      	strb	r2, [r3, #0]
      i++;
 80089ee:	6a3b      	ldr	r3, [r7, #32]
 80089f0:	3301      	adds	r3, #1
 80089f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	3301      	adds	r3, #1
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80089fa:	8bfb      	ldrh	r3, [r7, #30]
 80089fc:	3b01      	subs	r3, #1
 80089fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a00:	8bfb      	ldrh	r3, [r7, #30]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1ea      	bne.n	80089dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	372c      	adds	r7, #44	@ 0x2c
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	695b      	ldr	r3, [r3, #20]
 8008a20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3714      	adds	r7, #20
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b085      	sub	sp, #20
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	015a      	lsls	r2, r3, #5
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4413      	add	r3, r2
 8008a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	015a      	lsls	r2, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	4413      	add	r3, r2
 8008a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f003 0301 	and.w	r3, r3, #1
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ab0:	d901      	bls.n	8008ab6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e022      	b.n	8008afc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	daf2      	bge.n	8008aa4 <USB_CoreReset+0xc>

  count = 10U;
 8008abe:	230a      	movs	r3, #10
 8008ac0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008ac2:	e002      	b.n	8008aca <USB_CoreReset+0x32>
  {
    count--;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1f9      	bne.n	8008ac4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f043 0201 	orr.w	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ae8:	d901      	bls.n	8008aee <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e006      	b.n	8008afc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d0f0      	beq.n	8008adc <USB_CoreReset+0x44>

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b08:	b084      	sub	sp, #16
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b086      	sub	sp, #24
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d119      	bne.n	8008b92 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d10a      	bne.n	8008b7c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b74:	f043 0304 	orr.w	r3, r3, #4
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	e014      	b.n	8008ba6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b8a:	f023 0304 	bic.w	r3, r3, #4
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	e009      	b.n	8008ba6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008ba0:	f023 0304 	bic.w	r3, r3, #4
 8008ba4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ba6:	2110      	movs	r1, #16
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff fe3d 	bl	8008828 <USB_FlushTxFifo>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fe67 	bl	800888c <USB_FlushRxFifo>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	e015      	b.n	8008bfa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8008be0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	015a      	lsls	r2, r3, #5
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4413      	add	r3, r2
 8008bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bee:	461a      	mov	r2, r3
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008bfe:	461a      	mov	r2, r3
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d3e3      	bcc.n	8008bce <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c12:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a18      	ldr	r2, [pc, #96]	@ (8008c78 <USB_HostInit+0x170>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d10b      	bne.n	8008c34 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c22:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a15      	ldr	r2, [pc, #84]	@ (8008c7c <USB_HostInit+0x174>)
 8008c28:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a14      	ldr	r2, [pc, #80]	@ (8008c80 <USB_HostInit+0x178>)
 8008c2e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008c32:	e009      	b.n	8008c48 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2280      	movs	r2, #128	@ 0x80
 8008c38:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a11      	ldr	r2, [pc, #68]	@ (8008c84 <USB_HostInit+0x17c>)
 8008c3e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a11      	ldr	r2, [pc, #68]	@ (8008c88 <USB_HostInit+0x180>)
 8008c44:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d105      	bne.n	8008c5c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	f043 0210 	orr.w	r2, r3, #16
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699a      	ldr	r2, [r3, #24]
 8008c60:	4b0a      	ldr	r3, [pc, #40]	@ (8008c8c <USB_HostInit+0x184>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c74:	b004      	add	sp, #16
 8008c76:	4770      	bx	lr
 8008c78:	40040000 	.word	0x40040000
 8008c7c:	01000200 	.word	0x01000200
 8008c80:	00e00300 	.word	0x00e00300
 8008c84:	00600080 	.word	0x00600080
 8008c88:	004000e0 	.word	0x004000e0
 8008c8c:	a3200008 	.word	0xa3200008

08008c90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008cae:	f023 0303 	bic.w	r3, r3, #3
 8008cb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	f003 0303 	and.w	r3, r3, #3
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d107      	bne.n	8008ce2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008cde:	6053      	str	r3, [r2, #4]
 8008ce0:	e00c      	b.n	8008cfc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d107      	bne.n	8008cf8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008cf4:	6053      	str	r3, [r2, #4]
 8008cf6:	e001      	b.n	8008cfc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e000      	b.n	8008cfe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d2a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d38:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d3a:	2064      	movs	r0, #100	@ 0x64
 8008d3c:	f7fa f84a 	bl	8002dd4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d4e:	200a      	movs	r0, #10
 8008d50:	f7fa f840 	bl	8002dd4 <HAL_Delay>

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b085      	sub	sp, #20
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d82:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d109      	bne.n	8008da2 <USB_DriveVbus+0x44>
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d106      	bne.n	8008da2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008da0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dac:	d109      	bne.n	8008dc2 <USB_DriveVbus+0x64>
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d106      	bne.n	8008dc2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dc0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	0c5b      	lsrs	r3, r3, #17
 8008dee:	f003 0303 	and.w	r3, r3, #3
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b085      	sub	sp, #20
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	b29b      	uxth	r3, r3
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4603      	mov	r3, r0
 8008e30:	70fb      	strb	r3, [r7, #3]
 8008e32:	460b      	mov	r3, r1
 8008e34:	70bb      	strb	r3, [r7, #2]
 8008e36:	4613      	mov	r3, r2
 8008e38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008e42:	78fb      	ldrb	r3, [r7, #3]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f04f 33ff 	mov.w	r3, #4294967295
 8008e54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d87c      	bhi.n	8008f58 <USB_HC_Init+0x138>
 8008e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e64 <USB_HC_Init+0x44>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e75 	.word	0x08008e75
 8008e68:	08008f1b 	.word	0x08008f1b
 8008e6c:	08008e75 	.word	0x08008e75
 8008e70:	08008edd 	.word	0x08008edd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e80:	461a      	mov	r2, r3
 8008e82:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008e86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da10      	bge.n	8008eb2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	0151      	lsls	r1, r2, #5
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	440a      	add	r2, r1
 8008ea6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008eb0:	e055      	b.n	8008f5e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a6f      	ldr	r2, [pc, #444]	@ (8009074 <USB_HC_Init+0x254>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d151      	bne.n	8008f5e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	78fa      	ldrb	r2, [r7, #3]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ed4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ed8:	60d3      	str	r3, [r2, #12]
      break;
 8008eda:	e040      	b.n	8008f5e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee8:	461a      	mov	r2, r3
 8008eea:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008eee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ef0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	da34      	bge.n	8008f62 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ef8:	78fb      	ldrb	r3, [r7, #3]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	78fa      	ldrb	r2, [r7, #3]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	693a      	ldr	r2, [r7, #16]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f18:	e023      	b.n	8008f62 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f1a:	78fb      	ldrb	r3, [r7, #3]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f26:	461a      	mov	r2, r3
 8008f28:	f240 2325 	movw	r3, #549	@ 0x225
 8008f2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da17      	bge.n	8008f66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	78fa      	ldrb	r2, [r7, #3]
 8008f46:	0151      	lsls	r1, r2, #5
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	440a      	add	r2, r1
 8008f4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f50:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008f54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f56:	e006      	b.n	8008f66 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	77fb      	strb	r3, [r7, #31]
      break;
 8008f5c:	e004      	b.n	8008f68 <USB_HC_Init+0x148>
      break;
 8008f5e:	bf00      	nop
 8008f60:	e002      	b.n	8008f68 <USB_HC_Init+0x148>
      break;
 8008f62:	bf00      	nop
 8008f64:	e000      	b.n	8008f68 <USB_HC_Init+0x148>
      break;
 8008f66:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f74:	461a      	mov	r2, r3
 8008f76:	2300      	movs	r3, #0
 8008f78:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008f7a:	78fb      	ldrb	r3, [r7, #3]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f94:	f043 0302 	orr.w	r3, r3, #2
 8008f98:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	f003 030f 	and.w	r3, r3, #15
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fa01 f303 	lsl.w	r3, r1, r3
 8008fae:	6939      	ldr	r1, [r7, #16]
 8008fb0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008fc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	da03      	bge.n	8008fd4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008fcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fd0:	61bb      	str	r3, [r7, #24]
 8008fd2:	e001      	b.n	8008fd8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff fef9 	bl	8008dd0 <USB_GetHostSpeed>
 8008fde:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008fe0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d106      	bne.n	8008ff6 <USB_HC_Init+0x1d6>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d003      	beq.n	8008ff6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	e001      	b.n	8008ffa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ffa:	787b      	ldrb	r3, [r7, #1]
 8008ffc:	059b      	lsls	r3, r3, #22
 8008ffe:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009002:	78bb      	ldrb	r3, [r7, #2]
 8009004:	02db      	lsls	r3, r3, #11
 8009006:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800900a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800900c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009010:	049b      	lsls	r3, r3, #18
 8009012:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009016:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009018:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800901a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800901e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	431a      	orrs	r2, r3
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	0151      	lsls	r1, r2, #5
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	440a      	add	r2, r1
 8009030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009034:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009038:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800903a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800903e:	2b03      	cmp	r3, #3
 8009040:	d003      	beq.n	800904a <USB_HC_Init+0x22a>
 8009042:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009046:	2b01      	cmp	r3, #1
 8009048:	d10f      	bne.n	800906a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	4413      	add	r3, r2
 8009052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	440a      	add	r2, r1
 8009060:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009064:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009068:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800906a:	7ffb      	ldrb	r3, [r7, #31]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	40040000 	.word	0x40040000

08009078 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b08c      	sub	sp, #48	@ 0x30
 800907c:	af02      	add	r7, sp, #8
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	4613      	mov	r3, r2
 8009084:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	785b      	ldrb	r3, [r3, #1]
 800908e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009094:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4a5d      	ldr	r2, [pc, #372]	@ (8009210 <USB_HC_StartXfer+0x198>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d12f      	bne.n	80090fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d11c      	bne.n	80090de <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	7c9b      	ldrb	r3, [r3, #18]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <USB_HC_StartXfer+0x3c>
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	7c9b      	ldrb	r3, [r3, #18]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d124      	bne.n	80090fe <USB_HC_StartXfer+0x86>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	799b      	ldrb	r3, [r3, #6]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d120      	bne.n	80090fe <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	6a3a      	ldr	r2, [r7, #32]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090da:	60d3      	str	r3, [r2, #12]
 80090dc:	e00f      	b.n	80090fe <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	791b      	ldrb	r3, [r3, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <USB_HC_StartXfer+0x86>
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	795b      	ldrb	r3, [r3, #5]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d107      	bne.n	80090fe <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	4619      	mov	r1, r3
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fb6b 	bl	80097d0 <USB_DoPing>
        return HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	e232      	b.n	8009564 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	799b      	ldrb	r3, [r3, #6]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d158      	bne.n	80091b8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009106:	2301      	movs	r3, #1
 8009108:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	78db      	ldrb	r3, [r3, #3]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009112:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	8a92      	ldrh	r2, [r2, #20]
 8009118:	fb03 f202 	mul.w	r2, r3, r2
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	61da      	str	r2, [r3, #28]
 8009120:	e07c      	b.n	800921c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	7c9b      	ldrb	r3, [r3, #18]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d130      	bne.n	800918c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	2bbc      	cmp	r3, #188	@ 0xbc
 8009130:	d918      	bls.n	8009164 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	8a9b      	ldrh	r3, [r3, #20]
 8009136:	461a      	mov	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	69da      	ldr	r2, [r3, #28]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d003      	beq.n	8009154 <USB_HC_StartXfer+0xdc>
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d103      	bne.n	800915c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2202      	movs	r2, #2
 8009158:	60da      	str	r2, [r3, #12]
 800915a:	e05f      	b.n	800921c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2201      	movs	r2, #1
 8009160:	60da      	str	r2, [r3, #12]
 8009162:	e05b      	b.n	800921c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6a1a      	ldr	r2, [r3, #32]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d007      	beq.n	8009184 <USB_HC_StartXfer+0x10c>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b02      	cmp	r3, #2
 800917a:	d003      	beq.n	8009184 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2204      	movs	r2, #4
 8009180:	60da      	str	r2, [r3, #12]
 8009182:	e04b      	b.n	800921c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2203      	movs	r2, #3
 8009188:	60da      	str	r2, [r3, #12]
 800918a:	e047      	b.n	800921c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d10d      	bne.n	80091ae <USB_HC_StartXfer+0x136>
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	8a92      	ldrh	r2, [r2, #20]
 800919a:	4293      	cmp	r3, r2
 800919c:	d907      	bls.n	80091ae <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800919e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	8a92      	ldrh	r2, [r2, #20]
 80091a4:	fb03 f202 	mul.w	r2, r3, r2
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	61da      	str	r2, [r3, #28]
 80091ac:	e036      	b.n	800921c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6a1a      	ldr	r2, [r3, #32]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	61da      	str	r2, [r3, #28]
 80091b6:	e031      	b.n	800921c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	6a1b      	ldr	r3, [r3, #32]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d018      	beq.n	80091f2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	8a92      	ldrh	r2, [r2, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	3b01      	subs	r3, #1
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	8a92      	ldrh	r2, [r2, #20]
 80091d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80091d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80091d8:	8b7b      	ldrh	r3, [r7, #26]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d90b      	bls.n	80091f6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80091de:	8b7b      	ldrh	r3, [r7, #26]
 80091e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	8a92      	ldrh	r2, [r2, #20]
 80091e8:	fb03 f202 	mul.w	r2, r3, r2
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	61da      	str	r2, [r3, #28]
 80091f0:	e001      	b.n	80091f6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80091f2:	2301      	movs	r3, #1
 80091f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	78db      	ldrb	r3, [r3, #3]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00a      	beq.n	8009214 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	8a92      	ldrh	r2, [r2, #20]
 8009204:	fb03 f202 	mul.w	r2, r3, r2
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	61da      	str	r2, [r3, #28]
 800920c:	e006      	b.n	800921c <USB_HC_StartXfer+0x1a4>
 800920e:	bf00      	nop
 8009210:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	6a1a      	ldr	r2, [r3, #32]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009224:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009226:	04d9      	lsls	r1, r3, #19
 8009228:	4ba3      	ldr	r3, [pc, #652]	@ (80094b8 <USB_HC_StartXfer+0x440>)
 800922a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800922c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	7d9b      	ldrb	r3, [r3, #22]
 8009232:	075b      	lsls	r3, r3, #29
 8009234:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009238:	69f9      	ldr	r1, [r7, #28]
 800923a:	0148      	lsls	r0, r1, #5
 800923c:	6a39      	ldr	r1, [r7, #32]
 800923e:	4401      	add	r1, r0
 8009240:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009244:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009246:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6999      	ldr	r1, [r3, #24]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	4413      	add	r3, r2
 800925a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800925e:	460a      	mov	r2, r1
 8009260:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	bf0c      	ite	eq
 8009272:	2301      	moveq	r3, #1
 8009274:	2300      	movne	r3, #0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	6a3b      	ldr	r3, [r7, #32]
 8009280:	4413      	add	r3, r2
 8009282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	6a3a      	ldr	r2, [r7, #32]
 800928e:	440a      	add	r2, r1
 8009290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009294:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009298:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	6a3b      	ldr	r3, [r7, #32]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	7e7b      	ldrb	r3, [r7, #25]
 80092aa:	075b      	lsls	r3, r3, #29
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	0148      	lsls	r0, r1, #5
 80092b0:	6a39      	ldr	r1, [r7, #32]
 80092b2:	4401      	add	r1, r0
 80092b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80092b8:	4313      	orrs	r3, r2
 80092ba:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	799b      	ldrb	r3, [r3, #6]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	f040 80c3 	bne.w	800944c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	7c5b      	ldrb	r3, [r3, #17]
 80092ca:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80092d0:	4313      	orrs	r3, r2
 80092d2:	69fa      	ldr	r2, [r7, #28]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	6a3a      	ldr	r2, [r7, #32]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80092de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80092e2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	6a3b      	ldr	r3, [r7, #32]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	0151      	lsls	r1, r2, #5
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	440a      	add	r2, r1
 80092fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009302:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	79db      	ldrb	r3, [r3, #7]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d123      	bne.n	8009354 <USB_HC_StartXfer+0x2dc>
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	78db      	ldrb	r3, [r3, #3]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d11f      	bne.n	8009354 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	4413      	add	r3, r2
 800931c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	69fa      	ldr	r2, [r7, #28]
 8009324:	0151      	lsls	r1, r2, #5
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	440a      	add	r2, r1
 800932a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800932e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009332:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	6a3b      	ldr	r3, [r7, #32]
 800933a:	4413      	add	r3, r2
 800933c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	6a3a      	ldr	r2, [r7, #32]
 8009348:	440a      	add	r2, r1
 800934a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800934e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009352:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	7c9b      	ldrb	r3, [r3, #18]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d003      	beq.n	8009364 <USB_HC_StartXfer+0x2ec>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	7c9b      	ldrb	r3, [r3, #18]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d117      	bne.n	8009394 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009368:	2b01      	cmp	r3, #1
 800936a:	d113      	bne.n	8009394 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	78db      	ldrb	r3, [r3, #3]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d10f      	bne.n	8009394 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	4413      	add	r3, r2
 800937c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	69fa      	ldr	r2, [r7, #28]
 8009384:	0151      	lsls	r1, r2, #5
 8009386:	6a3a      	ldr	r2, [r7, #32]
 8009388:	440a      	add	r2, r1
 800938a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800938e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009392:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	7c9b      	ldrb	r3, [r3, #18]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d162      	bne.n	8009462 <USB_HC_StartXfer+0x3ea>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	78db      	ldrb	r3, [r3, #3]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d15e      	bne.n	8009462 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d858      	bhi.n	8009460 <USB_HC_StartXfer+0x3e8>
 80093ae:	a201      	add	r2, pc, #4	@ (adr r2, 80093b4 <USB_HC_StartXfer+0x33c>)
 80093b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b4:	080093c5 	.word	0x080093c5
 80093b8:	080093e7 	.word	0x080093e7
 80093bc:	08009409 	.word	0x08009409
 80093c0:	0800942b 	.word	0x0800942b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	6a3a      	ldr	r2, [r7, #32]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093e2:	6053      	str	r3, [r2, #4]
          break;
 80093e4:	e03d      	b.n	8009462 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	69fa      	ldr	r2, [r7, #28]
 80093f6:	0151      	lsls	r1, r2, #5
 80093f8:	6a3a      	ldr	r2, [r7, #32]
 80093fa:	440a      	add	r2, r1
 80093fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009400:	f043 030e 	orr.w	r3, r3, #14
 8009404:	6053      	str	r3, [r2, #4]
          break;
 8009406:	e02c      	b.n	8009462 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	440a      	add	r2, r1
 800941e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009426:	6053      	str	r3, [r2, #4]
          break;
 8009428:	e01b      	b.n	8009462 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	015a      	lsls	r2, r3, #5
 800942e:	6a3b      	ldr	r3, [r7, #32]
 8009430:	4413      	add	r3, r2
 8009432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	69fa      	ldr	r2, [r7, #28]
 800943a:	0151      	lsls	r1, r2, #5
 800943c:	6a3a      	ldr	r2, [r7, #32]
 800943e:	440a      	add	r2, r1
 8009440:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009448:	6053      	str	r3, [r2, #4]
          break;
 800944a:	e00a      	b.n	8009462 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	4413      	add	r3, r2
 8009454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009458:	461a      	mov	r2, r3
 800945a:	2300      	movs	r3, #0
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	e000      	b.n	8009462 <USB_HC_StartXfer+0x3ea>
          break;
 8009460:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	6a3b      	ldr	r3, [r7, #32]
 8009468:	4413      	add	r3, r2
 800946a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009478:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	78db      	ldrb	r3, [r3, #3]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d004      	beq.n	800948c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	e003      	b.n	8009494 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009492:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800949a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a8:	461a      	mov	r2, r3
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d003      	beq.n	80094bc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80094b4:	2300      	movs	r3, #0
 80094b6:	e055      	b.n	8009564 <USB_HC_StartXfer+0x4ec>
 80094b8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	78db      	ldrb	r3, [r3, #3]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d14e      	bne.n	8009562 <USB_HC_StartXfer+0x4ea>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d04a      	beq.n	8009562 <USB_HC_StartXfer+0x4ea>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	79db      	ldrb	r3, [r3, #7]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d146      	bne.n	8009562 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	7c9b      	ldrb	r3, [r3, #18]
 80094d8:	2b03      	cmp	r3, #3
 80094da:	d831      	bhi.n	8009540 <USB_HC_StartXfer+0x4c8>
 80094dc:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <USB_HC_StartXfer+0x46c>)
 80094de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e2:	bf00      	nop
 80094e4:	080094f5 	.word	0x080094f5
 80094e8:	08009519 	.word	0x08009519
 80094ec:	080094f5 	.word	0x080094f5
 80094f0:	08009519 	.word	0x08009519
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	3303      	adds	r3, #3
 80094fa:	089b      	lsrs	r3, r3, #2
 80094fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80094fe:	8afa      	ldrh	r2, [r7, #22]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009504:	b29b      	uxth	r3, r3
 8009506:	429a      	cmp	r2, r3
 8009508:	d91c      	bls.n	8009544 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f043 0220 	orr.w	r2, r3, #32
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	619a      	str	r2, [r3, #24]
        }
        break;
 8009516:	e015      	b.n	8009544 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	3303      	adds	r3, #3
 800951e:	089b      	lsrs	r3, r3, #2
 8009520:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009522:	8afa      	ldrh	r2, [r7, #22]
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	b29b      	uxth	r3, r3
 800952e:	429a      	cmp	r2, r3
 8009530:	d90a      	bls.n	8009548 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	619a      	str	r2, [r3, #24]
        }
        break;
 800953e:	e003      	b.n	8009548 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009540:	bf00      	nop
 8009542:	e002      	b.n	800954a <USB_HC_StartXfer+0x4d2>
        break;
 8009544:	bf00      	nop
 8009546:	e000      	b.n	800954a <USB_HC_StartXfer+0x4d2>
        break;
 8009548:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	6999      	ldr	r1, [r3, #24]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	785a      	ldrb	r2, [r3, #1]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	b29b      	uxth	r3, r3
 8009558:	2000      	movs	r0, #0
 800955a:	9000      	str	r0, [sp, #0]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff f9c3 	bl	80088e8 <USB_WritePacket>
  }

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3728      	adds	r7, #40	@ 0x28
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	b29b      	uxth	r3, r3
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800958e:	b480      	push	{r7}
 8009590:	b089      	sub	sp, #36	@ 0x24
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	0c9b      	lsrs	r3, r3, #18
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	0fdb      	lsrs	r3, r3, #31
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	0fdb      	lsrs	r3, r3, #31
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d10d      	bne.n	8009610 <USB_HC_Halt+0x82>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <USB_HC_Halt+0x82>
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d005      	beq.n	800960c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d002      	beq.n	800960c <USB_HC_Halt+0x7e>
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b03      	cmp	r3, #3
 800960a:	d101      	bne.n	8009610 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	e0d8      	b.n	80097c2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d002      	beq.n	800961c <USB_HC_Halt+0x8e>
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d173      	bne.n	8009704 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	69ba      	ldr	r2, [r7, #24]
 800962c:	0151      	lsls	r1, r2, #5
 800962e:	69fa      	ldr	r2, [r7, #28]
 8009630:	440a      	add	r2, r1
 8009632:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009636:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800963a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f003 0320 	and.w	r3, r3, #32
 8009644:	2b00      	cmp	r3, #0
 8009646:	d14a      	bne.n	80096de <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d133      	bne.n	80096bc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	4413      	add	r3, r2
 800965c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69ba      	ldr	r2, [r7, #24]
 8009664:	0151      	lsls	r1, r2, #5
 8009666:	69fa      	ldr	r2, [r7, #28]
 8009668:	440a      	add	r2, r1
 800966a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800966e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009672:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	4413      	add	r3, r2
 800967c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	0151      	lsls	r1, r2, #5
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	440a      	add	r2, r1
 800968a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800968e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009692:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	3301      	adds	r3, #1
 8009698:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a0:	d82e      	bhi.n	8009700 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	015a      	lsls	r2, r3, #5
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096b8:	d0ec      	beq.n	8009694 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096ba:	e081      	b.n	80097c0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096bc:	69bb      	ldr	r3, [r7, #24]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	0151      	lsls	r1, r2, #5
 80096ce:	69fa      	ldr	r2, [r7, #28]
 80096d0:	440a      	add	r2, r1
 80096d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096da:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096dc:	e070      	b.n	80097c0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	0151      	lsls	r1, r2, #5
 80096f0:	69fa      	ldr	r2, [r7, #28]
 80096f2:	440a      	add	r2, r1
 80096f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096fe:	e05f      	b.n	80097c0 <USB_HC_Halt+0x232>
            break;
 8009700:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009702:	e05d      	b.n	80097c0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	440a      	add	r2, r1
 800971a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800971e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009722:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d133      	bne.n	800979c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	440a      	add	r2, r1
 800974a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800974e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009752:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	440a      	add	r2, r1
 800976a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800976e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009772:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	3301      	adds	r3, #1
 8009778:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009780:	d81d      	bhi.n	80097be <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	4413      	add	r3, r2
 800978a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009798:	d0ec      	beq.n	8009774 <USB_HC_Halt+0x1e6>
 800979a:	e011      	b.n	80097c0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	0151      	lsls	r1, r2, #5
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	440a      	add	r2, r1
 80097b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	e000      	b.n	80097c0 <USB_HC_Halt+0x232>
          break;
 80097be:	bf00      	nop
    }
  }

  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3724      	adds	r7, #36	@ 0x24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80097e4:	2301      	movs	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	04da      	lsls	r2, r3, #19
 80097ec:	4b15      	ldr	r3, [pc, #84]	@ (8009844 <USB_DoPing+0x74>)
 80097ee:	4013      	ands	r3, r2
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009800:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	4413      	add	r3, r2
 800980a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009818:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009820:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	4413      	add	r3, r2
 800982a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800982e:	461a      	mov	r2, r3
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	1ff80000 	.word	0x1ff80000

08009848 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009858:	2300      	movs	r3, #0
 800985a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7fe ff86 	bl	800876e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009862:	2110      	movs	r1, #16
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7fe ffdf 	bl	8008828 <USB_FlushTxFifo>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff f809 	bl	800888c <USB_FlushRxFifo>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d001      	beq.n	8009884 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009884:	2300      	movs	r3, #0
 8009886:	61bb      	str	r3, [r7, #24]
 8009888:	e01f      	b.n	80098ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098be:	461a      	mov	r2, r3
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	3301      	adds	r3, #1
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b0f      	cmp	r3, #15
 80098ce:	d9dc      	bls.n	800988a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80098d0:	2300      	movs	r3, #0
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	e034      	b.n	8009940 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800990a:	461a      	mov	r2, r3
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3301      	adds	r3, #1
 8009914:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800991c:	d80c      	bhi.n	8009938 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	4413      	add	r3, r2
 8009926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009934:	d0ec      	beq.n	8009910 <USB_StopHost+0xc8>
 8009936:	e000      	b.n	800993a <USB_StopHost+0xf2>
        break;
 8009938:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	3301      	adds	r3, #1
 800993e:	61bb      	str	r3, [r7, #24]
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b0f      	cmp	r3, #15
 8009944:	d9c7      	bls.n	80098d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800994c:	461a      	mov	r2, r3
 800994e:	f04f 33ff 	mov.w	r3, #4294967295
 8009952:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7fe fef5 	bl	800874c <USB_EnableGlobalInt>

  return ret;
 8009962:	7ffb      	ldrb	r3, [r7, #31]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3720      	adds	r7, #32
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800996c:	b590      	push	{r4, r7, lr}
 800996e:	b089      	sub	sp, #36	@ 0x24
 8009970:	af04      	add	r7, sp, #16
 8009972:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009974:	2301      	movs	r3, #1
 8009976:	2202      	movs	r2, #2
 8009978:	2102      	movs	r1, #2
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 fcb7 	bl	800a2ee <USBH_FindInterface>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	2bff      	cmp	r3, #255	@ 0xff
 8009988:	d002      	beq.n	8009990 <USBH_CDC_InterfaceInit+0x24>
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d901      	bls.n	8009994 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009990:	2302      	movs	r3, #2
 8009992:	e13d      	b.n	8009c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	4619      	mov	r1, r3
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fc8c 	bl	800a2b6 <USBH_SelectInterface>
 800999e:	4603      	mov	r3, r0
 80099a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80099a2:	7bbb      	ldrb	r3, [r7, #14]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80099a8:	2302      	movs	r3, #2
 80099aa:	e131      	b.n	8009c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80099b2:	2050      	movs	r0, #80	@ 0x50
 80099b4:	f006 ffd0 	bl	8010958 <malloc>
 80099b8:	4603      	mov	r3, r0
 80099ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099c2:	69db      	ldr	r3, [r3, #28]
 80099c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80099cc:	2302      	movs	r3, #2
 80099ce:	e11f      	b.n	8009c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80099d0:	2250      	movs	r2, #80	@ 0x50
 80099d2:	2100      	movs	r1, #0
 80099d4:	68b8      	ldr	r0, [r7, #8]
 80099d6:	f007 fa28 	bl	8010e2a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80099da:	7bfb      	ldrb	r3, [r7, #15]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	211a      	movs	r1, #26
 80099e0:	fb01 f303 	mul.w	r3, r1, r3
 80099e4:	4413      	add	r3, r2
 80099e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b25b      	sxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	da15      	bge.n	8009a1e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	211a      	movs	r1, #26
 80099f8:	fb01 f303 	mul.w	r3, r1, r3
 80099fc:	4413      	add	r3, r2
 80099fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a02:	781a      	ldrb	r2, [r3, #0]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	211a      	movs	r1, #26
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a18:	881a      	ldrh	r2, [r3, #0]
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	785b      	ldrb	r3, [r3, #1]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f002 f904 	bl	800bc32 <USBH_AllocPipe>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	7819      	ldrb	r1, [r3, #0]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	7858      	ldrb	r0, [r3, #1]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	8952      	ldrh	r2, [r2, #10]
 8009a4a:	9202      	str	r2, [sp, #8]
 8009a4c:	2203      	movs	r2, #3
 8009a4e:	9201      	str	r2, [sp, #4]
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	4623      	mov	r3, r4
 8009a54:	4602      	mov	r2, r0
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f002 f8bc 	bl	800bbd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	2200      	movs	r2, #0
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f006 feed 	bl	8010844 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	210a      	movs	r1, #10
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fc3c 	bl	800a2ee <USBH_FindInterface>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	2bff      	cmp	r3, #255	@ 0xff
 8009a7e:	d002      	beq.n	8009a86 <USBH_CDC_InterfaceInit+0x11a>
 8009a80:	7bfb      	ldrb	r3, [r7, #15]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d901      	bls.n	8009a8a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a86:	2302      	movs	r3, #2
 8009a88:	e0c2      	b.n	8009c10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	211a      	movs	r1, #26
 8009a90:	fb01 f303 	mul.w	r3, r1, r3
 8009a94:	4413      	add	r3, r2
 8009a96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	b25b      	sxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da16      	bge.n	8009ad0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	211a      	movs	r1, #26
 8009aa8:	fb01 f303 	mul.w	r3, r1, r3
 8009aac:	4413      	add	r3, r2
 8009aae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009ab2:	781a      	ldrb	r2, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	211a      	movs	r1, #26
 8009abe:	fb01 f303 	mul.w	r3, r1, r3
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009ac8:	881a      	ldrh	r2, [r3, #0]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	835a      	strh	r2, [r3, #26]
 8009ace:	e015      	b.n	8009afc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	211a      	movs	r1, #26
 8009ad6:	fb01 f303 	mul.w	r3, r1, r3
 8009ada:	4413      	add	r3, r2
 8009adc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009ae0:	781a      	ldrb	r2, [r3, #0]
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	211a      	movs	r1, #26
 8009aec:	fb01 f303 	mul.w	r3, r1, r3
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009af6:	881a      	ldrh	r2, [r3, #0]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	211a      	movs	r1, #26
 8009b02:	fb01 f303 	mul.w	r3, r1, r3
 8009b06:	4413      	add	r3, r2
 8009b08:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	b25b      	sxtb	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	da16      	bge.n	8009b42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	211a      	movs	r1, #26
 8009b1a:	fb01 f303 	mul.w	r3, r1, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	211a      	movs	r1, #26
 8009b30:	fb01 f303 	mul.w	r3, r1, r3
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b3a:	881a      	ldrh	r2, [r3, #0]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	835a      	strh	r2, [r3, #26]
 8009b40:	e015      	b.n	8009b6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	211a      	movs	r1, #26
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	211a      	movs	r1, #26
 8009b5e:	fb01 f303 	mul.w	r3, r1, r3
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b68:	881a      	ldrh	r2, [r3, #0]
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	7b9b      	ldrb	r3, [r3, #14]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f002 f85c 	bl	800bc32 <USBH_AllocPipe>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	7bdb      	ldrb	r3, [r3, #15]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f002 f852 	bl	800bc32 <USBH_AllocPipe>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	461a      	mov	r2, r3
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	7b59      	ldrb	r1, [r3, #13]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	7b98      	ldrb	r0, [r3, #14]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	8b12      	ldrh	r2, [r2, #24]
 8009bae:	9202      	str	r2, [sp, #8]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	9201      	str	r2, [sp, #4]
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	4602      	mov	r2, r0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f002 f80a 	bl	800bbd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	7b19      	ldrb	r1, [r3, #12]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	7bd8      	ldrb	r0, [r3, #15]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	8b52      	ldrh	r2, [r2, #26]
 8009bd8:	9202      	str	r2, [sp, #8]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	9201      	str	r2, [sp, #4]
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	4623      	mov	r3, r4
 8009be2:	4602      	mov	r2, r0
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 fff5 	bl	800bbd4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	7b5b      	ldrb	r3, [r3, #13]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f006 fe22 	bl	8010844 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	7b1b      	ldrb	r3, [r3, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f006 fe1b 	bl	8010844 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd90      	pop	{r4, r7, pc}

08009c18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00e      	beq.n	8009c50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f001 ffea 	bl	800bc12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	4619      	mov	r1, r3
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f002 f815 	bl	800bc74 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	7b1b      	ldrb	r3, [r3, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00e      	beq.n	8009c76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	7b1b      	ldrb	r3, [r3, #12]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f001 ffd7 	bl	800bc12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	7b1b      	ldrb	r3, [r3, #12]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f002 f802 	bl	800bc74 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	7b5b      	ldrb	r3, [r3, #13]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00e      	beq.n	8009c9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	7b5b      	ldrb	r3, [r3, #13]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 ffc4 	bl	800bc12 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	7b5b      	ldrb	r3, [r3, #13]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 ffef 	bl	800bc74 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ca2:	69db      	ldr	r3, [r3, #28]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f006 fe59 	bl	8010968 <free>
    phost->pActiveClass->pData = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	3340      	adds	r3, #64	@ 0x40
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8b1 	bl	8009e4a <GetLineCoding>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009cec:	7afb      	ldrb	r3, [r7, #11]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d105      	bne.n	8009cfe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cf8:	2102      	movs	r1, #2
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d10:	2301      	movs	r3, #1
 8009d12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d877      	bhi.n	8009e1c <USBH_CDC_Process+0x114>
 8009d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <USBH_CDC_Process+0x2c>)
 8009d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d32:	bf00      	nop
 8009d34:	08009d49 	.word	0x08009d49
 8009d38:	08009d4f 	.word	0x08009d4f
 8009d3c:	08009d7f 	.word	0x08009d7f
 8009d40:	08009df3 	.word	0x08009df3
 8009d44:	08009e01 	.word	0x08009e01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d4c:	e06d      	b.n	8009e2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f897 	bl	8009e88 <SetLineCoding>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d6c:	e058      	b.n	8009e20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d055      	beq.n	8009e20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2204      	movs	r2, #4
 8009d78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009d7c:	e050      	b.n	8009e20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	3340      	adds	r3, #64	@ 0x40
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f860 	bl	8009e4a <GetLineCoding>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d8e:	7bbb      	ldrb	r3, [r7, #14]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d126      	bne.n	8009de2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009da6:	791b      	ldrb	r3, [r3, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d13b      	bne.n	8009e24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009db6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d133      	bne.n	8009e24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d12b      	bne.n	8009e24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d124      	bne.n	8009e24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f96a 	bl	800a0b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009de0:	e020      	b.n	8009e24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d01d      	beq.n	8009e24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2204      	movs	r2, #4
 8009dec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009df0:	e018      	b.n	8009e24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f867 	bl	8009ec6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f8e6 	bl	8009fca <CDC_ProcessReception>
      break;
 8009dfe:	e014      	b.n	8009e2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e00:	2100      	movs	r1, #0
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f001 f8f8 	bl	800aff8 <USBH_ClrFeature>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009e1a:	e005      	b.n	8009e28 <USBH_CDC_Process+0x120>

    default:
      break;
 8009e1c:	bf00      	nop
 8009e1e:	e004      	b.n	8009e2a <USBH_CDC_Process+0x122>
      break;
 8009e20:	bf00      	nop
 8009e22:	e002      	b.n	8009e2a <USBH_CDC_Process+0x122>
      break;
 8009e24:	bf00      	nop
 8009e26:	e000      	b.n	8009e2a <USBH_CDC_Process+0x122>
      break;
 8009e28:	bf00      	nop

  }

  return status;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	22a1      	movs	r2, #161	@ 0xa1
 8009e58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2221      	movs	r2, #33	@ 0x21
 8009e5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2207      	movs	r2, #7
 8009e70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2207      	movs	r2, #7
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 fbf1 	bl	800b660 <USBH_CtlReq>
 8009e7e:	4603      	mov	r3, r0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2221      	movs	r2, #33	@ 0x21
 8009e96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2207      	movs	r2, #7
 8009eae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	2207      	movs	r2, #7
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fbd2 	bl	800b660 <USBH_CtlReq>
 8009ebc:	4603      	mov	r3, r0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b086      	sub	sp, #24
 8009eca:	af02      	add	r7, sp, #8
 8009ecc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d002      	beq.n	8009eec <CDC_ProcessTransmission+0x26>
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d023      	beq.n	8009f32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009eea:	e06a      	b.n	8009fc2 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	8b12      	ldrh	r2, [r2, #24]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d90b      	bls.n	8009f10 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	69d9      	ldr	r1, [r3, #28]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8b1a      	ldrh	r2, [r3, #24]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	7b5b      	ldrb	r3, [r3, #13]
 8009f04:	2001      	movs	r0, #1
 8009f06:	9000      	str	r0, [sp, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 fe20 	bl	800bb4e <USBH_BulkSendData>
 8009f0e:	e00b      	b.n	8009f28 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	7b5b      	ldrb	r3, [r3, #13]
 8009f1e:	2001      	movs	r0, #1
 8009f20:	9000      	str	r0, [sp, #0]
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f001 fe13 	bl	800bb4e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009f30:	e047      	b.n	8009fc2 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	7b5b      	ldrb	r3, [r3, #13]
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f006 fc59 	bl	80107f0 <USBH_LL_GetURBState>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009f42:	7afb      	ldrb	r3, [r7, #11]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d12e      	bne.n	8009fa6 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	8b12      	ldrh	r2, [r2, #24]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d90e      	bls.n	8009f72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	8b12      	ldrh	r2, [r2, #24]
 8009f5c:	1a9a      	subs	r2, r3, r2
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	8b12      	ldrh	r2, [r2, #24]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	61da      	str	r2, [r3, #28]
 8009f70:	e002      	b.n	8009f78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009f88:	e006      	b.n	8009f98 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f87a 	bl	800a08c <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2104      	movs	r1, #4
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 feb6 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 8009fa4:	e00c      	b.n	8009fc0 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d109      	bne.n	8009fc0 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2104      	movs	r1, #4
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fea8 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 8009fc0:	bf00      	nop
  }
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b086      	sub	sp, #24
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d002      	beq.n	8009ff0 <CDC_ProcessReception+0x26>
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d00e      	beq.n	800a00c <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009fee:	e049      	b.n	800a084 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	6a19      	ldr	r1, [r3, #32]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	8b5a      	ldrh	r2, [r3, #26]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	7b1b      	ldrb	r3, [r3, #12]
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f001 fdcb 	bl	800bb98 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	2204      	movs	r2, #4
 800a006:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a00a:	e03b      	b.n	800a084 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	7b1b      	ldrb	r3, [r3, #12]
 800a010:	4619      	mov	r1, r3
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f006 fbec 	bl	80107f0 <USBH_LL_GetURBState>
 800a018:	4603      	mov	r3, r0
 800a01a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a01c:	7cfb      	ldrb	r3, [r7, #19]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d12f      	bne.n	800a082 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	7b1b      	ldrb	r3, [r3, #12]
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f006 fb4f 	bl	80106cc <USBH_LL_GetLastXferSize>
 800a02e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	429a      	cmp	r2, r3
 800a038:	d016      	beq.n	800a068 <CDC_ProcessReception+0x9e>
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	8b5b      	ldrh	r3, [r3, #26]
 800a03e:	461a      	mov	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4293      	cmp	r3, r2
 800a044:	d110      	bne.n	800a068 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	1ad2      	subs	r2, r2, r3
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	6a1a      	ldr	r2, [r3, #32]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	441a      	add	r2, r3
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2203      	movs	r2, #3
 800a062:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a066:	e006      	b.n	800a076 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f815 	bl	800a0a0 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800a076:	2300      	movs	r3, #0
 800a078:	2200      	movs	r2, #0
 800a07a:	2104      	movs	r1, #4
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fe47 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800a082:	bf00      	nop
  }
}
 800a084:	bf00      	nop
 800a086:	3718      	adds	r7, #24
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e044      	b.n	800a16a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	79fa      	ldrb	r2, [r7, #7]
 800a0e4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f000 f841 	bl	800a180 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a12c:	2200      	movs	r2, #0
 800a12e:	2104      	movs	r1, #4
 800a130:	2010      	movs	r0, #16
 800a132:	f001 ff5a 	bl	800bfea <osMessageQueueNew>
 800a136:	4602      	mov	r2, r0
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a13e:	4b0d      	ldr	r3, [pc, #52]	@ (800a174 <USBH_Init+0xac>)
 800a140:	4a0d      	ldr	r2, [pc, #52]	@ (800a178 <USBH_Init+0xb0>)
 800a142:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a144:	4b0b      	ldr	r3, [pc, #44]	@ (800a174 <USBH_Init+0xac>)
 800a146:	2280      	movs	r2, #128	@ 0x80
 800a148:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a14a:	4b0a      	ldr	r3, [pc, #40]	@ (800a174 <USBH_Init+0xac>)
 800a14c:	2218      	movs	r2, #24
 800a14e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a150:	4a08      	ldr	r2, [pc, #32]	@ (800a174 <USBH_Init+0xac>)
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	4809      	ldr	r0, [pc, #36]	@ (800a17c <USBH_Init+0xb4>)
 800a156:	f001 fe9b 	bl	800be90 <osThreadNew>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f006 f9fe 	bl	8010564 <USBH_LL_Init>

  return USBH_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2000053c 	.word	0x2000053c
 800a178:	080128b4 	.word	0x080128b4
 800a17c:	0800ad59 	.word	0x0800ad59

0800a180 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a188:	2300      	movs	r3, #0
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	e009      	b.n	800a1a2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	33e0      	adds	r3, #224	@ 0xe0
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	2200      	movs	r2, #0
 800a19a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2b0f      	cmp	r3, #15
 800a1a6:	d9f2      	bls.n	800a18e <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	e009      	b.n	800a1c2 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1c8:	d3f1      	bcc.n	800a1ae <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2240      	movs	r2, #64	@ 0x40
 800a1ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	331c      	adds	r3, #28
 800a21a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f006 fe02 	bl	8010e2a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a22c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f006 fdf9 	bl	8010e2a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a23e:	2212      	movs	r2, #18
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f006 fdf1 	bl	8010e2a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a24e:	223e      	movs	r2, #62	@ 0x3e
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f006 fde9 	bl	8010e2a <memset>

  return USBH_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a262:	b480      	push	{r7}
 800a264:	b085      	sub	sp, #20
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d016      	beq.n	800a2a4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10e      	bne.n	800a29e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a286:	1c59      	adds	r1, r3, #1
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	33de      	adds	r3, #222	@ 0xde
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
 800a29c:	e004      	b.n	800a2a8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	73fb      	strb	r3, [r7, #15]
 800a2a2:	e001      	b.n	800a2a8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d204      	bcs.n	800a2dc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	78fa      	ldrb	r2, [r7, #3]
 800a2d6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a2da:	e001      	b.n	800a2e0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b087      	sub	sp, #28
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	4608      	mov	r0, r1
 800a2f8:	4611      	mov	r1, r2
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	70fb      	strb	r3, [r7, #3]
 800a300:	460b      	mov	r3, r1
 800a302:	70bb      	strb	r3, [r7, #2]
 800a304:	4613      	mov	r3, r2
 800a306:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a316:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a318:	e025      	b.n	800a366 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	221a      	movs	r2, #26
 800a31e:	fb02 f303 	mul.w	r3, r2, r3
 800a322:	3308      	adds	r3, #8
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	4413      	add	r3, r2
 800a328:	3302      	adds	r3, #2
 800a32a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	795b      	ldrb	r3, [r3, #5]
 800a330:	78fa      	ldrb	r2, [r7, #3]
 800a332:	429a      	cmp	r2, r3
 800a334:	d002      	beq.n	800a33c <USBH_FindInterface+0x4e>
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	2bff      	cmp	r3, #255	@ 0xff
 800a33a:	d111      	bne.n	800a360 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a340:	78ba      	ldrb	r2, [r7, #2]
 800a342:	429a      	cmp	r2, r3
 800a344:	d002      	beq.n	800a34c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a346:	78bb      	ldrb	r3, [r7, #2]
 800a348:	2bff      	cmp	r3, #255	@ 0xff
 800a34a:	d109      	bne.n	800a360 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a350:	787a      	ldrb	r2, [r7, #1]
 800a352:	429a      	cmp	r2, r3
 800a354:	d002      	beq.n	800a35c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a356:	787b      	ldrb	r3, [r7, #1]
 800a358:	2bff      	cmp	r3, #255	@ 0xff
 800a35a:	d101      	bne.n	800a360 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	e006      	b.n	800a36e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a360:	7dfb      	ldrb	r3, [r7, #23]
 800a362:	3301      	adds	r3, #1
 800a364:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a366:	7dfb      	ldrb	r3, [r7, #23]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d9d6      	bls.n	800a31a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a36c:	23ff      	movs	r3, #255	@ 0xff
}
 800a36e:	4618      	mov	r0, r3
 800a370:	371c      	adds	r7, #28
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f006 f92a 	bl	80105dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a388:	2101      	movs	r1, #1
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f006 fa43 	bl	8010816 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af04      	add	r7, sp, #16
 800a3a2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d102      	bne.n	800a3be <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2203      	movs	r2, #3
 800a3bc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b0b      	cmp	r3, #11
 800a3c6:	f200 81f5 	bhi.w	800a7b4 <USBH_Process+0x418>
 800a3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d0 <USBH_Process+0x34>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a401 	.word	0x0800a401
 800a3d4:	0800a43f 	.word	0x0800a43f
 800a3d8:	0800a4b5 	.word	0x0800a4b5
 800a3dc:	0800a743 	.word	0x0800a743
 800a3e0:	0800a7b5 	.word	0x0800a7b5
 800a3e4:	0800a561 	.word	0x0800a561
 800a3e8:	0800a6dd 	.word	0x0800a6dd
 800a3ec:	0800a5a3 	.word	0x0800a5a3
 800a3f0:	0800a5cf 	.word	0x0800a5cf
 800a3f4:	0800a5f7 	.word	0x0800a5f7
 800a3f8:	0800a645 	.word	0x0800a645
 800a3fc:	0800a72b 	.word	0x0800a72b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 81d5 	beq.w	800a7b8 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a414:	20c8      	movs	r0, #200	@ 0xc8
 800a416:	f006 fa48 	bl	80108aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f006 f93b 	bl	8010696 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a430:	2300      	movs	r3, #0
 800a432:	2200      	movs	r2, #0
 800a434:	2101      	movs	r1, #1
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 fc6a 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a43c:	e1bc      	b.n	800a7b8 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b01      	cmp	r3, #1
 800a448:	d107      	bne.n	800a45a <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2202      	movs	r2, #2
 800a456:	701a      	strb	r2, [r3, #0]
 800a458:	e025      	b.n	800a4a6 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a464:	d914      	bls.n	800a490 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a46c:	3301      	adds	r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d903      	bls.n	800a488 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	220d      	movs	r2, #13
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	e00e      	b.n	800a4a6 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
 800a48e:	e00a      	b.n	800a4a6 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a496:	f103 020a 	add.w	r2, r3, #10
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a4a0:	200a      	movs	r0, #10
 800a4a2:	f006 fa02 	bl	80108aa <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fc2f 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a4b2:	e188      	b.n	800a7c6 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4c4:	2104      	movs	r1, #4
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a4ca:	2064      	movs	r0, #100	@ 0x64
 800a4cc:	f006 f9ed 	bl	80108aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f006 f8b9 	bl	8010648 <USBH_LL_GetSpeed>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4e6:	2100      	movs	r1, #0
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f001 fba2 	bl	800bc32 <USBH_AllocPipe>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4f6:	2180      	movs	r1, #128	@ 0x80
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f001 fb9a 	bl	800bc32 <USBH_AllocPipe>
 800a4fe:	4603      	mov	r3, r0
 800a500:	461a      	mov	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	7919      	ldrb	r1, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a51a:	9202      	str	r2, [sp, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	9201      	str	r2, [sp, #4]
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	4603      	mov	r3, r0
 800a524:	2280      	movs	r2, #128	@ 0x80
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f001 fb54 	bl	800bbd4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7959      	ldrb	r1, [r3, #5]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a540:	9202      	str	r2, [sp, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	9201      	str	r2, [sp, #4]
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	4603      	mov	r3, r0
 800a54a:	2200      	movs	r2, #0
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f001 fb41 	bl	800bbd4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a552:	2300      	movs	r3, #0
 800a554:	2200      	movs	r2, #0
 800a556:	2101      	movs	r1, #1
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fbd9 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a55e:	e132      	b.n	800a7c6 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f935 	bl	800a7d0 <USBH_HandleEnum>
 800a566:	4603      	mov	r3, r0
 800a568:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f040 8124 	bne.w	800a7bc <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a582:	2b01      	cmp	r3, #1
 800a584:	d103      	bne.n	800a58e <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2208      	movs	r2, #8
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	e002      	b.n	800a594 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2207      	movs	r2, #7
 800a592:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a594:	2300      	movs	r3, #0
 800a596:	2200      	movs	r2, #0
 800a598:	2105      	movs	r1, #5
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fbb8 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a5a0:	e10c      	b.n	800a7bc <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 8109 	beq.w	800a7c0 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2208      	movs	r2, #8
 800a5be:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2105      	movs	r1, #5
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fba2 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a5cc:	e0f8      	b.n	800a7c0 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fcc7 	bl	800af6a <USBH_SetCfg>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d102      	bne.n	800a5e8 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2209      	movs	r2, #9
 800a5e6:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fb8e 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5f4:	e0e7      	b.n	800a7c6 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b00      	cmp	r3, #0
 800a602:	d015      	beq.n	800a630 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a604:	2101      	movs	r1, #1
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fcd2 	bl	800afb0 <USBH_SetFeature>
 800a60c:	4603      	mov	r3, r0
 800a60e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	220a      	movs	r2, #10
 800a61c:	701a      	strb	r2, [r3, #0]
 800a61e:	e00a      	b.n	800a636 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b03      	cmp	r3, #3
 800a626:	d106      	bne.n	800a636 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	220a      	movs	r2, #10
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	e002      	b.n	800a636 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	220a      	movs	r2, #10
 800a634:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a636:	2300      	movs	r3, #0
 800a638:	2200      	movs	r2, #0
 800a63a:	2101      	movs	r1, #1
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb67 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a642:	e0c0      	b.n	800a7c6 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d03f      	beq.n	800a6ce <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a656:	2300      	movs	r3, #0
 800a658:	73fb      	strb	r3, [r7, #15]
 800a65a:	e016      	b.n	800a68a <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a65c:	7bfa      	ldrb	r2, [r7, #15]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	32de      	adds	r2, #222	@ 0xde
 800a662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a666:	791a      	ldrb	r2, [r3, #4]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a66e:	429a      	cmp	r2, r3
 800a670:	d108      	bne.n	800a684 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a672:	7bfa      	ldrb	r2, [r7, #15]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	32de      	adds	r2, #222	@ 0xde
 800a678:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a682:	e005      	b.n	800a690 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	3301      	adds	r3, #1
 800a688:	73fb      	strb	r3, [r7, #15]
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d0e5      	beq.n	800a65c <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d016      	beq.n	800a6c8 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d109      	bne.n	800a6c0 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2206      	movs	r2, #6
 800a6b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a6b8:	2103      	movs	r1, #3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	4798      	blx	r3
 800a6be:	e006      	b.n	800a6ce <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	220d      	movs	r2, #13
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	e002      	b.n	800a6ce <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	220d      	movs	r2, #13
 800a6cc:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2105      	movs	r1, #5
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fb1b 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6da:	e074      	b.n	800a7c6 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d017      	beq.n	800a716 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	220b      	movs	r2, #11
 800a702:	701a      	strb	r2, [r3, #0]
 800a704:	e00a      	b.n	800a71c <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d106      	bne.n	800a71c <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	220d      	movs	r2, #13
 800a712:	701a      	strb	r2, [r3, #0]
 800a714:	e002      	b.n	800a71c <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	220d      	movs	r2, #13
 800a71a:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a71c:	2300      	movs	r3, #0
 800a71e:	2200      	movs	r2, #0
 800a720:	2105      	movs	r1, #5
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 faf4 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a728:	e04d      	b.n	800a7c6 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a730:	2b00      	cmp	r3, #0
 800a732:	d047      	beq.n	800a7c4 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	4798      	blx	r3
      }
      break;
 800a740:	e040      	b.n	800a7c4 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff fd18 	bl	800a180 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d009      	beq.n	800a76e <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a77e:	2105      	movs	r1, #5
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d107      	bne.n	800a7a0 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff fdee 	bl	800a37a <USBH_Start>
 800a79e:	e002      	b.n	800a7a6 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f005 ff1b 	bl	80105dc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 faaf 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a7b2:	e008      	b.n	800a7c6 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800a7b4:	bf00      	nop
 800a7b6:	e006      	b.n	800a7c6 <USBH_Process+0x42a>
      break;
 800a7b8:	bf00      	nop
 800a7ba:	e004      	b.n	800a7c6 <USBH_Process+0x42a>
      break;
 800a7bc:	bf00      	nop
 800a7be:	e002      	b.n	800a7c6 <USBH_Process+0x42a>
    break;
 800a7c0:	bf00      	nop
 800a7c2:	e000      	b.n	800a7c6 <USBH_Process+0x42a>
      break;
 800a7c4:	bf00      	nop
  }
  return USBH_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b088      	sub	sp, #32
 800a7d4:	af04      	add	r7, sp, #16
 800a7d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	785b      	ldrb	r3, [r3, #1]
 800a7e4:	2b07      	cmp	r3, #7
 800a7e6:	f200 81db 	bhi.w	800aba0 <USBH_HandleEnum+0x3d0>
 800a7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f0 <USBH_HandleEnum+0x20>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a811 	.word	0x0800a811
 800a7f4:	0800a8cb 	.word	0x0800a8cb
 800a7f8:	0800a935 	.word	0x0800a935
 800a7fc:	0800a9bf 	.word	0x0800a9bf
 800a800:	0800aa29 	.word	0x0800aa29
 800a804:	0800aa99 	.word	0x0800aa99
 800a808:	0800ab03 	.word	0x0800ab03
 800a80c:	0800ab61 	.word	0x0800ab61
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a810:	2108      	movs	r1, #8
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fac6 	bl	800ada4 <USBH_Get_DevDesc>
 800a818:	4603      	mov	r3, r0
 800a81a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d12e      	bne.n	800a880 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7919      	ldrb	r1, [r3, #4]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a846:	9202      	str	r2, [sp, #8]
 800a848:	2200      	movs	r2, #0
 800a84a:	9201      	str	r2, [sp, #4]
 800a84c:	9300      	str	r3, [sp, #0]
 800a84e:	4603      	mov	r3, r0
 800a850:	2280      	movs	r2, #128	@ 0x80
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 f9be 	bl	800bbd4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7959      	ldrb	r1, [r3, #5]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a86c:	9202      	str	r2, [sp, #8]
 800a86e:	2200      	movs	r2, #0
 800a870:	9201      	str	r2, [sp, #4]
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	4603      	mov	r3, r0
 800a876:	2200      	movs	r2, #0
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 f9ab 	bl	800bbd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a87e:	e191      	b.n	800aba4 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b03      	cmp	r3, #3
 800a884:	f040 818e 	bne.w	800aba4 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a88e:	3301      	adds	r3, #1
 800a890:	b2da      	uxtb	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d903      	bls.n	800a8aa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	220d      	movs	r2, #13
 800a8a6:	701a      	strb	r2, [r3, #0]
      break;
 800a8a8:	e17c      	b.n	800aba4 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	795b      	ldrb	r3, [r3, #5]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f001 f9df 	bl	800bc74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	791b      	ldrb	r3, [r3, #4]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 f9d9 	bl	800bc74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	701a      	strb	r2, [r3, #0]
      break;
 800a8c8:	e16c      	b.n	800aba4 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a8ca:	2112      	movs	r1, #18
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fa69 	bl	800ada4 <USBH_Get_DevDesc>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d103      	bne.n	800a8e4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a8e2:	e161      	b.n	800aba8 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	f040 815e 	bne.w	800aba8 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a902:	2b03      	cmp	r3, #3
 800a904:	d903      	bls.n	800a90e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	220d      	movs	r2, #13
 800a90a:	701a      	strb	r2, [r3, #0]
      break;
 800a90c:	e14c      	b.n	800aba8 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	795b      	ldrb	r3, [r3, #5]
 800a912:	4619      	mov	r1, r3
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f001 f9ad 	bl	800bc74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	791b      	ldrb	r3, [r3, #4]
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f001 f9a7 	bl	800bc74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
      break;
 800a932:	e139      	b.n	800aba8 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a934:	2101      	movs	r1, #1
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 faf3 	bl	800af22 <USBH_SetAddress>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d130      	bne.n	800a9a8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a946:	2002      	movs	r0, #2
 800a948:	f005 ffaf 	bl	80108aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2203      	movs	r2, #3
 800a958:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7919      	ldrb	r1, [r3, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a96e:	9202      	str	r2, [sp, #8]
 800a970:	2200      	movs	r2, #0
 800a972:	9201      	str	r2, [sp, #4]
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	4603      	mov	r3, r0
 800a978:	2280      	movs	r2, #128	@ 0x80
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f001 f92a 	bl	800bbd4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	7959      	ldrb	r1, [r3, #5]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a994:	9202      	str	r2, [sp, #8]
 800a996:	2200      	movs	r2, #0
 800a998:	9201      	str	r2, [sp, #4]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	4603      	mov	r3, r0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 f917 	bl	800bbd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9a6:	e101      	b.n	800abac <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	f040 80fe 	bne.w	800abac <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	220d      	movs	r2, #13
 800a9b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	705a      	strb	r2, [r3, #1]
      break;
 800a9bc:	e0f6      	b.n	800abac <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a9be:	2109      	movs	r1, #9
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 fa1b 	bl	800adfc <USBH_Get_CfgDesc>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9ca:	7bbb      	ldrb	r3, [r7, #14]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d103      	bne.n	800a9d8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2204      	movs	r2, #4
 800a9d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9d6:	e0eb      	b.n	800abb0 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9d8:	7bbb      	ldrb	r3, [r7, #14]
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	f040 80e8 	bne.w	800abb0 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d903      	bls.n	800aa02 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	220d      	movs	r2, #13
 800a9fe:	701a      	strb	r2, [r3, #0]
      break;
 800aa00:	e0d6      	b.n	800abb0 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	795b      	ldrb	r3, [r3, #5]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 f933 	bl	800bc74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	791b      	ldrb	r3, [r3, #4]
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f001 f92d 	bl	800bc74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	701a      	strb	r2, [r3, #0]
      break;
 800aa26:	e0c3      	b.n	800abb0 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f9e3 	bl	800adfc <USBH_Get_CfgDesc>
 800aa36:	4603      	mov	r3, r0
 800aa38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d103      	bne.n	800aa48 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2205      	movs	r2, #5
 800aa44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa46:	e0b5      	b.n	800abb4 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa48:	7bbb      	ldrb	r3, [r7, #14]
 800aa4a:	2b03      	cmp	r3, #3
 800aa4c:	f040 80b2 	bne.w	800abb4 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa56:	3301      	adds	r3, #1
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d903      	bls.n	800aa72 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	220d      	movs	r2, #13
 800aa6e:	701a      	strb	r2, [r3, #0]
      break;
 800aa70:	e0a0      	b.n	800abb4 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	795b      	ldrb	r3, [r3, #5]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f8fb 	bl	800bc74 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	791b      	ldrb	r3, [r3, #4]
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f001 f8f5 	bl	800bc74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	701a      	strb	r2, [r3, #0]
      break;
 800aa96:	e08d      	b.n	800abb4 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d025      	beq.n	800aaee <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aaae:	23ff      	movs	r3, #255	@ 0xff
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f9cd 	bl	800ae50 <USBH_Get_StringDesc>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2206      	movs	r2, #6
 800aac4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800aac6:	2300      	movs	r3, #0
 800aac8:	2200      	movs	r2, #0
 800aaca:	2105      	movs	r1, #5
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	f000 f91f 	bl	800ad10 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aad2:	e071      	b.n	800abb8 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d16e      	bne.n	800abb8 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2206      	movs	r2, #6
 800aade:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800aae0:	2300      	movs	r3, #0
 800aae2:	2200      	movs	r2, #0
 800aae4:	2105      	movs	r1, #5
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f912 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800aaec:	e064      	b.n	800abb8 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2206      	movs	r2, #6
 800aaf2:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2105      	movs	r1, #5
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f908 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800ab00:	e05a      	b.n	800abb8 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d01f      	beq.n	800ab4c <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab18:	23ff      	movs	r3, #255	@ 0xff
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f998 	bl	800ae50 <USBH_Get_StringDesc>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d103      	bne.n	800ab32 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2207      	movs	r2, #7
 800ab2e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800ab30:	e044      	b.n	800abbc <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d141      	bne.n	800abbc <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2207      	movs	r2, #7
 800ab3c:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2200      	movs	r2, #0
 800ab42:	2105      	movs	r1, #5
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f8e3 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800ab4a:	e037      	b.n	800abbc <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2207      	movs	r2, #7
 800ab50:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab52:	2300      	movs	r3, #0
 800ab54:	2200      	movs	r2, #0
 800ab56:	2105      	movs	r1, #5
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f8d9 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800ab5e:	e02d      	b.n	800abbc <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d017      	beq.n	800ab9a <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab76:	23ff      	movs	r3, #255	@ 0xff
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f969 	bl	800ae50 <USBH_Get_StringDesc>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d102      	bne.n	800ab8e <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ab8c:	e018      	b.n	800abc0 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d115      	bne.n	800abc0 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]
      break;
 800ab98:	e012      	b.n	800abc0 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab9e:	e00f      	b.n	800abc0 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800aba0:	bf00      	nop
 800aba2:	e00e      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800aba4:	bf00      	nop
 800aba6:	e00c      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800aba8:	bf00      	nop
 800abaa:	e00a      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800abac:	bf00      	nop
 800abae:	e008      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800abb0:	bf00      	nop
 800abb2:	e006      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800abb4:	bf00      	nop
 800abb6:	e004      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800abb8:	bf00      	nop
 800abba:	e002      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <USBH_HandleEnum+0x3f2>
      break;
 800abc0:	bf00      	nop
  }
  return Status;
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b082      	sub	sp, #8
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f804 	bl	800ac0e <USBH_HandleSof>
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b0b      	cmp	r3, #11
 800ac1e:	d10a      	bne.n	800ac36 <USBH_HandleSof+0x28>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d005      	beq.n	800ac36 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	4798      	blx	r3
  }
}
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	2200      	movs	r2, #0
 800ac52:	2101      	movs	r1, #1
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f85b 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ac5a:	bf00      	nop
}
 800ac5c:	3708      	adds	r7, #8
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ac7a:	bf00      	nop
}
 800ac7c:	370c      	adds	r7, #12
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800aca6:	2300      	movs	r3, #0
 800aca8:	2200      	movs	r2, #0
 800acaa:	2101      	movs	r1, #1
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f82f 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f005 fc98 	bl	8010612 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	791b      	ldrb	r3, [r3, #4]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 ffc3 	bl	800bc74 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	795b      	ldrb	r3, [r3, #5]
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 ffbd 	bl	800bc74 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800acfa:	2300      	movs	r3, #0
 800acfc:	2200      	movs	r2, #0
 800acfe:	2101      	movs	r1, #1
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f805 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	607a      	str	r2, [r7, #4]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800ad20:	7afa      	ldrb	r2, [r7, #11]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f001 fa8c 	bl	800c24c <osMessageQueueGetSpace>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	b2da      	uxtb	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f001 f9c0 	bl	800c0d0 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ad6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad70:	2200      	movs	r2, #0
 800ad72:	f001 fa0d 	bl	800c190 <osMessageQueueGet>
 800ad76:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1f0      	bne.n	800ad60 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7ff fb0c 	bl	800a39c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ad84:	e7ec      	b.n	800ad60 <USBH_Process_OS+0x8>

0800ad86 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2200      	movs	r2, #0
 800ad92:	2101      	movs	r1, #1
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7ff ffbb 	bl	800ad10 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b086      	sub	sp, #24
 800ada8:	af02      	add	r7, sp, #8
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800adb0:	887b      	ldrh	r3, [r7, #2]
 800adb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adb6:	d901      	bls.n	800adbc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800adb8:	2303      	movs	r3, #3
 800adba:	e01b      	b.n	800adf4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800adc2:	887b      	ldrh	r3, [r7, #2]
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	4613      	mov	r3, r2
 800adc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800adcc:	2100      	movs	r1, #0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f872 	bl	800aeb8 <USBH_GetDescriptor>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d109      	bne.n	800adf2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ade4:	887a      	ldrh	r2, [r7, #2]
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f929 	bl	800b040 <USBH_ParseDevDesc>
 800adee:	4603      	mov	r3, r0
 800adf0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	331c      	adds	r3, #28
 800ae0c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ae0e:	887b      	ldrh	r3, [r7, #2]
 800ae10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae14:	d901      	bls.n	800ae1a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e016      	b.n	800ae48 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ae1a:	887b      	ldrh	r3, [r7, #2]
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae24:	2100      	movs	r1, #0
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f846 	bl	800aeb8 <USBH_GetDescriptor>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d107      	bne.n	800ae46 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ae36:	887b      	ldrh	r3, [r7, #2]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f9af 	bl	800b1a0 <USBH_ParseCfgDesc>
 800ae42:	4603      	mov	r3, r0
 800ae44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	72fb      	strb	r3, [r7, #11]
 800ae60:	4613      	mov	r3, r2
 800ae62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ae64:	893b      	ldrh	r3, [r7, #8]
 800ae66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae6a:	d802      	bhi.n	800ae72 <USBH_Get_StringDesc+0x22>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e01c      	b.n	800aeb0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ae76:	7afb      	ldrb	r3, [r7, #11]
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ae7e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae86:	893b      	ldrh	r3, [r7, #8]
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f000 f812 	bl	800aeb8 <USBH_GetDescriptor>
 800ae94:	4603      	mov	r3, r0
 800ae96:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ae98:	7dfb      	ldrb	r3, [r7, #23]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aea4:	893a      	ldrh	r2, [r7, #8]
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fb8c 	bl	800b5c6 <USBH_ParseStringDesc>
  }

  return status;
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	607b      	str	r3, [r7, #4]
 800aec2:	460b      	mov	r3, r1
 800aec4:	72fb      	strb	r3, [r7, #11]
 800aec6:	4613      	mov	r3, r2
 800aec8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	789b      	ldrb	r3, [r3, #2]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d11c      	bne.n	800af0c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aed2:	7afb      	ldrb	r3, [r7, #11]
 800aed4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2206      	movs	r2, #6
 800aee2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	893a      	ldrh	r2, [r7, #8]
 800aee8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aeea:	893b      	ldrh	r3, [r7, #8]
 800aeec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aef0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aef4:	d104      	bne.n	800af00 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f240 4209 	movw	r2, #1033	@ 0x409
 800aefc:	829a      	strh	r2, [r3, #20]
 800aefe:	e002      	b.n	800af06 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	8b3a      	ldrh	r2, [r7, #24]
 800af0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800af0c:	8b3b      	ldrh	r3, [r7, #24]
 800af0e:	461a      	mov	r2, r3
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 fba4 	bl	800b660 <USBH_CtlReq>
 800af18:	4603      	mov	r3, r0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b082      	sub	sp, #8
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	789b      	ldrb	r3, [r3, #2]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d10f      	bne.n	800af56 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2205      	movs	r2, #5
 800af40:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800af42:	78fb      	ldrb	r3, [r7, #3]
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af56:	2200      	movs	r2, #0
 800af58:	2100      	movs	r1, #0
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fb80 	bl	800b660 <USBH_CtlReq>
 800af60:	4603      	mov	r3, r0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}

0800af6a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800af6a:	b580      	push	{r7, lr}
 800af6c:	b082      	sub	sp, #8
 800af6e:	af00      	add	r7, sp, #0
 800af70:	6078      	str	r0, [r7, #4]
 800af72:	460b      	mov	r3, r1
 800af74:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	789b      	ldrb	r3, [r3, #2]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d10e      	bne.n	800af9c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2209      	movs	r2, #9
 800af88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	887a      	ldrh	r2, [r7, #2]
 800af8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af9c:	2200      	movs	r2, #0
 800af9e:	2100      	movs	r1, #0
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fb5d 	bl	800b660 <USBH_CtlReq>
 800afa6:	4603      	mov	r3, r0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	789b      	ldrb	r3, [r3, #2]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d10f      	bne.n	800afe4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2203      	movs	r2, #3
 800afce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800afd0:	78fb      	ldrb	r3, [r7, #3]
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afe4:	2200      	movs	r2, #0
 800afe6:	2100      	movs	r1, #0
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fb39 	bl	800b660 <USBH_CtlReq>
 800afee:	4603      	mov	r3, r0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	789b      	ldrb	r3, [r3, #2]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d10f      	bne.n	800b02c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b01e:	78fb      	ldrb	r3, [r7, #3]
 800b020:	b29a      	uxth	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b02c:	2200      	movs	r2, #0
 800b02e:	2100      	movs	r1, #0
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 fb15 	bl	800b660 <USBH_CtlReq>
 800b036:	4603      	mov	r3, r0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	4613      	mov	r3, r2
 800b04c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b054:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b060:	2302      	movs	r3, #2
 800b062:	e094      	b.n	800b18e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	781a      	ldrb	r2, [r3, #0]
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	785a      	ldrb	r2, [r3, #1]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	3302      	adds	r3, #2
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	3303      	adds	r3, #3
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	021b      	lsls	r3, r3, #8
 800b084:	b29b      	uxth	r3, r3
 800b086:	4313      	orrs	r3, r2
 800b088:	b29a      	uxth	r2, r3
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	791a      	ldrb	r2, [r3, #4]
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	795a      	ldrb	r2, [r3, #5]
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	799a      	ldrb	r2, [r3, #6]
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	79da      	ldrb	r2, [r3, #7]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d11b      	bne.n	800b0fa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	79db      	ldrb	r3, [r3, #7]
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	dc0f      	bgt.n	800b0ea <USBH_ParseDevDesc+0xaa>
 800b0ca:	2b08      	cmp	r3, #8
 800b0cc:	db0f      	blt.n	800b0ee <USBH_ParseDevDesc+0xae>
 800b0ce:	3b08      	subs	r3, #8
 800b0d0:	4a32      	ldr	r2, [pc, #200]	@ (800b19c <USBH_ParseDevDesc+0x15c>)
 800b0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bf14      	ite	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	2300      	moveq	r3, #0
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d106      	bne.n	800b0f6 <USBH_ParseDevDesc+0xb6>
 800b0e8:	e001      	b.n	800b0ee <USBH_ParseDevDesc+0xae>
 800b0ea:	2b40      	cmp	r3, #64	@ 0x40
 800b0ec:	d003      	beq.n	800b0f6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2208      	movs	r2, #8
 800b0f2:	71da      	strb	r2, [r3, #7]
        break;
 800b0f4:	e000      	b.n	800b0f8 <USBH_ParseDevDesc+0xb8>
        break;
 800b0f6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b0f8:	e00e      	b.n	800b118 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b100:	2b02      	cmp	r3, #2
 800b102:	d107      	bne.n	800b114 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	79db      	ldrb	r3, [r3, #7]
 800b108:	2b08      	cmp	r3, #8
 800b10a:	d005      	beq.n	800b118 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2208      	movs	r2, #8
 800b110:	71da      	strb	r2, [r3, #7]
 800b112:	e001      	b.n	800b118 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b114:	2303      	movs	r3, #3
 800b116:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b118:	88fb      	ldrh	r3, [r7, #6]
 800b11a:	2b08      	cmp	r3, #8
 800b11c:	d936      	bls.n	800b18c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	3308      	adds	r3, #8
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	3309      	adds	r3, #9
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	b29b      	uxth	r3, r3
 800b130:	4313      	orrs	r3, r2
 800b132:	b29a      	uxth	r2, r3
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	330a      	adds	r3, #10
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	461a      	mov	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	330b      	adds	r3, #11
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	021b      	lsls	r3, r3, #8
 800b148:	b29b      	uxth	r3, r3
 800b14a:	4313      	orrs	r3, r2
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	330c      	adds	r3, #12
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	461a      	mov	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	330d      	adds	r3, #13
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	021b      	lsls	r3, r3, #8
 800b162:	b29b      	uxth	r3, r3
 800b164:	4313      	orrs	r3, r2
 800b166:	b29a      	uxth	r2, r3
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	7b9a      	ldrb	r2, [r3, #14]
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	7bda      	ldrb	r2, [r3, #15]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	7c1a      	ldrb	r2, [r3, #16]
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	7c5a      	ldrb	r2, [r3, #17]
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	371c      	adds	r7, #28
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	01000101 	.word	0x01000101

0800b1a0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08c      	sub	sp, #48	@ 0x30
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b1b4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	e0de      	b.n	800b390 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b09      	cmp	r3, #9
 800b1dc:	d002      	beq.n	800b1e4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b1de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e0:	2209      	movs	r2, #9
 800b1e2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	781a      	ldrb	r2, [r3, #0]
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	785a      	ldrb	r2, [r3, #1]
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	3303      	adds	r3, #3
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	021b      	lsls	r3, r3, #8
 800b204:	b29b      	uxth	r3, r3
 800b206:	4313      	orrs	r3, r2
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b20e:	bf28      	it	cs
 800b210:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b214:	b29a      	uxth	r2, r3
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	791a      	ldrb	r2, [r3, #4]
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	795a      	ldrb	r2, [r3, #5]
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	799a      	ldrb	r2, [r3, #6]
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	79da      	ldrb	r2, [r3, #7]
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	7a1a      	ldrb	r2, [r3, #8]
 800b23e:	6a3b      	ldr	r3, [r7, #32]
 800b240:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b242:	88fb      	ldrh	r3, [r7, #6]
 800b244:	2b09      	cmp	r3, #9
 800b246:	f240 80a1 	bls.w	800b38c <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b24a:	2309      	movs	r3, #9
 800b24c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b252:	e085      	b.n	800b360 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b254:	f107 0316 	add.w	r3, r7, #22
 800b258:	4619      	mov	r1, r3
 800b25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b25c:	f000 f9e6 	bl	800b62c <USBH_GetNextDesc>
 800b260:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b04      	cmp	r3, #4
 800b268:	d17a      	bne.n	800b360 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	2b09      	cmp	r3, #9
 800b270:	d002      	beq.n	800b278 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	2209      	movs	r2, #9
 800b276:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b27c:	221a      	movs	r2, #26
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	3308      	adds	r3, #8
 800b284:	6a3a      	ldr	r2, [r7, #32]
 800b286:	4413      	add	r3, r2
 800b288:	3302      	adds	r3, #2
 800b28a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b28c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b28e:	69f8      	ldr	r0, [r7, #28]
 800b290:	f000 f882 	bl	800b398 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b29e:	e043      	b.n	800b328 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b2a0:	f107 0316 	add.w	r3, r7, #22
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2a8:	f000 f9c0 	bl	800b62c <USBH_GetNextDesc>
 800b2ac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b0:	785b      	ldrb	r3, [r3, #1]
 800b2b2:	2b05      	cmp	r3, #5
 800b2b4:	d138      	bne.n	800b328 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	795b      	ldrb	r3, [r3, #5]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d113      	bne.n	800b2e6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b2c2:	2b02      	cmp	r3, #2
 800b2c4:	d003      	beq.n	800b2ce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	799b      	ldrb	r3, [r3, #6]
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d10b      	bne.n	800b2e6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	79db      	ldrb	r3, [r3, #7]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <USBH_ParseCfgDesc+0x14e>
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	2b09      	cmp	r3, #9
 800b2dc:	d007      	beq.n	800b2ee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e0:	2209      	movs	r2, #9
 800b2e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2e4:	e003      	b.n	800b2ee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	2207      	movs	r2, #7
 800b2ea:	701a      	strb	r2, [r3, #0]
 800b2ec:	e000      	b.n	800b2f0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2ee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2f8:	3201      	adds	r2, #1
 800b2fa:	00d2      	lsls	r2, r2, #3
 800b2fc:	211a      	movs	r1, #26
 800b2fe:	fb01 f303 	mul.w	r3, r1, r3
 800b302:	4413      	add	r3, r2
 800b304:	3308      	adds	r3, #8
 800b306:	6a3a      	ldr	r2, [r7, #32]
 800b308:	4413      	add	r3, r2
 800b30a:	3304      	adds	r3, #4
 800b30c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b30e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b310:	69b9      	ldr	r1, [r7, #24]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 f86f 	bl	800b3f6 <USBH_ParseEPDesc>
 800b318:	4603      	mov	r3, r0
 800b31a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b31e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b322:	3301      	adds	r3, #1
 800b324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b328:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d80a      	bhi.n	800b346 <USBH_ParseCfgDesc+0x1a6>
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	791b      	ldrb	r3, [r3, #4]
 800b334:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b338:	429a      	cmp	r2, r3
 800b33a:	d204      	bcs.n	800b346 <USBH_ParseCfgDesc+0x1a6>
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	885a      	ldrh	r2, [r3, #2]
 800b340:	8afb      	ldrh	r3, [r7, #22]
 800b342:	429a      	cmp	r2, r3
 800b344:	d8ac      	bhi.n	800b2a0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	791b      	ldrb	r3, [r3, #4]
 800b34a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b34e:	429a      	cmp	r2, r3
 800b350:	d201      	bcs.n	800b356 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b352:	2303      	movs	r3, #3
 800b354:	e01c      	b.n	800b390 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b356:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b35a:	3301      	adds	r3, #1
 800b35c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b364:	2b01      	cmp	r3, #1
 800b366:	d805      	bhi.n	800b374 <USBH_ParseCfgDesc+0x1d4>
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	885a      	ldrh	r2, [r3, #2]
 800b36c:	8afb      	ldrh	r3, [r7, #22]
 800b36e:	429a      	cmp	r2, r3
 800b370:	f63f af70 	bhi.w	800b254 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	791b      	ldrb	r3, [r3, #4]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	bf28      	it	cs
 800b37c:	2302      	movcs	r3, #2
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b384:	429a      	cmp	r2, r3
 800b386:	d201      	bcs.n	800b38c <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b388:	2303      	movs	r3, #3
 800b38a:	e001      	b.n	800b390 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b38c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b390:	4618      	mov	r0, r3
 800b392:	3730      	adds	r7, #48	@ 0x30
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781a      	ldrb	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	785a      	ldrb	r2, [r3, #1]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	789a      	ldrb	r2, [r3, #2]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	78da      	ldrb	r2, [r3, #3]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	791a      	ldrb	r2, [r3, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	795a      	ldrb	r2, [r3, #5]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	799a      	ldrb	r2, [r3, #6]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	79da      	ldrb	r2, [r3, #7]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	7a1a      	ldrb	r2, [r3, #8]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	721a      	strb	r2, [r3, #8]
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b087      	sub	sp, #28
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	60f8      	str	r0, [r7, #12]
 800b3fe:	60b9      	str	r1, [r7, #8]
 800b400:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	781a      	ldrb	r2, [r3, #0]
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	785a      	ldrb	r2, [r3, #1]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	789a      	ldrb	r2, [r3, #2]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	78da      	ldrb	r2, [r3, #3]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3304      	adds	r3, #4
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	3305      	adds	r3, #5
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	b29b      	uxth	r3, r3
 800b438:	4313      	orrs	r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	799a      	ldrb	r2, [r3, #6]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	889b      	ldrh	r3, [r3, #4]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d009      	beq.n	800b464 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b458:	d804      	bhi.n	800b464 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b45e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b462:	d901      	bls.n	800b468 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b464:	2303      	movs	r3, #3
 800b466:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d136      	bne.n	800b4e0 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	78db      	ldrb	r3, [r3, #3]
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d108      	bne.n	800b490 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	889b      	ldrh	r3, [r3, #4]
 800b482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b486:	f240 8097 	bls.w	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b48a:	2303      	movs	r3, #3
 800b48c:	75fb      	strb	r3, [r7, #23]
 800b48e:	e093      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	78db      	ldrb	r3, [r3, #3]
 800b494:	f003 0303 	and.w	r3, r3, #3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d107      	bne.n	800b4ac <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	889b      	ldrh	r3, [r3, #4]
 800b4a0:	2b40      	cmp	r3, #64	@ 0x40
 800b4a2:	f240 8089 	bls.w	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	75fb      	strb	r3, [r7, #23]
 800b4aa:	e085      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	78db      	ldrb	r3, [r3, #3]
 800b4b0:	f003 0303 	and.w	r3, r3, #3
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d005      	beq.n	800b4c4 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	78db      	ldrb	r3, [r3, #3]
 800b4bc:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d10a      	bne.n	800b4da <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	799b      	ldrb	r3, [r3, #6]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <USBH_ParseEPDesc+0xde>
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	799b      	ldrb	r3, [r3, #6]
 800b4d0:	2b10      	cmp	r3, #16
 800b4d2:	d970      	bls.n	800b5b6 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b4d8:	e06d      	b.n	800b5b6 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	75fb      	strb	r3, [r7, #23]
 800b4de:	e06b      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d13c      	bne.n	800b564 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	78db      	ldrb	r3, [r3, #3]
 800b4ee:	f003 0303 	and.w	r3, r3, #3
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d005      	beq.n	800b502 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	78db      	ldrb	r3, [r3, #3]
 800b4fa:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	889b      	ldrh	r3, [r3, #4]
 800b506:	2b40      	cmp	r3, #64	@ 0x40
 800b508:	d956      	bls.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b50a:	2303      	movs	r3, #3
 800b50c:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b50e:	e053      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	78db      	ldrb	r3, [r3, #3]
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d10e      	bne.n	800b53a <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	799b      	ldrb	r3, [r3, #6]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d007      	beq.n	800b534 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b528:	2b10      	cmp	r3, #16
 800b52a:	d803      	bhi.n	800b534 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b530:	2b40      	cmp	r3, #64	@ 0x40
 800b532:	d941      	bls.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b534:	2303      	movs	r3, #3
 800b536:	75fb      	strb	r3, [r7, #23]
 800b538:	e03e      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	78db      	ldrb	r3, [r3, #3]
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	2b03      	cmp	r3, #3
 800b544:	d10b      	bne.n	800b55e <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	799b      	ldrb	r3, [r3, #6]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d004      	beq.n	800b558 <USBH_ParseEPDesc+0x162>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	889b      	ldrh	r3, [r3, #4]
 800b552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b556:	d32f      	bcc.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b558:	2303      	movs	r3, #3
 800b55a:	75fb      	strb	r3, [r7, #23]
 800b55c:	e02c      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b55e:	2303      	movs	r3, #3
 800b560:	75fb      	strb	r3, [r7, #23]
 800b562:	e029      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d120      	bne.n	800b5b0 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	78db      	ldrb	r3, [r3, #3]
 800b572:	f003 0303 	and.w	r3, r3, #3
 800b576:	2b00      	cmp	r3, #0
 800b578:	d106      	bne.n	800b588 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	889b      	ldrh	r3, [r3, #4]
 800b57e:	2b08      	cmp	r3, #8
 800b580:	d01a      	beq.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b582:	2303      	movs	r3, #3
 800b584:	75fb      	strb	r3, [r7, #23]
 800b586:	e017      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	78db      	ldrb	r3, [r3, #3]
 800b58c:	f003 0303 	and.w	r3, r3, #3
 800b590:	2b03      	cmp	r3, #3
 800b592:	d10a      	bne.n	800b5aa <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	799b      	ldrb	r3, [r3, #6]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d003      	beq.n	800b5a4 <USBH_ParseEPDesc+0x1ae>
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	889b      	ldrh	r3, [r3, #4]
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d909      	bls.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	75fb      	strb	r3, [r7, #23]
 800b5a8:	e006      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	75fb      	strb	r3, [r7, #23]
 800b5ae:	e003      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	75fb      	strb	r3, [r7, #23]
 800b5b4:	e000      	b.n	800b5b8 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b5b6:	bf00      	nop
  }

  return status;
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	371c      	adds	r7, #28
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b087      	sub	sp, #28
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	781b      	ldrb	r3, [r3, #0]
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d120      	bne.n	800b620 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	1e9a      	subs	r2, r3, #2
 800b5e4:	88fb      	ldrh	r3, [r7, #6]
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	bf28      	it	cs
 800b5ea:	4613      	movcs	r3, r2
 800b5ec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3302      	adds	r3, #2
 800b5f2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	82fb      	strh	r3, [r7, #22]
 800b5f8:	e00b      	b.n	800b612 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b5fa:	8afb      	ldrh	r3, [r7, #22]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	781a      	ldrb	r2, [r3, #0]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	3301      	adds	r3, #1
 800b60a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b60c:	8afb      	ldrh	r3, [r7, #22]
 800b60e:	3302      	adds	r3, #2
 800b610:	82fb      	strh	r3, [r7, #22]
 800b612:	8afa      	ldrh	r2, [r7, #22]
 800b614:	8abb      	ldrh	r3, [r7, #20]
 800b616:	429a      	cmp	r2, r3
 800b618:	d3ef      	bcc.n	800b5fa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2200      	movs	r2, #0
 800b61e:	701a      	strb	r2, [r3, #0]
  }
}
 800b620:	bf00      	nop
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	7812      	ldrb	r2, [r2, #0]
 800b63e:	4413      	add	r3, r2
 800b640:	b29a      	uxth	r2, r3
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4413      	add	r3, r2
 800b650:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b652:	68fb      	ldr	r3, [r7, #12]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3714      	adds	r7, #20
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b66e:	2301      	movs	r3, #1
 800b670:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	789b      	ldrb	r3, [r3, #2]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d002      	beq.n	800b680 <USBH_CtlReq+0x20>
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d015      	beq.n	800b6aa <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b67e:	e033      	b.n	800b6e8 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	88fa      	ldrh	r2, [r7, #6]
 800b68a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2201      	movs	r2, #1
 800b690:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2202      	movs	r2, #2
 800b696:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b698:	2301      	movs	r3, #1
 800b69a:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b69c:	2300      	movs	r3, #0
 800b69e:	2200      	movs	r2, #0
 800b6a0:	2103      	movs	r1, #3
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f7ff fb34 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b6a8:	e01e      	b.n	800b6e8 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f822 	bl	800b6f4 <USBH_HandleControl>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d002      	beq.n	800b6c0 <USBH_CtlReq+0x60>
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d106      	bne.n	800b6ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	761a      	strb	r2, [r3, #24]
 800b6cc:	e005      	b.n	800b6da <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d102      	bne.n	800b6da <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b6da:	2300      	movs	r3, #0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2103      	movs	r1, #3
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff fb15 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b6e6:	bf00      	nop
  }
  return status;
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3718      	adds	r7, #24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b700:	2300      	movs	r3, #0
 800b702:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	7e1b      	ldrb	r3, [r3, #24]
 800b708:	3b01      	subs	r3, #1
 800b70a:	2b0a      	cmp	r3, #10
 800b70c:	f200 81b2 	bhi.w	800ba74 <USBH_HandleControl+0x380>
 800b710:	a201      	add	r2, pc, #4	@ (adr r2, 800b718 <USBH_HandleControl+0x24>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b745 	.word	0x0800b745
 800b71c:	0800b75f 	.word	0x0800b75f
 800b720:	0800b7e1 	.word	0x0800b7e1
 800b724:	0800b807 	.word	0x0800b807
 800b728:	0800b865 	.word	0x0800b865
 800b72c:	0800b88f 	.word	0x0800b88f
 800b730:	0800b911 	.word	0x0800b911
 800b734:	0800b933 	.word	0x0800b933
 800b738:	0800b995 	.word	0x0800b995
 800b73c:	0800b9bb 	.word	0x0800b9bb
 800b740:	0800ba1d 	.word	0x0800ba1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f103 0110 	add.w	r1, r3, #16
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	795b      	ldrb	r3, [r3, #5]
 800b74e:	461a      	mov	r2, r3
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f99f 	bl	800ba94 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2202      	movs	r2, #2
 800b75a:	761a      	strb	r2, [r3, #24]
      break;
 800b75c:	e195      	b.n	800ba8a <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	795b      	ldrb	r3, [r3, #5]
 800b762:	4619      	mov	r1, r3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f005 f843 	bl	80107f0 <USBH_LL_GetURBState>
 800b76a:	4603      	mov	r3, r0
 800b76c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b76e:	7bbb      	ldrb	r3, [r7, #14]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d124      	bne.n	800b7be <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7c1b      	ldrb	r3, [r3, #16]
 800b778:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b77c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	8adb      	ldrh	r3, [r3, #22]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b786:	7b7b      	ldrb	r3, [r7, #13]
 800b788:	2b80      	cmp	r3, #128	@ 0x80
 800b78a:	d103      	bne.n	800b794 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2203      	movs	r2, #3
 800b790:	761a      	strb	r2, [r3, #24]
 800b792:	e00d      	b.n	800b7b0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2205      	movs	r2, #5
 800b798:	761a      	strb	r2, [r3, #24]
 800b79a:	e009      	b.n	800b7b0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b79c:	7b7b      	ldrb	r3, [r7, #13]
 800b79e:	2b80      	cmp	r3, #128	@ 0x80
 800b7a0:	d103      	bne.n	800b7aa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2209      	movs	r2, #9
 800b7a6:	761a      	strb	r2, [r3, #24]
 800b7a8:	e002      	b.n	800b7b0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2207      	movs	r2, #7
 800b7ae:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	2103      	movs	r1, #3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f7ff faaa 	bl	800ad10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b7bc:	e15c      	b.n	800ba78 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	2b04      	cmp	r3, #4
 800b7c2:	d003      	beq.n	800b7cc <USBH_HandleControl+0xd8>
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	f040 8156 	bne.w	800ba78 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	220b      	movs	r2, #11
 800b7d0:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2103      	movs	r1, #3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff fa99 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b7de:	e14b      	b.n	800ba78 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6899      	ldr	r1, [r3, #8]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	899a      	ldrh	r2, [r3, #12]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	791b      	ldrb	r3, [r3, #4]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f98a 	bl	800bb12 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2204      	movs	r2, #4
 800b802:	761a      	strb	r2, [r3, #24]
      break;
 800b804:	e141      	b.n	800ba8a <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	791b      	ldrb	r3, [r3, #4]
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f004 ffef 	bl	80107f0 <USBH_LL_GetURBState>
 800b812:	4603      	mov	r3, r0
 800b814:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d109      	bne.n	800b830 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2209      	movs	r2, #9
 800b820:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	2103      	movs	r1, #3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff fa71 	bl	800ad10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b82e:	e125      	b.n	800ba7c <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	2b05      	cmp	r3, #5
 800b834:	d108      	bne.n	800b848 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800b836:	2303      	movs	r3, #3
 800b838:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b83a:	2300      	movs	r3, #0
 800b83c:	2200      	movs	r2, #0
 800b83e:	2103      	movs	r1, #3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f7ff fa65 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b846:	e119      	b.n	800ba7c <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800b848:	7bbb      	ldrb	r3, [r7, #14]
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	f040 8116 	bne.w	800ba7c <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	220b      	movs	r2, #11
 800b854:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b856:	2300      	movs	r3, #0
 800b858:	2200      	movs	r2, #0
 800b85a:	2103      	movs	r1, #3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff fa57 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b862:	e10b      	b.n	800ba7c <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6899      	ldr	r1, [r3, #8]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	899a      	ldrh	r2, [r3, #12]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	795b      	ldrb	r3, [r3, #5]
 800b870:	2001      	movs	r0, #1
 800b872:	9000      	str	r0, [sp, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f927 	bl	800bac8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2206      	movs	r2, #6
 800b88a:	761a      	strb	r2, [r3, #24]
      break;
 800b88c:	e0fd      	b.n	800ba8a <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	795b      	ldrb	r3, [r3, #5]
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f004 ffab 	bl	80107f0 <USBH_LL_GetURBState>
 800b89a:	4603      	mov	r3, r0
 800b89c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b89e:	7bbb      	ldrb	r3, [r7, #14]
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d109      	bne.n	800b8b8 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2207      	movs	r2, #7
 800b8a8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2103      	movs	r1, #3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7ff fa2d 	bl	800ad10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b8b6:	e0e3      	b.n	800ba80 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	2b05      	cmp	r3, #5
 800b8bc:	d10b      	bne.n	800b8d6 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	220c      	movs	r2, #12
 800b8c2:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2103      	movs	r1, #3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fa1e 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b8d4:	e0d4      	b.n	800ba80 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8d6:	7bbb      	ldrb	r3, [r7, #14]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d109      	bne.n	800b8f0 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2205      	movs	r2, #5
 800b8e0:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2103      	movs	r1, #3
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f7ff fa11 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b8ee:	e0c7      	b.n	800ba80 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800b8f0:	7bbb      	ldrb	r3, [r7, #14]
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	f040 80c4 	bne.w	800ba80 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	220b      	movs	r2, #11
 800b8fc:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b8fe:	2302      	movs	r3, #2
 800b900:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b902:	2300      	movs	r3, #0
 800b904:	2200      	movs	r2, #0
 800b906:	2103      	movs	r1, #3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7ff fa01 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b90e:	e0b7      	b.n	800ba80 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	791b      	ldrb	r3, [r3, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	2100      	movs	r1, #0
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f8fa 	bl	800bb12 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b924:	b29a      	uxth	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2208      	movs	r2, #8
 800b92e:	761a      	strb	r2, [r3, #24]

      break;
 800b930:	e0ab      	b.n	800ba8a <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	791b      	ldrb	r3, [r3, #4]
 800b936:	4619      	mov	r1, r3
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f004 ff59 	bl	80107f0 <USBH_LL_GetURBState>
 800b93e:	4603      	mov	r3, r0
 800b940:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b942:	7bbb      	ldrb	r3, [r7, #14]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d10b      	bne.n	800b960 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	220d      	movs	r2, #13
 800b94c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b952:	2300      	movs	r3, #0
 800b954:	2200      	movs	r2, #0
 800b956:	2103      	movs	r1, #3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7ff f9d9 	bl	800ad10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b95e:	e091      	b.n	800ba84 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800b960:	7bbb      	ldrb	r3, [r7, #14]
 800b962:	2b04      	cmp	r3, #4
 800b964:	d109      	bne.n	800b97a <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	220b      	movs	r2, #11
 800b96a:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b96c:	2300      	movs	r3, #0
 800b96e:	2200      	movs	r2, #0
 800b970:	2103      	movs	r1, #3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff f9cc 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b978:	e084      	b.n	800ba84 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800b97a:	7bbb      	ldrb	r3, [r7, #14]
 800b97c:	2b05      	cmp	r3, #5
 800b97e:	f040 8081 	bne.w	800ba84 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800b982:	2303      	movs	r3, #3
 800b984:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	2103      	movs	r1, #3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff f9bf 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800b992:	e077      	b.n	800ba84 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	795b      	ldrb	r3, [r3, #5]
 800b998:	2201      	movs	r2, #1
 800b99a:	9200      	str	r2, [sp, #0]
 800b99c:	2200      	movs	r2, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f891 	bl	800bac8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	761a      	strb	r2, [r3, #24]
      break;
 800b9b8:	e067      	b.n	800ba8a <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	795b      	ldrb	r3, [r3, #5]
 800b9be:	4619      	mov	r1, r3
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f004 ff15 	bl	80107f0 <USBH_LL_GetURBState>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d10b      	bne.n	800b9e8 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	220d      	movs	r2, #13
 800b9d8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2103      	movs	r1, #3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff f995 	bl	800ad10 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b9e6:	e04f      	b.n	800ba88 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9e8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d109      	bne.n	800ba02 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2209      	movs	r2, #9
 800b9f2:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	2103      	movs	r1, #3
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff f988 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800ba00:	e042      	b.n	800ba88 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800ba02:	7bbb      	ldrb	r3, [r7, #14]
 800ba04:	2b04      	cmp	r3, #4
 800ba06:	d13f      	bne.n	800ba88 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	220b      	movs	r2, #11
 800ba0c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800ba0e:	2300      	movs	r3, #0
 800ba10:	2200      	movs	r2, #0
 800ba12:	2103      	movs	r1, #3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff f97b 	bl	800ad10 <USBH_OS_PutMessage>
      break;
 800ba1a:	e035      	b.n	800ba88 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7e5b      	ldrb	r3, [r3, #25]
 800ba20:	3301      	adds	r3, #1
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	765a      	strb	r2, [r3, #25]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	7e5b      	ldrb	r3, [r3, #25]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d806      	bhi.n	800ba3e <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ba3c:	e025      	b.n	800ba8a <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ba44:	2106      	movs	r1, #6
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	795b      	ldrb	r3, [r3, #5]
 800ba54:	4619      	mov	r1, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f90c 	bl	800bc74 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	791b      	ldrb	r3, [r3, #4]
 800ba60:	4619      	mov	r1, r3
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f000 f906 	bl	800bc74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ba6e:	2302      	movs	r3, #2
 800ba70:	73fb      	strb	r3, [r7, #15]
      break;
 800ba72:	e00a      	b.n	800ba8a <USBH_HandleControl+0x396>

    default:
      break;
 800ba74:	bf00      	nop
 800ba76:	e008      	b.n	800ba8a <USBH_HandleControl+0x396>
      break;
 800ba78:	bf00      	nop
 800ba7a:	e006      	b.n	800ba8a <USBH_HandleControl+0x396>
      break;
 800ba7c:	bf00      	nop
 800ba7e:	e004      	b.n	800ba8a <USBH_HandleControl+0x396>
      break;
 800ba80:	bf00      	nop
 800ba82:	e002      	b.n	800ba8a <USBH_HandleControl+0x396>
      break;
 800ba84:	bf00      	nop
 800ba86:	e000      	b.n	800ba8a <USBH_HandleControl+0x396>
      break;
 800ba88:	bf00      	nop
  }

  return status;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af04      	add	r7, sp, #16
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800baa2:	79f9      	ldrb	r1, [r7, #7]
 800baa4:	2300      	movs	r3, #0
 800baa6:	9303      	str	r3, [sp, #12]
 800baa8:	2308      	movs	r3, #8
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	2300      	movs	r3, #0
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2300      	movs	r3, #0
 800bab6:	2200      	movs	r2, #0
 800bab8:	68f8      	ldr	r0, [r7, #12]
 800baba:	f004 fe68 	bl	801078e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af04      	add	r7, sp, #16
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	4611      	mov	r1, r2
 800bad4:	461a      	mov	r2, r3
 800bad6:	460b      	mov	r3, r1
 800bad8:	80fb      	strh	r3, [r7, #6]
 800bada:	4613      	mov	r3, r2
 800badc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bae8:	2300      	movs	r3, #0
 800baea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800baec:	7979      	ldrb	r1, [r7, #5]
 800baee:	7e3b      	ldrb	r3, [r7, #24]
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	9302      	str	r3, [sp, #8]
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	9301      	str	r3, [sp, #4]
 800bafa:	2301      	movs	r3, #1
 800bafc:	9300      	str	r3, [sp, #0]
 800bafe:	2300      	movs	r3, #0
 800bb00:	2200      	movs	r2, #0
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f004 fe43 	bl	801078e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b088      	sub	sp, #32
 800bb16:	af04      	add	r7, sp, #16
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	60b9      	str	r1, [r7, #8]
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	461a      	mov	r2, r3
 800bb20:	460b      	mov	r3, r1
 800bb22:	80fb      	strh	r3, [r7, #6]
 800bb24:	4613      	mov	r3, r2
 800bb26:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb28:	7979      	ldrb	r1, [r7, #5]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9303      	str	r3, [sp, #12]
 800bb2e:	88fb      	ldrh	r3, [r7, #6]
 800bb30:	9302      	str	r3, [sp, #8]
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	2301      	movs	r3, #1
 800bb38:	9300      	str	r3, [sp, #0]
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f004 fe25 	bl	801078e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bb44:	2300      	movs	r3, #0

}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}

0800bb4e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b088      	sub	sp, #32
 800bb52:	af04      	add	r7, sp, #16
 800bb54:	60f8      	str	r0, [r7, #12]
 800bb56:	60b9      	str	r1, [r7, #8]
 800bb58:	4611      	mov	r1, r2
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	80fb      	strh	r3, [r7, #6]
 800bb60:	4613      	mov	r3, r2
 800bb62:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d001      	beq.n	800bb72 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb72:	7979      	ldrb	r1, [r7, #5]
 800bb74:	7e3b      	ldrb	r3, [r7, #24]
 800bb76:	9303      	str	r3, [sp, #12]
 800bb78:	88fb      	ldrh	r3, [r7, #6]
 800bb7a:	9302      	str	r3, [sp, #8]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	9301      	str	r3, [sp, #4]
 800bb80:	2301      	movs	r3, #1
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	2302      	movs	r3, #2
 800bb86:	2200      	movs	r2, #0
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f004 fe00 	bl	801078e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af04      	add	r7, sp, #16
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4611      	mov	r1, r2
 800bba4:	461a      	mov	r2, r3
 800bba6:	460b      	mov	r3, r1
 800bba8:	80fb      	strh	r3, [r7, #6]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bbae:	7979      	ldrb	r1, [r7, #5]
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	9303      	str	r3, [sp, #12]
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	9302      	str	r3, [sp, #8]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	9301      	str	r3, [sp, #4]
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f004 fde2 	bl	801078e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af04      	add	r7, sp, #16
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	4608      	mov	r0, r1
 800bbde:	4611      	mov	r1, r2
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	70fb      	strb	r3, [r7, #3]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70bb      	strb	r3, [r7, #2]
 800bbea:	4613      	mov	r3, r2
 800bbec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bbee:	7878      	ldrb	r0, [r7, #1]
 800bbf0:	78ba      	ldrb	r2, [r7, #2]
 800bbf2:	78f9      	ldrb	r1, [r7, #3]
 800bbf4:	8b3b      	ldrh	r3, [r7, #24]
 800bbf6:	9302      	str	r3, [sp, #8]
 800bbf8:	7d3b      	ldrb	r3, [r7, #20]
 800bbfa:	9301      	str	r3, [sp, #4]
 800bbfc:	7c3b      	ldrb	r3, [r7, #16]
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	4603      	mov	r3, r0
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f004 fd75 	bl	80106f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}

0800bc12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bc12:	b580      	push	{r7, lr}
 800bc14:	b082      	sub	sp, #8
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bc1e:	78fb      	ldrb	r3, [r7, #3]
 800bc20:	4619      	mov	r1, r3
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f004 fd94 	bl	8010750 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3708      	adds	r7, #8
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b084      	sub	sp, #16
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f836 	bl	800bcb0 <USBH_GetFreePipe>
 800bc44:	4603      	mov	r3, r0
 800bc46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bc48:	89fb      	ldrh	r3, [r7, #14]
 800bc4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d00a      	beq.n	800bc68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bc52:	78fa      	ldrb	r2, [r7, #3]
 800bc54:	89fb      	ldrh	r3, [r7, #14]
 800bc56:	f003 030f 	and.w	r3, r3, #15
 800bc5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	33e0      	adds	r3, #224	@ 0xe0
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	440b      	add	r3, r1
 800bc66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bc68:	89fb      	ldrh	r3, [r7, #14]
 800bc6a:	b2db      	uxtb	r3, r3
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	2b0f      	cmp	r3, #15
 800bc84:	d80d      	bhi.n	800bca2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bc86:	78fb      	ldrb	r3, [r7, #3]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	33e0      	adds	r3, #224	@ 0xe0
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	78fb      	ldrb	r3, [r7, #3]
 800bc94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc98:	6879      	ldr	r1, [r7, #4]
 800bc9a:	33e0      	adds	r3, #224	@ 0xe0
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	440b      	add	r3, r1
 800bca0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	73fb      	strb	r3, [r7, #15]
 800bcc0:	e00f      	b.n	800bce2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	33e0      	adds	r3, #224	@ 0xe0
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d102      	bne.n	800bcdc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bcd6:	7bfb      	ldrb	r3, [r7, #15]
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	e007      	b.n	800bcec <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	3301      	adds	r3, #1
 800bce0:	73fb      	strb	r3, [r7, #15]
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
 800bce4:	2b0f      	cmp	r3, #15
 800bce6:	d9ec      	bls.n	800bcc2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bce8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <__NVIC_SetPriority>:
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	6039      	str	r1, [r7, #0]
 800bd02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	db0a      	blt.n	800bd22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	490c      	ldr	r1, [pc, #48]	@ (800bd44 <__NVIC_SetPriority+0x4c>)
 800bd12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd16:	0112      	lsls	r2, r2, #4
 800bd18:	b2d2      	uxtb	r2, r2
 800bd1a:	440b      	add	r3, r1
 800bd1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bd20:	e00a      	b.n	800bd38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	4908      	ldr	r1, [pc, #32]	@ (800bd48 <__NVIC_SetPriority+0x50>)
 800bd28:	79fb      	ldrb	r3, [r7, #7]
 800bd2a:	f003 030f 	and.w	r3, r3, #15
 800bd2e:	3b04      	subs	r3, #4
 800bd30:	0112      	lsls	r2, r2, #4
 800bd32:	b2d2      	uxtb	r2, r2
 800bd34:	440b      	add	r3, r1
 800bd36:	761a      	strb	r2, [r3, #24]
}
 800bd38:	bf00      	nop
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	e000e100 	.word	0xe000e100
 800bd48:	e000ed00 	.word	0xe000ed00

0800bd4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd50:	4b05      	ldr	r3, [pc, #20]	@ (800bd68 <SysTick_Handler+0x1c>)
 800bd52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd54:	f002 ff78 	bl	800ec48 <xTaskGetSchedulerState>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d001      	beq.n	800bd62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd5e:	f004 f873 	bl	800fe48 <xPortSysTickHandler>
  }
}
 800bd62:	bf00      	nop
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	e000e010 	.word	0xe000e010

0800bd6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd70:	2100      	movs	r1, #0
 800bd72:	f06f 0004 	mvn.w	r0, #4
 800bd76:	f7ff ffbf 	bl	800bcf8 <__NVIC_SetPriority>
#endif
}
 800bd7a:	bf00      	nop
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd86:	f3ef 8305 	mrs	r3, IPSR
 800bd8a:	603b      	str	r3, [r7, #0]
  return(result);
 800bd8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd92:	f06f 0305 	mvn.w	r3, #5
 800bd96:	607b      	str	r3, [r7, #4]
 800bd98:	e00c      	b.n	800bdb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc4 <osKernelInitialize+0x44>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d105      	bne.n	800bdae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bda2:	4b08      	ldr	r3, [pc, #32]	@ (800bdc4 <osKernelInitialize+0x44>)
 800bda4:	2201      	movs	r2, #1
 800bda6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	607b      	str	r3, [r7, #4]
 800bdac:	e002      	b.n	800bdb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bdae:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bdb4:	687b      	ldr	r3, [r7, #4]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	370c      	adds	r7, #12
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	20000560 	.word	0x20000560

0800bdc8 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d005      	beq.n	800bde6 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4a0c      	ldr	r2, [pc, #48]	@ (800be10 <osKernelGetInfo+0x48>)
 800bdde:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4a0b      	ldr	r2, [pc, #44]	@ (800be10 <osKernelGetInfo+0x48>)
 800bde4:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d00c      	beq.n	800be06 <osKernelGetInfo+0x3e>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b11      	cmp	r3, #17
 800bdf6:	d901      	bls.n	800bdfc <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800bdf8:	2311      	movs	r3, #17
 800bdfa:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	4905      	ldr	r1, [pc, #20]	@ (800be14 <osKernelGetInfo+0x4c>)
 800be00:	68b8      	ldr	r0, [r7, #8]
 800be02:	f005 f97e 	bl	8011102 <memcpy>
  }

  return (osOK);
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	05f5f531 	.word	0x05f5f531
 800be14:	080128c0 	.word	0x080128c0

0800be18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be1e:	f3ef 8305 	mrs	r3, IPSR
 800be22:	603b      	str	r3, [r7, #0]
  return(result);
 800be24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <osKernelStart+0x1a>
    stat = osErrorISR;
 800be2a:	f06f 0305 	mvn.w	r3, #5
 800be2e:	607b      	str	r3, [r7, #4]
 800be30:	e010      	b.n	800be54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800be32:	4b0b      	ldr	r3, [pc, #44]	@ (800be60 <osKernelStart+0x48>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d109      	bne.n	800be4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800be3a:	f7ff ff97 	bl	800bd6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800be3e:	4b08      	ldr	r3, [pc, #32]	@ (800be60 <osKernelStart+0x48>)
 800be40:	2202      	movs	r2, #2
 800be42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800be44:	f002 f888 	bl	800df58 <vTaskStartScheduler>
      stat = osOK;
 800be48:	2300      	movs	r3, #0
 800be4a:	607b      	str	r3, [r7, #4]
 800be4c:	e002      	b.n	800be54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800be4e:	f04f 33ff 	mov.w	r3, #4294967295
 800be52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be54:	687b      	ldr	r3, [r7, #4]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	20000560 	.word	0x20000560

0800be64 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800be64:	b480      	push	{r7}
 800be66:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800be68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
	...

0800be78 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800be78:	b480      	push	{r7}
 800be7a:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800be7c:	4b03      	ldr	r3, [pc, #12]	@ (800be8c <osKernelGetSysTimerFreq+0x14>)
 800be7e:	681b      	ldr	r3, [r3, #0]
}
 800be80:	4618      	mov	r0, r3
 800be82:	46bd      	mov	sp, r7
 800be84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	2000025c 	.word	0x2000025c

0800be90 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be90:	b580      	push	{r7, lr}
 800be92:	b08e      	sub	sp, #56	@ 0x38
 800be94:	af04      	add	r7, sp, #16
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bea0:	f3ef 8305 	mrs	r3, IPSR
 800bea4:	617b      	str	r3, [r7, #20]
  return(result);
 800bea6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d17e      	bne.n	800bfaa <osThreadNew+0x11a>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d07b      	beq.n	800bfaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800beb2:	2380      	movs	r3, #128	@ 0x80
 800beb4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800beb6:	2318      	movs	r3, #24
 800beb8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bebe:	f04f 33ff 	mov.w	r3, #4294967295
 800bec2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d045      	beq.n	800bf56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d002      	beq.n	800bed8 <osThreadNew+0x48>
        name = attr->name;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	699b      	ldr	r3, [r3, #24]
 800bee4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d008      	beq.n	800befe <osThreadNew+0x6e>
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	2b38      	cmp	r3, #56	@ 0x38
 800bef0:	d805      	bhi.n	800befe <osThreadNew+0x6e>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f003 0301 	and.w	r3, r3, #1
 800befa:	2b00      	cmp	r3, #0
 800befc:	d001      	beq.n	800bf02 <osThreadNew+0x72>
        return (NULL);
 800befe:	2300      	movs	r3, #0
 800bf00:	e054      	b.n	800bfac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	089b      	lsrs	r3, r3, #2
 800bf10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00e      	beq.n	800bf38 <osThreadNew+0xa8>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	2ba7      	cmp	r3, #167	@ 0xa7
 800bf20:	d90a      	bls.n	800bf38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d006      	beq.n	800bf38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d002      	beq.n	800bf38 <osThreadNew+0xa8>
        mem = 1;
 800bf32:	2301      	movs	r3, #1
 800bf34:	61bb      	str	r3, [r7, #24]
 800bf36:	e010      	b.n	800bf5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10c      	bne.n	800bf5a <osThreadNew+0xca>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d108      	bne.n	800bf5a <osThreadNew+0xca>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <osThreadNew+0xca>
          mem = 0;
 800bf50:	2300      	movs	r3, #0
 800bf52:	61bb      	str	r3, [r7, #24]
 800bf54:	e001      	b.n	800bf5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d110      	bne.n	800bf82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bf68:	9202      	str	r2, [sp, #8]
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	6a3a      	ldr	r2, [r7, #32]
 800bf74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f001 fb78 	bl	800d66c <xTaskCreateStatic>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	613b      	str	r3, [r7, #16]
 800bf80:	e013      	b.n	800bfaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d110      	bne.n	800bfaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	f107 0310 	add.w	r3, r7, #16
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f001 fbc6 	bl	800d72c <xTaskCreate>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d001      	beq.n	800bfaa <osThreadNew+0x11a>
            hTask = NULL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bfaa:	693b      	ldr	r3, [r7, #16]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3728      	adds	r7, #40	@ 0x28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfbc:	f3ef 8305 	mrs	r3, IPSR
 800bfc0:	60bb      	str	r3, [r7, #8]
  return(result);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d003      	beq.n	800bfd0 <osDelay+0x1c>
    stat = osErrorISR;
 800bfc8:	f06f 0305 	mvn.w	r3, #5
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	e007      	b.n	800bfe0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d002      	beq.n	800bfe0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 fd78 	bl	800dad0 <vTaskDelay>
    }
  }

  return (stat);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b08a      	sub	sp, #40	@ 0x28
 800bfee:	af02      	add	r7, sp, #8
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bffa:	f3ef 8305 	mrs	r3, IPSR
 800bffe:	613b      	str	r3, [r7, #16]
  return(result);
 800c000:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c002:	2b00      	cmp	r3, #0
 800c004:	d15f      	bne.n	800c0c6 <osMessageQueueNew+0xdc>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d05c      	beq.n	800c0c6 <osMessageQueueNew+0xdc>
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d059      	beq.n	800c0c6 <osMessageQueueNew+0xdc>
    mem = -1;
 800c012:	f04f 33ff 	mov.w	r3, #4294967295
 800c016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d029      	beq.n	800c072 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d012      	beq.n	800c04c <osMessageQueueNew+0x62>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	2b4f      	cmp	r3, #79	@ 0x4f
 800c02c:	d90e      	bls.n	800c04c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00a      	beq.n	800c04c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	695a      	ldr	r2, [r3, #20]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	68b9      	ldr	r1, [r7, #8]
 800c03e:	fb01 f303 	mul.w	r3, r1, r3
 800c042:	429a      	cmp	r2, r3
 800c044:	d302      	bcc.n	800c04c <osMessageQueueNew+0x62>
        mem = 1;
 800c046:	2301      	movs	r3, #1
 800c048:	61bb      	str	r3, [r7, #24]
 800c04a:	e014      	b.n	800c076 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d110      	bne.n	800c076 <osMessageQueueNew+0x8c>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10c      	bne.n	800c076 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c060:	2b00      	cmp	r3, #0
 800c062:	d108      	bne.n	800c076 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d104      	bne.n	800c076 <osMessageQueueNew+0x8c>
          mem = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61bb      	str	r3, [r7, #24]
 800c070:	e001      	b.n	800c076 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d10b      	bne.n	800c094 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	691a      	ldr	r2, [r3, #16]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	2100      	movs	r1, #0
 800c086:	9100      	str	r1, [sp, #0]
 800c088:	68b9      	ldr	r1, [r7, #8]
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f000 fc22 	bl	800c8d4 <xQueueGenericCreateStatic>
 800c090:	61f8      	str	r0, [r7, #28]
 800c092:	e008      	b.n	800c0a6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d105      	bne.n	800c0a6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c09a:	2200      	movs	r2, #0
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 fc95 	bl	800c9ce <xQueueGenericCreate>
 800c0a4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00c      	beq.n	800c0c6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <osMessageQueueNew+0xd0>
        name = attr->name;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	617b      	str	r3, [r7, #20]
 800c0b8:	e001      	b.n	800c0be <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c0be:	6979      	ldr	r1, [r7, #20]
 800c0c0:	69f8      	ldr	r0, [r7, #28]
 800c0c2:	f001 fa75 	bl	800d5b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c0c6:	69fb      	ldr	r3, [r7, #28]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	60f8      	str	r0, [r7, #12]
 800c0d8:	60b9      	str	r1, [r7, #8]
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0e8:	f3ef 8305 	mrs	r3, IPSR
 800c0ec:	617b      	str	r3, [r7, #20]
  return(result);
 800c0ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d028      	beq.n	800c146 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d005      	beq.n	800c106 <osMessageQueuePut+0x36>
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <osMessageQueuePut+0x36>
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d003      	beq.n	800c10e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c106:	f06f 0303 	mvn.w	r3, #3
 800c10a:	61fb      	str	r3, [r7, #28]
 800c10c:	e038      	b.n	800c180 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c10e:	2300      	movs	r3, #0
 800c110:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c112:	f107 0210 	add.w	r2, r7, #16
 800c116:	2300      	movs	r3, #0
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	69b8      	ldr	r0, [r7, #24]
 800c11c:	f000 fdea 	bl	800ccf4 <xQueueGenericSendFromISR>
 800c120:	4603      	mov	r3, r0
 800c122:	2b01      	cmp	r3, #1
 800c124:	d003      	beq.n	800c12e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c126:	f06f 0302 	mvn.w	r3, #2
 800c12a:	61fb      	str	r3, [r7, #28]
 800c12c:	e028      	b.n	800c180 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d025      	beq.n	800c180 <osMessageQueuePut+0xb0>
 800c134:	4b15      	ldr	r3, [pc, #84]	@ (800c18c <osMessageQueuePut+0xbc>)
 800c136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	e01c      	b.n	800c180 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d002      	beq.n	800c152 <osMessageQueuePut+0x82>
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d103      	bne.n	800c15a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c152:	f06f 0303 	mvn.w	r3, #3
 800c156:	61fb      	str	r3, [r7, #28]
 800c158:	e012      	b.n	800c180 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c15a:	2300      	movs	r3, #0
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	69b8      	ldr	r0, [r7, #24]
 800c162:	f000 fcc5 	bl	800caf0 <xQueueGenericSend>
 800c166:	4603      	mov	r3, r0
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d009      	beq.n	800c180 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c172:	f06f 0301 	mvn.w	r3, #1
 800c176:	61fb      	str	r3, [r7, #28]
 800c178:	e002      	b.n	800c180 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c17a:	f06f 0302 	mvn.w	r3, #2
 800c17e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c180:	69fb      	ldr	r3, [r7, #28]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3720      	adds	r7, #32
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop
 800c18c:	e000ed04 	.word	0xe000ed04

0800c190 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
 800c19c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a6:	f3ef 8305 	mrs	r3, IPSR
 800c1aa:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d028      	beq.n	800c204 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d005      	beq.n	800c1c4 <osMessageQueueGet+0x34>
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d002      	beq.n	800c1c4 <osMessageQueueGet+0x34>
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d003      	beq.n	800c1cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c1c4:	f06f 0303 	mvn.w	r3, #3
 800c1c8:	61fb      	str	r3, [r7, #28]
 800c1ca:	e037      	b.n	800c23c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c1d0:	f107 0310 	add.w	r3, r7, #16
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	69b8      	ldr	r0, [r7, #24]
 800c1da:	f001 f81b 	bl	800d214 <xQueueReceiveFromISR>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d003      	beq.n	800c1ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c1e4:	f06f 0302 	mvn.w	r3, #2
 800c1e8:	61fb      	str	r3, [r7, #28]
 800c1ea:	e027      	b.n	800c23c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d024      	beq.n	800c23c <osMessageQueueGet+0xac>
 800c1f2:	4b15      	ldr	r3, [pc, #84]	@ (800c248 <osMessageQueueGet+0xb8>)
 800c1f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1f8:	601a      	str	r2, [r3, #0]
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	e01b      	b.n	800c23c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c204:	69bb      	ldr	r3, [r7, #24]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d002      	beq.n	800c210 <osMessageQueueGet+0x80>
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c210:	f06f 0303 	mvn.w	r3, #3
 800c214:	61fb      	str	r3, [r7, #28]
 800c216:	e011      	b.n	800c23c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	69b8      	ldr	r0, [r7, #24]
 800c21e:	f000 fe07 	bl	800ce30 <xQueueReceive>
 800c222:	4603      	mov	r3, r0
 800c224:	2b01      	cmp	r3, #1
 800c226:	d009      	beq.n	800c23c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c22e:	f06f 0301 	mvn.w	r3, #1
 800c232:	61fb      	str	r3, [r7, #28]
 800c234:	e002      	b.n	800c23c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c236:	f06f 0302 	mvn.w	r3, #2
 800c23a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c23c:	69fb      	ldr	r3, [r7, #28]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3720      	adds	r7, #32
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08a      	sub	sp, #40	@ 0x28
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d102      	bne.n	800c264 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	627b      	str	r3, [r7, #36]	@ 0x24
 800c262:	e023      	b.n	800c2ac <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c264:	f3ef 8305 	mrs	r3, IPSR
 800c268:	61bb      	str	r3, [r7, #24]
  return(result);
 800c26a:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d019      	beq.n	800c2a4 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c270:	f3ef 8211 	mrs	r2, BASEPRI
 800c274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	613a      	str	r2, [r7, #16]
 800c286:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c288:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800c28a:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800c28c:	6a3b      	ldr	r3, [r7, #32]
 800c28e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c290:	6a3b      	ldr	r3, [r7, #32]
 800c292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	627b      	str	r3, [r7, #36]	@ 0x24
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c2a2:	e003      	b.n	800c2ac <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800c2a4:	6a38      	ldr	r0, [r7, #32]
 800c2a6:	f001 f837 	bl	800d318 <uxQueueSpacesAvailable>
 800c2aa:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3728      	adds	r7, #40	@ 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
	...

0800c2b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4a07      	ldr	r2, [pc, #28]	@ (800c2e4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c2c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	4a06      	ldr	r2, [pc, #24]	@ (800c2e8 <vApplicationGetIdleTaskMemory+0x30>)
 800c2ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2280      	movs	r2, #128	@ 0x80
 800c2d4:	601a      	str	r2, [r3, #0]
}
 800c2d6:	bf00      	nop
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	20000564 	.word	0x20000564
 800c2e8:	2000060c 	.word	0x2000060c

0800c2ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	4a07      	ldr	r2, [pc, #28]	@ (800c318 <vApplicationGetTimerTaskMemory+0x2c>)
 800c2fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	4a06      	ldr	r2, [pc, #24]	@ (800c31c <vApplicationGetTimerTaskMemory+0x30>)
 800c302:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c30a:	601a      	str	r2, [r3, #0]
}
 800c30c:	bf00      	nop
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	2000080c 	.word	0x2000080c
 800c31c:	200008b4 	.word	0x200008b4

0800c320 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c326:	2020      	movs	r0, #32
 800c328:	f003 fe20 	bl	800ff6c <pvPortMalloc>
 800c32c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00a      	beq.n	800c34a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	3304      	adds	r3, #4
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f9aa 	bl	800c698 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c34a:	687b      	ldr	r3, [r7, #4]
	}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b090      	sub	sp, #64	@ 0x40
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
 800c360:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c36a:	2300      	movs	r3, #0
 800c36c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10b      	bne.n	800c38c <xEventGroupWaitBits+0x38>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	623b      	str	r3, [r7, #32]
}
 800c386:	bf00      	nop
 800c388:	bf00      	nop
 800c38a:	e7fd      	b.n	800c388 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c392:	d30b      	bcc.n	800c3ac <xEventGroupWaitBits+0x58>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	61fb      	str	r3, [r7, #28]
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	e7fd      	b.n	800c3a8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10b      	bne.n	800c3ca <xEventGroupWaitBits+0x76>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	61bb      	str	r3, [r7, #24]
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop
 800c3c8:	e7fd      	b.n	800c3c6 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3ca:	f002 fc3d 	bl	800ec48 <xTaskGetSchedulerState>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <xEventGroupWaitBits+0x86>
 800c3d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <xEventGroupWaitBits+0x8a>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e000      	b.n	800c3e0 <xEventGroupWaitBits+0x8c>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10b      	bne.n	800c3fc <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	617b      	str	r3, [r7, #20]
}
 800c3f6:	bf00      	nop
 800c3f8:	bf00      	nop
 800c3fa:	e7fd      	b.n	800c3f8 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c3fc:	f001 fe1c 	bl	800e038 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c406:	683a      	ldr	r2, [r7, #0]
 800c408:	68b9      	ldr	r1, [r7, #8]
 800c40a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c40c:	f000 f90d 	bl	800c62a <prvTestWaitCondition>
 800c410:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00e      	beq.n	800c436 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d028      	beq.n	800c478 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	43db      	mvns	r3, r3
 800c42e:	401a      	ands	r2, r3
 800c430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	e020      	b.n	800c478 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d104      	bne.n	800c446 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c440:	2301      	movs	r3, #1
 800c442:	633b      	str	r3, [r7, #48]	@ 0x30
 800c444:	e018      	b.n	800c478 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c452:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d003      	beq.n	800c462 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c460:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c464:	1d18      	adds	r0, r3, #4
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46a:	4313      	orrs	r3, r2
 800c46c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c46e:	4619      	mov	r1, r3
 800c470:	f002 f8b8 	bl	800e5e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c478:	f001 fdec 	bl	800e054 <xTaskResumeAll>
 800c47c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c47e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c480:	2b00      	cmp	r3, #0
 800c482:	d031      	beq.n	800c4e8 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c486:	2b00      	cmp	r3, #0
 800c488:	d107      	bne.n	800c49a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c48a:	4b1a      	ldr	r3, [pc, #104]	@ (800c4f4 <xEventGroupWaitBits+0x1a0>)
 800c48c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c49a:	f002 fd4f 	bl	800ef3c <uxTaskResetEventItemValue>
 800c49e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c4a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d11a      	bne.n	800c4e0 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c4aa:	f003 fc3d 	bl	800fd28 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c4ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c4b4:	683a      	ldr	r2, [r7, #0]
 800c4b6:	68b9      	ldr	r1, [r7, #8]
 800c4b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4ba:	f000 f8b6 	bl	800c62a <prvTestWaitCondition>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d009      	beq.n	800c4d8 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d006      	beq.n	800c4d8 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	43db      	mvns	r3, r3
 800c4d2:	401a      	ands	r2, r3
 800c4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d6:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c4d8:	2301      	movs	r3, #1
 800c4da:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c4dc:	f003 fc56 	bl	800fd8c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c4e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c4e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3740      	adds	r7, #64	@ 0x40
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b08e      	sub	sp, #56	@ 0x38
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c502:	2300      	movs	r3, #0
 800c504:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c50a:	2300      	movs	r3, #0
 800c50c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d10b      	bne.n	800c52c <xEventGroupSetBits+0x34>
	__asm volatile
 800c514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c518:	f383 8811 	msr	BASEPRI, r3
 800c51c:	f3bf 8f6f 	isb	sy
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	613b      	str	r3, [r7, #16]
}
 800c526:	bf00      	nop
 800c528:	bf00      	nop
 800c52a:	e7fd      	b.n	800c528 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c532:	d30b      	bcc.n	800c54c <xEventGroupSetBits+0x54>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	60fb      	str	r3, [r7, #12]
}
 800c546:	bf00      	nop
 800c548:	bf00      	nop
 800c54a:	e7fd      	b.n	800c548 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54e:	3304      	adds	r3, #4
 800c550:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c554:	3308      	adds	r3, #8
 800c556:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c558:	f001 fd6e 	bl	800e038 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	431a      	orrs	r2, r3
 800c56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c56c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c56e:	e03c      	b.n	800c5ea <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c57c:	2300      	movs	r3, #0
 800c57e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c586:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c58e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d108      	bne.n	800c5ac <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00b      	beq.n	800c5be <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5aa:	e008      	b.n	800c5be <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	69ba      	ldr	r2, [r7, #24]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d101      	bne.n	800c5be <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d010      	beq.n	800c5e6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c5e2:	f002 f8cd 	bl	800e780 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c5ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5ec:	6a3b      	ldr	r3, [r7, #32]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d1be      	bne.n	800c570 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5f8:	43db      	mvns	r3, r3
 800c5fa:	401a      	ands	r2, r3
 800c5fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fe:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c600:	f001 fd28 	bl	800e054 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c606:	681b      	ldr	r3, [r3, #0]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3738      	adds	r7, #56	@ 0x38
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff ff6b 	bl	800c4f8 <xEventGroupSetBits>
}
 800c622:	bf00      	nop
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c62a:	b480      	push	{r7}
 800c62c:	b087      	sub	sp, #28
 800c62e:	af00      	add	r7, sp, #0
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c636:	2300      	movs	r3, #0
 800c638:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d107      	bne.n	800c650 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	4013      	ands	r3, r2
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c64a:	2301      	movs	r3, #1
 800c64c:	617b      	str	r3, [r7, #20]
 800c64e:	e007      	b.n	800c660 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	4013      	ands	r3, r2
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d101      	bne.n	800c660 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c65c:	2301      	movs	r3, #1
 800c65e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c660:	697b      	ldr	r3, [r7, #20]
}
 800c662:	4618      	mov	r0, r3
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	68ba      	ldr	r2, [r7, #8]
 800c680:	68f9      	ldr	r1, [r7, #12]
 800c682:	4804      	ldr	r0, [pc, #16]	@ (800c694 <xEventGroupSetBitsFromISR+0x24>)
 800c684:	f003 fa00 	bl	800fa88 <xTimerPendFunctionCallFromISR>
 800c688:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c68a:	697b      	ldr	r3, [r7, #20]
	}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3718      	adds	r7, #24
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	0800c611 	.word	0x0800c611

0800c698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f103 0208 	add.w	r2, r3, #8
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f103 0208 	add.w	r2, r3, #8
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f103 0208 	add.w	r2, r3, #8
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6e6:	bf00      	nop
 800c6e8:	370c      	adds	r7, #12
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	689a      	ldr	r2, [r3, #8]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	1c5a      	adds	r2, r3, #1
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	601a      	str	r2, [r3, #0]
}
 800c72e:	bf00      	nop
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr

0800c73a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c73a:	b480      	push	{r7}
 800c73c:	b085      	sub	sp, #20
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c750:	d103      	bne.n	800c75a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e00c      	b.n	800c774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	3308      	adds	r3, #8
 800c75e:	60fb      	str	r3, [r7, #12]
 800c760:	e002      	b.n	800c768 <vListInsert+0x2e>
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	60fb      	str	r3, [r7, #12]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	429a      	cmp	r2, r3
 800c772:	d2f6      	bcs.n	800c762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	683a      	ldr	r2, [r7, #0]
 800c78e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	601a      	str	r2, [r3, #0]
}
 800c7a0:	bf00      	nop
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b085      	sub	sp, #20
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	6892      	ldr	r2, [r2, #8]
 800c7c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	6852      	ldr	r2, [r2, #4]
 800c7cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d103      	bne.n	800c7e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	1e5a      	subs	r2, r3, #1
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10b      	bne.n	800c82c <xQueueGenericReset+0x2c>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	60bb      	str	r3, [r7, #8]
}
 800c826:	bf00      	nop
 800c828:	bf00      	nop
 800c82a:	e7fd      	b.n	800c828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c82c:	f003 fa7c 	bl	800fd28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c838:	68f9      	ldr	r1, [r7, #12]
 800c83a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c83c:	fb01 f303 	mul.w	r3, r1, r3
 800c840:	441a      	add	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c85c:	3b01      	subs	r3, #1
 800c85e:	68f9      	ldr	r1, [r7, #12]
 800c860:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c862:	fb01 f303 	mul.w	r3, r1, r3
 800c866:	441a      	add	r2, r3
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	22ff      	movs	r2, #255	@ 0xff
 800c870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	22ff      	movs	r2, #255	@ 0xff
 800c878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d114      	bne.n	800c8ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d01a      	beq.n	800c8c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	3310      	adds	r3, #16
 800c88e:	4618      	mov	r0, r3
 800c890:	f001 ff12 	bl	800e6b8 <xTaskRemoveFromEventList>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d012      	beq.n	800c8c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c89a:	4b0d      	ldr	r3, [pc, #52]	@ (800c8d0 <xQueueGenericReset+0xd0>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	e009      	b.n	800c8c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3310      	adds	r3, #16
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f7ff fef1 	bl	800c698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3324      	adds	r3, #36	@ 0x24
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff feec 	bl	800c698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c8c0:	f003 fa64 	bl	800fd8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c8c4:	2301      	movs	r3, #1
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08e      	sub	sp, #56	@ 0x38
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10b      	bne.n	800c900 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ec:	f383 8811 	msr	BASEPRI, r3
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8fa:	bf00      	nop
 800c8fc:	bf00      	nop
 800c8fe:	e7fd      	b.n	800c8fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10b      	bne.n	800c91e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c918:	bf00      	nop
 800c91a:	bf00      	nop
 800c91c:	e7fd      	b.n	800c91a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d002      	beq.n	800c92a <xQueueGenericCreateStatic+0x56>
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d001      	beq.n	800c92e <xQueueGenericCreateStatic+0x5a>
 800c92a:	2301      	movs	r3, #1
 800c92c:	e000      	b.n	800c930 <xQueueGenericCreateStatic+0x5c>
 800c92e:	2300      	movs	r3, #0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10b      	bne.n	800c94c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	623b      	str	r3, [r7, #32]
}
 800c946:	bf00      	nop
 800c948:	bf00      	nop
 800c94a:	e7fd      	b.n	800c948 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <xQueueGenericCreateStatic+0x84>
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d101      	bne.n	800c95c <xQueueGenericCreateStatic+0x88>
 800c958:	2301      	movs	r3, #1
 800c95a:	e000      	b.n	800c95e <xQueueGenericCreateStatic+0x8a>
 800c95c:	2300      	movs	r3, #0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10b      	bne.n	800c97a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c966:	f383 8811 	msr	BASEPRI, r3
 800c96a:	f3bf 8f6f 	isb	sy
 800c96e:	f3bf 8f4f 	dsb	sy
 800c972:	61fb      	str	r3, [r7, #28]
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop
 800c978:	e7fd      	b.n	800c976 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c97a:	2350      	movs	r3, #80	@ 0x50
 800c97c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b50      	cmp	r3, #80	@ 0x50
 800c982:	d00b      	beq.n	800c99c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	61bb      	str	r3, [r7, #24]
}
 800c996:	bf00      	nop
 800c998:	bf00      	nop
 800c99a:	e7fd      	b.n	800c998 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c99c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00d      	beq.n	800c9c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	68b9      	ldr	r1, [r7, #8]
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f000 f840 	bl	800ca44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3730      	adds	r7, #48	@ 0x30
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b08a      	sub	sp, #40	@ 0x28
 800c9d2:	af02      	add	r7, sp, #8
 800c9d4:	60f8      	str	r0, [r7, #12]
 800c9d6:	60b9      	str	r1, [r7, #8]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10b      	bne.n	800c9fa <xQueueGenericCreate+0x2c>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	613b      	str	r3, [r7, #16]
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	e7fd      	b.n	800c9f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ca02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	3350      	adds	r3, #80	@ 0x50
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f003 faaf 	bl	800ff6c <pvPortMalloc>
 800ca0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d011      	beq.n	800ca3a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca16:	69bb      	ldr	r3, [r7, #24]
 800ca18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	3350      	adds	r3, #80	@ 0x50
 800ca1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca28:	79fa      	ldrb	r2, [r7, #7]
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	68b9      	ldr	r1, [r7, #8]
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 f805 	bl	800ca44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca3a:	69bb      	ldr	r3, [r7, #24]
	}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
 800ca50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	69ba      	ldr	r2, [r7, #24]
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	e002      	b.n	800ca66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca72:	2101      	movs	r1, #1
 800ca74:	69b8      	ldr	r0, [r7, #24]
 800ca76:	f7ff fec3 	bl	800c800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	78fa      	ldrb	r2, [r7, #3]
 800ca7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca82:	bf00      	nop
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d00e      	beq.n	800cab6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800caaa:	2300      	movs	r3, #0
 800caac:	2200      	movs	r2, #0
 800caae:	2100      	movs	r1, #0
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f81d 	bl	800caf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cab6:	bf00      	nop
 800cab8:	3708      	adds	r7, #8
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b086      	sub	sp, #24
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	4603      	mov	r3, r0
 800cac6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cac8:	2301      	movs	r3, #1
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	2300      	movs	r3, #0
 800cace:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cad0:	79fb      	ldrb	r3, [r7, #7]
 800cad2:	461a      	mov	r2, r3
 800cad4:	6939      	ldr	r1, [r7, #16]
 800cad6:	6978      	ldr	r0, [r7, #20]
 800cad8:	f7ff ff79 	bl	800c9ce <xQueueGenericCreate>
 800cadc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff ffd3 	bl	800ca8a <prvInitialiseMutex>

		return xNewQueue;
 800cae4:	68fb      	ldr	r3, [r7, #12]
	}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3718      	adds	r7, #24
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
	...

0800caf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b08e      	sub	sp, #56	@ 0x38
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
 800cafc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cafe:	2300      	movs	r3, #0
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10b      	bne.n	800cb24 <xQueueGenericSend+0x34>
	__asm volatile
 800cb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cb1e:	bf00      	nop
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d103      	bne.n	800cb32 <xQueueGenericSend+0x42>
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <xQueueGenericSend+0x46>
 800cb32:	2301      	movs	r3, #1
 800cb34:	e000      	b.n	800cb38 <xQueueGenericSend+0x48>
 800cb36:	2300      	movs	r3, #0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d10b      	bne.n	800cb54 <xQueueGenericSend+0x64>
	__asm volatile
 800cb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb40:	f383 8811 	msr	BASEPRI, r3
 800cb44:	f3bf 8f6f 	isb	sy
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb4e:	bf00      	nop
 800cb50:	bf00      	nop
 800cb52:	e7fd      	b.n	800cb50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d103      	bne.n	800cb62 <xQueueGenericSend+0x72>
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d101      	bne.n	800cb66 <xQueueGenericSend+0x76>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e000      	b.n	800cb68 <xQueueGenericSend+0x78>
 800cb66:	2300      	movs	r3, #0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d10b      	bne.n	800cb84 <xQueueGenericSend+0x94>
	__asm volatile
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	f383 8811 	msr	BASEPRI, r3
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	f3bf 8f4f 	dsb	sy
 800cb7c:	623b      	str	r3, [r7, #32]
}
 800cb7e:	bf00      	nop
 800cb80:	bf00      	nop
 800cb82:	e7fd      	b.n	800cb80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb84:	f002 f860 	bl	800ec48 <xTaskGetSchedulerState>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d102      	bne.n	800cb94 <xQueueGenericSend+0xa4>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <xQueueGenericSend+0xa8>
 800cb94:	2301      	movs	r3, #1
 800cb96:	e000      	b.n	800cb9a <xQueueGenericSend+0xaa>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d10b      	bne.n	800cbb6 <xQueueGenericSend+0xc6>
	__asm volatile
 800cb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba2:	f383 8811 	msr	BASEPRI, r3
 800cba6:	f3bf 8f6f 	isb	sy
 800cbaa:	f3bf 8f4f 	dsb	sy
 800cbae:	61fb      	str	r3, [r7, #28]
}
 800cbb0:	bf00      	nop
 800cbb2:	bf00      	nop
 800cbb4:	e7fd      	b.n	800cbb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbb6:	f003 f8b7 	bl	800fd28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d302      	bcc.n	800cbcc <xQueueGenericSend+0xdc>
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	d129      	bne.n	800cc20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cbcc:	683a      	ldr	r2, [r7, #0]
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cbd2:	f000 fbdd 	bl	800d390 <prvCopyDataToQueue>
 800cbd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d010      	beq.n	800cc02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe2:	3324      	adds	r3, #36	@ 0x24
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f001 fd67 	bl	800e6b8 <xTaskRemoveFromEventList>
 800cbea:	4603      	mov	r3, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d013      	beq.n	800cc18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cbf0:	4b3f      	ldr	r3, [pc, #252]	@ (800ccf0 <xQueueGenericSend+0x200>)
 800cbf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbf6:	601a      	str	r2, [r3, #0]
 800cbf8:	f3bf 8f4f 	dsb	sy
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	e00a      	b.n	800cc18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d007      	beq.n	800cc18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc08:	4b39      	ldr	r3, [pc, #228]	@ (800ccf0 <xQueueGenericSend+0x200>)
 800cc0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc18:	f003 f8b8 	bl	800fd8c <vPortExitCritical>
				return pdPASS;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e063      	b.n	800cce8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d103      	bne.n	800cc2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc26:	f003 f8b1 	bl	800fd8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	e05c      	b.n	800cce8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc34:	f107 0314 	add.w	r3, r7, #20
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f001 fe05 	bl	800e848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc42:	f003 f8a3 	bl	800fd8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc46:	f001 f9f7 	bl	800e038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc4a:	f003 f86d 	bl	800fd28 <vPortEnterCritical>
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc54:	b25b      	sxtb	r3, r3
 800cc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5a:	d103      	bne.n	800cc64 <xQueueGenericSend+0x174>
 800cc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc6a:	b25b      	sxtb	r3, r3
 800cc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc70:	d103      	bne.n	800cc7a <xQueueGenericSend+0x18a>
 800cc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc7a:	f003 f887 	bl	800fd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc7e:	1d3a      	adds	r2, r7, #4
 800cc80:	f107 0314 	add.w	r3, r7, #20
 800cc84:	4611      	mov	r1, r2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f001 fdf4 	bl	800e874 <xTaskCheckForTimeOut>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d124      	bne.n	800ccdc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cc92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc94:	f000 fc74 	bl	800d580 <prvIsQueueFull>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d018      	beq.n	800ccd0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cca0:	3310      	adds	r3, #16
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f001 fc76 	bl	800e598 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ccac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccae:	f000 fbff 	bl	800d4b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccb2:	f001 f9cf 	bl	800e054 <xTaskResumeAll>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f47f af7c 	bne.w	800cbb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf0 <xQueueGenericSend+0x200>)
 800ccc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	f3bf 8f4f 	dsb	sy
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	e772      	b.n	800cbb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ccd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccd2:	f000 fbed 	bl	800d4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ccd6:	f001 f9bd 	bl	800e054 <xTaskResumeAll>
 800ccda:	e76c      	b.n	800cbb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ccdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccde:	f000 fbe7 	bl	800d4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cce2:	f001 f9b7 	bl	800e054 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3738      	adds	r7, #56	@ 0x38
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	e000ed04 	.word	0xe000ed04

0800ccf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b090      	sub	sp, #64	@ 0x40
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	607a      	str	r2, [r7, #4]
 800cd00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10b      	bne.n	800cd24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800cd1e:	bf00      	nop
 800cd20:	bf00      	nop
 800cd22:	e7fd      	b.n	800cd20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d103      	bne.n	800cd32 <xQueueGenericSendFromISR+0x3e>
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d101      	bne.n	800cd36 <xQueueGenericSendFromISR+0x42>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <xQueueGenericSendFromISR+0x44>
 800cd36:	2300      	movs	r3, #0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10b      	bne.n	800cd54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd4e:	bf00      	nop
 800cd50:	bf00      	nop
 800cd52:	e7fd      	b.n	800cd50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d103      	bne.n	800cd62 <xQueueGenericSendFromISR+0x6e>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d101      	bne.n	800cd66 <xQueueGenericSendFromISR+0x72>
 800cd62:	2301      	movs	r3, #1
 800cd64:	e000      	b.n	800cd68 <xQueueGenericSendFromISR+0x74>
 800cd66:	2300      	movs	r3, #0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10b      	bne.n	800cd84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	623b      	str	r3, [r7, #32]
}
 800cd7e:	bf00      	nop
 800cd80:	bf00      	nop
 800cd82:	e7fd      	b.n	800cd80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd84:	f003 f8b0 	bl	800fee8 <vPortValidateInterruptPriority>
	__asm volatile
 800cd88:	f3ef 8211 	mrs	r2, BASEPRI
 800cd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	61fa      	str	r2, [r7, #28]
 800cd9e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cda0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cda2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cda8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d302      	bcc.n	800cdb6 <xQueueGenericSendFromISR+0xc2>
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d12f      	bne.n	800ce16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	68b9      	ldr	r1, [r7, #8]
 800cdca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdcc:	f000 fae0 	bl	800d390 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cdd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd8:	d112      	bne.n	800ce00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d016      	beq.n	800ce10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cde2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde4:	3324      	adds	r3, #36	@ 0x24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f001 fc66 	bl	800e6b8 <xTaskRemoveFromEventList>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00e      	beq.n	800ce10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00b      	beq.n	800ce10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	601a      	str	r2, [r3, #0]
 800cdfe:	e007      	b.n	800ce10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ce04:	3301      	adds	r3, #1
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	b25a      	sxtb	r2, r3
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ce10:	2301      	movs	r3, #1
 800ce12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ce14:	e001      	b.n	800ce1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce1c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f383 8811 	msr	BASEPRI, r3
}
 800ce24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3740      	adds	r7, #64	@ 0x40
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b08c      	sub	sp, #48	@ 0x30
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d10b      	bne.n	800ce62 <xQueueReceive+0x32>
	__asm volatile
 800ce4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	623b      	str	r3, [r7, #32]
}
 800ce5c:	bf00      	nop
 800ce5e:	bf00      	nop
 800ce60:	e7fd      	b.n	800ce5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d103      	bne.n	800ce70 <xQueueReceive+0x40>
 800ce68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d101      	bne.n	800ce74 <xQueueReceive+0x44>
 800ce70:	2301      	movs	r3, #1
 800ce72:	e000      	b.n	800ce76 <xQueueReceive+0x46>
 800ce74:	2300      	movs	r3, #0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10b      	bne.n	800ce92 <xQueueReceive+0x62>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	61fb      	str	r3, [r7, #28]
}
 800ce8c:	bf00      	nop
 800ce8e:	bf00      	nop
 800ce90:	e7fd      	b.n	800ce8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce92:	f001 fed9 	bl	800ec48 <xTaskGetSchedulerState>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <xQueueReceive+0x72>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <xQueueReceive+0x76>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <xQueueReceive+0x78>
 800cea6:	2300      	movs	r3, #0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10b      	bne.n	800cec4 <xQueueReceive+0x94>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	61bb      	str	r3, [r7, #24]
}
 800cebe:	bf00      	nop
 800cec0:	bf00      	nop
 800cec2:	e7fd      	b.n	800cec0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cec4:	f002 ff30 	bl	800fd28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cecc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01f      	beq.n	800cf14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ced4:	68b9      	ldr	r1, [r7, #8]
 800ced6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ced8:	f000 fac4 	bl	800d464 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cede:	1e5a      	subs	r2, r3, #1
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00f      	beq.n	800cf0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceee:	3310      	adds	r3, #16
 800cef0:	4618      	mov	r0, r3
 800cef2:	f001 fbe1 	bl	800e6b8 <xTaskRemoveFromEventList>
 800cef6:	4603      	mov	r3, r0
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d007      	beq.n	800cf0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cefc:	4b3c      	ldr	r3, [pc, #240]	@ (800cff0 <xQueueReceive+0x1c0>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf0c:	f002 ff3e 	bl	800fd8c <vPortExitCritical>
				return pdPASS;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e069      	b.n	800cfe8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d103      	bne.n	800cf22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf1a:	f002 ff37 	bl	800fd8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	e062      	b.n	800cfe8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d106      	bne.n	800cf36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf28:	f107 0310 	add.w	r3, r7, #16
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f001 fc8b 	bl	800e848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf32:	2301      	movs	r3, #1
 800cf34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf36:	f002 ff29 	bl	800fd8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf3a:	f001 f87d 	bl	800e038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf3e:	f002 fef3 	bl	800fd28 <vPortEnterCritical>
 800cf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf48:	b25b      	sxtb	r3, r3
 800cf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4e:	d103      	bne.n	800cf58 <xQueueReceive+0x128>
 800cf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf5e:	b25b      	sxtb	r3, r3
 800cf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf64:	d103      	bne.n	800cf6e <xQueueReceive+0x13e>
 800cf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf6e:	f002 ff0d 	bl	800fd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf72:	1d3a      	adds	r2, r7, #4
 800cf74:	f107 0310 	add.w	r3, r7, #16
 800cf78:	4611      	mov	r1, r2
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f001 fc7a 	bl	800e874 <xTaskCheckForTimeOut>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d123      	bne.n	800cfce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf88:	f000 fae4 	bl	800d554 <prvIsQueueEmpty>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d017      	beq.n	800cfc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf94:	3324      	adds	r3, #36	@ 0x24
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	4611      	mov	r1, r2
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f001 fafc 	bl	800e598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfa2:	f000 fa85 	bl	800d4b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfa6:	f001 f855 	bl	800e054 <xTaskResumeAll>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d189      	bne.n	800cec4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cfb0:	4b0f      	ldr	r3, [pc, #60]	@ (800cff0 <xQueueReceive+0x1c0>)
 800cfb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb6:	601a      	str	r2, [r3, #0]
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	e780      	b.n	800cec4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cfc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfc4:	f000 fa74 	bl	800d4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cfc8:	f001 f844 	bl	800e054 <xTaskResumeAll>
 800cfcc:	e77a      	b.n	800cec4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cfce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfd0:	f000 fa6e 	bl	800d4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfd4:	f001 f83e 	bl	800e054 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfda:	f000 fabb 	bl	800d554 <prvIsQueueEmpty>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f43f af6f 	beq.w	800cec4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfe6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3730      	adds	r7, #48	@ 0x30
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08e      	sub	sp, #56	@ 0x38
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cffe:	2300      	movs	r3, #0
 800d000:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d006:	2300      	movs	r3, #0
 800d008:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d10b      	bne.n	800d028 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800d010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	623b      	str	r3, [r7, #32]
}
 800d022:	bf00      	nop
 800d024:	bf00      	nop
 800d026:	e7fd      	b.n	800d024 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00b      	beq.n	800d048 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800d030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	61fb      	str	r3, [r7, #28]
}
 800d042:	bf00      	nop
 800d044:	bf00      	nop
 800d046:	e7fd      	b.n	800d044 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d048:	f001 fdfe 	bl	800ec48 <xTaskGetSchedulerState>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d102      	bne.n	800d058 <xQueueSemaphoreTake+0x64>
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <xQueueSemaphoreTake+0x68>
 800d058:	2301      	movs	r3, #1
 800d05a:	e000      	b.n	800d05e <xQueueSemaphoreTake+0x6a>
 800d05c:	2300      	movs	r3, #0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d10b      	bne.n	800d07a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d066:	f383 8811 	msr	BASEPRI, r3
 800d06a:	f3bf 8f6f 	isb	sy
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	61bb      	str	r3, [r7, #24]
}
 800d074:	bf00      	nop
 800d076:	bf00      	nop
 800d078:	e7fd      	b.n	800d076 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d07a:	f002 fe55 	bl	800fd28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d082:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d086:	2b00      	cmp	r3, #0
 800d088:	d024      	beq.n	800d0d4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08c:	1e5a      	subs	r2, r3, #1
 800d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d090:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d104      	bne.n	800d0a4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d09a:	f001 ff67 	bl	800ef6c <pvTaskIncrementMutexHeldCount>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00f      	beq.n	800d0cc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ae:	3310      	adds	r3, #16
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f001 fb01 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d007      	beq.n	800d0cc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0bc:	4b54      	ldr	r3, [pc, #336]	@ (800d210 <xQueueSemaphoreTake+0x21c>)
 800d0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0cc:	f002 fe5e 	bl	800fd8c <vPortExitCritical>
				return pdPASS;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e098      	b.n	800d206 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d112      	bne.n	800d100 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d00b      	beq.n	800d0f8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	617b      	str	r3, [r7, #20]
}
 800d0f2:	bf00      	nop
 800d0f4:	bf00      	nop
 800d0f6:	e7fd      	b.n	800d0f4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d0f8:	f002 fe48 	bl	800fd8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e082      	b.n	800d206 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d102:	2b00      	cmp	r3, #0
 800d104:	d106      	bne.n	800d114 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d106:	f107 030c 	add.w	r3, r7, #12
 800d10a:	4618      	mov	r0, r3
 800d10c:	f001 fb9c 	bl	800e848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d110:	2301      	movs	r3, #1
 800d112:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d114:	f002 fe3a 	bl	800fd8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d118:	f000 ff8e 	bl	800e038 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d11c:	f002 fe04 	bl	800fd28 <vPortEnterCritical>
 800d120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d122:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d126:	b25b      	sxtb	r3, r3
 800d128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12c:	d103      	bne.n	800d136 <xQueueSemaphoreTake+0x142>
 800d12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d130:	2200      	movs	r2, #0
 800d132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d138:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d13c:	b25b      	sxtb	r3, r3
 800d13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d142:	d103      	bne.n	800d14c <xQueueSemaphoreTake+0x158>
 800d144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d14c:	f002 fe1e 	bl	800fd8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d150:	463a      	mov	r2, r7
 800d152:	f107 030c 	add.w	r3, r7, #12
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f001 fb8b 	bl	800e874 <xTaskCheckForTimeOut>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d132      	bne.n	800d1ca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d164:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d166:	f000 f9f5 	bl	800d554 <prvIsQueueEmpty>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d026      	beq.n	800d1be <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d109      	bne.n	800d18c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d178:	f002 fdd6 	bl	800fd28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	4618      	mov	r0, r3
 800d182:	f001 fd7f 	bl	800ec84 <xTaskPriorityInherit>
 800d186:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d188:	f002 fe00 	bl	800fd8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d18e:	3324      	adds	r3, #36	@ 0x24
 800d190:	683a      	ldr	r2, [r7, #0]
 800d192:	4611      	mov	r1, r2
 800d194:	4618      	mov	r0, r3
 800d196:	f001 f9ff 	bl	800e598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d19a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d19c:	f000 f988 	bl	800d4b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d1a0:	f000 ff58 	bl	800e054 <xTaskResumeAll>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	f47f af67 	bne.w	800d07a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d1ac:	4b18      	ldr	r3, [pc, #96]	@ (800d210 <xQueueSemaphoreTake+0x21c>)
 800d1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	f3bf 8f4f 	dsb	sy
 800d1b8:	f3bf 8f6f 	isb	sy
 800d1bc:	e75d      	b.n	800d07a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d1be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1c0:	f000 f976 	bl	800d4b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1c4:	f000 ff46 	bl	800e054 <xTaskResumeAll>
 800d1c8:	e757      	b.n	800d07a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d1ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1cc:	f000 f970 	bl	800d4b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1d0:	f000 ff40 	bl	800e054 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1d6:	f000 f9bd 	bl	800d554 <prvIsQueueEmpty>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	f43f af4c 	beq.w	800d07a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00d      	beq.n	800d204 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d1e8:	f002 fd9e 	bl	800fd28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d1ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ee:	f000 f8b7 	bl	800d360 <prvGetDisinheritPriorityAfterTimeout>
 800d1f2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 fe1a 	bl	800ee34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d200:	f002 fdc4 	bl	800fd8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d206:	4618      	mov	r0, r3
 800d208:	3738      	adds	r7, #56	@ 0x38
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	e000ed04 	.word	0xe000ed04

0800d214 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08e      	sub	sp, #56	@ 0x38
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10b      	bne.n	800d242 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	623b      	str	r3, [r7, #32]
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	e7fd      	b.n	800d23e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d103      	bne.n	800d250 <xQueueReceiveFromISR+0x3c>
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <xQueueReceiveFromISR+0x40>
 800d250:	2301      	movs	r3, #1
 800d252:	e000      	b.n	800d256 <xQueueReceiveFromISR+0x42>
 800d254:	2300      	movs	r3, #0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d10b      	bne.n	800d272 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	61fb      	str	r3, [r7, #28]
}
 800d26c:	bf00      	nop
 800d26e:	bf00      	nop
 800d270:	e7fd      	b.n	800d26e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d272:	f002 fe39 	bl	800fee8 <vPortValidateInterruptPriority>
	__asm volatile
 800d276:	f3ef 8211 	mrs	r2, BASEPRI
 800d27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	61ba      	str	r2, [r7, #24]
 800d28c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d28e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d290:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d296:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d02f      	beq.n	800d2fe <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d2a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d2a8:	68b9      	ldr	r1, [r7, #8]
 800d2aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2ac:	f000 f8da 	bl	800d464 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2b2:	1e5a      	subs	r2, r3, #1
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d2b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c0:	d112      	bne.n	800d2e8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d016      	beq.n	800d2f8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2cc:	3310      	adds	r3, #16
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f001 f9f2 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00e      	beq.n	800d2f8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00b      	beq.n	800d2f8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	e007      	b.n	800d2f8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	b25a      	sxtb	r2, r3
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2fc:	e001      	b.n	800d302 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d2fe:	2300      	movs	r3, #0
 800d300:	637b      	str	r3, [r7, #52]	@ 0x34
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	f383 8811 	msr	BASEPRI, r3
}
 800d30c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d310:	4618      	mov	r0, r3
 800d312:	3738      	adds	r7, #56	@ 0x38
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10b      	bne.n	800d342 <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	60fb      	str	r3, [r7, #12]
}
 800d33c:	bf00      	nop
 800d33e:	bf00      	nop
 800d340:	e7fd      	b.n	800d33e <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800d342:	f002 fcf1 	bl	800fd28 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d352:	f002 fd1b 	bl	800fd8c <vPortExitCritical>

	return uxReturn;
 800d356:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d006      	beq.n	800d37e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	e001      	b.n	800d382 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d37e:	2300      	movs	r3, #0
 800d380:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d382:	68fb      	ldr	r3, [r7, #12]
	}
 800d384:	4618      	mov	r0, r3
 800d386:	3714      	adds	r7, #20
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d39c:	2300      	movs	r3, #0
 800d39e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10d      	bne.n	800d3ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d14d      	bne.n	800d452 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f001 fcca 	bl	800ed54 <xTaskPriorityDisinherit>
 800d3c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	609a      	str	r2, [r3, #8]
 800d3c8:	e043      	b.n	800d452 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d119      	bne.n	800d404 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6858      	ldr	r0, [r3, #4]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d8:	461a      	mov	r2, r3
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	f003 fe91 	bl	8011102 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	685a      	ldr	r2, [r3, #4]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e8:	441a      	add	r2, r3
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d32b      	bcc.n	800d452 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	605a      	str	r2, [r3, #4]
 800d402:	e026      	b.n	800d452 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	68d8      	ldr	r0, [r3, #12]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d40c:	461a      	mov	r2, r3
 800d40e:	68b9      	ldr	r1, [r7, #8]
 800d410:	f003 fe77 	bl	8011102 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68da      	ldr	r2, [r3, #12]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d41c:	425b      	negs	r3, r3
 800d41e:	441a      	add	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	68da      	ldr	r2, [r3, #12]
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d207      	bcs.n	800d440 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	689a      	ldr	r2, [r3, #8]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d438:	425b      	negs	r3, r3
 800d43a:	441a      	add	r2, r3
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b02      	cmp	r3, #2
 800d444:	d105      	bne.n	800d452 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	3b01      	subs	r3, #1
 800d450:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d45a:	697b      	ldr	r3, [r7, #20]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	d018      	beq.n	800d4a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d47e:	441a      	add	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68da      	ldr	r2, [r3, #12]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d303      	bcc.n	800d498 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68d9      	ldr	r1, [r3, #12]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	6838      	ldr	r0, [r7, #0]
 800d4a4:	f003 fe2d 	bl	8011102 <memcpy>
	}
}
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d4b8:	f002 fc36 	bl	800fd28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d4c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4c4:	e011      	b.n	800d4ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d012      	beq.n	800d4f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	3324      	adds	r3, #36	@ 0x24
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f001 f8f0 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d001      	beq.n	800d4e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4de:	f001 fa2d 	bl	800e93c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	dce9      	bgt.n	800d4c6 <prvUnlockQueue+0x16>
 800d4f2:	e000      	b.n	800d4f6 <prvUnlockQueue+0x46>
					break;
 800d4f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	22ff      	movs	r2, #255	@ 0xff
 800d4fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d4fe:	f002 fc45 	bl	800fd8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d502:	f002 fc11 	bl	800fd28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d50c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d50e:	e011      	b.n	800d534 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d012      	beq.n	800d53e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3310      	adds	r3, #16
 800d51c:	4618      	mov	r0, r3
 800d51e:	f001 f8cb 	bl	800e6b8 <xTaskRemoveFromEventList>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d528:	f001 fa08 	bl	800e93c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	3b01      	subs	r3, #1
 800d530:	b2db      	uxtb	r3, r3
 800d532:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d534:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	dce9      	bgt.n	800d510 <prvUnlockQueue+0x60>
 800d53c:	e000      	b.n	800d540 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d53e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	22ff      	movs	r2, #255	@ 0xff
 800d544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d548:	f002 fc20 	bl	800fd8c <vPortExitCritical>
}
 800d54c:	bf00      	nop
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d55c:	f002 fbe4 	bl	800fd28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d564:	2b00      	cmp	r3, #0
 800d566:	d102      	bne.n	800d56e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d568:	2301      	movs	r3, #1
 800d56a:	60fb      	str	r3, [r7, #12]
 800d56c:	e001      	b.n	800d572 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d56e:	2300      	movs	r3, #0
 800d570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d572:	f002 fc0b 	bl	800fd8c <vPortExitCritical>

	return xReturn;
 800d576:	68fb      	ldr	r3, [r7, #12]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d588:	f002 fbce 	bl	800fd28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d594:	429a      	cmp	r2, r3
 800d596:	d102      	bne.n	800d59e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	60fb      	str	r3, [r7, #12]
 800d59c:	e001      	b.n	800d5a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5a2:	f002 fbf3 	bl	800fd8c <vPortExitCritical>

	return xReturn;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3710      	adds	r7, #16
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	e014      	b.n	800d5ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800d600 <vQueueAddToRegistry+0x50>)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d10b      	bne.n	800d5e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d5cc:	490c      	ldr	r1, [pc, #48]	@ (800d600 <vQueueAddToRegistry+0x50>)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d600 <vQueueAddToRegistry+0x50>)
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	4413      	add	r3, r2
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5e2:	e006      	b.n	800d5f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	60fb      	str	r3, [r7, #12]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b07      	cmp	r3, #7
 800d5ee:	d9e7      	bls.n	800d5c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5f0:	bf00      	nop
 800d5f2:	bf00      	nop
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	20000cb4 	.word	0x20000cb4

0800d604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d604:	b580      	push	{r7, lr}
 800d606:	b086      	sub	sp, #24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d614:	f002 fb88 	bl	800fd28 <vPortEnterCritical>
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d61e:	b25b      	sxtb	r3, r3
 800d620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d624:	d103      	bne.n	800d62e <vQueueWaitForMessageRestricted+0x2a>
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d634:	b25b      	sxtb	r3, r3
 800d636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d63a:	d103      	bne.n	800d644 <vQueueWaitForMessageRestricted+0x40>
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2200      	movs	r2, #0
 800d640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d644:	f002 fba2 	bl	800fd8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d106      	bne.n	800d65e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	3324      	adds	r3, #36	@ 0x24
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	68b9      	ldr	r1, [r7, #8]
 800d658:	4618      	mov	r0, r3
 800d65a:	f001 f801 	bl	800e660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d65e:	6978      	ldr	r0, [r7, #20]
 800d660:	f7ff ff26 	bl	800d4b0 <prvUnlockQueue>
	}
 800d664:	bf00      	nop
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08e      	sub	sp, #56	@ 0x38
 800d670:	af04      	add	r7, sp, #16
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10b      	bne.n	800d698 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	623b      	str	r3, [r7, #32]
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	e7fd      	b.n	800d694 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10b      	bne.n	800d6b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	61fb      	str	r3, [r7, #28]
}
 800d6b0:	bf00      	nop
 800d6b2:	bf00      	nop
 800d6b4:	e7fd      	b.n	800d6b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6b6:	23a8      	movs	r3, #168	@ 0xa8
 800d6b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2ba8      	cmp	r3, #168	@ 0xa8
 800d6be:	d00b      	beq.n	800d6d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	61bb      	str	r3, [r7, #24]
}
 800d6d2:	bf00      	nop
 800d6d4:	bf00      	nop
 800d6d6:	e7fd      	b.n	800d6d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01e      	beq.n	800d71e <xTaskCreateStatic+0xb2>
 800d6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d01b      	beq.n	800d71e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9303      	str	r3, [sp, #12]
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fe:	9302      	str	r3, [sp, #8]
 800d700:	f107 0314 	add.w	r3, r7, #20
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 f851 	bl	800d7b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d716:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d718:	f000 f8f6 	bl	800d908 <prvAddNewTaskToReadyList>
 800d71c:	e001      	b.n	800d722 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d722:	697b      	ldr	r3, [r7, #20]
	}
 800d724:	4618      	mov	r0, r3
 800d726:	3728      	adds	r7, #40	@ 0x28
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b08c      	sub	sp, #48	@ 0x30
 800d730:	af04      	add	r7, sp, #16
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	603b      	str	r3, [r7, #0]
 800d738:	4613      	mov	r3, r2
 800d73a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d73c:	88fb      	ldrh	r3, [r7, #6]
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4618      	mov	r0, r3
 800d742:	f002 fc13 	bl	800ff6c <pvPortMalloc>
 800d746:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d00e      	beq.n	800d76c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d74e:	20a8      	movs	r0, #168	@ 0xa8
 800d750:	f002 fc0c 	bl	800ff6c <pvPortMalloc>
 800d754:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d003      	beq.n	800d764 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	631a      	str	r2, [r3, #48]	@ 0x30
 800d762:	e005      	b.n	800d770 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d764:	6978      	ldr	r0, [r7, #20]
 800d766:	f002 fccf 	bl	8010108 <vPortFree>
 800d76a:	e001      	b.n	800d770 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d76c:	2300      	movs	r3, #0
 800d76e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d017      	beq.n	800d7a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d77e:	88fa      	ldrh	r2, [r7, #6]
 800d780:	2300      	movs	r3, #0
 800d782:	9303      	str	r3, [sp, #12]
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	9302      	str	r3, [sp, #8]
 800d788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78a:	9301      	str	r3, [sp, #4]
 800d78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	68b9      	ldr	r1, [r7, #8]
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f000 f80f 	bl	800d7b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d79a:	69f8      	ldr	r0, [r7, #28]
 800d79c:	f000 f8b4 	bl	800d908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	61bb      	str	r3, [r7, #24]
 800d7a4:	e002      	b.n	800d7ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
	}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3720      	adds	r7, #32
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	21a5      	movs	r1, #165	@ 0xa5
 800d7d2:	f003 fb2a 	bl	8010e2a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	f023 0307 	bic.w	r3, r3, #7
 800d7ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00b      	beq.n	800d812 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	617b      	str	r3, [r7, #20]
}
 800d80c:	bf00      	nop
 800d80e:	bf00      	nop
 800d810:	e7fd      	b.n	800d80e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d01f      	beq.n	800d858 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d818:	2300      	movs	r3, #0
 800d81a:	61fb      	str	r3, [r7, #28]
 800d81c:	e012      	b.n	800d844 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	4413      	add	r3, r2
 800d824:	7819      	ldrb	r1, [r3, #0]
 800d826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	4413      	add	r3, r2
 800d82c:	3334      	adds	r3, #52	@ 0x34
 800d82e:	460a      	mov	r2, r1
 800d830:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d832:	68ba      	ldr	r2, [r7, #8]
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	4413      	add	r3, r2
 800d838:	781b      	ldrb	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d006      	beq.n	800d84c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	3301      	adds	r3, #1
 800d842:	61fb      	str	r3, [r7, #28]
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	2b0f      	cmp	r3, #15
 800d848:	d9e9      	bls.n	800d81e <prvInitialiseNewTask+0x66>
 800d84a:	e000      	b.n	800d84e <prvInitialiseNewTask+0x96>
			{
				break;
 800d84c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d856:	e003      	b.n	800d860 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	2b37      	cmp	r3, #55	@ 0x37
 800d864:	d901      	bls.n	800d86a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d866:	2337      	movs	r3, #55	@ 0x37
 800d868:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d86e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d874:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d878:	2200      	movs	r2, #0
 800d87a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87e:	3304      	adds	r3, #4
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe ff29 	bl	800c6d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d888:	3318      	adds	r3, #24
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe ff24 	bl	800c6d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d894:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d898:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b8:	3354      	adds	r3, #84	@ 0x54
 800d8ba:	224c      	movs	r2, #76	@ 0x4c
 800d8bc:	2100      	movs	r1, #0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f003 fab3 	bl	8010e2a <memset>
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	4a0d      	ldr	r2, [pc, #52]	@ (800d8fc <prvInitialiseNewTask+0x144>)
 800d8c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800d8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8cc:	4a0c      	ldr	r2, [pc, #48]	@ (800d900 <prvInitialiseNewTask+0x148>)
 800d8ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	@ (800d904 <prvInitialiseNewTask+0x14c>)
 800d8d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8d6:	683a      	ldr	r2, [r7, #0]
 800d8d8:	68f9      	ldr	r1, [r7, #12]
 800d8da:	69b8      	ldr	r0, [r7, #24]
 800d8dc:	f002 f8f4 	bl	800fac8 <pxPortInitialiseStack>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8f2:	bf00      	nop
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20011518 	.word	0x20011518
 800d900:	20011580 	.word	0x20011580
 800d904:	200115e8 	.word	0x200115e8

0800d908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d910:	f002 fa0a 	bl	800fd28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d914:	4b2d      	ldr	r3, [pc, #180]	@ (800d9cc <prvAddNewTaskToReadyList+0xc4>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	3301      	adds	r3, #1
 800d91a:	4a2c      	ldr	r2, [pc, #176]	@ (800d9cc <prvAddNewTaskToReadyList+0xc4>)
 800d91c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d91e:	4b2c      	ldr	r3, [pc, #176]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d926:	4a2a      	ldr	r2, [pc, #168]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d92c:	4b27      	ldr	r3, [pc, #156]	@ (800d9cc <prvAddNewTaskToReadyList+0xc4>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d110      	bne.n	800d956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d934:	f001 f826 	bl	800e984 <prvInitialiseTaskLists>
 800d938:	e00d      	b.n	800d956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d93a:	4b26      	ldr	r3, [pc, #152]	@ (800d9d4 <prvAddNewTaskToReadyList+0xcc>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d109      	bne.n	800d956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d942:	4b23      	ldr	r3, [pc, #140]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d802      	bhi.n	800d956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d950:	4a1f      	ldr	r2, [pc, #124]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d956:	4b20      	ldr	r3, [pc, #128]	@ (800d9d8 <prvAddNewTaskToReadyList+0xd0>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3301      	adds	r3, #1
 800d95c:	4a1e      	ldr	r2, [pc, #120]	@ (800d9d8 <prvAddNewTaskToReadyList+0xd0>)
 800d95e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d960:	4b1d      	ldr	r3, [pc, #116]	@ (800d9d8 <prvAddNewTaskToReadyList+0xd0>)
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96c:	4b1b      	ldr	r3, [pc, #108]	@ (800d9dc <prvAddNewTaskToReadyList+0xd4>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d903      	bls.n	800d97c <prvAddNewTaskToReadyList+0x74>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d978:	4a18      	ldr	r2, [pc, #96]	@ (800d9dc <prvAddNewTaskToReadyList+0xd4>)
 800d97a:	6013      	str	r3, [r2, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4a15      	ldr	r2, [pc, #84]	@ (800d9e0 <prvAddNewTaskToReadyList+0xd8>)
 800d98a:	441a      	add	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3304      	adds	r3, #4
 800d990:	4619      	mov	r1, r3
 800d992:	4610      	mov	r0, r2
 800d994:	f7fe fead 	bl	800c6f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d998:	f002 f9f8 	bl	800fd8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d99c:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d4 <prvAddNewTaskToReadyList+0xcc>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00e      	beq.n	800d9c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d0 <prvAddNewTaskToReadyList+0xc8>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d207      	bcs.n	800d9c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800d9e4 <prvAddNewTaskToReadyList+0xdc>)
 800d9b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b8:	601a      	str	r2, [r3, #0]
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9c2:	bf00      	nop
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	200011c8 	.word	0x200011c8
 800d9d0:	20000cf4 	.word	0x20000cf4
 800d9d4:	200011d4 	.word	0x200011d4
 800d9d8:	200011e4 	.word	0x200011e4
 800d9dc:	200011d0 	.word	0x200011d0
 800d9e0:	20000cf8 	.word	0x20000cf8
 800d9e4:	e000ed04 	.word	0xe000ed04

0800d9e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d9f0:	f002 f99a 	bl	800fd28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d102      	bne.n	800da00 <vTaskDelete+0x18>
 800d9fa:	4b2d      	ldr	r3, [pc, #180]	@ (800dab0 <vTaskDelete+0xc8>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	e000      	b.n	800da02 <vTaskDelete+0x1a>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3304      	adds	r3, #4
 800da08:	4618      	mov	r0, r3
 800da0a:	f7fe fecf 	bl	800c7ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da12:	2b00      	cmp	r3, #0
 800da14:	d004      	beq.n	800da20 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	3318      	adds	r3, #24
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fe fec6 	bl	800c7ac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800da20:	4b24      	ldr	r3, [pc, #144]	@ (800dab4 <vTaskDelete+0xcc>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	3301      	adds	r3, #1
 800da26:	4a23      	ldr	r2, [pc, #140]	@ (800dab4 <vTaskDelete+0xcc>)
 800da28:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800da2a:	4b21      	ldr	r3, [pc, #132]	@ (800dab0 <vTaskDelete+0xc8>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	68fa      	ldr	r2, [r7, #12]
 800da30:	429a      	cmp	r2, r3
 800da32:	d10b      	bne.n	800da4c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	3304      	adds	r3, #4
 800da38:	4619      	mov	r1, r3
 800da3a:	481f      	ldr	r0, [pc, #124]	@ (800dab8 <vTaskDelete+0xd0>)
 800da3c:	f7fe fe59 	bl	800c6f2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800da40:	4b1e      	ldr	r3, [pc, #120]	@ (800dabc <vTaskDelete+0xd4>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	3301      	adds	r3, #1
 800da46:	4a1d      	ldr	r2, [pc, #116]	@ (800dabc <vTaskDelete+0xd4>)
 800da48:	6013      	str	r3, [r2, #0]
 800da4a:	e009      	b.n	800da60 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800da4c:	4b1c      	ldr	r3, [pc, #112]	@ (800dac0 <vTaskDelete+0xd8>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	3b01      	subs	r3, #1
 800da52:	4a1b      	ldr	r2, [pc, #108]	@ (800dac0 <vTaskDelete+0xd8>)
 800da54:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f001 f8a0 	bl	800eb9c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800da5c:	f001 f8d4 	bl	800ec08 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800da60:	f002 f994 	bl	800fd8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800da64:	4b17      	ldr	r3, [pc, #92]	@ (800dac4 <vTaskDelete+0xdc>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d01c      	beq.n	800daa6 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800da6c:	4b10      	ldr	r3, [pc, #64]	@ (800dab0 <vTaskDelete+0xc8>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	429a      	cmp	r2, r3
 800da74:	d117      	bne.n	800daa6 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800da76:	4b14      	ldr	r3, [pc, #80]	@ (800dac8 <vTaskDelete+0xe0>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00b      	beq.n	800da96 <vTaskDelete+0xae>
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da82:	f383 8811 	msr	BASEPRI, r3
 800da86:	f3bf 8f6f 	isb	sy
 800da8a:	f3bf 8f4f 	dsb	sy
 800da8e:	60bb      	str	r3, [r7, #8]
}
 800da90:	bf00      	nop
 800da92:	bf00      	nop
 800da94:	e7fd      	b.n	800da92 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800da96:	4b0d      	ldr	r3, [pc, #52]	@ (800dacc <vTaskDelete+0xe4>)
 800da98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800daa6:	bf00      	nop
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20000cf4 	.word	0x20000cf4
 800dab4:	200011e4 	.word	0x200011e4
 800dab8:	2000119c 	.word	0x2000119c
 800dabc:	200011b0 	.word	0x200011b0
 800dac0:	200011c8 	.word	0x200011c8
 800dac4:	200011d4 	.word	0x200011d4
 800dac8:	200011f0 	.word	0x200011f0
 800dacc:	e000ed04 	.word	0xe000ed04

0800dad0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d018      	beq.n	800db14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dae2:	4b14      	ldr	r3, [pc, #80]	@ (800db34 <vTaskDelay+0x64>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00b      	beq.n	800db02 <vTaskDelay+0x32>
	__asm volatile
 800daea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	60bb      	str	r3, [r7, #8]
}
 800dafc:	bf00      	nop
 800dafe:	bf00      	nop
 800db00:	e7fd      	b.n	800dafe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800db02:	f000 fa99 	bl	800e038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800db06:	2100      	movs	r1, #0
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f001 fbb1 	bl	800f270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800db0e:	f000 faa1 	bl	800e054 <xTaskResumeAll>
 800db12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d107      	bne.n	800db2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800db1a:	4b07      	ldr	r3, [pc, #28]	@ (800db38 <vTaskDelay+0x68>)
 800db1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db2a:	bf00      	nop
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	200011f0 	.word	0x200011f0
 800db38:	e000ed04 	.word	0xe000ed04

0800db3c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d10b      	bne.n	800db66 <eTaskGetState+0x2a>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	60bb      	str	r3, [r7, #8]
}
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800db66:	4b24      	ldr	r3, [pc, #144]	@ (800dbf8 <eTaskGetState+0xbc>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	69ba      	ldr	r2, [r7, #24]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d102      	bne.n	800db76 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800db70:	2300      	movs	r3, #0
 800db72:	77fb      	strb	r3, [r7, #31]
 800db74:	e03a      	b.n	800dbec <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800db76:	f002 f8d7 	bl	800fd28 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800db80:	4b1e      	ldr	r3, [pc, #120]	@ (800dbfc <eTaskGetState+0xc0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800db86:	4b1e      	ldr	r3, [pc, #120]	@ (800dc00 <eTaskGetState+0xc4>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800db8c:	f002 f8fe 	bl	800fd8c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800db90:	697a      	ldr	r2, [r7, #20]
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	429a      	cmp	r2, r3
 800db96:	d003      	beq.n	800dba0 <eTaskGetState+0x64>
 800db98:	697a      	ldr	r2, [r7, #20]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d102      	bne.n	800dba6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800dba0:	2302      	movs	r3, #2
 800dba2:	77fb      	strb	r3, [r7, #31]
 800dba4:	e022      	b.n	800dbec <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	4a16      	ldr	r2, [pc, #88]	@ (800dc04 <eTaskGetState+0xc8>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d112      	bne.n	800dbd4 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800dbae:	69bb      	ldr	r3, [r7, #24]
 800dbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10b      	bne.n	800dbce <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d102      	bne.n	800dbc8 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800dbc2:	2302      	movs	r3, #2
 800dbc4:	77fb      	strb	r3, [r7, #31]
 800dbc6:	e011      	b.n	800dbec <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	77fb      	strb	r3, [r7, #31]
 800dbcc:	e00e      	b.n	800dbec <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800dbce:	2302      	movs	r3, #2
 800dbd0:	77fb      	strb	r3, [r7, #31]
 800dbd2:	e00b      	b.n	800dbec <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	4a0c      	ldr	r2, [pc, #48]	@ (800dc08 <eTaskGetState+0xcc>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d002      	beq.n	800dbe2 <eTaskGetState+0xa6>
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800dbe2:	2304      	movs	r3, #4
 800dbe4:	77fb      	strb	r3, [r7, #31]
 800dbe6:	e001      	b.n	800dbec <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dbec:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3720      	adds	r7, #32
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20000cf4 	.word	0x20000cf4
 800dbfc:	20001180 	.word	0x20001180
 800dc00:	20001184 	.word	0x20001184
 800dc04:	200011b4 	.word	0x200011b4
 800dc08:	2000119c 	.word	0x2000119c

0800dc0c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b088      	sub	sp, #32
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800dc16:	2300      	movs	r3, #0
 800dc18:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b37      	cmp	r3, #55	@ 0x37
 800dc1e:	d90b      	bls.n	800dc38 <vTaskPrioritySet+0x2c>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	60fb      	str	r3, [r7, #12]
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	e7fd      	b.n	800dc34 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b37      	cmp	r3, #55	@ 0x37
 800dc3c:	d901      	bls.n	800dc42 <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc3e:	2337      	movs	r3, #55	@ 0x37
 800dc40:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800dc42:	f002 f871 	bl	800fd28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d102      	bne.n	800dc52 <vTaskPrioritySet+0x46>
 800dc4c:	4b3a      	ldr	r3, [pc, #232]	@ (800dd38 <vTaskPrioritySet+0x12c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	e000      	b.n	800dc54 <vTaskPrioritySet+0x48>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc5a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800dc5c:	697a      	ldr	r2, [r7, #20]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d063      	beq.n	800dd2c <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800dc64:	683a      	ldr	r2, [r7, #0]
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d90d      	bls.n	800dc88 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800dc6c:	4b32      	ldr	r3, [pc, #200]	@ (800dd38 <vTaskPrioritySet+0x12c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	69ba      	ldr	r2, [r7, #24]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d00f      	beq.n	800dc96 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dc76:	4b30      	ldr	r3, [pc, #192]	@ (800dd38 <vTaskPrioritySet+0x12c>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d309      	bcc.n	800dc96 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800dc82:	2301      	movs	r3, #1
 800dc84:	61fb      	str	r3, [r7, #28]
 800dc86:	e006      	b.n	800dc96 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800dc88:	4b2b      	ldr	r3, [pc, #172]	@ (800dd38 <vTaskPrioritySet+0x12c>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	69ba      	ldr	r2, [r7, #24]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d101      	bne.n	800dc96 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800dc92:	2301      	movs	r3, #1
 800dc94:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc9a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dc9c:	69bb      	ldr	r3, [r7, #24]
 800dc9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d102      	bne.n	800dcae <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	683a      	ldr	r2, [r7, #0]
 800dcac:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	683a      	ldr	r2, [r7, #0]
 800dcb2:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	db04      	blt.n	800dcc6 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6959      	ldr	r1, [r3, #20]
 800dcca:	693a      	ldr	r2, [r7, #16]
 800dccc:	4613      	mov	r3, r2
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4a19      	ldr	r2, [pc, #100]	@ (800dd3c <vTaskPrioritySet+0x130>)
 800dcd6:	4413      	add	r3, r2
 800dcd8:	4299      	cmp	r1, r3
 800dcda:	d11c      	bne.n	800dd16 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	3304      	adds	r3, #4
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe fd63 	bl	800c7ac <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcea:	4b15      	ldr	r3, [pc, #84]	@ (800dd40 <vTaskPrioritySet+0x134>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d903      	bls.n	800dcfa <vTaskPrioritySet+0xee>
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf6:	4a12      	ldr	r2, [pc, #72]	@ (800dd40 <vTaskPrioritySet+0x134>)
 800dcf8:	6013      	str	r3, [r2, #0]
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcfe:	4613      	mov	r3, r2
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	4413      	add	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4a0d      	ldr	r2, [pc, #52]	@ (800dd3c <vTaskPrioritySet+0x130>)
 800dd08:	441a      	add	r2, r3
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	3304      	adds	r3, #4
 800dd0e:	4619      	mov	r1, r3
 800dd10:	4610      	mov	r0, r2
 800dd12:	f7fe fcee 	bl	800c6f2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800dd1c:	4b09      	ldr	r3, [pc, #36]	@ (800dd44 <vTaskPrioritySet+0x138>)
 800dd1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd22:	601a      	str	r2, [r3, #0]
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800dd2c:	f002 f82e 	bl	800fd8c <vPortExitCritical>
	}
 800dd30:	bf00      	nop
 800dd32:	3720      	adds	r7, #32
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	20000cf4 	.word	0x20000cf4
 800dd3c:	20000cf8 	.word	0x20000cf8
 800dd40:	200011d0 	.word	0x200011d0
 800dd44:	e000ed04 	.word	0xe000ed04

0800dd48 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dd50:	f001 ffea 	bl	800fd28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d102      	bne.n	800dd60 <vTaskSuspend+0x18>
 800dd5a:	4b30      	ldr	r3, [pc, #192]	@ (800de1c <vTaskSuspend+0xd4>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	e000      	b.n	800dd62 <vTaskSuspend+0x1a>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	3304      	adds	r3, #4
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fe fd1f 	bl	800c7ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d004      	beq.n	800dd80 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	3318      	adds	r3, #24
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fe fd16 	bl	800c7ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	3304      	adds	r3, #4
 800dd84:	4619      	mov	r1, r3
 800dd86:	4826      	ldr	r0, [pc, #152]	@ (800de20 <vTaskSuspend+0xd8>)
 800dd88:	f7fe fcb3 	bl	800c6f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d103      	bne.n	800dda0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dda0:	f001 fff4 	bl	800fd8c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dda4:	4b1f      	ldr	r3, [pc, #124]	@ (800de24 <vTaskSuspend+0xdc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d005      	beq.n	800ddb8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ddac:	f001 ffbc 	bl	800fd28 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ddb0:	f000 ff2a 	bl	800ec08 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ddb4:	f001 ffea 	bl	800fd8c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ddb8:	4b18      	ldr	r3, [pc, #96]	@ (800de1c <vTaskSuspend+0xd4>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d128      	bne.n	800de14 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800ddc2:	4b18      	ldr	r3, [pc, #96]	@ (800de24 <vTaskSuspend+0xdc>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d018      	beq.n	800ddfc <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ddca:	4b17      	ldr	r3, [pc, #92]	@ (800de28 <vTaskSuspend+0xe0>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00b      	beq.n	800ddea <vTaskSuspend+0xa2>
	__asm volatile
 800ddd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd6:	f383 8811 	msr	BASEPRI, r3
 800ddda:	f3bf 8f6f 	isb	sy
 800ddde:	f3bf 8f4f 	dsb	sy
 800dde2:	60bb      	str	r3, [r7, #8]
}
 800dde4:	bf00      	nop
 800dde6:	bf00      	nop
 800dde8:	e7fd      	b.n	800dde6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ddea:	4b10      	ldr	r3, [pc, #64]	@ (800de2c <vTaskSuspend+0xe4>)
 800ddec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddf0:	601a      	str	r2, [r3, #0]
 800ddf2:	f3bf 8f4f 	dsb	sy
 800ddf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddfa:	e00b      	b.n	800de14 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ddfc:	4b08      	ldr	r3, [pc, #32]	@ (800de20 <vTaskSuspend+0xd8>)
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	4b0b      	ldr	r3, [pc, #44]	@ (800de30 <vTaskSuspend+0xe8>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d103      	bne.n	800de10 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800de08:	4b04      	ldr	r3, [pc, #16]	@ (800de1c <vTaskSuspend+0xd4>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
	}
 800de0e:	e001      	b.n	800de14 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800de10:	f000 fb5c 	bl	800e4cc <vTaskSwitchContext>
	}
 800de14:	bf00      	nop
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20000cf4 	.word	0x20000cf4
 800de20:	200011b4 	.word	0x200011b4
 800de24:	200011d4 	.word	0x200011d4
 800de28:	200011f0 	.word	0x200011f0
 800de2c:	e000ed04 	.word	0xe000ed04
 800de30:	200011c8 	.word	0x200011c8

0800de34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800de34:	b480      	push	{r7}
 800de36:	b087      	sub	sp, #28
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800de3c:	2300      	movs	r3, #0
 800de3e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10b      	bne.n	800de62 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800de4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de4e:	f383 8811 	msr	BASEPRI, r3
 800de52:	f3bf 8f6f 	isb	sy
 800de56:	f3bf 8f4f 	dsb	sy
 800de5a:	60fb      	str	r3, [r7, #12]
}
 800de5c:	bf00      	nop
 800de5e:	bf00      	nop
 800de60:	e7fd      	b.n	800de5e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	4a0a      	ldr	r2, [pc, #40]	@ (800de90 <prvTaskIsTaskSuspended+0x5c>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d10a      	bne.n	800de82 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de70:	4a08      	ldr	r2, [pc, #32]	@ (800de94 <prvTaskIsTaskSuspended+0x60>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d005      	beq.n	800de82 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800de76:	693b      	ldr	r3, [r7, #16]
 800de78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d101      	bne.n	800de82 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800de7e:	2301      	movs	r3, #1
 800de80:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de82:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800de84:	4618      	mov	r0, r3
 800de86:	371c      	adds	r7, #28
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr
 800de90:	200011b4 	.word	0x200011b4
 800de94:	20001188 	.word	0x20001188

0800de98 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <vTaskResume+0x2a>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	60bb      	str	r3, [r7, #8]
}
 800debc:	bf00      	nop
 800debe:	bf00      	nop
 800dec0:	e7fd      	b.n	800debe <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800dec2:	4b21      	ldr	r3, [pc, #132]	@ (800df48 <vTaskResume+0xb0>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d038      	beq.n	800df3e <vTaskResume+0xa6>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d035      	beq.n	800df3e <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800ded2:	f001 ff29 	bl	800fd28 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff ffac 	bl	800de34 <prvTaskIsTaskSuspended>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d02b      	beq.n	800df3a <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	3304      	adds	r3, #4
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fc60 	bl	800c7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800def0:	4b16      	ldr	r3, [pc, #88]	@ (800df4c <vTaskResume+0xb4>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	429a      	cmp	r2, r3
 800def6:	d903      	bls.n	800df00 <vTaskResume+0x68>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defc:	4a13      	ldr	r2, [pc, #76]	@ (800df4c <vTaskResume+0xb4>)
 800defe:	6013      	str	r3, [r2, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	009b      	lsls	r3, r3, #2
 800df0c:	4a10      	ldr	r2, [pc, #64]	@ (800df50 <vTaskResume+0xb8>)
 800df0e:	441a      	add	r2, r3
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	3304      	adds	r3, #4
 800df14:	4619      	mov	r1, r3
 800df16:	4610      	mov	r0, r2
 800df18:	f7fe fbeb 	bl	800c6f2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df20:	4b09      	ldr	r3, [pc, #36]	@ (800df48 <vTaskResume+0xb0>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df26:	429a      	cmp	r2, r3
 800df28:	d307      	bcc.n	800df3a <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800df2a:	4b0a      	ldr	r3, [pc, #40]	@ (800df54 <vTaskResume+0xbc>)
 800df2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df30:	601a      	str	r2, [r3, #0]
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800df3a:	f001 ff27 	bl	800fd8c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df3e:	bf00      	nop
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	20000cf4 	.word	0x20000cf4
 800df4c:	200011d0 	.word	0x200011d0
 800df50:	20000cf8 	.word	0x20000cf8
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08a      	sub	sp, #40	@ 0x28
 800df5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df66:	463a      	mov	r2, r7
 800df68:	1d39      	adds	r1, r7, #4
 800df6a:	f107 0308 	add.w	r3, r7, #8
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fe f9a2 	bl	800c2b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df74:	6839      	ldr	r1, [r7, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	9202      	str	r2, [sp, #8]
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	2300      	movs	r3, #0
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	2300      	movs	r3, #0
 800df84:	460a      	mov	r2, r1
 800df86:	4924      	ldr	r1, [pc, #144]	@ (800e018 <vTaskStartScheduler+0xc0>)
 800df88:	4824      	ldr	r0, [pc, #144]	@ (800e01c <vTaskStartScheduler+0xc4>)
 800df8a:	f7ff fb6f 	bl	800d66c <xTaskCreateStatic>
 800df8e:	4603      	mov	r3, r0
 800df90:	4a23      	ldr	r2, [pc, #140]	@ (800e020 <vTaskStartScheduler+0xc8>)
 800df92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df94:	4b22      	ldr	r3, [pc, #136]	@ (800e020 <vTaskStartScheduler+0xc8>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d002      	beq.n	800dfa2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df9c:	2301      	movs	r3, #1
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	e001      	b.n	800dfa6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d102      	bne.n	800dfb2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dfac:	f001 f9b4 	bl	800f318 <xTimerCreateTimerTask>
 800dfb0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	d11b      	bne.n	800dff0 <vTaskStartScheduler+0x98>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	613b      	str	r3, [r7, #16]
}
 800dfca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dfcc:	4b15      	ldr	r3, [pc, #84]	@ (800e024 <vTaskStartScheduler+0xcc>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	3354      	adds	r3, #84	@ 0x54
 800dfd2:	4a15      	ldr	r2, [pc, #84]	@ (800e028 <vTaskStartScheduler+0xd0>)
 800dfd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfd6:	4b15      	ldr	r3, [pc, #84]	@ (800e02c <vTaskStartScheduler+0xd4>)
 800dfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfde:	4b14      	ldr	r3, [pc, #80]	@ (800e030 <vTaskStartScheduler+0xd8>)
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfe4:	4b13      	ldr	r3, [pc, #76]	@ (800e034 <vTaskStartScheduler+0xdc>)
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfea:	f001 fdf9 	bl	800fbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfee:	e00f      	b.n	800e010 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dff6:	d10b      	bne.n	800e010 <vTaskStartScheduler+0xb8>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	60fb      	str	r3, [r7, #12]
}
 800e00a:	bf00      	nop
 800e00c:	bf00      	nop
 800e00e:	e7fd      	b.n	800e00c <vTaskStartScheduler+0xb4>
}
 800e010:	bf00      	nop
 800e012:	3718      	adds	r7, #24
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	080128d4 	.word	0x080128d4
 800e01c:	0800e955 	.word	0x0800e955
 800e020:	200011ec 	.word	0x200011ec
 800e024:	20000cf4 	.word	0x20000cf4
 800e028:	20000298 	.word	0x20000298
 800e02c:	200011e8 	.word	0x200011e8
 800e030:	200011d4 	.word	0x200011d4
 800e034:	200011cc 	.word	0x200011cc

0800e038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e03c:	4b04      	ldr	r3, [pc, #16]	@ (800e050 <vTaskSuspendAll+0x18>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3301      	adds	r3, #1
 800e042:	4a03      	ldr	r2, [pc, #12]	@ (800e050 <vTaskSuspendAll+0x18>)
 800e044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e046:	bf00      	nop
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr
 800e050:	200011f0 	.word	0x200011f0

0800e054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e05a:	2300      	movs	r3, #0
 800e05c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e05e:	2300      	movs	r3, #0
 800e060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e062:	4b42      	ldr	r3, [pc, #264]	@ (800e16c <xTaskResumeAll+0x118>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d10b      	bne.n	800e082 <xTaskResumeAll+0x2e>
	__asm volatile
 800e06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e06e:	f383 8811 	msr	BASEPRI, r3
 800e072:	f3bf 8f6f 	isb	sy
 800e076:	f3bf 8f4f 	dsb	sy
 800e07a:	603b      	str	r3, [r7, #0]
}
 800e07c:	bf00      	nop
 800e07e:	bf00      	nop
 800e080:	e7fd      	b.n	800e07e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e082:	f001 fe51 	bl	800fd28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e086:	4b39      	ldr	r3, [pc, #228]	@ (800e16c <xTaskResumeAll+0x118>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	4a37      	ldr	r2, [pc, #220]	@ (800e16c <xTaskResumeAll+0x118>)
 800e08e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e090:	4b36      	ldr	r3, [pc, #216]	@ (800e16c <xTaskResumeAll+0x118>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d162      	bne.n	800e15e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e098:	4b35      	ldr	r3, [pc, #212]	@ (800e170 <xTaskResumeAll+0x11c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d05e      	beq.n	800e15e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0a0:	e02f      	b.n	800e102 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0a2:	4b34      	ldr	r3, [pc, #208]	@ (800e174 <xTaskResumeAll+0x120>)
 800e0a4:	68db      	ldr	r3, [r3, #12]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3318      	adds	r3, #24
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fe fb7c 	bl	800c7ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	3304      	adds	r3, #4
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fe fb77 	bl	800c7ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0c2:	4b2d      	ldr	r3, [pc, #180]	@ (800e178 <xTaskResumeAll+0x124>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d903      	bls.n	800e0d2 <xTaskResumeAll+0x7e>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e178 <xTaskResumeAll+0x124>)
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d6:	4613      	mov	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	4413      	add	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4a27      	ldr	r2, [pc, #156]	@ (800e17c <xTaskResumeAll+0x128>)
 800e0e0:	441a      	add	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f7fe fb02 	bl	800c6f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0f2:	4b23      	ldr	r3, [pc, #140]	@ (800e180 <xTaskResumeAll+0x12c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d302      	bcc.n	800e102 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e0fc:	4b21      	ldr	r3, [pc, #132]	@ (800e184 <xTaskResumeAll+0x130>)
 800e0fe:	2201      	movs	r2, #1
 800e100:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e102:	4b1c      	ldr	r3, [pc, #112]	@ (800e174 <xTaskResumeAll+0x120>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1cb      	bne.n	800e0a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e110:	f000 fd7a 	bl	800ec08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e114:	4b1c      	ldr	r3, [pc, #112]	@ (800e188 <xTaskResumeAll+0x134>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d010      	beq.n	800e142 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e120:	f000 f91a 	bl	800e358 <xTaskIncrementTick>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e12a:	4b16      	ldr	r3, [pc, #88]	@ (800e184 <xTaskResumeAll+0x130>)
 800e12c:	2201      	movs	r2, #1
 800e12e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3b01      	subs	r3, #1
 800e134:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1f1      	bne.n	800e120 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e13c:	4b12      	ldr	r3, [pc, #72]	@ (800e188 <xTaskResumeAll+0x134>)
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e142:	4b10      	ldr	r3, [pc, #64]	@ (800e184 <xTaskResumeAll+0x130>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d009      	beq.n	800e15e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e14a:	2301      	movs	r3, #1
 800e14c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e14e:	4b0f      	ldr	r3, [pc, #60]	@ (800e18c <xTaskResumeAll+0x138>)
 800e150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e154:	601a      	str	r2, [r3, #0]
 800e156:	f3bf 8f4f 	dsb	sy
 800e15a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e15e:	f001 fe15 	bl	800fd8c <vPortExitCritical>

	return xAlreadyYielded;
 800e162:	68bb      	ldr	r3, [r7, #8]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	200011f0 	.word	0x200011f0
 800e170:	200011c8 	.word	0x200011c8
 800e174:	20001188 	.word	0x20001188
 800e178:	200011d0 	.word	0x200011d0
 800e17c:	20000cf8 	.word	0x20000cf8
 800e180:	20000cf4 	.word	0x20000cf4
 800e184:	200011dc 	.word	0x200011dc
 800e188:	200011d8 	.word	0x200011d8
 800e18c:	e000ed04 	.word	0xe000ed04

0800e190 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e196:	4b05      	ldr	r3, [pc, #20]	@ (800e1ac <xTaskGetTickCount+0x1c>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e19c:	687b      	ldr	r3, [r7, #4]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	370c      	adds	r7, #12
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	200011cc 	.word	0x200011cc

0800e1b0 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b08b      	sub	sp, #44	@ 0x2c
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d05b      	beq.n	800e27e <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	61bb      	str	r3, [r7, #24]
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	685a      	ldr	r2, [r3, #4]
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	605a      	str	r2, [r3, #4]
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	685a      	ldr	r2, [r3, #4]
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	3308      	adds	r3, #8
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d104      	bne.n	800e1ea <prvSearchForNameWithinSingleList+0x3a>
 800e1e0:	69bb      	ldr	r3, [r7, #24]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	685a      	ldr	r2, [r3, #4]
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	605a      	str	r2, [r3, #4]
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	685a      	ldr	r2, [r3, #4]
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	605a      	str	r2, [r3, #4]
 800e200:	693b      	ldr	r3, [r7, #16]
 800e202:	685a      	ldr	r2, [r3, #4]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	3308      	adds	r3, #8
 800e208:	429a      	cmp	r2, r3
 800e20a:	d104      	bne.n	800e216 <prvSearchForNameWithinSingleList+0x66>
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	605a      	str	r2, [r3, #4]
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e21e:	2300      	movs	r3, #0
 800e220:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e222:	2300      	movs	r3, #0
 800e224:	623b      	str	r3, [r7, #32]
 800e226:	e01c      	b.n	800e262 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	4413      	add	r3, r2
 800e22e:	3334      	adds	r3, #52	@ 0x34
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e234:	683a      	ldr	r2, [r7, #0]
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	4413      	add	r3, r2
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	7afa      	ldrb	r2, [r7, #11]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d002      	beq.n	800e248 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e242:	2301      	movs	r3, #1
 800e244:	61fb      	str	r3, [r7, #28]
 800e246:	e006      	b.n	800e256 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e248:	7afb      	ldrb	r3, [r7, #11]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d103      	bne.n	800e256 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e252:	2301      	movs	r3, #1
 800e254:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d106      	bne.n	800e26a <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	3301      	adds	r3, #1
 800e260:	623b      	str	r3, [r7, #32]
 800e262:	6a3b      	ldr	r3, [r7, #32]
 800e264:	2b0f      	cmp	r3, #15
 800e266:	d9df      	bls.n	800e228 <prvSearchForNameWithinSingleList+0x78>
 800e268:	e000      	b.n	800e26c <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e26a:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d104      	bne.n	800e27c <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	429a      	cmp	r2, r3
 800e278:	d1bb      	bne.n	800e1f2 <prvSearchForNameWithinSingleList+0x42>
 800e27a:	e000      	b.n	800e27e <prvSearchForNameWithinSingleList+0xce>
					break;
 800e27c:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e280:	4618      	mov	r0, r3
 800e282:	372c      	adds	r7, #44	@ 0x2c
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b086      	sub	sp, #24
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e294:	2338      	movs	r3, #56	@ 0x38
 800e296:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7f1 ff99 	bl	80001d0 <strlen>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b0f      	cmp	r3, #15
 800e2a2:	d90b      	bls.n	800e2bc <xTaskGetHandle+0x30>
	__asm volatile
 800e2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	60fb      	str	r3, [r7, #12]
}
 800e2b6:	bf00      	nop
 800e2b8:	bf00      	nop
 800e2ba:	e7fd      	b.n	800e2b8 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e2bc:	f7ff febc 	bl	800e038 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e2c6:	697a      	ldr	r2, [r7, #20]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4a1c      	ldr	r2, [pc, #112]	@ (800e344 <xTaskGetHandle+0xb8>)
 800e2d2:	4413      	add	r3, r2
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff ff6a 	bl	800e1b0 <prvSearchForNameWithinSingleList>
 800e2dc:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d103      	bne.n	800e2ec <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d1ea      	bne.n	800e2c0 <xTaskGetHandle+0x34>
 800e2ea:	e000      	b.n	800e2ee <xTaskGetHandle+0x62>
					break;
 800e2ec:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e2f4:	4b14      	ldr	r3, [pc, #80]	@ (800e348 <xTaskGetHandle+0xbc>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6879      	ldr	r1, [r7, #4]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7ff ff58 	bl	800e1b0 <prvSearchForNameWithinSingleList>
 800e300:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e302:	693b      	ldr	r3, [r7, #16]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d106      	bne.n	800e316 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e308:	4b10      	ldr	r3, [pc, #64]	@ (800e34c <xTaskGetHandle+0xc0>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6879      	ldr	r1, [r7, #4]
 800e30e:	4618      	mov	r0, r3
 800e310:	f7ff ff4e 	bl	800e1b0 <prvSearchForNameWithinSingleList>
 800e314:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d104      	bne.n	800e326 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	480c      	ldr	r0, [pc, #48]	@ (800e350 <xTaskGetHandle+0xc4>)
 800e320:	f7ff ff46 	bl	800e1b0 <prvSearchForNameWithinSingleList>
 800e324:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d104      	bne.n	800e336 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e32c:	6879      	ldr	r1, [r7, #4]
 800e32e:	4809      	ldr	r0, [pc, #36]	@ (800e354 <xTaskGetHandle+0xc8>)
 800e330:	f7ff ff3e 	bl	800e1b0 <prvSearchForNameWithinSingleList>
 800e334:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e336:	f7ff fe8d 	bl	800e054 <xTaskResumeAll>

		return pxTCB;
 800e33a:	693b      	ldr	r3, [r7, #16]
	}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	20000cf8 	.word	0x20000cf8
 800e348:	20001180 	.word	0x20001180
 800e34c:	20001184 	.word	0x20001184
 800e350:	200011b4 	.word	0x200011b4
 800e354:	2000119c 	.word	0x2000119c

0800e358 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e35e:	2300      	movs	r3, #0
 800e360:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e362:	4b4f      	ldr	r3, [pc, #316]	@ (800e4a0 <xTaskIncrementTick+0x148>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	f040 8090 	bne.w	800e48c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e36c:	4b4d      	ldr	r3, [pc, #308]	@ (800e4a4 <xTaskIncrementTick+0x14c>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3301      	adds	r3, #1
 800e372:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e374:	4a4b      	ldr	r2, [pc, #300]	@ (800e4a4 <xTaskIncrementTick+0x14c>)
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d121      	bne.n	800e3c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e380:	4b49      	ldr	r3, [pc, #292]	@ (800e4a8 <xTaskIncrementTick+0x150>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d00b      	beq.n	800e3a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38e:	f383 8811 	msr	BASEPRI, r3
 800e392:	f3bf 8f6f 	isb	sy
 800e396:	f3bf 8f4f 	dsb	sy
 800e39a:	603b      	str	r3, [r7, #0]
}
 800e39c:	bf00      	nop
 800e39e:	bf00      	nop
 800e3a0:	e7fd      	b.n	800e39e <xTaskIncrementTick+0x46>
 800e3a2:	4b41      	ldr	r3, [pc, #260]	@ (800e4a8 <xTaskIncrementTick+0x150>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	60fb      	str	r3, [r7, #12]
 800e3a8:	4b40      	ldr	r3, [pc, #256]	@ (800e4ac <xTaskIncrementTick+0x154>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a3e      	ldr	r2, [pc, #248]	@ (800e4a8 <xTaskIncrementTick+0x150>)
 800e3ae:	6013      	str	r3, [r2, #0]
 800e3b0:	4a3e      	ldr	r2, [pc, #248]	@ (800e4ac <xTaskIncrementTick+0x154>)
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6013      	str	r3, [r2, #0]
 800e3b6:	4b3e      	ldr	r3, [pc, #248]	@ (800e4b0 <xTaskIncrementTick+0x158>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	4a3c      	ldr	r2, [pc, #240]	@ (800e4b0 <xTaskIncrementTick+0x158>)
 800e3be:	6013      	str	r3, [r2, #0]
 800e3c0:	f000 fc22 	bl	800ec08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e3c4:	4b3b      	ldr	r3, [pc, #236]	@ (800e4b4 <xTaskIncrementTick+0x15c>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	693a      	ldr	r2, [r7, #16]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d349      	bcc.n	800e462 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e3ce:	4b36      	ldr	r3, [pc, #216]	@ (800e4a8 <xTaskIncrementTick+0x150>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d104      	bne.n	800e3e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3d8:	4b36      	ldr	r3, [pc, #216]	@ (800e4b4 <xTaskIncrementTick+0x15c>)
 800e3da:	f04f 32ff 	mov.w	r2, #4294967295
 800e3de:	601a      	str	r2, [r3, #0]
					break;
 800e3e0:	e03f      	b.n	800e462 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e2:	4b31      	ldr	r3, [pc, #196]	@ (800e4a8 <xTaskIncrementTick+0x150>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	68db      	ldr	r3, [r3, #12]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d203      	bcs.n	800e402 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3fa:	4a2e      	ldr	r2, [pc, #184]	@ (800e4b4 <xTaskIncrementTick+0x15c>)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e400:	e02f      	b.n	800e462 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	3304      	adds	r3, #4
 800e406:	4618      	mov	r0, r3
 800e408:	f7fe f9d0 	bl	800c7ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e410:	2b00      	cmp	r3, #0
 800e412:	d004      	beq.n	800e41e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	3318      	adds	r3, #24
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fe f9c7 	bl	800c7ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e422:	4b25      	ldr	r3, [pc, #148]	@ (800e4b8 <xTaskIncrementTick+0x160>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d903      	bls.n	800e432 <xTaskIncrementTick+0xda>
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e42e:	4a22      	ldr	r2, [pc, #136]	@ (800e4b8 <xTaskIncrementTick+0x160>)
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4a1f      	ldr	r2, [pc, #124]	@ (800e4bc <xTaskIncrementTick+0x164>)
 800e440:	441a      	add	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3304      	adds	r3, #4
 800e446:	4619      	mov	r1, r3
 800e448:	4610      	mov	r0, r2
 800e44a:	f7fe f952 	bl	800c6f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e452:	4b1b      	ldr	r3, [pc, #108]	@ (800e4c0 <xTaskIncrementTick+0x168>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e458:	429a      	cmp	r2, r3
 800e45a:	d3b8      	bcc.n	800e3ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e45c:	2301      	movs	r3, #1
 800e45e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e460:	e7b5      	b.n	800e3ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e462:	4b17      	ldr	r3, [pc, #92]	@ (800e4c0 <xTaskIncrementTick+0x168>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e468:	4914      	ldr	r1, [pc, #80]	@ (800e4bc <xTaskIncrementTick+0x164>)
 800e46a:	4613      	mov	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	4413      	add	r3, r2
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	440b      	add	r3, r1
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d901      	bls.n	800e47e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e47a:	2301      	movs	r3, #1
 800e47c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e47e:	4b11      	ldr	r3, [pc, #68]	@ (800e4c4 <xTaskIncrementTick+0x16c>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d007      	beq.n	800e496 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e486:	2301      	movs	r3, #1
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	e004      	b.n	800e496 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e48c:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c8 <xTaskIncrementTick+0x170>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	3301      	adds	r3, #1
 800e492:	4a0d      	ldr	r2, [pc, #52]	@ (800e4c8 <xTaskIncrementTick+0x170>)
 800e494:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e496:	697b      	ldr	r3, [r7, #20]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3718      	adds	r7, #24
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	200011f0 	.word	0x200011f0
 800e4a4:	200011cc 	.word	0x200011cc
 800e4a8:	20001180 	.word	0x20001180
 800e4ac:	20001184 	.word	0x20001184
 800e4b0:	200011e0 	.word	0x200011e0
 800e4b4:	200011e8 	.word	0x200011e8
 800e4b8:	200011d0 	.word	0x200011d0
 800e4bc:	20000cf8 	.word	0x20000cf8
 800e4c0:	20000cf4 	.word	0x20000cf4
 800e4c4:	200011dc 	.word	0x200011dc
 800e4c8:	200011d8 	.word	0x200011d8

0800e4cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e4d2:	4b2b      	ldr	r3, [pc, #172]	@ (800e580 <vTaskSwitchContext+0xb4>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4da:	4b2a      	ldr	r3, [pc, #168]	@ (800e584 <vTaskSwitchContext+0xb8>)
 800e4dc:	2201      	movs	r2, #1
 800e4de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4e0:	e047      	b.n	800e572 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e4e2:	4b28      	ldr	r3, [pc, #160]	@ (800e584 <vTaskSwitchContext+0xb8>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e8:	4b27      	ldr	r3, [pc, #156]	@ (800e588 <vTaskSwitchContext+0xbc>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	60fb      	str	r3, [r7, #12]
 800e4ee:	e011      	b.n	800e514 <vTaskSwitchContext+0x48>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <vTaskSwitchContext+0x42>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	607b      	str	r3, [r7, #4]
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	e7fd      	b.n	800e50a <vTaskSwitchContext+0x3e>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3b01      	subs	r3, #1
 800e512:	60fb      	str	r3, [r7, #12]
 800e514:	491d      	ldr	r1, [pc, #116]	@ (800e58c <vTaskSwitchContext+0xc0>)
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	440b      	add	r3, r1
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d0e3      	beq.n	800e4f0 <vTaskSwitchContext+0x24>
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	4613      	mov	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4a16      	ldr	r2, [pc, #88]	@ (800e58c <vTaskSwitchContext+0xc0>)
 800e534:	4413      	add	r3, r2
 800e536:	60bb      	str	r3, [r7, #8]
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	605a      	str	r2, [r3, #4]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	685a      	ldr	r2, [r3, #4]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	3308      	adds	r3, #8
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d104      	bne.n	800e558 <vTaskSwitchContext+0x8c>
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	685a      	ldr	r2, [r3, #4]
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	605a      	str	r2, [r3, #4]
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	68db      	ldr	r3, [r3, #12]
 800e55e:	4a0c      	ldr	r2, [pc, #48]	@ (800e590 <vTaskSwitchContext+0xc4>)
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	4a09      	ldr	r2, [pc, #36]	@ (800e588 <vTaskSwitchContext+0xbc>)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e568:	4b09      	ldr	r3, [pc, #36]	@ (800e590 <vTaskSwitchContext+0xc4>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3354      	adds	r3, #84	@ 0x54
 800e56e:	4a09      	ldr	r2, [pc, #36]	@ (800e594 <vTaskSwitchContext+0xc8>)
 800e570:	6013      	str	r3, [r2, #0]
}
 800e572:	bf00      	nop
 800e574:	3714      	adds	r7, #20
 800e576:	46bd      	mov	sp, r7
 800e578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57c:	4770      	bx	lr
 800e57e:	bf00      	nop
 800e580:	200011f0 	.word	0x200011f0
 800e584:	200011dc 	.word	0x200011dc
 800e588:	200011d0 	.word	0x200011d0
 800e58c:	20000cf8 	.word	0x20000cf8
 800e590:	20000cf4 	.word	0x20000cf4
 800e594:	20000298 	.word	0x20000298

0800e598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d10b      	bne.n	800e5c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	60fb      	str	r3, [r7, #12]
}
 800e5ba:	bf00      	nop
 800e5bc:	bf00      	nop
 800e5be:	e7fd      	b.n	800e5bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e5c0:	4b07      	ldr	r3, [pc, #28]	@ (800e5e0 <vTaskPlaceOnEventList+0x48>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3318      	adds	r3, #24
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f7fe f8b6 	bl	800c73a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	6838      	ldr	r0, [r7, #0]
 800e5d2:	f000 fe4d 	bl	800f270 <prvAddCurrentTaskToDelayedList>
}
 800e5d6:	bf00      	nop
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	20000cf4 	.word	0x20000cf4

0800e5e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10b      	bne.n	800e60e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e5f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5fa:	f383 8811 	msr	BASEPRI, r3
 800e5fe:	f3bf 8f6f 	isb	sy
 800e602:	f3bf 8f4f 	dsb	sy
 800e606:	617b      	str	r3, [r7, #20]
}
 800e608:	bf00      	nop
 800e60a:	bf00      	nop
 800e60c:	e7fd      	b.n	800e60a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e60e:	4b12      	ldr	r3, [pc, #72]	@ (800e658 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10b      	bne.n	800e62e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	f383 8811 	msr	BASEPRI, r3
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	613b      	str	r3, [r7, #16]
}
 800e628:	bf00      	nop
 800e62a:	bf00      	nop
 800e62c:	e7fd      	b.n	800e62a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e62e:	4b0b      	ldr	r3, [pc, #44]	@ (800e65c <vTaskPlaceOnUnorderedEventList+0x78>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e638:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e63a:	4b08      	ldr	r3, [pc, #32]	@ (800e65c <vTaskPlaceOnUnorderedEventList+0x78>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3318      	adds	r3, #24
 800e640:	4619      	mov	r1, r3
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7fe f855 	bl	800c6f2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e648:	2101      	movs	r1, #1
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fe10 	bl	800f270 <prvAddCurrentTaskToDelayedList>
}
 800e650:	bf00      	nop
 800e652:	3718      	adds	r7, #24
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	200011f0 	.word	0x200011f0
 800e65c:	20000cf4 	.word	0x20000cf4

0800e660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10b      	bne.n	800e68a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	617b      	str	r3, [r7, #20]
}
 800e684:	bf00      	nop
 800e686:	bf00      	nop
 800e688:	e7fd      	b.n	800e686 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e68a:	4b0a      	ldr	r3, [pc, #40]	@ (800e6b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	3318      	adds	r3, #24
 800e690:	4619      	mov	r1, r3
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f7fe f82d 	bl	800c6f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e69e:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e6a4:	6879      	ldr	r1, [r7, #4]
 800e6a6:	68b8      	ldr	r0, [r7, #8]
 800e6a8:	f000 fde2 	bl	800f270 <prvAddCurrentTaskToDelayedList>
	}
 800e6ac:	bf00      	nop
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	20000cf4 	.word	0x20000cf4

0800e6b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10b      	bne.n	800e6e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6d2:	f383 8811 	msr	BASEPRI, r3
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	f3bf 8f4f 	dsb	sy
 800e6de:	60fb      	str	r3, [r7, #12]
}
 800e6e0:	bf00      	nop
 800e6e2:	bf00      	nop
 800e6e4:	e7fd      	b.n	800e6e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	3318      	adds	r3, #24
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7fe f85e 	bl	800c7ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6f0:	4b1d      	ldr	r3, [pc, #116]	@ (800e768 <xTaskRemoveFromEventList+0xb0>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d11d      	bne.n	800e734 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe f855 	bl	800c7ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e706:	4b19      	ldr	r3, [pc, #100]	@ (800e76c <xTaskRemoveFromEventList+0xb4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d903      	bls.n	800e716 <xTaskRemoveFromEventList+0x5e>
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e712:	4a16      	ldr	r2, [pc, #88]	@ (800e76c <xTaskRemoveFromEventList+0xb4>)
 800e714:	6013      	str	r3, [r2, #0]
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4a13      	ldr	r2, [pc, #76]	@ (800e770 <xTaskRemoveFromEventList+0xb8>)
 800e724:	441a      	add	r2, r3
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	3304      	adds	r3, #4
 800e72a:	4619      	mov	r1, r3
 800e72c:	4610      	mov	r0, r2
 800e72e:	f7fd ffe0 	bl	800c6f2 <vListInsertEnd>
 800e732:	e005      	b.n	800e740 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	3318      	adds	r3, #24
 800e738:	4619      	mov	r1, r3
 800e73a:	480e      	ldr	r0, [pc, #56]	@ (800e774 <xTaskRemoveFromEventList+0xbc>)
 800e73c:	f7fd ffd9 	bl	800c6f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e744:	4b0c      	ldr	r3, [pc, #48]	@ (800e778 <xTaskRemoveFromEventList+0xc0>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d905      	bls.n	800e75a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e74e:	2301      	movs	r3, #1
 800e750:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e752:	4b0a      	ldr	r3, [pc, #40]	@ (800e77c <xTaskRemoveFromEventList+0xc4>)
 800e754:	2201      	movs	r2, #1
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	e001      	b.n	800e75e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e75a:	2300      	movs	r3, #0
 800e75c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e75e:	697b      	ldr	r3, [r7, #20]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3718      	adds	r7, #24
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	200011f0 	.word	0x200011f0
 800e76c:	200011d0 	.word	0x200011d0
 800e770:	20000cf8 	.word	0x20000cf8
 800e774:	20001188 	.word	0x20001188
 800e778:	20000cf4 	.word	0x20000cf4
 800e77c:	200011dc 	.word	0x200011dc

0800e780 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e78a:	4b2a      	ldr	r3, [pc, #168]	@ (800e834 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10b      	bne.n	800e7aa <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e796:	f383 8811 	msr	BASEPRI, r3
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	613b      	str	r3, [r7, #16]
}
 800e7a4:	bf00      	nop
 800e7a6:	bf00      	nop
 800e7a8:	e7fd      	b.n	800e7a6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d10b      	bne.n	800e7d8 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	60fb      	str	r3, [r7, #12]
}
 800e7d2:	bf00      	nop
 800e7d4:	bf00      	nop
 800e7d6:	e7fd      	b.n	800e7d4 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f7fd ffe7 	bl	800c7ac <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fd ffe2 	bl	800c7ac <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7ec:	4b12      	ldr	r3, [pc, #72]	@ (800e838 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d903      	bls.n	800e7fc <vTaskRemoveFromUnorderedEventList+0x7c>
 800e7f4:	697b      	ldr	r3, [r7, #20]
 800e7f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7f8:	4a0f      	ldr	r2, [pc, #60]	@ (800e838 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7fa:	6013      	str	r3, [r2, #0]
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e800:	4613      	mov	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4413      	add	r3, r2
 800e806:	009b      	lsls	r3, r3, #2
 800e808:	4a0c      	ldr	r2, [pc, #48]	@ (800e83c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e80a:	441a      	add	r2, r3
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	3304      	adds	r3, #4
 800e810:	4619      	mov	r1, r3
 800e812:	4610      	mov	r0, r2
 800e814:	f7fd ff6d 	bl	800c6f2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e81c:	4b08      	ldr	r3, [pc, #32]	@ (800e840 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e822:	429a      	cmp	r2, r3
 800e824:	d902      	bls.n	800e82c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e826:	4b07      	ldr	r3, [pc, #28]	@ (800e844 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e828:	2201      	movs	r2, #1
 800e82a:	601a      	str	r2, [r3, #0]
	}
}
 800e82c:	bf00      	nop
 800e82e:	3718      	adds	r7, #24
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	200011f0 	.word	0x200011f0
 800e838:	200011d0 	.word	0x200011d0
 800e83c:	20000cf8 	.word	0x20000cf8
 800e840:	20000cf4 	.word	0x20000cf4
 800e844:	200011dc 	.word	0x200011dc

0800e848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e850:	4b06      	ldr	r3, [pc, #24]	@ (800e86c <vTaskInternalSetTimeOutState+0x24>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e858:	4b05      	ldr	r3, [pc, #20]	@ (800e870 <vTaskInternalSetTimeOutState+0x28>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	605a      	str	r2, [r3, #4]
}
 800e860:	bf00      	nop
 800e862:	370c      	adds	r7, #12
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr
 800e86c:	200011e0 	.word	0x200011e0
 800e870:	200011cc 	.word	0x200011cc

0800e874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b088      	sub	sp, #32
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d10b      	bne.n	800e89c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e888:	f383 8811 	msr	BASEPRI, r3
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	f3bf 8f4f 	dsb	sy
 800e894:	613b      	str	r3, [r7, #16]
}
 800e896:	bf00      	nop
 800e898:	bf00      	nop
 800e89a:	e7fd      	b.n	800e898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10b      	bne.n	800e8ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e8a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a6:	f383 8811 	msr	BASEPRI, r3
 800e8aa:	f3bf 8f6f 	isb	sy
 800e8ae:	f3bf 8f4f 	dsb	sy
 800e8b2:	60fb      	str	r3, [r7, #12]
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	e7fd      	b.n	800e8b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e8ba:	f001 fa35 	bl	800fd28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8be:	4b1d      	ldr	r3, [pc, #116]	@ (800e934 <xTaskCheckForTimeOut+0xc0>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	69ba      	ldr	r2, [r7, #24]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d6:	d102      	bne.n	800e8de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	e023      	b.n	800e926 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	4b15      	ldr	r3, [pc, #84]	@ (800e938 <xTaskCheckForTimeOut+0xc4>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d007      	beq.n	800e8fa <xTaskCheckForTimeOut+0x86>
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d302      	bcc.n	800e8fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8f4:	2301      	movs	r3, #1
 800e8f6:	61fb      	str	r3, [r7, #28]
 800e8f8:	e015      	b.n	800e926 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	429a      	cmp	r2, r3
 800e902:	d20b      	bcs.n	800e91c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	681a      	ldr	r2, [r3, #0]
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	1ad2      	subs	r2, r2, r3
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7ff ff99 	bl	800e848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e916:	2300      	movs	r3, #0
 800e918:	61fb      	str	r3, [r7, #28]
 800e91a:	e004      	b.n	800e926 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2200      	movs	r2, #0
 800e920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e922:	2301      	movs	r3, #1
 800e924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e926:	f001 fa31 	bl	800fd8c <vPortExitCritical>

	return xReturn;
 800e92a:	69fb      	ldr	r3, [r7, #28]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3720      	adds	r7, #32
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	200011cc 	.word	0x200011cc
 800e938:	200011e0 	.word	0x200011e0

0800e93c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e940:	4b03      	ldr	r3, [pc, #12]	@ (800e950 <vTaskMissedYield+0x14>)
 800e942:	2201      	movs	r2, #1
 800e944:	601a      	str	r2, [r3, #0]
}
 800e946:	bf00      	nop
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	200011dc 	.word	0x200011dc

0800e954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e95c:	f000 f852 	bl	800ea04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e960:	4b06      	ldr	r3, [pc, #24]	@ (800e97c <prvIdleTask+0x28>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d9f9      	bls.n	800e95c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e968:	4b05      	ldr	r3, [pc, #20]	@ (800e980 <prvIdleTask+0x2c>)
 800e96a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e96e:	601a      	str	r2, [r3, #0]
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e978:	e7f0      	b.n	800e95c <prvIdleTask+0x8>
 800e97a:	bf00      	nop
 800e97c:	20000cf8 	.word	0x20000cf8
 800e980:	e000ed04 	.word	0xe000ed04

0800e984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e98a:	2300      	movs	r3, #0
 800e98c:	607b      	str	r3, [r7, #4]
 800e98e:	e00c      	b.n	800e9aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	4613      	mov	r3, r2
 800e994:	009b      	lsls	r3, r3, #2
 800e996:	4413      	add	r3, r2
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	4a12      	ldr	r2, [pc, #72]	@ (800e9e4 <prvInitialiseTaskLists+0x60>)
 800e99c:	4413      	add	r3, r2
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fd fe7a 	bl	800c698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	607b      	str	r3, [r7, #4]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b37      	cmp	r3, #55	@ 0x37
 800e9ae:	d9ef      	bls.n	800e990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9b0:	480d      	ldr	r0, [pc, #52]	@ (800e9e8 <prvInitialiseTaskLists+0x64>)
 800e9b2:	f7fd fe71 	bl	800c698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9b6:	480d      	ldr	r0, [pc, #52]	@ (800e9ec <prvInitialiseTaskLists+0x68>)
 800e9b8:	f7fd fe6e 	bl	800c698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9bc:	480c      	ldr	r0, [pc, #48]	@ (800e9f0 <prvInitialiseTaskLists+0x6c>)
 800e9be:	f7fd fe6b 	bl	800c698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9c2:	480c      	ldr	r0, [pc, #48]	@ (800e9f4 <prvInitialiseTaskLists+0x70>)
 800e9c4:	f7fd fe68 	bl	800c698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9c8:	480b      	ldr	r0, [pc, #44]	@ (800e9f8 <prvInitialiseTaskLists+0x74>)
 800e9ca:	f7fd fe65 	bl	800c698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e9fc <prvInitialiseTaskLists+0x78>)
 800e9d0:	4a05      	ldr	r2, [pc, #20]	@ (800e9e8 <prvInitialiseTaskLists+0x64>)
 800e9d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9d4:	4b0a      	ldr	r3, [pc, #40]	@ (800ea00 <prvInitialiseTaskLists+0x7c>)
 800e9d6:	4a05      	ldr	r2, [pc, #20]	@ (800e9ec <prvInitialiseTaskLists+0x68>)
 800e9d8:	601a      	str	r2, [r3, #0]
}
 800e9da:	bf00      	nop
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20000cf8 	.word	0x20000cf8
 800e9e8:	20001158 	.word	0x20001158
 800e9ec:	2000116c 	.word	0x2000116c
 800e9f0:	20001188 	.word	0x20001188
 800e9f4:	2000119c 	.word	0x2000119c
 800e9f8:	200011b4 	.word	0x200011b4
 800e9fc:	20001180 	.word	0x20001180
 800ea00:	20001184 	.word	0x20001184

0800ea04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea0a:	e019      	b.n	800ea40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea0c:	f001 f98c 	bl	800fd28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea10:	4b10      	ldr	r3, [pc, #64]	@ (800ea54 <prvCheckTasksWaitingTermination+0x50>)
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	3304      	adds	r3, #4
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7fd fec5 	bl	800c7ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea22:	4b0d      	ldr	r3, [pc, #52]	@ (800ea58 <prvCheckTasksWaitingTermination+0x54>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	3b01      	subs	r3, #1
 800ea28:	4a0b      	ldr	r2, [pc, #44]	@ (800ea58 <prvCheckTasksWaitingTermination+0x54>)
 800ea2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ea5c <prvCheckTasksWaitingTermination+0x58>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3b01      	subs	r3, #1
 800ea32:	4a0a      	ldr	r2, [pc, #40]	@ (800ea5c <prvCheckTasksWaitingTermination+0x58>)
 800ea34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea36:	f001 f9a9 	bl	800fd8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f8ae 	bl	800eb9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea40:	4b06      	ldr	r3, [pc, #24]	@ (800ea5c <prvCheckTasksWaitingTermination+0x58>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d1e1      	bne.n	800ea0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea48:	bf00      	nop
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	2000119c 	.word	0x2000119c
 800ea58:	200011c8 	.word	0x200011c8
 800ea5c:	200011b0 	.word	0x200011b0

0800ea60 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b086      	sub	sp, #24
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	60f8      	str	r0, [r7, #12]
 800ea68:	60b9      	str	r1, [r7, #8]
 800ea6a:	607a      	str	r2, [r7, #4]
 800ea6c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d102      	bne.n	800ea7a <vTaskGetInfo+0x1a>
 800ea74:	4b2c      	ldr	r3, [pc, #176]	@ (800eb28 <vTaskGetInfo+0xc8>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	e000      	b.n	800ea7c <vTaskGetInfo+0x1c>
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	697a      	ldr	r2, [r7, #20]
 800ea82:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2200      	movs	r2, #0
 800eab2:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800eab4:	78fb      	ldrb	r3, [r7, #3]
 800eab6:	2b05      	cmp	r3, #5
 800eab8:	d01a      	beq.n	800eaf0 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800eaba:	4b1b      	ldr	r3, [pc, #108]	@ (800eb28 <vTaskGetInfo+0xc8>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	697a      	ldr	r2, [r7, #20]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d103      	bne.n	800eacc <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	2200      	movs	r2, #0
 800eac8:	731a      	strb	r2, [r3, #12]
 800eaca:	e018      	b.n	800eafe <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	78fa      	ldrb	r2, [r7, #3]
 800ead0:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800ead2:	78fb      	ldrb	r3, [r7, #3]
 800ead4:	2b03      	cmp	r3, #3
 800ead6:	d112      	bne.n	800eafe <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800ead8:	f7ff faae 	bl	800e038 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d002      	beq.n	800eaea <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	2202      	movs	r2, #2
 800eae8:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eaea:	f7ff fab3 	bl	800e054 <xTaskResumeAll>
 800eaee:	e006      	b.n	800eafe <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eaf0:	6978      	ldr	r0, [r7, #20]
 800eaf2:	f7ff f823 	bl	800db3c <eTaskGetState>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	461a      	mov	r2, r3
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d009      	beq.n	800eb18 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f000 f80f 	bl	800eb2c <prvTaskCheckFreeStackSpace>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	461a      	mov	r2, r3
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800eb16:	e002      	b.n	800eb1e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	841a      	strh	r2, [r3, #32]
	}
 800eb1e:	bf00      	nop
 800eb20:	3718      	adds	r7, #24
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	20000cf4 	.word	0x20000cf4

0800eb2c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800eb34:	2300      	movs	r3, #0
 800eb36:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb38:	e005      	b.n	800eb46 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	3301      	adds	r3, #1
 800eb44:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	2ba5      	cmp	r3, #165	@ 0xa5
 800eb4c:	d0f5      	beq.n	800eb3a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	089b      	lsrs	r3, r3, #2
 800eb52:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	b29b      	uxth	r3, r3
	}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3714      	adds	r7, #20
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d102      	bne.n	800eb78 <uxTaskGetStackHighWaterMark+0x14>
 800eb72:	4b09      	ldr	r3, [pc, #36]	@ (800eb98 <uxTaskGetStackHighWaterMark+0x34>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	e000      	b.n	800eb7a <uxTaskGetStackHighWaterMark+0x16>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb80:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800eb82:	6938      	ldr	r0, [r7, #16]
 800eb84:	f7ff ffd2 	bl	800eb2c <prvTaskCheckFreeStackSpace>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
	}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	20000cf4 	.word	0x20000cf4

0800eb9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	3354      	adds	r3, #84	@ 0x54
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f002 f9d1 	bl	8010f50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d108      	bne.n	800ebca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f001 faa3 	bl	8010108 <vPortFree>
				vPortFree( pxTCB );
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f001 faa0 	bl	8010108 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebc8:	e019      	b.n	800ebfe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d103      	bne.n	800ebdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f001 fa97 	bl	8010108 <vPortFree>
	}
 800ebda:	e010      	b.n	800ebfe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d00b      	beq.n	800ebfe <prvDeleteTCB+0x62>
	__asm volatile
 800ebe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebea:	f383 8811 	msr	BASEPRI, r3
 800ebee:	f3bf 8f6f 	isb	sy
 800ebf2:	f3bf 8f4f 	dsb	sy
 800ebf6:	60fb      	str	r3, [r7, #12]
}
 800ebf8:	bf00      	nop
 800ebfa:	bf00      	nop
 800ebfc:	e7fd      	b.n	800ebfa <prvDeleteTCB+0x5e>
	}
 800ebfe:	bf00      	nop
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
	...

0800ec08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ec40 <prvResetNextTaskUnblockTime+0x38>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d104      	bne.n	800ec22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec18:	4b0a      	ldr	r3, [pc, #40]	@ (800ec44 <prvResetNextTaskUnblockTime+0x3c>)
 800ec1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec20:	e008      	b.n	800ec34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec22:	4b07      	ldr	r3, [pc, #28]	@ (800ec40 <prvResetNextTaskUnblockTime+0x38>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	4a04      	ldr	r2, [pc, #16]	@ (800ec44 <prvResetNextTaskUnblockTime+0x3c>)
 800ec32:	6013      	str	r3, [r2, #0]
}
 800ec34:	bf00      	nop
 800ec36:	370c      	adds	r7, #12
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3e:	4770      	bx	lr
 800ec40:	20001180 	.word	0x20001180
 800ec44:	200011e8 	.word	0x200011e8

0800ec48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ec7c <xTaskGetSchedulerState+0x34>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d102      	bne.n	800ec5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec56:	2301      	movs	r3, #1
 800ec58:	607b      	str	r3, [r7, #4]
 800ec5a:	e008      	b.n	800ec6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec5c:	4b08      	ldr	r3, [pc, #32]	@ (800ec80 <xTaskGetSchedulerState+0x38>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d102      	bne.n	800ec6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec64:	2302      	movs	r3, #2
 800ec66:	607b      	str	r3, [r7, #4]
 800ec68:	e001      	b.n	800ec6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec6e:	687b      	ldr	r3, [r7, #4]
	}
 800ec70:	4618      	mov	r0, r3
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr
 800ec7c:	200011d4 	.word	0x200011d4
 800ec80:	200011f0 	.word	0x200011f0

0800ec84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d051      	beq.n	800ed3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec9e:	4b2a      	ldr	r3, [pc, #168]	@ (800ed48 <xTaskPriorityInherit+0xc4>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d241      	bcs.n	800ed2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	699b      	ldr	r3, [r3, #24]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	db06      	blt.n	800ecbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb0:	4b25      	ldr	r3, [pc, #148]	@ (800ed48 <xTaskPriorityInherit+0xc4>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecb6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	6959      	ldr	r1, [r3, #20]
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	009b      	lsls	r3, r3, #2
 800ecca:	4413      	add	r3, r2
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4a1f      	ldr	r2, [pc, #124]	@ (800ed4c <xTaskPriorityInherit+0xc8>)
 800ecd0:	4413      	add	r3, r2
 800ecd2:	4299      	cmp	r1, r3
 800ecd4:	d122      	bne.n	800ed1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	3304      	adds	r3, #4
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fd fd66 	bl	800c7ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ece0:	4b19      	ldr	r3, [pc, #100]	@ (800ed48 <xTaskPriorityInherit+0xc4>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecee:	4b18      	ldr	r3, [pc, #96]	@ (800ed50 <xTaskPriorityInherit+0xcc>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d903      	bls.n	800ecfe <xTaskPriorityInherit+0x7a>
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecfa:	4a15      	ldr	r2, [pc, #84]	@ (800ed50 <xTaskPriorityInherit+0xcc>)
 800ecfc:	6013      	str	r3, [r2, #0]
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed02:	4613      	mov	r3, r2
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	4413      	add	r3, r2
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4a10      	ldr	r2, [pc, #64]	@ (800ed4c <xTaskPriorityInherit+0xc8>)
 800ed0c:	441a      	add	r2, r3
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	3304      	adds	r3, #4
 800ed12:	4619      	mov	r1, r3
 800ed14:	4610      	mov	r0, r2
 800ed16:	f7fd fcec 	bl	800c6f2 <vListInsertEnd>
 800ed1a:	e004      	b.n	800ed26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed48 <xTaskPriorityInherit+0xc4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ed26:	2301      	movs	r3, #1
 800ed28:	60fb      	str	r3, [r7, #12]
 800ed2a:	e008      	b.n	800ed3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed30:	4b05      	ldr	r3, [pc, #20]	@ (800ed48 <xTaskPriorityInherit+0xc4>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d201      	bcs.n	800ed3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
	}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3710      	adds	r7, #16
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	20000cf4 	.word	0x20000cf4
 800ed4c:	20000cf8 	.word	0x20000cf8
 800ed50:	200011d0 	.word	0x200011d0

0800ed54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b086      	sub	sp, #24
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed60:	2300      	movs	r3, #0
 800ed62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d058      	beq.n	800ee1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ee28 <xTaskPriorityDisinherit+0xd4>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d00b      	beq.n	800ed8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	60fb      	str	r3, [r7, #12]
}
 800ed86:	bf00      	nop
 800ed88:	bf00      	nop
 800ed8a:	e7fd      	b.n	800ed88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d10b      	bne.n	800edac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed98:	f383 8811 	msr	BASEPRI, r3
 800ed9c:	f3bf 8f6f 	isb	sy
 800eda0:	f3bf 8f4f 	dsb	sy
 800eda4:	60bb      	str	r3, [r7, #8]
}
 800eda6:	bf00      	nop
 800eda8:	bf00      	nop
 800edaa:	e7fd      	b.n	800eda8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edb0:	1e5a      	subs	r2, r3, #1
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d02c      	beq.n	800ee1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d128      	bne.n	800ee1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	3304      	adds	r3, #4
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fd fcec 	bl	800c7ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edec:	4b0f      	ldr	r3, [pc, #60]	@ (800ee2c <xTaskPriorityDisinherit+0xd8>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d903      	bls.n	800edfc <xTaskPriorityDisinherit+0xa8>
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edf8:	4a0c      	ldr	r2, [pc, #48]	@ (800ee2c <xTaskPriorityDisinherit+0xd8>)
 800edfa:	6013      	str	r3, [r2, #0]
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee00:	4613      	mov	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4a09      	ldr	r2, [pc, #36]	@ (800ee30 <xTaskPriorityDisinherit+0xdc>)
 800ee0a:	441a      	add	r2, r3
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	3304      	adds	r3, #4
 800ee10:	4619      	mov	r1, r3
 800ee12:	4610      	mov	r0, r2
 800ee14:	f7fd fc6d 	bl	800c6f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee1c:	697b      	ldr	r3, [r7, #20]
	}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	20000cf4 	.word	0x20000cf4
 800ee2c:	200011d0 	.word	0x200011d0
 800ee30:	20000cf8 	.word	0x20000cf8

0800ee34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee42:	2301      	movs	r3, #1
 800ee44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d06c      	beq.n	800ef26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee4c:	69bb      	ldr	r3, [r7, #24]
 800ee4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10b      	bne.n	800ee6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee58:	f383 8811 	msr	BASEPRI, r3
 800ee5c:	f3bf 8f6f 	isb	sy
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	60fb      	str	r3, [r7, #12]
}
 800ee66:	bf00      	nop
 800ee68:	bf00      	nop
 800ee6a:	e7fd      	b.n	800ee68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee70:	683a      	ldr	r2, [r7, #0]
 800ee72:	429a      	cmp	r2, r3
 800ee74:	d902      	bls.n	800ee7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	61fb      	str	r3, [r7, #28]
 800ee7a:	e002      	b.n	800ee82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee86:	69fa      	ldr	r2, [r7, #28]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d04c      	beq.n	800ef26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d147      	bne.n	800ef26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee96:	4b26      	ldr	r3, [pc, #152]	@ (800ef30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d10b      	bne.n	800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800eea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	60bb      	str	r3, [r7, #8]
}
 800eeb2:	bf00      	nop
 800eeb4:	bf00      	nop
 800eeb6:	e7fd      	b.n	800eeb4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eebc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	69fa      	ldr	r2, [r7, #28]
 800eec2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	699b      	ldr	r3, [r3, #24]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	db04      	blt.n	800eed6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	6959      	ldr	r1, [r3, #20]
 800eeda:	693a      	ldr	r2, [r7, #16]
 800eedc:	4613      	mov	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4413      	add	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4a13      	ldr	r2, [pc, #76]	@ (800ef34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eee6:	4413      	add	r3, r2
 800eee8:	4299      	cmp	r1, r3
 800eeea:	d11c      	bne.n	800ef26 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	3304      	adds	r3, #4
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fd fc5b 	bl	800c7ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eef6:	69bb      	ldr	r3, [r7, #24]
 800eef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eefa:	4b0f      	ldr	r3, [pc, #60]	@ (800ef38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d903      	bls.n	800ef0a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef06:	4a0c      	ldr	r2, [pc, #48]	@ (800ef38 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ef08:	6013      	str	r3, [r2, #0]
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef0e:	4613      	mov	r3, r2
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	4413      	add	r3, r2
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	4a07      	ldr	r2, [pc, #28]	@ (800ef34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef18:	441a      	add	r2, r3
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	3304      	adds	r3, #4
 800ef1e:	4619      	mov	r1, r3
 800ef20:	4610      	mov	r0, r2
 800ef22:	f7fd fbe6 	bl	800c6f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef26:	bf00      	nop
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	20000cf4 	.word	0x20000cf4
 800ef34:	20000cf8 	.word	0x20000cf8
 800ef38:	200011d0 	.word	0x200011d0

0800ef3c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef42:	4b09      	ldr	r3, [pc, #36]	@ (800ef68 <uxTaskResetEventItemValue+0x2c>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	699b      	ldr	r3, [r3, #24]
 800ef48:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef4a:	4b07      	ldr	r3, [pc, #28]	@ (800ef68 <uxTaskResetEventItemValue+0x2c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef50:	4b05      	ldr	r3, [pc, #20]	@ (800ef68 <uxTaskResetEventItemValue+0x2c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ef58:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ef5a:	687b      	ldr	r3, [r7, #4]
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	20000cf4 	.word	0x20000cf4

0800ef6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef6c:	b480      	push	{r7}
 800ef6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef70:	4b07      	ldr	r3, [pc, #28]	@ (800ef90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef78:	4b05      	ldr	r3, [pc, #20]	@ (800ef90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef7e:	3201      	adds	r2, #1
 800ef80:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef82:	4b03      	ldr	r3, [pc, #12]	@ (800ef90 <pvTaskIncrementMutexHeldCount+0x24>)
 800ef84:	681b      	ldr	r3, [r3, #0]
	}
 800ef86:	4618      	mov	r0, r3
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr
 800ef90:	20000cf4 	.word	0x20000cf4

0800ef94 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
 800ef9c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef9e:	f000 fec3 	bl	800fd28 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800efa2:	4b20      	ldr	r3, [pc, #128]	@ (800f024 <ulTaskNotifyTake+0x90>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d113      	bne.n	800efd6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800efae:	4b1d      	ldr	r3, [pc, #116]	@ (800f024 <ulTaskNotifyTake+0x90>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d00b      	beq.n	800efd6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800efbe:	2101      	movs	r1, #1
 800efc0:	6838      	ldr	r0, [r7, #0]
 800efc2:	f000 f955 	bl	800f270 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800efc6:	4b18      	ldr	r3, [pc, #96]	@ (800f028 <ulTaskNotifyTake+0x94>)
 800efc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efd6:	f000 fed9 	bl	800fd8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800efda:	f000 fea5 	bl	800fd28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800efde:	4b11      	ldr	r3, [pc, #68]	@ (800f024 <ulTaskNotifyTake+0x90>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efe6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00e      	beq.n	800f00c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d005      	beq.n	800f000 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800eff4:	4b0b      	ldr	r3, [pc, #44]	@ (800f024 <ulTaskNotifyTake+0x90>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2200      	movs	r2, #0
 800effa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800effe:	e005      	b.n	800f00c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f000:	4b08      	ldr	r3, [pc, #32]	@ (800f024 <ulTaskNotifyTake+0x90>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	3a01      	subs	r2, #1
 800f008:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f00c:	4b05      	ldr	r3, [pc, #20]	@ (800f024 <ulTaskNotifyTake+0x90>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2200      	movs	r2, #0
 800f012:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f016:	f000 feb9 	bl	800fd8c <vPortExitCritical>

		return ulReturn;
 800f01a:	68fb      	ldr	r3, [r7, #12]
	}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	20000cf4 	.word	0x20000cf4
 800f028:	e000ed04 	.word	0xe000ed04

0800f02c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
 800f038:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f03a:	f000 fe75 	bl	800fd28 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f03e:	4b29      	ldr	r3, [pc, #164]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f046:	b2db      	uxtb	r3, r3
 800f048:	2b02      	cmp	r3, #2
 800f04a:	d01c      	beq.n	800f086 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f04c:	4b25      	ldr	r3, [pc, #148]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	43d2      	mvns	r2, r2
 800f058:	400a      	ands	r2, r1
 800f05a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f05e:	4b21      	ldr	r3, [pc, #132]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00b      	beq.n	800f086 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f06e:	2101      	movs	r1, #1
 800f070:	6838      	ldr	r0, [r7, #0]
 800f072:	f000 f8fd 	bl	800f270 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f076:	4b1c      	ldr	r3, [pc, #112]	@ (800f0e8 <xTaskNotifyWait+0xbc>)
 800f078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f07c:	601a      	str	r2, [r3, #0]
 800f07e:	f3bf 8f4f 	dsb	sy
 800f082:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f086:	f000 fe81 	bl	800fd8c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f08a:	f000 fe4d 	bl	800fd28 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d005      	beq.n	800f0a0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f094:	4b13      	ldr	r3, [pc, #76]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f0a0:	4b10      	ldr	r3, [pc, #64]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b02      	cmp	r3, #2
 800f0ac:	d002      	beq.n	800f0b4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	617b      	str	r3, [r7, #20]
 800f0b2:	e00a      	b.n	800f0ca <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	43d2      	mvns	r2, r2
 800f0c0:	400a      	ands	r2, r1
 800f0c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f0ca:	4b06      	ldr	r3, [pc, #24]	@ (800f0e4 <xTaskNotifyWait+0xb8>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f0d4:	f000 fe5a 	bl	800fd8c <vPortExitCritical>

		return xReturn;
 800f0d8:	697b      	ldr	r3, [r7, #20]
	}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3718      	adds	r7, #24
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	bf00      	nop
 800f0e4:	20000cf4 	.word	0x20000cf4
 800f0e8:	e000ed04 	.word	0xe000ed04

0800f0ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b08a      	sub	sp, #40	@ 0x28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	603b      	str	r3, [r7, #0]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d10b      	bne.n	800f11e <xTaskGenericNotify+0x32>
	__asm volatile
 800f106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10a:	f383 8811 	msr	BASEPRI, r3
 800f10e:	f3bf 8f6f 	isb	sy
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	61bb      	str	r3, [r7, #24]
}
 800f118:	bf00      	nop
 800f11a:	bf00      	nop
 800f11c:	e7fd      	b.n	800f11a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f122:	f000 fe01 	bl	800fd28 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d004      	beq.n	800f136 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f12c:	6a3b      	ldr	r3, [r7, #32]
 800f12e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f13c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	2202      	movs	r2, #2
 800f142:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f146:	79fb      	ldrb	r3, [r7, #7]
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d82e      	bhi.n	800f1aa <xTaskGenericNotify+0xbe>
 800f14c:	a201      	add	r2, pc, #4	@ (adr r2, 800f154 <xTaskGenericNotify+0x68>)
 800f14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f152:	bf00      	nop
 800f154:	0800f1cf 	.word	0x0800f1cf
 800f158:	0800f169 	.word	0x0800f169
 800f15c:	0800f17b 	.word	0x0800f17b
 800f160:	0800f18b 	.word	0x0800f18b
 800f164:	0800f195 	.word	0x0800f195
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f168:	6a3b      	ldr	r3, [r7, #32]
 800f16a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	431a      	orrs	r2, r3
 800f172:	6a3b      	ldr	r3, [r7, #32]
 800f174:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f178:	e02c      	b.n	800f1d4 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f17a:	6a3b      	ldr	r3, [r7, #32]
 800f17c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f180:	1c5a      	adds	r2, r3, #1
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f188:	e024      	b.n	800f1d4 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f18a:	6a3b      	ldr	r3, [r7, #32]
 800f18c:	68ba      	ldr	r2, [r7, #8]
 800f18e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f192:	e01f      	b.n	800f1d4 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f194:	7ffb      	ldrb	r3, [r7, #31]
 800f196:	2b02      	cmp	r3, #2
 800f198:	d004      	beq.n	800f1a4 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f1a2:	e017      	b.n	800f1d4 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f1a8:	e014      	b.n	800f1d4 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b4:	d00d      	beq.n	800f1d2 <xTaskGenericNotify+0xe6>
	__asm volatile
 800f1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ba:	f383 8811 	msr	BASEPRI, r3
 800f1be:	f3bf 8f6f 	isb	sy
 800f1c2:	f3bf 8f4f 	dsb	sy
 800f1c6:	617b      	str	r3, [r7, #20]
}
 800f1c8:	bf00      	nop
 800f1ca:	bf00      	nop
 800f1cc:	e7fd      	b.n	800f1ca <xTaskGenericNotify+0xde>
					break;
 800f1ce:	bf00      	nop
 800f1d0:	e000      	b.n	800f1d4 <xTaskGenericNotify+0xe8>

					break;
 800f1d2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f1d4:	7ffb      	ldrb	r3, [r7, #31]
 800f1d6:	2b01      	cmp	r3, #1
 800f1d8:	d13b      	bne.n	800f252 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1da:	6a3b      	ldr	r3, [r7, #32]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fd fae4 	bl	800c7ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e8:	4b1d      	ldr	r3, [pc, #116]	@ (800f260 <xTaskGenericNotify+0x174>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d903      	bls.n	800f1f8 <xTaskGenericNotify+0x10c>
 800f1f0:	6a3b      	ldr	r3, [r7, #32]
 800f1f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f4:	4a1a      	ldr	r2, [pc, #104]	@ (800f260 <xTaskGenericNotify+0x174>)
 800f1f6:	6013      	str	r3, [r2, #0]
 800f1f8:	6a3b      	ldr	r3, [r7, #32]
 800f1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4413      	add	r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	4a17      	ldr	r2, [pc, #92]	@ (800f264 <xTaskGenericNotify+0x178>)
 800f206:	441a      	add	r2, r3
 800f208:	6a3b      	ldr	r3, [r7, #32]
 800f20a:	3304      	adds	r3, #4
 800f20c:	4619      	mov	r1, r3
 800f20e:	4610      	mov	r0, r2
 800f210:	f7fd fa6f 	bl	800c6f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f214:	6a3b      	ldr	r3, [r7, #32]
 800f216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d00b      	beq.n	800f234 <xTaskGenericNotify+0x148>
	__asm volatile
 800f21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f220:	f383 8811 	msr	BASEPRI, r3
 800f224:	f3bf 8f6f 	isb	sy
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	613b      	str	r3, [r7, #16]
}
 800f22e:	bf00      	nop
 800f230:	bf00      	nop
 800f232:	e7fd      	b.n	800f230 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f234:	6a3b      	ldr	r3, [r7, #32]
 800f236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f238:	4b0b      	ldr	r3, [pc, #44]	@ (800f268 <xTaskGenericNotify+0x17c>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f23e:	429a      	cmp	r2, r3
 800f240:	d907      	bls.n	800f252 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f242:	4b0a      	ldr	r3, [pc, #40]	@ (800f26c <xTaskGenericNotify+0x180>)
 800f244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f248:	601a      	str	r2, [r3, #0]
 800f24a:	f3bf 8f4f 	dsb	sy
 800f24e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f252:	f000 fd9b 	bl	800fd8c <vPortExitCritical>

		return xReturn;
 800f256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f258:	4618      	mov	r0, r3
 800f25a:	3728      	adds	r7, #40	@ 0x28
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	200011d0 	.word	0x200011d0
 800f264:	20000cf8 	.word	0x20000cf8
 800f268:	20000cf4 	.word	0x20000cf4
 800f26c:	e000ed04 	.word	0xe000ed04

0800f270 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f27a:	4b21      	ldr	r3, [pc, #132]	@ (800f300 <prvAddCurrentTaskToDelayedList+0x90>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f280:	4b20      	ldr	r3, [pc, #128]	@ (800f304 <prvAddCurrentTaskToDelayedList+0x94>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	3304      	adds	r3, #4
 800f286:	4618      	mov	r0, r3
 800f288:	f7fd fa90 	bl	800c7ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f292:	d10a      	bne.n	800f2aa <prvAddCurrentTaskToDelayedList+0x3a>
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d007      	beq.n	800f2aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f29a:	4b1a      	ldr	r3, [pc, #104]	@ (800f304 <prvAddCurrentTaskToDelayedList+0x94>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3304      	adds	r3, #4
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	4819      	ldr	r0, [pc, #100]	@ (800f308 <prvAddCurrentTaskToDelayedList+0x98>)
 800f2a4:	f7fd fa25 	bl	800c6f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f2a8:	e026      	b.n	800f2f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f2b2:	4b14      	ldr	r3, [pc, #80]	@ (800f304 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d209      	bcs.n	800f2d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2c2:	4b12      	ldr	r3, [pc, #72]	@ (800f30c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f304 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3304      	adds	r3, #4
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4610      	mov	r0, r2
 800f2d0:	f7fd fa33 	bl	800c73a <vListInsert>
}
 800f2d4:	e010      	b.n	800f2f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2d6:	4b0e      	ldr	r3, [pc, #56]	@ (800f310 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	4b0a      	ldr	r3, [pc, #40]	@ (800f304 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3304      	adds	r3, #4
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	f7fd fa29 	bl	800c73a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f314 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68ba      	ldr	r2, [r7, #8]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d202      	bcs.n	800f2f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2f2:	4a08      	ldr	r2, [pc, #32]	@ (800f314 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	6013      	str	r3, [r2, #0]
}
 800f2f8:	bf00      	nop
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	200011cc 	.word	0x200011cc
 800f304:	20000cf4 	.word	0x20000cf4
 800f308:	200011b4 	.word	0x200011b4
 800f30c:	20001184 	.word	0x20001184
 800f310:	20001180 	.word	0x20001180
 800f314:	200011e8 	.word	0x200011e8

0800f318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b08a      	sub	sp, #40	@ 0x28
 800f31c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f31e:	2300      	movs	r3, #0
 800f320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f322:	f000 fb71 	bl	800fa08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f326:	4b1d      	ldr	r3, [pc, #116]	@ (800f39c <xTimerCreateTimerTask+0x84>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d021      	beq.n	800f372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f32e:	2300      	movs	r3, #0
 800f330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f332:	2300      	movs	r3, #0
 800f334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f336:	1d3a      	adds	r2, r7, #4
 800f338:	f107 0108 	add.w	r1, r7, #8
 800f33c:	f107 030c 	add.w	r3, r7, #12
 800f340:	4618      	mov	r0, r3
 800f342:	f7fc ffd3 	bl	800c2ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f346:	6879      	ldr	r1, [r7, #4]
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	9202      	str	r2, [sp, #8]
 800f34e:	9301      	str	r3, [sp, #4]
 800f350:	2302      	movs	r3, #2
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	2300      	movs	r3, #0
 800f356:	460a      	mov	r2, r1
 800f358:	4911      	ldr	r1, [pc, #68]	@ (800f3a0 <xTimerCreateTimerTask+0x88>)
 800f35a:	4812      	ldr	r0, [pc, #72]	@ (800f3a4 <xTimerCreateTimerTask+0x8c>)
 800f35c:	f7fe f986 	bl	800d66c <xTaskCreateStatic>
 800f360:	4603      	mov	r3, r0
 800f362:	4a11      	ldr	r2, [pc, #68]	@ (800f3a8 <xTimerCreateTimerTask+0x90>)
 800f364:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f366:	4b10      	ldr	r3, [pc, #64]	@ (800f3a8 <xTimerCreateTimerTask+0x90>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f36e:	2301      	movs	r3, #1
 800f370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10b      	bne.n	800f390 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	613b      	str	r3, [r7, #16]
}
 800f38a:	bf00      	nop
 800f38c:	bf00      	nop
 800f38e:	e7fd      	b.n	800f38c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f390:	697b      	ldr	r3, [r7, #20]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3718      	adds	r7, #24
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20001224 	.word	0x20001224
 800f3a0:	080128dc 	.word	0x080128dc
 800f3a4:	0800f5a1 	.word	0x0800f5a1
 800f3a8:	20001228 	.word	0x20001228

0800f3ac <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b088      	sub	sp, #32
 800f3b0:	af02      	add	r7, sp, #8
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f3ba:	202c      	movs	r0, #44	@ 0x2c
 800f3bc:	f000 fdd6 	bl	800ff6c <pvPortMalloc>
 800f3c0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00d      	beq.n	800f3e4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	9301      	str	r3, [sp, #4]
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	68b9      	ldr	r1, [r7, #8]
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f000 f805 	bl	800f3ee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f3e4:	697b      	ldr	r3, [r7, #20]
	}
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	3718      	adds	r7, #24
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}

0800f3ee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b086      	sub	sp, #24
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	60f8      	str	r0, [r7, #12]
 800f3f6:	60b9      	str	r1, [r7, #8]
 800f3f8:	607a      	str	r2, [r7, #4]
 800f3fa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10b      	bne.n	800f41a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f406:	f383 8811 	msr	BASEPRI, r3
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	f3bf 8f4f 	dsb	sy
 800f412:	617b      	str	r3, [r7, #20]
}
 800f414:	bf00      	nop
 800f416:	bf00      	nop
 800f418:	e7fd      	b.n	800f416 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d01e      	beq.n	800f45e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f420:	f000 faf2 	bl	800fa08 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f42c:	68ba      	ldr	r2, [r7, #8]
 800f42e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f438:	6a3a      	ldr	r2, [r7, #32]
 800f43a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f43e:	3304      	adds	r3, #4
 800f440:	4618      	mov	r0, r3
 800f442:	f7fd f949 	bl	800c6d8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d008      	beq.n	800f45e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f44c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f44e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f452:	f043 0304 	orr.w	r3, r3, #4
 800f456:	b2da      	uxtb	r2, r3
 800f458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f45a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f45e:	bf00      	nop
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
	...

0800f468 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08a      	sub	sp, #40	@ 0x28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f476:	2300      	movs	r3, #0
 800f478:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10b      	bne.n	800f498 <xTimerGenericCommand+0x30>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	623b      	str	r3, [r7, #32]
}
 800f492:	bf00      	nop
 800f494:	bf00      	nop
 800f496:	e7fd      	b.n	800f494 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f498:	4b19      	ldr	r3, [pc, #100]	@ (800f500 <xTimerGenericCommand+0x98>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d02a      	beq.n	800f4f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	2b05      	cmp	r3, #5
 800f4b0:	dc18      	bgt.n	800f4e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f4b2:	f7ff fbc9 	bl	800ec48 <xTaskGetSchedulerState>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d109      	bne.n	800f4d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f4bc:	4b10      	ldr	r3, [pc, #64]	@ (800f500 <xTimerGenericCommand+0x98>)
 800f4be:	6818      	ldr	r0, [r3, #0]
 800f4c0:	f107 0110 	add.w	r1, r7, #16
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4c8:	f7fd fb12 	bl	800caf0 <xQueueGenericSend>
 800f4cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4ce:	e012      	b.n	800f4f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800f500 <xTimerGenericCommand+0x98>)
 800f4d2:	6818      	ldr	r0, [r3, #0]
 800f4d4:	f107 0110 	add.w	r1, r7, #16
 800f4d8:	2300      	movs	r3, #0
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f7fd fb08 	bl	800caf0 <xQueueGenericSend>
 800f4e0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4e2:	e008      	b.n	800f4f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4e4:	4b06      	ldr	r3, [pc, #24]	@ (800f500 <xTimerGenericCommand+0x98>)
 800f4e6:	6818      	ldr	r0, [r3, #0]
 800f4e8:	f107 0110 	add.w	r1, r7, #16
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	683a      	ldr	r2, [r7, #0]
 800f4f0:	f7fd fc00 	bl	800ccf4 <xQueueGenericSendFromISR>
 800f4f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3728      	adds	r7, #40	@ 0x28
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	20001224 	.word	0x20001224

0800f504 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af02      	add	r7, sp, #8
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f50e:	4b23      	ldr	r3, [pc, #140]	@ (800f59c <prvProcessExpiredTimer+0x98>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f518:	697b      	ldr	r3, [r7, #20]
 800f51a:	3304      	adds	r3, #4
 800f51c:	4618      	mov	r0, r3
 800f51e:	f7fd f945 	bl	800c7ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f528:	f003 0304 	and.w	r3, r3, #4
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d023      	beq.n	800f578 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	699a      	ldr	r2, [r3, #24]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	18d1      	adds	r1, r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	683a      	ldr	r2, [r7, #0]
 800f53c:	6978      	ldr	r0, [r7, #20]
 800f53e:	f000 f8d5 	bl	800f6ec <prvInsertTimerInActiveList>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d020      	beq.n	800f58a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f548:	2300      	movs	r3, #0
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	2300      	movs	r3, #0
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	2100      	movs	r1, #0
 800f552:	6978      	ldr	r0, [r7, #20]
 800f554:	f7ff ff88 	bl	800f468 <xTimerGenericCommand>
 800f558:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d114      	bne.n	800f58a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	60fb      	str	r3, [r7, #12]
}
 800f572:	bf00      	nop
 800f574:	bf00      	nop
 800f576:	e7fd      	b.n	800f574 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f57e:	f023 0301 	bic.w	r3, r3, #1
 800f582:	b2da      	uxtb	r2, r3
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	6a1b      	ldr	r3, [r3, #32]
 800f58e:	6978      	ldr	r0, [r7, #20]
 800f590:	4798      	blx	r3
}
 800f592:	bf00      	nop
 800f594:	3718      	adds	r7, #24
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	2000121c 	.word	0x2000121c

0800f5a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5a8:	f107 0308 	add.w	r3, r7, #8
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 f859 	bl	800f664 <prvGetNextExpireTime>
 800f5b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f000 f805 	bl	800f5c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f5be:	f000 f8d7 	bl	800f770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f5c2:	bf00      	nop
 800f5c4:	e7f0      	b.n	800f5a8 <prvTimerTask+0x8>
	...

0800f5c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f5d2:	f7fe fd31 	bl	800e038 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5d6:	f107 0308 	add.w	r3, r7, #8
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 f866 	bl	800f6ac <prvSampleTimeNow>
 800f5e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d130      	bne.n	800f64a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d10a      	bne.n	800f604 <prvProcessTimerOrBlockTask+0x3c>
 800f5ee:	687a      	ldr	r2, [r7, #4]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d806      	bhi.n	800f604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5f6:	f7fe fd2d 	bl	800e054 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5fa:	68f9      	ldr	r1, [r7, #12]
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff ff81 	bl	800f504 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f602:	e024      	b.n	800f64e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d008      	beq.n	800f61c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f60a:	4b13      	ldr	r3, [pc, #76]	@ (800f658 <prvProcessTimerOrBlockTask+0x90>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <prvProcessTimerOrBlockTask+0x50>
 800f614:	2301      	movs	r3, #1
 800f616:	e000      	b.n	800f61a <prvProcessTimerOrBlockTask+0x52>
 800f618:	2300      	movs	r3, #0
 800f61a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f61c:	4b0f      	ldr	r3, [pc, #60]	@ (800f65c <prvProcessTimerOrBlockTask+0x94>)
 800f61e:	6818      	ldr	r0, [r3, #0]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	683a      	ldr	r2, [r7, #0]
 800f628:	4619      	mov	r1, r3
 800f62a:	f7fd ffeb 	bl	800d604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f62e:	f7fe fd11 	bl	800e054 <xTaskResumeAll>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d10a      	bne.n	800f64e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f638:	4b09      	ldr	r3, [pc, #36]	@ (800f660 <prvProcessTimerOrBlockTask+0x98>)
 800f63a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f63e:	601a      	str	r2, [r3, #0]
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	f3bf 8f6f 	isb	sy
}
 800f648:	e001      	b.n	800f64e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f64a:	f7fe fd03 	bl	800e054 <xTaskResumeAll>
}
 800f64e:	bf00      	nop
 800f650:	3710      	adds	r7, #16
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	20001220 	.word	0x20001220
 800f65c:	20001224 	.word	0x20001224
 800f660:	e000ed04 	.word	0xe000ed04

0800f664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f66c:	4b0e      	ldr	r3, [pc, #56]	@ (800f6a8 <prvGetNextExpireTime+0x44>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d101      	bne.n	800f67a <prvGetNextExpireTime+0x16>
 800f676:	2201      	movs	r2, #1
 800f678:	e000      	b.n	800f67c <prvGetNextExpireTime+0x18>
 800f67a:	2200      	movs	r2, #0
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d105      	bne.n	800f694 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f688:	4b07      	ldr	r3, [pc, #28]	@ (800f6a8 <prvGetNextExpireTime+0x44>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	60fb      	str	r3, [r7, #12]
 800f692:	e001      	b.n	800f698 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f694:	2300      	movs	r3, #0
 800f696:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f698:	68fb      	ldr	r3, [r7, #12]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	2000121c 	.word	0x2000121c

0800f6ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f6b4:	f7fe fd6c 	bl	800e190 <xTaskGetTickCount>
 800f6b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f6e8 <prvSampleTimeNow+0x3c>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d205      	bcs.n	800f6d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f6c4:	f000 f93a 	bl	800f93c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	e002      	b.n	800f6d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6d6:	4a04      	ldr	r2, [pc, #16]	@ (800f6e8 <prvSampleTimeNow+0x3c>)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000122c 	.word	0x2000122c

0800f6ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d812      	bhi.n	800f738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	1ad2      	subs	r2, r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d302      	bcc.n	800f726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f720:	2301      	movs	r3, #1
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	e01b      	b.n	800f75e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f726:	4b10      	ldr	r3, [pc, #64]	@ (800f768 <prvInsertTimerInActiveList+0x7c>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	3304      	adds	r3, #4
 800f72e:	4619      	mov	r1, r3
 800f730:	4610      	mov	r0, r2
 800f732:	f7fd f802 	bl	800c73a <vListInsert>
 800f736:	e012      	b.n	800f75e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d206      	bcs.n	800f74e <prvInsertTimerInActiveList+0x62>
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d302      	bcc.n	800f74e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f748:	2301      	movs	r3, #1
 800f74a:	617b      	str	r3, [r7, #20]
 800f74c:	e007      	b.n	800f75e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f74e:	4b07      	ldr	r3, [pc, #28]	@ (800f76c <prvInsertTimerInActiveList+0x80>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3304      	adds	r3, #4
 800f756:	4619      	mov	r1, r3
 800f758:	4610      	mov	r0, r2
 800f75a:	f7fc ffee 	bl	800c73a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f75e:	697b      	ldr	r3, [r7, #20]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20001220 	.word	0x20001220
 800f76c:	2000121c 	.word	0x2000121c

0800f770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b08e      	sub	sp, #56	@ 0x38
 800f774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f776:	e0ce      	b.n	800f916 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da19      	bge.n	800f7b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f77e:	1d3b      	adds	r3, r7, #4
 800f780:	3304      	adds	r3, #4
 800f782:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10b      	bne.n	800f7a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	61fb      	str	r3, [r7, #28]
}
 800f79c:	bf00      	nop
 800f79e:	bf00      	nop
 800f7a0:	e7fd      	b.n	800f79e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7a8:	6850      	ldr	r0, [r2, #4]
 800f7aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7ac:	6892      	ldr	r2, [r2, #8]
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	f2c0 80ae 	blt.w	800f916 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c0:	695b      	ldr	r3, [r3, #20]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d004      	beq.n	800f7d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fc ffee 	bl	800c7ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7d0:	463b      	mov	r3, r7
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7ff ff6a 	bl	800f6ac <prvSampleTimeNow>
 800f7d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b09      	cmp	r3, #9
 800f7de:	f200 8097 	bhi.w	800f910 <prvProcessReceivedCommands+0x1a0>
 800f7e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f7e8 <prvProcessReceivedCommands+0x78>)
 800f7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e8:	0800f811 	.word	0x0800f811
 800f7ec:	0800f811 	.word	0x0800f811
 800f7f0:	0800f811 	.word	0x0800f811
 800f7f4:	0800f887 	.word	0x0800f887
 800f7f8:	0800f89b 	.word	0x0800f89b
 800f7fc:	0800f8e7 	.word	0x0800f8e7
 800f800:	0800f811 	.word	0x0800f811
 800f804:	0800f811 	.word	0x0800f811
 800f808:	0800f887 	.word	0x0800f887
 800f80c:	0800f89b 	.word	0x0800f89b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f816:	f043 0301 	orr.w	r3, r3, #1
 800f81a:	b2da      	uxtb	r2, r3
 800f81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f822:	68ba      	ldr	r2, [r7, #8]
 800f824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f826:	699b      	ldr	r3, [r3, #24]
 800f828:	18d1      	adds	r1, r2, r3
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f830:	f7ff ff5c 	bl	800f6ec <prvInsertTimerInActiveList>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d06c      	beq.n	800f914 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f83a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f840:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f848:	f003 0304 	and.w	r3, r3, #4
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d061      	beq.n	800f914 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f854:	699b      	ldr	r3, [r3, #24]
 800f856:	441a      	add	r2, r3
 800f858:	2300      	movs	r3, #0
 800f85a:	9300      	str	r3, [sp, #0]
 800f85c:	2300      	movs	r3, #0
 800f85e:	2100      	movs	r1, #0
 800f860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f862:	f7ff fe01 	bl	800f468 <xTimerGenericCommand>
 800f866:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d152      	bne.n	800f914 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	61bb      	str	r3, [r7, #24]
}
 800f880:	bf00      	nop
 800f882:	bf00      	nop
 800f884:	e7fd      	b.n	800f882 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f88c:	f023 0301 	bic.w	r3, r3, #1
 800f890:	b2da      	uxtb	r2, r3
 800f892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f894:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f898:	e03d      	b.n	800f916 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f89a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8a0:	f043 0301 	orr.w	r3, r3, #1
 800f8a4:	b2da      	uxtb	r2, r3
 800f8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f8ac:	68ba      	ldr	r2, [r7, #8]
 800f8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b4:	699b      	ldr	r3, [r3, #24]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d10b      	bne.n	800f8d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	617b      	str	r3, [r7, #20]
}
 800f8cc:	bf00      	nop
 800f8ce:	bf00      	nop
 800f8d0:	e7fd      	b.n	800f8ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d4:	699a      	ldr	r2, [r3, #24]
 800f8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8d8:	18d1      	adds	r1, r2, r3
 800f8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8e0:	f7ff ff04 	bl	800f6ec <prvInsertTimerInActiveList>
					break;
 800f8e4:	e017      	b.n	800f916 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8ec:	f003 0302 	and.w	r3, r3, #2
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d103      	bne.n	800f8fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f8f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8f6:	f000 fc07 	bl	8010108 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8fa:	e00c      	b.n	800f916 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f902:	f023 0301 	bic.w	r3, r3, #1
 800f906:	b2da      	uxtb	r2, r3
 800f908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f90e:	e002      	b.n	800f916 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f910:	bf00      	nop
 800f912:	e000      	b.n	800f916 <prvProcessReceivedCommands+0x1a6>
					break;
 800f914:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f916:	4b08      	ldr	r3, [pc, #32]	@ (800f938 <prvProcessReceivedCommands+0x1c8>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	1d39      	adds	r1, r7, #4
 800f91c:	2200      	movs	r2, #0
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fd fa86 	bl	800ce30 <xQueueReceive>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	f47f af26 	bne.w	800f778 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f92c:	bf00      	nop
 800f92e:	bf00      	nop
 800f930:	3730      	adds	r7, #48	@ 0x30
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}
 800f936:	bf00      	nop
 800f938:	20001224 	.word	0x20001224

0800f93c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b088      	sub	sp, #32
 800f940:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f942:	e049      	b.n	800f9d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f944:	4b2e      	ldr	r3, [pc, #184]	@ (800fa00 <prvSwitchTimerLists+0xc4>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f94e:	4b2c      	ldr	r3, [pc, #176]	@ (800fa00 <prvSwitchTimerLists+0xc4>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	3304      	adds	r3, #4
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fc ff25 	bl	800c7ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	6a1b      	ldr	r3, [r3, #32]
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f970:	f003 0304 	and.w	r3, r3, #4
 800f974:	2b00      	cmp	r3, #0
 800f976:	d02f      	beq.n	800f9d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	699b      	ldr	r3, [r3, #24]
 800f97c:	693a      	ldr	r2, [r7, #16]
 800f97e:	4413      	add	r3, r2
 800f980:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f982:	68ba      	ldr	r2, [r7, #8]
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	429a      	cmp	r2, r3
 800f988:	d90e      	bls.n	800f9a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f996:	4b1a      	ldr	r3, [pc, #104]	@ (800fa00 <prvSwitchTimerLists+0xc4>)
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	3304      	adds	r3, #4
 800f99e:	4619      	mov	r1, r3
 800f9a0:	4610      	mov	r0, r2
 800f9a2:	f7fc feca 	bl	800c73a <vListInsert>
 800f9a6:	e017      	b.n	800f9d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	693a      	ldr	r2, [r7, #16]
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f7ff fd58 	bl	800f468 <xTimerGenericCommand>
 800f9b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10b      	bne.n	800f9d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9c4:	f383 8811 	msr	BASEPRI, r3
 800f9c8:	f3bf 8f6f 	isb	sy
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	603b      	str	r3, [r7, #0]
}
 800f9d2:	bf00      	nop
 800f9d4:	bf00      	nop
 800f9d6:	e7fd      	b.n	800f9d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9d8:	4b09      	ldr	r3, [pc, #36]	@ (800fa00 <prvSwitchTimerLists+0xc4>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1b0      	bne.n	800f944 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9e2:	4b07      	ldr	r3, [pc, #28]	@ (800fa00 <prvSwitchTimerLists+0xc4>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9e8:	4b06      	ldr	r3, [pc, #24]	@ (800fa04 <prvSwitchTimerLists+0xc8>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a04      	ldr	r2, [pc, #16]	@ (800fa00 <prvSwitchTimerLists+0xc4>)
 800f9ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9f0:	4a04      	ldr	r2, [pc, #16]	@ (800fa04 <prvSwitchTimerLists+0xc8>)
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	6013      	str	r3, [r2, #0]
}
 800f9f6:	bf00      	nop
 800f9f8:	3718      	adds	r7, #24
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	2000121c 	.word	0x2000121c
 800fa04:	20001220 	.word	0x20001220

0800fa08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fa0e:	f000 f98b 	bl	800fd28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fa12:	4b15      	ldr	r3, [pc, #84]	@ (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d120      	bne.n	800fa5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fa1a:	4814      	ldr	r0, [pc, #80]	@ (800fa6c <prvCheckForValidListAndQueue+0x64>)
 800fa1c:	f7fc fe3c 	bl	800c698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fa20:	4813      	ldr	r0, [pc, #76]	@ (800fa70 <prvCheckForValidListAndQueue+0x68>)
 800fa22:	f7fc fe39 	bl	800c698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fa26:	4b13      	ldr	r3, [pc, #76]	@ (800fa74 <prvCheckForValidListAndQueue+0x6c>)
 800fa28:	4a10      	ldr	r2, [pc, #64]	@ (800fa6c <prvCheckForValidListAndQueue+0x64>)
 800fa2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fa2c:	4b12      	ldr	r3, [pc, #72]	@ (800fa78 <prvCheckForValidListAndQueue+0x70>)
 800fa2e:	4a10      	ldr	r2, [pc, #64]	@ (800fa70 <prvCheckForValidListAndQueue+0x68>)
 800fa30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fa32:	2300      	movs	r3, #0
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	4b11      	ldr	r3, [pc, #68]	@ (800fa7c <prvCheckForValidListAndQueue+0x74>)
 800fa38:	4a11      	ldr	r2, [pc, #68]	@ (800fa80 <prvCheckForValidListAndQueue+0x78>)
 800fa3a:	2110      	movs	r1, #16
 800fa3c:	200a      	movs	r0, #10
 800fa3e:	f7fc ff49 	bl	800c8d4 <xQueueGenericCreateStatic>
 800fa42:	4603      	mov	r3, r0
 800fa44:	4a08      	ldr	r2, [pc, #32]	@ (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa48:	4b07      	ldr	r3, [pc, #28]	@ (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d005      	beq.n	800fa5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa50:	4b05      	ldr	r3, [pc, #20]	@ (800fa68 <prvCheckForValidListAndQueue+0x60>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	490b      	ldr	r1, [pc, #44]	@ (800fa84 <prvCheckForValidListAndQueue+0x7c>)
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fd fdaa 	bl	800d5b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa5c:	f000 f996 	bl	800fd8c <vPortExitCritical>
}
 800fa60:	bf00      	nop
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	20001224 	.word	0x20001224
 800fa6c:	200011f4 	.word	0x200011f4
 800fa70:	20001208 	.word	0x20001208
 800fa74:	2000121c 	.word	0x2000121c
 800fa78:	20001220 	.word	0x20001220
 800fa7c:	200012d0 	.word	0x200012d0
 800fa80:	20001230 	.word	0x20001230
 800fa84:	080128e4 	.word	0x080128e4

0800fa88 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b08a      	sub	sp, #40	@ 0x28
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fa96:	f06f 0301 	mvn.w	r3, #1
 800fa9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800faa8:	4b06      	ldr	r3, [pc, #24]	@ (800fac4 <xTimerPendFunctionCallFromISR+0x3c>)
 800faaa:	6818      	ldr	r0, [r3, #0]
 800faac:	f107 0114 	add.w	r1, r7, #20
 800fab0:	2300      	movs	r3, #0
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	f7fd f91e 	bl	800ccf4 <xQueueGenericSendFromISR>
 800fab8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800faba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3728      	adds	r7, #40	@ 0x28
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	20001224 	.word	0x20001224

0800fac8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	3b04      	subs	r3, #4
 800fad8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3b04      	subs	r3, #4
 800fae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f023 0201 	bic.w	r2, r3, #1
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3b04      	subs	r3, #4
 800faf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800faf8:	4a0c      	ldr	r2, [pc, #48]	@ (800fb2c <pxPortInitialiseStack+0x64>)
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	3b14      	subs	r3, #20
 800fb02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fb04:	687a      	ldr	r2, [r7, #4]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	3b04      	subs	r3, #4
 800fb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f06f 0202 	mvn.w	r2, #2
 800fb16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	3b20      	subs	r3, #32
 800fb1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3714      	adds	r7, #20
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	0800fb31 	.word	0x0800fb31

0800fb30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb36:	2300      	movs	r3, #0
 800fb38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb3a:	4b13      	ldr	r3, [pc, #76]	@ (800fb88 <prvTaskExitError+0x58>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb42:	d00b      	beq.n	800fb5c <prvTaskExitError+0x2c>
	__asm volatile
 800fb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	60fb      	str	r3, [r7, #12]
}
 800fb56:	bf00      	nop
 800fb58:	bf00      	nop
 800fb5a:	e7fd      	b.n	800fb58 <prvTaskExitError+0x28>
	__asm volatile
 800fb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb60:	f383 8811 	msr	BASEPRI, r3
 800fb64:	f3bf 8f6f 	isb	sy
 800fb68:	f3bf 8f4f 	dsb	sy
 800fb6c:	60bb      	str	r3, [r7, #8]
}
 800fb6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb70:	bf00      	nop
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d0fc      	beq.n	800fb72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb78:	bf00      	nop
 800fb7a:	bf00      	nop
 800fb7c:	3714      	adds	r7, #20
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	20000288 	.word	0x20000288
 800fb8c:	00000000 	.word	0x00000000

0800fb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb90:	4b07      	ldr	r3, [pc, #28]	@ (800fbb0 <pxCurrentTCBConst2>)
 800fb92:	6819      	ldr	r1, [r3, #0]
 800fb94:	6808      	ldr	r0, [r1, #0]
 800fb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9a:	f380 8809 	msr	PSP, r0
 800fb9e:	f3bf 8f6f 	isb	sy
 800fba2:	f04f 0000 	mov.w	r0, #0
 800fba6:	f380 8811 	msr	BASEPRI, r0
 800fbaa:	4770      	bx	lr
 800fbac:	f3af 8000 	nop.w

0800fbb0 <pxCurrentTCBConst2>:
 800fbb0:	20000cf4 	.word	0x20000cf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fbb4:	bf00      	nop
 800fbb6:	bf00      	nop

0800fbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fbb8:	4808      	ldr	r0, [pc, #32]	@ (800fbdc <prvPortStartFirstTask+0x24>)
 800fbba:	6800      	ldr	r0, [r0, #0]
 800fbbc:	6800      	ldr	r0, [r0, #0]
 800fbbe:	f380 8808 	msr	MSP, r0
 800fbc2:	f04f 0000 	mov.w	r0, #0
 800fbc6:	f380 8814 	msr	CONTROL, r0
 800fbca:	b662      	cpsie	i
 800fbcc:	b661      	cpsie	f
 800fbce:	f3bf 8f4f 	dsb	sy
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	df00      	svc	0
 800fbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbda:	bf00      	nop
 800fbdc:	e000ed08 	.word	0xe000ed08

0800fbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbe6:	4b47      	ldr	r3, [pc, #284]	@ (800fd04 <xPortStartScheduler+0x124>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	4a47      	ldr	r2, [pc, #284]	@ (800fd08 <xPortStartScheduler+0x128>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d10b      	bne.n	800fc08 <xPortStartScheduler+0x28>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf4:	f383 8811 	msr	BASEPRI, r3
 800fbf8:	f3bf 8f6f 	isb	sy
 800fbfc:	f3bf 8f4f 	dsb	sy
 800fc00:	60fb      	str	r3, [r7, #12]
}
 800fc02:	bf00      	nop
 800fc04:	bf00      	nop
 800fc06:	e7fd      	b.n	800fc04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fc08:	4b3e      	ldr	r3, [pc, #248]	@ (800fd04 <xPortStartScheduler+0x124>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a3f      	ldr	r2, [pc, #252]	@ (800fd0c <xPortStartScheduler+0x12c>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d10b      	bne.n	800fc2a <xPortStartScheduler+0x4a>
	__asm volatile
 800fc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	613b      	str	r3, [r7, #16]
}
 800fc24:	bf00      	nop
 800fc26:	bf00      	nop
 800fc28:	e7fd      	b.n	800fc26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fc2a:	4b39      	ldr	r3, [pc, #228]	@ (800fd10 <xPortStartScheduler+0x130>)
 800fc2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	22ff      	movs	r2, #255	@ 0xff
 800fc3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc44:	78fb      	ldrb	r3, [r7, #3]
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	4b31      	ldr	r3, [pc, #196]	@ (800fd14 <xPortStartScheduler+0x134>)
 800fc50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc52:	4b31      	ldr	r3, [pc, #196]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc54:	2207      	movs	r2, #7
 800fc56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc58:	e009      	b.n	800fc6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc5a:	4b2f      	ldr	r3, [pc, #188]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	4a2d      	ldr	r2, [pc, #180]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc64:	78fb      	ldrb	r3, [r7, #3]
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	b2db      	uxtb	r3, r3
 800fc6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc6e:	78fb      	ldrb	r3, [r7, #3]
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc76:	2b80      	cmp	r3, #128	@ 0x80
 800fc78:	d0ef      	beq.n	800fc5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc7a:	4b27      	ldr	r3, [pc, #156]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f1c3 0307 	rsb	r3, r3, #7
 800fc82:	2b04      	cmp	r3, #4
 800fc84:	d00b      	beq.n	800fc9e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8a:	f383 8811 	msr	BASEPRI, r3
 800fc8e:	f3bf 8f6f 	isb	sy
 800fc92:	f3bf 8f4f 	dsb	sy
 800fc96:	60bb      	str	r3, [r7, #8]
}
 800fc98:	bf00      	nop
 800fc9a:	bf00      	nop
 800fc9c:	e7fd      	b.n	800fc9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc9e:	4b1e      	ldr	r3, [pc, #120]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	021b      	lsls	r3, r3, #8
 800fca4:	4a1c      	ldr	r2, [pc, #112]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fca6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fca8:	4b1b      	ldr	r3, [pc, #108]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fcb0:	4a19      	ldr	r2, [pc, #100]	@ (800fd18 <xPortStartScheduler+0x138>)
 800fcb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fcbc:	4b17      	ldr	r3, [pc, #92]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a16      	ldr	r2, [pc, #88]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fcc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fcc8:	4b14      	ldr	r3, [pc, #80]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a13      	ldr	r2, [pc, #76]	@ (800fd1c <xPortStartScheduler+0x13c>)
 800fcce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fcd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fcd4:	f000 f8da 	bl	800fe8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fcd8:	4b11      	ldr	r3, [pc, #68]	@ (800fd20 <xPortStartScheduler+0x140>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcde:	f000 f8f9 	bl	800fed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fce2:	4b10      	ldr	r3, [pc, #64]	@ (800fd24 <xPortStartScheduler+0x144>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	4a0f      	ldr	r2, [pc, #60]	@ (800fd24 <xPortStartScheduler+0x144>)
 800fce8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcee:	f7ff ff63 	bl	800fbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcf2:	f7fe fbeb 	bl	800e4cc <vTaskSwitchContext>
	prvTaskExitError();
 800fcf6:	f7ff ff1b 	bl	800fb30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcfa:	2300      	movs	r3, #0
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	e000ed00 	.word	0xe000ed00
 800fd08:	410fc271 	.word	0x410fc271
 800fd0c:	410fc270 	.word	0x410fc270
 800fd10:	e000e400 	.word	0xe000e400
 800fd14:	20001320 	.word	0x20001320
 800fd18:	20001324 	.word	0x20001324
 800fd1c:	e000ed20 	.word	0xe000ed20
 800fd20:	20000288 	.word	0x20000288
 800fd24:	e000ef34 	.word	0xe000ef34

0800fd28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800fd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	607b      	str	r3, [r7, #4]
}
 800fd40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd42:	4b10      	ldr	r3, [pc, #64]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	3301      	adds	r3, #1
 800fd48:	4a0e      	ldr	r2, [pc, #56]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd4c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd84 <vPortEnterCritical+0x5c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d110      	bne.n	800fd76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd54:	4b0c      	ldr	r3, [pc, #48]	@ (800fd88 <vPortEnterCritical+0x60>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00b      	beq.n	800fd76 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	603b      	str	r3, [r7, #0]
}
 800fd70:	bf00      	nop
 800fd72:	bf00      	nop
 800fd74:	e7fd      	b.n	800fd72 <vPortEnterCritical+0x4a>
	}
}
 800fd76:	bf00      	nop
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	20000288 	.word	0x20000288
 800fd88:	e000ed04 	.word	0xe000ed04

0800fd8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd92:	4b12      	ldr	r3, [pc, #72]	@ (800fddc <vPortExitCritical+0x50>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10b      	bne.n	800fdb2 <vPortExitCritical+0x26>
	__asm volatile
 800fd9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd9e:	f383 8811 	msr	BASEPRI, r3
 800fda2:	f3bf 8f6f 	isb	sy
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	607b      	str	r3, [r7, #4]
}
 800fdac:	bf00      	nop
 800fdae:	bf00      	nop
 800fdb0:	e7fd      	b.n	800fdae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fdb2:	4b0a      	ldr	r3, [pc, #40]	@ (800fddc <vPortExitCritical+0x50>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4a08      	ldr	r2, [pc, #32]	@ (800fddc <vPortExitCritical+0x50>)
 800fdba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fdbc:	4b07      	ldr	r3, [pc, #28]	@ (800fddc <vPortExitCritical+0x50>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d105      	bne.n	800fdd0 <vPortExitCritical+0x44>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	f383 8811 	msr	BASEPRI, r3
}
 800fdce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fdd0:	bf00      	nop
 800fdd2:	370c      	adds	r7, #12
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	20000288 	.word	0x20000288

0800fde0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fde0:	f3ef 8009 	mrs	r0, PSP
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	4b15      	ldr	r3, [pc, #84]	@ (800fe40 <pxCurrentTCBConst>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	f01e 0f10 	tst.w	lr, #16
 800fdf0:	bf08      	it	eq
 800fdf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfa:	6010      	str	r0, [r2, #0]
 800fdfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fe00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fe04:	f380 8811 	msr	BASEPRI, r0
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f7fe fb5c 	bl	800e4cc <vTaskSwitchContext>
 800fe14:	f04f 0000 	mov.w	r0, #0
 800fe18:	f380 8811 	msr	BASEPRI, r0
 800fe1c:	bc09      	pop	{r0, r3}
 800fe1e:	6819      	ldr	r1, [r3, #0]
 800fe20:	6808      	ldr	r0, [r1, #0]
 800fe22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe26:	f01e 0f10 	tst.w	lr, #16
 800fe2a:	bf08      	it	eq
 800fe2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe30:	f380 8809 	msr	PSP, r0
 800fe34:	f3bf 8f6f 	isb	sy
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop
 800fe3c:	f3af 8000 	nop.w

0800fe40 <pxCurrentTCBConst>:
 800fe40:	20000cf4 	.word	0x20000cf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe44:	bf00      	nop
 800fe46:	bf00      	nop

0800fe48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	607b      	str	r3, [r7, #4]
}
 800fe60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe62:	f7fe fa79 	bl	800e358 <xTaskIncrementTick>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d003      	beq.n	800fe74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe6c:	4b06      	ldr	r3, [pc, #24]	@ (800fe88 <xPortSysTickHandler+0x40>)
 800fe6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe72:	601a      	str	r2, [r3, #0]
 800fe74:	2300      	movs	r3, #0
 800fe76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	f383 8811 	msr	BASEPRI, r3
}
 800fe7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe80:	bf00      	nop
 800fe82:	3708      	adds	r7, #8
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	e000ed04 	.word	0xe000ed04

0800fe8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe90:	4b0b      	ldr	r3, [pc, #44]	@ (800fec0 <vPortSetupTimerInterrupt+0x34>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe96:	4b0b      	ldr	r3, [pc, #44]	@ (800fec4 <vPortSetupTimerInterrupt+0x38>)
 800fe98:	2200      	movs	r2, #0
 800fe9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fec8 <vPortSetupTimerInterrupt+0x3c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a0a      	ldr	r2, [pc, #40]	@ (800fecc <vPortSetupTimerInterrupt+0x40>)
 800fea2:	fba2 2303 	umull	r2, r3, r2, r3
 800fea6:	099b      	lsrs	r3, r3, #6
 800fea8:	4a09      	ldr	r2, [pc, #36]	@ (800fed0 <vPortSetupTimerInterrupt+0x44>)
 800feaa:	3b01      	subs	r3, #1
 800feac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800feae:	4b04      	ldr	r3, [pc, #16]	@ (800fec0 <vPortSetupTimerInterrupt+0x34>)
 800feb0:	2207      	movs	r2, #7
 800feb2:	601a      	str	r2, [r3, #0]
}
 800feb4:	bf00      	nop
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	e000e010 	.word	0xe000e010
 800fec4:	e000e018 	.word	0xe000e018
 800fec8:	2000025c 	.word	0x2000025c
 800fecc:	10624dd3 	.word	0x10624dd3
 800fed0:	e000e014 	.word	0xe000e014

0800fed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fed4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fee4 <vPortEnableVFP+0x10>
 800fed8:	6801      	ldr	r1, [r0, #0]
 800feda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fede:	6001      	str	r1, [r0, #0]
 800fee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fee2:	bf00      	nop
 800fee4:	e000ed88 	.word	0xe000ed88

0800fee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fee8:	b480      	push	{r7}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800feee:	f3ef 8305 	mrs	r3, IPSR
 800fef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2b0f      	cmp	r3, #15
 800fef8:	d915      	bls.n	800ff26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fefa:	4a18      	ldr	r2, [pc, #96]	@ (800ff5c <vPortValidateInterruptPriority+0x74>)
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	4413      	add	r3, r2
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ff04:	4b16      	ldr	r3, [pc, #88]	@ (800ff60 <vPortValidateInterruptPriority+0x78>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	7afa      	ldrb	r2, [r7, #11]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d20b      	bcs.n	800ff26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	607b      	str	r3, [r7, #4]
}
 800ff20:	bf00      	nop
 800ff22:	bf00      	nop
 800ff24:	e7fd      	b.n	800ff22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ff26:	4b0f      	ldr	r3, [pc, #60]	@ (800ff64 <vPortValidateInterruptPriority+0x7c>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ff2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff68 <vPortValidateInterruptPriority+0x80>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d90b      	bls.n	800ff4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3a:	f383 8811 	msr	BASEPRI, r3
 800ff3e:	f3bf 8f6f 	isb	sy
 800ff42:	f3bf 8f4f 	dsb	sy
 800ff46:	603b      	str	r3, [r7, #0]
}
 800ff48:	bf00      	nop
 800ff4a:	bf00      	nop
 800ff4c:	e7fd      	b.n	800ff4a <vPortValidateInterruptPriority+0x62>
	}
 800ff4e:	bf00      	nop
 800ff50:	3714      	adds	r7, #20
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	e000e3f0 	.word	0xe000e3f0
 800ff60:	20001320 	.word	0x20001320
 800ff64:	e000ed0c 	.word	0xe000ed0c
 800ff68:	20001324 	.word	0x20001324

0800ff6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	@ 0x28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff74:	2300      	movs	r3, #0
 800ff76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff78:	f7fe f85e 	bl	800e038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff7c:	4b5c      	ldr	r3, [pc, #368]	@ (80100f0 <pvPortMalloc+0x184>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d101      	bne.n	800ff88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff84:	f000 f924 	bl	80101d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff88:	4b5a      	ldr	r3, [pc, #360]	@ (80100f4 <pvPortMalloc+0x188>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4013      	ands	r3, r2
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f040 8095 	bne.w	80100c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d01e      	beq.n	800ffda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff9c:	2208      	movs	r2, #8
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f003 0307 	and.w	r3, r3, #7
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d015      	beq.n	800ffda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f023 0307 	bic.w	r3, r3, #7
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f003 0307 	and.w	r3, r3, #7
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00b      	beq.n	800ffda <pvPortMalloc+0x6e>
	__asm volatile
 800ffc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	617b      	str	r3, [r7, #20]
}
 800ffd4:	bf00      	nop
 800ffd6:	bf00      	nop
 800ffd8:	e7fd      	b.n	800ffd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d06f      	beq.n	80100c0 <pvPortMalloc+0x154>
 800ffe0:	4b45      	ldr	r3, [pc, #276]	@ (80100f8 <pvPortMalloc+0x18c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d86a      	bhi.n	80100c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffea:	4b44      	ldr	r3, [pc, #272]	@ (80100fc <pvPortMalloc+0x190>)
 800ffec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffee:	4b43      	ldr	r3, [pc, #268]	@ (80100fc <pvPortMalloc+0x190>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fff4:	e004      	b.n	8010000 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	429a      	cmp	r2, r3
 8010008:	d903      	bls.n	8010012 <pvPortMalloc+0xa6>
 801000a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1f1      	bne.n	800fff6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010012:	4b37      	ldr	r3, [pc, #220]	@ (80100f0 <pvPortMalloc+0x184>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010018:	429a      	cmp	r2, r3
 801001a:	d051      	beq.n	80100c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2208      	movs	r2, #8
 8010022:	4413      	add	r3, r2
 8010024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	6a3b      	ldr	r3, [r7, #32]
 801002c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801002e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	1ad2      	subs	r2, r2, r3
 8010036:	2308      	movs	r3, #8
 8010038:	005b      	lsls	r3, r3, #1
 801003a:	429a      	cmp	r2, r3
 801003c:	d920      	bls.n	8010080 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801003e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4413      	add	r3, r2
 8010044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	f003 0307 	and.w	r3, r3, #7
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00b      	beq.n	8010068 <pvPortMalloc+0xfc>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	613b      	str	r3, [r7, #16]
}
 8010062:	bf00      	nop
 8010064:	bf00      	nop
 8010066:	e7fd      	b.n	8010064 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	1ad2      	subs	r2, r2, r3
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801007a:	69b8      	ldr	r0, [r7, #24]
 801007c:	f000 f90a 	bl	8010294 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010080:	4b1d      	ldr	r3, [pc, #116]	@ (80100f8 <pvPortMalloc+0x18c>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	4a1b      	ldr	r2, [pc, #108]	@ (80100f8 <pvPortMalloc+0x18c>)
 801008c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801008e:	4b1a      	ldr	r3, [pc, #104]	@ (80100f8 <pvPortMalloc+0x18c>)
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	4b1b      	ldr	r3, [pc, #108]	@ (8010100 <pvPortMalloc+0x194>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	d203      	bcs.n	80100a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801009a:	4b17      	ldr	r3, [pc, #92]	@ (80100f8 <pvPortMalloc+0x18c>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a18      	ldr	r2, [pc, #96]	@ (8010100 <pvPortMalloc+0x194>)
 80100a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80100a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a4:	685a      	ldr	r2, [r3, #4]
 80100a6:	4b13      	ldr	r3, [pc, #76]	@ (80100f4 <pvPortMalloc+0x188>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	431a      	orrs	r2, r3
 80100ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80100b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80100b6:	4b13      	ldr	r3, [pc, #76]	@ (8010104 <pvPortMalloc+0x198>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	3301      	adds	r3, #1
 80100bc:	4a11      	ldr	r2, [pc, #68]	@ (8010104 <pvPortMalloc+0x198>)
 80100be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80100c0:	f7fd ffc8 	bl	800e054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	f003 0307 	and.w	r3, r3, #7
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d00b      	beq.n	80100e6 <pvPortMalloc+0x17a>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	60fb      	str	r3, [r7, #12]
}
 80100e0:	bf00      	nop
 80100e2:	bf00      	nop
 80100e4:	e7fd      	b.n	80100e2 <pvPortMalloc+0x176>
	return pvReturn;
 80100e6:	69fb      	ldr	r3, [r7, #28]
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3728      	adds	r7, #40	@ 0x28
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	20010d30 	.word	0x20010d30
 80100f4:	20010d44 	.word	0x20010d44
 80100f8:	20010d34 	.word	0x20010d34
 80100fc:	20010d28 	.word	0x20010d28
 8010100:	20010d38 	.word	0x20010d38
 8010104:	20010d3c 	.word	0x20010d3c

08010108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b086      	sub	sp, #24
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d04f      	beq.n	80101ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801011a:	2308      	movs	r3, #8
 801011c:	425b      	negs	r3, r3
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	4413      	add	r3, r2
 8010122:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	685a      	ldr	r2, [r3, #4]
 801012c:	4b25      	ldr	r3, [pc, #148]	@ (80101c4 <vPortFree+0xbc>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4013      	ands	r3, r2
 8010132:	2b00      	cmp	r3, #0
 8010134:	d10b      	bne.n	801014e <vPortFree+0x46>
	__asm volatile
 8010136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801013a:	f383 8811 	msr	BASEPRI, r3
 801013e:	f3bf 8f6f 	isb	sy
 8010142:	f3bf 8f4f 	dsb	sy
 8010146:	60fb      	str	r3, [r7, #12]
}
 8010148:	bf00      	nop
 801014a:	bf00      	nop
 801014c:	e7fd      	b.n	801014a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00b      	beq.n	801016e <vPortFree+0x66>
	__asm volatile
 8010156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	60bb      	str	r3, [r7, #8]
}
 8010168:	bf00      	nop
 801016a:	bf00      	nop
 801016c:	e7fd      	b.n	801016a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	685a      	ldr	r2, [r3, #4]
 8010172:	4b14      	ldr	r3, [pc, #80]	@ (80101c4 <vPortFree+0xbc>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4013      	ands	r3, r2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d01e      	beq.n	80101ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d11a      	bne.n	80101ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	4b0e      	ldr	r3, [pc, #56]	@ (80101c4 <vPortFree+0xbc>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	43db      	mvns	r3, r3
 801018e:	401a      	ands	r2, r3
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010194:	f7fd ff50 	bl	800e038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	685a      	ldr	r2, [r3, #4]
 801019c:	4b0a      	ldr	r3, [pc, #40]	@ (80101c8 <vPortFree+0xc0>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	4413      	add	r3, r2
 80101a2:	4a09      	ldr	r2, [pc, #36]	@ (80101c8 <vPortFree+0xc0>)
 80101a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80101a6:	6938      	ldr	r0, [r7, #16]
 80101a8:	f000 f874 	bl	8010294 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80101ac:	4b07      	ldr	r3, [pc, #28]	@ (80101cc <vPortFree+0xc4>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3301      	adds	r3, #1
 80101b2:	4a06      	ldr	r2, [pc, #24]	@ (80101cc <vPortFree+0xc4>)
 80101b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80101b6:	f7fd ff4d 	bl	800e054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80101ba:	bf00      	nop
 80101bc:	3718      	adds	r7, #24
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	20010d44 	.word	0x20010d44
 80101c8:	20010d34 	.word	0x20010d34
 80101cc:	20010d40 	.word	0x20010d40

080101d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101d6:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 80101da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101dc:	4b27      	ldr	r3, [pc, #156]	@ (801027c <prvHeapInit+0xac>)
 80101de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	f003 0307 	and.w	r3, r3, #7
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00c      	beq.n	8010204 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	3307      	adds	r3, #7
 80101ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f023 0307 	bic.w	r3, r3, #7
 80101f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	1ad3      	subs	r3, r2, r3
 80101fe:	4a1f      	ldr	r2, [pc, #124]	@ (801027c <prvHeapInit+0xac>)
 8010200:	4413      	add	r3, r2
 8010202:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010208:	4a1d      	ldr	r2, [pc, #116]	@ (8010280 <prvHeapInit+0xb0>)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801020e:	4b1c      	ldr	r3, [pc, #112]	@ (8010280 <prvHeapInit+0xb0>)
 8010210:	2200      	movs	r2, #0
 8010212:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	4413      	add	r3, r2
 801021a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801021c:	2208      	movs	r2, #8
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	1a9b      	subs	r3, r3, r2
 8010222:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f023 0307 	bic.w	r3, r3, #7
 801022a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4a15      	ldr	r2, [pc, #84]	@ (8010284 <prvHeapInit+0xb4>)
 8010230:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010232:	4b14      	ldr	r3, [pc, #80]	@ (8010284 <prvHeapInit+0xb4>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2200      	movs	r2, #0
 8010238:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801023a:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <prvHeapInit+0xb4>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	1ad2      	subs	r2, r2, r3
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010250:	4b0c      	ldr	r3, [pc, #48]	@ (8010284 <prvHeapInit+0xb4>)
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4a0a      	ldr	r2, [pc, #40]	@ (8010288 <prvHeapInit+0xb8>)
 801025e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	4a09      	ldr	r2, [pc, #36]	@ (801028c <prvHeapInit+0xbc>)
 8010266:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010268:	4b09      	ldr	r3, [pc, #36]	@ (8010290 <prvHeapInit+0xc0>)
 801026a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801026e:	601a      	str	r2, [r3, #0]
}
 8010270:	bf00      	nop
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20001328 	.word	0x20001328
 8010280:	20010d28 	.word	0x20010d28
 8010284:	20010d30 	.word	0x20010d30
 8010288:	20010d38 	.word	0x20010d38
 801028c:	20010d34 	.word	0x20010d34
 8010290:	20010d44 	.word	0x20010d44

08010294 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801029c:	4b28      	ldr	r3, [pc, #160]	@ (8010340 <prvInsertBlockIntoFreeList+0xac>)
 801029e:	60fb      	str	r3, [r7, #12]
 80102a0:	e002      	b.n	80102a8 <prvInsertBlockIntoFreeList+0x14>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	60fb      	str	r3, [r7, #12]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d8f7      	bhi.n	80102a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	68ba      	ldr	r2, [r7, #8]
 80102bc:	4413      	add	r3, r2
 80102be:	687a      	ldr	r2, [r7, #4]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d108      	bne.n	80102d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	685a      	ldr	r2, [r3, #4]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	441a      	add	r2, r3
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	68ba      	ldr	r2, [r7, #8]
 80102e0:	441a      	add	r2, r3
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d118      	bne.n	801031c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	4b15      	ldr	r3, [pc, #84]	@ (8010344 <prvInsertBlockIntoFreeList+0xb0>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d00d      	beq.n	8010312 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	441a      	add	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	681a      	ldr	r2, [r3, #0]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	601a      	str	r2, [r3, #0]
 8010310:	e008      	b.n	8010324 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010312:	4b0c      	ldr	r3, [pc, #48]	@ (8010344 <prvInsertBlockIntoFreeList+0xb0>)
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	601a      	str	r2, [r3, #0]
 801031a:	e003      	b.n	8010324 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	429a      	cmp	r2, r3
 801032a:	d002      	beq.n	8010332 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010332:	bf00      	nop
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr
 801033e:	bf00      	nop
 8010340:	20010d28 	.word	0x20010d28
 8010344:	20010d30 	.word	0x20010d30

08010348 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801034c:	2201      	movs	r2, #1
 801034e:	490e      	ldr	r1, [pc, #56]	@ (8010388 <MX_USB_HOST_Init+0x40>)
 8010350:	480e      	ldr	r0, [pc, #56]	@ (801038c <MX_USB_HOST_Init+0x44>)
 8010352:	f7f9 feb9 	bl	800a0c8 <USBH_Init>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801035c:	f7f2 f940 	bl	80025e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010360:	490b      	ldr	r1, [pc, #44]	@ (8010390 <MX_USB_HOST_Init+0x48>)
 8010362:	480a      	ldr	r0, [pc, #40]	@ (801038c <MX_USB_HOST_Init+0x44>)
 8010364:	f7f9 ff7d 	bl	800a262 <USBH_RegisterClass>
 8010368:	4603      	mov	r3, r0
 801036a:	2b00      	cmp	r3, #0
 801036c:	d001      	beq.n	8010372 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801036e:	f7f2 f937 	bl	80025e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010372:	4806      	ldr	r0, [pc, #24]	@ (801038c <MX_USB_HOST_Init+0x44>)
 8010374:	f7fa f801 	bl	800a37a <USBH_Start>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d001      	beq.n	8010382 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801037e:	f7f2 f92f 	bl	80025e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010382:	bf00      	nop
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	08010395 	.word	0x08010395
 801038c:	20010d48 	.word	0x20010d48
 8010390:	20000268 	.word	0x20000268

08010394 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	460b      	mov	r3, r1
 801039e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80103a0:	78fb      	ldrb	r3, [r7, #3]
 80103a2:	3b01      	subs	r3, #1
 80103a4:	2b04      	cmp	r3, #4
 80103a6:	d819      	bhi.n	80103dc <USBH_UserProcess+0x48>
 80103a8:	a201      	add	r2, pc, #4	@ (adr r2, 80103b0 <USBH_UserProcess+0x1c>)
 80103aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ae:	bf00      	nop
 80103b0:	080103dd 	.word	0x080103dd
 80103b4:	080103cd 	.word	0x080103cd
 80103b8:	080103dd 	.word	0x080103dd
 80103bc:	080103d5 	.word	0x080103d5
 80103c0:	080103c5 	.word	0x080103c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80103c4:	4b09      	ldr	r3, [pc, #36]	@ (80103ec <USBH_UserProcess+0x58>)
 80103c6:	2203      	movs	r2, #3
 80103c8:	701a      	strb	r2, [r3, #0]
  break;
 80103ca:	e008      	b.n	80103de <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80103cc:	4b07      	ldr	r3, [pc, #28]	@ (80103ec <USBH_UserProcess+0x58>)
 80103ce:	2202      	movs	r2, #2
 80103d0:	701a      	strb	r2, [r3, #0]
  break;
 80103d2:	e004      	b.n	80103de <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80103d4:	4b05      	ldr	r3, [pc, #20]	@ (80103ec <USBH_UserProcess+0x58>)
 80103d6:	2201      	movs	r2, #1
 80103d8:	701a      	strb	r2, [r3, #0]
  break;
 80103da:	e000      	b.n	80103de <USBH_UserProcess+0x4a>

  default:
  break;
 80103dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80103de:	bf00      	nop
 80103e0:	370c      	adds	r7, #12
 80103e2:	46bd      	mov	sp, r7
 80103e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e8:	4770      	bx	lr
 80103ea:	bf00      	nop
 80103ec:	2001112c 	.word	0x2001112c

080103f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b08a      	sub	sp, #40	@ 0x28
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103f8:	f107 0314 	add.w	r3, r7, #20
 80103fc:	2200      	movs	r2, #0
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	605a      	str	r2, [r3, #4]
 8010402:	609a      	str	r2, [r3, #8]
 8010404:	60da      	str	r2, [r3, #12]
 8010406:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010410:	d147      	bne.n	80104a2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010412:	2300      	movs	r3, #0
 8010414:	613b      	str	r3, [r7, #16]
 8010416:	4b25      	ldr	r3, [pc, #148]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 8010418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801041a:	4a24      	ldr	r2, [pc, #144]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	6313      	str	r3, [r2, #48]	@ 0x30
 8010422:	4b22      	ldr	r3, [pc, #136]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 8010424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010426:	f003 0301 	and.w	r3, r3, #1
 801042a:	613b      	str	r3, [r7, #16]
 801042c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801042e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010434:	2300      	movs	r3, #0
 8010436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010438:	2300      	movs	r3, #0
 801043a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801043c:	f107 0314 	add.w	r3, r7, #20
 8010440:	4619      	mov	r1, r3
 8010442:	481b      	ldr	r0, [pc, #108]	@ (80104b0 <HAL_HCD_MspInit+0xc0>)
 8010444:	f7f2 fe5e 	bl	8003104 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010448:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801044c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801044e:	2302      	movs	r3, #2
 8010450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010452:	2300      	movs	r3, #0
 8010454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010456:	2300      	movs	r3, #0
 8010458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801045a:	230a      	movs	r3, #10
 801045c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801045e:	f107 0314 	add.w	r3, r7, #20
 8010462:	4619      	mov	r1, r3
 8010464:	4812      	ldr	r0, [pc, #72]	@ (80104b0 <HAL_HCD_MspInit+0xc0>)
 8010466:	f7f2 fe4d 	bl	8003104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801046a:	4b10      	ldr	r3, [pc, #64]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 801046c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801046e:	4a0f      	ldr	r2, [pc, #60]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 8010470:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010474:	6353      	str	r3, [r2, #52]	@ 0x34
 8010476:	2300      	movs	r3, #0
 8010478:	60fb      	str	r3, [r7, #12]
 801047a:	4b0c      	ldr	r3, [pc, #48]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 801047c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801047e:	4a0b      	ldr	r2, [pc, #44]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 8010480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010484:	6453      	str	r3, [r2, #68]	@ 0x44
 8010486:	4b09      	ldr	r3, [pc, #36]	@ (80104ac <HAL_HCD_MspInit+0xbc>)
 8010488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801048a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010492:	2200      	movs	r2, #0
 8010494:	2105      	movs	r1, #5
 8010496:	2043      	movs	r0, #67	@ 0x43
 8010498:	f7f2 fd78 	bl	8002f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801049c:	2043      	movs	r0, #67	@ 0x43
 801049e:	f7f2 fd91 	bl	8002fc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80104a2:	bf00      	nop
 80104a4:	3728      	adds	r7, #40	@ 0x28
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	40023800 	.word	0x40023800
 80104b0:	40020000 	.word	0x40020000

080104b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fa fb91 	bl	800abea <USBH_LL_IncTimer>
}
 80104c8:	bf00      	nop
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fa fbd1 	bl	800ac86 <USBH_LL_Connect>
}
 80104e4:	bf00      	nop
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fa fbde 	bl	800acbc <USBH_LL_Disconnect>
}
 8010500:	bf00      	nop
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
 8010514:	4613      	mov	r3, r2
 8010516:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801051e:	4618      	mov	r0, r3
 8010520:	f7fa fc31 	bl	800ad86 <USBH_LL_NotifyURBChange>
#endif
}
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801053a:	4618      	mov	r0, r3
 801053c:	f7fa fb7f 	bl	800ac3e <USBH_LL_PortEnabled>
}
 8010540:	bf00      	nop
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}

08010548 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010556:	4618      	mov	r0, r3
 8010558:	f7fa fb83 	bl	800ac62 <USBH_LL_PortDisabled>
}
 801055c:	bf00      	nop
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010572:	2b01      	cmp	r3, #1
 8010574:	d12a      	bne.n	80105cc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010576:	4a18      	ldr	r2, [pc, #96]	@ (80105d8 <USBH_LL_Init+0x74>)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4a15      	ldr	r2, [pc, #84]	@ (80105d8 <USBH_LL_Init+0x74>)
 8010582:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010586:	4b14      	ldr	r3, [pc, #80]	@ (80105d8 <USBH_LL_Init+0x74>)
 8010588:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801058c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801058e:	4b12      	ldr	r3, [pc, #72]	@ (80105d8 <USBH_LL_Init+0x74>)
 8010590:	2208      	movs	r2, #8
 8010592:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010594:	4b10      	ldr	r3, [pc, #64]	@ (80105d8 <USBH_LL_Init+0x74>)
 8010596:	2201      	movs	r2, #1
 8010598:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801059a:	4b0f      	ldr	r3, [pc, #60]	@ (80105d8 <USBH_LL_Init+0x74>)
 801059c:	2200      	movs	r2, #0
 801059e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80105a0:	4b0d      	ldr	r3, [pc, #52]	@ (80105d8 <USBH_LL_Init+0x74>)
 80105a2:	2202      	movs	r2, #2
 80105a4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80105a6:	4b0c      	ldr	r3, [pc, #48]	@ (80105d8 <USBH_LL_Init+0x74>)
 80105a8:	2200      	movs	r2, #0
 80105aa:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80105ac:	480a      	ldr	r0, [pc, #40]	@ (80105d8 <USBH_LL_Init+0x74>)
 80105ae:	f7f2 ffb4 	bl	800351a <HAL_HCD_Init>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d001      	beq.n	80105bc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80105b8:	f7f2 f812 	bl	80025e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80105bc:	4806      	ldr	r0, [pc, #24]	@ (80105d8 <USBH_LL_Init+0x74>)
 80105be:	f7f3 fc15 	bl	8003dec <HAL_HCD_GetCurrentFrame>
 80105c2:	4603      	mov	r3, r0
 80105c4:	4619      	mov	r1, r3
 80105c6:	6878      	ldr	r0, [r7, #4]
 80105c8:	f7fa fb00 	bl	800abcc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	20011130 	.word	0x20011130

080105dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f3 fb82 	bl	8003cfc <HAL_HCD_Start>
 80105f8:	4603      	mov	r3, r0
 80105fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105fc:	7bfb      	ldrb	r3, [r7, #15]
 80105fe:	4618      	mov	r0, r3
 8010600:	f000 f95e 	bl	80108c0 <USBH_Get_USB_Status>
 8010604:	4603      	mov	r3, r0
 8010606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010608:	7bbb      	ldrb	r3, [r7, #14]
}
 801060a:	4618      	mov	r0, r3
 801060c:	3710      	adds	r7, #16
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}

08010612 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010612:	b580      	push	{r7, lr}
 8010614:	b084      	sub	sp, #16
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801061a:	2300      	movs	r3, #0
 801061c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801061e:	2300      	movs	r3, #0
 8010620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010628:	4618      	mov	r0, r3
 801062a:	f7f3 fb8a 	bl	8003d42 <HAL_HCD_Stop>
 801062e:	4603      	mov	r3, r0
 8010630:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010632:	7bfb      	ldrb	r3, [r7, #15]
 8010634:	4618      	mov	r0, r3
 8010636:	f000 f943 	bl	80108c0 <USBH_Get_USB_Status>
 801063a:	4603      	mov	r3, r0
 801063c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801063e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010650:	2301      	movs	r3, #1
 8010652:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801065a:	4618      	mov	r0, r3
 801065c:	f7f3 fbd4 	bl	8003e08 <HAL_HCD_GetCurrentSpeed>
 8010660:	4603      	mov	r3, r0
 8010662:	2b02      	cmp	r3, #2
 8010664:	d00c      	beq.n	8010680 <USBH_LL_GetSpeed+0x38>
 8010666:	2b02      	cmp	r3, #2
 8010668:	d80d      	bhi.n	8010686 <USBH_LL_GetSpeed+0x3e>
 801066a:	2b00      	cmp	r3, #0
 801066c:	d002      	beq.n	8010674 <USBH_LL_GetSpeed+0x2c>
 801066e:	2b01      	cmp	r3, #1
 8010670:	d003      	beq.n	801067a <USBH_LL_GetSpeed+0x32>
 8010672:	e008      	b.n	8010686 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010674:	2300      	movs	r3, #0
 8010676:	73fb      	strb	r3, [r7, #15]
    break;
 8010678:	e008      	b.n	801068c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801067a:	2301      	movs	r3, #1
 801067c:	73fb      	strb	r3, [r7, #15]
    break;
 801067e:	e005      	b.n	801068c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010680:	2302      	movs	r3, #2
 8010682:	73fb      	strb	r3, [r7, #15]
    break;
 8010684:	e002      	b.n	801068c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010686:	2301      	movs	r3, #1
 8010688:	73fb      	strb	r3, [r7, #15]
    break;
 801068a:	bf00      	nop
  }
  return  speed;
 801068c:	7bfb      	ldrb	r3, [r7, #15]
}
 801068e:	4618      	mov	r0, r3
 8010690:	3710      	adds	r7, #16
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b084      	sub	sp, #16
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106a2:	2300      	movs	r3, #0
 80106a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7f3 fb65 	bl	8003d7c <HAL_HCD_ResetPort>
 80106b2:	4603      	mov	r3, r0
 80106b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80106b6:	7bfb      	ldrb	r3, [r7, #15]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 f901 	bl	80108c0 <USBH_Get_USB_Status>
 80106be:	4603      	mov	r3, r0
 80106c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3710      	adds	r7, #16
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106de:	78fa      	ldrb	r2, [r7, #3]
 80106e0:	4611      	mov	r1, r2
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7f3 fb6d 	bl	8003dc2 <HAL_HCD_HC_GetXferCount>
 80106e8:	4603      	mov	r3, r0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3708      	adds	r7, #8
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80106f2:	b590      	push	{r4, r7, lr}
 80106f4:	b089      	sub	sp, #36	@ 0x24
 80106f6:	af04      	add	r7, sp, #16
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	4608      	mov	r0, r1
 80106fc:	4611      	mov	r1, r2
 80106fe:	461a      	mov	r2, r3
 8010700:	4603      	mov	r3, r0
 8010702:	70fb      	strb	r3, [r7, #3]
 8010704:	460b      	mov	r3, r1
 8010706:	70bb      	strb	r3, [r7, #2]
 8010708:	4613      	mov	r3, r2
 801070a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801070c:	2300      	movs	r3, #0
 801070e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010710:	2300      	movs	r3, #0
 8010712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801071a:	787c      	ldrb	r4, [r7, #1]
 801071c:	78ba      	ldrb	r2, [r7, #2]
 801071e:	78f9      	ldrb	r1, [r7, #3]
 8010720:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010722:	9302      	str	r3, [sp, #8]
 8010724:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801072e:	9300      	str	r3, [sp, #0]
 8010730:	4623      	mov	r3, r4
 8010732:	f7f2 ff59 	bl	80035e8 <HAL_HCD_HC_Init>
 8010736:	4603      	mov	r3, r0
 8010738:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	4618      	mov	r0, r3
 801073e:	f000 f8bf 	bl	80108c0 <USBH_Get_USB_Status>
 8010742:	4603      	mov	r3, r0
 8010744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010746:	7bbb      	ldrb	r3, [r7, #14]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3714      	adds	r7, #20
 801074c:	46bd      	mov	sp, r7
 801074e:	bd90      	pop	{r4, r7, pc}

08010750 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	460b      	mov	r3, r1
 801075a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801075c:	2300      	movs	r3, #0
 801075e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801076a:	78fa      	ldrb	r2, [r7, #3]
 801076c:	4611      	mov	r1, r2
 801076e:	4618      	mov	r0, r3
 8010770:	f7f2 fff2 	bl	8003758 <HAL_HCD_HC_Halt>
 8010774:	4603      	mov	r3, r0
 8010776:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010778:	7bfb      	ldrb	r3, [r7, #15]
 801077a:	4618      	mov	r0, r3
 801077c:	f000 f8a0 	bl	80108c0 <USBH_Get_USB_Status>
 8010780:	4603      	mov	r3, r0
 8010782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010784:	7bbb      	ldrb	r3, [r7, #14]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801078e:	b590      	push	{r4, r7, lr}
 8010790:	b089      	sub	sp, #36	@ 0x24
 8010792:	af04      	add	r7, sp, #16
 8010794:	6078      	str	r0, [r7, #4]
 8010796:	4608      	mov	r0, r1
 8010798:	4611      	mov	r1, r2
 801079a:	461a      	mov	r2, r3
 801079c:	4603      	mov	r3, r0
 801079e:	70fb      	strb	r3, [r7, #3]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70bb      	strb	r3, [r7, #2]
 80107a4:	4613      	mov	r3, r2
 80107a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107a8:	2300      	movs	r3, #0
 80107aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80107ac:	2300      	movs	r3, #0
 80107ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80107b6:	787c      	ldrb	r4, [r7, #1]
 80107b8:	78ba      	ldrb	r2, [r7, #2]
 80107ba:	78f9      	ldrb	r1, [r7, #3]
 80107bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80107c0:	9303      	str	r3, [sp, #12]
 80107c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107c4:	9302      	str	r3, [sp, #8]
 80107c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c8:	9301      	str	r3, [sp, #4]
 80107ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	4623      	mov	r3, r4
 80107d2:	f7f2 ffe5 	bl	80037a0 <HAL_HCD_HC_SubmitRequest>
 80107d6:	4603      	mov	r3, r0
 80107d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80107da:	7bfb      	ldrb	r3, [r7, #15]
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 f86f 	bl	80108c0 <USBH_Get_USB_Status>
 80107e2:	4603      	mov	r3, r0
 80107e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3714      	adds	r7, #20
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd90      	pop	{r4, r7, pc}

080107f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010802:	78fa      	ldrb	r2, [r7, #3]
 8010804:	4611      	mov	r1, r2
 8010806:	4618      	mov	r0, r3
 8010808:	f7f3 fac6 	bl	8003d98 <HAL_HCD_HC_GetURBState>
 801080c:	4603      	mov	r3, r0
}
 801080e:	4618      	mov	r0, r3
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b082      	sub	sp, #8
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
 801081e:	460b      	mov	r3, r1
 8010820:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010828:	2b01      	cmp	r3, #1
 801082a:	d103      	bne.n	8010834 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801082c:	78fb      	ldrb	r3, [r7, #3]
 801082e:	4618      	mov	r0, r3
 8010830:	f000 f872 	bl	8010918 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010834:	20c8      	movs	r0, #200	@ 0xc8
 8010836:	f7f2 facd 	bl	8002dd4 <HAL_Delay>
  return USBH_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010844:	b480      	push	{r7}
 8010846:	b085      	sub	sp, #20
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	460b      	mov	r3, r1
 801084e:	70fb      	strb	r3, [r7, #3]
 8010850:	4613      	mov	r3, r2
 8010852:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801085a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801085c:	78fa      	ldrb	r2, [r7, #3]
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	4613      	mov	r3, r2
 8010862:	011b      	lsls	r3, r3, #4
 8010864:	1a9b      	subs	r3, r3, r2
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	440b      	add	r3, r1
 801086a:	3317      	adds	r3, #23
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d00a      	beq.n	8010888 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010872:	78fa      	ldrb	r2, [r7, #3]
 8010874:	68f9      	ldr	r1, [r7, #12]
 8010876:	4613      	mov	r3, r2
 8010878:	011b      	lsls	r3, r3, #4
 801087a:	1a9b      	subs	r3, r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	440b      	add	r3, r1
 8010880:	333c      	adds	r3, #60	@ 0x3c
 8010882:	78ba      	ldrb	r2, [r7, #2]
 8010884:	701a      	strb	r2, [r3, #0]
 8010886:	e009      	b.n	801089c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010888:	78fa      	ldrb	r2, [r7, #3]
 801088a:	68f9      	ldr	r1, [r7, #12]
 801088c:	4613      	mov	r3, r2
 801088e:	011b      	lsls	r3, r3, #4
 8010890:	1a9b      	subs	r3, r3, r2
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	440b      	add	r3, r1
 8010896:	333d      	adds	r3, #61	@ 0x3d
 8010898:	78ba      	ldrb	r2, [r7, #2]
 801089a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801089c:	2300      	movs	r3, #0
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3714      	adds	r7, #20
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b082      	sub	sp, #8
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f7f2 fa8e 	bl	8002dd4 <HAL_Delay>
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b085      	sub	sp, #20
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80108ca:	2300      	movs	r3, #0
 80108cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108ce:	79fb      	ldrb	r3, [r7, #7]
 80108d0:	2b03      	cmp	r3, #3
 80108d2:	d817      	bhi.n	8010904 <USBH_Get_USB_Status+0x44>
 80108d4:	a201      	add	r2, pc, #4	@ (adr r2, 80108dc <USBH_Get_USB_Status+0x1c>)
 80108d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108da:	bf00      	nop
 80108dc:	080108ed 	.word	0x080108ed
 80108e0:	080108f3 	.word	0x080108f3
 80108e4:	080108f9 	.word	0x080108f9
 80108e8:	080108ff 	.word	0x080108ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108ec:	2300      	movs	r3, #0
 80108ee:	73fb      	strb	r3, [r7, #15]
    break;
 80108f0:	e00b      	b.n	801090a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108f2:	2302      	movs	r3, #2
 80108f4:	73fb      	strb	r3, [r7, #15]
    break;
 80108f6:	e008      	b.n	801090a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108f8:	2301      	movs	r3, #1
 80108fa:	73fb      	strb	r3, [r7, #15]
    break;
 80108fc:	e005      	b.n	801090a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108fe:	2302      	movs	r3, #2
 8010900:	73fb      	strb	r3, [r7, #15]
    break;
 8010902:	e002      	b.n	801090a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010904:	2302      	movs	r3, #2
 8010906:	73fb      	strb	r3, [r7, #15]
    break;
 8010908:	bf00      	nop
  }
  return usb_status;
 801090a:	7bfb      	ldrb	r3, [r7, #15]
}
 801090c:	4618      	mov	r0, r3
 801090e:	3714      	adds	r7, #20
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	4603      	mov	r3, r0
 8010920:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010922:	79fb      	ldrb	r3, [r7, #7]
 8010924:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010926:	79fb      	ldrb	r3, [r7, #7]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d102      	bne.n	8010932 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801092c:	2301      	movs	r3, #1
 801092e:	73fb      	strb	r3, [r7, #15]
 8010930:	e001      	b.n	8010936 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010932:	2300      	movs	r3, #0
 8010934:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010936:	7bfb      	ldrb	r3, [r7, #15]
 8010938:	461a      	mov	r2, r3
 801093a:	2101      	movs	r1, #1
 801093c:	4803      	ldr	r0, [pc, #12]	@ (801094c <MX_DriverVbusFS+0x34>)
 801093e:	f7f2 fd95 	bl	800346c <HAL_GPIO_WritePin>
}
 8010942:	bf00      	nop
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}
 801094a:	bf00      	nop
 801094c:	40020800 	.word	0x40020800

08010950 <atoi>:
 8010950:	220a      	movs	r2, #10
 8010952:	2100      	movs	r1, #0
 8010954:	f000 b938 	b.w	8010bc8 <strtol>

08010958 <malloc>:
 8010958:	4b02      	ldr	r3, [pc, #8]	@ (8010964 <malloc+0xc>)
 801095a:	4601      	mov	r1, r0
 801095c:	6818      	ldr	r0, [r3, #0]
 801095e:	f000 b82d 	b.w	80109bc <_malloc_r>
 8010962:	bf00      	nop
 8010964:	20000298 	.word	0x20000298

08010968 <free>:
 8010968:	4b02      	ldr	r3, [pc, #8]	@ (8010974 <free+0xc>)
 801096a:	4601      	mov	r1, r0
 801096c:	6818      	ldr	r0, [r3, #0]
 801096e:	f000 bbf5 	b.w	801115c <_free_r>
 8010972:	bf00      	nop
 8010974:	20000298 	.word	0x20000298

08010978 <sbrk_aligned>:
 8010978:	b570      	push	{r4, r5, r6, lr}
 801097a:	4e0f      	ldr	r6, [pc, #60]	@ (80109b8 <sbrk_aligned+0x40>)
 801097c:	460c      	mov	r4, r1
 801097e:	6831      	ldr	r1, [r6, #0]
 8010980:	4605      	mov	r5, r0
 8010982:	b911      	cbnz	r1, 801098a <sbrk_aligned+0x12>
 8010984:	f000 fb66 	bl	8011054 <_sbrk_r>
 8010988:	6030      	str	r0, [r6, #0]
 801098a:	4621      	mov	r1, r4
 801098c:	4628      	mov	r0, r5
 801098e:	f000 fb61 	bl	8011054 <_sbrk_r>
 8010992:	1c43      	adds	r3, r0, #1
 8010994:	d103      	bne.n	801099e <sbrk_aligned+0x26>
 8010996:	f04f 34ff 	mov.w	r4, #4294967295
 801099a:	4620      	mov	r0, r4
 801099c:	bd70      	pop	{r4, r5, r6, pc}
 801099e:	1cc4      	adds	r4, r0, #3
 80109a0:	f024 0403 	bic.w	r4, r4, #3
 80109a4:	42a0      	cmp	r0, r4
 80109a6:	d0f8      	beq.n	801099a <sbrk_aligned+0x22>
 80109a8:	1a21      	subs	r1, r4, r0
 80109aa:	4628      	mov	r0, r5
 80109ac:	f000 fb52 	bl	8011054 <_sbrk_r>
 80109b0:	3001      	adds	r0, #1
 80109b2:	d1f2      	bne.n	801099a <sbrk_aligned+0x22>
 80109b4:	e7ef      	b.n	8010996 <sbrk_aligned+0x1e>
 80109b6:	bf00      	nop
 80109b8:	20011510 	.word	0x20011510

080109bc <_malloc_r>:
 80109bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109c0:	1ccd      	adds	r5, r1, #3
 80109c2:	f025 0503 	bic.w	r5, r5, #3
 80109c6:	3508      	adds	r5, #8
 80109c8:	2d0c      	cmp	r5, #12
 80109ca:	bf38      	it	cc
 80109cc:	250c      	movcc	r5, #12
 80109ce:	2d00      	cmp	r5, #0
 80109d0:	4606      	mov	r6, r0
 80109d2:	db01      	blt.n	80109d8 <_malloc_r+0x1c>
 80109d4:	42a9      	cmp	r1, r5
 80109d6:	d904      	bls.n	80109e2 <_malloc_r+0x26>
 80109d8:	230c      	movs	r3, #12
 80109da:	6033      	str	r3, [r6, #0]
 80109dc:	2000      	movs	r0, #0
 80109de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ab8 <_malloc_r+0xfc>
 80109e6:	f000 f869 	bl	8010abc <__malloc_lock>
 80109ea:	f8d8 3000 	ldr.w	r3, [r8]
 80109ee:	461c      	mov	r4, r3
 80109f0:	bb44      	cbnz	r4, 8010a44 <_malloc_r+0x88>
 80109f2:	4629      	mov	r1, r5
 80109f4:	4630      	mov	r0, r6
 80109f6:	f7ff ffbf 	bl	8010978 <sbrk_aligned>
 80109fa:	1c43      	adds	r3, r0, #1
 80109fc:	4604      	mov	r4, r0
 80109fe:	d158      	bne.n	8010ab2 <_malloc_r+0xf6>
 8010a00:	f8d8 4000 	ldr.w	r4, [r8]
 8010a04:	4627      	mov	r7, r4
 8010a06:	2f00      	cmp	r7, #0
 8010a08:	d143      	bne.n	8010a92 <_malloc_r+0xd6>
 8010a0a:	2c00      	cmp	r4, #0
 8010a0c:	d04b      	beq.n	8010aa6 <_malloc_r+0xea>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	4639      	mov	r1, r7
 8010a12:	4630      	mov	r0, r6
 8010a14:	eb04 0903 	add.w	r9, r4, r3
 8010a18:	f000 fb1c 	bl	8011054 <_sbrk_r>
 8010a1c:	4581      	cmp	r9, r0
 8010a1e:	d142      	bne.n	8010aa6 <_malloc_r+0xea>
 8010a20:	6821      	ldr	r1, [r4, #0]
 8010a22:	1a6d      	subs	r5, r5, r1
 8010a24:	4629      	mov	r1, r5
 8010a26:	4630      	mov	r0, r6
 8010a28:	f7ff ffa6 	bl	8010978 <sbrk_aligned>
 8010a2c:	3001      	adds	r0, #1
 8010a2e:	d03a      	beq.n	8010aa6 <_malloc_r+0xea>
 8010a30:	6823      	ldr	r3, [r4, #0]
 8010a32:	442b      	add	r3, r5
 8010a34:	6023      	str	r3, [r4, #0]
 8010a36:	f8d8 3000 	ldr.w	r3, [r8]
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	bb62      	cbnz	r2, 8010a98 <_malloc_r+0xdc>
 8010a3e:	f8c8 7000 	str.w	r7, [r8]
 8010a42:	e00f      	b.n	8010a64 <_malloc_r+0xa8>
 8010a44:	6822      	ldr	r2, [r4, #0]
 8010a46:	1b52      	subs	r2, r2, r5
 8010a48:	d420      	bmi.n	8010a8c <_malloc_r+0xd0>
 8010a4a:	2a0b      	cmp	r2, #11
 8010a4c:	d917      	bls.n	8010a7e <_malloc_r+0xc2>
 8010a4e:	1961      	adds	r1, r4, r5
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	6025      	str	r5, [r4, #0]
 8010a54:	bf18      	it	ne
 8010a56:	6059      	strne	r1, [r3, #4]
 8010a58:	6863      	ldr	r3, [r4, #4]
 8010a5a:	bf08      	it	eq
 8010a5c:	f8c8 1000 	streq.w	r1, [r8]
 8010a60:	5162      	str	r2, [r4, r5]
 8010a62:	604b      	str	r3, [r1, #4]
 8010a64:	4630      	mov	r0, r6
 8010a66:	f000 f82f 	bl	8010ac8 <__malloc_unlock>
 8010a6a:	f104 000b 	add.w	r0, r4, #11
 8010a6e:	1d23      	adds	r3, r4, #4
 8010a70:	f020 0007 	bic.w	r0, r0, #7
 8010a74:	1ac2      	subs	r2, r0, r3
 8010a76:	bf1c      	itt	ne
 8010a78:	1a1b      	subne	r3, r3, r0
 8010a7a:	50a3      	strne	r3, [r4, r2]
 8010a7c:	e7af      	b.n	80109de <_malloc_r+0x22>
 8010a7e:	6862      	ldr	r2, [r4, #4]
 8010a80:	42a3      	cmp	r3, r4
 8010a82:	bf0c      	ite	eq
 8010a84:	f8c8 2000 	streq.w	r2, [r8]
 8010a88:	605a      	strne	r2, [r3, #4]
 8010a8a:	e7eb      	b.n	8010a64 <_malloc_r+0xa8>
 8010a8c:	4623      	mov	r3, r4
 8010a8e:	6864      	ldr	r4, [r4, #4]
 8010a90:	e7ae      	b.n	80109f0 <_malloc_r+0x34>
 8010a92:	463c      	mov	r4, r7
 8010a94:	687f      	ldr	r7, [r7, #4]
 8010a96:	e7b6      	b.n	8010a06 <_malloc_r+0x4a>
 8010a98:	461a      	mov	r2, r3
 8010a9a:	685b      	ldr	r3, [r3, #4]
 8010a9c:	42a3      	cmp	r3, r4
 8010a9e:	d1fb      	bne.n	8010a98 <_malloc_r+0xdc>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	6053      	str	r3, [r2, #4]
 8010aa4:	e7de      	b.n	8010a64 <_malloc_r+0xa8>
 8010aa6:	230c      	movs	r3, #12
 8010aa8:	6033      	str	r3, [r6, #0]
 8010aaa:	4630      	mov	r0, r6
 8010aac:	f000 f80c 	bl	8010ac8 <__malloc_unlock>
 8010ab0:	e794      	b.n	80109dc <_malloc_r+0x20>
 8010ab2:	6005      	str	r5, [r0, #0]
 8010ab4:	e7d6      	b.n	8010a64 <_malloc_r+0xa8>
 8010ab6:	bf00      	nop
 8010ab8:	20011514 	.word	0x20011514

08010abc <__malloc_lock>:
 8010abc:	4801      	ldr	r0, [pc, #4]	@ (8010ac4 <__malloc_lock+0x8>)
 8010abe:	f000 bb16 	b.w	80110ee <__retarget_lock_acquire_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	20011658 	.word	0x20011658

08010ac8 <__malloc_unlock>:
 8010ac8:	4801      	ldr	r0, [pc, #4]	@ (8010ad0 <__malloc_unlock+0x8>)
 8010aca:	f000 bb11 	b.w	80110f0 <__retarget_lock_release_recursive>
 8010ace:	bf00      	nop
 8010ad0:	20011658 	.word	0x20011658

08010ad4 <_strtol_l.isra.0>:
 8010ad4:	2b24      	cmp	r3, #36	@ 0x24
 8010ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ada:	4686      	mov	lr, r0
 8010adc:	4690      	mov	r8, r2
 8010ade:	d801      	bhi.n	8010ae4 <_strtol_l.isra.0+0x10>
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d106      	bne.n	8010af2 <_strtol_l.isra.0+0x1e>
 8010ae4:	f000 fad8 	bl	8011098 <__errno>
 8010ae8:	2316      	movs	r3, #22
 8010aea:	6003      	str	r3, [r0, #0]
 8010aec:	2000      	movs	r0, #0
 8010aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010af2:	4834      	ldr	r0, [pc, #208]	@ (8010bc4 <_strtol_l.isra.0+0xf0>)
 8010af4:	460d      	mov	r5, r1
 8010af6:	462a      	mov	r2, r5
 8010af8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010afc:	5d06      	ldrb	r6, [r0, r4]
 8010afe:	f016 0608 	ands.w	r6, r6, #8
 8010b02:	d1f8      	bne.n	8010af6 <_strtol_l.isra.0+0x22>
 8010b04:	2c2d      	cmp	r4, #45	@ 0x2d
 8010b06:	d110      	bne.n	8010b2a <_strtol_l.isra.0+0x56>
 8010b08:	782c      	ldrb	r4, [r5, #0]
 8010b0a:	2601      	movs	r6, #1
 8010b0c:	1c95      	adds	r5, r2, #2
 8010b0e:	f033 0210 	bics.w	r2, r3, #16
 8010b12:	d115      	bne.n	8010b40 <_strtol_l.isra.0+0x6c>
 8010b14:	2c30      	cmp	r4, #48	@ 0x30
 8010b16:	d10d      	bne.n	8010b34 <_strtol_l.isra.0+0x60>
 8010b18:	782a      	ldrb	r2, [r5, #0]
 8010b1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b1e:	2a58      	cmp	r2, #88	@ 0x58
 8010b20:	d108      	bne.n	8010b34 <_strtol_l.isra.0+0x60>
 8010b22:	786c      	ldrb	r4, [r5, #1]
 8010b24:	3502      	adds	r5, #2
 8010b26:	2310      	movs	r3, #16
 8010b28:	e00a      	b.n	8010b40 <_strtol_l.isra.0+0x6c>
 8010b2a:	2c2b      	cmp	r4, #43	@ 0x2b
 8010b2c:	bf04      	itt	eq
 8010b2e:	782c      	ldrbeq	r4, [r5, #0]
 8010b30:	1c95      	addeq	r5, r2, #2
 8010b32:	e7ec      	b.n	8010b0e <_strtol_l.isra.0+0x3a>
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1f6      	bne.n	8010b26 <_strtol_l.isra.0+0x52>
 8010b38:	2c30      	cmp	r4, #48	@ 0x30
 8010b3a:	bf14      	ite	ne
 8010b3c:	230a      	movne	r3, #10
 8010b3e:	2308      	moveq	r3, #8
 8010b40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b48:	2200      	movs	r2, #0
 8010b4a:	fbbc f9f3 	udiv	r9, ip, r3
 8010b4e:	4610      	mov	r0, r2
 8010b50:	fb03 ca19 	mls	sl, r3, r9, ip
 8010b54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010b58:	2f09      	cmp	r7, #9
 8010b5a:	d80f      	bhi.n	8010b7c <_strtol_l.isra.0+0xa8>
 8010b5c:	463c      	mov	r4, r7
 8010b5e:	42a3      	cmp	r3, r4
 8010b60:	dd1b      	ble.n	8010b9a <_strtol_l.isra.0+0xc6>
 8010b62:	1c57      	adds	r7, r2, #1
 8010b64:	d007      	beq.n	8010b76 <_strtol_l.isra.0+0xa2>
 8010b66:	4581      	cmp	r9, r0
 8010b68:	d314      	bcc.n	8010b94 <_strtol_l.isra.0+0xc0>
 8010b6a:	d101      	bne.n	8010b70 <_strtol_l.isra.0+0x9c>
 8010b6c:	45a2      	cmp	sl, r4
 8010b6e:	db11      	blt.n	8010b94 <_strtol_l.isra.0+0xc0>
 8010b70:	fb00 4003 	mla	r0, r0, r3, r4
 8010b74:	2201      	movs	r2, #1
 8010b76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b7a:	e7eb      	b.n	8010b54 <_strtol_l.isra.0+0x80>
 8010b7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010b80:	2f19      	cmp	r7, #25
 8010b82:	d801      	bhi.n	8010b88 <_strtol_l.isra.0+0xb4>
 8010b84:	3c37      	subs	r4, #55	@ 0x37
 8010b86:	e7ea      	b.n	8010b5e <_strtol_l.isra.0+0x8a>
 8010b88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010b8c:	2f19      	cmp	r7, #25
 8010b8e:	d804      	bhi.n	8010b9a <_strtol_l.isra.0+0xc6>
 8010b90:	3c57      	subs	r4, #87	@ 0x57
 8010b92:	e7e4      	b.n	8010b5e <_strtol_l.isra.0+0x8a>
 8010b94:	f04f 32ff 	mov.w	r2, #4294967295
 8010b98:	e7ed      	b.n	8010b76 <_strtol_l.isra.0+0xa2>
 8010b9a:	1c53      	adds	r3, r2, #1
 8010b9c:	d108      	bne.n	8010bb0 <_strtol_l.isra.0+0xdc>
 8010b9e:	2322      	movs	r3, #34	@ 0x22
 8010ba0:	f8ce 3000 	str.w	r3, [lr]
 8010ba4:	4660      	mov	r0, ip
 8010ba6:	f1b8 0f00 	cmp.w	r8, #0
 8010baa:	d0a0      	beq.n	8010aee <_strtol_l.isra.0+0x1a>
 8010bac:	1e69      	subs	r1, r5, #1
 8010bae:	e006      	b.n	8010bbe <_strtol_l.isra.0+0xea>
 8010bb0:	b106      	cbz	r6, 8010bb4 <_strtol_l.isra.0+0xe0>
 8010bb2:	4240      	negs	r0, r0
 8010bb4:	f1b8 0f00 	cmp.w	r8, #0
 8010bb8:	d099      	beq.n	8010aee <_strtol_l.isra.0+0x1a>
 8010bba:	2a00      	cmp	r2, #0
 8010bbc:	d1f6      	bne.n	8010bac <_strtol_l.isra.0+0xd8>
 8010bbe:	f8c8 1000 	str.w	r1, [r8]
 8010bc2:	e794      	b.n	8010aee <_strtol_l.isra.0+0x1a>
 8010bc4:	080129ad 	.word	0x080129ad

08010bc8 <strtol>:
 8010bc8:	4613      	mov	r3, r2
 8010bca:	460a      	mov	r2, r1
 8010bcc:	4601      	mov	r1, r0
 8010bce:	4802      	ldr	r0, [pc, #8]	@ (8010bd8 <strtol+0x10>)
 8010bd0:	6800      	ldr	r0, [r0, #0]
 8010bd2:	f7ff bf7f 	b.w	8010ad4 <_strtol_l.isra.0>
 8010bd6:	bf00      	nop
 8010bd8:	20000298 	.word	0x20000298

08010bdc <std>:
 8010bdc:	2300      	movs	r3, #0
 8010bde:	b510      	push	{r4, lr}
 8010be0:	4604      	mov	r4, r0
 8010be2:	e9c0 3300 	strd	r3, r3, [r0]
 8010be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bea:	6083      	str	r3, [r0, #8]
 8010bec:	8181      	strh	r1, [r0, #12]
 8010bee:	6643      	str	r3, [r0, #100]	@ 0x64
 8010bf0:	81c2      	strh	r2, [r0, #14]
 8010bf2:	6183      	str	r3, [r0, #24]
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	2208      	movs	r2, #8
 8010bf8:	305c      	adds	r0, #92	@ 0x5c
 8010bfa:	f000 f916 	bl	8010e2a <memset>
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8010c34 <std+0x58>)
 8010c00:	6263      	str	r3, [r4, #36]	@ 0x24
 8010c02:	4b0d      	ldr	r3, [pc, #52]	@ (8010c38 <std+0x5c>)
 8010c04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010c06:	4b0d      	ldr	r3, [pc, #52]	@ (8010c3c <std+0x60>)
 8010c08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c40 <std+0x64>)
 8010c0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8010c44 <std+0x68>)
 8010c10:	6224      	str	r4, [r4, #32]
 8010c12:	429c      	cmp	r4, r3
 8010c14:	d006      	beq.n	8010c24 <std+0x48>
 8010c16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010c1a:	4294      	cmp	r4, r2
 8010c1c:	d002      	beq.n	8010c24 <std+0x48>
 8010c1e:	33d0      	adds	r3, #208	@ 0xd0
 8010c20:	429c      	cmp	r4, r3
 8010c22:	d105      	bne.n	8010c30 <std+0x54>
 8010c24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c2c:	f000 ba5e 	b.w	80110ec <__retarget_lock_init_recursive>
 8010c30:	bd10      	pop	{r4, pc}
 8010c32:	bf00      	nop
 8010c34:	08010da5 	.word	0x08010da5
 8010c38:	08010dc7 	.word	0x08010dc7
 8010c3c:	08010dff 	.word	0x08010dff
 8010c40:	08010e23 	.word	0x08010e23
 8010c44:	20011518 	.word	0x20011518

08010c48 <stdio_exit_handler>:
 8010c48:	4a02      	ldr	r2, [pc, #8]	@ (8010c54 <stdio_exit_handler+0xc>)
 8010c4a:	4903      	ldr	r1, [pc, #12]	@ (8010c58 <stdio_exit_handler+0x10>)
 8010c4c:	4803      	ldr	r0, [pc, #12]	@ (8010c5c <stdio_exit_handler+0x14>)
 8010c4e:	f000 b869 	b.w	8010d24 <_fwalk_sglue>
 8010c52:	bf00      	nop
 8010c54:	2000028c 	.word	0x2000028c
 8010c58:	080118c1 	.word	0x080118c1
 8010c5c:	2000029c 	.word	0x2000029c

08010c60 <cleanup_stdio>:
 8010c60:	6841      	ldr	r1, [r0, #4]
 8010c62:	4b0c      	ldr	r3, [pc, #48]	@ (8010c94 <cleanup_stdio+0x34>)
 8010c64:	4299      	cmp	r1, r3
 8010c66:	b510      	push	{r4, lr}
 8010c68:	4604      	mov	r4, r0
 8010c6a:	d001      	beq.n	8010c70 <cleanup_stdio+0x10>
 8010c6c:	f000 fe28 	bl	80118c0 <_fflush_r>
 8010c70:	68a1      	ldr	r1, [r4, #8]
 8010c72:	4b09      	ldr	r3, [pc, #36]	@ (8010c98 <cleanup_stdio+0x38>)
 8010c74:	4299      	cmp	r1, r3
 8010c76:	d002      	beq.n	8010c7e <cleanup_stdio+0x1e>
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fe21 	bl	80118c0 <_fflush_r>
 8010c7e:	68e1      	ldr	r1, [r4, #12]
 8010c80:	4b06      	ldr	r3, [pc, #24]	@ (8010c9c <cleanup_stdio+0x3c>)
 8010c82:	4299      	cmp	r1, r3
 8010c84:	d004      	beq.n	8010c90 <cleanup_stdio+0x30>
 8010c86:	4620      	mov	r0, r4
 8010c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c8c:	f000 be18 	b.w	80118c0 <_fflush_r>
 8010c90:	bd10      	pop	{r4, pc}
 8010c92:	bf00      	nop
 8010c94:	20011518 	.word	0x20011518
 8010c98:	20011580 	.word	0x20011580
 8010c9c:	200115e8 	.word	0x200115e8

08010ca0 <global_stdio_init.part.0>:
 8010ca0:	b510      	push	{r4, lr}
 8010ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8010cd0 <global_stdio_init.part.0+0x30>)
 8010ca4:	4c0b      	ldr	r4, [pc, #44]	@ (8010cd4 <global_stdio_init.part.0+0x34>)
 8010ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8010cd8 <global_stdio_init.part.0+0x38>)
 8010ca8:	601a      	str	r2, [r3, #0]
 8010caa:	4620      	mov	r0, r4
 8010cac:	2200      	movs	r2, #0
 8010cae:	2104      	movs	r1, #4
 8010cb0:	f7ff ff94 	bl	8010bdc <std>
 8010cb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010cb8:	2201      	movs	r2, #1
 8010cba:	2109      	movs	r1, #9
 8010cbc:	f7ff ff8e 	bl	8010bdc <std>
 8010cc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010cc4:	2202      	movs	r2, #2
 8010cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cca:	2112      	movs	r1, #18
 8010ccc:	f7ff bf86 	b.w	8010bdc <std>
 8010cd0:	20011650 	.word	0x20011650
 8010cd4:	20011518 	.word	0x20011518
 8010cd8:	08010c49 	.word	0x08010c49

08010cdc <__sfp_lock_acquire>:
 8010cdc:	4801      	ldr	r0, [pc, #4]	@ (8010ce4 <__sfp_lock_acquire+0x8>)
 8010cde:	f000 ba06 	b.w	80110ee <__retarget_lock_acquire_recursive>
 8010ce2:	bf00      	nop
 8010ce4:	20011659 	.word	0x20011659

08010ce8 <__sfp_lock_release>:
 8010ce8:	4801      	ldr	r0, [pc, #4]	@ (8010cf0 <__sfp_lock_release+0x8>)
 8010cea:	f000 ba01 	b.w	80110f0 <__retarget_lock_release_recursive>
 8010cee:	bf00      	nop
 8010cf0:	20011659 	.word	0x20011659

08010cf4 <__sinit>:
 8010cf4:	b510      	push	{r4, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	f7ff fff0 	bl	8010cdc <__sfp_lock_acquire>
 8010cfc:	6a23      	ldr	r3, [r4, #32]
 8010cfe:	b11b      	cbz	r3, 8010d08 <__sinit+0x14>
 8010d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d04:	f7ff bff0 	b.w	8010ce8 <__sfp_lock_release>
 8010d08:	4b04      	ldr	r3, [pc, #16]	@ (8010d1c <__sinit+0x28>)
 8010d0a:	6223      	str	r3, [r4, #32]
 8010d0c:	4b04      	ldr	r3, [pc, #16]	@ (8010d20 <__sinit+0x2c>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1f5      	bne.n	8010d00 <__sinit+0xc>
 8010d14:	f7ff ffc4 	bl	8010ca0 <global_stdio_init.part.0>
 8010d18:	e7f2      	b.n	8010d00 <__sinit+0xc>
 8010d1a:	bf00      	nop
 8010d1c:	08010c61 	.word	0x08010c61
 8010d20:	20011650 	.word	0x20011650

08010d24 <_fwalk_sglue>:
 8010d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d28:	4607      	mov	r7, r0
 8010d2a:	4688      	mov	r8, r1
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	2600      	movs	r6, #0
 8010d30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d34:	f1b9 0901 	subs.w	r9, r9, #1
 8010d38:	d505      	bpl.n	8010d46 <_fwalk_sglue+0x22>
 8010d3a:	6824      	ldr	r4, [r4, #0]
 8010d3c:	2c00      	cmp	r4, #0
 8010d3e:	d1f7      	bne.n	8010d30 <_fwalk_sglue+0xc>
 8010d40:	4630      	mov	r0, r6
 8010d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d46:	89ab      	ldrh	r3, [r5, #12]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d907      	bls.n	8010d5c <_fwalk_sglue+0x38>
 8010d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d50:	3301      	adds	r3, #1
 8010d52:	d003      	beq.n	8010d5c <_fwalk_sglue+0x38>
 8010d54:	4629      	mov	r1, r5
 8010d56:	4638      	mov	r0, r7
 8010d58:	47c0      	blx	r8
 8010d5a:	4306      	orrs	r6, r0
 8010d5c:	3568      	adds	r5, #104	@ 0x68
 8010d5e:	e7e9      	b.n	8010d34 <_fwalk_sglue+0x10>

08010d60 <siprintf>:
 8010d60:	b40e      	push	{r1, r2, r3}
 8010d62:	b510      	push	{r4, lr}
 8010d64:	b09d      	sub	sp, #116	@ 0x74
 8010d66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010d68:	9002      	str	r0, [sp, #8]
 8010d6a:	9006      	str	r0, [sp, #24]
 8010d6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010d70:	480a      	ldr	r0, [pc, #40]	@ (8010d9c <siprintf+0x3c>)
 8010d72:	9107      	str	r1, [sp, #28]
 8010d74:	9104      	str	r1, [sp, #16]
 8010d76:	490a      	ldr	r1, [pc, #40]	@ (8010da0 <siprintf+0x40>)
 8010d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d7c:	9105      	str	r1, [sp, #20]
 8010d7e:	2400      	movs	r4, #0
 8010d80:	a902      	add	r1, sp, #8
 8010d82:	6800      	ldr	r0, [r0, #0]
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010d88:	f000 fa8e 	bl	80112a8 <_svfiprintf_r>
 8010d8c:	9b02      	ldr	r3, [sp, #8]
 8010d8e:	701c      	strb	r4, [r3, #0]
 8010d90:	b01d      	add	sp, #116	@ 0x74
 8010d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d96:	b003      	add	sp, #12
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	20000298 	.word	0x20000298
 8010da0:	ffff0208 	.word	0xffff0208

08010da4 <__sread>:
 8010da4:	b510      	push	{r4, lr}
 8010da6:	460c      	mov	r4, r1
 8010da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dac:	f000 f940 	bl	8011030 <_read_r>
 8010db0:	2800      	cmp	r0, #0
 8010db2:	bfab      	itete	ge
 8010db4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010db6:	89a3      	ldrhlt	r3, [r4, #12]
 8010db8:	181b      	addge	r3, r3, r0
 8010dba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010dbe:	bfac      	ite	ge
 8010dc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010dc2:	81a3      	strhlt	r3, [r4, #12]
 8010dc4:	bd10      	pop	{r4, pc}

08010dc6 <__swrite>:
 8010dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dca:	461f      	mov	r7, r3
 8010dcc:	898b      	ldrh	r3, [r1, #12]
 8010dce:	05db      	lsls	r3, r3, #23
 8010dd0:	4605      	mov	r5, r0
 8010dd2:	460c      	mov	r4, r1
 8010dd4:	4616      	mov	r6, r2
 8010dd6:	d505      	bpl.n	8010de4 <__swrite+0x1e>
 8010dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ddc:	2302      	movs	r3, #2
 8010dde:	2200      	movs	r2, #0
 8010de0:	f000 f914 	bl	801100c <_lseek_r>
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010dee:	81a3      	strh	r3, [r4, #12]
 8010df0:	4632      	mov	r2, r6
 8010df2:	463b      	mov	r3, r7
 8010df4:	4628      	mov	r0, r5
 8010df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfa:	f000 b93b 	b.w	8011074 <_write_r>

08010dfe <__sseek>:
 8010dfe:	b510      	push	{r4, lr}
 8010e00:	460c      	mov	r4, r1
 8010e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e06:	f000 f901 	bl	801100c <_lseek_r>
 8010e0a:	1c43      	adds	r3, r0, #1
 8010e0c:	89a3      	ldrh	r3, [r4, #12]
 8010e0e:	bf15      	itete	ne
 8010e10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010e12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010e16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010e1a:	81a3      	strheq	r3, [r4, #12]
 8010e1c:	bf18      	it	ne
 8010e1e:	81a3      	strhne	r3, [r4, #12]
 8010e20:	bd10      	pop	{r4, pc}

08010e22 <__sclose>:
 8010e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e26:	f000 b883 	b.w	8010f30 <_close_r>

08010e2a <memset>:
 8010e2a:	4402      	add	r2, r0
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d100      	bne.n	8010e34 <memset+0xa>
 8010e32:	4770      	bx	lr
 8010e34:	f803 1b01 	strb.w	r1, [r3], #1
 8010e38:	e7f9      	b.n	8010e2e <memset+0x4>

08010e3a <strchr>:
 8010e3a:	b2c9      	uxtb	r1, r1
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e44:	b112      	cbz	r2, 8010e4c <strchr+0x12>
 8010e46:	428a      	cmp	r2, r1
 8010e48:	d1f9      	bne.n	8010e3e <strchr+0x4>
 8010e4a:	4770      	bx	lr
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	bf18      	it	ne
 8010e50:	2000      	movne	r0, #0
 8010e52:	4770      	bx	lr

08010e54 <strncmp>:
 8010e54:	b510      	push	{r4, lr}
 8010e56:	b16a      	cbz	r2, 8010e74 <strncmp+0x20>
 8010e58:	3901      	subs	r1, #1
 8010e5a:	1884      	adds	r4, r0, r2
 8010e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d103      	bne.n	8010e70 <strncmp+0x1c>
 8010e68:	42a0      	cmp	r0, r4
 8010e6a:	d001      	beq.n	8010e70 <strncmp+0x1c>
 8010e6c:	2a00      	cmp	r2, #0
 8010e6e:	d1f5      	bne.n	8010e5c <strncmp+0x8>
 8010e70:	1ad0      	subs	r0, r2, r3
 8010e72:	bd10      	pop	{r4, pc}
 8010e74:	4610      	mov	r0, r2
 8010e76:	e7fc      	b.n	8010e72 <strncmp+0x1e>

08010e78 <strtok>:
 8010e78:	4b16      	ldr	r3, [pc, #88]	@ (8010ed4 <strtok+0x5c>)
 8010e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e7e:	681f      	ldr	r7, [r3, #0]
 8010e80:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010e82:	4605      	mov	r5, r0
 8010e84:	460e      	mov	r6, r1
 8010e86:	b9ec      	cbnz	r4, 8010ec4 <strtok+0x4c>
 8010e88:	2050      	movs	r0, #80	@ 0x50
 8010e8a:	f7ff fd65 	bl	8010958 <malloc>
 8010e8e:	4602      	mov	r2, r0
 8010e90:	6478      	str	r0, [r7, #68]	@ 0x44
 8010e92:	b920      	cbnz	r0, 8010e9e <strtok+0x26>
 8010e94:	4b10      	ldr	r3, [pc, #64]	@ (8010ed8 <strtok+0x60>)
 8010e96:	4811      	ldr	r0, [pc, #68]	@ (8010edc <strtok+0x64>)
 8010e98:	215b      	movs	r1, #91	@ 0x5b
 8010e9a:	f000 f941 	bl	8011120 <__assert_func>
 8010e9e:	e9c0 4400 	strd	r4, r4, [r0]
 8010ea2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010ea6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010eaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010eae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010eb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010eb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010eba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010ebe:	6184      	str	r4, [r0, #24]
 8010ec0:	7704      	strb	r4, [r0, #28]
 8010ec2:	6244      	str	r4, [r0, #36]	@ 0x24
 8010ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	4628      	mov	r0, r5
 8010eca:	2301      	movs	r3, #1
 8010ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed0:	f000 b806 	b.w	8010ee0 <__strtok_r>
 8010ed4:	20000298 	.word	0x20000298
 8010ed8:	08012aad 	.word	0x08012aad
 8010edc:	08012ac4 	.word	0x08012ac4

08010ee0 <__strtok_r>:
 8010ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	b908      	cbnz	r0, 8010eea <__strtok_r+0xa>
 8010ee6:	6814      	ldr	r4, [r2, #0]
 8010ee8:	b144      	cbz	r4, 8010efc <__strtok_r+0x1c>
 8010eea:	4620      	mov	r0, r4
 8010eec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010ef0:	460f      	mov	r7, r1
 8010ef2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010ef6:	b91e      	cbnz	r6, 8010f00 <__strtok_r+0x20>
 8010ef8:	b965      	cbnz	r5, 8010f14 <__strtok_r+0x34>
 8010efa:	6015      	str	r5, [r2, #0]
 8010efc:	2000      	movs	r0, #0
 8010efe:	e005      	b.n	8010f0c <__strtok_r+0x2c>
 8010f00:	42b5      	cmp	r5, r6
 8010f02:	d1f6      	bne.n	8010ef2 <__strtok_r+0x12>
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1f0      	bne.n	8010eea <__strtok_r+0xa>
 8010f08:	6014      	str	r4, [r2, #0]
 8010f0a:	7003      	strb	r3, [r0, #0]
 8010f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f0e:	461c      	mov	r4, r3
 8010f10:	e00c      	b.n	8010f2c <__strtok_r+0x4c>
 8010f12:	b91d      	cbnz	r5, 8010f1c <__strtok_r+0x3c>
 8010f14:	4627      	mov	r7, r4
 8010f16:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010f1a:	460e      	mov	r6, r1
 8010f1c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010f20:	42ab      	cmp	r3, r5
 8010f22:	d1f6      	bne.n	8010f12 <__strtok_r+0x32>
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d0f2      	beq.n	8010f0e <__strtok_r+0x2e>
 8010f28:	2300      	movs	r3, #0
 8010f2a:	703b      	strb	r3, [r7, #0]
 8010f2c:	6014      	str	r4, [r2, #0]
 8010f2e:	e7ed      	b.n	8010f0c <__strtok_r+0x2c>

08010f30 <_close_r>:
 8010f30:	b538      	push	{r3, r4, r5, lr}
 8010f32:	4d06      	ldr	r5, [pc, #24]	@ (8010f4c <_close_r+0x1c>)
 8010f34:	2300      	movs	r3, #0
 8010f36:	4604      	mov	r4, r0
 8010f38:	4608      	mov	r0, r1
 8010f3a:	602b      	str	r3, [r5, #0]
 8010f3c:	f7f1 fe62 	bl	8002c04 <_close>
 8010f40:	1c43      	adds	r3, r0, #1
 8010f42:	d102      	bne.n	8010f4a <_close_r+0x1a>
 8010f44:	682b      	ldr	r3, [r5, #0]
 8010f46:	b103      	cbz	r3, 8010f4a <_close_r+0x1a>
 8010f48:	6023      	str	r3, [r4, #0]
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	20011654 	.word	0x20011654

08010f50 <_reclaim_reent>:
 8010f50:	4b2d      	ldr	r3, [pc, #180]	@ (8011008 <_reclaim_reent+0xb8>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4283      	cmp	r3, r0
 8010f56:	b570      	push	{r4, r5, r6, lr}
 8010f58:	4604      	mov	r4, r0
 8010f5a:	d053      	beq.n	8011004 <_reclaim_reent+0xb4>
 8010f5c:	69c3      	ldr	r3, [r0, #28]
 8010f5e:	b31b      	cbz	r3, 8010fa8 <_reclaim_reent+0x58>
 8010f60:	68db      	ldr	r3, [r3, #12]
 8010f62:	b163      	cbz	r3, 8010f7e <_reclaim_reent+0x2e>
 8010f64:	2500      	movs	r5, #0
 8010f66:	69e3      	ldr	r3, [r4, #28]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	5959      	ldr	r1, [r3, r5]
 8010f6c:	b9b1      	cbnz	r1, 8010f9c <_reclaim_reent+0x4c>
 8010f6e:	3504      	adds	r5, #4
 8010f70:	2d80      	cmp	r5, #128	@ 0x80
 8010f72:	d1f8      	bne.n	8010f66 <_reclaim_reent+0x16>
 8010f74:	69e3      	ldr	r3, [r4, #28]
 8010f76:	4620      	mov	r0, r4
 8010f78:	68d9      	ldr	r1, [r3, #12]
 8010f7a:	f000 f8ef 	bl	801115c <_free_r>
 8010f7e:	69e3      	ldr	r3, [r4, #28]
 8010f80:	6819      	ldr	r1, [r3, #0]
 8010f82:	b111      	cbz	r1, 8010f8a <_reclaim_reent+0x3a>
 8010f84:	4620      	mov	r0, r4
 8010f86:	f000 f8e9 	bl	801115c <_free_r>
 8010f8a:	69e3      	ldr	r3, [r4, #28]
 8010f8c:	689d      	ldr	r5, [r3, #8]
 8010f8e:	b15d      	cbz	r5, 8010fa8 <_reclaim_reent+0x58>
 8010f90:	4629      	mov	r1, r5
 8010f92:	4620      	mov	r0, r4
 8010f94:	682d      	ldr	r5, [r5, #0]
 8010f96:	f000 f8e1 	bl	801115c <_free_r>
 8010f9a:	e7f8      	b.n	8010f8e <_reclaim_reent+0x3e>
 8010f9c:	680e      	ldr	r6, [r1, #0]
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	f000 f8dc 	bl	801115c <_free_r>
 8010fa4:	4631      	mov	r1, r6
 8010fa6:	e7e1      	b.n	8010f6c <_reclaim_reent+0x1c>
 8010fa8:	6961      	ldr	r1, [r4, #20]
 8010faa:	b111      	cbz	r1, 8010fb2 <_reclaim_reent+0x62>
 8010fac:	4620      	mov	r0, r4
 8010fae:	f000 f8d5 	bl	801115c <_free_r>
 8010fb2:	69e1      	ldr	r1, [r4, #28]
 8010fb4:	b111      	cbz	r1, 8010fbc <_reclaim_reent+0x6c>
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f000 f8d0 	bl	801115c <_free_r>
 8010fbc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010fbe:	b111      	cbz	r1, 8010fc6 <_reclaim_reent+0x76>
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	f000 f8cb 	bl	801115c <_free_r>
 8010fc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010fc8:	b111      	cbz	r1, 8010fd0 <_reclaim_reent+0x80>
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f000 f8c6 	bl	801115c <_free_r>
 8010fd0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010fd2:	b111      	cbz	r1, 8010fda <_reclaim_reent+0x8a>
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f000 f8c1 	bl	801115c <_free_r>
 8010fda:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010fdc:	b111      	cbz	r1, 8010fe4 <_reclaim_reent+0x94>
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f000 f8bc 	bl	801115c <_free_r>
 8010fe4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010fe6:	b111      	cbz	r1, 8010fee <_reclaim_reent+0x9e>
 8010fe8:	4620      	mov	r0, r4
 8010fea:	f000 f8b7 	bl	801115c <_free_r>
 8010fee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010ff0:	b111      	cbz	r1, 8010ff8 <_reclaim_reent+0xa8>
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f000 f8b2 	bl	801115c <_free_r>
 8010ff8:	6a23      	ldr	r3, [r4, #32]
 8010ffa:	b11b      	cbz	r3, 8011004 <_reclaim_reent+0xb4>
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011002:	4718      	bx	r3
 8011004:	bd70      	pop	{r4, r5, r6, pc}
 8011006:	bf00      	nop
 8011008:	20000298 	.word	0x20000298

0801100c <_lseek_r>:
 801100c:	b538      	push	{r3, r4, r5, lr}
 801100e:	4d07      	ldr	r5, [pc, #28]	@ (801102c <_lseek_r+0x20>)
 8011010:	4604      	mov	r4, r0
 8011012:	4608      	mov	r0, r1
 8011014:	4611      	mov	r1, r2
 8011016:	2200      	movs	r2, #0
 8011018:	602a      	str	r2, [r5, #0]
 801101a:	461a      	mov	r2, r3
 801101c:	f7f1 fe19 	bl	8002c52 <_lseek>
 8011020:	1c43      	adds	r3, r0, #1
 8011022:	d102      	bne.n	801102a <_lseek_r+0x1e>
 8011024:	682b      	ldr	r3, [r5, #0]
 8011026:	b103      	cbz	r3, 801102a <_lseek_r+0x1e>
 8011028:	6023      	str	r3, [r4, #0]
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	20011654 	.word	0x20011654

08011030 <_read_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4d07      	ldr	r5, [pc, #28]	@ (8011050 <_read_r+0x20>)
 8011034:	4604      	mov	r4, r0
 8011036:	4608      	mov	r0, r1
 8011038:	4611      	mov	r1, r2
 801103a:	2200      	movs	r2, #0
 801103c:	602a      	str	r2, [r5, #0]
 801103e:	461a      	mov	r2, r3
 8011040:	f7f1 fda7 	bl	8002b92 <_read>
 8011044:	1c43      	adds	r3, r0, #1
 8011046:	d102      	bne.n	801104e <_read_r+0x1e>
 8011048:	682b      	ldr	r3, [r5, #0]
 801104a:	b103      	cbz	r3, 801104e <_read_r+0x1e>
 801104c:	6023      	str	r3, [r4, #0]
 801104e:	bd38      	pop	{r3, r4, r5, pc}
 8011050:	20011654 	.word	0x20011654

08011054 <_sbrk_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d06      	ldr	r5, [pc, #24]	@ (8011070 <_sbrk_r+0x1c>)
 8011058:	2300      	movs	r3, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	602b      	str	r3, [r5, #0]
 8011060:	f7f1 fe04 	bl	8002c6c <_sbrk>
 8011064:	1c43      	adds	r3, r0, #1
 8011066:	d102      	bne.n	801106e <_sbrk_r+0x1a>
 8011068:	682b      	ldr	r3, [r5, #0]
 801106a:	b103      	cbz	r3, 801106e <_sbrk_r+0x1a>
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	bd38      	pop	{r3, r4, r5, pc}
 8011070:	20011654 	.word	0x20011654

08011074 <_write_r>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	4d07      	ldr	r5, [pc, #28]	@ (8011094 <_write_r+0x20>)
 8011078:	4604      	mov	r4, r0
 801107a:	4608      	mov	r0, r1
 801107c:	4611      	mov	r1, r2
 801107e:	2200      	movs	r2, #0
 8011080:	602a      	str	r2, [r5, #0]
 8011082:	461a      	mov	r2, r3
 8011084:	f7f1 fda2 	bl	8002bcc <_write>
 8011088:	1c43      	adds	r3, r0, #1
 801108a:	d102      	bne.n	8011092 <_write_r+0x1e>
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	b103      	cbz	r3, 8011092 <_write_r+0x1e>
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	bd38      	pop	{r3, r4, r5, pc}
 8011094:	20011654 	.word	0x20011654

08011098 <__errno>:
 8011098:	4b01      	ldr	r3, [pc, #4]	@ (80110a0 <__errno+0x8>)
 801109a:	6818      	ldr	r0, [r3, #0]
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	20000298 	.word	0x20000298

080110a4 <__libc_init_array>:
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	4d0d      	ldr	r5, [pc, #52]	@ (80110dc <__libc_init_array+0x38>)
 80110a8:	4c0d      	ldr	r4, [pc, #52]	@ (80110e0 <__libc_init_array+0x3c>)
 80110aa:	1b64      	subs	r4, r4, r5
 80110ac:	10a4      	asrs	r4, r4, #2
 80110ae:	2600      	movs	r6, #0
 80110b0:	42a6      	cmp	r6, r4
 80110b2:	d109      	bne.n	80110c8 <__libc_init_array+0x24>
 80110b4:	4d0b      	ldr	r5, [pc, #44]	@ (80110e4 <__libc_init_array+0x40>)
 80110b6:	4c0c      	ldr	r4, [pc, #48]	@ (80110e8 <__libc_init_array+0x44>)
 80110b8:	f000 ff30 	bl	8011f1c <_init>
 80110bc:	1b64      	subs	r4, r4, r5
 80110be:	10a4      	asrs	r4, r4, #2
 80110c0:	2600      	movs	r6, #0
 80110c2:	42a6      	cmp	r6, r4
 80110c4:	d105      	bne.n	80110d2 <__libc_init_array+0x2e>
 80110c6:	bd70      	pop	{r4, r5, r6, pc}
 80110c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80110cc:	4798      	blx	r3
 80110ce:	3601      	adds	r6, #1
 80110d0:	e7ee      	b.n	80110b0 <__libc_init_array+0xc>
 80110d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80110d6:	4798      	blx	r3
 80110d8:	3601      	adds	r6, #1
 80110da:	e7f2      	b.n	80110c2 <__libc_init_array+0x1e>
 80110dc:	08012b98 	.word	0x08012b98
 80110e0:	08012b98 	.word	0x08012b98
 80110e4:	08012b98 	.word	0x08012b98
 80110e8:	08012b9c 	.word	0x08012b9c

080110ec <__retarget_lock_init_recursive>:
 80110ec:	4770      	bx	lr

080110ee <__retarget_lock_acquire_recursive>:
 80110ee:	4770      	bx	lr

080110f0 <__retarget_lock_release_recursive>:
 80110f0:	4770      	bx	lr

080110f2 <strcpy>:
 80110f2:	4603      	mov	r3, r0
 80110f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110f8:	f803 2b01 	strb.w	r2, [r3], #1
 80110fc:	2a00      	cmp	r2, #0
 80110fe:	d1f9      	bne.n	80110f4 <strcpy+0x2>
 8011100:	4770      	bx	lr

08011102 <memcpy>:
 8011102:	440a      	add	r2, r1
 8011104:	4291      	cmp	r1, r2
 8011106:	f100 33ff 	add.w	r3, r0, #4294967295
 801110a:	d100      	bne.n	801110e <memcpy+0xc>
 801110c:	4770      	bx	lr
 801110e:	b510      	push	{r4, lr}
 8011110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011118:	4291      	cmp	r1, r2
 801111a:	d1f9      	bne.n	8011110 <memcpy+0xe>
 801111c:	bd10      	pop	{r4, pc}
	...

08011120 <__assert_func>:
 8011120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011122:	4614      	mov	r4, r2
 8011124:	461a      	mov	r2, r3
 8011126:	4b09      	ldr	r3, [pc, #36]	@ (801114c <__assert_func+0x2c>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4605      	mov	r5, r0
 801112c:	68d8      	ldr	r0, [r3, #12]
 801112e:	b14c      	cbz	r4, 8011144 <__assert_func+0x24>
 8011130:	4b07      	ldr	r3, [pc, #28]	@ (8011150 <__assert_func+0x30>)
 8011132:	9100      	str	r1, [sp, #0]
 8011134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011138:	4906      	ldr	r1, [pc, #24]	@ (8011154 <__assert_func+0x34>)
 801113a:	462b      	mov	r3, r5
 801113c:	f000 fbe8 	bl	8011910 <fiprintf>
 8011140:	f000 fc12 	bl	8011968 <abort>
 8011144:	4b04      	ldr	r3, [pc, #16]	@ (8011158 <__assert_func+0x38>)
 8011146:	461c      	mov	r4, r3
 8011148:	e7f3      	b.n	8011132 <__assert_func+0x12>
 801114a:	bf00      	nop
 801114c:	20000298 	.word	0x20000298
 8011150:	08012b1e 	.word	0x08012b1e
 8011154:	08012b2b 	.word	0x08012b2b
 8011158:	08012b59 	.word	0x08012b59

0801115c <_free_r>:
 801115c:	b538      	push	{r3, r4, r5, lr}
 801115e:	4605      	mov	r5, r0
 8011160:	2900      	cmp	r1, #0
 8011162:	d041      	beq.n	80111e8 <_free_r+0x8c>
 8011164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011168:	1f0c      	subs	r4, r1, #4
 801116a:	2b00      	cmp	r3, #0
 801116c:	bfb8      	it	lt
 801116e:	18e4      	addlt	r4, r4, r3
 8011170:	f7ff fca4 	bl	8010abc <__malloc_lock>
 8011174:	4a1d      	ldr	r2, [pc, #116]	@ (80111ec <_free_r+0x90>)
 8011176:	6813      	ldr	r3, [r2, #0]
 8011178:	b933      	cbnz	r3, 8011188 <_free_r+0x2c>
 801117a:	6063      	str	r3, [r4, #4]
 801117c:	6014      	str	r4, [r2, #0]
 801117e:	4628      	mov	r0, r5
 8011180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011184:	f7ff bca0 	b.w	8010ac8 <__malloc_unlock>
 8011188:	42a3      	cmp	r3, r4
 801118a:	d908      	bls.n	801119e <_free_r+0x42>
 801118c:	6820      	ldr	r0, [r4, #0]
 801118e:	1821      	adds	r1, r4, r0
 8011190:	428b      	cmp	r3, r1
 8011192:	bf01      	itttt	eq
 8011194:	6819      	ldreq	r1, [r3, #0]
 8011196:	685b      	ldreq	r3, [r3, #4]
 8011198:	1809      	addeq	r1, r1, r0
 801119a:	6021      	streq	r1, [r4, #0]
 801119c:	e7ed      	b.n	801117a <_free_r+0x1e>
 801119e:	461a      	mov	r2, r3
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	b10b      	cbz	r3, 80111a8 <_free_r+0x4c>
 80111a4:	42a3      	cmp	r3, r4
 80111a6:	d9fa      	bls.n	801119e <_free_r+0x42>
 80111a8:	6811      	ldr	r1, [r2, #0]
 80111aa:	1850      	adds	r0, r2, r1
 80111ac:	42a0      	cmp	r0, r4
 80111ae:	d10b      	bne.n	80111c8 <_free_r+0x6c>
 80111b0:	6820      	ldr	r0, [r4, #0]
 80111b2:	4401      	add	r1, r0
 80111b4:	1850      	adds	r0, r2, r1
 80111b6:	4283      	cmp	r3, r0
 80111b8:	6011      	str	r1, [r2, #0]
 80111ba:	d1e0      	bne.n	801117e <_free_r+0x22>
 80111bc:	6818      	ldr	r0, [r3, #0]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	6053      	str	r3, [r2, #4]
 80111c2:	4408      	add	r0, r1
 80111c4:	6010      	str	r0, [r2, #0]
 80111c6:	e7da      	b.n	801117e <_free_r+0x22>
 80111c8:	d902      	bls.n	80111d0 <_free_r+0x74>
 80111ca:	230c      	movs	r3, #12
 80111cc:	602b      	str	r3, [r5, #0]
 80111ce:	e7d6      	b.n	801117e <_free_r+0x22>
 80111d0:	6820      	ldr	r0, [r4, #0]
 80111d2:	1821      	adds	r1, r4, r0
 80111d4:	428b      	cmp	r3, r1
 80111d6:	bf04      	itt	eq
 80111d8:	6819      	ldreq	r1, [r3, #0]
 80111da:	685b      	ldreq	r3, [r3, #4]
 80111dc:	6063      	str	r3, [r4, #4]
 80111de:	bf04      	itt	eq
 80111e0:	1809      	addeq	r1, r1, r0
 80111e2:	6021      	streq	r1, [r4, #0]
 80111e4:	6054      	str	r4, [r2, #4]
 80111e6:	e7ca      	b.n	801117e <_free_r+0x22>
 80111e8:	bd38      	pop	{r3, r4, r5, pc}
 80111ea:	bf00      	nop
 80111ec:	20011514 	.word	0x20011514

080111f0 <__ssputs_r>:
 80111f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111f4:	688e      	ldr	r6, [r1, #8]
 80111f6:	461f      	mov	r7, r3
 80111f8:	42be      	cmp	r6, r7
 80111fa:	680b      	ldr	r3, [r1, #0]
 80111fc:	4682      	mov	sl, r0
 80111fe:	460c      	mov	r4, r1
 8011200:	4690      	mov	r8, r2
 8011202:	d82d      	bhi.n	8011260 <__ssputs_r+0x70>
 8011204:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011208:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801120c:	d026      	beq.n	801125c <__ssputs_r+0x6c>
 801120e:	6965      	ldr	r5, [r4, #20]
 8011210:	6909      	ldr	r1, [r1, #16]
 8011212:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011216:	eba3 0901 	sub.w	r9, r3, r1
 801121a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801121e:	1c7b      	adds	r3, r7, #1
 8011220:	444b      	add	r3, r9
 8011222:	106d      	asrs	r5, r5, #1
 8011224:	429d      	cmp	r5, r3
 8011226:	bf38      	it	cc
 8011228:	461d      	movcc	r5, r3
 801122a:	0553      	lsls	r3, r2, #21
 801122c:	d527      	bpl.n	801127e <__ssputs_r+0x8e>
 801122e:	4629      	mov	r1, r5
 8011230:	f7ff fbc4 	bl	80109bc <_malloc_r>
 8011234:	4606      	mov	r6, r0
 8011236:	b360      	cbz	r0, 8011292 <__ssputs_r+0xa2>
 8011238:	6921      	ldr	r1, [r4, #16]
 801123a:	464a      	mov	r2, r9
 801123c:	f7ff ff61 	bl	8011102 <memcpy>
 8011240:	89a3      	ldrh	r3, [r4, #12]
 8011242:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801124a:	81a3      	strh	r3, [r4, #12]
 801124c:	6126      	str	r6, [r4, #16]
 801124e:	6165      	str	r5, [r4, #20]
 8011250:	444e      	add	r6, r9
 8011252:	eba5 0509 	sub.w	r5, r5, r9
 8011256:	6026      	str	r6, [r4, #0]
 8011258:	60a5      	str	r5, [r4, #8]
 801125a:	463e      	mov	r6, r7
 801125c:	42be      	cmp	r6, r7
 801125e:	d900      	bls.n	8011262 <__ssputs_r+0x72>
 8011260:	463e      	mov	r6, r7
 8011262:	6820      	ldr	r0, [r4, #0]
 8011264:	4632      	mov	r2, r6
 8011266:	4641      	mov	r1, r8
 8011268:	f000 fb64 	bl	8011934 <memmove>
 801126c:	68a3      	ldr	r3, [r4, #8]
 801126e:	1b9b      	subs	r3, r3, r6
 8011270:	60a3      	str	r3, [r4, #8]
 8011272:	6823      	ldr	r3, [r4, #0]
 8011274:	4433      	add	r3, r6
 8011276:	6023      	str	r3, [r4, #0]
 8011278:	2000      	movs	r0, #0
 801127a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801127e:	462a      	mov	r2, r5
 8011280:	f000 fb79 	bl	8011976 <_realloc_r>
 8011284:	4606      	mov	r6, r0
 8011286:	2800      	cmp	r0, #0
 8011288:	d1e0      	bne.n	801124c <__ssputs_r+0x5c>
 801128a:	6921      	ldr	r1, [r4, #16]
 801128c:	4650      	mov	r0, sl
 801128e:	f7ff ff65 	bl	801115c <_free_r>
 8011292:	230c      	movs	r3, #12
 8011294:	f8ca 3000 	str.w	r3, [sl]
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801129e:	81a3      	strh	r3, [r4, #12]
 80112a0:	f04f 30ff 	mov.w	r0, #4294967295
 80112a4:	e7e9      	b.n	801127a <__ssputs_r+0x8a>
	...

080112a8 <_svfiprintf_r>:
 80112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	4698      	mov	r8, r3
 80112ae:	898b      	ldrh	r3, [r1, #12]
 80112b0:	061b      	lsls	r3, r3, #24
 80112b2:	b09d      	sub	sp, #116	@ 0x74
 80112b4:	4607      	mov	r7, r0
 80112b6:	460d      	mov	r5, r1
 80112b8:	4614      	mov	r4, r2
 80112ba:	d510      	bpl.n	80112de <_svfiprintf_r+0x36>
 80112bc:	690b      	ldr	r3, [r1, #16]
 80112be:	b973      	cbnz	r3, 80112de <_svfiprintf_r+0x36>
 80112c0:	2140      	movs	r1, #64	@ 0x40
 80112c2:	f7ff fb7b 	bl	80109bc <_malloc_r>
 80112c6:	6028      	str	r0, [r5, #0]
 80112c8:	6128      	str	r0, [r5, #16]
 80112ca:	b930      	cbnz	r0, 80112da <_svfiprintf_r+0x32>
 80112cc:	230c      	movs	r3, #12
 80112ce:	603b      	str	r3, [r7, #0]
 80112d0:	f04f 30ff 	mov.w	r0, #4294967295
 80112d4:	b01d      	add	sp, #116	@ 0x74
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112da:	2340      	movs	r3, #64	@ 0x40
 80112dc:	616b      	str	r3, [r5, #20]
 80112de:	2300      	movs	r3, #0
 80112e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112e2:	2320      	movs	r3, #32
 80112e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80112ec:	2330      	movs	r3, #48	@ 0x30
 80112ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801148c <_svfiprintf_r+0x1e4>
 80112f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112f6:	f04f 0901 	mov.w	r9, #1
 80112fa:	4623      	mov	r3, r4
 80112fc:	469a      	mov	sl, r3
 80112fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011302:	b10a      	cbz	r2, 8011308 <_svfiprintf_r+0x60>
 8011304:	2a25      	cmp	r2, #37	@ 0x25
 8011306:	d1f9      	bne.n	80112fc <_svfiprintf_r+0x54>
 8011308:	ebba 0b04 	subs.w	fp, sl, r4
 801130c:	d00b      	beq.n	8011326 <_svfiprintf_r+0x7e>
 801130e:	465b      	mov	r3, fp
 8011310:	4622      	mov	r2, r4
 8011312:	4629      	mov	r1, r5
 8011314:	4638      	mov	r0, r7
 8011316:	f7ff ff6b 	bl	80111f0 <__ssputs_r>
 801131a:	3001      	adds	r0, #1
 801131c:	f000 80a7 	beq.w	801146e <_svfiprintf_r+0x1c6>
 8011320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011322:	445a      	add	r2, fp
 8011324:	9209      	str	r2, [sp, #36]	@ 0x24
 8011326:	f89a 3000 	ldrb.w	r3, [sl]
 801132a:	2b00      	cmp	r3, #0
 801132c:	f000 809f 	beq.w	801146e <_svfiprintf_r+0x1c6>
 8011330:	2300      	movs	r3, #0
 8011332:	f04f 32ff 	mov.w	r2, #4294967295
 8011336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801133a:	f10a 0a01 	add.w	sl, sl, #1
 801133e:	9304      	str	r3, [sp, #16]
 8011340:	9307      	str	r3, [sp, #28]
 8011342:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011346:	931a      	str	r3, [sp, #104]	@ 0x68
 8011348:	4654      	mov	r4, sl
 801134a:	2205      	movs	r2, #5
 801134c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011350:	484e      	ldr	r0, [pc, #312]	@ (801148c <_svfiprintf_r+0x1e4>)
 8011352:	f7ee ff45 	bl	80001e0 <memchr>
 8011356:	9a04      	ldr	r2, [sp, #16]
 8011358:	b9d8      	cbnz	r0, 8011392 <_svfiprintf_r+0xea>
 801135a:	06d0      	lsls	r0, r2, #27
 801135c:	bf44      	itt	mi
 801135e:	2320      	movmi	r3, #32
 8011360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011364:	0711      	lsls	r1, r2, #28
 8011366:	bf44      	itt	mi
 8011368:	232b      	movmi	r3, #43	@ 0x2b
 801136a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801136e:	f89a 3000 	ldrb.w	r3, [sl]
 8011372:	2b2a      	cmp	r3, #42	@ 0x2a
 8011374:	d015      	beq.n	80113a2 <_svfiprintf_r+0xfa>
 8011376:	9a07      	ldr	r2, [sp, #28]
 8011378:	4654      	mov	r4, sl
 801137a:	2000      	movs	r0, #0
 801137c:	f04f 0c0a 	mov.w	ip, #10
 8011380:	4621      	mov	r1, r4
 8011382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011386:	3b30      	subs	r3, #48	@ 0x30
 8011388:	2b09      	cmp	r3, #9
 801138a:	d94b      	bls.n	8011424 <_svfiprintf_r+0x17c>
 801138c:	b1b0      	cbz	r0, 80113bc <_svfiprintf_r+0x114>
 801138e:	9207      	str	r2, [sp, #28]
 8011390:	e014      	b.n	80113bc <_svfiprintf_r+0x114>
 8011392:	eba0 0308 	sub.w	r3, r0, r8
 8011396:	fa09 f303 	lsl.w	r3, r9, r3
 801139a:	4313      	orrs	r3, r2
 801139c:	9304      	str	r3, [sp, #16]
 801139e:	46a2      	mov	sl, r4
 80113a0:	e7d2      	b.n	8011348 <_svfiprintf_r+0xa0>
 80113a2:	9b03      	ldr	r3, [sp, #12]
 80113a4:	1d19      	adds	r1, r3, #4
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	9103      	str	r1, [sp, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	bfbb      	ittet	lt
 80113ae:	425b      	neglt	r3, r3
 80113b0:	f042 0202 	orrlt.w	r2, r2, #2
 80113b4:	9307      	strge	r3, [sp, #28]
 80113b6:	9307      	strlt	r3, [sp, #28]
 80113b8:	bfb8      	it	lt
 80113ba:	9204      	strlt	r2, [sp, #16]
 80113bc:	7823      	ldrb	r3, [r4, #0]
 80113be:	2b2e      	cmp	r3, #46	@ 0x2e
 80113c0:	d10a      	bne.n	80113d8 <_svfiprintf_r+0x130>
 80113c2:	7863      	ldrb	r3, [r4, #1]
 80113c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80113c6:	d132      	bne.n	801142e <_svfiprintf_r+0x186>
 80113c8:	9b03      	ldr	r3, [sp, #12]
 80113ca:	1d1a      	adds	r2, r3, #4
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	9203      	str	r2, [sp, #12]
 80113d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113d4:	3402      	adds	r4, #2
 80113d6:	9305      	str	r3, [sp, #20]
 80113d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801149c <_svfiprintf_r+0x1f4>
 80113dc:	7821      	ldrb	r1, [r4, #0]
 80113de:	2203      	movs	r2, #3
 80113e0:	4650      	mov	r0, sl
 80113e2:	f7ee fefd 	bl	80001e0 <memchr>
 80113e6:	b138      	cbz	r0, 80113f8 <_svfiprintf_r+0x150>
 80113e8:	9b04      	ldr	r3, [sp, #16]
 80113ea:	eba0 000a 	sub.w	r0, r0, sl
 80113ee:	2240      	movs	r2, #64	@ 0x40
 80113f0:	4082      	lsls	r2, r0
 80113f2:	4313      	orrs	r3, r2
 80113f4:	3401      	adds	r4, #1
 80113f6:	9304      	str	r3, [sp, #16]
 80113f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113fc:	4824      	ldr	r0, [pc, #144]	@ (8011490 <_svfiprintf_r+0x1e8>)
 80113fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011402:	2206      	movs	r2, #6
 8011404:	f7ee feec 	bl	80001e0 <memchr>
 8011408:	2800      	cmp	r0, #0
 801140a:	d036      	beq.n	801147a <_svfiprintf_r+0x1d2>
 801140c:	4b21      	ldr	r3, [pc, #132]	@ (8011494 <_svfiprintf_r+0x1ec>)
 801140e:	bb1b      	cbnz	r3, 8011458 <_svfiprintf_r+0x1b0>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	3307      	adds	r3, #7
 8011414:	f023 0307 	bic.w	r3, r3, #7
 8011418:	3308      	adds	r3, #8
 801141a:	9303      	str	r3, [sp, #12]
 801141c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801141e:	4433      	add	r3, r6
 8011420:	9309      	str	r3, [sp, #36]	@ 0x24
 8011422:	e76a      	b.n	80112fa <_svfiprintf_r+0x52>
 8011424:	fb0c 3202 	mla	r2, ip, r2, r3
 8011428:	460c      	mov	r4, r1
 801142a:	2001      	movs	r0, #1
 801142c:	e7a8      	b.n	8011380 <_svfiprintf_r+0xd8>
 801142e:	2300      	movs	r3, #0
 8011430:	3401      	adds	r4, #1
 8011432:	9305      	str	r3, [sp, #20]
 8011434:	4619      	mov	r1, r3
 8011436:	f04f 0c0a 	mov.w	ip, #10
 801143a:	4620      	mov	r0, r4
 801143c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011440:	3a30      	subs	r2, #48	@ 0x30
 8011442:	2a09      	cmp	r2, #9
 8011444:	d903      	bls.n	801144e <_svfiprintf_r+0x1a6>
 8011446:	2b00      	cmp	r3, #0
 8011448:	d0c6      	beq.n	80113d8 <_svfiprintf_r+0x130>
 801144a:	9105      	str	r1, [sp, #20]
 801144c:	e7c4      	b.n	80113d8 <_svfiprintf_r+0x130>
 801144e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011452:	4604      	mov	r4, r0
 8011454:	2301      	movs	r3, #1
 8011456:	e7f0      	b.n	801143a <_svfiprintf_r+0x192>
 8011458:	ab03      	add	r3, sp, #12
 801145a:	9300      	str	r3, [sp, #0]
 801145c:	462a      	mov	r2, r5
 801145e:	4b0e      	ldr	r3, [pc, #56]	@ (8011498 <_svfiprintf_r+0x1f0>)
 8011460:	a904      	add	r1, sp, #16
 8011462:	4638      	mov	r0, r7
 8011464:	f3af 8000 	nop.w
 8011468:	1c42      	adds	r2, r0, #1
 801146a:	4606      	mov	r6, r0
 801146c:	d1d6      	bne.n	801141c <_svfiprintf_r+0x174>
 801146e:	89ab      	ldrh	r3, [r5, #12]
 8011470:	065b      	lsls	r3, r3, #25
 8011472:	f53f af2d 	bmi.w	80112d0 <_svfiprintf_r+0x28>
 8011476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011478:	e72c      	b.n	80112d4 <_svfiprintf_r+0x2c>
 801147a:	ab03      	add	r3, sp, #12
 801147c:	9300      	str	r3, [sp, #0]
 801147e:	462a      	mov	r2, r5
 8011480:	4b05      	ldr	r3, [pc, #20]	@ (8011498 <_svfiprintf_r+0x1f0>)
 8011482:	a904      	add	r1, sp, #16
 8011484:	4638      	mov	r0, r7
 8011486:	f000 f879 	bl	801157c <_printf_i>
 801148a:	e7ed      	b.n	8011468 <_svfiprintf_r+0x1c0>
 801148c:	08012b5a 	.word	0x08012b5a
 8011490:	08012b64 	.word	0x08012b64
 8011494:	00000000 	.word	0x00000000
 8011498:	080111f1 	.word	0x080111f1
 801149c:	08012b60 	.word	0x08012b60

080114a0 <_printf_common>:
 80114a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a4:	4616      	mov	r6, r2
 80114a6:	4698      	mov	r8, r3
 80114a8:	688a      	ldr	r2, [r1, #8]
 80114aa:	690b      	ldr	r3, [r1, #16]
 80114ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80114b0:	4293      	cmp	r3, r2
 80114b2:	bfb8      	it	lt
 80114b4:	4613      	movlt	r3, r2
 80114b6:	6033      	str	r3, [r6, #0]
 80114b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80114bc:	4607      	mov	r7, r0
 80114be:	460c      	mov	r4, r1
 80114c0:	b10a      	cbz	r2, 80114c6 <_printf_common+0x26>
 80114c2:	3301      	adds	r3, #1
 80114c4:	6033      	str	r3, [r6, #0]
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	0699      	lsls	r1, r3, #26
 80114ca:	bf42      	ittt	mi
 80114cc:	6833      	ldrmi	r3, [r6, #0]
 80114ce:	3302      	addmi	r3, #2
 80114d0:	6033      	strmi	r3, [r6, #0]
 80114d2:	6825      	ldr	r5, [r4, #0]
 80114d4:	f015 0506 	ands.w	r5, r5, #6
 80114d8:	d106      	bne.n	80114e8 <_printf_common+0x48>
 80114da:	f104 0a19 	add.w	sl, r4, #25
 80114de:	68e3      	ldr	r3, [r4, #12]
 80114e0:	6832      	ldr	r2, [r6, #0]
 80114e2:	1a9b      	subs	r3, r3, r2
 80114e4:	42ab      	cmp	r3, r5
 80114e6:	dc26      	bgt.n	8011536 <_printf_common+0x96>
 80114e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80114ec:	6822      	ldr	r2, [r4, #0]
 80114ee:	3b00      	subs	r3, #0
 80114f0:	bf18      	it	ne
 80114f2:	2301      	movne	r3, #1
 80114f4:	0692      	lsls	r2, r2, #26
 80114f6:	d42b      	bmi.n	8011550 <_printf_common+0xb0>
 80114f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114fc:	4641      	mov	r1, r8
 80114fe:	4638      	mov	r0, r7
 8011500:	47c8      	blx	r9
 8011502:	3001      	adds	r0, #1
 8011504:	d01e      	beq.n	8011544 <_printf_common+0xa4>
 8011506:	6823      	ldr	r3, [r4, #0]
 8011508:	6922      	ldr	r2, [r4, #16]
 801150a:	f003 0306 	and.w	r3, r3, #6
 801150e:	2b04      	cmp	r3, #4
 8011510:	bf02      	ittt	eq
 8011512:	68e5      	ldreq	r5, [r4, #12]
 8011514:	6833      	ldreq	r3, [r6, #0]
 8011516:	1aed      	subeq	r5, r5, r3
 8011518:	68a3      	ldr	r3, [r4, #8]
 801151a:	bf0c      	ite	eq
 801151c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011520:	2500      	movne	r5, #0
 8011522:	4293      	cmp	r3, r2
 8011524:	bfc4      	itt	gt
 8011526:	1a9b      	subgt	r3, r3, r2
 8011528:	18ed      	addgt	r5, r5, r3
 801152a:	2600      	movs	r6, #0
 801152c:	341a      	adds	r4, #26
 801152e:	42b5      	cmp	r5, r6
 8011530:	d11a      	bne.n	8011568 <_printf_common+0xc8>
 8011532:	2000      	movs	r0, #0
 8011534:	e008      	b.n	8011548 <_printf_common+0xa8>
 8011536:	2301      	movs	r3, #1
 8011538:	4652      	mov	r2, sl
 801153a:	4641      	mov	r1, r8
 801153c:	4638      	mov	r0, r7
 801153e:	47c8      	blx	r9
 8011540:	3001      	adds	r0, #1
 8011542:	d103      	bne.n	801154c <_printf_common+0xac>
 8011544:	f04f 30ff 	mov.w	r0, #4294967295
 8011548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801154c:	3501      	adds	r5, #1
 801154e:	e7c6      	b.n	80114de <_printf_common+0x3e>
 8011550:	18e1      	adds	r1, r4, r3
 8011552:	1c5a      	adds	r2, r3, #1
 8011554:	2030      	movs	r0, #48	@ 0x30
 8011556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801155a:	4422      	add	r2, r4
 801155c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011564:	3302      	adds	r3, #2
 8011566:	e7c7      	b.n	80114f8 <_printf_common+0x58>
 8011568:	2301      	movs	r3, #1
 801156a:	4622      	mov	r2, r4
 801156c:	4641      	mov	r1, r8
 801156e:	4638      	mov	r0, r7
 8011570:	47c8      	blx	r9
 8011572:	3001      	adds	r0, #1
 8011574:	d0e6      	beq.n	8011544 <_printf_common+0xa4>
 8011576:	3601      	adds	r6, #1
 8011578:	e7d9      	b.n	801152e <_printf_common+0x8e>
	...

0801157c <_printf_i>:
 801157c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011580:	7e0f      	ldrb	r7, [r1, #24]
 8011582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011584:	2f78      	cmp	r7, #120	@ 0x78
 8011586:	4691      	mov	r9, r2
 8011588:	4680      	mov	r8, r0
 801158a:	460c      	mov	r4, r1
 801158c:	469a      	mov	sl, r3
 801158e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011592:	d807      	bhi.n	80115a4 <_printf_i+0x28>
 8011594:	2f62      	cmp	r7, #98	@ 0x62
 8011596:	d80a      	bhi.n	80115ae <_printf_i+0x32>
 8011598:	2f00      	cmp	r7, #0
 801159a:	f000 80d1 	beq.w	8011740 <_printf_i+0x1c4>
 801159e:	2f58      	cmp	r7, #88	@ 0x58
 80115a0:	f000 80b8 	beq.w	8011714 <_printf_i+0x198>
 80115a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80115ac:	e03a      	b.n	8011624 <_printf_i+0xa8>
 80115ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80115b2:	2b15      	cmp	r3, #21
 80115b4:	d8f6      	bhi.n	80115a4 <_printf_i+0x28>
 80115b6:	a101      	add	r1, pc, #4	@ (adr r1, 80115bc <_printf_i+0x40>)
 80115b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115bc:	08011615 	.word	0x08011615
 80115c0:	08011629 	.word	0x08011629
 80115c4:	080115a5 	.word	0x080115a5
 80115c8:	080115a5 	.word	0x080115a5
 80115cc:	080115a5 	.word	0x080115a5
 80115d0:	080115a5 	.word	0x080115a5
 80115d4:	08011629 	.word	0x08011629
 80115d8:	080115a5 	.word	0x080115a5
 80115dc:	080115a5 	.word	0x080115a5
 80115e0:	080115a5 	.word	0x080115a5
 80115e4:	080115a5 	.word	0x080115a5
 80115e8:	08011727 	.word	0x08011727
 80115ec:	08011653 	.word	0x08011653
 80115f0:	080116e1 	.word	0x080116e1
 80115f4:	080115a5 	.word	0x080115a5
 80115f8:	080115a5 	.word	0x080115a5
 80115fc:	08011749 	.word	0x08011749
 8011600:	080115a5 	.word	0x080115a5
 8011604:	08011653 	.word	0x08011653
 8011608:	080115a5 	.word	0x080115a5
 801160c:	080115a5 	.word	0x080115a5
 8011610:	080116e9 	.word	0x080116e9
 8011614:	6833      	ldr	r3, [r6, #0]
 8011616:	1d1a      	adds	r2, r3, #4
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	6032      	str	r2, [r6, #0]
 801161c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011624:	2301      	movs	r3, #1
 8011626:	e09c      	b.n	8011762 <_printf_i+0x1e6>
 8011628:	6833      	ldr	r3, [r6, #0]
 801162a:	6820      	ldr	r0, [r4, #0]
 801162c:	1d19      	adds	r1, r3, #4
 801162e:	6031      	str	r1, [r6, #0]
 8011630:	0606      	lsls	r6, r0, #24
 8011632:	d501      	bpl.n	8011638 <_printf_i+0xbc>
 8011634:	681d      	ldr	r5, [r3, #0]
 8011636:	e003      	b.n	8011640 <_printf_i+0xc4>
 8011638:	0645      	lsls	r5, r0, #25
 801163a:	d5fb      	bpl.n	8011634 <_printf_i+0xb8>
 801163c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011640:	2d00      	cmp	r5, #0
 8011642:	da03      	bge.n	801164c <_printf_i+0xd0>
 8011644:	232d      	movs	r3, #45	@ 0x2d
 8011646:	426d      	negs	r5, r5
 8011648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801164c:	4858      	ldr	r0, [pc, #352]	@ (80117b0 <_printf_i+0x234>)
 801164e:	230a      	movs	r3, #10
 8011650:	e011      	b.n	8011676 <_printf_i+0xfa>
 8011652:	6821      	ldr	r1, [r4, #0]
 8011654:	6833      	ldr	r3, [r6, #0]
 8011656:	0608      	lsls	r0, r1, #24
 8011658:	f853 5b04 	ldr.w	r5, [r3], #4
 801165c:	d402      	bmi.n	8011664 <_printf_i+0xe8>
 801165e:	0649      	lsls	r1, r1, #25
 8011660:	bf48      	it	mi
 8011662:	b2ad      	uxthmi	r5, r5
 8011664:	2f6f      	cmp	r7, #111	@ 0x6f
 8011666:	4852      	ldr	r0, [pc, #328]	@ (80117b0 <_printf_i+0x234>)
 8011668:	6033      	str	r3, [r6, #0]
 801166a:	bf14      	ite	ne
 801166c:	230a      	movne	r3, #10
 801166e:	2308      	moveq	r3, #8
 8011670:	2100      	movs	r1, #0
 8011672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011676:	6866      	ldr	r6, [r4, #4]
 8011678:	60a6      	str	r6, [r4, #8]
 801167a:	2e00      	cmp	r6, #0
 801167c:	db05      	blt.n	801168a <_printf_i+0x10e>
 801167e:	6821      	ldr	r1, [r4, #0]
 8011680:	432e      	orrs	r6, r5
 8011682:	f021 0104 	bic.w	r1, r1, #4
 8011686:	6021      	str	r1, [r4, #0]
 8011688:	d04b      	beq.n	8011722 <_printf_i+0x1a6>
 801168a:	4616      	mov	r6, r2
 801168c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011690:	fb03 5711 	mls	r7, r3, r1, r5
 8011694:	5dc7      	ldrb	r7, [r0, r7]
 8011696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801169a:	462f      	mov	r7, r5
 801169c:	42bb      	cmp	r3, r7
 801169e:	460d      	mov	r5, r1
 80116a0:	d9f4      	bls.n	801168c <_printf_i+0x110>
 80116a2:	2b08      	cmp	r3, #8
 80116a4:	d10b      	bne.n	80116be <_printf_i+0x142>
 80116a6:	6823      	ldr	r3, [r4, #0]
 80116a8:	07df      	lsls	r7, r3, #31
 80116aa:	d508      	bpl.n	80116be <_printf_i+0x142>
 80116ac:	6923      	ldr	r3, [r4, #16]
 80116ae:	6861      	ldr	r1, [r4, #4]
 80116b0:	4299      	cmp	r1, r3
 80116b2:	bfde      	ittt	le
 80116b4:	2330      	movle	r3, #48	@ 0x30
 80116b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80116ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80116be:	1b92      	subs	r2, r2, r6
 80116c0:	6122      	str	r2, [r4, #16]
 80116c2:	f8cd a000 	str.w	sl, [sp]
 80116c6:	464b      	mov	r3, r9
 80116c8:	aa03      	add	r2, sp, #12
 80116ca:	4621      	mov	r1, r4
 80116cc:	4640      	mov	r0, r8
 80116ce:	f7ff fee7 	bl	80114a0 <_printf_common>
 80116d2:	3001      	adds	r0, #1
 80116d4:	d14a      	bne.n	801176c <_printf_i+0x1f0>
 80116d6:	f04f 30ff 	mov.w	r0, #4294967295
 80116da:	b004      	add	sp, #16
 80116dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116e0:	6823      	ldr	r3, [r4, #0]
 80116e2:	f043 0320 	orr.w	r3, r3, #32
 80116e6:	6023      	str	r3, [r4, #0]
 80116e8:	4832      	ldr	r0, [pc, #200]	@ (80117b4 <_printf_i+0x238>)
 80116ea:	2778      	movs	r7, #120	@ 0x78
 80116ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80116f0:	6823      	ldr	r3, [r4, #0]
 80116f2:	6831      	ldr	r1, [r6, #0]
 80116f4:	061f      	lsls	r7, r3, #24
 80116f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80116fa:	d402      	bmi.n	8011702 <_printf_i+0x186>
 80116fc:	065f      	lsls	r7, r3, #25
 80116fe:	bf48      	it	mi
 8011700:	b2ad      	uxthmi	r5, r5
 8011702:	6031      	str	r1, [r6, #0]
 8011704:	07d9      	lsls	r1, r3, #31
 8011706:	bf44      	itt	mi
 8011708:	f043 0320 	orrmi.w	r3, r3, #32
 801170c:	6023      	strmi	r3, [r4, #0]
 801170e:	b11d      	cbz	r5, 8011718 <_printf_i+0x19c>
 8011710:	2310      	movs	r3, #16
 8011712:	e7ad      	b.n	8011670 <_printf_i+0xf4>
 8011714:	4826      	ldr	r0, [pc, #152]	@ (80117b0 <_printf_i+0x234>)
 8011716:	e7e9      	b.n	80116ec <_printf_i+0x170>
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	f023 0320 	bic.w	r3, r3, #32
 801171e:	6023      	str	r3, [r4, #0]
 8011720:	e7f6      	b.n	8011710 <_printf_i+0x194>
 8011722:	4616      	mov	r6, r2
 8011724:	e7bd      	b.n	80116a2 <_printf_i+0x126>
 8011726:	6833      	ldr	r3, [r6, #0]
 8011728:	6825      	ldr	r5, [r4, #0]
 801172a:	6961      	ldr	r1, [r4, #20]
 801172c:	1d18      	adds	r0, r3, #4
 801172e:	6030      	str	r0, [r6, #0]
 8011730:	062e      	lsls	r6, r5, #24
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	d501      	bpl.n	801173a <_printf_i+0x1be>
 8011736:	6019      	str	r1, [r3, #0]
 8011738:	e002      	b.n	8011740 <_printf_i+0x1c4>
 801173a:	0668      	lsls	r0, r5, #25
 801173c:	d5fb      	bpl.n	8011736 <_printf_i+0x1ba>
 801173e:	8019      	strh	r1, [r3, #0]
 8011740:	2300      	movs	r3, #0
 8011742:	6123      	str	r3, [r4, #16]
 8011744:	4616      	mov	r6, r2
 8011746:	e7bc      	b.n	80116c2 <_printf_i+0x146>
 8011748:	6833      	ldr	r3, [r6, #0]
 801174a:	1d1a      	adds	r2, r3, #4
 801174c:	6032      	str	r2, [r6, #0]
 801174e:	681e      	ldr	r6, [r3, #0]
 8011750:	6862      	ldr	r2, [r4, #4]
 8011752:	2100      	movs	r1, #0
 8011754:	4630      	mov	r0, r6
 8011756:	f7ee fd43 	bl	80001e0 <memchr>
 801175a:	b108      	cbz	r0, 8011760 <_printf_i+0x1e4>
 801175c:	1b80      	subs	r0, r0, r6
 801175e:	6060      	str	r0, [r4, #4]
 8011760:	6863      	ldr	r3, [r4, #4]
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	2300      	movs	r3, #0
 8011766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801176a:	e7aa      	b.n	80116c2 <_printf_i+0x146>
 801176c:	6923      	ldr	r3, [r4, #16]
 801176e:	4632      	mov	r2, r6
 8011770:	4649      	mov	r1, r9
 8011772:	4640      	mov	r0, r8
 8011774:	47d0      	blx	sl
 8011776:	3001      	adds	r0, #1
 8011778:	d0ad      	beq.n	80116d6 <_printf_i+0x15a>
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	079b      	lsls	r3, r3, #30
 801177e:	d413      	bmi.n	80117a8 <_printf_i+0x22c>
 8011780:	68e0      	ldr	r0, [r4, #12]
 8011782:	9b03      	ldr	r3, [sp, #12]
 8011784:	4298      	cmp	r0, r3
 8011786:	bfb8      	it	lt
 8011788:	4618      	movlt	r0, r3
 801178a:	e7a6      	b.n	80116da <_printf_i+0x15e>
 801178c:	2301      	movs	r3, #1
 801178e:	4632      	mov	r2, r6
 8011790:	4649      	mov	r1, r9
 8011792:	4640      	mov	r0, r8
 8011794:	47d0      	blx	sl
 8011796:	3001      	adds	r0, #1
 8011798:	d09d      	beq.n	80116d6 <_printf_i+0x15a>
 801179a:	3501      	adds	r5, #1
 801179c:	68e3      	ldr	r3, [r4, #12]
 801179e:	9903      	ldr	r1, [sp, #12]
 80117a0:	1a5b      	subs	r3, r3, r1
 80117a2:	42ab      	cmp	r3, r5
 80117a4:	dcf2      	bgt.n	801178c <_printf_i+0x210>
 80117a6:	e7eb      	b.n	8011780 <_printf_i+0x204>
 80117a8:	2500      	movs	r5, #0
 80117aa:	f104 0619 	add.w	r6, r4, #25
 80117ae:	e7f5      	b.n	801179c <_printf_i+0x220>
 80117b0:	08012b6b 	.word	0x08012b6b
 80117b4:	08012b7c 	.word	0x08012b7c

080117b8 <__sflush_r>:
 80117b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80117bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117c0:	0716      	lsls	r6, r2, #28
 80117c2:	4605      	mov	r5, r0
 80117c4:	460c      	mov	r4, r1
 80117c6:	d454      	bmi.n	8011872 <__sflush_r+0xba>
 80117c8:	684b      	ldr	r3, [r1, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	dc02      	bgt.n	80117d4 <__sflush_r+0x1c>
 80117ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	dd48      	ble.n	8011866 <__sflush_r+0xae>
 80117d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117d6:	2e00      	cmp	r6, #0
 80117d8:	d045      	beq.n	8011866 <__sflush_r+0xae>
 80117da:	2300      	movs	r3, #0
 80117dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80117e0:	682f      	ldr	r7, [r5, #0]
 80117e2:	6a21      	ldr	r1, [r4, #32]
 80117e4:	602b      	str	r3, [r5, #0]
 80117e6:	d030      	beq.n	801184a <__sflush_r+0x92>
 80117e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117ea:	89a3      	ldrh	r3, [r4, #12]
 80117ec:	0759      	lsls	r1, r3, #29
 80117ee:	d505      	bpl.n	80117fc <__sflush_r+0x44>
 80117f0:	6863      	ldr	r3, [r4, #4]
 80117f2:	1ad2      	subs	r2, r2, r3
 80117f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117f6:	b10b      	cbz	r3, 80117fc <__sflush_r+0x44>
 80117f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117fa:	1ad2      	subs	r2, r2, r3
 80117fc:	2300      	movs	r3, #0
 80117fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011800:	6a21      	ldr	r1, [r4, #32]
 8011802:	4628      	mov	r0, r5
 8011804:	47b0      	blx	r6
 8011806:	1c43      	adds	r3, r0, #1
 8011808:	89a3      	ldrh	r3, [r4, #12]
 801180a:	d106      	bne.n	801181a <__sflush_r+0x62>
 801180c:	6829      	ldr	r1, [r5, #0]
 801180e:	291d      	cmp	r1, #29
 8011810:	d82b      	bhi.n	801186a <__sflush_r+0xb2>
 8011812:	4a2a      	ldr	r2, [pc, #168]	@ (80118bc <__sflush_r+0x104>)
 8011814:	40ca      	lsrs	r2, r1
 8011816:	07d6      	lsls	r6, r2, #31
 8011818:	d527      	bpl.n	801186a <__sflush_r+0xb2>
 801181a:	2200      	movs	r2, #0
 801181c:	6062      	str	r2, [r4, #4]
 801181e:	04d9      	lsls	r1, r3, #19
 8011820:	6922      	ldr	r2, [r4, #16]
 8011822:	6022      	str	r2, [r4, #0]
 8011824:	d504      	bpl.n	8011830 <__sflush_r+0x78>
 8011826:	1c42      	adds	r2, r0, #1
 8011828:	d101      	bne.n	801182e <__sflush_r+0x76>
 801182a:	682b      	ldr	r3, [r5, #0]
 801182c:	b903      	cbnz	r3, 8011830 <__sflush_r+0x78>
 801182e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011832:	602f      	str	r7, [r5, #0]
 8011834:	b1b9      	cbz	r1, 8011866 <__sflush_r+0xae>
 8011836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801183a:	4299      	cmp	r1, r3
 801183c:	d002      	beq.n	8011844 <__sflush_r+0x8c>
 801183e:	4628      	mov	r0, r5
 8011840:	f7ff fc8c 	bl	801115c <_free_r>
 8011844:	2300      	movs	r3, #0
 8011846:	6363      	str	r3, [r4, #52]	@ 0x34
 8011848:	e00d      	b.n	8011866 <__sflush_r+0xae>
 801184a:	2301      	movs	r3, #1
 801184c:	4628      	mov	r0, r5
 801184e:	47b0      	blx	r6
 8011850:	4602      	mov	r2, r0
 8011852:	1c50      	adds	r0, r2, #1
 8011854:	d1c9      	bne.n	80117ea <__sflush_r+0x32>
 8011856:	682b      	ldr	r3, [r5, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d0c6      	beq.n	80117ea <__sflush_r+0x32>
 801185c:	2b1d      	cmp	r3, #29
 801185e:	d001      	beq.n	8011864 <__sflush_r+0xac>
 8011860:	2b16      	cmp	r3, #22
 8011862:	d11e      	bne.n	80118a2 <__sflush_r+0xea>
 8011864:	602f      	str	r7, [r5, #0]
 8011866:	2000      	movs	r0, #0
 8011868:	e022      	b.n	80118b0 <__sflush_r+0xf8>
 801186a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801186e:	b21b      	sxth	r3, r3
 8011870:	e01b      	b.n	80118aa <__sflush_r+0xf2>
 8011872:	690f      	ldr	r7, [r1, #16]
 8011874:	2f00      	cmp	r7, #0
 8011876:	d0f6      	beq.n	8011866 <__sflush_r+0xae>
 8011878:	0793      	lsls	r3, r2, #30
 801187a:	680e      	ldr	r6, [r1, #0]
 801187c:	bf08      	it	eq
 801187e:	694b      	ldreq	r3, [r1, #20]
 8011880:	600f      	str	r7, [r1, #0]
 8011882:	bf18      	it	ne
 8011884:	2300      	movne	r3, #0
 8011886:	eba6 0807 	sub.w	r8, r6, r7
 801188a:	608b      	str	r3, [r1, #8]
 801188c:	f1b8 0f00 	cmp.w	r8, #0
 8011890:	dde9      	ble.n	8011866 <__sflush_r+0xae>
 8011892:	6a21      	ldr	r1, [r4, #32]
 8011894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011896:	4643      	mov	r3, r8
 8011898:	463a      	mov	r2, r7
 801189a:	4628      	mov	r0, r5
 801189c:	47b0      	blx	r6
 801189e:	2800      	cmp	r0, #0
 80118a0:	dc08      	bgt.n	80118b4 <__sflush_r+0xfc>
 80118a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118aa:	81a3      	strh	r3, [r4, #12]
 80118ac:	f04f 30ff 	mov.w	r0, #4294967295
 80118b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b4:	4407      	add	r7, r0
 80118b6:	eba8 0800 	sub.w	r8, r8, r0
 80118ba:	e7e7      	b.n	801188c <__sflush_r+0xd4>
 80118bc:	20400001 	.word	0x20400001

080118c0 <_fflush_r>:
 80118c0:	b538      	push	{r3, r4, r5, lr}
 80118c2:	690b      	ldr	r3, [r1, #16]
 80118c4:	4605      	mov	r5, r0
 80118c6:	460c      	mov	r4, r1
 80118c8:	b913      	cbnz	r3, 80118d0 <_fflush_r+0x10>
 80118ca:	2500      	movs	r5, #0
 80118cc:	4628      	mov	r0, r5
 80118ce:	bd38      	pop	{r3, r4, r5, pc}
 80118d0:	b118      	cbz	r0, 80118da <_fflush_r+0x1a>
 80118d2:	6a03      	ldr	r3, [r0, #32]
 80118d4:	b90b      	cbnz	r3, 80118da <_fflush_r+0x1a>
 80118d6:	f7ff fa0d 	bl	8010cf4 <__sinit>
 80118da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d0f3      	beq.n	80118ca <_fflush_r+0xa>
 80118e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80118e4:	07d0      	lsls	r0, r2, #31
 80118e6:	d404      	bmi.n	80118f2 <_fflush_r+0x32>
 80118e8:	0599      	lsls	r1, r3, #22
 80118ea:	d402      	bmi.n	80118f2 <_fflush_r+0x32>
 80118ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118ee:	f7ff fbfe 	bl	80110ee <__retarget_lock_acquire_recursive>
 80118f2:	4628      	mov	r0, r5
 80118f4:	4621      	mov	r1, r4
 80118f6:	f7ff ff5f 	bl	80117b8 <__sflush_r>
 80118fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118fc:	07da      	lsls	r2, r3, #31
 80118fe:	4605      	mov	r5, r0
 8011900:	d4e4      	bmi.n	80118cc <_fflush_r+0xc>
 8011902:	89a3      	ldrh	r3, [r4, #12]
 8011904:	059b      	lsls	r3, r3, #22
 8011906:	d4e1      	bmi.n	80118cc <_fflush_r+0xc>
 8011908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801190a:	f7ff fbf1 	bl	80110f0 <__retarget_lock_release_recursive>
 801190e:	e7dd      	b.n	80118cc <_fflush_r+0xc>

08011910 <fiprintf>:
 8011910:	b40e      	push	{r1, r2, r3}
 8011912:	b503      	push	{r0, r1, lr}
 8011914:	4601      	mov	r1, r0
 8011916:	ab03      	add	r3, sp, #12
 8011918:	4805      	ldr	r0, [pc, #20]	@ (8011930 <fiprintf+0x20>)
 801191a:	f853 2b04 	ldr.w	r2, [r3], #4
 801191e:	6800      	ldr	r0, [r0, #0]
 8011920:	9301      	str	r3, [sp, #4]
 8011922:	f000 f87f 	bl	8011a24 <_vfiprintf_r>
 8011926:	b002      	add	sp, #8
 8011928:	f85d eb04 	ldr.w	lr, [sp], #4
 801192c:	b003      	add	sp, #12
 801192e:	4770      	bx	lr
 8011930:	20000298 	.word	0x20000298

08011934 <memmove>:
 8011934:	4288      	cmp	r0, r1
 8011936:	b510      	push	{r4, lr}
 8011938:	eb01 0402 	add.w	r4, r1, r2
 801193c:	d902      	bls.n	8011944 <memmove+0x10>
 801193e:	4284      	cmp	r4, r0
 8011940:	4623      	mov	r3, r4
 8011942:	d807      	bhi.n	8011954 <memmove+0x20>
 8011944:	1e43      	subs	r3, r0, #1
 8011946:	42a1      	cmp	r1, r4
 8011948:	d008      	beq.n	801195c <memmove+0x28>
 801194a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801194e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011952:	e7f8      	b.n	8011946 <memmove+0x12>
 8011954:	4402      	add	r2, r0
 8011956:	4601      	mov	r1, r0
 8011958:	428a      	cmp	r2, r1
 801195a:	d100      	bne.n	801195e <memmove+0x2a>
 801195c:	bd10      	pop	{r4, pc}
 801195e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011966:	e7f7      	b.n	8011958 <memmove+0x24>

08011968 <abort>:
 8011968:	b508      	push	{r3, lr}
 801196a:	2006      	movs	r0, #6
 801196c:	f000 fa2e 	bl	8011dcc <raise>
 8011970:	2001      	movs	r0, #1
 8011972:	f7f1 f903 	bl	8002b7c <_exit>

08011976 <_realloc_r>:
 8011976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801197a:	4607      	mov	r7, r0
 801197c:	4614      	mov	r4, r2
 801197e:	460d      	mov	r5, r1
 8011980:	b921      	cbnz	r1, 801198c <_realloc_r+0x16>
 8011982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011986:	4611      	mov	r1, r2
 8011988:	f7ff b818 	b.w	80109bc <_malloc_r>
 801198c:	b92a      	cbnz	r2, 801199a <_realloc_r+0x24>
 801198e:	f7ff fbe5 	bl	801115c <_free_r>
 8011992:	4625      	mov	r5, r4
 8011994:	4628      	mov	r0, r5
 8011996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801199a:	f000 fa33 	bl	8011e04 <_malloc_usable_size_r>
 801199e:	4284      	cmp	r4, r0
 80119a0:	4606      	mov	r6, r0
 80119a2:	d802      	bhi.n	80119aa <_realloc_r+0x34>
 80119a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80119a8:	d8f4      	bhi.n	8011994 <_realloc_r+0x1e>
 80119aa:	4621      	mov	r1, r4
 80119ac:	4638      	mov	r0, r7
 80119ae:	f7ff f805 	bl	80109bc <_malloc_r>
 80119b2:	4680      	mov	r8, r0
 80119b4:	b908      	cbnz	r0, 80119ba <_realloc_r+0x44>
 80119b6:	4645      	mov	r5, r8
 80119b8:	e7ec      	b.n	8011994 <_realloc_r+0x1e>
 80119ba:	42b4      	cmp	r4, r6
 80119bc:	4622      	mov	r2, r4
 80119be:	4629      	mov	r1, r5
 80119c0:	bf28      	it	cs
 80119c2:	4632      	movcs	r2, r6
 80119c4:	f7ff fb9d 	bl	8011102 <memcpy>
 80119c8:	4629      	mov	r1, r5
 80119ca:	4638      	mov	r0, r7
 80119cc:	f7ff fbc6 	bl	801115c <_free_r>
 80119d0:	e7f1      	b.n	80119b6 <_realloc_r+0x40>

080119d2 <__sfputc_r>:
 80119d2:	6893      	ldr	r3, [r2, #8]
 80119d4:	3b01      	subs	r3, #1
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	b410      	push	{r4}
 80119da:	6093      	str	r3, [r2, #8]
 80119dc:	da08      	bge.n	80119f0 <__sfputc_r+0x1e>
 80119de:	6994      	ldr	r4, [r2, #24]
 80119e0:	42a3      	cmp	r3, r4
 80119e2:	db01      	blt.n	80119e8 <__sfputc_r+0x16>
 80119e4:	290a      	cmp	r1, #10
 80119e6:	d103      	bne.n	80119f0 <__sfputc_r+0x1e>
 80119e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ec:	f000 b932 	b.w	8011c54 <__swbuf_r>
 80119f0:	6813      	ldr	r3, [r2, #0]
 80119f2:	1c58      	adds	r0, r3, #1
 80119f4:	6010      	str	r0, [r2, #0]
 80119f6:	7019      	strb	r1, [r3, #0]
 80119f8:	4608      	mov	r0, r1
 80119fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119fe:	4770      	bx	lr

08011a00 <__sfputs_r>:
 8011a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a02:	4606      	mov	r6, r0
 8011a04:	460f      	mov	r7, r1
 8011a06:	4614      	mov	r4, r2
 8011a08:	18d5      	adds	r5, r2, r3
 8011a0a:	42ac      	cmp	r4, r5
 8011a0c:	d101      	bne.n	8011a12 <__sfputs_r+0x12>
 8011a0e:	2000      	movs	r0, #0
 8011a10:	e007      	b.n	8011a22 <__sfputs_r+0x22>
 8011a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a16:	463a      	mov	r2, r7
 8011a18:	4630      	mov	r0, r6
 8011a1a:	f7ff ffda 	bl	80119d2 <__sfputc_r>
 8011a1e:	1c43      	adds	r3, r0, #1
 8011a20:	d1f3      	bne.n	8011a0a <__sfputs_r+0xa>
 8011a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011a24 <_vfiprintf_r>:
 8011a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a28:	460d      	mov	r5, r1
 8011a2a:	b09d      	sub	sp, #116	@ 0x74
 8011a2c:	4614      	mov	r4, r2
 8011a2e:	4698      	mov	r8, r3
 8011a30:	4606      	mov	r6, r0
 8011a32:	b118      	cbz	r0, 8011a3c <_vfiprintf_r+0x18>
 8011a34:	6a03      	ldr	r3, [r0, #32]
 8011a36:	b90b      	cbnz	r3, 8011a3c <_vfiprintf_r+0x18>
 8011a38:	f7ff f95c 	bl	8010cf4 <__sinit>
 8011a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a3e:	07d9      	lsls	r1, r3, #31
 8011a40:	d405      	bmi.n	8011a4e <_vfiprintf_r+0x2a>
 8011a42:	89ab      	ldrh	r3, [r5, #12]
 8011a44:	059a      	lsls	r2, r3, #22
 8011a46:	d402      	bmi.n	8011a4e <_vfiprintf_r+0x2a>
 8011a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a4a:	f7ff fb50 	bl	80110ee <__retarget_lock_acquire_recursive>
 8011a4e:	89ab      	ldrh	r3, [r5, #12]
 8011a50:	071b      	lsls	r3, r3, #28
 8011a52:	d501      	bpl.n	8011a58 <_vfiprintf_r+0x34>
 8011a54:	692b      	ldr	r3, [r5, #16]
 8011a56:	b99b      	cbnz	r3, 8011a80 <_vfiprintf_r+0x5c>
 8011a58:	4629      	mov	r1, r5
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	f000 f938 	bl	8011cd0 <__swsetup_r>
 8011a60:	b170      	cbz	r0, 8011a80 <_vfiprintf_r+0x5c>
 8011a62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a64:	07dc      	lsls	r4, r3, #31
 8011a66:	d504      	bpl.n	8011a72 <_vfiprintf_r+0x4e>
 8011a68:	f04f 30ff 	mov.w	r0, #4294967295
 8011a6c:	b01d      	add	sp, #116	@ 0x74
 8011a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a72:	89ab      	ldrh	r3, [r5, #12]
 8011a74:	0598      	lsls	r0, r3, #22
 8011a76:	d4f7      	bmi.n	8011a68 <_vfiprintf_r+0x44>
 8011a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a7a:	f7ff fb39 	bl	80110f0 <__retarget_lock_release_recursive>
 8011a7e:	e7f3      	b.n	8011a68 <_vfiprintf_r+0x44>
 8011a80:	2300      	movs	r3, #0
 8011a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a84:	2320      	movs	r3, #32
 8011a86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a8e:	2330      	movs	r3, #48	@ 0x30
 8011a90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c40 <_vfiprintf_r+0x21c>
 8011a94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a98:	f04f 0901 	mov.w	r9, #1
 8011a9c:	4623      	mov	r3, r4
 8011a9e:	469a      	mov	sl, r3
 8011aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aa4:	b10a      	cbz	r2, 8011aaa <_vfiprintf_r+0x86>
 8011aa6:	2a25      	cmp	r2, #37	@ 0x25
 8011aa8:	d1f9      	bne.n	8011a9e <_vfiprintf_r+0x7a>
 8011aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8011aae:	d00b      	beq.n	8011ac8 <_vfiprintf_r+0xa4>
 8011ab0:	465b      	mov	r3, fp
 8011ab2:	4622      	mov	r2, r4
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f7ff ffa2 	bl	8011a00 <__sfputs_r>
 8011abc:	3001      	adds	r0, #1
 8011abe:	f000 80a7 	beq.w	8011c10 <_vfiprintf_r+0x1ec>
 8011ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ac4:	445a      	add	r2, fp
 8011ac6:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f000 809f 	beq.w	8011c10 <_vfiprintf_r+0x1ec>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8011ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011adc:	f10a 0a01 	add.w	sl, sl, #1
 8011ae0:	9304      	str	r3, [sp, #16]
 8011ae2:	9307      	str	r3, [sp, #28]
 8011ae4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ae8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011aea:	4654      	mov	r4, sl
 8011aec:	2205      	movs	r2, #5
 8011aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011af2:	4853      	ldr	r0, [pc, #332]	@ (8011c40 <_vfiprintf_r+0x21c>)
 8011af4:	f7ee fb74 	bl	80001e0 <memchr>
 8011af8:	9a04      	ldr	r2, [sp, #16]
 8011afa:	b9d8      	cbnz	r0, 8011b34 <_vfiprintf_r+0x110>
 8011afc:	06d1      	lsls	r1, r2, #27
 8011afe:	bf44      	itt	mi
 8011b00:	2320      	movmi	r3, #32
 8011b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b06:	0713      	lsls	r3, r2, #28
 8011b08:	bf44      	itt	mi
 8011b0a:	232b      	movmi	r3, #43	@ 0x2b
 8011b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011b10:	f89a 3000 	ldrb.w	r3, [sl]
 8011b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b16:	d015      	beq.n	8011b44 <_vfiprintf_r+0x120>
 8011b18:	9a07      	ldr	r2, [sp, #28]
 8011b1a:	4654      	mov	r4, sl
 8011b1c:	2000      	movs	r0, #0
 8011b1e:	f04f 0c0a 	mov.w	ip, #10
 8011b22:	4621      	mov	r1, r4
 8011b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b28:	3b30      	subs	r3, #48	@ 0x30
 8011b2a:	2b09      	cmp	r3, #9
 8011b2c:	d94b      	bls.n	8011bc6 <_vfiprintf_r+0x1a2>
 8011b2e:	b1b0      	cbz	r0, 8011b5e <_vfiprintf_r+0x13a>
 8011b30:	9207      	str	r2, [sp, #28]
 8011b32:	e014      	b.n	8011b5e <_vfiprintf_r+0x13a>
 8011b34:	eba0 0308 	sub.w	r3, r0, r8
 8011b38:	fa09 f303 	lsl.w	r3, r9, r3
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	9304      	str	r3, [sp, #16]
 8011b40:	46a2      	mov	sl, r4
 8011b42:	e7d2      	b.n	8011aea <_vfiprintf_r+0xc6>
 8011b44:	9b03      	ldr	r3, [sp, #12]
 8011b46:	1d19      	adds	r1, r3, #4
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	9103      	str	r1, [sp, #12]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	bfbb      	ittet	lt
 8011b50:	425b      	neglt	r3, r3
 8011b52:	f042 0202 	orrlt.w	r2, r2, #2
 8011b56:	9307      	strge	r3, [sp, #28]
 8011b58:	9307      	strlt	r3, [sp, #28]
 8011b5a:	bfb8      	it	lt
 8011b5c:	9204      	strlt	r2, [sp, #16]
 8011b5e:	7823      	ldrb	r3, [r4, #0]
 8011b60:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b62:	d10a      	bne.n	8011b7a <_vfiprintf_r+0x156>
 8011b64:	7863      	ldrb	r3, [r4, #1]
 8011b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b68:	d132      	bne.n	8011bd0 <_vfiprintf_r+0x1ac>
 8011b6a:	9b03      	ldr	r3, [sp, #12]
 8011b6c:	1d1a      	adds	r2, r3, #4
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	9203      	str	r2, [sp, #12]
 8011b72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b76:	3402      	adds	r4, #2
 8011b78:	9305      	str	r3, [sp, #20]
 8011b7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c50 <_vfiprintf_r+0x22c>
 8011b7e:	7821      	ldrb	r1, [r4, #0]
 8011b80:	2203      	movs	r2, #3
 8011b82:	4650      	mov	r0, sl
 8011b84:	f7ee fb2c 	bl	80001e0 <memchr>
 8011b88:	b138      	cbz	r0, 8011b9a <_vfiprintf_r+0x176>
 8011b8a:	9b04      	ldr	r3, [sp, #16]
 8011b8c:	eba0 000a 	sub.w	r0, r0, sl
 8011b90:	2240      	movs	r2, #64	@ 0x40
 8011b92:	4082      	lsls	r2, r0
 8011b94:	4313      	orrs	r3, r2
 8011b96:	3401      	adds	r4, #1
 8011b98:	9304      	str	r3, [sp, #16]
 8011b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b9e:	4829      	ldr	r0, [pc, #164]	@ (8011c44 <_vfiprintf_r+0x220>)
 8011ba0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ba4:	2206      	movs	r2, #6
 8011ba6:	f7ee fb1b 	bl	80001e0 <memchr>
 8011baa:	2800      	cmp	r0, #0
 8011bac:	d03f      	beq.n	8011c2e <_vfiprintf_r+0x20a>
 8011bae:	4b26      	ldr	r3, [pc, #152]	@ (8011c48 <_vfiprintf_r+0x224>)
 8011bb0:	bb1b      	cbnz	r3, 8011bfa <_vfiprintf_r+0x1d6>
 8011bb2:	9b03      	ldr	r3, [sp, #12]
 8011bb4:	3307      	adds	r3, #7
 8011bb6:	f023 0307 	bic.w	r3, r3, #7
 8011bba:	3308      	adds	r3, #8
 8011bbc:	9303      	str	r3, [sp, #12]
 8011bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bc0:	443b      	add	r3, r7
 8011bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bc4:	e76a      	b.n	8011a9c <_vfiprintf_r+0x78>
 8011bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011bca:	460c      	mov	r4, r1
 8011bcc:	2001      	movs	r0, #1
 8011bce:	e7a8      	b.n	8011b22 <_vfiprintf_r+0xfe>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	3401      	adds	r4, #1
 8011bd4:	9305      	str	r3, [sp, #20]
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	f04f 0c0a 	mov.w	ip, #10
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011be2:	3a30      	subs	r2, #48	@ 0x30
 8011be4:	2a09      	cmp	r2, #9
 8011be6:	d903      	bls.n	8011bf0 <_vfiprintf_r+0x1cc>
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d0c6      	beq.n	8011b7a <_vfiprintf_r+0x156>
 8011bec:	9105      	str	r1, [sp, #20]
 8011bee:	e7c4      	b.n	8011b7a <_vfiprintf_r+0x156>
 8011bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bf4:	4604      	mov	r4, r0
 8011bf6:	2301      	movs	r3, #1
 8011bf8:	e7f0      	b.n	8011bdc <_vfiprintf_r+0x1b8>
 8011bfa:	ab03      	add	r3, sp, #12
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	462a      	mov	r2, r5
 8011c00:	4b12      	ldr	r3, [pc, #72]	@ (8011c4c <_vfiprintf_r+0x228>)
 8011c02:	a904      	add	r1, sp, #16
 8011c04:	4630      	mov	r0, r6
 8011c06:	f3af 8000 	nop.w
 8011c0a:	4607      	mov	r7, r0
 8011c0c:	1c78      	adds	r0, r7, #1
 8011c0e:	d1d6      	bne.n	8011bbe <_vfiprintf_r+0x19a>
 8011c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c12:	07d9      	lsls	r1, r3, #31
 8011c14:	d405      	bmi.n	8011c22 <_vfiprintf_r+0x1fe>
 8011c16:	89ab      	ldrh	r3, [r5, #12]
 8011c18:	059a      	lsls	r2, r3, #22
 8011c1a:	d402      	bmi.n	8011c22 <_vfiprintf_r+0x1fe>
 8011c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c1e:	f7ff fa67 	bl	80110f0 <__retarget_lock_release_recursive>
 8011c22:	89ab      	ldrh	r3, [r5, #12]
 8011c24:	065b      	lsls	r3, r3, #25
 8011c26:	f53f af1f 	bmi.w	8011a68 <_vfiprintf_r+0x44>
 8011c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c2c:	e71e      	b.n	8011a6c <_vfiprintf_r+0x48>
 8011c2e:	ab03      	add	r3, sp, #12
 8011c30:	9300      	str	r3, [sp, #0]
 8011c32:	462a      	mov	r2, r5
 8011c34:	4b05      	ldr	r3, [pc, #20]	@ (8011c4c <_vfiprintf_r+0x228>)
 8011c36:	a904      	add	r1, sp, #16
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f7ff fc9f 	bl	801157c <_printf_i>
 8011c3e:	e7e4      	b.n	8011c0a <_vfiprintf_r+0x1e6>
 8011c40:	08012b5a 	.word	0x08012b5a
 8011c44:	08012b64 	.word	0x08012b64
 8011c48:	00000000 	.word	0x00000000
 8011c4c:	08011a01 	.word	0x08011a01
 8011c50:	08012b60 	.word	0x08012b60

08011c54 <__swbuf_r>:
 8011c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c56:	460e      	mov	r6, r1
 8011c58:	4614      	mov	r4, r2
 8011c5a:	4605      	mov	r5, r0
 8011c5c:	b118      	cbz	r0, 8011c66 <__swbuf_r+0x12>
 8011c5e:	6a03      	ldr	r3, [r0, #32]
 8011c60:	b90b      	cbnz	r3, 8011c66 <__swbuf_r+0x12>
 8011c62:	f7ff f847 	bl	8010cf4 <__sinit>
 8011c66:	69a3      	ldr	r3, [r4, #24]
 8011c68:	60a3      	str	r3, [r4, #8]
 8011c6a:	89a3      	ldrh	r3, [r4, #12]
 8011c6c:	071a      	lsls	r2, r3, #28
 8011c6e:	d501      	bpl.n	8011c74 <__swbuf_r+0x20>
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	b943      	cbnz	r3, 8011c86 <__swbuf_r+0x32>
 8011c74:	4621      	mov	r1, r4
 8011c76:	4628      	mov	r0, r5
 8011c78:	f000 f82a 	bl	8011cd0 <__swsetup_r>
 8011c7c:	b118      	cbz	r0, 8011c86 <__swbuf_r+0x32>
 8011c7e:	f04f 37ff 	mov.w	r7, #4294967295
 8011c82:	4638      	mov	r0, r7
 8011c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c86:	6823      	ldr	r3, [r4, #0]
 8011c88:	6922      	ldr	r2, [r4, #16]
 8011c8a:	1a98      	subs	r0, r3, r2
 8011c8c:	6963      	ldr	r3, [r4, #20]
 8011c8e:	b2f6      	uxtb	r6, r6
 8011c90:	4283      	cmp	r3, r0
 8011c92:	4637      	mov	r7, r6
 8011c94:	dc05      	bgt.n	8011ca2 <__swbuf_r+0x4e>
 8011c96:	4621      	mov	r1, r4
 8011c98:	4628      	mov	r0, r5
 8011c9a:	f7ff fe11 	bl	80118c0 <_fflush_r>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d1ed      	bne.n	8011c7e <__swbuf_r+0x2a>
 8011ca2:	68a3      	ldr	r3, [r4, #8]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	60a3      	str	r3, [r4, #8]
 8011ca8:	6823      	ldr	r3, [r4, #0]
 8011caa:	1c5a      	adds	r2, r3, #1
 8011cac:	6022      	str	r2, [r4, #0]
 8011cae:	701e      	strb	r6, [r3, #0]
 8011cb0:	6962      	ldr	r2, [r4, #20]
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d004      	beq.n	8011cc2 <__swbuf_r+0x6e>
 8011cb8:	89a3      	ldrh	r3, [r4, #12]
 8011cba:	07db      	lsls	r3, r3, #31
 8011cbc:	d5e1      	bpl.n	8011c82 <__swbuf_r+0x2e>
 8011cbe:	2e0a      	cmp	r6, #10
 8011cc0:	d1df      	bne.n	8011c82 <__swbuf_r+0x2e>
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f7ff fdfb 	bl	80118c0 <_fflush_r>
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d0d9      	beq.n	8011c82 <__swbuf_r+0x2e>
 8011cce:	e7d6      	b.n	8011c7e <__swbuf_r+0x2a>

08011cd0 <__swsetup_r>:
 8011cd0:	b538      	push	{r3, r4, r5, lr}
 8011cd2:	4b29      	ldr	r3, [pc, #164]	@ (8011d78 <__swsetup_r+0xa8>)
 8011cd4:	4605      	mov	r5, r0
 8011cd6:	6818      	ldr	r0, [r3, #0]
 8011cd8:	460c      	mov	r4, r1
 8011cda:	b118      	cbz	r0, 8011ce4 <__swsetup_r+0x14>
 8011cdc:	6a03      	ldr	r3, [r0, #32]
 8011cde:	b90b      	cbnz	r3, 8011ce4 <__swsetup_r+0x14>
 8011ce0:	f7ff f808 	bl	8010cf4 <__sinit>
 8011ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ce8:	0719      	lsls	r1, r3, #28
 8011cea:	d422      	bmi.n	8011d32 <__swsetup_r+0x62>
 8011cec:	06da      	lsls	r2, r3, #27
 8011cee:	d407      	bmi.n	8011d00 <__swsetup_r+0x30>
 8011cf0:	2209      	movs	r2, #9
 8011cf2:	602a      	str	r2, [r5, #0]
 8011cf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cf8:	81a3      	strh	r3, [r4, #12]
 8011cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfe:	e033      	b.n	8011d68 <__swsetup_r+0x98>
 8011d00:	0758      	lsls	r0, r3, #29
 8011d02:	d512      	bpl.n	8011d2a <__swsetup_r+0x5a>
 8011d04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d06:	b141      	cbz	r1, 8011d1a <__swsetup_r+0x4a>
 8011d08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011d0c:	4299      	cmp	r1, r3
 8011d0e:	d002      	beq.n	8011d16 <__swsetup_r+0x46>
 8011d10:	4628      	mov	r0, r5
 8011d12:	f7ff fa23 	bl	801115c <_free_r>
 8011d16:	2300      	movs	r3, #0
 8011d18:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d20:	81a3      	strh	r3, [r4, #12]
 8011d22:	2300      	movs	r3, #0
 8011d24:	6063      	str	r3, [r4, #4]
 8011d26:	6923      	ldr	r3, [r4, #16]
 8011d28:	6023      	str	r3, [r4, #0]
 8011d2a:	89a3      	ldrh	r3, [r4, #12]
 8011d2c:	f043 0308 	orr.w	r3, r3, #8
 8011d30:	81a3      	strh	r3, [r4, #12]
 8011d32:	6923      	ldr	r3, [r4, #16]
 8011d34:	b94b      	cbnz	r3, 8011d4a <__swsetup_r+0x7a>
 8011d36:	89a3      	ldrh	r3, [r4, #12]
 8011d38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d40:	d003      	beq.n	8011d4a <__swsetup_r+0x7a>
 8011d42:	4621      	mov	r1, r4
 8011d44:	4628      	mov	r0, r5
 8011d46:	f000 f88b 	bl	8011e60 <__smakebuf_r>
 8011d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d4e:	f013 0201 	ands.w	r2, r3, #1
 8011d52:	d00a      	beq.n	8011d6a <__swsetup_r+0x9a>
 8011d54:	2200      	movs	r2, #0
 8011d56:	60a2      	str	r2, [r4, #8]
 8011d58:	6962      	ldr	r2, [r4, #20]
 8011d5a:	4252      	negs	r2, r2
 8011d5c:	61a2      	str	r2, [r4, #24]
 8011d5e:	6922      	ldr	r2, [r4, #16]
 8011d60:	b942      	cbnz	r2, 8011d74 <__swsetup_r+0xa4>
 8011d62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d66:	d1c5      	bne.n	8011cf4 <__swsetup_r+0x24>
 8011d68:	bd38      	pop	{r3, r4, r5, pc}
 8011d6a:	0799      	lsls	r1, r3, #30
 8011d6c:	bf58      	it	pl
 8011d6e:	6962      	ldrpl	r2, [r4, #20]
 8011d70:	60a2      	str	r2, [r4, #8]
 8011d72:	e7f4      	b.n	8011d5e <__swsetup_r+0x8e>
 8011d74:	2000      	movs	r0, #0
 8011d76:	e7f7      	b.n	8011d68 <__swsetup_r+0x98>
 8011d78:	20000298 	.word	0x20000298

08011d7c <_raise_r>:
 8011d7c:	291f      	cmp	r1, #31
 8011d7e:	b538      	push	{r3, r4, r5, lr}
 8011d80:	4605      	mov	r5, r0
 8011d82:	460c      	mov	r4, r1
 8011d84:	d904      	bls.n	8011d90 <_raise_r+0x14>
 8011d86:	2316      	movs	r3, #22
 8011d88:	6003      	str	r3, [r0, #0]
 8011d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d8e:	bd38      	pop	{r3, r4, r5, pc}
 8011d90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d92:	b112      	cbz	r2, 8011d9a <_raise_r+0x1e>
 8011d94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d98:	b94b      	cbnz	r3, 8011dae <_raise_r+0x32>
 8011d9a:	4628      	mov	r0, r5
 8011d9c:	f000 f830 	bl	8011e00 <_getpid_r>
 8011da0:	4622      	mov	r2, r4
 8011da2:	4601      	mov	r1, r0
 8011da4:	4628      	mov	r0, r5
 8011da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011daa:	f000 b817 	b.w	8011ddc <_kill_r>
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d00a      	beq.n	8011dc8 <_raise_r+0x4c>
 8011db2:	1c59      	adds	r1, r3, #1
 8011db4:	d103      	bne.n	8011dbe <_raise_r+0x42>
 8011db6:	2316      	movs	r3, #22
 8011db8:	6003      	str	r3, [r0, #0]
 8011dba:	2001      	movs	r0, #1
 8011dbc:	e7e7      	b.n	8011d8e <_raise_r+0x12>
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	4798      	blx	r3
 8011dc8:	2000      	movs	r0, #0
 8011dca:	e7e0      	b.n	8011d8e <_raise_r+0x12>

08011dcc <raise>:
 8011dcc:	4b02      	ldr	r3, [pc, #8]	@ (8011dd8 <raise+0xc>)
 8011dce:	4601      	mov	r1, r0
 8011dd0:	6818      	ldr	r0, [r3, #0]
 8011dd2:	f7ff bfd3 	b.w	8011d7c <_raise_r>
 8011dd6:	bf00      	nop
 8011dd8:	20000298 	.word	0x20000298

08011ddc <_kill_r>:
 8011ddc:	b538      	push	{r3, r4, r5, lr}
 8011dde:	4d07      	ldr	r5, [pc, #28]	@ (8011dfc <_kill_r+0x20>)
 8011de0:	2300      	movs	r3, #0
 8011de2:	4604      	mov	r4, r0
 8011de4:	4608      	mov	r0, r1
 8011de6:	4611      	mov	r1, r2
 8011de8:	602b      	str	r3, [r5, #0]
 8011dea:	f7f0 feb7 	bl	8002b5c <_kill>
 8011dee:	1c43      	adds	r3, r0, #1
 8011df0:	d102      	bne.n	8011df8 <_kill_r+0x1c>
 8011df2:	682b      	ldr	r3, [r5, #0]
 8011df4:	b103      	cbz	r3, 8011df8 <_kill_r+0x1c>
 8011df6:	6023      	str	r3, [r4, #0]
 8011df8:	bd38      	pop	{r3, r4, r5, pc}
 8011dfa:	bf00      	nop
 8011dfc:	20011654 	.word	0x20011654

08011e00 <_getpid_r>:
 8011e00:	f7f0 bea4 	b.w	8002b4c <_getpid>

08011e04 <_malloc_usable_size_r>:
 8011e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e08:	1f18      	subs	r0, r3, #4
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	bfbc      	itt	lt
 8011e0e:	580b      	ldrlt	r3, [r1, r0]
 8011e10:	18c0      	addlt	r0, r0, r3
 8011e12:	4770      	bx	lr

08011e14 <__swhatbuf_r>:
 8011e14:	b570      	push	{r4, r5, r6, lr}
 8011e16:	460c      	mov	r4, r1
 8011e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e1c:	2900      	cmp	r1, #0
 8011e1e:	b096      	sub	sp, #88	@ 0x58
 8011e20:	4615      	mov	r5, r2
 8011e22:	461e      	mov	r6, r3
 8011e24:	da0d      	bge.n	8011e42 <__swhatbuf_r+0x2e>
 8011e26:	89a3      	ldrh	r3, [r4, #12]
 8011e28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011e2c:	f04f 0100 	mov.w	r1, #0
 8011e30:	bf14      	ite	ne
 8011e32:	2340      	movne	r3, #64	@ 0x40
 8011e34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e38:	2000      	movs	r0, #0
 8011e3a:	6031      	str	r1, [r6, #0]
 8011e3c:	602b      	str	r3, [r5, #0]
 8011e3e:	b016      	add	sp, #88	@ 0x58
 8011e40:	bd70      	pop	{r4, r5, r6, pc}
 8011e42:	466a      	mov	r2, sp
 8011e44:	f000 f848 	bl	8011ed8 <_fstat_r>
 8011e48:	2800      	cmp	r0, #0
 8011e4a:	dbec      	blt.n	8011e26 <__swhatbuf_r+0x12>
 8011e4c:	9901      	ldr	r1, [sp, #4]
 8011e4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e56:	4259      	negs	r1, r3
 8011e58:	4159      	adcs	r1, r3
 8011e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e5e:	e7eb      	b.n	8011e38 <__swhatbuf_r+0x24>

08011e60 <__smakebuf_r>:
 8011e60:	898b      	ldrh	r3, [r1, #12]
 8011e62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e64:	079d      	lsls	r5, r3, #30
 8011e66:	4606      	mov	r6, r0
 8011e68:	460c      	mov	r4, r1
 8011e6a:	d507      	bpl.n	8011e7c <__smakebuf_r+0x1c>
 8011e6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	6123      	str	r3, [r4, #16]
 8011e74:	2301      	movs	r3, #1
 8011e76:	6163      	str	r3, [r4, #20]
 8011e78:	b003      	add	sp, #12
 8011e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e7c:	ab01      	add	r3, sp, #4
 8011e7e:	466a      	mov	r2, sp
 8011e80:	f7ff ffc8 	bl	8011e14 <__swhatbuf_r>
 8011e84:	9f00      	ldr	r7, [sp, #0]
 8011e86:	4605      	mov	r5, r0
 8011e88:	4639      	mov	r1, r7
 8011e8a:	4630      	mov	r0, r6
 8011e8c:	f7fe fd96 	bl	80109bc <_malloc_r>
 8011e90:	b948      	cbnz	r0, 8011ea6 <__smakebuf_r+0x46>
 8011e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e96:	059a      	lsls	r2, r3, #22
 8011e98:	d4ee      	bmi.n	8011e78 <__smakebuf_r+0x18>
 8011e9a:	f023 0303 	bic.w	r3, r3, #3
 8011e9e:	f043 0302 	orr.w	r3, r3, #2
 8011ea2:	81a3      	strh	r3, [r4, #12]
 8011ea4:	e7e2      	b.n	8011e6c <__smakebuf_r+0xc>
 8011ea6:	89a3      	ldrh	r3, [r4, #12]
 8011ea8:	6020      	str	r0, [r4, #0]
 8011eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011eae:	81a3      	strh	r3, [r4, #12]
 8011eb0:	9b01      	ldr	r3, [sp, #4]
 8011eb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011eb6:	b15b      	cbz	r3, 8011ed0 <__smakebuf_r+0x70>
 8011eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	f000 f81d 	bl	8011efc <_isatty_r>
 8011ec2:	b128      	cbz	r0, 8011ed0 <__smakebuf_r+0x70>
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	f023 0303 	bic.w	r3, r3, #3
 8011eca:	f043 0301 	orr.w	r3, r3, #1
 8011ece:	81a3      	strh	r3, [r4, #12]
 8011ed0:	89a3      	ldrh	r3, [r4, #12]
 8011ed2:	431d      	orrs	r5, r3
 8011ed4:	81a5      	strh	r5, [r4, #12]
 8011ed6:	e7cf      	b.n	8011e78 <__smakebuf_r+0x18>

08011ed8 <_fstat_r>:
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	4d07      	ldr	r5, [pc, #28]	@ (8011ef8 <_fstat_r+0x20>)
 8011edc:	2300      	movs	r3, #0
 8011ede:	4604      	mov	r4, r0
 8011ee0:	4608      	mov	r0, r1
 8011ee2:	4611      	mov	r1, r2
 8011ee4:	602b      	str	r3, [r5, #0]
 8011ee6:	f7f0 fe99 	bl	8002c1c <_fstat>
 8011eea:	1c43      	adds	r3, r0, #1
 8011eec:	d102      	bne.n	8011ef4 <_fstat_r+0x1c>
 8011eee:	682b      	ldr	r3, [r5, #0]
 8011ef0:	b103      	cbz	r3, 8011ef4 <_fstat_r+0x1c>
 8011ef2:	6023      	str	r3, [r4, #0]
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	bf00      	nop
 8011ef8:	20011654 	.word	0x20011654

08011efc <_isatty_r>:
 8011efc:	b538      	push	{r3, r4, r5, lr}
 8011efe:	4d06      	ldr	r5, [pc, #24]	@ (8011f18 <_isatty_r+0x1c>)
 8011f00:	2300      	movs	r3, #0
 8011f02:	4604      	mov	r4, r0
 8011f04:	4608      	mov	r0, r1
 8011f06:	602b      	str	r3, [r5, #0]
 8011f08:	f7f0 fe98 	bl	8002c3c <_isatty>
 8011f0c:	1c43      	adds	r3, r0, #1
 8011f0e:	d102      	bne.n	8011f16 <_isatty_r+0x1a>
 8011f10:	682b      	ldr	r3, [r5, #0]
 8011f12:	b103      	cbz	r3, 8011f16 <_isatty_r+0x1a>
 8011f14:	6023      	str	r3, [r4, #0]
 8011f16:	bd38      	pop	{r3, r4, r5, pc}
 8011f18:	20011654 	.word	0x20011654

08011f1c <_init>:
 8011f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1e:	bf00      	nop
 8011f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f22:	bc08      	pop	{r3}
 8011f24:	469e      	mov	lr, r3
 8011f26:	4770      	bx	lr

08011f28 <_fini>:
 8011f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f2a:	bf00      	nop
 8011f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f2e:	bc08      	pop	{r3}
 8011f30:	469e      	mov	lr, r3
 8011f32:	4770      	bx	lr
