
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f78  08015b88  08015b88  00016b88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b00  08016b00  0001845c  2**0
                  CONTENTS
  4 .ARM          00000008  08016b00  08016b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b08  08016b08  0001845c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b08  08016b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b0c  08016b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000045c  20000000  08016b10  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000133d0  20000460  08016f6c  00018460  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013830  08016f6c  00018830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001845c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee6d  00000000  00000000  0001848c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076e5  00000000  00000000  000472f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  0004e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d3e  00000000  00000000  00050fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c953  00000000  00000000  00052d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035bd5  00000000  00000000  0007f671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55b8  00000000  00000000  000b5246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a7fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b344  00000000  00000000  0019a844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a5b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015b70 	.word	0x08015b70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	08015b70 	.word	0x08015b70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9be 	b.w	8000f7c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	468e      	mov	lr, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14a      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d962      	bls.n	8000d60 <__udivmoddi4+0xdc>
 8000c9a:	fab2 f682 	clz	r6, r2
 8000c9e:	b14e      	cbz	r6, 8000cb4 <__udivmoddi4+0x30>
 8000ca0:	f1c6 0320 	rsb	r3, r6, #32
 8000ca4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	40b7      	lsls	r7, r6
 8000cae:	ea43 0808 	orr.w	r8, r3, r8
 8000cb2:	40b4      	lsls	r4, r6
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f fc87 	uxth.w	ip, r7
 8000cbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc0:	0c23      	lsrs	r3, r4, #16
 8000cc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fb01 f20c 	mul.w	r2, r1, ip
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x62>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd8:	f080 80ea 	bcs.w	8000eb0 <__udivmoddi4+0x22c>
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f240 80e7 	bls.w	8000eb0 <__udivmoddi4+0x22c>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	443b      	add	r3, r7
 8000ce6:	1a9a      	subs	r2, r3, r2
 8000ce8:	b2a3      	uxth	r3, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfa:	459c      	cmp	ip, r3
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x8e>
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	f080 80d6 	bcs.w	8000eb4 <__udivmoddi4+0x230>
 8000d08:	459c      	cmp	ip, r3
 8000d0a:	f240 80d3 	bls.w	8000eb4 <__udivmoddi4+0x230>
 8000d0e:	443b      	add	r3, r7
 8000d10:	3802      	subs	r0, #2
 8000d12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d16:	eba3 030c 	sub.w	r3, r3, ip
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	b11d      	cbz	r5, 8000d26 <__udivmoddi4+0xa2>
 8000d1e:	40f3      	lsrs	r3, r6
 8000d20:	2200      	movs	r2, #0
 8000d22:	e9c5 3200 	strd	r3, r2, [r5]
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d905      	bls.n	8000d3a <__udivmoddi4+0xb6>
 8000d2e:	b10d      	cbz	r5, 8000d34 <__udivmoddi4+0xb0>
 8000d30:	e9c5 0100 	strd	r0, r1, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4608      	mov	r0, r1
 8000d38:	e7f5      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d3a:	fab3 f183 	clz	r1, r3
 8000d3e:	2900      	cmp	r1, #0
 8000d40:	d146      	bne.n	8000dd0 <__udivmoddi4+0x14c>
 8000d42:	4573      	cmp	r3, lr
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xc8>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 8105 	bhi.w	8000f56 <__udivmoddi4+0x2d2>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4690      	mov	r8, r2
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e5      	beq.n	8000d26 <__udivmoddi4+0xa2>
 8000d5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d5e:	e7e2      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	f000 8090 	beq.w	8000e86 <__udivmoddi4+0x202>
 8000d66:	fab2 f682 	clz	r6, r2
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	f040 80a4 	bne.w	8000eb8 <__udivmoddi4+0x234>
 8000d70:	1a8a      	subs	r2, r1, r2
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x11e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x11c>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f200 80e0 	bhi.w	8000f60 <__udivmoddi4+0x2dc>
 8000da0:	46c4      	mov	ip, r8
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000da8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db0:	fb02 f404 	mul.w	r4, r2, r4
 8000db4:	429c      	cmp	r4, r3
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x144>
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x142>
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	f200 80ca 	bhi.w	8000f5a <__udivmoddi4+0x2d6>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0x98>
 8000dd0:	f1c1 0620 	rsb	r6, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	fa0e f401 	lsl.w	r4, lr, r1
 8000de0:	fa20 f306 	lsr.w	r3, r0, r6
 8000de4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000de8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	fa1f fc87 	uxth.w	ip, r7
 8000df6:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x1a0>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e16:	f080 809c 	bcs.w	8000f52 <__udivmoddi4+0x2ce>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f240 8099 	bls.w	8000f52 <__udivmoddi4+0x2ce>
 8000e20:	3802      	subs	r0, #2
 8000e22:	443c      	add	r4, r7
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	fa1f fe83 	uxth.w	lr, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3c:	45a4      	cmp	ip, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1ce>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e46:	f080 8082 	bcs.w	8000f4e <__udivmoddi4+0x2ca>
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d97f      	bls.n	8000f4e <__udivmoddi4+0x2ca>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e5e:	4564      	cmp	r4, ip
 8000e60:	4673      	mov	r3, lr
 8000e62:	46e1      	mov	r9, ip
 8000e64:	d362      	bcc.n	8000f2c <__udivmoddi4+0x2a8>
 8000e66:	d05f      	beq.n	8000f28 <__udivmoddi4+0x2a4>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x1fe>
 8000e6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e72:	fa04 f606 	lsl.w	r6, r4, r6
 8000e76:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7a:	431e      	orrs	r6, r3
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e82:	2100      	movs	r1, #0
 8000e84:	e74f      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000e86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8a:	0c01      	lsrs	r1, r0, #16
 8000e8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e90:	b280      	uxth	r0, r0
 8000e92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e96:	463b      	mov	r3, r7
 8000e98:	4638      	mov	r0, r7
 8000e9a:	463c      	mov	r4, r7
 8000e9c:	46b8      	mov	r8, r7
 8000e9e:	46be      	mov	lr, r7
 8000ea0:	2620      	movs	r6, #32
 8000ea2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ea6:	eba2 0208 	sub.w	r2, r2, r8
 8000eaa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eae:	e766      	b.n	8000d7e <__udivmoddi4+0xfa>
 8000eb0:	4601      	mov	r1, r0
 8000eb2:	e718      	b.n	8000ce6 <__udivmoddi4+0x62>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e72c      	b.n	8000d12 <__udivmoddi4+0x8e>
 8000eb8:	f1c6 0220 	rsb	r2, r6, #32
 8000ebc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec0:	40b7      	lsls	r7, r6
 8000ec2:	40b1      	lsls	r1, r6
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed2:	b2bc      	uxth	r4, r7
 8000ed4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb08 f904 	mul.w	r9, r8, r4
 8000ee2:	40b0      	lsls	r0, r6
 8000ee4:	4589      	cmp	r9, r1
 8000ee6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eea:	b280      	uxth	r0, r0
 8000eec:	d93e      	bls.n	8000f6c <__udivmoddi4+0x2e8>
 8000eee:	1879      	adds	r1, r7, r1
 8000ef0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef4:	d201      	bcs.n	8000efa <__udivmoddi4+0x276>
 8000ef6:	4589      	cmp	r9, r1
 8000ef8:	d81f      	bhi.n	8000f3a <__udivmoddi4+0x2b6>
 8000efa:	eba1 0109 	sub.w	r1, r1, r9
 8000efe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f02:	fb09 f804 	mul.w	r8, r9, r4
 8000f06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d229      	bcs.n	8000f68 <__udivmoddi4+0x2e4>
 8000f14:	18ba      	adds	r2, r7, r2
 8000f16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1a:	d2c4      	bcs.n	8000ea6 <__udivmoddi4+0x222>
 8000f1c:	4542      	cmp	r2, r8
 8000f1e:	d2c2      	bcs.n	8000ea6 <__udivmoddi4+0x222>
 8000f20:	f1a9 0102 	sub.w	r1, r9, #2
 8000f24:	443a      	add	r2, r7
 8000f26:	e7be      	b.n	8000ea6 <__udivmoddi4+0x222>
 8000f28:	45f0      	cmp	r8, lr
 8000f2a:	d29d      	bcs.n	8000e68 <__udivmoddi4+0x1e4>
 8000f2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f34:	3801      	subs	r0, #1
 8000f36:	46e1      	mov	r9, ip
 8000f38:	e796      	b.n	8000e68 <__udivmoddi4+0x1e4>
 8000f3a:	eba7 0909 	sub.w	r9, r7, r9
 8000f3e:	4449      	add	r1, r9
 8000f40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f48:	fb09 f804 	mul.w	r8, r9, r4
 8000f4c:	e7db      	b.n	8000f06 <__udivmoddi4+0x282>
 8000f4e:	4673      	mov	r3, lr
 8000f50:	e77f      	b.n	8000e52 <__udivmoddi4+0x1ce>
 8000f52:	4650      	mov	r0, sl
 8000f54:	e766      	b.n	8000e24 <__udivmoddi4+0x1a0>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e6fd      	b.n	8000d56 <__udivmoddi4+0xd2>
 8000f5a:	443b      	add	r3, r7
 8000f5c:	3a02      	subs	r2, #2
 8000f5e:	e733      	b.n	8000dc8 <__udivmoddi4+0x144>
 8000f60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f64:	443b      	add	r3, r7
 8000f66:	e71c      	b.n	8000da2 <__udivmoddi4+0x11e>
 8000f68:	4649      	mov	r1, r9
 8000f6a:	e79c      	b.n	8000ea6 <__udivmoddi4+0x222>
 8000f6c:	eba1 0109 	sub.w	r1, r1, r9
 8000f70:	46c4      	mov	ip, r8
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	e7c4      	b.n	8000f06 <__udivmoddi4+0x282>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <toggle_led+0x30>)
 8000f90:	f003 f951 	bl	8004236 <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f94:	2014      	movs	r0, #20
 8000f96:	f00b fed9 	bl	800cd4c <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <toggle_led+0x30>)
 8000fa2:	f003 f948 	bl	8004236 <HAL_GPIO_TogglePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000fbc:	4813      	ldr	r0, [pc, #76]	@ (800100c <ARM_keys_IRQ+0x58>)
 8000fbe:	f001 fe03 	bl	8002bc8 <UART_puts>
 8000fc2:	4813      	ldr	r0, [pc, #76]	@ (8001010 <ARM_keys_IRQ+0x5c>)
 8000fc4:	f001 fe00 	bl	8002bc8 <UART_puts>
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <ARM_keys_IRQ+0x60>)
 8000fca:	f001 fdfd 	bl	8002bc8 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000fce:	4812      	ldr	r0, [pc, #72]	@ (8001018 <ARM_keys_IRQ+0x64>)
 8000fd0:	f00e f828 	bl	800f024 <xTaskGetHandle>
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fdc:	480f      	ldr	r0, [pc, #60]	@ (800101c <ARM_keys_IRQ+0x68>)
 8000fde:	f000 fcbf 	bl	8001960 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <ARM_keys_IRQ+0x6c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ff4:	f00c f87a 	bl	800d0ec <xEventGroupWaitBits>
 8000ff8:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f00e ff3f 	bl	800fe84 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8001006:	bf00      	nop
 8001008:	e7eb      	b.n	8000fe2 <ARM_keys_IRQ+0x2e>
 800100a:	bf00      	nop
 800100c:	08015b88 	.word	0x08015b88
 8001010:	080165c4 	.word	0x080165c4
 8001014:	08015b8c 	.word	0x08015b8c
 8001018:	08015b98 	.word	0x08015b98
 800101c:	08015ba8 	.word	0x08015ba8
 8001020:	20002454 	.word	0x20002454

08001024 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	2000      	movs	r0, #0
 800103a:	f00e fec3 	bl	800fdc4 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <ARM_keys_task+0xc4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 31ff 	mov.w	r1, #4294967295
 8001046:	4618      	mov	r0, r3
 8001048:	f00c fea0 	bl	800dd8c <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fd6d 	bl	8002b30 <LED_put>
	    BUZZER_put (500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f001 fa89 	bl	8002570 <BUZZER_put>
		osDelay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001062:	f00b fe73 	bl	800cd4c <osDelay>

		UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001066:	4821      	ldr	r0, [pc, #132]	@ (80010ec <ARM_keys_task+0xc8>)
 8001068:	f001 fdae 	bl	8002bc8 <UART_puts>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fdc6 	bl	8002c00 <UART_putint>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <ARM_keys_task+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <ARM_keys_task+0x6a>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001080:	481a      	ldr	r0, [pc, #104]	@ (80010ec <ARM_keys_task+0xc8>)
 8001082:	f001 fda1 	bl	8002bc8 <UART_puts>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fdb9 	bl	8002c00 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <ARM_keys_task+0xc4>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	f00c fbf6 	bl	800d888 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e015      	b.n	80010ce <ARM_keys_task+0xaa>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <ARM_keys_task+0x96>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <ARM_keys_task+0x90>
 80010ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010b2:	e004      	b.n	80010be <ARM_keys_task+0x9a>
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	e001      	b.n	80010be <ARM_keys_task+0x9a>
 80010ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010be:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff5c 	bl	8000f80 <toggle_led>
		for (i=0; i<3; i++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	dde6      	ble.n	80010a2 <ARM_keys_task+0x7e>
	  	}
     	taskYIELD(); // done, force context switch
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <ARM_keys_task+0xd0>)
 80010d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 80010e4:	e7a2      	b.n	800102c <ARM_keys_task+0x8>
 80010e6:	bf00      	nop
 80010e8:	20002450 	.word	0x20002450
 80010ec:	08015bb8 	.word	0x08015bb8
 80010f0:	20002444 	.word	0x20002444
 80010f4:	e000ed04 	.word	0xe000ed04

080010f8 <GPS_parser>:

double convert_decimal_degrees(char *nmea_coordinate, char* ns);
double calc_average(GPS_decimal_degrees_t *samples, int count, char coord);

void GPS_parser(void *argument)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	osDelay(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f00b fe23 	bl	800cd4c <osDelay>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001106:	4861      	ldr	r0, [pc, #388]	@ (800128c <GPS_parser+0x194>)
 8001108:	f001 fd5e 	bl	8002bc8 <UART_puts>
 800110c:	4860      	ldr	r0, [pc, #384]	@ (8001290 <GPS_parser+0x198>)
 800110e:	f001 fd5b 	bl	8002bc8 <UART_puts>

	while (TRUE)
	{
		// Check if GPSdata mutex is available
		if(xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001112:	4b60      	ldr	r3, [pc, #384]	@ (8001294 <GPS_parser+0x19c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f00c fe36 	bl	800dd8c <xQueueSemaphoreTake>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	f040 80ac 	bne.w	8001280 <GPS_parser+0x188>
		{
			memcpy(&gnrmc_readercopy, (const void*)readerBuffer, sizeof(GNRMC)); // copy data from readerBuffer to local gnrmc_readercopy
 8001128:	4b5b      	ldr	r3, [pc, #364]	@ (8001298 <GPS_parser+0x1a0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a5b      	ldr	r2, [pc, #364]	@ (800129c <GPS_parser+0x1a4>)
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	2347      	movs	r3, #71	@ 0x47
 8001134:	461a      	mov	r2, r3
 8001136:	f012 f93a 	bl	80133ae <memcpy>

			if(samplecount < samples_size && gnrmc_readercopy.status == 'A') // Check if we have space for more samples
 800113a:	4b59      	ldr	r3, [pc, #356]	@ (80012a0 <GPS_parser+0x1a8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001142:	da55      	bge.n	80011f0 <GPS_parser+0xf8>
 8001144:	4b55      	ldr	r3, [pc, #340]	@ (800129c <GPS_parser+0x1a4>)
 8001146:	7c5b      	ldrb	r3, [r3, #17]
 8001148:	2b41      	cmp	r3, #65	@ 0x41
 800114a:	d151      	bne.n	80011f0 <GPS_parser+0xf8>
			{
				GPS_samples[samplecount].latitude = convert_decimal_degrees(gnrmc_readercopy.latitude, &gnrmc_readercopy.NS_ind);
 800114c:	4b54      	ldr	r3, [pc, #336]	@ (80012a0 <GPS_parser+0x1a8>)
 800114e:	681c      	ldr	r4, [r3, #0]
 8001150:	4954      	ldr	r1, [pc, #336]	@ (80012a4 <GPS_parser+0x1ac>)
 8001152:	4855      	ldr	r0, [pc, #340]	@ (80012a8 <GPS_parser+0x1b0>)
 8001154:	f000 f8c2 	bl	80012dc <convert_decimal_degrees>
 8001158:	eeb0 7a40 	vmov.f32	s14, s0
 800115c:	eef0 7a60 	vmov.f32	s15, s1
 8001160:	4a52      	ldr	r2, [pc, #328]	@ (80012ac <GPS_parser+0x1b4>)
 8001162:	0123      	lsls	r3, r4, #4
 8001164:	4413      	add	r3, r2
 8001166:	ed83 7b00 	vstr	d7, [r3]
				GPS_samples[samplecount].longitude = convert_decimal_degrees(gnrmc_readercopy.longitude, &gnrmc_readercopy.EW_ind);
 800116a:	4b4d      	ldr	r3, [pc, #308]	@ (80012a0 <GPS_parser+0x1a8>)
 800116c:	681c      	ldr	r4, [r3, #0]
 800116e:	4950      	ldr	r1, [pc, #320]	@ (80012b0 <GPS_parser+0x1b8>)
 8001170:	4850      	ldr	r0, [pc, #320]	@ (80012b4 <GPS_parser+0x1bc>)
 8001172:	f000 f8b3 	bl	80012dc <convert_decimal_degrees>
 8001176:	eeb0 7a40 	vmov.f32	s14, s0
 800117a:	eef0 7a60 	vmov.f32	s15, s1
 800117e:	4a4b      	ldr	r2, [pc, #300]	@ (80012ac <GPS_parser+0x1b4>)
 8001180:	0123      	lsls	r3, r4, #4
 8001182:	4413      	add	r3, r2
 8001184:	3308      	adds	r3, #8
 8001186:	ed83 7b00 	vstr	d7, [r3]


				// Print the saved GPS sample to UART
				UART_puts("\r\nGPS sample added: ");
 800118a:	484b      	ldr	r0, [pc, #300]	@ (80012b8 <GPS_parser+0x1c0>)
 800118c:	f001 fd1c 	bl	8002bc8 <UART_puts>
				UART_putint(samplecount);
 8001190:	4b43      	ldr	r3, [pc, #268]	@ (80012a0 <GPS_parser+0x1a8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fd33 	bl	8002c00 <UART_putint>
				UART_puts("	Lat: ");
 800119a:	4848      	ldr	r0, [pc, #288]	@ (80012bc <GPS_parser+0x1c4>)
 800119c:	f001 fd14 	bl	8002bc8 <UART_puts>
				sprintf(savedLatitude, "%.6f", GPS_samples[samplecount].latitude);
 80011a0:	4b3f      	ldr	r3, [pc, #252]	@ (80012a0 <GPS_parser+0x1a8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a41      	ldr	r2, [pc, #260]	@ (80012ac <GPS_parser+0x1b4>)
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	4944      	ldr	r1, [pc, #272]	@ (80012c0 <GPS_parser+0x1c8>)
 80011b0:	4844      	ldr	r0, [pc, #272]	@ (80012c4 <GPS_parser+0x1cc>)
 80011b2:	f011 ff0d 	bl	8012fd0 <siprintf>
				UART_puts(savedLatitude);
 80011b6:	4843      	ldr	r0, [pc, #268]	@ (80012c4 <GPS_parser+0x1cc>)
 80011b8:	f001 fd06 	bl	8002bc8 <UART_puts>

				UART_puts(" Long: ");
 80011bc:	4842      	ldr	r0, [pc, #264]	@ (80012c8 <GPS_parser+0x1d0>)
 80011be:	f001 fd03 	bl	8002bc8 <UART_puts>
				sprintf(savedLongitude, "%.6f", GPS_samples[samplecount].longitude);
 80011c2:	4b37      	ldr	r3, [pc, #220]	@ (80012a0 <GPS_parser+0x1a8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a39      	ldr	r2, [pc, #228]	@ (80012ac <GPS_parser+0x1b4>)
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	3308      	adds	r3, #8
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	493b      	ldr	r1, [pc, #236]	@ (80012c0 <GPS_parser+0x1c8>)
 80011d4:	483d      	ldr	r0, [pc, #244]	@ (80012cc <GPS_parser+0x1d4>)
 80011d6:	f011 fefb 	bl	8012fd0 <siprintf>
				UART_puts(savedLongitude);
 80011da:	483c      	ldr	r0, [pc, #240]	@ (80012cc <GPS_parser+0x1d4>)
 80011dc:	f001 fcf4 	bl	8002bc8 <UART_puts>

				DisplayTaskData();
 80011e0:	f000 fd2e 	bl	8001c40 <DisplayTaskData>

				samplecount++;
 80011e4:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <GPS_parser+0x1a8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a2d      	ldr	r2, [pc, #180]	@ (80012a0 <GPS_parser+0x1a8>)
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e040      	b.n	8001272 <GPS_parser+0x17a>
			}
			else if (samplecount >= samples_size) // If we have enough samples, calculate the average
 80011f0:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <GPS_parser+0x1a8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011f8:	db3b      	blt.n	8001272 <GPS_parser+0x17a>
			{
				GPS_average_pos.latitude = calc_average(GPS_samples, samplecount, 'L');
 80011fa:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <GPS_parser+0x1a8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	224c      	movs	r2, #76	@ 0x4c
 8001200:	4619      	mov	r1, r3
 8001202:	482a      	ldr	r0, [pc, #168]	@ (80012ac <GPS_parser+0x1b4>)
 8001204:	f000 f8ca 	bl	800139c <calc_average>
 8001208:	eeb0 7a40 	vmov.f32	s14, s0
 800120c:	eef0 7a60 	vmov.f32	s15, s1
 8001210:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <GPS_parser+0x1d8>)
 8001212:	ed83 7b00 	vstr	d7, [r3]
				GPS_average_pos.longitude = calc_average(GPS_samples, samplecount, 'G');
 8001216:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <GPS_parser+0x1a8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2247      	movs	r2, #71	@ 0x47
 800121c:	4619      	mov	r1, r3
 800121e:	4823      	ldr	r0, [pc, #140]	@ (80012ac <GPS_parser+0x1b4>)
 8001220:	f000 f8bc 	bl	800139c <calc_average>
 8001224:	eeb0 7a40 	vmov.f32	s14, s0
 8001228:	eef0 7a60 	vmov.f32	s15, s1
 800122c:	4b28      	ldr	r3, [pc, #160]	@ (80012d0 <GPS_parser+0x1d8>)
 800122e:	ed83 7b02 	vstr	d7, [r3, #8]

				// Print the average GPS position to UART
				UART_puts("\r\nAverage GPS position: ");
 8001232:	4828      	ldr	r0, [pc, #160]	@ (80012d4 <GPS_parser+0x1dc>)
 8001234:	f001 fcc8 	bl	8002bc8 <UART_puts>
				UART_puts("Lat: ");
 8001238:	4827      	ldr	r0, [pc, #156]	@ (80012d8 <GPS_parser+0x1e0>)
 800123a:	f001 fcc5 	bl	8002bc8 <UART_puts>
				sprintf(savedLatitude, "%.6f", GPS_average_pos.latitude);
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <GPS_parser+0x1d8>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	491e      	ldr	r1, [pc, #120]	@ (80012c0 <GPS_parser+0x1c8>)
 8001246:	481f      	ldr	r0, [pc, #124]	@ (80012c4 <GPS_parser+0x1cc>)
 8001248:	f011 fec2 	bl	8012fd0 <siprintf>
				UART_puts(savedLatitude);
 800124c:	481d      	ldr	r0, [pc, #116]	@ (80012c4 <GPS_parser+0x1cc>)
 800124e:	f001 fcbb 	bl	8002bc8 <UART_puts>

				UART_puts(" Long: ");
 8001252:	481d      	ldr	r0, [pc, #116]	@ (80012c8 <GPS_parser+0x1d0>)
 8001254:	f001 fcb8 	bl	8002bc8 <UART_puts>
				sprintf(savedLongitude, "%.6f", GPS_average_pos.longitude);
 8001258:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <GPS_parser+0x1d8>)
 800125a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800125e:	4918      	ldr	r1, [pc, #96]	@ (80012c0 <GPS_parser+0x1c8>)
 8001260:	481a      	ldr	r0, [pc, #104]	@ (80012cc <GPS_parser+0x1d4>)
 8001262:	f011 feb5 	bl	8012fd0 <siprintf>
				UART_puts(savedLongitude);
 8001266:	4819      	ldr	r0, [pc, #100]	@ (80012cc <GPS_parser+0x1d4>)
 8001268:	f001 fcae 	bl	8002bc8 <UART_puts>

				// Reset sample count for next averaging
				samplecount = 0;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <GPS_parser+0x1a8>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
			}



			xSemaphoreGive(hGPS_Mutex); // Release the mutex
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <GPS_parser+0x19c>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	f00c fb04 	bl	800d888 <xQueueGenericSend>
		}

		osDelay(1000);
 8001280:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001284:	f00b fd62 	bl	800cd4c <osDelay>
		if(xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001288:	e743      	b.n	8001112 <GPS_parser+0x1a>
 800128a:	bf00      	nop
 800128c:	080165d4 	.word	0x080165d4
 8001290:	08015bd8 	.word	0x08015bd8
 8001294:	2000245c 	.word	0x2000245c
 8001298:	2000024c 	.word	0x2000024c
 800129c:	2000047c 	.word	0x2000047c
 80012a0:	20002418 	.word	0x20002418
 80012a4:	20000498 	.word	0x20000498
 80012a8:	2000048e 	.word	0x2000048e
 80012ac:	200004c8 	.word	0x200004c8
 80012b0:	200004a3 	.word	0x200004a3
 80012b4:	20000499 	.word	0x20000499
 80012b8:	08015be4 	.word	0x08015be4
 80012bc:	08015bfc 	.word	0x08015bfc
 80012c0:	08015c04 	.word	0x08015c04
 80012c4:	2000241c 	.word	0x2000241c
 80012c8:	08015c0c 	.word	0x08015c0c
 80012cc:	20002430 	.word	0x20002430
 80012d0:	20002408 	.word	0x20002408
 80012d4:	08015c14 	.word	0x08015c14
 80012d8:	08015c30 	.word	0x08015c30

080012dc <convert_decimal_degrees>:
		}
	}
}

double convert_decimal_degrees(char *nmea_coordinate, char* ns)
{
 80012dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012e0:	b08a      	sub	sp, #40	@ 0x28
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	double raw = atof(nmea_coordinate); // Convert string to double
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f010 fa01 	bl	80116f0 <atof>
 80012ee:	ed87 0b06 	vstr	d0, [r7, #24]

	int degrees = (int)(raw / 100); // Get the degrees part
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <convert_decimal_degrees+0xb8>)
 80012f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80012fc:	f7ff faa6 	bl	800084c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc26 	bl	8000b58 <__aeabi_d2iz>
 800130c:	4603      	mov	r3, r0
 800130e:	617b      	str	r3, [r7, #20]
	double minutes = raw - (degrees * 100); // Get the minutes part
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	2264      	movs	r2, #100	@ 0x64
 8001314:	fb02 f303 	mul.w	r3, r2, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f903 	bl	8000524 <__aeabi_i2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001326:	f7fe ffaf 	bl	8000288 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double decimal_degrees = degrees + (minutes / 60.0); // Convert to decimal degrees
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff f8f6 	bl	8000524 <__aeabi_i2d>
 8001338:	4680      	mov	r8, r0
 800133a:	4689      	mov	r9, r1
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <convert_decimal_degrees+0xbc>)
 8001342:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001346:	f7ff fa81 	bl	800084c <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4640      	mov	r0, r8
 8001350:	4649      	mov	r1, r9
 8001352:	f7fe ff9b 	bl	800028c <__adddf3>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (ns[0] == 'S' || ns[0] == 'W') // Check if the coordinate is South or West
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b53      	cmp	r3, #83	@ 0x53
 8001364:	d003      	beq.n	800136e <convert_decimal_degrees+0x92>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b57      	cmp	r3, #87	@ 0x57
 800136c:	d105      	bne.n	800137a <convert_decimal_degrees+0x9e>
	{
		decimal_degrees = -decimal_degrees; // Make it negative
 800136e:	6a3c      	ldr	r4, [r7, #32]
 8001370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001372:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001376:	e9c7 4508 	strd	r4, r5, [r7, #32]
	}

	return decimal_degrees; // Return the converted value
 800137a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137e:	ec43 2b17 	vmov	d7, r2, r3

}
 8001382:	eeb0 0a47 	vmov.f32	s0, s14
 8001386:	eef0 0a67 	vmov.f32	s1, s15
 800138a:	3728      	adds	r7, #40	@ 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001392:	bf00      	nop
 8001394:	40590000 	.word	0x40590000
 8001398:	404e0000 	.word	0x404e0000

0800139c <calc_average>:

double calc_average(GPS_decimal_degrees_t *samples, int count, char coord)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	4613      	mov	r3, r2
 80013a8:	71fb      	strb	r3, [r7, #7]
	double sum = 0.0;
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for (int i = 0; i < count; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	e025      	b.n	8001408 <calc_average+0x6c>
	{
		if (coord == 'L') // Latitude
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b4c      	cmp	r3, #76	@ 0x4c
 80013c0:	d10e      	bne.n	80013e0 <calc_average+0x44>
		{
			sum += samples[i].latitude;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	011b      	lsls	r3, r3, #4
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4413      	add	r3, r2
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013d2:	f7fe ff5b 	bl	800028c <__adddf3>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013de:	e010      	b.n	8001402 <calc_average+0x66>
		}
		else if (coord == 'G') // Longitude
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b47      	cmp	r3, #71	@ 0x47
 80013e4:	d10d      	bne.n	8001402 <calc_average+0x66>
		{
			sum += samples[i].longitude;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	011b      	lsls	r3, r3, #4
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013f6:	f7fe ff49 	bl	800028c <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < count; i++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbd5      	blt.n	80013bc <calc_average+0x20>
		}
	}

	return sum / count; // Return the average
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f7ff f887 	bl	8000524 <__aeabi_i2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800141e:	f7ff fa15 	bl	800084c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ec43 2b17 	vmov	d7, r2, r3
}
 800142a:	eeb0 0a47 	vmov.f32	s0, s14
 800142e:	eef0 0a67 	vmov.f32	s1, s15
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	@ 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8001448:	4847      	ldr	r0, [pc, #284]	@ (8001568 <UART_keys_IRQ+0x130>)
 800144a:	f001 fbbd 	bl	8002bc8 <UART_puts>
 800144e:	4847      	ldr	r0, [pc, #284]	@ (800156c <UART_keys_IRQ+0x134>)
 8001450:	f001 fbba 	bl	8002bc8 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 8001454:	4846      	ldr	r0, [pc, #280]	@ (8001570 <UART_keys_IRQ+0x138>)
 8001456:	f00d fde5 	bl	800f024 <xTaskGetHandle>
 800145a:	6278      	str	r0, [r7, #36]	@ 0x24
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	2b00      	cmp	r3, #0
 8001460:	d102      	bne.n	8001468 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 8001462:	4844      	ldr	r0, [pc, #272]	@ (8001574 <UART_keys_IRQ+0x13c>)
 8001464:	f000 fa7c 	bl	8001960 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001468:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <UART_keys_IRQ+0x140>)
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f107 0218 	add.w	r2, r7, #24
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	4413      	add	r3, r2
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	4619      	mov	r1, r3
 800147a:	f00c fba5 	bl	800dbc8 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001484:	4413      	add	r3, r2
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d06b      	beq.n	8001564 <UART_keys_IRQ+0x12c>
 800148c:	f107 0218 	add.w	r2, r7, #24
 8001490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d064      	beq.n	8001564 <UART_keys_IRQ+0x12c>
 800149a:	f107 0218 	add.w	r2, r7, #24
 800149e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b0d      	cmp	r3, #13
 80014a6:	d05d      	beq.n	8001564 <UART_keys_IRQ+0x12c>
 80014a8:	f107 0218 	add.w	r2, r7, #24
 80014ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	d056      	beq.n	8001564 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80014b6:	f107 0218 	add.w	r2, r7, #24
 80014ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b0a      	cmp	r3, #10
 80014c2:	d108      	bne.n	80014d6 <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80014c4:	f107 0218 	add.w	r2, r7, #24
 80014c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ca:	4413      	add	r3, r2
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014d4:	e00d      	b.n	80014f2 <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 80014d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d10a      	bne.n	80014f2 <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 80014dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014de:	3301      	adds	r3, #1
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e2:	f107 0218 	add.w	r2, r7, #24
 80014e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e8:	4413      	add	r3, r2
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 80014f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d031      	beq.n	800155c <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 80014f8:	f107 0218 	add.w	r2, r7, #24
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f011 ff4b 	bl	801339e <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	220a      	movs	r2, #10
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f011 fddc 	bl	80130ce <memset>
			finish = FALSE;
 8001516:	2300      	movs	r3, #0
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 800151e:	f107 010c 	add.w	r1, r7, #12
 8001522:	2300      	movs	r3, #0
 8001524:	2203      	movs	r2, #3
 8001526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001528:	f00e fcac 	bl	800fe84 <xTaskGenericNotify>
			//hello test

			if (Uart_debug_out & UART_DEBUG_OUT)
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <UART_keys_IRQ+0x144>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d097      	beq.n	8001468 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8001538:	4811      	ldr	r0, [pc, #68]	@ (8001580 <UART_keys_IRQ+0x148>)
 800153a:	f001 fb45 	bl	8002bc8 <UART_puts>
 800153e:	480a      	ldr	r0, [pc, #40]	@ (8001568 <UART_keys_IRQ+0x130>)
 8001540:	f001 fb42 	bl	8002bc8 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 8001544:	480f      	ldr	r0, [pc, #60]	@ (8001584 <UART_keys_IRQ+0x14c>)
 8001546:	f001 fb3f 	bl	8002bc8 <UART_puts>
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fb3a 	bl	8002bc8 <UART_puts>
				UART_puts("\r\n");
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <UART_keys_IRQ+0x150>)
 8001556:	f001 fb37 	bl	8002bc8 <UART_puts>
 800155a:	e785      	b.n	8001468 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 800155c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155e:	3301      	adds	r3, #1
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001562:	e781      	b.n	8001468 <UART_keys_IRQ+0x30>
			continue;
 8001564:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001566:	e77f      	b.n	8001468 <UART_keys_IRQ+0x30>
 8001568:	080165e0 	.word	0x080165e0
 800156c:	08015c84 	.word	0x08015c84
 8001570:	08015c38 	.word	0x08015c38
 8001574:	08015ca8 	.word	0x08015ca8
 8001578:	20002448 	.word	0x20002448
 800157c:	20002444 	.word	0x20002444
 8001580:	08015c68 	.word	0x08015c68
 8001584:	08015cb8 	.word	0x08015cb8
 8001588:	08015c80 	.word	0x08015c80

0800158c <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8001594:	4bab      	ldr	r3, [pc, #684]	@ (8001844 <UART_menu+0x2b8>)
 8001596:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001598:	48ab      	ldr	r0, [pc, #684]	@ (8001848 <UART_menu+0x2bc>)
 800159a:	f001 fb15 	bl	8002bc8 <UART_puts>
 800159e:	48ab      	ldr	r0, [pc, #684]	@ (800184c <UART_menu+0x2c0>)
 80015a0:	f001 fb12 	bl	8002bc8 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	2001      	movs	r0, #1
 80015aa:	f00e fbbf 	bl	800fd2c <ulTaskNotifyTake>
 80015ae:	4603      	mov	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	75fb      	strb	r3, [r7, #23]
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	3301      	adds	r3, #1
 80015bc:	4aa4      	ldr	r2, [pc, #656]	@ (8001850 <UART_menu+0x2c4>)
 80015be:	4413      	add	r3, r2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d102      	bne.n	80015d0 <UART_menu+0x44>
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	3b20      	subs	r3, #32
 80015ce:	e000      	b.n	80015d2 <UART_menu+0x46>
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	3b30      	subs	r3, #48	@ 0x30
 80015d4:	2b24      	cmp	r3, #36	@ 0x24
 80015d6:	d84d      	bhi.n	8001674 <UART_menu+0xe8>
 80015d8:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <UART_menu+0x54>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	08001683 	.word	0x08001683
 80015e4:	080016bf 	.word	0x080016bf
 80015e8:	080016eb 	.word	0x080016eb
 80015ec:	08001717 	.word	0x08001717
 80015f0:	08001743 	.word	0x08001743
 80015f4:	0800176f 	.word	0x0800176f
 80015f8:	08001675 	.word	0x08001675
 80015fc:	08001675 	.word	0x08001675
 8001600:	08001675 	.word	0x08001675
 8001604:	08001675 	.word	0x08001675
 8001608:	08001675 	.word	0x08001675
 800160c:	08001675 	.word	0x08001675
 8001610:	08001675 	.word	0x08001675
 8001614:	08001675 	.word	0x08001675
 8001618:	08001675 	.word	0x08001675
 800161c:	08001675 	.word	0x08001675
 8001620:	08001675 	.word	0x08001675
 8001624:	08001675 	.word	0x08001675
 8001628:	08001675 	.word	0x08001675
 800162c:	08001675 	.word	0x08001675
 8001630:	0800179b 	.word	0x0800179b
 8001634:	08001675 	.word	0x08001675
 8001638:	08001675 	.word	0x08001675
 800163c:	08001675 	.word	0x08001675
 8001640:	08001675 	.word	0x08001675
 8001644:	08001675 	.word	0x08001675
 8001648:	08001675 	.word	0x08001675
 800164c:	08001675 	.word	0x08001675
 8001650:	08001675 	.word	0x08001675
 8001654:	080017bf 	.word	0x080017bf
 8001658:	08001675 	.word	0x08001675
 800165c:	08001675 	.word	0x08001675
 8001660:	080017cb 	.word	0x080017cb
 8001664:	08001675 	.word	0x08001675
 8001668:	08001675 	.word	0x08001675
 800166c:	0800180f 	.word	0x0800180f
 8001670:	080017c5 	.word	0x080017c5
		{
		default:  UART_puts(s);
 8001674:	69b8      	ldr	r0, [r7, #24]
 8001676:	f001 faa7 	bl	8002bc8 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 800167a:	4876      	ldr	r0, [pc, #472]	@ (8001854 <UART_menu+0x2c8>)
 800167c:	f001 faa4 	bl	8002bc8 <UART_puts>
				  break;
 8001680:	e0df      	b.n	8001842 <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 8001682:	4b75      	ldr	r3, [pc, #468]	@ (8001858 <UART_menu+0x2cc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <UART_menu+0x102>
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <UART_menu+0x104>
 800168e:	23ff      	movs	r3, #255	@ 0xff
 8001690:	4a71      	ldr	r2, [pc, #452]	@ (8001858 <UART_menu+0x2cc>)
 8001692:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8001694:	4871      	ldr	r0, [pc, #452]	@ (800185c <UART_menu+0x2d0>)
 8001696:	f001 fa97 	bl	8002bc8 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 800169a:	4b6f      	ldr	r3, [pc, #444]	@ (8001858 <UART_menu+0x2cc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d101      	bne.n	80016a6 <UART_menu+0x11a>
 80016a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001860 <UART_menu+0x2d4>)
 80016a4:	e000      	b.n	80016a8 <UART_menu+0x11c>
 80016a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <UART_menu+0x2d8>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fa8d 	bl	8002bc8 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 80016ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001858 <UART_menu+0x2cc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80c0 	bne.w	8001838 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80016b8:	f000 f944 	bl	8001944 <DisplayMenu>
				  break;
 80016bc:	e0bc      	b.n	8001838 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80016be:	4b66      	ldr	r3, [pc, #408]	@ (8001858 <UART_menu+0x2cc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	4a64      	ldr	r2, [pc, #400]	@ (8001858 <UART_menu+0x2cc>)
 80016c8:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80016ca:	4867      	ldr	r0, [pc, #412]	@ (8001868 <UART_menu+0x2dc>)
 80016cc:	f001 fa7c 	bl	8002bc8 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80016d0:	4b61      	ldr	r3, [pc, #388]	@ (8001858 <UART_menu+0x2cc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <UART_menu+0x154>
 80016dc:	4b60      	ldr	r3, [pc, #384]	@ (8001860 <UART_menu+0x2d4>)
 80016de:	e000      	b.n	80016e2 <UART_menu+0x156>
 80016e0:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <UART_menu+0x2d8>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fa70 	bl	8002bc8 <UART_puts>
				  break;
 80016e8:	e0ab      	b.n	8001842 <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 80016ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001858 <UART_menu+0x2cc>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f083 0302 	eor.w	r3, r3, #2
 80016f2:	4a59      	ldr	r2, [pc, #356]	@ (8001858 <UART_menu+0x2cc>)
 80016f4:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 80016f6:	485d      	ldr	r0, [pc, #372]	@ (800186c <UART_menu+0x2e0>)
 80016f8:	f001 fa66 	bl	8002bc8 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80016fc:	4b56      	ldr	r3, [pc, #344]	@ (8001858 <UART_menu+0x2cc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <UART_menu+0x180>
 8001708:	4b55      	ldr	r3, [pc, #340]	@ (8001860 <UART_menu+0x2d4>)
 800170a:	e000      	b.n	800170e <UART_menu+0x182>
 800170c:	4b55      	ldr	r3, [pc, #340]	@ (8001864 <UART_menu+0x2d8>)
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fa5a 	bl	8002bc8 <UART_puts>
				  break;
 8001714:	e095      	b.n	8001842 <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8001716:	4b50      	ldr	r3, [pc, #320]	@ (8001858 <UART_menu+0x2cc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f083 0304 	eor.w	r3, r3, #4
 800171e:	4a4e      	ldr	r2, [pc, #312]	@ (8001858 <UART_menu+0x2cc>)
 8001720:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8001722:	4853      	ldr	r0, [pc, #332]	@ (8001870 <UART_menu+0x2e4>)
 8001724:	f001 fa50 	bl	8002bc8 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001728:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <UART_menu+0x2cc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <UART_menu+0x1ac>
 8001734:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <UART_menu+0x2d4>)
 8001736:	e000      	b.n	800173a <UART_menu+0x1ae>
 8001738:	4b4a      	ldr	r3, [pc, #296]	@ (8001864 <UART_menu+0x2d8>)
 800173a:	4618      	mov	r0, r3
 800173c:	f001 fa44 	bl	8002bc8 <UART_puts>
				  break;
 8001740:	e07f      	b.n	8001842 <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8001742:	4b45      	ldr	r3, [pc, #276]	@ (8001858 <UART_menu+0x2cc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f083 0308 	eor.w	r3, r3, #8
 800174a:	4a43      	ldr	r2, [pc, #268]	@ (8001858 <UART_menu+0x2cc>)
 800174c:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 800174e:	4849      	ldr	r0, [pc, #292]	@ (8001874 <UART_menu+0x2e8>)
 8001750:	f001 fa3a 	bl	8002bc8 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001754:	4b40      	ldr	r3, [pc, #256]	@ (8001858 <UART_menu+0x2cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <UART_menu+0x1d8>
 8001760:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <UART_menu+0x2d4>)
 8001762:	e000      	b.n	8001766 <UART_menu+0x1da>
 8001764:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <UART_menu+0x2d8>)
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fa2e 	bl	8002bc8 <UART_puts>
				  break;
 800176c:	e069      	b.n	8001842 <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 800176e:	4b3a      	ldr	r3, [pc, #232]	@ (8001858 <UART_menu+0x2cc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f083 0310 	eor.w	r3, r3, #16
 8001776:	4a38      	ldr	r2, [pc, #224]	@ (8001858 <UART_menu+0x2cc>)
 8001778:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 800177a:	483f      	ldr	r0, [pc, #252]	@ (8001878 <UART_menu+0x2ec>)
 800177c:	f001 fa24 	bl	8002bc8 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <UART_menu+0x2cc>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <UART_menu+0x204>
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <UART_menu+0x2d4>)
 800178e:	e000      	b.n	8001792 <UART_menu+0x206>
 8001790:	4b34      	ldr	r3, [pc, #208]	@ (8001864 <UART_menu+0x2d8>)
 8001792:	4618      	mov	r0, r3
 8001794:	f001 fa18 	bl	8002bc8 <UART_puts>
				  break;
 8001798:	e053      	b.n	8001842 <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	3302      	adds	r3, #2
 800179e:	4618      	mov	r0, r3
 80017a0:	f00f ffa9 	bl	80116f6 <atoi>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b34      	ldr	r3, [pc, #208]	@ (800187c <UART_menu+0x2f0>)
 80017aa:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 80017ac:	4834      	ldr	r0, [pc, #208]	@ (8001880 <UART_menu+0x2f4>)
 80017ae:	f001 fa0b 	bl	8002bc8 <UART_puts>
 80017b2:	4b32      	ldr	r3, [pc, #200]	@ (800187c <UART_menu+0x2f0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fa22 	bl	8002c00 <UART_putint>
				  break;
 80017bc:	e041      	b.n	8001842 <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 80017be:	f000 f8c1 	bl	8001944 <DisplayMenu>
				  break;
 80017c2:	e03e      	b.n	8001842 <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 80017c4:	f000 fa3c 	bl	8001c40 <DisplayTaskData>
				  break;
 80017c8:	e03b      	b.n	8001842 <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 80017ca:	69f9      	ldr	r1, [r7, #28]
 80017cc:	69b8      	ldr	r0, [r7, #24]
 80017ce:	f011 fca5 	bl	801311c <strtok>
 80017d2:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 80017d4:	69f9      	ldr	r1, [r7, #28]
 80017d6:	2000      	movs	r0, #0
 80017d8:	f011 fca0 	bl	801311c <strtok>
 80017dc:	61b8      	str	r0, [r7, #24]
 80017de:	69b8      	ldr	r0, [r7, #24]
 80017e0:	f00f ff89 	bl	80116f6 <atoi>
 80017e4:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 80017e6:	69f9      	ldr	r1, [r7, #28]
 80017e8:	2000      	movs	r0, #0
 80017ea:	f011 fc97 	bl	801311c <strtok>
 80017ee:	61b8      	str	r0, [r7, #24]
 80017f0:	69b8      	ldr	r0, [r7, #24]
 80017f2:	f00f ff80 	bl	80116f6 <atoi>
 80017f6:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01e      	beq.n	800183c <UART_menu+0x2b0>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	6938      	ldr	r0, [r7, #16]
 8001808:	f000 f996 	bl	8001b38 <SetTaskPriority>
				  break;
 800180c:	e016      	b.n	800183c <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 800180e:	69f9      	ldr	r1, [r7, #28]
 8001810:	69b8      	ldr	r0, [r7, #24]
 8001812:	f011 fc83 	bl	801311c <strtok>
 8001816:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001818:	69f9      	ldr	r1, [r7, #28]
 800181a:	2000      	movs	r0, #0
 800181c:	f011 fc7e 	bl	801311c <strtok>
 8001820:	61b8      	str	r0, [r7, #24]
 8001822:	69b8      	ldr	r0, [r7, #24]
 8001824:	f00f ff67 	bl	80116f6 <atoi>
 8001828:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d007      	beq.n	8001840 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8001830:	6938      	ldr	r0, [r7, #16]
 8001832:	f000 f9bd 	bl	8001bb0 <StartStopTask>
				  break;
 8001836:	e003      	b.n	8001840 <UART_menu+0x2b4>
				  break;
 8001838:	bf00      	nop
 800183a:	e6b3      	b.n	80015a4 <UART_menu+0x18>
				  break;
 800183c:	bf00      	nop
 800183e:	e6b1      	b.n	80015a4 <UART_menu+0x18>
				  break;
 8001840:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001842:	e6af      	b.n	80015a4 <UART_menu+0x18>
 8001844:	08015cd4 	.word	0x08015cd4
 8001848:	080165f0 	.word	0x080165f0
 800184c:	08015cd8 	.word	0x08015cd8
 8001850:	08016900 	.word	0x08016900
 8001854:	08015ce4 	.word	0x08015ce4
 8001858:	20002444 	.word	0x20002444
 800185c:	08015cf8 	.word	0x08015cf8
 8001860:	08015d10 	.word	0x08015d10
 8001864:	08015d18 	.word	0x08015d18
 8001868:	08015d20 	.word	0x08015d20
 800186c:	08015d34 	.word	0x08015d34
 8001870:	08015d48 	.word	0x08015d48
 8001874:	08015d5c 	.word	0x08015d5c
 8001878:	08015d70 	.word	0x08015d70
 800187c:	20000250 	.word	0x20000250
 8001880:	08015d80 	.word	0x08015d80

08001884 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b09c      	sub	sp, #112	@ 0x70
 8001888:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <DisplayVersion+0x98>)
 800188c:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 800188e:	f000 ffb1 	bl	80027f4 <LCD_clear>
	LCD_puts(app_nameLCD);
 8001892:	4b23      	ldr	r3, [pc, #140]	@ (8001920 <DisplayVersion+0x9c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f001 f8a4 	bl	80029e4 <LCD_puts>

	UART_puts(app_name);
 800189c:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <DisplayVersion+0xa0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 f991 	bl	8002bc8 <UART_puts>
	UART_puts(functionality);
 80018a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80018a8:	f001 f98e 	bl	8002bc8 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 80018ac:	f107 0108 	add.w	r1, r7, #8
 80018b0:	463b      	mov	r3, r7
 80018b2:	2264      	movs	r2, #100	@ 0x64
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00b f953 	bl	800cb60 <osKernelGetInfo>
	UART_puts("\t-----");
 80018ba:	481b      	ldr	r0, [pc, #108]	@ (8001928 <DisplayVersion+0xa4>)
 80018bc:	f001 f984 	bl	8002bc8 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 80018c0:	481a      	ldr	r0, [pc, #104]	@ (800192c <DisplayVersion+0xa8>)
 80018c2:	f001 f981 	bl	8002bc8 <UART_puts>
 80018c6:	f107 0308 	add.w	r3, r7, #8
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 f97c 	bl	8002bc8 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 80018d0:	4817      	ldr	r0, [pc, #92]	@ (8001930 <DisplayVersion+0xac>)
 80018d2:	f001 f979 	bl	8002bc8 <UART_puts>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 f991 	bl	8002c00 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 80018de:	4815      	ldr	r0, [pc, #84]	@ (8001934 <DisplayVersion+0xb0>)
 80018e0:	f001 f972 	bl	8002bc8 <UART_puts>
 80018e4:	f00b f994 	bl	800cc10 <osKernelGetSysTimerFreq>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a13      	ldr	r2, [pc, #76]	@ (8001938 <DisplayVersion+0xb4>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	0c9b      	lsrs	r3, r3, #18
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f984 	bl	8002c00 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 80018f8:	4810      	ldr	r0, [pc, #64]	@ (800193c <DisplayVersion+0xb8>)
 80018fa:	f001 f965 	bl	8002bc8 <UART_puts>
 80018fe:	f00b f97d 	bl	800cbfc <osKernelGetTickFreq>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f001 f97b 	bl	8002c00 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 800190a:	480d      	ldr	r0, [pc, #52]	@ (8001940 <DisplayVersion+0xbc>)
 800190c:	f001 f95c 	bl	8002bc8 <UART_puts>

    DisplayMenu();
 8001910:	f000 f818 	bl	8001944 <DisplayMenu>
}
 8001914:	bf00      	nop
 8001916:	3770      	adds	r7, #112	@ 0x70
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	08015e60 	.word	0x08015e60
 8001920:	20000004 	.word	0x20000004
 8001924:	20000000 	.word	0x20000000
 8001928:	08015fd0 	.word	0x08015fd0
 800192c:	08015fd8 	.word	0x08015fd8
 8001930:	08015fdc 	.word	0x08015fdc
 8001934:	08015fec 	.word	0x08015fec
 8001938:	431bde83 	.word	0x431bde83
 800193c:	08016008 	.word	0x08016008
 8001940:	08016020 	.word	0x08016020

08001944 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	char *menu =
 800194a:	4b04      	ldr	r3, [pc, #16]	@ (800195c <DisplayMenu+0x18>)
 800194c:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f001 f93a 	bl	8002bc8 <UART_puts>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	0801602c 	.word	0x0801602c

08001960 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f001 f83b 	bl	80029e4 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f001 f92a 	bl	8002bc8 <UART_puts>
 8001974:	4805      	ldr	r0, [pc, #20]	@ (800198c <error_HaltOS+0x2c>)
 8001976:	f001 f927 	bl	8002bc8 <UART_puts>

	BUZZER_put(1000);
 800197a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800197e:	f000 fdf7 	bl	8002570 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8001982:	f00d fa25 	bl	800edd0 <vTaskSuspendAll>

	while (TRUE)
 8001986:	bf00      	nop
 8001988:	e7fd      	b.n	8001986 <error_HaltOS+0x26>
 800198a:	bf00      	nop
 800198c:	0801626c 	.word	0x0801626c

08001990 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 8001996:	2001      	movs	r0, #1
 8001998:	f00b ff5d 	bl	800d856 <xQueueCreateMutex>
 800199c:	4603      	mov	r3, r0
 800199e:	4a36      	ldr	r2, [pc, #216]	@ (8001a78 <CreateHandles+0xe8>)
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <CreateHandles+0xe8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 80019aa:	4834      	ldr	r0, [pc, #208]	@ (8001a7c <CreateHandles+0xec>)
 80019ac:	f7ff ffd8 	bl	8001960 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 80019b0:	2200      	movs	r2, #0
 80019b2:	2104      	movs	r1, #4
 80019b4:	200a      	movs	r0, #10
 80019b6:	f00b fed6 	bl	800d766 <xQueueGenericCreate>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a30      	ldr	r2, [pc, #192]	@ (8001a80 <CreateHandles+0xf0>)
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <CreateHandles+0xf0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 80019c8:	482e      	ldr	r0, [pc, #184]	@ (8001a84 <CreateHandles+0xf4>)
 80019ca:	f7ff ffc9 	bl	8001960 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 80019ce:	2200      	movs	r2, #0
 80019d0:	2101      	movs	r1, #1
 80019d2:	2053      	movs	r0, #83	@ 0x53
 80019d4:	f00b fec7 	bl	800d766 <xQueueGenericCreate>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a2b      	ldr	r2, [pc, #172]	@ (8001a88 <CreateHandles+0xf8>)
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b2a      	ldr	r3, [pc, #168]	@ (8001a88 <CreateHandles+0xf8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d102      	bne.n	80019ec <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 80019e6:	4829      	ldr	r0, [pc, #164]	@ (8001a8c <CreateHandles+0xfc>)
 80019e8:	f7ff ffba 	bl	8001960 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 80019ec:	f00b fb64 	bl	800d0b8 <xEventGroupCreate>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a27      	ldr	r2, [pc, #156]	@ (8001a90 <CreateHandles+0x100>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <CreateHandles+0x100>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 80019fe:	4825      	ldr	r0, [pc, #148]	@ (8001a94 <CreateHandles+0x104>)
 8001a00:	f7ff ffae 	bl	8001960 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8001a04:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <CreateHandles+0x108>)
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a10:	4822      	ldr	r0, [pc, #136]	@ (8001a9c <CreateHandles+0x10c>)
 8001a12:	f00e fb97 	bl	8010144 <xTimerCreate>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a21      	ldr	r2, [pc, #132]	@ (8001aa0 <CreateHandles+0x110>)
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b20      	ldr	r3, [pc, #128]	@ (8001aa0 <CreateHandles+0x110>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8001a24:	481f      	ldr	r0, [pc, #124]	@ (8001aa4 <CreateHandles+0x114>)
 8001a26:	f7ff ff9b 	bl	8001960 <error_HaltOS>

	if (!(hGPS_Mutex = xSemaphoreCreateMutex()))
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f00b ff13 	bl	800d856 <xQueueCreateMutex>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <CreateHandles+0x118>)
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <CreateHandles+0x118>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <CreateHandles+0xb4>
		error_HaltOS("Error hGPS_Mutex");
 8001a3e:	481b      	ldr	r0, [pc, #108]	@ (8001aac <CreateHandles+0x11c>)
 8001a40:	f7ff ff8e 	bl	8001960 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8001a44:	481a      	ldr	r0, [pc, #104]	@ (8001ab0 <CreateHandles+0x120>)
 8001a46:	f001 f8bf 	bl	8002bc8 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8001a4a:	481a      	ldr	r0, [pc, #104]	@ (8001ab4 <CreateHandles+0x124>)
 8001a4c:	f001 f8bc 	bl	8002bc8 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8001a50:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a54:	f001 f8d4 	bl	8002c00 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <CreateHandles+0x110>)
 8001a5a:	681c      	ldr	r4, [r3, #0]
 8001a5c:	f00d fa64 	bl	800ef28 <xTaskGetTickCount>
 8001a60:	4602      	mov	r2, r0
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2300      	movs	r3, #0
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f00e fbc8 	bl	8010200 <xTimerGenericCommand>
}
 8001a70:	bf00      	nop
 8001a72:	3704      	adds	r7, #4
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	20002450 	.word	0x20002450
 8001a7c:	08016284 	.word	0x08016284
 8001a80:	20002448 	.word	0x20002448
 8001a84:	08016294 	.word	0x08016294
 8001a88:	2000244c 	.word	0x2000244c
 8001a8c:	080162a4 	.word	0x080162a4
 8001a90:	20002454 	.word	0x20002454
 8001a94:	080162b4 	.word	0x080162b4
 8001a98:	08001ab9 	.word	0x08001ab9
 8001a9c:	080162c8 	.word	0x080162c8
 8001aa0:	20002458 	.word	0x20002458
 8001aa4:	080162d0 	.word	0x080162d0
 8001aa8:	2000245c 	.word	0x2000245c
 8001aac:	080162e0 	.word	0x080162e0
 8001ab0:	080162f4 	.word	0x080162f4
 8001ab4:	08016318 	.word	0x08016318

08001ab8 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8001abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <Timer1_Handler+0x14>)
 8001ac2:	f002 fbb8 	bl	8004236 <HAL_GPIO_TogglePin>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020c00 	.word	0x40020c00

08001ad0 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <CreateTasks+0x5c>)
 8001ad8:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8001ada:	f00d f979 	bl	800edd0 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001ade:	e016      	b.n	8001b0e <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001ae0:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <CreateTasks+0x60>)
 8001ae2:	f001 f871 	bl	8002bc8 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 f86c 	bl	8002bc8 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3308      	adds	r3, #8
 8001afc:	461a      	mov	r2, r3
 8001afe:	f00b f893 	bl	800cc28 <osThreadNew>
 8001b02:	4602      	mov	r2, r0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3330      	adds	r3, #48	@ 0x30
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1e4      	bne.n	8001ae0 <CreateTasks+0x10>
	}

	UART_puts("\r\n");
 8001b16:	4807      	ldr	r0, [pc, #28]	@ (8001b34 <CreateTasks+0x64>)
 8001b18:	f001 f856 	bl	8002bc8 <UART_puts>
	xTaskResumeAll();   // start nu de scheduler: play ball
 8001b1c:	f00d f966 	bl	800edec <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8001b20:	f000 f88e 	bl	8001c40 <DisplayTaskData>
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	0801632c 	.word	0x0801632c
 8001b34:	08016338 	.word	0x08016338

08001b38 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <SetTaskPriority+0x6c>)
 8001b44:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001b46:	2301      	movs	r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	e023      	b.n	8001b94 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d119      	bne.n	8001b88 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00c ff1e 	bl	800e9a4 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8001b68:	480f      	ldr	r0, [pc, #60]	@ (8001ba8 <SetTaskPriority+0x70>)
 8001b6a:	f001 f82d 	bl	8002bc8 <UART_puts>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f001 f828 	bl	8002bc8 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 8001b78:	480c      	ldr	r0, [pc, #48]	@ (8001bac <SetTaskPriority+0x74>)
 8001b7a:	f001 f825 	bl	8002bc8 <UART_puts>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 f83d 	bl	8002c00 <UART_putint>
			return;
 8001b86:	e009      	b.n	8001b9c <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3330      	adds	r3, #48	@ 0x30
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3301      	adds	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1d7      	bne.n	8001b4c <SetTaskPriority+0x14>
		}
}
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	0801633c 	.word	0x0801633c
 8001bac:	08016348 	.word	0x08016348

08001bb0 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	@ 0x38
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <StartStopTask+0x80>)
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bc0:	e02e      	b.n	8001c20 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d124      	bne.n	8001c14 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bcc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001bce:	f107 010c 	add.w	r1, r7, #12
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f00d fe0f 	bl	800f7f8 <vTaskGetInfo>
			UART_puts("\r\n");
 8001bda:	4816      	ldr	r0, [pc, #88]	@ (8001c34 <StartStopTask+0x84>)
 8001bdc:	f000 fff4 	bl	8002bc8 <UART_puts>
			UART_puts(ptd->attr.name);
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 ffef 	bl	8002bc8 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001bea:	7e3b      	ldrb	r3, [r7, #24]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d108      	bne.n	8001c02 <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8001bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00d f81b 	bl	800ec30 <vTaskResume>
				UART_puts(" resumed.");
 8001bfa:	480f      	ldr	r0, [pc, #60]	@ (8001c38 <StartStopTask+0x88>)
 8001bfc:	f000 ffe4 	bl	8002bc8 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8001c00:	e012      	b.n	8001c28 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8001c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c06:	4618      	mov	r0, r3
 8001c08:	f00c ff6a 	bl	800eae0 <vTaskSuspend>
				UART_puts(" suspended.");
 8001c0c:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <StartStopTask+0x8c>)
 8001c0e:	f000 ffdb 	bl	8002bc8 <UART_puts>
 8001c12:	e009      	b.n	8001c28 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c16:	3330      	adds	r3, #48	@ 0x30
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1cc      	bne.n	8001bc2 <StartStopTask+0x12>
		}
}
 8001c28:	3738      	adds	r7, #56	@ 0x38
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008
 8001c34:	08016338 	.word	0x08016338
 8001c38:	0801635c 	.word	0x0801635c
 8001c3c:	08016368 	.word	0x08016368

08001c40 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08e      	sub	sp, #56	@ 0x38
 8001c44:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <DisplayTaskData+0x124>)
 8001c48:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001c4e:	2301      	movs	r3, #1
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c52:	e062      	b.n	8001d1a <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8001c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f00d fe4f 	bl	800f8fc <uxTaskGetStackHighWaterMark>
 8001c5e:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8001c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c62:	2264      	movs	r2, #100	@ 0x64
 8001c64:	fb03 f202 	mul.w	r2, r3, r2
 8001c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8001c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c78:	4413      	add	r3, r2
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c80:	4639      	mov	r1, r7
 8001c82:	2305      	movs	r3, #5
 8001c84:	2201      	movs	r2, #1
 8001c86:	f00d fdb7 	bl	800f7f8 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8001c8a:	4837      	ldr	r0, [pc, #220]	@ (8001d68 <DisplayTaskData+0x128>)
 8001c8c:	f000 ff9c 	bl	8002bc8 <UART_puts>
 8001c90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c92:	f000 ffb5 	bl	8002c00 <UART_putint>
 8001c96:	4835      	ldr	r0, [pc, #212]	@ (8001d6c <DisplayTaskData+0x12c>)
 8001c98:	f000 ff96 	bl	8002bc8 <UART_puts>
		UART_puts(ptd->attr.name);
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 ff91 	bl	8002bc8 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8001ca6:	4832      	ldr	r0, [pc, #200]	@ (8001d70 <DisplayTaskData+0x130>)
 8001ca8:	f000 ff8e 	bl	8002bc8 <UART_puts>
 8001cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 ffa5 	bl	8002c00 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8001cb6:	482f      	ldr	r0, [pc, #188]	@ (8001d74 <DisplayTaskData+0x134>)
 8001cb8:	f000 ff86 	bl	8002bc8 <UART_puts>
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 ff9c 	bl	8002c00 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 8001cc8:	482b      	ldr	r0, [pc, #172]	@ (8001d78 <DisplayTaskData+0x138>)
 8001cca:	f000 ff7d 	bl	8002bc8 <UART_puts>
 8001cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f000 ff91 	bl	8002c00 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <DisplayTaskData+0x13c>)
 8001ce0:	f000 ff72 	bl	8002bc8 <UART_puts>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 ff88 	bl	8002c00 <UART_putint>
 8001cf0:	4823      	ldr	r0, [pc, #140]	@ (8001d80 <DisplayTaskData+0x140>)
 8001cf2:	f000 ff69 	bl	8002bc8 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8001cf6:	4823      	ldr	r0, [pc, #140]	@ (8001d84 <DisplayTaskData+0x144>)
 8001cf8:	f000 ff66 	bl	8002bc8 <UART_puts>
 8001cfc:	7b3b      	ldrb	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d101      	bne.n	8001d06 <DisplayTaskData+0xc6>
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <DisplayTaskData+0x148>)
 8001d04:	e000      	b.n	8001d08 <DisplayTaskData+0xc8>
 8001d06:	4b21      	ldr	r3, [pc, #132]	@ (8001d8c <DisplayTaskData+0x14c>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 ff5d 	bl	8002bc8 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d10:	3330      	adds	r3, #48	@ 0x30
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d16:	3301      	adds	r3, #1
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d198      	bne.n	8001c54 <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 8001d22:	481b      	ldr	r0, [pc, #108]	@ (8001d90 <DisplayTaskData+0x150>)
 8001d24:	f000 ff50 	bl	8002bc8 <UART_puts>
 8001d28:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8001d2c:	f000 ff68 	bl	8002c00 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 8001d30:	4818      	ldr	r0, [pc, #96]	@ (8001d94 <DisplayTaskData+0x154>)
 8001d32:	f000 ff49 	bl	8002bc8 <UART_puts>
 8001d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 ff60 	bl	8002c00 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 8001d40:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <DisplayTaskData+0x158>)
 8001d42:	f000 ff41 	bl	8002bc8 <UART_puts>
 8001d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d48:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 ff56 	bl	8002c00 <UART_putint>
	UART_puts("\r\n");
 8001d54:	4811      	ldr	r0, [pc, #68]	@ (8001d9c <DisplayTaskData+0x15c>)
 8001d56:	f000 ff37 	bl	8002bc8 <UART_puts>
}
 8001d5a:	bf00      	nop
 8001d5c:	3738      	adds	r7, #56	@ 0x38
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000008 	.word	0x20000008
 8001d68:	08016374 	.word	0x08016374
 8001d6c:	0801637c 	.word	0x0801637c
 8001d70:	08016380 	.word	0x08016380
 8001d74:	08016390 	.word	0x08016390
 8001d78:	080163a0 	.word	0x080163a0
 8001d7c:	080163ac 	.word	0x080163ac
 8001d80:	080163b8 	.word	0x080163b8
 8001d84:	080163bc 	.word	0x080163bc
 8001d88:	080163c8 	.word	0x080163c8
 8001d8c:	080163d4 	.word	0x080163d4
 8001d90:	080163dc 	.word	0x080163dc
 8001d94:	080163ec 	.word	0x080163ec
 8001d98:	08016408 	.word	0x08016408
 8001d9c:	08016338 	.word	0x08016338

08001da0 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,

	osThreadId_t hTask;

	if (!(hTask = xTaskGetHandle("GPS_parser")))
 8001da8:	485c      	ldr	r0, [pc, #368]	@ (8001f1c <fill_GNRMC+0x17c>)
 8001daa:	f00d f93b 	bl	800f024 <xTaskGetHandle>
 8001dae:	6178      	str	r0, [r7, #20]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <fill_GNRMC+0x1c>
				error_HaltOS("Err:ARM_hndle");
 8001db6:	485a      	ldr	r0, [pc, #360]	@ (8001f20 <fill_GNRMC+0x180>)
 8001db8:	f7ff fdd2 	bl	8001960 <error_HaltOS>

	char *tok = ",";
 8001dbc:	4b59      	ldr	r3, [pc, #356]	@ (8001f24 <fill_GNRMC+0x184>)
 8001dbe:	613b      	str	r3, [r7, #16]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 8001dc0:	2247      	movs	r2, #71	@ 0x47
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4858      	ldr	r0, [pc, #352]	@ (8001f28 <fill_GNRMC+0x188>)
 8001dc6:	f011 f982 	bl	80130ce <memset>

	s = strtok(message, tok); // 0. header;
 8001dca:	6939      	ldr	r1, [r7, #16]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f011 f9a5 	bl	801311c <strtok>
 8001dd2:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.head, s);
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	4854      	ldr	r0, [pc, #336]	@ (8001f28 <fill_GNRMC+0x188>)
 8001dd8:	f011 fae1 	bl	801339e <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	2000      	movs	r0, #0
 8001de0:	f011 f99c 	bl	801311c <strtok>
 8001de4:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 2. valid;
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	2000      	movs	r0, #0
 8001dea:	f011 f997 	bl	801311c <strtok>
 8001dee:	60f8      	str	r0, [r7, #12]
	gnrmc.status = s[0];
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f28 <fill_GNRMC+0x188>)
 8001df6:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001df8:	6939      	ldr	r1, [r7, #16]
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f011 f98e 	bl	801311c <strtok>
 8001e00:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.latitude, s);
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4849      	ldr	r0, [pc, #292]	@ (8001f2c <fill_GNRMC+0x18c>)
 8001e06:	f011 faca 	bl	801339e <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001e0a:	6939      	ldr	r1, [r7, #16]
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f011 f985 	bl	801311c <strtok>
 8001e12:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 5. longitude;
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	2000      	movs	r0, #0
 8001e18:	f011 f980 	bl	801311c <strtok>
 8001e1c:	60f8      	str	r0, [r7, #12]
	if (s[0] == '0') // if leading '0' is present, remove it
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b30      	cmp	r3, #48	@ 0x30
 8001e24:	d10a      	bne.n	8001e3c <fill_GNRMC+0x9c>
		memmove(s, s + 1, strlen(s)); // remove leading '0' if present
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1c5c      	adds	r4, r3, #1
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7fe fa20 	bl	8000270 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f011 f92f 	bl	801309a <memmove>
	strcpy(gnrmc.longitude, s);
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	483c      	ldr	r0, [pc, #240]	@ (8001f30 <fill_GNRMC+0x190>)
 8001e40:	f011 faad 	bl	801339e <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001e44:	6939      	ldr	r1, [r7, #16]
 8001e46:	2000      	movs	r0, #0
 8001e48:	f011 f968 	bl	801311c <strtok>
 8001e4c:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 7. speed;
 8001e4e:	6939      	ldr	r1, [r7, #16]
 8001e50:	2000      	movs	r0, #0
 8001e52:	f011 f963 	bl	801311c <strtok>
 8001e56:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.speed, s);
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	4836      	ldr	r0, [pc, #216]	@ (8001f34 <fill_GNRMC+0x194>)
 8001e5c:	f011 fa9f 	bl	801339e <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	2000      	movs	r0, #0
 8001e64:	f011 f95a 	bl	801311c <strtok>
 8001e68:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.course, s);
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4832      	ldr	r0, [pc, #200]	@ (8001f38 <fill_GNRMC+0x198>)
 8001e6e:	f011 fa96 	bl	801339e <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001e72:	4b32      	ldr	r3, [pc, #200]	@ (8001f3c <fill_GNRMC+0x19c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d025      	beq.n	8001eca <fill_GNRMC+0x12a>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001e7e:	4830      	ldr	r0, [pc, #192]	@ (8001f40 <fill_GNRMC+0x1a0>)
 8001e80:	f000 fea2 	bl	8002bc8 <UART_puts>
 8001e84:	4828      	ldr	r0, [pc, #160]	@ (8001f28 <fill_GNRMC+0x188>)
 8001e86:	f000 fe9f 	bl	8002bc8 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001e8a:	482e      	ldr	r0, [pc, #184]	@ (8001f44 <fill_GNRMC+0x1a4>)
 8001e8c:	f000 fe9c 	bl	8002bc8 <UART_puts>
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <fill_GNRMC+0x188>)
 8001e92:	7c5b      	ldrb	r3, [r3, #17]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fe85 	bl	8002ba4 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001e9a:	482b      	ldr	r0, [pc, #172]	@ (8001f48 <fill_GNRMC+0x1a8>)
 8001e9c:	f000 fe94 	bl	8002bc8 <UART_puts>
 8001ea0:	4822      	ldr	r0, [pc, #136]	@ (8001f2c <fill_GNRMC+0x18c>)
 8001ea2:	f000 fe91 	bl	8002bc8 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001ea6:	4829      	ldr	r0, [pc, #164]	@ (8001f4c <fill_GNRMC+0x1ac>)
 8001ea8:	f000 fe8e 	bl	8002bc8 <UART_puts>
 8001eac:	4820      	ldr	r0, [pc, #128]	@ (8001f30 <fill_GNRMC+0x190>)
 8001eae:	f000 fe8b 	bl	8002bc8 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001eb2:	4827      	ldr	r0, [pc, #156]	@ (8001f50 <fill_GNRMC+0x1b0>)
 8001eb4:	f000 fe88 	bl	8002bc8 <UART_puts>
 8001eb8:	481e      	ldr	r0, [pc, #120]	@ (8001f34 <fill_GNRMC+0x194>)
 8001eba:	f000 fe85 	bl	8002bc8 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001ebe:	4825      	ldr	r0, [pc, #148]	@ (8001f54 <fill_GNRMC+0x1b4>)
 8001ec0:	f000 fe82 	bl	8002bc8 <UART_puts>
 8001ec4:	481c      	ldr	r0, [pc, #112]	@ (8001f38 <fill_GNRMC+0x198>)
 8001ec6:	f000 fe7f 	bl	8002bc8 <UART_puts>
	}

	// Filling, and swapping the GNRMC buffers, using a mutex so that the reader task does not read half filled buffers
	if (xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001eca:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <fill_GNRMC+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f00b ff5a 	bl	800dd8c <xQueueSemaphoreTake>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d119      	bne.n	8001f12 <fill_GNRMC+0x172>
	{
		memcpy((void*)writerBuffer, &gnrmc, sizeof(GNRMC)); // copy data to writerBuffer
 8001ede:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <fill_GNRMC+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a11      	ldr	r2, [pc, #68]	@ (8001f28 <fill_GNRMC+0x188>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	2347      	movs	r3, #71	@ 0x47
 8001eea:	461a      	mov	r2, r3
 8001eec:	f011 fa5f 	bl	80133ae <memcpy>

		GNRMC *temp = writerBuffer; // swap buffers
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <fill_GNRMC+0x1bc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60bb      	str	r3, [r7, #8]
		writerBuffer = readerBuffer; // swap writer and reader buffers
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <fill_GNRMC+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <fill_GNRMC+0x1bc>)
 8001efc:	6013      	str	r3, [r2, #0]
		readerBuffer = temp;
 8001efe:	4a18      	ldr	r2, [pc, #96]	@ (8001f60 <fill_GNRMC+0x1c0>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(hGPS_Mutex); // release mutex
 8001f04:	4b14      	ldr	r3, [pc, #80]	@ (8001f58 <fill_GNRMC+0x1b8>)
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	f00b fcbb 	bl	800d888 <xQueueGenericSend>
	}

}
 8001f12:	bf00      	nop
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd90      	pop	{r4, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	08016420 	.word	0x08016420
 8001f20:	0801642c 	.word	0x0801642c
 8001f24:	0801643c 	.word	0x0801643c
 8001f28:	20002460 	.word	0x20002460
 8001f2c:	20002472 	.word	0x20002472
 8001f30:	2000247d 	.word	0x2000247d
 8001f34:	20002488 	.word	0x20002488
 8001f38:	2000248e 	.word	0x2000248e
 8001f3c:	20002444 	.word	0x20002444
 8001f40:	08016440 	.word	0x08016440
 8001f44:	08016450 	.word	0x08016450
 8001f48:	08016460 	.word	0x08016460
 8001f4c:	08016470 	.word	0x08016470
 8001f50:	08016480 	.word	0x08016480
 8001f54:	08016490 	.word	0x08016490
 8001f58:	2000245c 	.word	0x2000245c
 8001f5c:	20000248 	.word	0x20000248
 8001f60:	2000024c 	.word	0x2000024c

08001f64 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b09c      	sub	sp, #112	@ 0x70
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001f70:	2300      	movs	r3, #0
 8001f72:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001f74:	2300      	movs	r3, #0
 8001f76:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001f78:	4855      	ldr	r0, [pc, #340]	@ (80020d0 <GPS_getNMEA+0x16c>)
 8001f7a:	f000 fe25 	bl	8002bc8 <UART_puts>
 8001f7e:	4855      	ldr	r0, [pc, #340]	@ (80020d4 <GPS_getNMEA+0x170>)
 8001f80:	f000 fe22 	bl	8002bc8 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001f84:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <GPS_getNMEA+0x174>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	4618      	mov	r0, r3
 8001f92:	f00b fe19 	bl	800dbc8 <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 8001f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001f9a:	2b24      	cmp	r3, #36	@ 0x24
 8001f9c:	d10a      	bne.n	8001fb4 <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001f9e:	f107 030c 	add.w	r3, r7, #12
 8001fa2:	2253      	movs	r2, #83	@ 0x53
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f011 f891 	bl	80130ce <memset>
			pos = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8088 	beq.w	80020cc <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 8001fbc:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 8001fc0:	f107 020c 	add.w	r2, r7, #12
 8001fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fc6:	4413      	add	r3, r2
 8001fc8:	460a      	mov	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d130      	bne.n	8002034 <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	3301      	adds	r3, #1
 8001fdc:	2205      	movs	r2, #5
 8001fde:	493f      	ldr	r1, [pc, #252]	@ (80020dc <GPS_getNMEA+0x178>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f011 f889 	bl	80130f8 <strncmp>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <GPS_getNMEA+0x8e>
 8001fec:	2301      	movs	r3, #1
 8001fee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ff0:	e01a      	b.n	8002028 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	2205      	movs	r2, #5
 8001ffa:	4939      	ldr	r1, [pc, #228]	@ (80020e0 <GPS_getNMEA+0x17c>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f011 f87b 	bl	80130f8 <strncmp>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <GPS_getNMEA+0xaa>
 8002008:	2302      	movs	r3, #2
 800200a:	667b      	str	r3, [r7, #100]	@ 0x64
 800200c:	e00c      	b.n	8002028 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	3301      	adds	r3, #1
 8002014:	2205      	movs	r2, #5
 8002016:	4933      	ldr	r1, [pc, #204]	@ (80020e4 <GPS_getNMEA+0x180>)
 8002018:	4618      	mov	r0, r3
 800201a:	f011 f86d 	bl	80130f8 <strncmp>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <GPS_getNMEA+0xc4>
 8002024:	2303      	movs	r3, #3
 8002026:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8002028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 800202e:	2300      	movs	r3, #0
 8002030:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 8002032:	e04c      	b.n	80020ce <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8002034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002036:	2b51      	cmp	r3, #81	@ 0x51
 8002038:	dd02      	ble.n	8002040 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 800203a:	2300      	movs	r3, #0
 800203c:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 800203e:	e046      	b.n	80020ce <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8002040:	f107 020c 	add.w	r2, r7, #12
 8002044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b0d      	cmp	r3, #13
 800204c:	d13a      	bne.n	80020c4 <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 800204e:	f107 020c 	add.w	r2, r7, #12
 8002052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002054:	4413      	add	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f88e 	bl	8002180 <checksum_valid>
 8002064:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <GPS_getNMEA+0x184>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8002072:	481e      	ldr	r0, [pc, #120]	@ (80020ec <GPS_getNMEA+0x188>)
 8002074:	f000 fda8 	bl	8002bc8 <UART_puts>
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fda3 	bl	8002bc8 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8002082:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <GPS_getNMEA+0x128>
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <GPS_getNMEA+0x18c>)
 800208a:	e000      	b.n	800208e <GPS_getNMEA+0x12a>
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <GPS_getNMEA+0x190>)
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fd9a 	bl	8002bc8 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 8002094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002096:	2b00      	cmp	r3, #0
 8002098:	d011      	beq.n	80020be <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 800209a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800209c:	2b01      	cmp	r3, #1
 800209e:	d007      	beq.n	80020b0 <GPS_getNMEA+0x14c>
 80020a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	dd0a      	ble.n	80020bc <GPS_getNMEA+0x158>
 80020a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020a8:	3b02      	subs	r3, #2
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d806      	bhi.n	80020bc <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 80020ae:	e006      	b.n	80020be <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fe73 	bl	8001da0 <fill_GNRMC>
						     break;
 80020ba:	e000      	b.n	80020be <GPS_getNMEA+0x15a>
				default:     break;
 80020bc:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 80020be:	2300      	movs	r3, #0
 80020c0:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80020c2:	e004      	b.n	80020ce <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 80020c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020c6:	3301      	adds	r3, #1
 80020c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020ca:	e75b      	b.n	8001f84 <GPS_getNMEA+0x20>
			continue;
 80020cc:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80020ce:	e759      	b.n	8001f84 <GPS_getNMEA+0x20>
 80020d0:	080165fc 	.word	0x080165fc
 80020d4:	080164a0 	.word	0x080164a0
 80020d8:	2000244c 	.word	0x2000244c
 80020dc:	080164ac 	.word	0x080164ac
 80020e0:	080164b4 	.word	0x080164b4
 80020e4:	080164bc 	.word	0x080164bc
 80020e8:	20002444 	.word	0x20002444
 80020ec:	080164c4 	.word	0x080164c4
 80020f0:	080164d4 	.word	0x080164d4
 80020f4:	080164e0 	.word	0x080164e0

080020f8 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f813 	bl	8002130 <hexchar2int>
 800210a:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f000 f809 	bl	8002130 <hexchar2int>
 800211e:	4602      	mov	r2, r0
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

	return value;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <hexchar2int>:


int hexchar2int(char c)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2b2f      	cmp	r3, #47	@ 0x2f
 800213e:	d905      	bls.n	800214c <hexchar2int+0x1c>
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	2b39      	cmp	r3, #57	@ 0x39
 8002144:	d802      	bhi.n	800214c <hexchar2int+0x1c>
        return (c - '0');
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	3b30      	subs	r3, #48	@ 0x30
 800214a:	e013      	b.n	8002174 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	2b40      	cmp	r3, #64	@ 0x40
 8002150:	d905      	bls.n	800215e <hexchar2int+0x2e>
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	2b46      	cmp	r3, #70	@ 0x46
 8002156:	d802      	bhi.n	800215e <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	3b37      	subs	r3, #55	@ 0x37
 800215c:	e00a      	b.n	8002174 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b60      	cmp	r3, #96	@ 0x60
 8002162:	d905      	bls.n	8002170 <hexchar2int+0x40>
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b66      	cmp	r3, #102	@ 0x66
 8002168:	d802      	bhi.n	8002170 <hexchar2int+0x40>
        return (c - 'a' + 10);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	3b57      	subs	r3, #87	@ 0x57
 800216e:	e001      	b.n	8002174 <hexchar2int+0x44>
    return (-1);
 8002170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 800218c:	212a      	movs	r1, #42	@ 0x2a
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f010 ffa5 	bl	80130de <strchr>
 8002194:	60f8      	str	r0, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d022      	beq.n	80021e2 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e009      	b.n	80021bc <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	7cfb      	ldrb	r3, [r7, #19]
 80021b2:	4053      	eors	r3, r2
 80021b4:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3301      	adds	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7fe f857 	bl	8000270 <strlen>
 80021c2:	4602      	mov	r2, r0
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d8ee      	bhi.n	80021a8 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff92 	bl	80020f8 <hex2int>
 80021d4:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d101      	bne.n	80021e2 <checksum_valid+0x62>
			return (1);
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <checksum_valid+0x64>
	}

	return (0);
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80021f4:	4820      	ldr	r0, [pc, #128]	@ (8002278 <LED_Task1+0x8c>)
 80021f6:	f000 fce7 	bl	8002bc8 <UART_puts>
 80021fa:	4820      	ldr	r0, [pc, #128]	@ (800227c <LED_Task1+0x90>)
 80021fc:	f000 fce4 	bl	8002bc8 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <LED_Task1+0x94>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f04f 31ff 	mov.w	r1, #4294967295
 8002208:	4618      	mov	r0, r3
 800220a:	f00b fdbf 	bl	800dd8c <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e01c      	b.n	8002252 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fc87 	bl	8002b30 <LED_put>
           	osDelay(os_delay);
 8002222:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <LED_Task1+0x98>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f00a fd90 	bl	800cd4c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800222c:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <LED_Task1+0x9c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8002238:	4814      	ldr	r0, [pc, #80]	@ (800228c <LED_Task1+0xa0>)
 800223a:	f000 fcc5 	bl	8002bc8 <UART_puts>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fcdd 	bl	8002c00 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	105b      	asrs	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b07      	cmp	r3, #7
 8002256:	dddf      	ble.n	8002218 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <LED_Task1+0x94>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	2300      	movs	r3, #0
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	f00b fb11 	bl	800d888 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <LED_Task1+0xa4>)
 8002268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8002276:	e7c3      	b.n	8002200 <LED_Task1+0x14>
 8002278:	08016608 	.word	0x08016608
 800227c:	080164ec 	.word	0x080164ec
 8002280:	20002450 	.word	0x20002450
 8002284:	20000250 	.word	0x20000250
 8002288:	20002444 	.word	0x20002444
 800228c:	080164f8 	.word	0x080164f8
 8002290:	e000ed04 	.word	0xe000ed04

08002294 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800229c:	4820      	ldr	r0, [pc, #128]	@ (8002320 <LED_Task2+0x8c>)
 800229e:	f000 fc93 	bl	8002bc8 <UART_puts>
 80022a2:	4820      	ldr	r0, [pc, #128]	@ (8002324 <LED_Task2+0x90>)
 80022a4:	f000 fc90 	bl	8002bc8 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 80022a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <LED_Task2+0x94>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fd6b 	bl	800dd8c <xQueueSemaphoreTake>
		leds = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e01c      	b.n	80022fa <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fc33 	bl	8002b30 <LED_put>
          	osDelay(os_delay);
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <LED_Task2+0x98>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00a fd3c 	bl	800cd4c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <LED_Task2+0x9c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 80022e0:	4814      	ldr	r0, [pc, #80]	@ (8002334 <LED_Task2+0xa0>)
 80022e2:	f000 fc71 	bl	8002bc8 <UART_puts>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fc89 	bl	8002c00 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	dddf      	ble.n	80022c0 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8002300:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <LED_Task2+0x94>)
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	f00b fabd 	bl	800d888 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 800230e:	4b0a      	ldr	r3, [pc, #40]	@ (8002338 <LED_Task2+0xa4>)
 8002310:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 800231e:	e7c3      	b.n	80022a8 <LED_Task2+0x14>
 8002320:	08016614 	.word	0x08016614
 8002324:	080164ec 	.word	0x080164ec
 8002328:	20002450 	.word	0x20002450
 800232c:	20000250 	.word	0x20000250
 8002330:	20002444 	.word	0x20002444
 8002334:	08016504 	.word	0x08016504
 8002338:	e000ed04 	.word	0xe000ed04

0800233c <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8002344:	4830      	ldr	r0, [pc, #192]	@ (8002408 <LED_Task3+0xcc>)
 8002346:	f00c fe6d 	bl	800f024 <xTaskGetHandle>
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8002352:	482e      	ldr	r0, [pc, #184]	@ (800240c <LED_Task3+0xd0>)
 8002354:	f7ff fb04 	bl	8001960 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002358:	482d      	ldr	r0, [pc, #180]	@ (8002410 <LED_Task3+0xd4>)
 800235a:	f000 fc35 	bl	8002bc8 <UART_puts>
 800235e:	482d      	ldr	r0, [pc, #180]	@ (8002414 <LED_Task3+0xd8>)
 8002360:	f000 fc32 	bl	8002bc8 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002364:	4b2c      	ldr	r3, [pc, #176]	@ (8002418 <LED_Task3+0xdc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	4618      	mov	r0, r3
 800236e:	f00b fd0d 	bl	800dd8c <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e02d      	b.n	80023d4 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <LED_Task3+0x48>
 800237e:	2318      	movs	r3, #24
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	e00d      	b.n	80023a0 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <LED_Task3+0x54>
 800238a:	2324      	movs	r3, #36	@ 0x24
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	e007      	b.n	80023a0 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d102      	bne.n	800239c <LED_Task3+0x60>
 8002396:	2342      	movs	r3, #66	@ 0x42
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e001      	b.n	80023a0 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 800239c:	2381      	movs	r3, #129	@ 0x81
 800239e:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fbc3 	bl	8002b30 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <LED_Task3+0xe0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00a fccc 	bl	800cd4c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80023b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <LED_Task3+0xe4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 80023c0:	4818      	ldr	r0, [pc, #96]	@ (8002424 <LED_Task3+0xe8>)
 80023c2:	f000 fc01 	bl	8002bc8 <UART_puts>
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fc19 	bl	8002c00 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	ddce      	ble.n	8002378 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80023da:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <LED_Task3+0xdc>)
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	f00b fa50 	bl	800d888 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 80023e8:	2300      	movs	r3, #0
 80023ea:	2202      	movs	r2, #2
 80023ec:	2100      	movs	r1, #0
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f00d fd48 	bl	800fe84 <xTaskGenericNotify>
		osDelay(200);
 80023f4:	20c8      	movs	r0, #200	@ 0xc8
 80023f6:	f00a fca9 	bl	800cd4c <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 80023fa:	f04f 31ff 	mov.w	r1, #4294967295
 80023fe:	2001      	movs	r0, #1
 8002400:	f00d fc94 	bl	800fd2c <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002404:	e7ae      	b.n	8002364 <LED_Task3+0x28>
 8002406:	bf00      	nop
 8002408:	08016510 	.word	0x08016510
 800240c:	0801651c 	.word	0x0801651c
 8002410:	08016620 	.word	0x08016620
 8002414:	080164ec 	.word	0x080164ec
 8002418:	20002450 	.word	0x20002450
 800241c:	20000250 	.word	0x20000250
 8002420:	20002444 	.word	0x20002444
 8002424:	08016528 	.word	0x08016528

08002428 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002430:	4830      	ldr	r0, [pc, #192]	@ (80024f4 <LED_Task4+0xcc>)
 8002432:	f00c fdf7 	bl	800f024 <xTaskGetHandle>
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 800243e:	482e      	ldr	r0, [pc, #184]	@ (80024f8 <LED_Task4+0xd0>)
 8002440:	f7ff fa8e 	bl	8001960 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002444:	482d      	ldr	r0, [pc, #180]	@ (80024fc <LED_Task4+0xd4>)
 8002446:	f000 fbbf 	bl	8002bc8 <UART_puts>
 800244a:	482d      	ldr	r0, [pc, #180]	@ (8002500 <LED_Task4+0xd8>)
 800244c:	f000 fbbc 	bl	8002bc8 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	2001      	movs	r0, #1
 8002456:	f00d fc69 	bl	800fd2c <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800245a:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <LED_Task4+0xdc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f04f 31ff 	mov.w	r1, #4294967295
 8002462:	4618      	mov	r0, r3
 8002464:	f00b fc92 	bl	800dd8c <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e02d      	b.n	80024ca <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <LED_Task4+0x52>
 8002474:	2381      	movs	r3, #129	@ 0x81
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	e00d      	b.n	8002496 <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d102      	bne.n	8002486 <LED_Task4+0x5e>
 8002480:	2342      	movs	r3, #66	@ 0x42
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	e007      	b.n	8002496 <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d102      	bne.n	8002492 <LED_Task4+0x6a>
 800248c:	2324      	movs	r3, #36	@ 0x24
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	e001      	b.n	8002496 <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 8002492:	2318      	movs	r3, #24
 8002494:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	b29b      	uxth	r3, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fb48 	bl	8002b30 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <LED_Task4+0xe0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00a fc51 	bl	800cd4c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80024aa:	4b18      	ldr	r3, [pc, #96]	@ (800250c <LED_Task4+0xe4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 80024b6:	4816      	ldr	r0, [pc, #88]	@ (8002510 <LED_Task4+0xe8>)
 80024b8:	f000 fb86 	bl	8002bc8 <UART_puts>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 fb9e 	bl	8002c00 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	3301      	adds	r3, #1
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	ddce      	ble.n	800246e <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <LED_Task4+0xdc>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	f00b f9d5 	bl	800d888 <xQueueGenericSend>
		osDelay(200);
 80024de:	20c8      	movs	r0, #200	@ 0xc8
 80024e0:	f00a fc34 	bl	800cd4c <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80024e4:	2300      	movs	r3, #0
 80024e6:	2202      	movs	r2, #2
 80024e8:	2100      	movs	r1, #0
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f00d fcca 	bl	800fe84 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 80024f0:	e7ae      	b.n	8002450 <LED_Task4+0x28>
 80024f2:	bf00      	nop
 80024f4:	08016538 	.word	0x08016538
 80024f8:	08016544 	.word	0x08016544
 80024fc:	0801662c 	.word	0x0801662c
 8002500:	080164ec 	.word	0x080164ec
 8002504:	20002450 	.word	0x20002450
 8002508:	20000250 	.word	0x20000250
 800250c:	20002444 	.word	0x20002444
 8002510:	08016550 	.word	0x08016550

08002514 <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b098      	sub	sp, #96	@ 0x60
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800251c:	4810      	ldr	r0, [pc, #64]	@ (8002560 <Student_task1+0x4c>)
 800251e:	f000 fb53 	bl	8002bc8 <UART_puts>
 8002522:	4810      	ldr	r0, [pc, #64]	@ (8002564 <Student_task1+0x50>)
 8002524:	f000 fb50 	bl	8002bc8 <UART_puts>
	char buf[80];
	unsigned int i = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 800252c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002530:	f00a fc0c 	bl	800cd4c <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <Student_task1+0x54>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f5      	beq.n	800252c <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8002540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002546:	f107 000c 	add.w	r0, r7, #12
 800254a:	4a05      	ldr	r2, [pc, #20]	@ (8002560 <Student_task1+0x4c>)
 800254c:	4907      	ldr	r1, [pc, #28]	@ (800256c <Student_task1+0x58>)
 800254e:	f010 fd3f 	bl	8012fd0 <siprintf>
			UART_puts(buf);
 8002552:	f107 030c 	add.w	r3, r7, #12
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fb36 	bl	8002bc8 <UART_puts>
       	osDelay(1000);
 800255c:	e7e6      	b.n	800252c <Student_task1+0x18>
 800255e:	bf00      	nop
 8002560:	08016638 	.word	0x08016638
 8002564:	08016560 	.word	0x08016560
 8002568:	20002444 	.word	0x20002444
 800256c:	0801656c 	.word	0x0801656c

08002570 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 800257c:	e023      	b.n	80025c6 <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002584:	4815      	ldr	r0, [pc, #84]	@ (80025dc <BUZZER_put+0x6c>)
 8002586:	f001 fe3d 	bl	8004204 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e002      	b.n	8002596 <BUZZER_put+0x26>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	441a      	add	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d8f6      	bhi.n	8002590 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025a8:	480c      	ldr	r0, [pc, #48]	@ (80025dc <BUZZER_put+0x6c>)
 80025aa:	f001 fe2b 	bl	8004204 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e002      	b.n	80025ba <BUZZER_put+0x4a>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3301      	adds	r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	441a      	add	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d8f6      	bhi.n	80025b4 <BUZZER_put+0x44>
	while (k++<100)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	2b63      	cmp	r3, #99	@ 0x63
 80025ce:	d9d6      	bls.n	800257e <BUZZER_put+0xe>
	}
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40020800 	.word	0x40020800

080025e0 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	4b18      	ldr	r3, [pc, #96]	@ (800264c <KEYS_init+0x6c>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	4a17      	ldr	r2, [pc, #92]	@ (800264c <KEYS_init+0x6c>)
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f6:	4b15      	ldr	r3, [pc, #84]	@ (800264c <KEYS_init+0x6c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 800260e:	f640 030e 	movw	r3, #2062	@ 0x80e
 8002612:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	4619      	mov	r1, r3
 8002618:	480d      	ldr	r0, [pc, #52]	@ (8002650 <KEYS_init+0x70>)
 800261a:	f001 fc3f 	bl	8003e9c <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 800261e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002622:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002628:	2302      	movs	r3, #2
 800262a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4807      	ldr	r0, [pc, #28]	@ (8002650 <KEYS_init+0x70>)
 8002632:	f001 fc33 	bl	8003e9c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	f640 010e 	movw	r1, #2062	@ 0x80e
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <KEYS_init+0x70>)
 800263e:	f001 fde1 	bl	8004204 <HAL_GPIO_WritePin>
}
 8002642:	bf00      	nop
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40020c00 	.word	0x40020c00

08002654 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002666:	480e      	ldr	r0, [pc, #56]	@ (80026a0 <KEYS_initISR+0x4c>)
 8002668:	f001 fdcc 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	2102      	movs	r1, #2
 8002674:	480a      	ldr	r0, [pc, #40]	@ (80026a0 <KEYS_initISR+0x4c>)
 8002676:	f001 fdc5 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	2108      	movs	r1, #8
 8002682:	4807      	ldr	r0, [pc, #28]	@ (80026a0 <KEYS_initISR+0x4c>)
 8002684:	f001 fdbe 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	2104      	movs	r1, #4
 8002690:	4803      	ldr	r0, [pc, #12]	@ (80026a0 <KEYS_initISR+0x4c>)
 8002692:	f001 fdb7 	bl	8004204 <HAL_GPIO_WritePin>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40020c00 	.word	0x40020c00

080026a4 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026b8:	4827      	ldr	r0, [pc, #156]	@ (8002758 <KEYS_read+0xb4>)
 80026ba:	f001 fda3 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80026be:	2201      	movs	r2, #1
 80026c0:	2108      	movs	r1, #8
 80026c2:	4825      	ldr	r0, [pc, #148]	@ (8002758 <KEYS_read+0xb4>)
 80026c4:	f001 fd9e 	bl	8004204 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026c8:	f000 f848 	bl	800275c <KEYS_kolom>
 80026cc:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <KEYS_read+0x36>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2108      	movs	r1, #8
 80026de:	481e      	ldr	r0, [pc, #120]	@ (8002758 <KEYS_read+0xb4>)
 80026e0:	f001 fd90 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2104      	movs	r1, #4
 80026e8:	481b      	ldr	r0, [pc, #108]	@ (8002758 <KEYS_read+0xb4>)
 80026ea:	f001 fd8b 	bl	8004204 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026ee:	f000 f835 	bl	800275c <KEYS_kolom>
 80026f2:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <KEYS_read+0x5c>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3308      	adds	r3, #8
 80026fe:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	2104      	movs	r1, #4
 8002704:	4814      	ldr	r0, [pc, #80]	@ (8002758 <KEYS_read+0xb4>)
 8002706:	f001 fd7d 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 800270a:	2201      	movs	r2, #1
 800270c:	2102      	movs	r1, #2
 800270e:	4812      	ldr	r0, [pc, #72]	@ (8002758 <KEYS_read+0xb4>)
 8002710:	f001 fd78 	bl	8004204 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002714:	f000 f822 	bl	800275c <KEYS_kolom>
 8002718:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d002      	beq.n	8002726 <KEYS_read+0x82>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3304      	adds	r3, #4
 8002724:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2102      	movs	r1, #2
 800272a:	480b      	ldr	r0, [pc, #44]	@ (8002758 <KEYS_read+0xb4>)
 800272c:	f001 fd6a 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8002730:	2201      	movs	r2, #1
 8002732:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002736:	4808      	ldr	r0, [pc, #32]	@ (8002758 <KEYS_read+0xb4>)
 8002738:	f001 fd64 	bl	8004204 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800273c:	f000 f80e 	bl	800275c <KEYS_kolom>
 8002740:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <KEYS_read+0xa8>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	607b      	str	r3, [r7, #4]

	return out;
 800274c:	687b      	ldr	r3, [r7, #4]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40020c00 	.word	0x40020c00

0800275c <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8002766:	2140      	movs	r1, #64	@ 0x40
 8002768:	4814      	ldr	r0, [pc, #80]	@ (80027bc <KEYS_kolom+0x60>)
 800276a:	f001 fd33 	bl	80041d4 <HAL_GPIO_ReadPin>
 800276e:	4603      	mov	r3, r0
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <KEYS_kolom+0x1c>
 8002774:	2301      	movs	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002778:	2180      	movs	r1, #128	@ 0x80
 800277a:	4810      	ldr	r0, [pc, #64]	@ (80027bc <KEYS_kolom+0x60>)
 800277c:	f001 fd2a 	bl	80041d4 <HAL_GPIO_ReadPin>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <KEYS_kolom+0x2e>
 8002786:	2302      	movs	r3, #2
 8002788:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 800278a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800278e:	480b      	ldr	r0, [pc, #44]	@ (80027bc <KEYS_kolom+0x60>)
 8002790:	f001 fd20 	bl	80041d4 <HAL_GPIO_ReadPin>
 8002794:	4603      	mov	r3, r0
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <KEYS_kolom+0x42>
 800279a:	2303      	movs	r3, #3
 800279c:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 800279e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027a2:	4806      	ldr	r0, [pc, #24]	@ (80027bc <KEYS_kolom+0x60>)
 80027a4:	f001 fd16 	bl	80041d4 <HAL_GPIO_ReadPin>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <KEYS_kolom+0x56>
 80027ae:	2304      	movs	r3, #4
 80027b0:	607b      	str	r3, [r7, #4]
	return key;
 80027b2:	687b      	ldr	r3, [r7, #4]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40020c00 	.word	0x40020c00

080027c0 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2108      	movs	r1, #8
 80027c8:	4809      	ldr	r0, [pc, #36]	@ (80027f0 <ClearBits+0x30>)
 80027ca:	f001 fd1b 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2110      	movs	r1, #16
 80027d2:	4807      	ldr	r0, [pc, #28]	@ (80027f0 <ClearBits+0x30>)
 80027d4:	f001 fd16 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	2120      	movs	r1, #32
 80027dc:	4804      	ldr	r0, [pc, #16]	@ (80027f0 <ClearBits+0x30>)
 80027de:	f001 fd11 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2140      	movs	r1, #64	@ 0x40
 80027e6:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <ClearBits+0x30>)
 80027e8:	f001 fd0c 	bl	8004204 <HAL_GPIO_WritePin>
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000

080027f4 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 80027f8:	2001      	movs	r0, #1
 80027fa:	f000 f967 	bl	8002acc <LCD_writecontrol>
   curpos=0;               // reset position
 80027fe:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <LCD_clear+0x1c>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8002804:	2005      	movs	r0, #5
 8002806:	f001 f9b1 	bl	8003b6c <HAL_Delay>
//   busyflag();

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20002537 	.word	0x20002537

08002814 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	4b44      	ldr	r3, [pc, #272]	@ (8002930 <LCD_init+0x11c>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a43      	ldr	r2, [pc, #268]	@ (8002930 <LCD_init+0x11c>)
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b41      	ldr	r3, [pc, #260]	@ (8002930 <LCD_init+0x11c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	4b3d      	ldr	r3, [pc, #244]	@ (8002930 <LCD_init+0x11c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a3c      	ldr	r2, [pc, #240]	@ (8002930 <LCD_init+0x11c>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <LCD_init+0x11c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <LCD_init+0x11c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a35      	ldr	r2, [pc, #212]	@ (8002930 <LCD_init+0x11c>)
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <LCD_init+0x11c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002876:	2303      	movs	r3, #3
 8002878:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800287a:	2378      	movs	r3, #120	@ 0x78
 800287c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	482b      	ldr	r0, [pc, #172]	@ (8002934 <LCD_init+0x120>)
 8002886:	f001 fb09 	bl	8003e9c <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 800288a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800288e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	4619      	mov	r1, r3
 8002896:	4828      	ldr	r0, [pc, #160]	@ (8002938 <LCD_init+0x124>)
 8002898:	f001 fb00 	bl	8003e9c <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 800289c:	2301      	movs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4825      	ldr	r0, [pc, #148]	@ (800293c <LCD_init+0x128>)
 80028a8:	f001 faf8 	bl	8003e9c <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80028ac:	2200      	movs	r2, #0
 80028ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b2:	4821      	ldr	r0, [pc, #132]	@ (8002938 <LCD_init+0x124>)
 80028b4:	f001 fca6 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2101      	movs	r1, #1
 80028bc:	481f      	ldr	r0, [pc, #124]	@ (800293c <LCD_init+0x128>)
 80028be:	f001 fca1 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028c8:	481b      	ldr	r0, [pc, #108]	@ (8002938 <LCD_init+0x124>)
 80028ca:	f001 fc9b 	bl	8004204 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 80028ce:	200f      	movs	r0, #15
 80028d0:	f001 f94c 	bl	8003b6c <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 80028d4:	2030      	movs	r0, #48	@ 0x30
 80028d6:	f000 f8c7 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(70);
 80028da:	2046      	movs	r0, #70	@ 0x46
 80028dc:	f001 f946 	bl	8003b6c <HAL_Delay>
    LCD_writebyte(0x30);
 80028e0:	2030      	movs	r0, #48	@ 0x30
 80028e2:	f000 f8c1 	bl	8002a68 <LCD_writebyte>
    LCD_writebyte(0x30);
 80028e6:	2030      	movs	r0, #48	@ 0x30
 80028e8:	f000 f8be 	bl	8002a68 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 80028ec:	2002      	movs	r0, #2
 80028ee:	f000 f8bb 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(5);
 80028f2:	2005      	movs	r0, #5
 80028f4:	f001 f93a 	bl	8003b6c <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 80028f8:	202c      	movs	r0, #44	@ 0x2c
 80028fa:	f000 f8b5 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 80028fe:	200f      	movs	r0, #15
 8002900:	f001 f934 	bl	8003b6c <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8002904:	200c      	movs	r0, #12
 8002906:	f000 f8af 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 800290a:	200f      	movs	r0, #15
 800290c:	f001 f92e 	bl	8003b6c <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002910:	2001      	movs	r0, #1
 8002912:	f000 f8a9 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 8002916:	200f      	movs	r0, #15
 8002918:	f001 f928 	bl	8003b6c <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 800291c:	2006      	movs	r0, #6
 800291e:	f000 f8a3 	bl	8002a68 <LCD_writebyte>
    HAL_Delay(15);
 8002922:	200f      	movs	r0, #15
 8002924:	f001 f922 	bl	8003b6c <HAL_Delay>
}
 8002928:	bf00      	nop
 800292a:	3720      	adds	r7, #32
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	40021000 	.word	0x40021000
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00

08002940 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 800294a:	2201      	movs	r2, #1
 800294c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002950:	480b      	ldr	r0, [pc, #44]	@ (8002980 <LCD_putchar+0x40>)
 8002952:	f001 fc57 	bl	8004204 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8002956:	79fb      	ldrb	r3, [r7, #7]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 f885 	bl	8002a68 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <LCD_putchar+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b07      	ldr	r3, [pc, #28]	@ (8002984 <LCD_putchar+0x44>)
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <LCD_putchar+0x44>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b20      	cmp	r3, #32
 8002970:	d102      	bne.n	8002978 <LCD_putchar+0x38>
    	curpos=0;
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <LCD_putchar+0x44>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40020800 	.word	0x40020800
 8002984:	20002537 	.word	0x20002537

08002988 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
 8002994:	e019      	b.n	80029ca <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <LCD_put+0x58>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b08      	cmp	r3, #8
 800299c:	d10b      	bne.n	80029b6 <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e005      	b.n	80029b0 <LCD_put+0x28>
 80029a4:	2014      	movs	r0, #20
 80029a6:	f000 f891 	bl	8002acc <LCD_writecontrol>
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	3301      	adds	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b1f      	cmp	r3, #31
 80029b4:	d9f6      	bls.n	80029a4 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffbe 	bl	8002940 <LCD_putchar>
    for (k=0; string[k]; k++)
 80029c4:	7bbb      	ldrb	r3, [r7, #14]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73bb      	strb	r3, [r7, #14]
 80029ca:	7bbb      	ldrb	r3, [r7, #14]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1df      	bne.n	8002996 <LCD_put+0xe>
    }
}
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20002537 	.word	0x20002537

080029e4 <LCD_puts>:

void LCD_puts(char *c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ffcb 	bl	8002988 <LCD_put>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8002a06:	f7ff fedb 	bl	80027c0 <ClearBits>

    if (data & 0x01)
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d004      	beq.n	8002a1e <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2140      	movs	r1, #64	@ 0x40
 8002a18:	4812      	ldr	r0, [pc, #72]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a1a:	f001 fbf3 	bl	8004204 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a2e:	f001 fbe9 	bl	8004204 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d004      	beq.n	8002a46 <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	2110      	movs	r1, #16
 8002a40:	4808      	ldr	r0, [pc, #32]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a42:	f001 fbdf 	bl	8004204 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002a50:	2201      	movs	r2, #1
 8002a52:	2108      	movs	r1, #8
 8002a54:	4803      	ldr	r0, [pc, #12]	@ (8002a64 <LCD_writenibble+0x68>)
 8002a56:	f001 fbd5 	bl	8004204 <HAL_GPIO_WritePin>

}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000

08002a68 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a72:	2201      	movs	r2, #1
 8002a74:	2101      	movs	r1, #1
 8002a76:	4814      	ldr	r0, [pc, #80]	@ (8002ac8 <LCD_writebyte+0x60>)
 8002a78:	f001 fbc4 	bl	8004204 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ffba 	bl	80029fc <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	480e      	ldr	r0, [pc, #56]	@ (8002ac8 <LCD_writebyte+0x60>)
 8002a8e:	f001 fbb9 	bl	8004204 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002a92:	2002      	movs	r0, #2
 8002a94:	f001 f86a 	bl	8003b6c <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	480a      	ldr	r0, [pc, #40]	@ (8002ac8 <LCD_writebyte+0x60>)
 8002a9e:	f001 fbb1 	bl	8004204 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ffa6 	bl	80029fc <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <LCD_writebyte+0x60>)
 8002ab6:	f001 fba5 	bl	8004204 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002aba:	2002      	movs	r0, #2
 8002abc:	f001 f856 	bl	8003b6c <HAL_Delay>
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020c00 	.word	0x40020c00

08002acc <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002adc:	4805      	ldr	r0, [pc, #20]	@ (8002af4 <LCD_writecontrol+0x28>)
 8002ade:	f001 fb91 	bl	8004204 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ffbf 	bl	8002a68 <LCD_writebyte>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40020800 	.word	0x40020800

08002af8 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b02:	4809      	ldr	r0, [pc, #36]	@ (8002b28 <LED_init+0x30>)
 8002b04:	f001 fb7e 	bl	8004204 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b0e:	4807      	ldr	r0, [pc, #28]	@ (8002b2c <LED_init+0x34>)
 8002b10:	f001 fb78 	bl	8004204 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b14:	2201      	movs	r2, #1
 8002b16:	2102      	movs	r1, #2
 8002b18:	4804      	ldr	r0, [pc, #16]	@ (8002b2c <LED_init+0x34>)
 8002b1a:	f001 fb73 	bl	8004204 <HAL_GPIO_WritePin>
    LED_put(0);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f806 	bl	8002b30 <LED_put>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40020000 	.word	0x40020000
 8002b2c:	40020400 	.word	0x40020400

08002b30 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e01c      	b.n	8002b7a <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b56:	4811      	ldr	r0, [pc, #68]	@ (8002b9c <LED_put+0x6c>)
 8002b58:	f001 fb54 	bl	8004204 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b62:	480f      	ldr	r0, [pc, #60]	@ (8002ba0 <LED_put+0x70>)
 8002b64:	f001 fb4e 	bl	8004204 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b6e:	480c      	ldr	r0, [pc, #48]	@ (8002ba0 <LED_put+0x70>)
 8002b70:	f001 fb48 	bl	8004204 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1df      	bne.n	8002b40 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b80:	2201      	movs	r2, #1
 8002b82:	2102      	movs	r1, #2
 8002b84:	4806      	ldr	r0, [pc, #24]	@ (8002ba0 <LED_put+0x70>)
 8002b86:	f001 fb3d 	bl	8004204 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4804      	ldr	r0, [pc, #16]	@ (8002ba0 <LED_put+0x70>)
 8002b90:	f001 fb38 	bl	8004204 <HAL_GPIO_WritePin>
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40020000 	.word	0x40020000
 8002ba0:	40020400 	.word	0x40020400

08002ba4 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002bae:	1df9      	adds	r1, r7, #7
 8002bb0:	2364      	movs	r3, #100	@ 0x64
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	4803      	ldr	r0, [pc, #12]	@ (8002bc4 <UART_putchar+0x20>)
 8002bb6:	f005 fc15 	bl	80083e4 <HAL_UART_Transmit>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20002674 	.word	0x20002674

08002bc8 <UART_puts>:

void UART_puts(const char *s)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e009      	b.n	8002bea <UART_puts+0x22>
		UART_putchar(s[i]);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ffe0 	bl	8002ba4 <UART_putchar>
	for (i=0; s[i]; i++)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ef      	bne.n	8002bd6 <UART_puts+0xe>
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002c08:	210a      	movs	r1, #10
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f804 	bl	8002c18 <UART_putnum>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002c24:	230f      	movs	r3, #15
 8002c26:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d129      	bne.n	8002c82 <UART_putnum+0x6a>
    {
        c[i]='0';
 8002c2e:	f107 0208 	add.w	r2, r7, #8
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	2230      	movs	r2, #48	@ 0x30
 8002c38:	701a      	strb	r2, [r3, #0]
        i--;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	e030      	b.n	8002ca4 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c4a:	fb01 f202 	mul.w	r2, r1, r2
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <UART_putnum+0x9c>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	b259      	sxtb	r1, r3
 8002c66:	f107 0208 	add.w	r2, r7, #8
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	460a      	mov	r2, r1
 8002c70:	701a      	strb	r2, [r3, #0]
            i--;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <UART_putnum+0x6a>
                num=0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1dc      	bne.n	8002c42 <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002c88:	e00c      	b.n	8002ca4 <UART_putnum+0x8c>
    {
        i++;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002c90:	f107 0208 	add.w	r2, r7, #8
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff80 	bl	8002ba4 <UART_putchar>
    while(i<15)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0e      	cmp	r3, #14
 8002ca8:	ddef      	ble.n	8002c8a <UART_putnum+0x72>
    }
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000254 	.word	0x20000254

08002cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cbc:	f000 ff14 	bl	8003ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cc0:	f000 f830 	bl	8002d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc4:	f000 f980 	bl	8002fc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002cc8:	f000 f896 	bl	8002df8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002ccc:	f000 f8c2 	bl	8002e54 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002cd0:	f000 f8f0 	bl	8002eb4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002cd4:	f000 f94e 	bl	8002f74 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002cd8:	f000 f922 	bl	8002f20 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002cdc:	f7ff fd9a 	bl	8002814 <LCD_init>
  KEYS_init();
 8002ce0:	f7ff fc7e 	bl	80025e0 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7ff fcb5 	bl	8002654 <KEYS_initISR>
  LED_init();
 8002cea:	f7ff ff05 	bl	8002af8 <LED_init>

  DisplayVersion();
 8002cee:	f7fe fdc9 	bl	8001884 <DisplayVersion>
  osDelay(500); // time to read version
 8002cf2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002cf6:	f00a f829 	bl	800cd4c <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cfa:	f009 ff0d 	bl	800cb18 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cfe:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <main+0x60>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	4806      	ldr	r0, [pc, #24]	@ (8002d1c <main+0x64>)
 8002d04:	f009 ff90 	bl	800cc28 <osThreadNew>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a05      	ldr	r2, [pc, #20]	@ (8002d20 <main+0x68>)
 8002d0c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d0e:	f009 ff4f 	bl	800cbb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <main+0x5a>
 8002d16:	bf00      	nop
 8002d18:	08016648 	.word	0x08016648
 8002d1c:	080032f1 	.word	0x080032f1
 8002d20:	200026bc 	.word	0x200026bc

08002d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b094      	sub	sp, #80	@ 0x50
 8002d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d2a:	f107 0320 	add.w	r3, r7, #32
 8002d2e:	2230      	movs	r2, #48	@ 0x30
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f010 f9cb 	bl	80130ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <SystemClock_Config+0xcc>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <SystemClock_Config+0xcc>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d58:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <SystemClock_Config+0xcc>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d64:	2300      	movs	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <SystemClock_Config+0xd0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <SystemClock_Config+0xd0>)
 8002d6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b1f      	ldr	r3, [pc, #124]	@ (8002df4 <SystemClock_Config+0xd0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d94:	2308      	movs	r3, #8
 8002d96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002d98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002da2:	2307      	movs	r3, #7
 8002da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da6:	f107 0320 	add.w	r3, r7, #32
 8002daa:	4618      	mov	r0, r3
 8002dac:	f004 f99a 	bl	80070e4 <HAL_RCC_OscConfig>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002db6:	f000 fadf 	bl	8003378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dba:	230f      	movs	r3, #15
 8002dbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dc6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fbfb 	bl	80075d4 <HAL_RCC_ClockConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002de4:	f000 fac8 	bl	8003378 <Error_Handler>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3750      	adds	r7, #80	@ 0x50
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000

08002df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <MX_I2C1_Init+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e02:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <MX_I2C1_Init+0x58>)
 8002e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e36:	f003 fb71 	bl	800651c <HAL_I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e40:	f000 fa9a 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20002538 	.word	0x20002538
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	000186a0 	.word	0x000186a0

08002e54 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e5a:	4a14      	ldr	r2, [pc, #80]	@ (8002eac <MX_I2S3_Init+0x58>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e64:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e78:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb0 <MX_I2S3_Init+0x5c>)
 8002e7e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002e92:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <MX_I2S3_Init+0x54>)
 8002e94:	f003 fc86 	bl	80067a4 <HAL_I2S_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002e9e:	f000 fa6b 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000258c 	.word	0x2000258c
 8002eac:	40003c00 	.word	0x40003c00
 8002eb0:	00017700 	.word	0x00017700

08002eb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002eba:	4a18      	ldr	r2, [pc, #96]	@ (8002f1c <MX_SPI1_Init+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ebe:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ec0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec6:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eec:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef2:	4b09      	ldr	r3, [pc, #36]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002efe:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002f00:	220a      	movs	r2, #10
 8002f02:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f04:	4804      	ldr	r0, [pc, #16]	@ (8002f18 <MX_SPI1_Init+0x64>)
 8002f06:	f004 fef9 	bl	8007cfc <HAL_SPI_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f10:	f000 fa32 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	200025d4 	.word	0x200025d4
 8002f1c:	40013000 	.word	0x40013000

08002f20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f24:	4b11      	ldr	r3, [pc, #68]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f26:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <MX_UART4_Init+0x50>)
 8002f28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f32:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f44:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f46:	220c      	movs	r2, #12
 8002f48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4a:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f50:	4b06      	ldr	r3, [pc, #24]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f56:	4805      	ldr	r0, [pc, #20]	@ (8002f6c <MX_UART4_Init+0x4c>)
 8002f58:	f005 f9f4 	bl	8008344 <HAL_UART_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f62:	f000 fa09 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000262c 	.word	0x2000262c
 8002f70:	40004c00 	.word	0x40004c00

08002f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f78:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <MX_USART2_UART_Init+0x50>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002faa:	4805      	ldr	r0, [pc, #20]	@ (8002fc0 <MX_USART2_UART_Init+0x4c>)
 8002fac:	f005 f9ca 	bl	8008344 <HAL_UART_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fb6:	f000 f9df 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20002674 	.word	0x20002674
 8002fc4:	40004400 	.word	0x40004400

08002fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	@ 0x30
 8002fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fce:	f107 031c 	add.w	r3, r7, #28
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	60da      	str	r2, [r3, #12]
 8002fdc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	4b8e      	ldr	r3, [pc, #568]	@ (800321c <MX_GPIO_Init+0x254>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	4a8d      	ldr	r2, [pc, #564]	@ (800321c <MX_GPIO_Init+0x254>)
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fee:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <MX_GPIO_Init+0x254>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	4b87      	ldr	r3, [pc, #540]	@ (800321c <MX_GPIO_Init+0x254>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a86      	ldr	r2, [pc, #536]	@ (800321c <MX_GPIO_Init+0x254>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b84      	ldr	r3, [pc, #528]	@ (800321c <MX_GPIO_Init+0x254>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b80      	ldr	r3, [pc, #512]	@ (800321c <MX_GPIO_Init+0x254>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a7f      	ldr	r2, [pc, #508]	@ (800321c <MX_GPIO_Init+0x254>)
 8003020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b7d      	ldr	r3, [pc, #500]	@ (800321c <MX_GPIO_Init+0x254>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b79      	ldr	r3, [pc, #484]	@ (800321c <MX_GPIO_Init+0x254>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a78      	ldr	r2, [pc, #480]	@ (800321c <MX_GPIO_Init+0x254>)
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b76      	ldr	r3, [pc, #472]	@ (800321c <MX_GPIO_Init+0x254>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	4b72      	ldr	r3, [pc, #456]	@ (800321c <MX_GPIO_Init+0x254>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	4a71      	ldr	r2, [pc, #452]	@ (800321c <MX_GPIO_Init+0x254>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	6313      	str	r3, [r2, #48]	@ 0x30
 800305e:	4b6f      	ldr	r3, [pc, #444]	@ (800321c <MX_GPIO_Init+0x254>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	4b6b      	ldr	r3, [pc, #428]	@ (800321c <MX_GPIO_Init+0x254>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	4a6a      	ldr	r2, [pc, #424]	@ (800321c <MX_GPIO_Init+0x254>)
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	6313      	str	r3, [r2, #48]	@ 0x30
 800307a:	4b68      	ldr	r3, [pc, #416]	@ (800321c <MX_GPIO_Init+0x254>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003086:	2200      	movs	r2, #0
 8003088:	2108      	movs	r1, #8
 800308a:	4865      	ldr	r0, [pc, #404]	@ (8003220 <MX_GPIO_Init+0x258>)
 800308c:	f001 f8ba 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003090:	2201      	movs	r2, #1
 8003092:	2101      	movs	r1, #1
 8003094:	4863      	ldr	r0, [pc, #396]	@ (8003224 <MX_GPIO_Init+0x25c>)
 8003096:	f001 f8b5 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 800309a:	2200      	movs	r2, #0
 800309c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80030a0:	4861      	ldr	r0, [pc, #388]	@ (8003228 <MX_GPIO_Init+0x260>)
 80030a2:	f001 f8af 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80030a6:	2200      	movs	r2, #0
 80030a8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80030ac:	485f      	ldr	r0, [pc, #380]	@ (800322c <MX_GPIO_Init+0x264>)
 80030ae:	f001 f8a9 	bl	8004204 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030b8:	485a      	ldr	r0, [pc, #360]	@ (8003224 <MX_GPIO_Init+0x25c>)
 80030ba:	f001 f8a3 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 80030be:	2200      	movs	r2, #0
 80030c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030c4:	485a      	ldr	r0, [pc, #360]	@ (8003230 <MX_GPIO_Init+0x268>)
 80030c6:	f001 f89d 	bl	8004204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80030ca:	2308      	movs	r3, #8
 80030cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	484f      	ldr	r0, [pc, #316]	@ (8003220 <MX_GPIO_Init+0x258>)
 80030e2:	f000 fedb 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 80030e6:	f240 1301 	movw	r3, #257	@ 0x101
 80030ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4849      	ldr	r0, [pc, #292]	@ (8003224 <MX_GPIO_Init+0x25c>)
 8003100:	f000 fecc 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003104:	2308      	movs	r3, #8
 8003106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003114:	2305      	movs	r3, #5
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003118:	f107 031c 	add.w	r3, r7, #28
 800311c:	4619      	mov	r1, r3
 800311e:	4841      	ldr	r0, [pc, #260]	@ (8003224 <MX_GPIO_Init+0x25c>)
 8003120:	f000 febc 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8003124:	2301      	movs	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003128:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800312c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8003132:	f107 031c 	add.w	r3, r7, #28
 8003136:	4619      	mov	r1, r3
 8003138:	483b      	ldr	r0, [pc, #236]	@ (8003228 <MX_GPIO_Init+0x260>)
 800313a:	f000 feaf 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 800313e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003144:	2301      	movs	r3, #1
 8003146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	4619      	mov	r1, r3
 8003156:	4834      	ldr	r0, [pc, #208]	@ (8003228 <MX_GPIO_Init+0x260>)
 8003158:	f000 fea0 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800315c:	2304      	movs	r3, #4
 800315e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003168:	f107 031c 	add.w	r3, r7, #28
 800316c:	4619      	mov	r1, r3
 800316e:	482e      	ldr	r0, [pc, #184]	@ (8003228 <MX_GPIO_Init+0x260>)
 8003170:	f000 fe94 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003186:	2305      	movs	r3, #5
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4619      	mov	r1, r3
 8003190:	4825      	ldr	r0, [pc, #148]	@ (8003228 <MX_GPIO_Init+0x260>)
 8003192:	f000 fe83 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003196:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800319a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	2301      	movs	r3, #1
 800319e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	4619      	mov	r1, r3
 80031ae:	481f      	ldr	r0, [pc, #124]	@ (800322c <MX_GPIO_Init+0x264>)
 80031b0:	f000 fe74 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 80031b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	4619      	mov	r1, r3
 80031cc:	4818      	ldr	r0, [pc, #96]	@ (8003230 <MX_GPIO_Init+0x268>)
 80031ce:	f000 fe65 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80031d2:	2320      	movs	r3, #32
 80031d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031d6:	2300      	movs	r3, #0
 80031d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031de:	f107 031c 	add.w	r3, r7, #28
 80031e2:	4619      	mov	r1, r3
 80031e4:	4811      	ldr	r0, [pc, #68]	@ (800322c <MX_GPIO_Init+0x264>)
 80031e6:	f000 fe59 	bl	8003e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80031ea:	2302      	movs	r3, #2
 80031ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031ee:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80031f8:	f107 031c 	add.w	r3, r7, #28
 80031fc:	4619      	mov	r1, r3
 80031fe:	4808      	ldr	r0, [pc, #32]	@ (8003220 <MX_GPIO_Init+0x258>)
 8003200:	f000 fe4c 	bl	8003e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	2105      	movs	r1, #5
 8003208:	2006      	movs	r0, #6
 800320a:	f000 fd8b 	bl	8003d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800320e:	2006      	movs	r0, #6
 8003210:	f000 fda4 	bl	8003d5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003214:	bf00      	nop
 8003216:	3730      	adds	r7, #48	@ 0x30
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40023800 	.word	0x40023800
 8003220:	40021000 	.word	0x40021000
 8003224:	40020800 	.word	0x40020800
 8003228:	40020400 	.word	0x40020400
 800322c:	40020c00 	.word	0x40020c00
 8003230:	40020000 	.word	0x40020000

08003234 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a23      	ldr	r2, [pc, #140]	@ (80032d4 <HAL_UART_RxCpltCallback+0xa0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d11d      	bne.n	8003286 <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 800324a:	f107 030e 	add.w	r3, r7, #14
 800324e:	2201      	movs	r2, #1
 8003250:	4619      	mov	r1, r3
 8003252:	4821      	ldr	r0, [pc, #132]	@ (80032d8 <HAL_UART_RxCpltCallback+0xa4>)
 8003254:	f005 f951 	bl	80084fa <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 8003258:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <HAL_UART_RxCpltCallback+0xa8>)
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	f107 0208 	add.w	r2, r7, #8
 8003260:	f107 010e 	add.w	r1, r7, #14
 8003264:	2300      	movs	r3, #0
 8003266:	f00a fc11 	bl	800da8c <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HAL_UART_RxCpltCallback+0x52>
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <HAL_UART_RxCpltCallback+0xac>)
 8003278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a16      	ldr	r2, [pc, #88]	@ (80032e4 <HAL_UART_RxCpltCallback+0xb0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d11d      	bne.n	80032cc <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 8003290:	f107 030f 	add.w	r3, r7, #15
 8003294:	2201      	movs	r2, #1
 8003296:	4619      	mov	r1, r3
 8003298:	4813      	ldr	r0, [pc, #76]	@ (80032e8 <HAL_UART_RxCpltCallback+0xb4>)
 800329a:	f005 f92e 	bl	80084fa <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 800329e:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <HAL_UART_RxCpltCallback+0xb8>)
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	f107 0208 	add.w	r2, r7, #8
 80032a6:	f107 010f 	add.w	r1, r7, #15
 80032aa:	2300      	movs	r3, #0
 80032ac:	f00a fbee 	bl	800da8c <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_UART_RxCpltCallback+0x98>
 80032bc:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_UART_RxCpltCallback+0xac>)
 80032be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	f3bf 8f6f 	isb	sy
	}

}
 80032cc:	bf00      	nop
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40004400 	.word	0x40004400
 80032d8:	20002674 	.word	0x20002674
 80032dc:	20002448 	.word	0x20002448
 80032e0:	e000ed04 	.word	0xe000ed04
 80032e4:	40004c00 	.word	0x40004c00
 80032e8:	2000262c 	.word	0x2000262c
 80032ec:	2000244c 	.word	0x2000244c

080032f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80032f8:	f00d fef6 	bl	80110e8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 80032fc:	f7fe fb48 	bl	8001990 <CreateHandles>
  CreateTasks();
 8003300:	f7fe fbe6 	bl	8001ad0 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8003304:	f107 030e 	add.w	r3, r7, #14
 8003308:	2201      	movs	r2, #1
 800330a:	4619      	mov	r1, r3
 800330c:	480d      	ldr	r0, [pc, #52]	@ (8003344 <StartDefaultTask+0x54>)
 800330e:	f005 f8f4 	bl	80084fa <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 8003312:	f107 030f 	add.w	r3, r7, #15
 8003316:	2201      	movs	r2, #1
 8003318:	4619      	mov	r1, r3
 800331a:	480b      	ldr	r0, [pc, #44]	@ (8003348 <StartDefaultTask+0x58>)
 800331c:	f005 f8ed 	bl	80084fa <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 8003320:	7bbb      	ldrb	r3, [r7, #14]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fc6c 	bl	8002c00 <UART_putint>
 8003328:	4808      	ldr	r0, [pc, #32]	@ (800334c <StartDefaultTask+0x5c>)
 800332a:	f7ff fc4d 	bl	8002bc8 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800332e:	2001      	movs	r0, #1
 8003330:	f009 fd0c 	bl	800cd4c <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8003334:	4b06      	ldr	r3, [pc, #24]	@ (8003350 <StartDefaultTask+0x60>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f00b fa21 	bl	800e780 <vTaskDelete>
    osDelay(1);
 800333e:	bf00      	nop
 8003340:	e7f5      	b.n	800332e <StartDefaultTask+0x3e>
 8003342:	bf00      	nop
 8003344:	20002674 	.word	0x20002674
 8003348:	2000262c 	.word	0x2000262c
 800334c:	08016584 	.word	0x08016584
 8003350:	200026bc 	.word	0x200026bc

08003354 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a04      	ldr	r2, [pc, #16]	@ (8003374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003366:	f000 fbe1 	bl	8003b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000

08003378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800337c:	b672      	cpsid	i
}
 800337e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <Error_Handler+0x8>

08003384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <HAL_MspInit+0x54>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003392:	4a11      	ldr	r2, [pc, #68]	@ (80033d8 <HAL_MspInit+0x54>)
 8003394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003398:	6453      	str	r3, [r2, #68]	@ 0x44
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_MspInit+0x54>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_MspInit+0x54>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <HAL_MspInit+0x54>)
 80033b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033b6:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <HAL_MspInit+0x54>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033c2:	2200      	movs	r2, #0
 80033c4:	210f      	movs	r1, #15
 80033c6:	f06f 0001 	mvn.w	r0, #1
 80033ca:	f000 fcab 	bl	8003d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800

080033dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	@ 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a19      	ldr	r2, [pc, #100]	@ (8003460 <HAL_I2C_MspInit+0x84>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d12c      	bne.n	8003458 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_I2C_MspInit+0x88>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <HAL_I2C_MspInit+0x88>)
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	6313      	str	r3, [r2, #48]	@ 0x30
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <HAL_I2C_MspInit+0x88>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800341a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800341e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003420:	2312      	movs	r3, #18
 8003422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800342c:	2304      	movs	r3, #4
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4619      	mov	r1, r3
 8003436:	480c      	ldr	r0, [pc, #48]	@ (8003468 <HAL_I2C_MspInit+0x8c>)
 8003438:	f000 fd30 	bl	8003e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <HAL_I2C_MspInit+0x88>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	4a07      	ldr	r2, [pc, #28]	@ (8003464 <HAL_I2C_MspInit+0x88>)
 8003446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800344a:	6413      	str	r3, [r2, #64]	@ 0x40
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_I2C_MspInit+0x88>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003458:	bf00      	nop
 800345a:	3728      	adds	r7, #40	@ 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40005400 	.word	0x40005400
 8003464:	40023800 	.word	0x40023800
 8003468:	40020400 	.word	0x40020400

0800346c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a31      	ldr	r2, [pc, #196]	@ (800355c <HAL_I2S_MspInit+0xf0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d15a      	bne.n	8003552 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80034a0:	23c0      	movs	r3, #192	@ 0xc0
 80034a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 fae3 	bl	8007a78 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80034b8:	f7ff ff5e 	bl	8003378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	4a26      	ldr	r2, [pc, #152]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80034cc:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 80034fe:	f043 0304 	orr.w	r3, r3, #4
 8003502:	6313      	str	r3, [r2, #48]	@ 0x30
 8003504:	4b16      	ldr	r3, [pc, #88]	@ (8003560 <HAL_I2S_MspInit+0xf4>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003510:	2310      	movs	r3, #16
 8003512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003518:	2300      	movs	r3, #0
 800351a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351c:	2300      	movs	r3, #0
 800351e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003520:	2306      	movs	r3, #6
 8003522:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	480e      	ldr	r0, [pc, #56]	@ (8003564 <HAL_I2S_MspInit+0xf8>)
 800352c:	f000 fcb6 	bl	8003e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003530:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003542:	2306      	movs	r3, #6
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354a:	4619      	mov	r1, r3
 800354c:	4806      	ldr	r0, [pc, #24]	@ (8003568 <HAL_I2S_MspInit+0xfc>)
 800354e:	f000 fca5 	bl	8003e9c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003552:	bf00      	nop
 8003554:	3738      	adds	r7, #56	@ 0x38
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40003c00 	.word	0x40003c00
 8003560:	40023800 	.word	0x40023800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020800 	.word	0x40020800

0800356c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	@ (80035f0 <HAL_SPI_MspInit+0x84>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d12b      	bne.n	80035e6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b18      	ldr	r3, [pc, #96]	@ (80035f4 <HAL_SPI_MspInit+0x88>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	4a17      	ldr	r2, [pc, #92]	@ (80035f4 <HAL_SPI_MspInit+0x88>)
 8003598:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800359c:	6453      	str	r3, [r2, #68]	@ 0x44
 800359e:	4b15      	ldr	r3, [pc, #84]	@ (80035f4 <HAL_SPI_MspInit+0x88>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_SPI_MspInit+0x88>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <HAL_SPI_MspInit+0x88>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b0e      	ldr	r3, [pc, #56]	@ (80035f4 <HAL_SPI_MspInit+0x88>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035c6:	23e0      	movs	r3, #224	@ 0xe0
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035d6:	2305      	movs	r3, #5
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4805      	ldr	r0, [pc, #20]	@ (80035f8 <HAL_SPI_MspInit+0x8c>)
 80035e2:	f000 fc5b 	bl	8003e9c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	@ 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40013000 	.word	0x40013000
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020000 	.word	0x40020000

080035fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	@ 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3a      	ldr	r2, [pc, #232]	@ (8003704 <HAL_UART_MspInit+0x108>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d134      	bne.n	8003688 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	4a38      	ldr	r2, [pc, #224]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 8003628:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800362c:	6413      	str	r3, [r2, #64]	@ 0x40
 800362e:	4b36      	ldr	r3, [pc, #216]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	4b32      	ldr	r3, [pc, #200]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a31      	ldr	r2, [pc, #196]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b2f      	ldr	r3, [pc, #188]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003656:	2303      	movs	r3, #3
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003662:	2303      	movs	r3, #3
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003666:	2308      	movs	r3, #8
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	4826      	ldr	r0, [pc, #152]	@ (800370c <HAL_UART_MspInit+0x110>)
 8003672:	f000 fc13 	bl	8003e9c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003676:	2200      	movs	r2, #0
 8003678:	2105      	movs	r1, #5
 800367a:	2034      	movs	r0, #52	@ 0x34
 800367c:	f000 fb52 	bl	8003d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003680:	2034      	movs	r0, #52	@ 0x34
 8003682:	f000 fb6b 	bl	8003d5c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003686:	e038      	b.n	80036fa <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a20      	ldr	r2, [pc, #128]	@ (8003710 <HAL_UART_MspInit+0x114>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d133      	bne.n	80036fa <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	4b1c      	ldr	r3, [pc, #112]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	4a1b      	ldr	r2, [pc, #108]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 800369c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a2:	4b19      	ldr	r3, [pc, #100]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <HAL_UART_MspInit+0x10c>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036ca:	230c      	movs	r3, #12
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ce:	2302      	movs	r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d6:	2303      	movs	r3, #3
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036da:	2307      	movs	r3, #7
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036de:	f107 031c 	add.w	r3, r7, #28
 80036e2:	4619      	mov	r1, r3
 80036e4:	4809      	ldr	r0, [pc, #36]	@ (800370c <HAL_UART_MspInit+0x110>)
 80036e6:	f000 fbd9 	bl	8003e9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036ea:	2200      	movs	r2, #0
 80036ec:	2105      	movs	r1, #5
 80036ee:	2026      	movs	r0, #38	@ 0x26
 80036f0:	f000 fb18 	bl	8003d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036f4:	2026      	movs	r0, #38	@ 0x26
 80036f6:	f000 fb31 	bl	8003d5c <HAL_NVIC_EnableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3730      	adds	r7, #48	@ 0x30
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40004c00 	.word	0x40004c00
 8003708:	40023800 	.word	0x40023800
 800370c:	40020000 	.word	0x40020000
 8003710:	40004400 	.word	0x40004400

08003714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	@ 0x30
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	4b2f      	ldr	r3, [pc, #188]	@ (80037e8 <HAL_InitTick+0xd4>)
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	4a2e      	ldr	r2, [pc, #184]	@ (80037e8 <HAL_InitTick+0xd4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6453      	str	r3, [r2, #68]	@ 0x44
 8003734:	4b2c      	ldr	r3, [pc, #176]	@ (80037e8 <HAL_InitTick+0xd4>)
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003740:	f107 020c 	add.w	r2, r7, #12
 8003744:	f107 0310 	add.w	r3, r7, #16
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f004 f962 	bl	8007a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003750:	f004 f94c 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 8003754:	4603      	mov	r3, r0
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800375a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375c:	4a23      	ldr	r2, [pc, #140]	@ (80037ec <HAL_InitTick+0xd8>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	3b01      	subs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003768:	4b21      	ldr	r3, [pc, #132]	@ (80037f0 <HAL_InitTick+0xdc>)
 800376a:	4a22      	ldr	r2, [pc, #136]	@ (80037f4 <HAL_InitTick+0xe0>)
 800376c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_InitTick+0xdc>)
 8003770:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003774:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003776:	4a1e      	ldr	r2, [pc, #120]	@ (80037f0 <HAL_InitTick+0xdc>)
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800377c:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <HAL_InitTick+0xdc>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003782:	4b1b      	ldr	r3, [pc, #108]	@ (80037f0 <HAL_InitTick+0xdc>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_InitTick+0xdc>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800378e:	4818      	ldr	r0, [pc, #96]	@ (80037f0 <HAL_InitTick+0xdc>)
 8003790:	f004 fb3d 	bl	8007e0e <HAL_TIM_Base_Init>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800379a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d11b      	bne.n	80037da <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037a2:	4813      	ldr	r0, [pc, #76]	@ (80037f0 <HAL_InitTick+0xdc>)
 80037a4:	f004 fb8c 	bl	8007ec0 <HAL_TIM_Base_Start_IT>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80037ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d111      	bne.n	80037da <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037b6:	2019      	movs	r0, #25
 80037b8:	f000 fad0 	bl	8003d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	d808      	bhi.n	80037d4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80037c2:	2200      	movs	r2, #0
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	2019      	movs	r0, #25
 80037c8:	f000 faac 	bl	8003d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <HAL_InitTick+0xe4>)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e002      	b.n	80037da <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3730      	adds	r7, #48	@ 0x30
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	431bde83 	.word	0x431bde83
 80037f0:	200026c0 	.word	0x200026c0
 80037f4:	40010000 	.word	0x40010000
 80037f8:	20000268 	.word	0x20000268

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <NMI_Handler+0x4>

08003804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <MemManage_Handler+0x4>

08003814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <BusFault_Handler+0x4>

0800381c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <UsageFault_Handler+0x4>

08003824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 800383e:	2001      	movs	r0, #1
 8003840:	f000 fd14 	bl	800426c <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8003844:	f7fe ff2e 	bl	80026a4 <KEYS_read>
 8003848:	4603      	mov	r3, r0
 800384a:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 800384c:	4b0f      	ldr	r3, [pc, #60]	@ (800388c <EXTI0_IRQHandler+0x58>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	463a      	mov	r2, r7
 8003854:	4618      	mov	r0, r3
 8003856:	f009 fdd7 	bl	800d408 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 800385a:	2001      	movs	r0, #1
 800385c:	f7fe fefa 	bl	8002654 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <EXTI0_IRQHandler+0x48>
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <EXTI0_IRQHandler+0x5c>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 800387c:	2001      	movs	r0, #1
 800387e:	f000 fcf5 	bl	800426c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20002454 	.word	0x20002454
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003898:	4802      	ldr	r0, [pc, #8]	@ (80038a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800389a:	f004 fb81 	bl	8007fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200026c0 	.word	0x200026c0

080038a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038ac:	4802      	ldr	r0, [pc, #8]	@ (80038b8 <USART2_IRQHandler+0x10>)
 80038ae:	f004 fe49 	bl	8008544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20002674 	.word	0x20002674

080038bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038c0:	4802      	ldr	r0, [pc, #8]	@ (80038cc <UART4_IRQHandler+0x10>)
 80038c2:	f004 fe3f 	bl	8008544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	2000262c 	.word	0x2000262c

080038d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80038d4:	4802      	ldr	r0, [pc, #8]	@ (80038e0 <OTG_FS_IRQHandler+0x10>)
 80038d6:	f000 ffcd 	bl	8004874 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20013304 	.word	0x20013304

080038e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	return 1;
 80038e8:	2301      	movs	r3, #1
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <_kill>:

int _kill(int pid, int sig)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038fe:	f00f fd21 	bl	8013344 <__errno>
 8003902:	4603      	mov	r3, r0
 8003904:	2216      	movs	r2, #22
 8003906:	601a      	str	r2, [r3, #0]
	return -1;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <_exit>:

void _exit (int status)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800391c:	f04f 31ff 	mov.w	r1, #4294967295
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffe7 	bl	80038f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003926:	bf00      	nop
 8003928:	e7fd      	b.n	8003926 <_exit+0x12>

0800392a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e00a      	b.n	8003952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800393c:	f3af 8000 	nop.w
 8003940:	4601      	mov	r1, r0
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	60ba      	str	r2, [r7, #8]
 8003948:	b2ca      	uxtb	r2, r1
 800394a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	3301      	adds	r3, #1
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	dbf0      	blt.n	800393c <_read+0x12>
	}

return len;
 800395a:	687b      	ldr	r3, [r7, #4]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e009      	b.n	800398a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	60ba      	str	r2, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3301      	adds	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	429a      	cmp	r2, r3
 8003990:	dbf1      	blt.n	8003976 <_write+0x12>
	}
	return len;
 8003992:	687b      	ldr	r3, [r7, #4]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <_close>:

int _close(int file)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	return -1;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039c4:	605a      	str	r2, [r3, #4]
	return 0;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <_isatty>:

int _isatty(int file)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	return 1;
 80039dc:	2301      	movs	r3, #1
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
	return 0;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a0c:	4a14      	ldr	r2, [pc, #80]	@ (8003a60 <_sbrk+0x5c>)
 8003a0e:	4b15      	ldr	r3, [pc, #84]	@ (8003a64 <_sbrk+0x60>)
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a18:	4b13      	ldr	r3, [pc, #76]	@ (8003a68 <_sbrk+0x64>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <_sbrk+0x64>)
 8003a22:	4a12      	ldr	r2, [pc, #72]	@ (8003a6c <_sbrk+0x68>)
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <_sbrk+0x64>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d207      	bcs.n	8003a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a34:	f00f fc86 	bl	8013344 <__errno>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e009      	b.n	8003a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <_sbrk+0x64>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a4a:	4b07      	ldr	r3, [pc, #28]	@ (8003a68 <_sbrk+0x64>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	4a05      	ldr	r2, [pc, #20]	@ (8003a68 <_sbrk+0x64>)
 8003a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	20020000 	.word	0x20020000
 8003a64:	00000400 	.word	0x00000400
 8003a68:	20002708 	.word	0x20002708
 8003a6c:	20013830 	.word	0x20013830

08003a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <SystemInit+0x20>)
 8003a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7a:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <SystemInit+0x20>)
 8003a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000ed00 	.word	0xe000ed00

08003a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a98:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a9a:	490e      	ldr	r1, [pc, #56]	@ (8003ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003aa0:	e002      	b.n	8003aa8 <LoopCopyDataInit>

08003aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003aa6:	3304      	adds	r3, #4

08003aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aac:	d3f9      	bcc.n	8003aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aae:	4a0b      	ldr	r2, [pc, #44]	@ (8003adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8003ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ab4:	e001      	b.n	8003aba <LoopFillZerobss>

08003ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab8:	3204      	adds	r2, #4

08003aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003abc:	d3fb      	bcc.n	8003ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003abe:	f7ff ffd7 	bl	8003a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ac2:	f00f fc45 	bl	8013350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ac6:	f7ff f8f7 	bl	8002cb8 <main>
  bx  lr    
 8003aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ad4:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 8003ad8:	08016b10 	.word	0x08016b10
  ldr r2, =_sbss
 8003adc:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8003ae0:	20013830 	.word	0x20013830

08003ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ae4:	e7fe      	b.n	8003ae4 <ADC_IRQHandler>
	...

08003ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_Init+0x40>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b28 <HAL_Init+0x40>)
 8003af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <HAL_Init+0x40>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <HAL_Init+0x40>)
 8003afe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b04:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <HAL_Init+0x40>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a07      	ldr	r2, [pc, #28]	@ (8003b28 <HAL_Init+0x40>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b10:	2003      	movs	r0, #3
 8003b12:	f000 f8fc 	bl	8003d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7ff fdfc 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b1c:	f7ff fc32 	bl	8003384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40023c00 	.word	0x40023c00

08003b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b30:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <HAL_IncTick+0x20>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <HAL_IncTick+0x24>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <HAL_IncTick+0x24>)
 8003b3e:	6013      	str	r3, [r2, #0]
}
 8003b40:	bf00      	nop
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	2000026c 	.word	0x2000026c
 8003b50:	2000270c 	.word	0x2000270c

08003b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return uwTick;
 8003b58:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <HAL_GetTick+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	2000270c 	.word	0x2000270c

08003b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b74:	f7ff ffee 	bl	8003b54 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d005      	beq.n	8003b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b86:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <HAL_Delay+0x44>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b92:	bf00      	nop
 8003b94:	f7ff ffde 	bl	8003b54 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d8f7      	bhi.n	8003b94 <HAL_Delay+0x28>
  {
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000026c 	.word	0x2000026c

08003bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003be6:	4a04      	ldr	r2, [pc, #16]	@ (8003bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	60d3      	str	r3, [r2, #12]
}
 8003bec:	bf00      	nop
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c00:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <__NVIC_GetPriorityGrouping+0x18>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f003 0307 	and.w	r3, r3, #7
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	db0b      	blt.n	8003c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	f003 021f 	and.w	r2, r3, #31
 8003c30:	4907      	ldr	r1, [pc, #28]	@ (8003c50 <__NVIC_EnableIRQ+0x38>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2001      	movs	r0, #1
 8003c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000e100 	.word	0xe000e100

08003c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	6039      	str	r1, [r7, #0]
 8003c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	db0a      	blt.n	8003c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	490c      	ldr	r1, [pc, #48]	@ (8003ca0 <__NVIC_SetPriority+0x4c>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	440b      	add	r3, r1
 8003c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c7c:	e00a      	b.n	8003c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	4908      	ldr	r1, [pc, #32]	@ (8003ca4 <__NVIC_SetPriority+0x50>)
 8003c84:	79fb      	ldrb	r3, [r7, #7]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	3b04      	subs	r3, #4
 8003c8c:	0112      	lsls	r2, r2, #4
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	440b      	add	r3, r1
 8003c92:	761a      	strb	r2, [r3, #24]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b089      	sub	sp, #36	@ 0x24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f1c3 0307 	rsb	r3, r3, #7
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf28      	it	cs
 8003cc6:	2304      	movcs	r3, #4
 8003cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d902      	bls.n	8003cd8 <NVIC_EncodePriority+0x30>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3b03      	subs	r3, #3
 8003cd6:	e000      	b.n	8003cda <NVIC_EncodePriority+0x32>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43da      	mvns	r2, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	401a      	ands	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	43d9      	mvns	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d00:	4313      	orrs	r3, r2
         );
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3724      	adds	r7, #36	@ 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff4c 	bl	8003bb4 <__NVIC_SetPriorityGrouping>
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d36:	f7ff ff61 	bl	8003bfc <__NVIC_GetPriorityGrouping>
 8003d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	6978      	ldr	r0, [r7, #20]
 8003d42:	f7ff ffb1 	bl	8003ca8 <NVIC_EncodePriority>
 8003d46:	4602      	mov	r2, r0
 8003d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff80 	bl	8003c54 <__NVIC_SetPriority>
}
 8003d54:	bf00      	nop
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff54 	bl	8003c18 <__NVIC_EnableIRQ>
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d86:	f7ff fee5 	bl	8003b54 <HAL_GetTick>
 8003d8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d008      	beq.n	8003daa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2280      	movs	r2, #128	@ 0x80
 8003d9c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e052      	b.n	8003e50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0216 	bic.w	r2, r2, #22
 8003db8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <HAL_DMA_Abort+0x62>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0208 	bic.w	r2, r2, #8
 8003de8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dfa:	e013      	b.n	8003e24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dfc:	f7ff feaa 	bl	8003b54 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b05      	cmp	r3, #5
 8003e08:	d90c      	bls.n	8003e24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2203      	movs	r2, #3
 8003e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e015      	b.n	8003e50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e4      	bne.n	8003dfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	223f      	movs	r2, #63	@ 0x3f
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d004      	beq.n	8003e76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2280      	movs	r2, #128	@ 0x80
 8003e70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00c      	b.n	8003e90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2205      	movs	r2, #5
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f022 0201 	bic.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	@ 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e16b      	b.n	8004190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb8:	2201      	movs	r2, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	f040 815a 	bne.w	800418a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d005      	beq.n	8003eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d130      	bne.n	8003f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	2203      	movs	r2, #3
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f24:	2201      	movs	r2, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 0201 	and.w	r2, r3, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d017      	beq.n	8003f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d123      	bne.n	8003fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	08da      	lsrs	r2, r3, #3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3208      	adds	r2, #8
 8003fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	220f      	movs	r2, #15
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	08da      	lsrs	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3208      	adds	r2, #8
 8003fda:	69b9      	ldr	r1, [r7, #24]
 8003fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	2203      	movs	r2, #3
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0203 	and.w	r2, r3, #3
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80b4 	beq.w	800418a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	4b60      	ldr	r3, [pc, #384]	@ (80041a8 <HAL_GPIO_Init+0x30c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	4a5f      	ldr	r2, [pc, #380]	@ (80041a8 <HAL_GPIO_Init+0x30c>)
 800402c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004030:	6453      	str	r3, [r2, #68]	@ 0x44
 8004032:	4b5d      	ldr	r3, [pc, #372]	@ (80041a8 <HAL_GPIO_Init+0x30c>)
 8004034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800403e:	4a5b      	ldr	r2, [pc, #364]	@ (80041ac <HAL_GPIO_Init+0x310>)
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3302      	adds	r3, #2
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	220f      	movs	r2, #15
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a52      	ldr	r2, [pc, #328]	@ (80041b0 <HAL_GPIO_Init+0x314>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d02b      	beq.n	80040c2 <HAL_GPIO_Init+0x226>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a51      	ldr	r2, [pc, #324]	@ (80041b4 <HAL_GPIO_Init+0x318>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d025      	beq.n	80040be <HAL_GPIO_Init+0x222>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a50      	ldr	r2, [pc, #320]	@ (80041b8 <HAL_GPIO_Init+0x31c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01f      	beq.n	80040ba <HAL_GPIO_Init+0x21e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4f      	ldr	r2, [pc, #316]	@ (80041bc <HAL_GPIO_Init+0x320>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d019      	beq.n	80040b6 <HAL_GPIO_Init+0x21a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4e      	ldr	r2, [pc, #312]	@ (80041c0 <HAL_GPIO_Init+0x324>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_GPIO_Init+0x216>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4d      	ldr	r2, [pc, #308]	@ (80041c4 <HAL_GPIO_Init+0x328>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00d      	beq.n	80040ae <HAL_GPIO_Init+0x212>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4c      	ldr	r2, [pc, #304]	@ (80041c8 <HAL_GPIO_Init+0x32c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <HAL_GPIO_Init+0x20e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4b      	ldr	r2, [pc, #300]	@ (80041cc <HAL_GPIO_Init+0x330>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_GPIO_Init+0x20a>
 80040a2:	2307      	movs	r3, #7
 80040a4:	e00e      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040a6:	2308      	movs	r3, #8
 80040a8:	e00c      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040aa:	2306      	movs	r3, #6
 80040ac:	e00a      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040ae:	2305      	movs	r3, #5
 80040b0:	e008      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040b2:	2304      	movs	r3, #4
 80040b4:	e006      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040b6:	2303      	movs	r3, #3
 80040b8:	e004      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <HAL_GPIO_Init+0x228>
 80040c2:	2300      	movs	r3, #0
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	f002 0203 	and.w	r2, r2, #3
 80040ca:	0092      	lsls	r2, r2, #2
 80040cc:	4093      	lsls	r3, r2
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040d4:	4935      	ldr	r1, [pc, #212]	@ (80041ac <HAL_GPIO_Init+0x310>)
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	3302      	adds	r3, #2
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e2:	4b3b      	ldr	r3, [pc, #236]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004106:	4a32      	ldr	r2, [pc, #200]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800410c:	4b30      	ldr	r3, [pc, #192]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004130:	4a27      	ldr	r2, [pc, #156]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004136:	4b26      	ldr	r3, [pc, #152]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	43db      	mvns	r3, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4013      	ands	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800415a:	4a1d      	ldr	r2, [pc, #116]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004160:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004184:	4a12      	ldr	r2, [pc, #72]	@ (80041d0 <HAL_GPIO_Init+0x334>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3301      	adds	r3, #1
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	f67f ae90 	bls.w	8003eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40013800 	.word	0x40013800
 80041b0:	40020000 	.word	0x40020000
 80041b4:	40020400 	.word	0x40020400
 80041b8:	40020800 	.word	0x40020800
 80041bc:	40020c00 	.word	0x40020c00
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40021400 	.word	0x40021400
 80041c8:	40021800 	.word	0x40021800
 80041cc:	40021c00 	.word	0x40021c00
 80041d0:	40013c00 	.word	0x40013c00

080041d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	887b      	ldrh	r3, [r7, #2]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d002      	beq.n	80041f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
 80041f0:	e001      	b.n	80041f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	807b      	strh	r3, [r7, #2]
 8004210:	4613      	mov	r3, r2
 8004212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004214:	787b      	ldrb	r3, [r7, #1]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800421a:	887a      	ldrh	r2, [r7, #2]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004220:	e003      	b.n	800422a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004222:	887b      	ldrh	r3, [r7, #2]
 8004224:	041a      	lsls	r2, r3, #16
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	619a      	str	r2, [r3, #24]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004248:	887a      	ldrh	r2, [r7, #2]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4013      	ands	r3, r2
 800424e:	041a      	lsls	r2, r3, #16
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	43d9      	mvns	r1, r3
 8004254:	887b      	ldrh	r3, [r7, #2]
 8004256:	400b      	ands	r3, r1
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	619a      	str	r2, [r3, #24]
}
 800425e:	bf00      	nop
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004276:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	4013      	ands	r3, r2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004282:	4a05      	ldr	r2, [pc, #20]	@ (8004298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f806 	bl	800429c <HAL_GPIO_EXTI_Callback>
  }
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40013c00 	.word	0x40013c00

0800429c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af02      	add	r7, sp, #8
 80042b8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e059      	b.n	8004378 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f00c ff56 	bl	8011190 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2203      	movs	r2, #3
 80042e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042f2:	d102      	bne.n	80042fa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f005 f901 	bl	8009506 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7c1a      	ldrb	r2, [r3, #16]
 800430c:	f88d 2000 	strb.w	r2, [sp]
 8004310:	3304      	adds	r3, #4
 8004312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004314:	f005 f882 	bl	800941c <USB_CoreInit>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e026      	b.n	8004378 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2101      	movs	r1, #1
 8004330:	4618      	mov	r0, r3
 8004332:	f005 f8f9 	bl	8009528 <USB_SetCurrentMode>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e017      	b.n	8004378 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7c1a      	ldrb	r2, [r3, #16]
 8004350:	f88d 2000 	strb.w	r2, [sp]
 8004354:	3304      	adds	r3, #4
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	f005 faa2 	bl	80098a0 <USB_HostInit>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e004      	b.n	8004378 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b08b      	sub	sp, #44	@ 0x2c
 8004384:	af04      	add	r7, sp, #16
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4603      	mov	r3, r0
 8004390:	70fb      	strb	r3, [r7, #3]
 8004392:	460b      	mov	r3, r1
 8004394:	70bb      	strb	r3, [r7, #2]
 8004396:	4613      	mov	r3, r2
 8004398:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800439a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800439c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_HCD_HC_Init+0x2c>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e09d      	b.n	80044e8 <HAL_HCD_HC_Init+0x168>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	3319      	adds	r3, #25
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	1a9b      	subs	r3, r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3314      	adds	r3, #20
 80043d8:	787a      	ldrb	r2, [r7, #1]
 80043da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	3315      	adds	r3, #21
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3326      	adds	r3, #38	@ 0x26
 8004400:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004404:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	78bb      	ldrb	r3, [r7, #2]
 800440a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800440e:	b2d8      	uxtb	r0, r3
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	4613      	mov	r3, r2
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	440b      	add	r3, r1
 800441c:	3316      	adds	r3, #22
 800441e:	4602      	mov	r2, r0
 8004420:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	4619      	mov	r1, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fbc8 	bl	8004bbc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800442c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004430:	2b00      	cmp	r3, #0
 8004432:	da0a      	bge.n	800444a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3317      	adds	r3, #23
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e009      	b.n	800445e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3317      	adds	r3, #23
 800445a:	2200      	movs	r2, #0
 800445c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f005 fb80 	bl	8009b68 <USB_GetHostSpeed>
 8004468:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800446a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10b      	bne.n	800448a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004472:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_HCD_HC_Init+0x10a>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2bbc      	cmp	r3, #188	@ 0xbc
 8004484:	d901      	bls.n	800448a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004486:	23bc      	movs	r3, #188	@ 0xbc
 8004488:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3318      	adds	r3, #24
 800449a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800449e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	b298      	uxth	r0, r3
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	3328      	adds	r3, #40	@ 0x28
 80044b4:	4602      	mov	r2, r0
 80044b6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6818      	ldr	r0, [r3, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	787c      	ldrb	r4, [r7, #1]
 80044c2:	78ba      	ldrb	r2, [r7, #2]
 80044c4:	78f9      	ldrb	r1, [r7, #3]
 80044c6:	9302      	str	r3, [sp, #8]
 80044c8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	4623      	mov	r3, r4
 80044d6:	f005 fb6f 	bl	8009bb8 <USB_HC_Init>
 80044da:	4603      	mov	r3, r0
 80044dc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_HCD_HC_Halt+0x1e>
 800450a:	2302      	movs	r3, #2
 800450c:	e00f      	b.n	800452e <HAL_HCD_HC_Halt+0x3e>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f005 ff01 	bl	800a326 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4603      	mov	r3, r0
 8004548:	70fb      	strb	r3, [r7, #3]
 800454a:	460b      	mov	r3, r1
 800454c:	70bb      	strb	r3, [r7, #2]
 800454e:	4613      	mov	r3, r2
 8004550:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3317      	adds	r3, #23
 8004562:	78ba      	ldrb	r2, [r7, #2]
 8004564:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3326      	adds	r3, #38	@ 0x26
 8004576:	787a      	ldrb	r2, [r7, #1]
 8004578:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800457a:	7c3b      	ldrb	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d114      	bne.n	80045aa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	332a      	adds	r3, #42	@ 0x2a
 8004590:	2203      	movs	r2, #3
 8004592:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3319      	adds	r3, #25
 80045a4:	7f3a      	ldrb	r2, [r7, #28]
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	e009      	b.n	80045be <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	332a      	adds	r3, #42	@ 0x2a
 80045ba:	2202      	movs	r2, #2
 80045bc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80045be:	787b      	ldrb	r3, [r7, #1]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	f200 8102 	bhi.w	80047ca <HAL_HCD_HC_SubmitRequest+0x292>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <HAL_HCD_HC_SubmitRequest+0x94>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080047b5 	.word	0x080047b5
 80045d4:	080046a1 	.word	0x080046a1
 80045d8:	0800472b 	.word	0x0800472b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80045dc:	7c3b      	ldrb	r3, [r7, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	f040 80f5 	bne.w	80047ce <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80045e4:	78bb      	ldrb	r3, [r7, #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d12d      	bne.n	8004646 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80045ea:	8b3b      	ldrh	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	333d      	adds	r3, #61	@ 0x3d
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	333d      	adds	r3, #61	@ 0x3d
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	332a      	adds	r3, #42	@ 0x2a
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800462e:	e0ce      	b.n	80047ce <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004630:	78fa      	ldrb	r2, [r7, #3]
 8004632:	6879      	ldr	r1, [r7, #4]
 8004634:	4613      	mov	r3, r2
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	332a      	adds	r3, #42	@ 0x2a
 8004640:	2202      	movs	r2, #2
 8004642:	701a      	strb	r2, [r3, #0]
      break;
 8004644:	e0c3      	b.n	80047ce <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004646:	78fa      	ldrb	r2, [r7, #3]
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	4613      	mov	r3, r2
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	331a      	adds	r3, #26
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	f040 80b8 	bne.w	80047ce <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	333c      	adds	r3, #60	@ 0x3c
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	332a      	adds	r3, #42	@ 0x2a
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
      break;
 8004688:	e0a1      	b.n	80047ce <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	332a      	adds	r3, #42	@ 0x2a
 800469a:	2202      	movs	r2, #2
 800469c:	701a      	strb	r2, [r3, #0]
      break;
 800469e:	e096      	b.n	80047ce <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80046a0:	78bb      	ldrb	r3, [r7, #2]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d120      	bne.n	80046e8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	333d      	adds	r3, #61	@ 0x3d
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	332a      	adds	r3, #42	@ 0x2a
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80046d0:	e07e      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	332a      	adds	r3, #42	@ 0x2a
 80046e2:	2202      	movs	r2, #2
 80046e4:	701a      	strb	r2, [r3, #0]
      break;
 80046e6:	e073      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	333c      	adds	r3, #60	@ 0x3c
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	332a      	adds	r3, #42	@ 0x2a
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
      break;
 8004712:	e05d      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	332a      	adds	r3, #42	@ 0x2a
 8004724:	2202      	movs	r2, #2
 8004726:	701a      	strb	r2, [r3, #0]
      break;
 8004728:	e052      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800472a:	78bb      	ldrb	r3, [r7, #2]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d120      	bne.n	8004772 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004730:	78fa      	ldrb	r2, [r7, #3]
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	4613      	mov	r3, r2
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	333d      	adds	r3, #61	@ 0x3d
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004746:	78fa      	ldrb	r2, [r7, #3]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	332a      	adds	r3, #42	@ 0x2a
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800475a:	e039      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	332a      	adds	r3, #42	@ 0x2a
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
      break;
 8004770:	e02e      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	333c      	adds	r3, #60	@ 0x3c
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	332a      	adds	r3, #42	@ 0x2a
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
      break;
 800479c:	e018      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800479e:	78fa      	ldrb	r2, [r7, #3]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	332a      	adds	r3, #42	@ 0x2a
 80047ae:	2202      	movs	r2, #2
 80047b0:	701a      	strb	r2, [r3, #0]
      break;
 80047b2:	e00d      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	332a      	adds	r3, #42	@ 0x2a
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
      break;
 80047c8:	e002      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80047ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	332c      	adds	r3, #44	@ 0x2c
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	8b39      	ldrh	r1, [r7, #24]
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	4403      	add	r3, r0
 80047f4:	3334      	adds	r3, #52	@ 0x34
 80047f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	334c      	adds	r3, #76	@ 0x4c
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3338      	adds	r3, #56	@ 0x38
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3315      	adds	r3, #21
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	334d      	adds	r3, #77	@ 0x4d
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	4613      	mov	r3, r2
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	3310      	adds	r3, #16
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	1d19      	adds	r1, r3, #4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	799b      	ldrb	r3, [r3, #6]
 8004862:	461a      	mov	r2, r3
 8004864:	f005 fad4 	bl	8009e10 <USB_HC_StartXfer>
 8004868:	4603      	mov	r3, r0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop

08004874 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f004 ffc2 	bl	8009814 <USB_GetMode>
 8004890:	4603      	mov	r3, r0
 8004892:	2b01      	cmp	r3, #1
 8004894:	f040 80fb 	bne.w	8004a8e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f004 ff85 	bl	80097ac <USB_ReadInterrupts>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80f1 	beq.w	8004a8c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f004 ff7c 	bl	80097ac <USB_ReadInterrupts>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048be:	d104      	bne.n	80048ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80048c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 ff6c 	bl	80097ac <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048de:	d104      	bne.n	80048ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f004 ff5c 	bl	80097ac <USB_ReadInterrupts>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048fe:	d104      	bne.n	800490a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004908:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f004 ff4c 	bl	80097ac <USB_ReadInterrupts>
 8004914:	4603      	mov	r3, r0
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b02      	cmp	r3, #2
 800491c:	d103      	bne.n	8004926 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2202      	movs	r2, #2
 8004924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f004 ff3e 	bl	80097ac <USB_ReadInterrupts>
 8004930:	4603      	mov	r3, r0
 8004932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004936:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800493a:	d120      	bne.n	800497e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004944:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d113      	bne.n	800497e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004956:	2110      	movs	r1, #16
 8004958:	6938      	ldr	r0, [r7, #16]
 800495a:	f004 fe31 	bl	80095c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800495e:	6938      	ldr	r0, [r7, #16]
 8004960:	f004 fe60 	bl	8009624 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	7a5b      	ldrb	r3, [r3, #9]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d105      	bne.n	8004978 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2101      	movs	r1, #1
 8004972:	4618      	mov	r0, r3
 8004974:	f005 f858 	bl	8009a28 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f00c fc87 	bl	801128c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f004 ff12 	bl	80097ac <USB_ReadInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800498e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004992:	d102      	bne.n	800499a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fd4d 	bl	8006434 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f004 ff04 	bl	80097ac <USB_ReadInterrupts>
 80049a4:	4603      	mov	r3, r0
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d106      	bne.n	80049bc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f00c fc50 	bl	8011254 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2208      	movs	r2, #8
 80049ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f004 fef3 	bl	80097ac <USB_ReadInterrupts>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049d0:	d139      	bne.n	8004a46 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f005 fc94 	bl	800a304 <USB_HC_ReadInterrupt>
 80049dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e025      	b.n	8004a30 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d018      	beq.n	8004a2a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a0e:	d106      	bne.n	8004a1e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f905 	bl	8004c26 <HCD_HC_IN_IRQHandler>
 8004a1c:	e005      	b.n	8004a2a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 ff67 	bl	80058f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	795b      	ldrb	r3, [r3, #5]
 8004a34:	461a      	mov	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d3d3      	bcc.n	80049e4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f004 feae 	bl	80097ac <USB_ReadInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d101      	bne.n	8004a5e <HAL_HCD_IRQHandler+0x1ea>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_HCD_IRQHandler+0x1ec>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d014      	beq.n	8004a8e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0210 	bic.w	r2, r2, #16
 8004a72:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 fbfe 	bl	8006276 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0210 	orr.w	r2, r2, #16
 8004a88:	619a      	str	r2, [r3, #24]
 8004a8a:	e000      	b.n	8004a8e <HAL_HCD_IRQHandler+0x21a>
      return;
 8004a8c:	bf00      	nop
    }
  }
}
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_HCD_Start+0x16>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e013      	b.n	8004ad2 <HAL_HCD_Start+0x3e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f005 f81c 	bl	8009af6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f004 fd0e 	bl	80094e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d101      	bne.n	8004af0 <HAL_HCD_Stop+0x16>
 8004aec:	2302      	movs	r3, #2
 8004aee:	e00d      	b.n	8004b0c <HAL_HCD_Stop+0x32>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 fd6f 	bl	800a5e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f004 ffbe 	bl	8009aa2 <USB_ResetPort>
 8004b26:	4603      	mov	r3, r0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	334c      	adds	r3, #76	@ 0x4c
 8004b4c:	781b      	ldrb	r3, [r3, #0]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	3338      	adds	r3, #56	@ 0x38
 8004b76:	681b      	ldr	r3, [r3, #0]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f005 f800 	bl	8009b96 <USB_GetCurrentFrame>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4618      	mov	r0, r3
 8004bae:	f004 ffdb 	bl	8009b68 <USB_GetHostSpeed>
 8004bb2:	4603      	mov	r3, r0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	331a      	adds	r3, #26
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	331b      	adds	r3, #27
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3325      	adds	r3, #37	@ 0x25
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	3324      	adds	r3, #36	@ 0x24
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b086      	sub	sp, #24
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 fdc4 	bl	80097d2 <USB_ReadChInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d11a      	bne.n	8004c8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	2304      	movs	r3, #4
 8004c64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	334d      	adds	r3, #77	@ 0x4d
 8004c76:	2207      	movs	r2, #7
 8004c78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f005 fb4f 	bl	800a326 <USB_HC_Halt>
 8004c88:	e09e      	b.n	8004dc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f004 fd9d 	bl	80097d2 <USB_ReadChInterrupts>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca2:	d11b      	bne.n	8004cdc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	1a9b      	subs	r3, r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	334d      	adds	r3, #77	@ 0x4d
 8004cc8:	2208      	movs	r2, #8
 8004cca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f005 fb26 	bl	800a326 <USB_HC_Halt>
 8004cda:	e075      	b.n	8004dc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f004 fd74 	bl	80097d2 <USB_ReadChInterrupts>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f003 0308 	and.w	r3, r3, #8
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d11a      	bne.n	8004d2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d00:	461a      	mov	r2, r3
 8004d02:	2308      	movs	r3, #8
 8004d04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	334d      	adds	r3, #77	@ 0x4d
 8004d16:	2206      	movs	r2, #6
 8004d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f005 faff 	bl	800a326 <USB_HC_Halt>
 8004d28:	e04e      	b.n	8004dc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f004 fd4d 	bl	80097d2 <USB_ReadChInterrupts>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d42:	d11b      	bne.n	8004d7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d50:	461a      	mov	r2, r3
 8004d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	334d      	adds	r3, #77	@ 0x4d
 8004d68:	2209      	movs	r2, #9
 8004d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f005 fad6 	bl	800a326 <USB_HC_Halt>
 8004d7a:	e025      	b.n	8004dc8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f004 fd24 	bl	80097d2 <USB_ReadChInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d90:	2b80      	cmp	r3, #128	@ 0x80
 8004d92:	d119      	bne.n	8004dc8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d94:	78fb      	ldrb	r3, [r7, #3]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da0:	461a      	mov	r2, r3
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	334d      	adds	r3, #77	@ 0x4d
 8004db6:	2207      	movs	r2, #7
 8004db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f005 faaf 	bl	800a326 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f004 fcfe 	bl	80097d2 <USB_ReadChInterrupts>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004de0:	d112      	bne.n	8004e08 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f005 fa9b 	bl	800a326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e02:	6093      	str	r3, [r2, #8]
 8004e04:	f000 bd75 	b.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	4618      	mov	r0, r3
 8004e12:	f004 fcde 	bl	80097d2 <USB_ReadChInterrupts>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	f040 8128 	bne.w	8005072 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2320      	movs	r3, #32
 8004e32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e34:	78fa      	ldrb	r2, [r7, #3]
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	1a9b      	subs	r3, r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	331b      	adds	r3, #27
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d119      	bne.n	8004e7e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e4a:	78fa      	ldrb	r2, [r7, #3]
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	1a9b      	subs	r3, r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	331b      	adds	r3, #27
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e7c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	799b      	ldrb	r3, [r3, #6]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01b      	beq.n	8004ebe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3330      	adds	r3, #48	@ 0x30
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	1ac9      	subs	r1, r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4403      	add	r3, r0
 8004eba:	3338      	adds	r3, #56	@ 0x38
 8004ebc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	334d      	adds	r3, #77	@ 0x4d
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3344      	adds	r3, #68	@ 0x44
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	3326      	adds	r3, #38	@ 0x26
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3326      	adds	r3, #38	@ 0x26
 8004f1e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d110      	bne.n	8004f46 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f005 f9fa 	bl	800a326 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f32:	78fb      	ldrb	r3, [r7, #3]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f3e:	461a      	mov	r2, r3
 8004f40:	2310      	movs	r3, #16
 8004f42:	6093      	str	r3, [r2, #8]
 8004f44:	e03d      	b.n	8004fc2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3326      	adds	r3, #38	@ 0x26
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d00a      	beq.n	8004f72 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	1a9b      	subs	r3, r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3326      	adds	r3, #38	@ 0x26
 8004f6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d127      	bne.n	8004fc2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f72:	78fb      	ldrb	r3, [r7, #3]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f90:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	334c      	adds	r3, #76	@ 0x4c
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	334c      	adds	r3, #76	@ 0x4c
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f00c f973 	bl	80112a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	799b      	ldrb	r3, [r3, #6]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d13b      	bne.n	8005042 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	3338      	adds	r3, #56	@ 0x38
 8004fda:	6819      	ldr	r1, [r3, #0]
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4403      	add	r3, r0
 8004fea:	3328      	adds	r3, #40	@ 0x28
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	440b      	add	r3, r1
 8004ff0:	1e59      	subs	r1, r3, #1
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	1a9b      	subs	r3, r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4403      	add	r3, r0
 8005000:	3328      	adds	r3, #40	@ 0x28
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	fbb1 f3f3 	udiv	r3, r1, r3
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8470 	beq.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005012:	78fa      	ldrb	r2, [r7, #3]
 8005014:	6879      	ldr	r1, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	333c      	adds	r3, #60	@ 0x3c
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	f083 0301 	eor.w	r3, r3, #1
 800502a:	b2d8      	uxtb	r0, r3
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	333c      	adds	r3, #60	@ 0x3c
 800503a:	4602      	mov	r2, r0
 800503c:	701a      	strb	r2, [r3, #0]
 800503e:	f000 bc58 	b.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	333c      	adds	r3, #60	@ 0x3c
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	78fa      	ldrb	r2, [r7, #3]
 8005056:	f083 0301 	eor.w	r3, r3, #1
 800505a:	b2d8      	uxtb	r0, r3
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	333c      	adds	r3, #60	@ 0x3c
 800506a:	4602      	mov	r2, r0
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	f000 bc40 	b.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	78fa      	ldrb	r2, [r7, #3]
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f004 fba9 	bl	80097d2 <USB_ReadChInterrupts>
 8005080:	4603      	mov	r3, r0
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b20      	cmp	r3, #32
 8005088:	d131      	bne.n	80050ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005096:	461a      	mov	r2, r3
 8005098:	2320      	movs	r3, #32
 800509a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	331a      	adds	r3, #26
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	f040 841f 	bne.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80050b4:	78fa      	ldrb	r2, [r7, #3]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	331b      	adds	r3, #27
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	334d      	adds	r3, #77	@ 0x4d
 80050d8:	2203      	movs	r2, #3
 80050da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	4611      	mov	r1, r2
 80050e4:	4618      	mov	r0, r3
 80050e6:	f005 f91e 	bl	800a326 <USB_HC_Halt>
 80050ea:	f000 bc02 	b.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f004 fb6b 	bl	80097d2 <USB_ReadChInterrupts>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b02      	cmp	r3, #2
 8005104:	f040 8305 	bne.w	8005712 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	2302      	movs	r3, #2
 8005118:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800511a:	78fa      	ldrb	r2, [r7, #3]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	011b      	lsls	r3, r3, #4
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	334d      	adds	r3, #77	@ 0x4d
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d114      	bne.n	800515a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	334d      	adds	r3, #77	@ 0x4d
 8005140:	2202      	movs	r2, #2
 8005142:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	440b      	add	r3, r1
 8005152:	334c      	adds	r3, #76	@ 0x4c
 8005154:	2201      	movs	r2, #1
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	e2cc      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	334d      	adds	r3, #77	@ 0x4d
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b06      	cmp	r3, #6
 800516e:	d114      	bne.n	800519a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	334d      	adds	r3, #77	@ 0x4d
 8005180:	2202      	movs	r2, #2
 8005182:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005184:	78fa      	ldrb	r2, [r7, #3]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	334c      	adds	r3, #76	@ 0x4c
 8005194:	2205      	movs	r2, #5
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	e2ac      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	334d      	adds	r3, #77	@ 0x4d
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b07      	cmp	r3, #7
 80051ae:	d00b      	beq.n	80051c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	334d      	adds	r3, #77	@ 0x4d
 80051c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	f040 80a6 	bne.w	8005314 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	334d      	adds	r3, #77	@ 0x4d
 80051d8:	2202      	movs	r2, #2
 80051da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3344      	adds	r3, #68	@ 0x44
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	1c59      	adds	r1, r3, #1
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4403      	add	r3, r0
 80051fc:	3344      	adds	r3, #68	@ 0x44
 80051fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005200:	78fa      	ldrb	r2, [r7, #3]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	1a9b      	subs	r3, r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	3344      	adds	r3, #68	@ 0x44
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d943      	bls.n	800529e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	3344      	adds	r3, #68	@ 0x44
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	331a      	adds	r3, #26
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d123      	bne.n	8005288 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	331b      	adds	r3, #27
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	331c      	adds	r3, #28
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	440a      	add	r2, r1
 800527e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005286:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	334c      	adds	r3, #76	@ 0x4c
 8005298:	2204      	movs	r2, #4
 800529a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800529c:	e229      	b.n	80056f2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	334c      	adds	r3, #76	@ 0x4c
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3326      	adds	r3, #38	@ 0x26
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00b      	beq.n	80052e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3326      	adds	r3, #38	@ 0x26
 80052d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052da:	2b02      	cmp	r3, #2
 80052dc:	f040 8209 	bne.w	80056f2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800530c:	461a      	mov	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005312:	e1ee      	b.n	80056f2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	334d      	adds	r3, #77	@ 0x4d
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b05      	cmp	r3, #5
 8005328:	f040 80c8 	bne.w	80054bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	334d      	adds	r3, #77	@ 0x4d
 800533c:	2202      	movs	r2, #2
 800533e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	331b      	adds	r3, #27
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b01      	cmp	r3, #1
 8005354:	f040 81ce 	bne.w	80056f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	3326      	adds	r3, #38	@ 0x26
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d16b      	bne.n	8005446 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	1a9b      	subs	r3, r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	3348      	adds	r3, #72	@ 0x48
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	1c59      	adds	r1, r3, #1
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4403      	add	r3, r0
 800538e:	3348      	adds	r3, #72	@ 0x48
 8005390:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	3348      	adds	r3, #72	@ 0x48
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d943      	bls.n	8005430 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3348      	adds	r3, #72	@ 0x48
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	331b      	adds	r3, #27
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	3344      	adds	r3, #68	@ 0x44
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d809      	bhi.n	80053fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	331c      	adds	r3, #28
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	015a      	lsls	r2, r3, #5
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4413      	add	r3, r2
 8005402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	0151      	lsls	r1, r2, #5
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	440a      	add	r2, r1
 8005410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005418:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	1a9b      	subs	r3, r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	440b      	add	r3, r1
 8005428:	334c      	adds	r3, #76	@ 0x4c
 800542a:	2204      	movs	r2, #4
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e014      	b.n	800545a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334c      	adds	r3, #76	@ 0x4c
 8005440:	2202      	movs	r2, #2
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e009      	b.n	800545a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	334c      	adds	r3, #76	@ 0x4c
 8005456:	2202      	movs	r2, #2
 8005458:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3326      	adds	r3, #38	@ 0x26
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00b      	beq.n	8005488 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	3326      	adds	r3, #38	@ 0x26
 8005480:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005482:	2b02      	cmp	r3, #2
 8005484:	f040 8136 	bne.w	80056f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	4413      	add	r3, r2
 8005490:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800549e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b4:	461a      	mov	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e11b      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054bc:	78fa      	ldrb	r2, [r7, #3]
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	4613      	mov	r3, r2
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	1a9b      	subs	r3, r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	440b      	add	r3, r1
 80054ca:	334d      	adds	r3, #77	@ 0x4d
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	f040 8081 	bne.w	80055d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	334d      	adds	r3, #77	@ 0x4d
 80054e4:	2202      	movs	r2, #2
 80054e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	331b      	adds	r3, #27
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	f040 80fa 	bne.w	80056f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	334c      	adds	r3, #76	@ 0x4c
 8005510:	2202      	movs	r2, #2
 8005512:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	440a      	add	r2, r1
 800552a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800552e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005532:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	440a      	add	r2, r1
 800554a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800554e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005552:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	78fa      	ldrb	r2, [r7, #3]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	440a      	add	r2, r1
 800556a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800556e:	f023 0320 	bic.w	r3, r3, #32
 8005572:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005574:	78fa      	ldrb	r2, [r7, #3]
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	440b      	add	r3, r1
 8005582:	3326      	adds	r3, #38	@ 0x26
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800558a:	78fa      	ldrb	r2, [r7, #3]
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3326      	adds	r3, #38	@ 0x26
 800559a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800559c:	2b02      	cmp	r3, #2
 800559e:	f040 80a9 	bne.w	80056f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80055a2:	78fb      	ldrb	r3, [r7, #3]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ce:	461a      	mov	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e08e      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	334d      	adds	r3, #77	@ 0x4d
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d143      	bne.n	8005674 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	334d      	adds	r3, #77	@ 0x4d
 80055fc:	2202      	movs	r2, #2
 80055fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	334c      	adds	r3, #76	@ 0x4c
 8005610:	2202      	movs	r2, #2
 8005612:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3326      	adds	r3, #38	@ 0x26
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	3326      	adds	r3, #38	@ 0x26
 800563a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800563c:	2b02      	cmp	r3, #2
 800563e:	d159      	bne.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005656:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800565e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	e03f      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	334d      	adds	r3, #77	@ 0x4d
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b08      	cmp	r3, #8
 8005688:	d126      	bne.n	80056d8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	334d      	adds	r3, #77	@ 0x4d
 800569a:	2202      	movs	r2, #2
 800569c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	4613      	mov	r3, r2
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	1a9b      	subs	r3, r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3344      	adds	r3, #68	@ 0x44
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4403      	add	r3, r0
 80056be:	3344      	adds	r3, #68	@ 0x44
 80056c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	334c      	adds	r3, #76	@ 0x4c
 80056d2:	2204      	movs	r2, #4
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e00d      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	1a9b      	subs	r3, r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	334d      	adds	r3, #77	@ 0x4d
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	f000 8100 	beq.w	80058f0 <HCD_HC_IN_IRQHandler+0xcca>
 80056f0:	e000      	b.n	80056f4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056f4:	78fa      	ldrb	r2, [r7, #3]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	334c      	adds	r3, #76	@ 0x4c
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f00b fdcc 	bl	80112a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005710:	e0ef      	b.n	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f004 f859 	bl	80097d2 <USB_ReadChInterrupts>
 8005720:	4603      	mov	r3, r0
 8005722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005726:	2b40      	cmp	r3, #64	@ 0x40
 8005728:	d12f      	bne.n	800578a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005736:	461a      	mov	r2, r3
 8005738:	2340      	movs	r3, #64	@ 0x40
 800573a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	334d      	adds	r3, #77	@ 0x4d
 800574c:	2205      	movs	r2, #5
 800574e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	331a      	adds	r3, #26
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3344      	adds	r3, #68	@ 0x44
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f004 fdcf 	bl	800a326 <USB_HC_Halt>
 8005788:	e0b3      	b.n	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f004 f81d 	bl	80097d2 <USB_ReadChInterrupts>
 8005798:	4603      	mov	r3, r0
 800579a:	f003 0310 	and.w	r3, r3, #16
 800579e:	2b10      	cmp	r3, #16
 80057a0:	f040 80a7 	bne.w	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80057a4:	78fa      	ldrb	r2, [r7, #3]
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	3326      	adds	r3, #38	@ 0x26
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d11b      	bne.n	80057f2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3344      	adds	r3, #68	@ 0x44
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80057ce:	78fa      	ldrb	r2, [r7, #3]
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	1a9b      	subs	r3, r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	334d      	adds	r3, #77	@ 0x4d
 80057de:	2204      	movs	r2, #4
 80057e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f004 fd9b 	bl	800a326 <USB_HC_Halt>
 80057f0:	e03f      	b.n	8005872 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	3326      	adds	r3, #38	@ 0x26
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005808:	78fa      	ldrb	r2, [r7, #3]
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	4613      	mov	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3326      	adds	r3, #38	@ 0x26
 8005818:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800581a:	2b02      	cmp	r3, #2
 800581c:	d129      	bne.n	8005872 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800581e:	78fa      	ldrb	r2, [r7, #3]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	3344      	adds	r3, #68	@ 0x44
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	799b      	ldrb	r3, [r3, #6]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HCD_HC_IN_IRQHandler+0xc2a>
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	331b      	adds	r3, #27
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d110      	bne.n	8005872 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	1a9b      	subs	r3, r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	334d      	adds	r3, #77	@ 0x4d
 8005860:	2204      	movs	r2, #4
 8005862:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f004 fd5a 	bl	800a326 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005872:	78fa      	ldrb	r2, [r7, #3]
 8005874:	6879      	ldr	r1, [r7, #4]
 8005876:	4613      	mov	r3, r2
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	1a9b      	subs	r3, r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	331b      	adds	r3, #27
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d129      	bne.n	80058dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	331b      	adds	r3, #27
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058d6:	f043 0320 	orr.w	r3, r3, #32
 80058da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e8:	461a      	mov	r2, r3
 80058ea:	2310      	movs	r3, #16
 80058ec:	6093      	str	r3, [r2, #8]
 80058ee:	e000      	b.n	80058f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80058f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	78fa      	ldrb	r2, [r7, #3]
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f003 ff5b 	bl	80097d2 <USB_ReadChInterrupts>
 800591c:	4603      	mov	r3, r0
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b04      	cmp	r3, #4
 8005924:	d11b      	bne.n	800595e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	2304      	movs	r3, #4
 8005936:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005938:	78fa      	ldrb	r2, [r7, #3]
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	334d      	adds	r3, #77	@ 0x4d
 8005948:	2207      	movs	r2, #7
 800594a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f004 fce6 	bl	800a326 <USB_HC_Halt>
 800595a:	f000 bc89 	b.w	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	4611      	mov	r1, r2
 8005966:	4618      	mov	r0, r3
 8005968:	f003 ff33 	bl	80097d2 <USB_ReadChInterrupts>
 800596c:	4603      	mov	r3, r0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	f040 8082 	bne.w	8005a7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005984:	461a      	mov	r2, r3
 8005986:	2320      	movs	r3, #32
 8005988:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3319      	adds	r3, #25
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d124      	bne.n	80059ea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3319      	adds	r3, #25
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	334c      	adds	r3, #76	@ 0x4c
 80059c4:	2202      	movs	r2, #2
 80059c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	334d      	adds	r3, #77	@ 0x4d
 80059d8:	2203      	movs	r2, #3
 80059da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	78fa      	ldrb	r2, [r7, #3]
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f004 fc9e 	bl	800a326 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	331a      	adds	r3, #26
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	f040 8437 	bne.w	8006270 <HCD_HC_OUT_IRQHandler+0x978>
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	331b      	adds	r3, #27
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 842b 	bne.w	8006270 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3326      	adds	r3, #38	@ 0x26
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d009      	beq.n	8005a44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	331b      	adds	r3, #27
 8005a40:	2201      	movs	r2, #1
 8005a42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a44:	78fa      	ldrb	r2, [r7, #3]
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	334d      	adds	r3, #77	@ 0x4d
 8005a54:	2203      	movs	r2, #3
 8005a56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	78fa      	ldrb	r2, [r7, #3]
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4618      	mov	r0, r3
 8005a62:	f004 fc60 	bl	800a326 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a66:	78fa      	ldrb	r2, [r7, #3]
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	1a9b      	subs	r3, r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	3344      	adds	r3, #68	@ 0x44
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e3f9      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	78fa      	ldrb	r2, [r7, #3]
 8005a82:	4611      	mov	r1, r2
 8005a84:	4618      	mov	r0, r3
 8005a86:	f003 fea4 	bl	80097d2 <USB_ReadChInterrupts>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a94:	d111      	bne.n	8005aba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aa8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	78fa      	ldrb	r2, [r7, #3]
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f004 fc37 	bl	800a326 <USB_HC_Halt>
 8005ab8:	e3da      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f003 fe85 	bl	80097d2 <USB_ReadChInterrupts>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d168      	bne.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ad2:	78fa      	ldrb	r2, [r7, #3]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	3344      	adds	r3, #68	@ 0x44
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f003 fe6f 	bl	80097d2 <USB_ReadChInterrupts>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b40      	cmp	r3, #64	@ 0x40
 8005afc:	d112      	bne.n	8005b24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005afe:	78fa      	ldrb	r2, [r7, #3]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	4613      	mov	r3, r2
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	3319      	adds	r3, #25
 8005b0e:	2201      	movs	r2, #1
 8005b10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2340      	movs	r3, #64	@ 0x40
 8005b22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	331b      	adds	r3, #27
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d019      	beq.n	8005b6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	1a9b      	subs	r3, r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	331b      	adds	r3, #27
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005b80:	78fa      	ldrb	r2, [r7, #3]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	334d      	adds	r3, #77	@ 0x4d
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f004 fbc2 	bl	800a326 <USB_HC_Halt>
 8005ba2:	e365      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f003 fe10 	bl	80097d2 <USB_ReadChInterrupts>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b40      	cmp	r3, #64	@ 0x40
 8005bba:	d139      	bne.n	8005c30 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	334d      	adds	r3, #77	@ 0x4d
 8005bcc:	2205      	movs	r2, #5
 8005bce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	331a      	adds	r3, #26
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	3319      	adds	r3, #25
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	011b      	lsls	r3, r3, #4
 8005c02:	1a9b      	subs	r3, r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	3344      	adds	r3, #68	@ 0x44
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	4611      	mov	r1, r2
 8005c16:	4618      	mov	r0, r3
 8005c18:	f004 fb85 	bl	800a326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2340      	movs	r3, #64	@ 0x40
 8005c2c:	6093      	str	r3, [r2, #8]
 8005c2e:	e31f      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	78fa      	ldrb	r2, [r7, #3]
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fdca 	bl	80097d2 <USB_ReadChInterrupts>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f003 0308 	and.w	r3, r3, #8
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d11a      	bne.n	8005c7e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c54:	461a      	mov	r2, r3
 8005c56:	2308      	movs	r3, #8
 8005c58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	1a9b      	subs	r3, r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	440b      	add	r3, r1
 8005c68:	334d      	adds	r3, #77	@ 0x4d
 8005c6a:	2206      	movs	r2, #6
 8005c6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	4611      	mov	r1, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f004 fb55 	bl	800a326 <USB_HC_Halt>
 8005c7c:	e2f8      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f003 fda3 	bl	80097d2 <USB_ReadChInterrupts>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b10      	cmp	r3, #16
 8005c94:	d144      	bne.n	8005d20 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3344      	adds	r3, #68	@ 0x44
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	334d      	adds	r3, #77	@ 0x4d
 8005cba:	2204      	movs	r2, #4
 8005cbc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005cbe:	78fa      	ldrb	r2, [r7, #3]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	1a9b      	subs	r3, r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3319      	adds	r3, #25
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d114      	bne.n	8005cfe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	011b      	lsls	r3, r3, #4
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	440b      	add	r3, r1
 8005ce2:	3318      	adds	r3, #24
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	1a9b      	subs	r3, r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	3319      	adds	r3, #25
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f004 fb0d 	bl	800a326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d18:	461a      	mov	r2, r3
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	6093      	str	r3, [r2, #8]
 8005d1e:	e2a7      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	4611      	mov	r1, r2
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f003 fd52 	bl	80097d2 <USB_ReadChInterrupts>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d34:	2b80      	cmp	r3, #128	@ 0x80
 8005d36:	f040 8083 	bne.w	8005e40 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	799b      	ldrb	r3, [r3, #6]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d111      	bne.n	8005d66 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	334d      	adds	r3, #77	@ 0x4d
 8005d52:	2207      	movs	r2, #7
 8005d54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f004 fae1 	bl	800a326 <USB_HC_Halt>
 8005d64:	e062      	b.n	8005e2c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	1a9b      	subs	r3, r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	3344      	adds	r3, #68	@ 0x44
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1c59      	adds	r1, r3, #1
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4403      	add	r3, r0
 8005d86:	3344      	adds	r3, #68	@ 0x44
 8005d88:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	3344      	adds	r3, #68	@ 0x44
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d922      	bls.n	8005de6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	6879      	ldr	r1, [r7, #4]
 8005da4:	4613      	mov	r3, r2
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	3344      	adds	r3, #68	@ 0x44
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005db4:	78fa      	ldrb	r2, [r7, #3]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	4613      	mov	r3, r2
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	334c      	adds	r3, #76	@ 0x4c
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005dc8:	78fa      	ldrb	r2, [r7, #3]
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	334c      	adds	r3, #76	@ 0x4c
 8005dd8:	781a      	ldrb	r2, [r3, #0]
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f00b fa62 	bl	80112a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005de4:	e022      	b.n	8005e2c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	4613      	mov	r3, r2
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	334c      	adds	r3, #76	@ 0x4c
 8005df6:	2202      	movs	r2, #2
 8005df8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e10:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e18:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2380      	movs	r3, #128	@ 0x80
 8005e3c:	6093      	str	r3, [r2, #8]
 8005e3e:	e217      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f003 fcc2 	bl	80097d2 <USB_ReadChInterrupts>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e58:	d11b      	bne.n	8005e92 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	334d      	adds	r3, #77	@ 0x4d
 8005e6a:	2209      	movs	r2, #9
 8005e6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	4611      	mov	r1, r2
 8005e76:	4618      	mov	r0, r3
 8005e78:	f004 fa55 	bl	800a326 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e8e:	6093      	str	r3, [r2, #8]
 8005e90:	e1ee      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f003 fc99 	bl	80097d2 <USB_ReadChInterrupts>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	f040 81df 	bne.w	800626a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2302      	movs	r3, #2
 8005ebc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005ebe:	78fa      	ldrb	r2, [r7, #3]
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	1a9b      	subs	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	334d      	adds	r3, #77	@ 0x4d
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f040 8093 	bne.w	8005ffc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	334d      	adds	r3, #77	@ 0x4d
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	334c      	adds	r3, #76	@ 0x4c
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3326      	adds	r3, #38	@ 0x26
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d00b      	beq.n	8005f2c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3326      	adds	r3, #38	@ 0x26
 8005f24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	f040 8190 	bne.w	800624c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	799b      	ldrb	r3, [r3, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d115      	bne.n	8005f60 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	333d      	adds	r3, #61	@ 0x3d
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	f083 0301 	eor.w	r3, r3, #1
 8005f4c:	b2d8      	uxtb	r0, r3
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	333d      	adds	r3, #61	@ 0x3d
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	799b      	ldrb	r3, [r3, #6]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	f040 8171 	bne.w	800624c <HCD_HC_OUT_IRQHandler+0x954>
 8005f6a:	78fa      	ldrb	r2, [r7, #3]
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	3334      	adds	r3, #52	@ 0x34
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8165 	beq.w	800624c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	3334      	adds	r3, #52	@ 0x34
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	1a9b      	subs	r3, r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4403      	add	r3, r0
 8005fa2:	3328      	adds	r3, #40	@ 0x28
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	440b      	add	r3, r1
 8005fa8:	1e59      	subs	r1, r3, #1
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4403      	add	r3, r0
 8005fb8:	3328      	adds	r3, #40	@ 0x28
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fc0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 813f 	beq.w	800624c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	333d      	adds	r3, #61	@ 0x3d
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	78fa      	ldrb	r2, [r7, #3]
 8005fe2:	f083 0301 	eor.w	r3, r3, #1
 8005fe6:	b2d8      	uxtb	r0, r3
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	333d      	adds	r3, #61	@ 0x3d
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	701a      	strb	r2, [r3, #0]
 8005ffa:	e127      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	440b      	add	r3, r1
 800600a:	334d      	adds	r3, #77	@ 0x4d
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d120      	bne.n	8006054 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	334d      	adds	r3, #77	@ 0x4d
 8006022:	2202      	movs	r2, #2
 8006024:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	331b      	adds	r3, #27
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b01      	cmp	r3, #1
 800603a:	f040 8107 	bne.w	800624c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	334c      	adds	r3, #76	@ 0x4c
 800604e:	2202      	movs	r2, #2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	e0fb      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006054:	78fa      	ldrb	r2, [r7, #3]
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4613      	mov	r3, r2
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	334d      	adds	r3, #77	@ 0x4d
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b04      	cmp	r3, #4
 8006068:	d13a      	bne.n	80060e0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	334d      	adds	r3, #77	@ 0x4d
 800607a:	2202      	movs	r2, #2
 800607c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800607e:	78fa      	ldrb	r2, [r7, #3]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	334c      	adds	r3, #76	@ 0x4c
 800608e:	2202      	movs	r2, #2
 8006090:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	1a9b      	subs	r3, r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	331b      	adds	r3, #27
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 80d1 	bne.w	800624c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	331b      	adds	r3, #27
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	78fa      	ldrb	r2, [r7, #3]
 80060ce:	0151      	lsls	r1, r2, #5
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	440a      	add	r2, r1
 80060d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060dc:	6053      	str	r3, [r2, #4]
 80060de:	e0b5      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060e0:	78fa      	ldrb	r2, [r7, #3]
 80060e2:	6879      	ldr	r1, [r7, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	1a9b      	subs	r3, r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	334d      	adds	r3, #77	@ 0x4d
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d114      	bne.n	8006120 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060f6:	78fa      	ldrb	r2, [r7, #3]
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4613      	mov	r3, r2
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	334d      	adds	r3, #77	@ 0x4d
 8006106:	2202      	movs	r2, #2
 8006108:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	334c      	adds	r3, #76	@ 0x4c
 800611a:	2202      	movs	r2, #2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e095      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	334d      	adds	r3, #77	@ 0x4d
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b06      	cmp	r3, #6
 8006134:	d114      	bne.n	8006160 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	6879      	ldr	r1, [r7, #4]
 800613a:	4613      	mov	r3, r2
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	1a9b      	subs	r3, r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	334d      	adds	r3, #77	@ 0x4d
 8006146:	2202      	movs	r2, #2
 8006148:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	334c      	adds	r3, #76	@ 0x4c
 800615a:	2205      	movs	r2, #5
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e075      	b.n	800624c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006160:	78fa      	ldrb	r2, [r7, #3]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	334d      	adds	r3, #77	@ 0x4d
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	2b07      	cmp	r3, #7
 8006174:	d00a      	beq.n	800618c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	6879      	ldr	r1, [r7, #4]
 800617a:	4613      	mov	r3, r2
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	440b      	add	r3, r1
 8006184:	334d      	adds	r3, #77	@ 0x4d
 8006186:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006188:	2b09      	cmp	r3, #9
 800618a:	d170      	bne.n	800626e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800618c:	78fa      	ldrb	r2, [r7, #3]
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	440b      	add	r3, r1
 800619a:	334d      	adds	r3, #77	@ 0x4d
 800619c:	2202      	movs	r2, #2
 800619e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80061a0:	78fa      	ldrb	r2, [r7, #3]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	4613      	mov	r3, r2
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	440b      	add	r3, r1
 80061ae:	3344      	adds	r3, #68	@ 0x44
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	1c59      	adds	r1, r3, #1
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4613      	mov	r3, r2
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	1a9b      	subs	r3, r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4403      	add	r3, r0
 80061c0:	3344      	adds	r3, #68	@ 0x44
 80061c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	3344      	adds	r3, #68	@ 0x44
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d914      	bls.n	8006204 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	6879      	ldr	r1, [r7, #4]
 80061de:	4613      	mov	r3, r2
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3344      	adds	r3, #68	@ 0x44
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4613      	mov	r3, r2
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	334c      	adds	r3, #76	@ 0x4c
 80061fe:	2204      	movs	r2, #4
 8006200:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006202:	e022      	b.n	800624a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006204:	78fa      	ldrb	r2, [r7, #3]
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	334c      	adds	r3, #76	@ 0x4c
 8006214:	2202      	movs	r2, #2
 8006216:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800622e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006236:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006244:	461a      	mov	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800624a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	334c      	adds	r3, #76	@ 0x4c
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f00b f820 	bl	80112a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006268:	e002      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800626e:	bf00      	nop
  }
}
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b08a      	sub	sp, #40	@ 0x28
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	0c5b      	lsrs	r3, r3, #17
 800629c:	f003 030f 	and.w	r3, r3, #15
 80062a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	091b      	lsrs	r3, r3, #4
 80062a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d004      	beq.n	80062bc <HCD_RXQLVL_IRQHandler+0x46>
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b05      	cmp	r3, #5
 80062b6:	f000 80b6 	beq.w	8006426 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062ba:	e0b7      	b.n	800642c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80b3 	beq.w	800642a <HCD_RXQLVL_IRQHandler+0x1b4>
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4613      	mov	r3, r2
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	332c      	adds	r3, #44	@ 0x2c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 80a7 	beq.w	800642a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4613      	mov	r3, r2
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	3338      	adds	r3, #56	@ 0x38
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	18d1      	adds	r1, r2, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	4613      	mov	r3, r2
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	1a9b      	subs	r3, r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4403      	add	r3, r0
 8006300:	3334      	adds	r3, #52	@ 0x34
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4299      	cmp	r1, r3
 8006306:	f200 8083 	bhi.w	8006410 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	4613      	mov	r3, r2
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	332c      	adds	r3, #44	@ 0x2c
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	b292      	uxth	r2, r2
 8006324:	4619      	mov	r1, r3
 8006326:	f003 f9e9 	bl	80096fc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4613      	mov	r3, r2
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	332c      	adds	r3, #44	@ 0x2c
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	18d1      	adds	r1, r2, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4403      	add	r3, r0
 800634e:	332c      	adds	r3, #44	@ 0x2c
 8006350:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4613      	mov	r3, r2
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	3338      	adds	r3, #56	@ 0x38
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	18d1      	adds	r1, r2, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4613      	mov	r3, r2
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	1a9b      	subs	r3, r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4403      	add	r3, r0
 8006376:	3338      	adds	r3, #56	@ 0x38
 8006378:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	0cdb      	lsrs	r3, r3, #19
 800638a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800638e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4613      	mov	r3, r2
 8006396:	011b      	lsls	r3, r3, #4
 8006398:	1a9b      	subs	r3, r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	440b      	add	r3, r1
 800639e:	3328      	adds	r3, #40	@ 0x28
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d13f      	bne.n	800642a <HCD_RXQLVL_IRQHandler+0x1b4>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d03c      	beq.n	800642a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063c6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063ce:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063dc:	461a      	mov	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	4613      	mov	r3, r2
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	333c      	adds	r3, #60	@ 0x3c
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	f083 0301 	eor.w	r3, r3, #1
 80063f8:	b2d8      	uxtb	r0, r3
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	4613      	mov	r3, r2
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	1a9b      	subs	r3, r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	440b      	add	r3, r1
 8006408:	333c      	adds	r3, #60	@ 0x3c
 800640a:	4602      	mov	r2, r0
 800640c:	701a      	strb	r2, [r3, #0]
      break;
 800640e:	e00c      	b.n	800642a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	4613      	mov	r3, r2
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	334c      	adds	r3, #76	@ 0x4c
 8006420:	2204      	movs	r2, #4
 8006422:	701a      	strb	r2, [r3, #0]
      break;
 8006424:	e001      	b.n	800642a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006426:	bf00      	nop
 8006428:	e000      	b.n	800642c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800642a:	bf00      	nop
  }
}
 800642c:	bf00      	nop
 800642e:	3728      	adds	r7, #40	@ 0x28
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006460:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d10b      	bne.n	8006484 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b01      	cmp	r3, #1
 8006474:	d102      	bne.n	800647c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f00a fefa 	bl	8011270 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f043 0302 	orr.w	r3, r3, #2
 8006482:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b08      	cmp	r3, #8
 800648c:	d132      	bne.n	80064f4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f043 0308 	orr.w	r3, r3, #8
 8006494:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b04      	cmp	r3, #4
 800649e:	d126      	bne.n	80064ee <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	7a5b      	ldrb	r3, [r3, #9]
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d113      	bne.n	80064d0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80064ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064b2:	d106      	bne.n	80064c2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2102      	movs	r1, #2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f003 fab4 	bl	8009a28 <USB_InitFSLSPClkSel>
 80064c0:	e011      	b.n	80064e6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2101      	movs	r1, #1
 80064c8:	4618      	mov	r0, r3
 80064ca:	f003 faad 	bl	8009a28 <USB_InitFSLSPClkSel>
 80064ce:	e00a      	b.n	80064e6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	79db      	ldrb	r3, [r3, #7]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d106      	bne.n	80064e6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064de:	461a      	mov	r2, r3
 80064e0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80064e4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f00a fef0 	bl	80112cc <HAL_HCD_PortEnabled_Callback>
 80064ec:	e002      	b.n	80064f4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f00a fefa 	bl	80112e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d103      	bne.n	8006506 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f043 0320 	orr.w	r3, r3, #32
 8006504:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800650c:	461a      	mov	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6013      	str	r3, [r2, #0]
}
 8006512:	bf00      	nop
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e12b      	b.n	8006786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fc ff4a 	bl	80033dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2224      	movs	r2, #36	@ 0x24
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800656e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800657e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006580:	f001 fa20 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8006584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4a81      	ldr	r2, [pc, #516]	@ (8006790 <HAL_I2C_Init+0x274>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d807      	bhi.n	80065a0 <HAL_I2C_Init+0x84>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4a80      	ldr	r2, [pc, #512]	@ (8006794 <HAL_I2C_Init+0x278>)
 8006594:	4293      	cmp	r3, r2
 8006596:	bf94      	ite	ls
 8006598:	2301      	movls	r3, #1
 800659a:	2300      	movhi	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e006      	b.n	80065ae <HAL_I2C_Init+0x92>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a7d      	ldr	r2, [pc, #500]	@ (8006798 <HAL_I2C_Init+0x27c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bf94      	ite	ls
 80065a8:	2301      	movls	r3, #1
 80065aa:	2300      	movhi	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e0e7      	b.n	8006786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4a78      	ldr	r2, [pc, #480]	@ (800679c <HAL_I2C_Init+0x280>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	0c9b      	lsrs	r3, r3, #18
 80065c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	4a6a      	ldr	r2, [pc, #424]	@ (8006790 <HAL_I2C_Init+0x274>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d802      	bhi.n	80065f0 <HAL_I2C_Init+0xd4>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3301      	adds	r3, #1
 80065ee:	e009      	b.n	8006604 <HAL_I2C_Init+0xe8>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	4a69      	ldr	r2, [pc, #420]	@ (80067a0 <HAL_I2C_Init+0x284>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	099b      	lsrs	r3, r3, #6
 8006602:	3301      	adds	r3, #1
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	430b      	orrs	r3, r1
 800660a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006616:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	495c      	ldr	r1, [pc, #368]	@ (8006790 <HAL_I2C_Init+0x274>)
 8006620:	428b      	cmp	r3, r1
 8006622:	d819      	bhi.n	8006658 <HAL_I2C_Init+0x13c>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1e59      	subs	r1, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006632:	1c59      	adds	r1, r3, #1
 8006634:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006638:	400b      	ands	r3, r1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_I2C_Init+0x138>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1e59      	subs	r1, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	005b      	lsls	r3, r3, #1
 8006648:	fbb1 f3f3 	udiv	r3, r1, r3
 800664c:	3301      	adds	r3, #1
 800664e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006652:	e051      	b.n	80066f8 <HAL_I2C_Init+0x1dc>
 8006654:	2304      	movs	r3, #4
 8006656:	e04f      	b.n	80066f8 <HAL_I2C_Init+0x1dc>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d111      	bne.n	8006684 <HAL_I2C_Init+0x168>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	1e58      	subs	r0, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6859      	ldr	r1, [r3, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	440b      	add	r3, r1
 800666e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006672:	3301      	adds	r3, #1
 8006674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006678:	2b00      	cmp	r3, #0
 800667a:	bf0c      	ite	eq
 800667c:	2301      	moveq	r3, #1
 800667e:	2300      	movne	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	e012      	b.n	80066aa <HAL_I2C_Init+0x18e>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	1e58      	subs	r0, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6859      	ldr	r1, [r3, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	0099      	lsls	r1, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	fbb0 f3f3 	udiv	r3, r0, r3
 800669a:	3301      	adds	r3, #1
 800669c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bf0c      	ite	eq
 80066a4:	2301      	moveq	r3, #1
 80066a6:	2300      	movne	r3, #0
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <HAL_I2C_Init+0x196>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e022      	b.n	80066f8 <HAL_I2C_Init+0x1dc>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10e      	bne.n	80066d8 <HAL_I2C_Init+0x1bc>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1e58      	subs	r0, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	440b      	add	r3, r1
 80066c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80066cc:	3301      	adds	r3, #1
 80066ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066d6:	e00f      	b.n	80066f8 <HAL_I2C_Init+0x1dc>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1e58      	subs	r0, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	0099      	lsls	r1, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ee:	3301      	adds	r3, #1
 80066f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	6809      	ldr	r1, [r1, #0]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	69da      	ldr	r2, [r3, #28]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006726:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6911      	ldr	r1, [r2, #16]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68d2      	ldr	r2, [r2, #12]
 8006732:	4311      	orrs	r1, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	430b      	orrs	r3, r1
 800673a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f042 0201 	orr.w	r2, r2, #1
 8006766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	000186a0 	.word	0x000186a0
 8006794:	001e847f 	.word	0x001e847f
 8006798:	003d08ff 	.word	0x003d08ff
 800679c:	431bde83 	.word	0x431bde83
 80067a0:	10624dd3 	.word	0x10624dd3

080067a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e128      	b.n	8006a08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a90      	ldr	r2, [pc, #576]	@ (8006a10 <HAL_I2S_Init+0x26c>)
 80067ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fc fe4b 	bl	800346c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80067ec:	f023 030f 	bic.w	r3, r3, #15
 80067f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2202      	movs	r2, #2
 80067f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d060      	beq.n	80068c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800680a:	2310      	movs	r3, #16
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	e001      	b.n	8006814 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006810:	2320      	movs	r3, #32
 8006812:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b20      	cmp	r3, #32
 800681a:	d802      	bhi.n	8006822 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006822:	2001      	movs	r0, #1
 8006824:	f001 fa0a 	bl	8007c3c <HAL_RCCEx_GetPeriphCLKFreq>
 8006828:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006832:	d125      	bne.n	8006880 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d010      	beq.n	800685e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	fbb2 f2f3 	udiv	r2, r2, r3
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	fbb2 f3f3 	udiv	r3, r2, r3
 8006858:	3305      	adds	r3, #5
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e01f      	b.n	800689e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	fbb2 f2f3 	udiv	r2, r2, r3
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	461a      	mov	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	3305      	adds	r3, #5
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	e00e      	b.n	800689e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	fbb2 f2f3 	udiv	r2, r2, r3
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	005b      	lsls	r3, r3, #1
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	3305      	adds	r3, #5
 800689c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4a5c      	ldr	r2, [pc, #368]	@ (8006a14 <HAL_I2S_Init+0x270>)
 80068a2:	fba2 2303 	umull	r2, r3, r2, r3
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	e003      	b.n	80068cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80068c4:	2302      	movs	r3, #2
 80068c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d902      	bls.n	80068d8 <HAL_I2S_Init+0x134>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2bff      	cmp	r3, #255	@ 0xff
 80068d6:	d907      	bls.n	80068e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068dc:	f043 0210 	orr.w	r2, r3, #16
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e08f      	b.n	8006a08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	ea42 0103 	orr.w	r1, r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006906:	f023 030f 	bic.w	r3, r3, #15
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6851      	ldr	r1, [r2, #4]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	6892      	ldr	r2, [r2, #8]
 8006912:	4311      	orrs	r1, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68d2      	ldr	r2, [r2, #12]
 8006918:	4311      	orrs	r1, r2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6992      	ldr	r2, [r2, #24]
 800691e:	430a      	orrs	r2, r1
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800692a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d161      	bne.n	80069f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a38      	ldr	r2, [pc, #224]	@ (8006a18 <HAL_I2S_Init+0x274>)
 8006938:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a37      	ldr	r2, [pc, #220]	@ (8006a1c <HAL_I2S_Init+0x278>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d101      	bne.n	8006948 <HAL_I2S_Init+0x1a4>
 8006944:	4b36      	ldr	r3, [pc, #216]	@ (8006a20 <HAL_I2S_Init+0x27c>)
 8006946:	e001      	b.n	800694c <HAL_I2S_Init+0x1a8>
 8006948:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	4932      	ldr	r1, [pc, #200]	@ (8006a1c <HAL_I2S_Init+0x278>)
 8006954:	428a      	cmp	r2, r1
 8006956:	d101      	bne.n	800695c <HAL_I2S_Init+0x1b8>
 8006958:	4a31      	ldr	r2, [pc, #196]	@ (8006a20 <HAL_I2S_Init+0x27c>)
 800695a:	e001      	b.n	8006960 <HAL_I2S_Init+0x1bc>
 800695c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006960:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006964:	f023 030f 	bic.w	r3, r3, #15
 8006968:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a2b      	ldr	r2, [pc, #172]	@ (8006a1c <HAL_I2S_Init+0x278>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d101      	bne.n	8006978 <HAL_I2S_Init+0x1d4>
 8006974:	4b2a      	ldr	r3, [pc, #168]	@ (8006a20 <HAL_I2S_Init+0x27c>)
 8006976:	e001      	b.n	800697c <HAL_I2S_Init+0x1d8>
 8006978:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800697c:	2202      	movs	r2, #2
 800697e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a25      	ldr	r2, [pc, #148]	@ (8006a1c <HAL_I2S_Init+0x278>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d101      	bne.n	800698e <HAL_I2S_Init+0x1ea>
 800698a:	4b25      	ldr	r3, [pc, #148]	@ (8006a20 <HAL_I2S_Init+0x27c>)
 800698c:	e001      	b.n	8006992 <HAL_I2S_Init+0x1ee>
 800698e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699e:	d003      	beq.n	80069a8 <HAL_I2S_Init+0x204>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80069a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	e001      	b.n	80069b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80069b0:	2300      	movs	r3, #0
 80069b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069be:	4313      	orrs	r3, r2
 80069c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069d2:	4313      	orrs	r3, r2
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	897b      	ldrh	r3, [r7, #10]
 80069d8:	4313      	orrs	r3, r2
 80069da:	b29b      	uxth	r3, r3
 80069dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80069e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a0d      	ldr	r2, [pc, #52]	@ (8006a1c <HAL_I2S_Init+0x278>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_I2S_Init+0x24c>
 80069ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <HAL_I2S_Init+0x27c>)
 80069ee:	e001      	b.n	80069f4 <HAL_I2S_Init+0x250>
 80069f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069f4:	897a      	ldrh	r2, [r7, #10]
 80069f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	08006b1b 	.word	0x08006b1b
 8006a14:	cccccccd 	.word	0xcccccccd
 8006a18:	08006c31 	.word	0x08006c31
 8006a1c:	40003800 	.word	0x40003800
 8006a20:	40003400 	.word	0x40003400

08006a24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10e      	bne.n	8006ab4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006aa4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ffb8 	bl	8006a24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ab4:	bf00      	nop
 8006ab6:	3708      	adds	r7, #8
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ace:	b292      	uxth	r2, r2
 8006ad0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	1c9a      	adds	r2, r3, #2
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10e      	bne.n	8006b12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff ff93 	bl	8006a38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d13a      	bne.n	8006bac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d109      	bne.n	8006b54 <I2S_IRQHandler+0x3a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4a:	2b40      	cmp	r3, #64	@ 0x40
 8006b4c:	d102      	bne.n	8006b54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff ffb4 	bl	8006abc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5a:	2b40      	cmp	r3, #64	@ 0x40
 8006b5c:	d126      	bne.n	8006bac <I2S_IRQHandler+0x92>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d11f      	bne.n	8006bac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685a      	ldr	r2, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9e:	f043 0202 	orr.w	r2, r3, #2
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff ff50 	bl	8006a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d136      	bne.n	8006c26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d109      	bne.n	8006bd6 <I2S_IRQHandler+0xbc>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bcc:	2b80      	cmp	r3, #128	@ 0x80
 8006bce:	d102      	bne.n	8006bd6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff45 	bl	8006a60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b08      	cmp	r3, #8
 8006bde:	d122      	bne.n	8006c26 <I2S_IRQHandler+0x10c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d11b      	bne.n	8006c26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006bfc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff ff13 	bl	8006a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c26:	bf00      	nop
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
	...

08006c30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a92      	ldr	r2, [pc, #584]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d101      	bne.n	8006c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006c4a:	4b92      	ldr	r3, [pc, #584]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c4c:	e001      	b.n	8006c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006c4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a8b      	ldr	r2, [pc, #556]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c68:	4b8a      	ldr	r3, [pc, #552]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c6a:	e001      	b.n	8006c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c7c:	d004      	beq.n	8006c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f040 8099 	bne.w	8006dba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d107      	bne.n	8006ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f925 	bl	8006eec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d107      	bne.n	8006cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f9c8 	bl	800704c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc2:	2b40      	cmp	r3, #64	@ 0x40
 8006cc4:	d13a      	bne.n	8006d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d035      	beq.n	8006d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6e      	ldr	r2, [pc, #440]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d101      	bne.n	8006cde <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006cda:	4b6e      	ldr	r3, [pc, #440]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cdc:	e001      	b.n	8006ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006cde:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4969      	ldr	r1, [pc, #420]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cea:	428b      	cmp	r3, r1
 8006cec:	d101      	bne.n	8006cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006cee:	4b69      	ldr	r3, [pc, #420]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cf0:	e001      	b.n	8006cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006cf2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006cfa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2e:	f043 0202 	orr.w	r2, r3, #2
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fe88 	bl	8006a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 0308 	and.w	r3, r3, #8
 8006d42:	2b08      	cmp	r3, #8
 8006d44:	f040 80c3 	bne.w	8006ece <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80bd 	beq.w	8006ece <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a49      	ldr	r2, [pc, #292]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d6e:	4b49      	ldr	r3, [pc, #292]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d70:	e001      	b.n	8006d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4944      	ldr	r1, [pc, #272]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d7e:	428b      	cmp	r3, r1
 8006d80:	d101      	bne.n	8006d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d82:	4b44      	ldr	r3, [pc, #272]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d84:	e001      	b.n	8006d8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d8a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d90:	2300      	movs	r3, #0
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	60bb      	str	r3, [r7, #8]
 8006d9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f043 0204 	orr.w	r2, r3, #4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff fe4a 	bl	8006a4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006db8:	e089      	b.n	8006ece <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d107      	bne.n	8006dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8be 	bl	8006f50 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d107      	bne.n	8006dee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f8fd 	bl	8006fe8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df4:	2b40      	cmp	r3, #64	@ 0x40
 8006df6:	d12f      	bne.n	8006e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d02a      	beq.n	8006e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1e      	ldr	r2, [pc, #120]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e1e:	e001      	b.n	8006e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006e20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4919      	ldr	r1, [pc, #100]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e2c:	428b      	cmp	r3, r1
 8006e2e:	d101      	bne.n	8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006e30:	4b18      	ldr	r3, [pc, #96]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e32:	e001      	b.n	8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006e34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4a:	f043 0202 	orr.w	r2, r3, #2
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fdfa 	bl	8006a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	f003 0308 	and.w	r3, r3, #8
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d136      	bne.n	8006ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d031      	beq.n	8006ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a07      	ldr	r2, [pc, #28]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d101      	bne.n	8006e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e76:	4b07      	ldr	r3, [pc, #28]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e78:	e001      	b.n	8006e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4902      	ldr	r1, [pc, #8]	@ (8006e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e86:	428b      	cmp	r3, r1
 8006e88:	d106      	bne.n	8006e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e8a:	4b02      	ldr	r3, [pc, #8]	@ (8006e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e8c:	e006      	b.n	8006e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e8e:	bf00      	nop
 8006e90:	40003800 	.word	0x40003800
 8006e94:	40003400 	.word	0x40003400
 8006e98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ea0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006eb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	f043 0204 	orr.w	r2, r3, #4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff fdc0 	bl	8006a4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ecc:	e000      	b.n	8006ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ece:	bf00      	nop
}
 8006ed0:	bf00      	nop
 8006ed2:	3720      	adds	r7, #32
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	1c99      	adds	r1, r3, #2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6251      	str	r1, [r2, #36]	@ 0x24
 8006efe:	881a      	ldrh	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d113      	bne.n	8006f46 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d106      	bne.n	8006f46 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff ffc9 	bl	8006ed8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
	...

08006f50 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5c:	1c99      	adds	r1, r3, #2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f62:	8819      	ldrh	r1, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe0 <I2SEx_TxISR_I2SExt+0x90>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d101      	bne.n	8006f72 <I2SEx_TxISR_I2SExt+0x22>
 8006f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe4 <I2SEx_TxISR_I2SExt+0x94>)
 8006f70:	e001      	b.n	8006f76 <I2SEx_TxISR_I2SExt+0x26>
 8006f72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f76:	460a      	mov	r2, r1
 8006f78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d121      	bne.n	8006fd6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a12      	ldr	r2, [pc, #72]	@ (8006fe0 <I2SEx_TxISR_I2SExt+0x90>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d101      	bne.n	8006fa0 <I2SEx_TxISR_I2SExt+0x50>
 8006f9c:	4b11      	ldr	r3, [pc, #68]	@ (8006fe4 <I2SEx_TxISR_I2SExt+0x94>)
 8006f9e:	e001      	b.n	8006fa4 <I2SEx_TxISR_I2SExt+0x54>
 8006fa0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	490d      	ldr	r1, [pc, #52]	@ (8006fe0 <I2SEx_TxISR_I2SExt+0x90>)
 8006fac:	428b      	cmp	r3, r1
 8006fae:	d101      	bne.n	8006fb4 <I2SEx_TxISR_I2SExt+0x64>
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe4 <I2SEx_TxISR_I2SExt+0x94>)
 8006fb2:	e001      	b.n	8006fb8 <I2SEx_TxISR_I2SExt+0x68>
 8006fb4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fb8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006fbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff ff81 	bl	8006ed8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fd6:	bf00      	nop
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	40003800 	.word	0x40003800
 8006fe4:	40003400 	.word	0x40003400

08006fe8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68d8      	ldr	r0, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	1c99      	adds	r1, r3, #2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007000:	b282      	uxth	r2, r0
 8007002:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d113      	bne.n	8007044 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800702a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007030:	b29b      	uxth	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff ff4a 	bl	8006ed8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007044:	bf00      	nop
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a20      	ldr	r2, [pc, #128]	@ (80070dc <I2SEx_RxISR_I2SExt+0x90>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <I2SEx_RxISR_I2SExt+0x16>
 800705e:	4b20      	ldr	r3, [pc, #128]	@ (80070e0 <I2SEx_RxISR_I2SExt+0x94>)
 8007060:	e001      	b.n	8007066 <I2SEx_RxISR_I2SExt+0x1a>
 8007062:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007066:	68d8      	ldr	r0, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706c:	1c99      	adds	r1, r3, #2
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007072:	b282      	uxth	r2, r0
 8007074:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007088:	b29b      	uxth	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d121      	bne.n	80070d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a12      	ldr	r2, [pc, #72]	@ (80070dc <I2SEx_RxISR_I2SExt+0x90>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d101      	bne.n	800709c <I2SEx_RxISR_I2SExt+0x50>
 8007098:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <I2SEx_RxISR_I2SExt+0x94>)
 800709a:	e001      	b.n	80070a0 <I2SEx_RxISR_I2SExt+0x54>
 800709c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	490d      	ldr	r1, [pc, #52]	@ (80070dc <I2SEx_RxISR_I2SExt+0x90>)
 80070a8:	428b      	cmp	r3, r1
 80070aa:	d101      	bne.n	80070b0 <I2SEx_RxISR_I2SExt+0x64>
 80070ac:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <I2SEx_RxISR_I2SExt+0x94>)
 80070ae:	e001      	b.n	80070b4 <I2SEx_RxISR_I2SExt+0x68>
 80070b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f7ff ff03 	bl	8006ed8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070d2:	bf00      	nop
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40003800 	.word	0x40003800
 80070e0:	40003400 	.word	0x40003400

080070e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e267      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d075      	beq.n	80071ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007102:	4b88      	ldr	r3, [pc, #544]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
 800710a:	2b04      	cmp	r3, #4
 800710c:	d00c      	beq.n	8007128 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800710e:	4b85      	ldr	r3, [pc, #532]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007116:	2b08      	cmp	r3, #8
 8007118:	d112      	bne.n	8007140 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800711a:	4b82      	ldr	r3, [pc, #520]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007122:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007126:	d10b      	bne.n	8007140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007128:	4b7e      	ldr	r3, [pc, #504]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d05b      	beq.n	80071ec <HAL_RCC_OscConfig+0x108>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d157      	bne.n	80071ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e242      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007148:	d106      	bne.n	8007158 <HAL_RCC_OscConfig+0x74>
 800714a:	4b76      	ldr	r3, [pc, #472]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a75      	ldr	r2, [pc, #468]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e01d      	b.n	8007194 <HAL_RCC_OscConfig+0xb0>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007160:	d10c      	bne.n	800717c <HAL_RCC_OscConfig+0x98>
 8007162:	4b70      	ldr	r3, [pc, #448]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a6f      	ldr	r2, [pc, #444]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	4b6d      	ldr	r3, [pc, #436]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6c      	ldr	r2, [pc, #432]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e00b      	b.n	8007194 <HAL_RCC_OscConfig+0xb0>
 800717c:	4b69      	ldr	r3, [pc, #420]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a68      	ldr	r2, [pc, #416]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	4b66      	ldr	r3, [pc, #408]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a65      	ldr	r2, [pc, #404]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 800718e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d013      	beq.n	80071c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800719c:	f7fc fcda 	bl	8003b54 <HAL_GetTick>
 80071a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a2:	e008      	b.n	80071b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071a4:	f7fc fcd6 	bl	8003b54 <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b64      	cmp	r3, #100	@ 0x64
 80071b0:	d901      	bls.n	80071b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e207      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f0      	beq.n	80071a4 <HAL_RCC_OscConfig+0xc0>
 80071c2:	e014      	b.n	80071ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c4:	f7fc fcc6 	bl	8003b54 <HAL_GetTick>
 80071c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ca:	e008      	b.n	80071de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071cc:	f7fc fcc2 	bl	8003b54 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	2b64      	cmp	r3, #100	@ 0x64
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e1f3      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071de:	4b51      	ldr	r3, [pc, #324]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1f0      	bne.n	80071cc <HAL_RCC_OscConfig+0xe8>
 80071ea:	e000      	b.n	80071ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d063      	beq.n	80072c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80071fa:	4b4a      	ldr	r3, [pc, #296]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 030c 	and.w	r3, r3, #12
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007206:	4b47      	ldr	r3, [pc, #284]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800720e:	2b08      	cmp	r3, #8
 8007210:	d11c      	bne.n	800724c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007212:	4b44      	ldr	r3, [pc, #272]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d116      	bne.n	800724c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800721e:	4b41      	ldr	r3, [pc, #260]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d005      	beq.n	8007236 <HAL_RCC_OscConfig+0x152>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d001      	beq.n	8007236 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e1c7      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007236:	4b3b      	ldr	r3, [pc, #236]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4937      	ldr	r1, [pc, #220]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800724a:	e03a      	b.n	80072c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d020      	beq.n	8007296 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007254:	4b34      	ldr	r3, [pc, #208]	@ (8007328 <HAL_RCC_OscConfig+0x244>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725a:	f7fc fc7b 	bl	8003b54 <HAL_GetTick>
 800725e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007262:	f7fc fc77 	bl	8003b54 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e1a8      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007274:	4b2b      	ldr	r3, [pc, #172]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007280:	4b28      	ldr	r3, [pc, #160]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4925      	ldr	r1, [pc, #148]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 8007290:	4313      	orrs	r3, r2
 8007292:	600b      	str	r3, [r1, #0]
 8007294:	e015      	b.n	80072c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007296:	4b24      	ldr	r3, [pc, #144]	@ (8007328 <HAL_RCC_OscConfig+0x244>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fc fc5a 	bl	8003b54 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072a4:	f7fc fc56 	bl	8003b54 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e187      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072b6:	4b1b      	ldr	r3, [pc, #108]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0308 	and.w	r3, r3, #8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d036      	beq.n	800733c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d6:	4b15      	ldr	r3, [pc, #84]	@ (800732c <HAL_RCC_OscConfig+0x248>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072dc:	f7fc fc3a 	bl	8003b54 <HAL_GetTick>
 80072e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e4:	f7fc fc36 	bl	8003b54 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e167      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <HAL_RCC_OscConfig+0x240>)
 80072f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f0      	beq.n	80072e4 <HAL_RCC_OscConfig+0x200>
 8007302:	e01b      	b.n	800733c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007304:	4b09      	ldr	r3, [pc, #36]	@ (800732c <HAL_RCC_OscConfig+0x248>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800730a:	f7fc fc23 	bl	8003b54 <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007310:	e00e      	b.n	8007330 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007312:	f7fc fc1f 	bl	8003b54 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d907      	bls.n	8007330 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e150      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
 8007324:	40023800 	.word	0x40023800
 8007328:	42470000 	.word	0x42470000
 800732c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007330:	4b88      	ldr	r3, [pc, #544]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1ea      	bne.n	8007312 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8097 	beq.w	8007478 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734e:	4b81      	ldr	r3, [pc, #516]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10f      	bne.n	800737a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	4b7d      	ldr	r3, [pc, #500]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	4a7c      	ldr	r2, [pc, #496]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007368:	6413      	str	r3, [r2, #64]	@ 0x40
 800736a:	4b7a      	ldr	r3, [pc, #488]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007372:	60bb      	str	r3, [r7, #8]
 8007374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800737a:	4b77      	ldr	r3, [pc, #476]	@ (8007558 <HAL_RCC_OscConfig+0x474>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007382:	2b00      	cmp	r3, #0
 8007384:	d118      	bne.n	80073b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007386:	4b74      	ldr	r3, [pc, #464]	@ (8007558 <HAL_RCC_OscConfig+0x474>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a73      	ldr	r2, [pc, #460]	@ (8007558 <HAL_RCC_OscConfig+0x474>)
 800738c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007392:	f7fc fbdf 	bl	8003b54 <HAL_GetTick>
 8007396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007398:	e008      	b.n	80073ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800739a:	f7fc fbdb 	bl	8003b54 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d901      	bls.n	80073ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e10c      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073ac:	4b6a      	ldr	r3, [pc, #424]	@ (8007558 <HAL_RCC_OscConfig+0x474>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f0      	beq.n	800739a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d106      	bne.n	80073ce <HAL_RCC_OscConfig+0x2ea>
 80073c0:	4b64      	ldr	r3, [pc, #400]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c4:	4a63      	ldr	r2, [pc, #396]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80073cc:	e01c      	b.n	8007408 <HAL_RCC_OscConfig+0x324>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b05      	cmp	r3, #5
 80073d4:	d10c      	bne.n	80073f0 <HAL_RCC_OscConfig+0x30c>
 80073d6:	4b5f      	ldr	r3, [pc, #380]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073da:	4a5e      	ldr	r2, [pc, #376]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073dc:	f043 0304 	orr.w	r3, r3, #4
 80073e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073e8:	f043 0301 	orr.w	r3, r3, #1
 80073ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ee:	e00b      	b.n	8007408 <HAL_RCC_OscConfig+0x324>
 80073f0:	4b58      	ldr	r3, [pc, #352]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f4:	4a57      	ldr	r2, [pc, #348]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fc:	4b55      	ldr	r3, [pc, #340]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007400:	4a54      	ldr	r2, [pc, #336]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007402:	f023 0304 	bic.w	r3, r3, #4
 8007406:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d015      	beq.n	800743c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007410:	f7fc fba0 	bl	8003b54 <HAL_GetTick>
 8007414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007416:	e00a      	b.n	800742e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007418:	f7fc fb9c 	bl	8003b54 <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007426:	4293      	cmp	r3, r2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e0cb      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742e:	4b49      	ldr	r3, [pc, #292]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ee      	beq.n	8007418 <HAL_RCC_OscConfig+0x334>
 800743a:	e014      	b.n	8007466 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800743c:	f7fc fb8a 	bl	8003b54 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007442:	e00a      	b.n	800745a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007444:	f7fc fb86 	bl	8003b54 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007452:	4293      	cmp	r3, r2
 8007454:	d901      	bls.n	800745a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007456:	2303      	movs	r3, #3
 8007458:	e0b5      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800745a:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 800745c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1ee      	bne.n	8007444 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d105      	bne.n	8007478 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800746c:	4b39      	ldr	r3, [pc, #228]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	4a38      	ldr	r2, [pc, #224]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007476:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80a1 	beq.w	80075c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007482:	4b34      	ldr	r3, [pc, #208]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	2b08      	cmp	r3, #8
 800748c:	d05c      	beq.n	8007548 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d141      	bne.n	800751a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007496:	4b31      	ldr	r3, [pc, #196]	@ (800755c <HAL_RCC_OscConfig+0x478>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749c:	f7fc fb5a 	bl	8003b54 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074a4:	f7fc fb56 	bl	8003b54 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e087      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b6:	4b27      	ldr	r3, [pc, #156]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f0      	bne.n	80074a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d0:	019b      	lsls	r3, r3, #6
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	085b      	lsrs	r3, r3, #1
 80074da:	3b01      	subs	r3, #1
 80074dc:	041b      	lsls	r3, r3, #16
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	061b      	lsls	r3, r3, #24
 80074e6:	491b      	ldr	r1, [pc, #108]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ec:	4b1b      	ldr	r3, [pc, #108]	@ (800755c <HAL_RCC_OscConfig+0x478>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f2:	f7fc fb2f 	bl	8003b54 <HAL_GetTick>
 80074f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074f8:	e008      	b.n	800750c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074fa:	f7fc fb2b 	bl	8003b54 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e05c      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750c:	4b11      	ldr	r3, [pc, #68]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0f0      	beq.n	80074fa <HAL_RCC_OscConfig+0x416>
 8007518:	e054      	b.n	80075c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800751a:	4b10      	ldr	r3, [pc, #64]	@ (800755c <HAL_RCC_OscConfig+0x478>)
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007520:	f7fc fb18 	bl	8003b54 <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007528:	f7fc fb14 	bl	8003b54 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e045      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753a:	4b06      	ldr	r3, [pc, #24]	@ (8007554 <HAL_RCC_OscConfig+0x470>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f0      	bne.n	8007528 <HAL_RCC_OscConfig+0x444>
 8007546:	e03d      	b.n	80075c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d107      	bne.n	8007560 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e038      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
 8007554:	40023800 	.word	0x40023800
 8007558:	40007000 	.word	0x40007000
 800755c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007560:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <HAL_RCC_OscConfig+0x4ec>)
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d028      	beq.n	80075c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007578:	429a      	cmp	r2, r3
 800757a:	d121      	bne.n	80075c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007586:	429a      	cmp	r2, r3
 8007588:	d11a      	bne.n	80075c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007590:	4013      	ands	r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007596:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007598:	4293      	cmp	r3, r2
 800759a:	d111      	bne.n	80075c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	085b      	lsrs	r3, r3, #1
 80075a8:	3b01      	subs	r3, #1
 80075aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d107      	bne.n	80075c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075bc:	429a      	cmp	r2, r3
 80075be:	d001      	beq.n	80075c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	40023800 	.word	0x40023800

080075d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0cc      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075e8:	4b68      	ldr	r3, [pc, #416]	@ (800778c <HAL_RCC_ClockConfig+0x1b8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d90c      	bls.n	8007610 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b65      	ldr	r3, [pc, #404]	@ (800778c <HAL_RCC_ClockConfig+0x1b8>)
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fe:	4b63      	ldr	r3, [pc, #396]	@ (800778c <HAL_RCC_ClockConfig+0x1b8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e0b8      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d020      	beq.n	800765e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007628:	4b59      	ldr	r3, [pc, #356]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	4a58      	ldr	r2, [pc, #352]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007632:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d005      	beq.n	800764c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007640:	4b53      	ldr	r3, [pc, #332]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4a52      	ldr	r2, [pc, #328]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007646:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800764a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800764c:	4b50      	ldr	r3, [pc, #320]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	494d      	ldr	r1, [pc, #308]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	4313      	orrs	r3, r2
 800765c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d044      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d107      	bne.n	8007682 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007672:	4b47      	ldr	r3, [pc, #284]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d119      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e07f      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	2b02      	cmp	r3, #2
 8007688:	d003      	beq.n	8007692 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800768e:	2b03      	cmp	r3, #3
 8007690:	d107      	bne.n	80076a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007692:	4b3f      	ldr	r3, [pc, #252]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d109      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e06f      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a2:	4b3b      	ldr	r3, [pc, #236]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e067      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076b2:	4b37      	ldr	r3, [pc, #220]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f023 0203 	bic.w	r2, r3, #3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	4934      	ldr	r1, [pc, #208]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076c4:	f7fc fa46 	bl	8003b54 <HAL_GetTick>
 80076c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076ca:	e00a      	b.n	80076e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076cc:	f7fc fa42 	bl	8003b54 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076da:	4293      	cmp	r3, r2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e04f      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076e2:	4b2b      	ldr	r3, [pc, #172]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 020c 	and.w	r2, r3, #12
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d1eb      	bne.n	80076cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076f4:	4b25      	ldr	r3, [pc, #148]	@ (800778c <HAL_RCC_ClockConfig+0x1b8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d20c      	bcs.n	800771c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007702:	4b22      	ldr	r3, [pc, #136]	@ (800778c <HAL_RCC_ClockConfig+0x1b8>)
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800770a:	4b20      	ldr	r3, [pc, #128]	@ (800778c <HAL_RCC_ClockConfig+0x1b8>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d001      	beq.n	800771c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e032      	b.n	8007782 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007728:	4b19      	ldr	r3, [pc, #100]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4916      	ldr	r1, [pc, #88]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007736:	4313      	orrs	r3, r2
 8007738:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0308 	and.w	r3, r3, #8
 8007742:	2b00      	cmp	r3, #0
 8007744:	d009      	beq.n	800775a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007746:	4b12      	ldr	r3, [pc, #72]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	490e      	ldr	r1, [pc, #56]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007756:	4313      	orrs	r3, r2
 8007758:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800775a:	f000 f821 	bl	80077a0 <HAL_RCC_GetSysClockFreq>
 800775e:	4602      	mov	r2, r0
 8007760:	4b0b      	ldr	r3, [pc, #44]	@ (8007790 <HAL_RCC_ClockConfig+0x1bc>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	091b      	lsrs	r3, r3, #4
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	490a      	ldr	r1, [pc, #40]	@ (8007794 <HAL_RCC_ClockConfig+0x1c0>)
 800776c:	5ccb      	ldrb	r3, [r1, r3]
 800776e:	fa22 f303 	lsr.w	r3, r2, r3
 8007772:	4a09      	ldr	r2, [pc, #36]	@ (8007798 <HAL_RCC_ClockConfig+0x1c4>)
 8007774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007776:	4b09      	ldr	r3, [pc, #36]	@ (800779c <HAL_RCC_ClockConfig+0x1c8>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f7fb ffca 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	40023c00 	.word	0x40023c00
 8007790:	40023800 	.word	0x40023800
 8007794:	0801666c 	.word	0x0801666c
 8007798:	20000264 	.word	0x20000264
 800779c:	20000268 	.word	0x20000268

080077a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b094      	sub	sp, #80	@ 0x50
 80077a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077b8:	4b79      	ldr	r3, [pc, #484]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 030c 	and.w	r3, r3, #12
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d00d      	beq.n	80077e0 <HAL_RCC_GetSysClockFreq+0x40>
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	f200 80e1 	bhi.w	800798c <HAL_RCC_GetSysClockFreq+0x1ec>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_RCC_GetSysClockFreq+0x34>
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d003      	beq.n	80077da <HAL_RCC_GetSysClockFreq+0x3a>
 80077d2:	e0db      	b.n	800798c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077d4:	4b73      	ldr	r3, [pc, #460]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80077d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077d8:	e0db      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077da:	4b73      	ldr	r3, [pc, #460]	@ (80079a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80077dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077de:	e0d8      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077e0:	4b6f      	ldr	r3, [pc, #444]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077ea:	4b6d      	ldr	r3, [pc, #436]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d063      	beq.n	80078be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077f6:	4b6a      	ldr	r3, [pc, #424]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	099b      	lsrs	r3, r3, #6
 80077fc:	2200      	movs	r2, #0
 80077fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007800:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007808:	633b      	str	r3, [r7, #48]	@ 0x30
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
 800780e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007812:	4622      	mov	r2, r4
 8007814:	462b      	mov	r3, r5
 8007816:	f04f 0000 	mov.w	r0, #0
 800781a:	f04f 0100 	mov.w	r1, #0
 800781e:	0159      	lsls	r1, r3, #5
 8007820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007824:	0150      	lsls	r0, r2, #5
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4621      	mov	r1, r4
 800782c:	1a51      	subs	r1, r2, r1
 800782e:	6139      	str	r1, [r7, #16]
 8007830:	4629      	mov	r1, r5
 8007832:	eb63 0301 	sbc.w	r3, r3, r1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007844:	4659      	mov	r1, fp
 8007846:	018b      	lsls	r3, r1, #6
 8007848:	4651      	mov	r1, sl
 800784a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800784e:	4651      	mov	r1, sl
 8007850:	018a      	lsls	r2, r1, #6
 8007852:	4651      	mov	r1, sl
 8007854:	ebb2 0801 	subs.w	r8, r2, r1
 8007858:	4659      	mov	r1, fp
 800785a:	eb63 0901 	sbc.w	r9, r3, r1
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800786a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800786e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007872:	4690      	mov	r8, r2
 8007874:	4699      	mov	r9, r3
 8007876:	4623      	mov	r3, r4
 8007878:	eb18 0303 	adds.w	r3, r8, r3
 800787c:	60bb      	str	r3, [r7, #8]
 800787e:	462b      	mov	r3, r5
 8007880:	eb49 0303 	adc.w	r3, r9, r3
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	f04f 0300 	mov.w	r3, #0
 800788e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007892:	4629      	mov	r1, r5
 8007894:	024b      	lsls	r3, r1, #9
 8007896:	4621      	mov	r1, r4
 8007898:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800789c:	4621      	mov	r1, r4
 800789e:	024a      	lsls	r2, r1, #9
 80078a0:	4610      	mov	r0, r2
 80078a2:	4619      	mov	r1, r3
 80078a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078a6:	2200      	movs	r2, #0
 80078a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078b0:	f7f9 f99a 	bl	8000be8 <__aeabi_uldivmod>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4613      	mov	r3, r2
 80078ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078bc:	e058      	b.n	8007970 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078be:	4b38      	ldr	r3, [pc, #224]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	099b      	lsrs	r3, r3, #6
 80078c4:	2200      	movs	r2, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	4611      	mov	r1, r2
 80078ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078ce:	623b      	str	r3, [r7, #32]
 80078d0:	2300      	movs	r3, #0
 80078d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	f04f 0000 	mov.w	r0, #0
 80078e0:	f04f 0100 	mov.w	r1, #0
 80078e4:	0159      	lsls	r1, r3, #5
 80078e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078ea:	0150      	lsls	r0, r2, #5
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4641      	mov	r1, r8
 80078f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80078f6:	4649      	mov	r1, r9
 80078f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007908:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800790c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007910:	ebb2 040a 	subs.w	r4, r2, sl
 8007914:	eb63 050b 	sbc.w	r5, r3, fp
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	00eb      	lsls	r3, r5, #3
 8007922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007926:	00e2      	lsls	r2, r4, #3
 8007928:	4614      	mov	r4, r2
 800792a:	461d      	mov	r5, r3
 800792c:	4643      	mov	r3, r8
 800792e:	18e3      	adds	r3, r4, r3
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	464b      	mov	r3, r9
 8007934:	eb45 0303 	adc.w	r3, r5, r3
 8007938:	607b      	str	r3, [r7, #4]
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007946:	4629      	mov	r1, r5
 8007948:	028b      	lsls	r3, r1, #10
 800794a:	4621      	mov	r1, r4
 800794c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007950:	4621      	mov	r1, r4
 8007952:	028a      	lsls	r2, r1, #10
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795a:	2200      	movs	r2, #0
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	61fa      	str	r2, [r7, #28]
 8007960:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007964:	f7f9 f940 	bl	8000be8 <__aeabi_uldivmod>
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4613      	mov	r3, r2
 800796e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007970:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	3301      	adds	r3, #1
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007980:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800798a:	e002      	b.n	8007992 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800798c:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800798e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007994:	4618      	mov	r0, r3
 8007996:	3750      	adds	r7, #80	@ 0x50
 8007998:	46bd      	mov	sp, r7
 800799a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800799e:	bf00      	nop
 80079a0:	40023800 	.word	0x40023800
 80079a4:	00f42400 	.word	0x00f42400
 80079a8:	007a1200 	.word	0x007a1200

080079ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079b0:	4b03      	ldr	r3, [pc, #12]	@ (80079c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80079b2:	681b      	ldr	r3, [r3, #0]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	20000264 	.word	0x20000264

080079c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079c8:	f7ff fff0 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80079cc:	4602      	mov	r2, r0
 80079ce:	4b05      	ldr	r3, [pc, #20]	@ (80079e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	0a9b      	lsrs	r3, r3, #10
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	4903      	ldr	r1, [pc, #12]	@ (80079e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079da:	5ccb      	ldrb	r3, [r1, r3]
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40023800 	.word	0x40023800
 80079e8:	0801667c 	.word	0x0801667c

080079ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079f0:	f7ff ffdc 	bl	80079ac <HAL_RCC_GetHCLKFreq>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	0b5b      	lsrs	r3, r3, #13
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	4903      	ldr	r1, [pc, #12]	@ (8007a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a02:	5ccb      	ldrb	r3, [r1, r3]
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	40023800 	.word	0x40023800
 8007a10:	0801667c 	.word	0x0801667c

08007a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	220f      	movs	r2, #15
 8007a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a24:	4b12      	ldr	r3, [pc, #72]	@ (8007a70 <HAL_RCC_GetClockConfig+0x5c>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 0203 	and.w	r2, r3, #3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a30:	4b0f      	ldr	r3, [pc, #60]	@ (8007a70 <HAL_RCC_GetClockConfig+0x5c>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a70 <HAL_RCC_GetClockConfig+0x5c>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a48:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <HAL_RCC_GetClockConfig+0x5c>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a56:	4b07      	ldr	r3, [pc, #28]	@ (8007a74 <HAL_RCC_GetClockConfig+0x60>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0207 	and.w	r2, r3, #7
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	601a      	str	r2, [r3, #0]
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800
 8007a74:	40023c00 	.word	0x40023c00

08007a78 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d035      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007aa0:	4b62      	ldr	r3, [pc, #392]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aa6:	f7fc f855 	bl	8003b54 <HAL_GetTick>
 8007aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007aae:	f7fc f851 	bl	8003b54 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e0b0      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ac0:	4b5b      	ldr	r3, [pc, #364]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	019a      	lsls	r2, r3, #6
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	071b      	lsls	r3, r3, #28
 8007ad8:	4955      	ldr	r1, [pc, #340]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ae0:	4b52      	ldr	r3, [pc, #328]	@ (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ae6:	f7fc f835 	bl	8003b54 <HAL_GetTick>
 8007aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007aec:	e008      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007aee:	f7fc f831 	bl	8003b54 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e090      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b00:	4b4b      	ldr	r3, [pc, #300]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d0f0      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8083 	beq.w	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	4b44      	ldr	r3, [pc, #272]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b22:	4a43      	ldr	r2, [pc, #268]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b2a:	4b41      	ldr	r3, [pc, #260]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b36:	4b3f      	ldr	r3, [pc, #252]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a3e      	ldr	r2, [pc, #248]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b42:	f7fc f807 	bl	8003b54 <HAL_GetTick>
 8007b46:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b48:	e008      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b4a:	f7fc f803 	bl	8003b54 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e062      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b5c:	4b35      	ldr	r3, [pc, #212]	@ (8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b68:	4b31      	ldr	r3, [pc, #196]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b70:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d02f      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b80:	693a      	ldr	r2, [r7, #16]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d028      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b86:	4b2a      	ldr	r3, [pc, #168]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b90:	4b29      	ldr	r3, [pc, #164]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b96:	4b28      	ldr	r3, [pc, #160]	@ (8007c38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b9c:	4a24      	ldr	r2, [pc, #144]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ba2:	4b23      	ldr	r3, [pc, #140]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d114      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bae:	f7fb ffd1 	bl	8003b54 <HAL_GetTick>
 8007bb2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bb4:	e00a      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb6:	f7fb ffcd 	bl	8003b54 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e02a      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bcc:	4b18      	ldr	r3, [pc, #96]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0ee      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007be0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007be4:	d10d      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007be6:	4b12      	ldr	r3, [pc, #72]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bfa:	490d      	ldr	r1, [pc, #52]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	608b      	str	r3, [r1, #8]
 8007c00:	e005      	b.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c02:	4b0b      	ldr	r3, [pc, #44]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	4a0a      	ldr	r2, [pc, #40]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c08:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007c0c:	6093      	str	r3, [r2, #8]
 8007c0e:	4b08      	ldr	r3, [pc, #32]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c10:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c1a:	4905      	ldr	r1, [pc, #20]	@ (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	42470068 	.word	0x42470068
 8007c30:	40023800 	.word	0x40023800
 8007c34:	40007000 	.word	0x40007000
 8007c38:	42470e40 	.word	0x42470e40

08007c3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d13f      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007c5a:	4b24      	ldr	r3, [pc, #144]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c62:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d006      	beq.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c70:	d12f      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c72:	4b1f      	ldr	r3, [pc, #124]	@ (8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c74:	617b      	str	r3, [r7, #20]
          break;
 8007c76:	e02f      	b.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c78:	4b1c      	ldr	r3, [pc, #112]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c84:	d108      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c86:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c8e:	4a19      	ldr	r2, [pc, #100]	@ (8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	e007      	b.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c98:	4b14      	ldr	r3, [pc, #80]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ca0:	4a15      	ldr	r2, [pc, #84]	@ (8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007ca8:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cae:	099b      	lsrs	r3, r3, #6
 8007cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc2:	0f1b      	lsrs	r3, r3, #28
 8007cc4:	f003 0307 	and.w	r3, r3, #7
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cce:	617b      	str	r3, [r7, #20]
          break;
 8007cd0:	e002      	b.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
          break;
 8007cd6:	bf00      	nop
        }
      }
      break;
 8007cd8:	e000      	b.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007cda:	bf00      	nop
    }
  }
  return frequency;
 8007cdc:	697b      	ldr	r3, [r7, #20]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40023800 	.word	0x40023800
 8007cf0:	00bb8000 	.word	0x00bb8000
 8007cf4:	007a1200 	.word	0x007a1200
 8007cf8:	00f42400 	.word	0x00f42400

08007cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e07b      	b.n	8007e06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d108      	bne.n	8007d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d1e:	d009      	beq.n	8007d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	61da      	str	r2, [r3, #28]
 8007d26:	e005      	b.n	8007d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fb fc0c 	bl	800356c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db8:	ea42 0103 	orr.w	r1, r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	699b      	ldr	r3, [r3, #24]
 8007dd0:	0c1b      	lsrs	r3, r3, #16
 8007dd2:	f003 0104 	and.w	r1, r3, #4
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dda:	f003 0210 	and.w	r2, r3, #16
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e041      	b.n	8007ea4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d106      	bne.n	8007e3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f839 	bl	8007eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	f000 f9bf 	bl	80081d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d001      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e04e      	b.n	8007f76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f042 0201 	orr.w	r2, r2, #1
 8007eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d022      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d01d      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a1f      	ldr	r2, [pc, #124]	@ (8007f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d018      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1e      	ldr	r2, [pc, #120]	@ (8007f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d013      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d00e      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1b      	ldr	r2, [pc, #108]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d009      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a19      	ldr	r2, [pc, #100]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d004      	beq.n	8007f40 <HAL_TIM_Base_Start_IT+0x80>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a18      	ldr	r2, [pc, #96]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d111      	bne.n	8007f64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b06      	cmp	r3, #6
 8007f50:	d010      	beq.n	8007f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0201 	orr.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	e007      	b.n	8007f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40000400 	.word	0x40000400
 8007f8c:	40000800 	.word	0x40000800
 8007f90:	40000c00 	.word	0x40000c00
 8007f94:	40010400 	.word	0x40010400
 8007f98:	40014000 	.word	0x40014000
 8007f9c:	40001800 	.word	0x40001800

08007fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d020      	beq.n	8008004 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01b      	beq.n	8008004 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0202 	mvn.w	r2, #2
 8007fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8d2 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 8007ff0:	e005      	b.n	8007ffe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f8c4 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f8d5 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	2b00      	cmp	r3, #0
 800800c:	d020      	beq.n	8008050 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01b      	beq.n	8008050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f06f 0204 	mvn.w	r2, #4
 8008020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8ac 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 800803c:	e005      	b.n	800804a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f89e 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f8af 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d020      	beq.n	800809c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d01b      	beq.n	800809c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0208 	mvn.w	r2, #8
 800806c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2204      	movs	r2, #4
 8008072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	69db      	ldr	r3, [r3, #28]
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f886 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 8008088:	e005      	b.n	8008096 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f878 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f889 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	f003 0310 	and.w	r3, r3, #16
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d020      	beq.n	80080e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01b      	beq.n	80080e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f06f 0210 	mvn.w	r2, #16
 80080b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2208      	movs	r2, #8
 80080be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69db      	ldr	r3, [r3, #28]
 80080c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f860 	bl	8008194 <HAL_TIM_IC_CaptureCallback>
 80080d4:	e005      	b.n	80080e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f852 	bl	8008180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f863 	bl	80081a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00c      	beq.n	800810c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0201 	mvn.w	r2, #1
 8008104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fb f924 	bl	8003354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00c      	beq.n	8008130 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811c:	2b00      	cmp	r3, #0
 800811e:	d007      	beq.n	8008130 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f900 	bl	8008330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00c      	beq.n	8008154 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d007      	beq.n	8008154 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800814c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f834 	bl	80081bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d007      	beq.n	8008178 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0220 	mvn.w	r2, #32
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8d2 	bl	800831c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008178:	bf00      	nop
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a43      	ldr	r2, [pc, #268]	@ (80082f0 <TIM_Base_SetConfig+0x120>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <TIM_Base_SetConfig+0x40>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081ee:	d00f      	beq.n	8008210 <TIM_Base_SetConfig+0x40>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a40      	ldr	r2, [pc, #256]	@ (80082f4 <TIM_Base_SetConfig+0x124>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00b      	beq.n	8008210 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a3f      	ldr	r2, [pc, #252]	@ (80082f8 <TIM_Base_SetConfig+0x128>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d007      	beq.n	8008210 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a3e      	ldr	r2, [pc, #248]	@ (80082fc <TIM_Base_SetConfig+0x12c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a3d      	ldr	r2, [pc, #244]	@ (8008300 <TIM_Base_SetConfig+0x130>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d108      	bne.n	8008222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a32      	ldr	r2, [pc, #200]	@ (80082f0 <TIM_Base_SetConfig+0x120>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d02b      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008230:	d027      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a2f      	ldr	r2, [pc, #188]	@ (80082f4 <TIM_Base_SetConfig+0x124>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d023      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2e      	ldr	r2, [pc, #184]	@ (80082f8 <TIM_Base_SetConfig+0x128>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01f      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a2d      	ldr	r2, [pc, #180]	@ (80082fc <TIM_Base_SetConfig+0x12c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d01b      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2c      	ldr	r2, [pc, #176]	@ (8008300 <TIM_Base_SetConfig+0x130>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d017      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2b      	ldr	r2, [pc, #172]	@ (8008304 <TIM_Base_SetConfig+0x134>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2a      	ldr	r2, [pc, #168]	@ (8008308 <TIM_Base_SetConfig+0x138>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a29      	ldr	r2, [pc, #164]	@ (800830c <TIM_Base_SetConfig+0x13c>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a28      	ldr	r2, [pc, #160]	@ (8008310 <TIM_Base_SetConfig+0x140>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a27      	ldr	r2, [pc, #156]	@ (8008314 <TIM_Base_SetConfig+0x144>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a26      	ldr	r2, [pc, #152]	@ (8008318 <TIM_Base_SetConfig+0x148>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a0e      	ldr	r2, [pc, #56]	@ (80082f0 <TIM_Base_SetConfig+0x120>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d003      	beq.n	80082c2 <TIM_Base_SetConfig+0xf2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a10      	ldr	r2, [pc, #64]	@ (8008300 <TIM_Base_SetConfig+0x130>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d103      	bne.n	80082ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	691a      	ldr	r2, [r3, #16]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f043 0204 	orr.w	r2, r3, #4
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	601a      	str	r2, [r3, #0]
}
 80082e2:	bf00      	nop
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40010000 	.word	0x40010000
 80082f4:	40000400 	.word	0x40000400
 80082f8:	40000800 	.word	0x40000800
 80082fc:	40000c00 	.word	0x40000c00
 8008300:	40010400 	.word	0x40010400
 8008304:	40014000 	.word	0x40014000
 8008308:	40014400 	.word	0x40014400
 800830c:	40014800 	.word	0x40014800
 8008310:	40001800 	.word	0x40001800
 8008314:	40001c00 	.word	0x40001c00
 8008318:	40002000 	.word	0x40002000

0800831c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e042      	b.n	80083dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d106      	bne.n	8008370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f7fb f946 	bl	80035fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2224      	movs	r2, #36	@ 0x24
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fdd3 	bl	8008f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800839c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2220      	movs	r2, #32
 80083c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	@ 0x28
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	4613      	mov	r3, r2
 80083f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b20      	cmp	r3, #32
 8008402:	d175      	bne.n	80084f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d002      	beq.n	8008410 <HAL_UART_Transmit+0x2c>
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e06e      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2221      	movs	r2, #33	@ 0x21
 800841e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008422:	f7fb fb97 	bl	8003b54 <HAL_GetTick>
 8008426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800843c:	d108      	bne.n	8008450 <HAL_UART_Transmit+0x6c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	61bb      	str	r3, [r7, #24]
 800844e:	e003      	b.n	8008458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008458:	e02e      	b.n	80084b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2200      	movs	r2, #0
 8008462:	2180      	movs	r1, #128	@ 0x80
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 fb37 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2220      	movs	r2, #32
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008478:	2303      	movs	r3, #3
 800847a:	e03a      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	881b      	ldrh	r3, [r3, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	3302      	adds	r3, #2
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e007      	b.n	80084aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	3301      	adds	r3, #1
 80084a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	3b01      	subs	r3, #1
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1cb      	bne.n	800845a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2200      	movs	r2, #0
 80084ca:	2140      	movs	r1, #64	@ 0x40
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fb03 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e006      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e000      	b.n	80084f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3720      	adds	r7, #32
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	60f8      	str	r0, [r7, #12]
 8008502:	60b9      	str	r1, [r7, #8]
 8008504:	4613      	mov	r3, r2
 8008506:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b20      	cmp	r3, #32
 8008512:	d112      	bne.n	800853a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <HAL_UART_Receive_IT+0x26>
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e00b      	b.n	800853c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	461a      	mov	r2, r3
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fb2a 	bl	8008b8a <UART_Start_Receive_IT>
 8008536:	4603      	mov	r3, r0
 8008538:	e000      	b.n	800853c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b0ba      	sub	sp, #232	@ 0xe8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800856a:	2300      	movs	r3, #0
 800856c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008570:	2300      	movs	r3, #0
 8008572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857a:	f003 030f 	and.w	r3, r3, #15
 800857e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10f      	bne.n	80085aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800858a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800858e:	f003 0320 	and.w	r3, r3, #32
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <HAL_UART_IRQHandler+0x66>
 8008596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800859a:	f003 0320 	and.w	r3, r3, #32
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fc07 	bl	8008db6 <UART_Receive_IT>
      return;
 80085a8:	e273      	b.n	8008a92 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 80de 	beq.w	8008770 <HAL_UART_IRQHandler+0x22c>
 80085b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d106      	bne.n	80085ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 80d1 	beq.w	8008770 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00b      	beq.n	80085f2 <HAL_UART_IRQHandler+0xae>
 80085da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ea:	f043 0201 	orr.w	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80085f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f6:	f003 0304 	and.w	r3, r3, #4
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <HAL_UART_IRQHandler+0xd2>
 80085fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	d005      	beq.n	8008616 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800860e:	f043 0202 	orr.w	r2, r3, #2
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <HAL_UART_IRQHandler+0xf6>
 8008622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008632:	f043 0204 	orr.w	r2, r3, #4
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800863a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863e:	f003 0308 	and.w	r3, r3, #8
 8008642:	2b00      	cmp	r3, #0
 8008644:	d011      	beq.n	800866a <HAL_UART_IRQHandler+0x126>
 8008646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b00      	cmp	r3, #0
 8008650:	d105      	bne.n	800865e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008662:	f043 0208 	orr.w	r2, r3, #8
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 820a 	beq.w	8008a88 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	d008      	beq.n	8008692 <HAL_UART_IRQHandler+0x14e>
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fb92 	bl	8008db6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695b      	ldr	r3, [r3, #20]
 8008698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869c:	2b40      	cmp	r3, #64	@ 0x40
 800869e:	bf0c      	ite	eq
 80086a0:	2301      	moveq	r3, #1
 80086a2:	2300      	movne	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <HAL_UART_IRQHandler+0x17a>
 80086b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d04f      	beq.n	800875e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa9d 	bl	8008bfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	695b      	ldr	r3, [r3, #20]
 80086ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ce:	2b40      	cmp	r3, #64	@ 0x40
 80086d0:	d141      	bne.n	8008756 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3314      	adds	r3, #20
 80086d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086e0:	e853 3f00 	ldrex	r3, [r3]
 80086e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3314      	adds	r3, #20
 80086fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008702:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800870a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1d9      	bne.n	80086d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d013      	beq.n	800874e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872a:	4a8a      	ldr	r2, [pc, #552]	@ (8008954 <HAL_UART_IRQHandler+0x410>)
 800872c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008732:	4618      	mov	r0, r3
 8008734:	f7fb fb90 	bl	8003e58 <HAL_DMA_Abort_IT>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d016      	beq.n	800876c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874c:	e00e      	b.n	800876c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f9ac 	bl	8008aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	e00a      	b.n	800876c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 f9a8 	bl	8008aac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	e006      	b.n	800876c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f9a4 	bl	8008aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800876a:	e18d      	b.n	8008a88 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876c:	bf00      	nop
    return;
 800876e:	e18b      	b.n	8008a88 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008774:	2b01      	cmp	r3, #1
 8008776:	f040 8167 	bne.w	8008a48 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800877a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877e:	f003 0310 	and.w	r3, r3, #16
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 8160 	beq.w	8008a48 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878c:	f003 0310 	and.w	r3, r3, #16
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 8159 	beq.w	8008a48 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008796:	2300      	movs	r3, #0
 8008798:	60bb      	str	r3, [r7, #8]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	60bb      	str	r3, [r7, #8]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b6:	2b40      	cmp	r3, #64	@ 0x40
 80087b8:	f040 80ce 	bne.w	8008958 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80a9 	beq.w	8008924 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087da:	429a      	cmp	r2, r3
 80087dc:	f080 80a2 	bcs.w	8008924 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087f2:	f000 8088 	beq.w	8008906 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800880c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008814:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	330c      	adds	r3, #12
 800881e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800882e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800883a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1d9      	bne.n	80087f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3314      	adds	r3, #20
 8008848:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008866:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800886a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800886e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008872:	e841 2300 	strex	r3, r2, [r1]
 8008876:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008878:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1e1      	bne.n	8008842 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3314      	adds	r3, #20
 8008884:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800888e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008890:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008894:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3314      	adds	r3, #20
 800889e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e3      	bne.n	800887e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	330c      	adds	r3, #12
 80088ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d6:	f023 0310 	bic.w	r3, r3, #16
 80088da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	330c      	adds	r3, #12
 80088e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80088e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80088ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e3      	bne.n	80088c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008900:	4618      	mov	r0, r3
 8008902:	f7fb fa39 	bl	8003d78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008914:	b29b      	uxth	r3, r3
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	b29b      	uxth	r3, r3
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f8cf 	bl	8008ac0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008922:	e0b3      	b.n	8008a8c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800892c:	429a      	cmp	r2, r3
 800892e:	f040 80ad 	bne.w	8008a8c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893c:	f040 80a6 	bne.w	8008a8c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f8b7 	bl	8008ac0 <HAL_UARTEx_RxEventCallback>
      return;
 8008952:	e09b      	b.n	8008a8c <HAL_UART_IRQHandler+0x548>
 8008954:	08008cc5 	.word	0x08008cc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008960:	b29b      	uxth	r3, r3
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 808e 	beq.w	8008a90 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008974:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8089 	beq.w	8008a90 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	330c      	adds	r3, #12
 8008984:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800898e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008994:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80089a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089aa:	e841 2300 	strex	r3, r2, [r1]
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1e3      	bne.n	800897e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3314      	adds	r3, #20
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	e853 3f00 	ldrex	r3, [r3]
 80089c4:	623b      	str	r3, [r7, #32]
   return(result);
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	f023 0301 	bic.w	r3, r3, #1
 80089cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3314      	adds	r3, #20
 80089d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089da:	633a      	str	r2, [r7, #48]	@ 0x30
 80089dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e3      	bne.n	80089b6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0310 	bic.w	r3, r3, #16
 8008a12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a20:	61fa      	str	r2, [r7, #28]
 8008a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a24:	69b9      	ldr	r1, [r7, #24]
 8008a26:	69fa      	ldr	r2, [r7, #28]
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e3      	bne.n	80089fc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f83d 	bl	8008ac0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a46:	e023      	b.n	8008a90 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <HAL_UART_IRQHandler+0x524>
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f940 	bl	8008ce6 <UART_Transmit_IT>
    return;
 8008a66:	e014      	b.n	8008a92 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00e      	beq.n	8008a92 <HAL_UART_IRQHandler+0x54e>
 8008a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d008      	beq.n	8008a92 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f980 	bl	8008d86 <UART_EndTransmit_IT>
    return;
 8008a86:	e004      	b.n	8008a92 <HAL_UART_IRQHandler+0x54e>
    return;
 8008a88:	bf00      	nop
 8008a8a:	e002      	b.n	8008a92 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a90:	bf00      	nop
  }
}
 8008a92:	37e8      	adds	r7, #232	@ 0xe8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae8:	e03b      	b.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d037      	beq.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af2:	f7fb f82f 	bl	8003b54 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	6a3a      	ldr	r2, [r7, #32]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d302      	bcc.n	8008b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e03a      	b.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d023      	beq.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b80      	cmp	r3, #128	@ 0x80
 8008b1e:	d020      	beq.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b40      	cmp	r3, #64	@ 0x40
 8008b24:	d01d      	beq.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	d116      	bne.n	8008b62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f857 	bl	8008bfe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2208      	movs	r2, #8
 8008b54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e00f      	b.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	bf0c      	ite	eq
 8008b72:	2301      	moveq	r3, #1
 8008b74:	2300      	movne	r3, #0
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d0b4      	beq.n	8008aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3718      	adds	r7, #24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	4613      	mov	r3, r2
 8008b96:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	88fa      	ldrh	r2, [r7, #6]
 8008ba2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	88fa      	ldrh	r2, [r7, #6]
 8008ba8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2222      	movs	r2, #34	@ 0x22
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695a      	ldr	r2, [r3, #20]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0220 	orr.w	r2, r2, #32
 8008bee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b095      	sub	sp, #84	@ 0x54
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	330c      	adds	r3, #12
 8008c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c26:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c2c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e5      	bne.n	8008c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3314      	adds	r3, #20
 8008c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f023 0301 	bic.w	r3, r3, #1
 8008c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3314      	adds	r3, #20
 8008c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e5      	bne.n	8008c3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d119      	bne.n	8008caa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f023 0310 	bic.w	r3, r3, #16
 8008c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	330c      	adds	r3, #12
 8008c94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c96:	61ba      	str	r2, [r7, #24]
 8008c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6979      	ldr	r1, [r7, #20]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008cb8:	bf00      	nop
 8008cba:	3754      	adds	r7, #84	@ 0x54
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff fee7 	bl	8008aac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cde:	bf00      	nop
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b085      	sub	sp, #20
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b21      	cmp	r3, #33	@ 0x21
 8008cf8:	d13e      	bne.n	8008d78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d02:	d114      	bne.n	8008d2e <UART_Transmit_IT+0x48>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d110      	bne.n	8008d2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a1b      	ldr	r3, [r3, #32]
 8008d10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	1c9a      	adds	r2, r3, #2
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	621a      	str	r2, [r3, #32]
 8008d2c:	e008      	b.n	8008d40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	1c59      	adds	r1, r3, #1
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6211      	str	r1, [r2, #32]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10f      	bne.n	8008d74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68da      	ldr	r2, [r3, #12]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e000      	b.n	8008d7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d78:	2302      	movs	r3, #2
  }
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68da      	ldr	r2, [r3, #12]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2220      	movs	r2, #32
 8008da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff fe76 	bl	8008a98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b08c      	sub	sp, #48	@ 0x30
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b22      	cmp	r3, #34	@ 0x22
 8008dd0:	f040 80aa 	bne.w	8008f28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ddc:	d115      	bne.n	8008e0a <UART_Receive_IT+0x54>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d111      	bne.n	8008e0a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e02:	1c9a      	adds	r2, r3, #2
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e08:	e024      	b.n	8008e54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e18:	d007      	beq.n	8008e2a <UART_Receive_IT+0x74>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10a      	bne.n	8008e38 <UART_Receive_IT+0x82>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	e008      	b.n	8008e4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4e:	1c5a      	adds	r2, r3, #1
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4619      	mov	r1, r3
 8008e62:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d15d      	bne.n	8008f24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0220 	bic.w	r2, r2, #32
 8008e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695a      	ldr	r2, [r3, #20]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d135      	bne.n	8008f1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f023 0310 	bic.w	r3, r3, #16
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	330c      	adds	r3, #12
 8008ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ed4:	623a      	str	r2, [r7, #32]
 8008ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	69f9      	ldr	r1, [r7, #28]
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e5      	bne.n	8008eb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b10      	cmp	r3, #16
 8008ef4:	d10a      	bne.n	8008f0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff fdd4 	bl	8008ac0 <HAL_UARTEx_RxEventCallback>
 8008f18:	e002      	b.n	8008f20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fa f98a 	bl	8003234 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e002      	b.n	8008f2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	e000      	b.n	8008f2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008f28:	2302      	movs	r3, #2
  }
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3730      	adds	r7, #48	@ 0x30
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f38:	b0c0      	sub	sp, #256	@ 0x100
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f50:	68d9      	ldr	r1, [r3, #12]
 8008f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	ea40 0301 	orr.w	r3, r0, r1
 8008f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	431a      	orrs	r2, r3
 8008f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f8c:	f021 010c 	bic.w	r1, r1, #12
 8008f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008f9a:	430b      	orrs	r3, r1
 8008f9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fae:	6999      	ldr	r1, [r3, #24]
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	ea40 0301 	orr.w	r3, r0, r1
 8008fba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4b8f      	ldr	r3, [pc, #572]	@ (8009200 <UART_SetConfig+0x2cc>)
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d005      	beq.n	8008fd4 <UART_SetConfig+0xa0>
 8008fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	4b8d      	ldr	r3, [pc, #564]	@ (8009204 <UART_SetConfig+0x2d0>)
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d104      	bne.n	8008fde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fd4:	f7fe fd0a 	bl	80079ec <HAL_RCC_GetPCLK2Freq>
 8008fd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008fdc:	e003      	b.n	8008fe6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fde:	f7fe fcf1 	bl	80079c4 <HAL_RCC_GetPCLK1Freq>
 8008fe2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ff0:	f040 810c 	bne.w	800920c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ffe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009002:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009006:	4622      	mov	r2, r4
 8009008:	462b      	mov	r3, r5
 800900a:	1891      	adds	r1, r2, r2
 800900c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800900e:	415b      	adcs	r3, r3
 8009010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009012:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009016:	4621      	mov	r1, r4
 8009018:	eb12 0801 	adds.w	r8, r2, r1
 800901c:	4629      	mov	r1, r5
 800901e:	eb43 0901 	adc.w	r9, r3, r1
 8009022:	f04f 0200 	mov.w	r2, #0
 8009026:	f04f 0300 	mov.w	r3, #0
 800902a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800902e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009032:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009036:	4690      	mov	r8, r2
 8009038:	4699      	mov	r9, r3
 800903a:	4623      	mov	r3, r4
 800903c:	eb18 0303 	adds.w	r3, r8, r3
 8009040:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009044:	462b      	mov	r3, r5
 8009046:	eb49 0303 	adc.w	r3, r9, r3
 800904a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800904e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800905a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800905e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009062:	460b      	mov	r3, r1
 8009064:	18db      	adds	r3, r3, r3
 8009066:	653b      	str	r3, [r7, #80]	@ 0x50
 8009068:	4613      	mov	r3, r2
 800906a:	eb42 0303 	adc.w	r3, r2, r3
 800906e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009070:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009074:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009078:	f7f7 fdb6 	bl	8000be8 <__aeabi_uldivmod>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	4b61      	ldr	r3, [pc, #388]	@ (8009208 <UART_SetConfig+0x2d4>)
 8009082:	fba3 2302 	umull	r2, r3, r3, r2
 8009086:	095b      	lsrs	r3, r3, #5
 8009088:	011c      	lsls	r4, r3, #4
 800908a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800908e:	2200      	movs	r2, #0
 8009090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009094:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009098:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800909c:	4642      	mov	r2, r8
 800909e:	464b      	mov	r3, r9
 80090a0:	1891      	adds	r1, r2, r2
 80090a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80090a4:	415b      	adcs	r3, r3
 80090a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80090ac:	4641      	mov	r1, r8
 80090ae:	eb12 0a01 	adds.w	sl, r2, r1
 80090b2:	4649      	mov	r1, r9
 80090b4:	eb43 0b01 	adc.w	fp, r3, r1
 80090b8:	f04f 0200 	mov.w	r2, #0
 80090bc:	f04f 0300 	mov.w	r3, #0
 80090c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090cc:	4692      	mov	sl, r2
 80090ce:	469b      	mov	fp, r3
 80090d0:	4643      	mov	r3, r8
 80090d2:	eb1a 0303 	adds.w	r3, sl, r3
 80090d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090da:	464b      	mov	r3, r9
 80090dc:	eb4b 0303 	adc.w	r3, fp, r3
 80090e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80090f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80090f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80090f8:	460b      	mov	r3, r1
 80090fa:	18db      	adds	r3, r3, r3
 80090fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80090fe:	4613      	mov	r3, r2
 8009100:	eb42 0303 	adc.w	r3, r2, r3
 8009104:	647b      	str	r3, [r7, #68]	@ 0x44
 8009106:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800910a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800910e:	f7f7 fd6b 	bl	8000be8 <__aeabi_uldivmod>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4611      	mov	r1, r2
 8009118:	4b3b      	ldr	r3, [pc, #236]	@ (8009208 <UART_SetConfig+0x2d4>)
 800911a:	fba3 2301 	umull	r2, r3, r3, r1
 800911e:	095b      	lsrs	r3, r3, #5
 8009120:	2264      	movs	r2, #100	@ 0x64
 8009122:	fb02 f303 	mul.w	r3, r2, r3
 8009126:	1acb      	subs	r3, r1, r3
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800912e:	4b36      	ldr	r3, [pc, #216]	@ (8009208 <UART_SetConfig+0x2d4>)
 8009130:	fba3 2302 	umull	r2, r3, r3, r2
 8009134:	095b      	lsrs	r3, r3, #5
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800913c:	441c      	add	r4, r3
 800913e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009142:	2200      	movs	r2, #0
 8009144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009148:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800914c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	1891      	adds	r1, r2, r2
 8009156:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009158:	415b      	adcs	r3, r3
 800915a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800915c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009160:	4641      	mov	r1, r8
 8009162:	1851      	adds	r1, r2, r1
 8009164:	6339      	str	r1, [r7, #48]	@ 0x30
 8009166:	4649      	mov	r1, r9
 8009168:	414b      	adcs	r3, r1
 800916a:	637b      	str	r3, [r7, #52]	@ 0x34
 800916c:	f04f 0200 	mov.w	r2, #0
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009178:	4659      	mov	r1, fp
 800917a:	00cb      	lsls	r3, r1, #3
 800917c:	4651      	mov	r1, sl
 800917e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009182:	4651      	mov	r1, sl
 8009184:	00ca      	lsls	r2, r1, #3
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	4603      	mov	r3, r0
 800918c:	4642      	mov	r2, r8
 800918e:	189b      	adds	r3, r3, r2
 8009190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009194:	464b      	mov	r3, r9
 8009196:	460a      	mov	r2, r1
 8009198:	eb42 0303 	adc.w	r3, r2, r3
 800919c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80091b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091b4:	460b      	mov	r3, r1
 80091b6:	18db      	adds	r3, r3, r3
 80091b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091ba:	4613      	mov	r3, r2
 80091bc:	eb42 0303 	adc.w	r3, r2, r3
 80091c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091ca:	f7f7 fd0d 	bl	8000be8 <__aeabi_uldivmod>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009208 <UART_SetConfig+0x2d4>)
 80091d4:	fba3 1302 	umull	r1, r3, r3, r2
 80091d8:	095b      	lsrs	r3, r3, #5
 80091da:	2164      	movs	r1, #100	@ 0x64
 80091dc:	fb01 f303 	mul.w	r3, r1, r3
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	3332      	adds	r3, #50	@ 0x32
 80091e6:	4a08      	ldr	r2, [pc, #32]	@ (8009208 <UART_SetConfig+0x2d4>)
 80091e8:	fba2 2303 	umull	r2, r3, r2, r3
 80091ec:	095b      	lsrs	r3, r3, #5
 80091ee:	f003 0207 	and.w	r2, r3, #7
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4422      	add	r2, r4
 80091fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80091fc:	e106      	b.n	800940c <UART_SetConfig+0x4d8>
 80091fe:	bf00      	nop
 8009200:	40011000 	.word	0x40011000
 8009204:	40011400 	.word	0x40011400
 8009208:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800920c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009210:	2200      	movs	r2, #0
 8009212:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009216:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800921a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800921e:	4642      	mov	r2, r8
 8009220:	464b      	mov	r3, r9
 8009222:	1891      	adds	r1, r2, r2
 8009224:	6239      	str	r1, [r7, #32]
 8009226:	415b      	adcs	r3, r3
 8009228:	627b      	str	r3, [r7, #36]	@ 0x24
 800922a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800922e:	4641      	mov	r1, r8
 8009230:	1854      	adds	r4, r2, r1
 8009232:	4649      	mov	r1, r9
 8009234:	eb43 0501 	adc.w	r5, r3, r1
 8009238:	f04f 0200 	mov.w	r2, #0
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	00eb      	lsls	r3, r5, #3
 8009242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009246:	00e2      	lsls	r2, r4, #3
 8009248:	4614      	mov	r4, r2
 800924a:	461d      	mov	r5, r3
 800924c:	4643      	mov	r3, r8
 800924e:	18e3      	adds	r3, r4, r3
 8009250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009254:	464b      	mov	r3, r9
 8009256:	eb45 0303 	adc.w	r3, r5, r3
 800925a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800925e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800926a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800926e:	f04f 0200 	mov.w	r2, #0
 8009272:	f04f 0300 	mov.w	r3, #0
 8009276:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800927a:	4629      	mov	r1, r5
 800927c:	008b      	lsls	r3, r1, #2
 800927e:	4621      	mov	r1, r4
 8009280:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009284:	4621      	mov	r1, r4
 8009286:	008a      	lsls	r2, r1, #2
 8009288:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800928c:	f7f7 fcac 	bl	8000be8 <__aeabi_uldivmod>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4b60      	ldr	r3, [pc, #384]	@ (8009418 <UART_SetConfig+0x4e4>)
 8009296:	fba3 2302 	umull	r2, r3, r3, r2
 800929a:	095b      	lsrs	r3, r3, #5
 800929c:	011c      	lsls	r4, r3, #4
 800929e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80092ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80092b0:	4642      	mov	r2, r8
 80092b2:	464b      	mov	r3, r9
 80092b4:	1891      	adds	r1, r2, r2
 80092b6:	61b9      	str	r1, [r7, #24]
 80092b8:	415b      	adcs	r3, r3
 80092ba:	61fb      	str	r3, [r7, #28]
 80092bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092c0:	4641      	mov	r1, r8
 80092c2:	1851      	adds	r1, r2, r1
 80092c4:	6139      	str	r1, [r7, #16]
 80092c6:	4649      	mov	r1, r9
 80092c8:	414b      	adcs	r3, r1
 80092ca:	617b      	str	r3, [r7, #20]
 80092cc:	f04f 0200 	mov.w	r2, #0
 80092d0:	f04f 0300 	mov.w	r3, #0
 80092d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092d8:	4659      	mov	r1, fp
 80092da:	00cb      	lsls	r3, r1, #3
 80092dc:	4651      	mov	r1, sl
 80092de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092e2:	4651      	mov	r1, sl
 80092e4:	00ca      	lsls	r2, r1, #3
 80092e6:	4610      	mov	r0, r2
 80092e8:	4619      	mov	r1, r3
 80092ea:	4603      	mov	r3, r0
 80092ec:	4642      	mov	r2, r8
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092f4:	464b      	mov	r3, r9
 80092f6:	460a      	mov	r2, r1
 80092f8:	eb42 0303 	adc.w	r3, r2, r3
 80092fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	67bb      	str	r3, [r7, #120]	@ 0x78
 800930a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	f04f 0300 	mov.w	r3, #0
 8009314:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009318:	4649      	mov	r1, r9
 800931a:	008b      	lsls	r3, r1, #2
 800931c:	4641      	mov	r1, r8
 800931e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009322:	4641      	mov	r1, r8
 8009324:	008a      	lsls	r2, r1, #2
 8009326:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800932a:	f7f7 fc5d 	bl	8000be8 <__aeabi_uldivmod>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4611      	mov	r1, r2
 8009334:	4b38      	ldr	r3, [pc, #224]	@ (8009418 <UART_SetConfig+0x4e4>)
 8009336:	fba3 2301 	umull	r2, r3, r3, r1
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2264      	movs	r2, #100	@ 0x64
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	1acb      	subs	r3, r1, r3
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	3332      	adds	r3, #50	@ 0x32
 8009348:	4a33      	ldr	r2, [pc, #204]	@ (8009418 <UART_SetConfig+0x4e4>)
 800934a:	fba2 2303 	umull	r2, r3, r2, r3
 800934e:	095b      	lsrs	r3, r3, #5
 8009350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009354:	441c      	add	r4, r3
 8009356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800935a:	2200      	movs	r2, #0
 800935c:	673b      	str	r3, [r7, #112]	@ 0x70
 800935e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009360:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009364:	4642      	mov	r2, r8
 8009366:	464b      	mov	r3, r9
 8009368:	1891      	adds	r1, r2, r2
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	415b      	adcs	r3, r3
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009374:	4641      	mov	r1, r8
 8009376:	1851      	adds	r1, r2, r1
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	4649      	mov	r1, r9
 800937c:	414b      	adcs	r3, r1
 800937e:	607b      	str	r3, [r7, #4]
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800938c:	4659      	mov	r1, fp
 800938e:	00cb      	lsls	r3, r1, #3
 8009390:	4651      	mov	r1, sl
 8009392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009396:	4651      	mov	r1, sl
 8009398:	00ca      	lsls	r2, r1, #3
 800939a:	4610      	mov	r0, r2
 800939c:	4619      	mov	r1, r3
 800939e:	4603      	mov	r3, r0
 80093a0:	4642      	mov	r2, r8
 80093a2:	189b      	adds	r3, r3, r2
 80093a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093a6:	464b      	mov	r3, r9
 80093a8:	460a      	mov	r2, r1
 80093aa:	eb42 0303 	adc.w	r3, r2, r3
 80093ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80093ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093c8:	4649      	mov	r1, r9
 80093ca:	008b      	lsls	r3, r1, #2
 80093cc:	4641      	mov	r1, r8
 80093ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093d2:	4641      	mov	r1, r8
 80093d4:	008a      	lsls	r2, r1, #2
 80093d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093da:	f7f7 fc05 	bl	8000be8 <__aeabi_uldivmod>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009418 <UART_SetConfig+0x4e4>)
 80093e4:	fba3 1302 	umull	r1, r3, r3, r2
 80093e8:	095b      	lsrs	r3, r3, #5
 80093ea:	2164      	movs	r1, #100	@ 0x64
 80093ec:	fb01 f303 	mul.w	r3, r1, r3
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	3332      	adds	r3, #50	@ 0x32
 80093f6:	4a08      	ldr	r2, [pc, #32]	@ (8009418 <UART_SetConfig+0x4e4>)
 80093f8:	fba2 2303 	umull	r2, r3, r2, r3
 80093fc:	095b      	lsrs	r3, r3, #5
 80093fe:	f003 020f 	and.w	r2, r3, #15
 8009402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4422      	add	r2, r4
 800940a:	609a      	str	r2, [r3, #8]
}
 800940c:	bf00      	nop
 800940e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009412:	46bd      	mov	sp, r7
 8009414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009418:	51eb851f 	.word	0x51eb851f

0800941c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800941c:	b084      	sub	sp, #16
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	f107 001c 	add.w	r0, r7, #28
 800942a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800942e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009432:	2b01      	cmp	r3, #1
 8009434:	d123      	bne.n	800947e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800944a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800945e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009462:	2b01      	cmp	r3, #1
 8009464:	d105      	bne.n	8009472 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f9dc 	bl	8009830 <USB_CoreReset>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
 800947c:	e01b      	b.n	80094b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9d0 	bl	8009830 <USB_CoreReset>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009494:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80094a8:	e005      	b.n	80094b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094b6:	7fbb      	ldrb	r3, [r7, #30]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d10b      	bne.n	80094d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f043 0206 	orr.w	r2, r3, #6
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f043 0220 	orr.w	r2, r3, #32
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094e0:	b004      	add	sp, #16
 80094e2:	4770      	bx	lr

080094e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f043 0201 	orr.w	r2, r3, #1
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	f023 0201 	bic.w	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009544:	78fb      	ldrb	r3, [r7, #3]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d115      	bne.n	8009576 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009556:	200a      	movs	r0, #10
 8009558:	f7fa fb08 	bl	8003b6c <HAL_Delay>
      ms += 10U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	330a      	adds	r3, #10
 8009560:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f956 	bl	8009814 <USB_GetMode>
 8009568:	4603      	mov	r3, r0
 800956a:	2b01      	cmp	r3, #1
 800956c:	d01e      	beq.n	80095ac <USB_SetCurrentMode+0x84>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2bc7      	cmp	r3, #199	@ 0xc7
 8009572:	d9f0      	bls.n	8009556 <USB_SetCurrentMode+0x2e>
 8009574:	e01a      	b.n	80095ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d115      	bne.n	80095a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009588:	200a      	movs	r0, #10
 800958a:	f7fa faef 	bl	8003b6c <HAL_Delay>
      ms += 10U;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	330a      	adds	r3, #10
 8009592:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f93d 	bl	8009814 <USB_GetMode>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <USB_SetCurrentMode+0x84>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80095a4:	d9f0      	bls.n	8009588 <USB_SetCurrentMode+0x60>
 80095a6:	e001      	b.n	80095ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	e005      	b.n	80095b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80095b0:	d101      	bne.n	80095b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	3301      	adds	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095da:	d901      	bls.n	80095e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e01b      	b.n	8009618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	daf2      	bge.n	80095ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	019b      	lsls	r3, r3, #6
 80095f0:	f043 0220 	orr.w	r2, r3, #32
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009604:	d901      	bls.n	800960a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e006      	b.n	8009618 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b20      	cmp	r3, #32
 8009614:	d0f0      	beq.n	80095f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800963c:	d901      	bls.n	8009642 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e018      	b.n	8009674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	daf2      	bge.n	8009630 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800964a:	2300      	movs	r3, #0
 800964c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2210      	movs	r2, #16
 8009652:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	3301      	adds	r3, #1
 8009658:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009660:	d901      	bls.n	8009666 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e006      	b.n	8009674 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	f003 0310 	and.w	r3, r3, #16
 800966e:	2b10      	cmp	r3, #16
 8009670:	d0f0      	beq.n	8009654 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009680:	b480      	push	{r7}
 8009682:	b089      	sub	sp, #36	@ 0x24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4611      	mov	r1, r2
 800968c:	461a      	mov	r2, r3
 800968e:	460b      	mov	r3, r1
 8009690:	71fb      	strb	r3, [r7, #7]
 8009692:	4613      	mov	r3, r2
 8009694:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800969e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d123      	bne.n	80096ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096a6:	88bb      	ldrh	r3, [r7, #4]
 80096a8:	3303      	adds	r3, #3
 80096aa:	089b      	lsrs	r3, r3, #2
 80096ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096ae:	2300      	movs	r3, #0
 80096b0:	61bb      	str	r3, [r7, #24]
 80096b2:	e018      	b.n	80096e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	031a      	lsls	r2, r3, #12
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096c0:	461a      	mov	r2, r3
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	3301      	adds	r3, #1
 80096cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	3301      	adds	r3, #1
 80096d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	3301      	adds	r3, #1
 80096d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	3301      	adds	r3, #1
 80096de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	3301      	adds	r3, #1
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d3e2      	bcc.n	80096b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3724      	adds	r7, #36	@ 0x24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b08b      	sub	sp, #44	@ 0x2c
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	089b      	lsrs	r3, r3, #2
 8009716:	b29b      	uxth	r3, r3
 8009718:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800971a:	88fb      	ldrh	r3, [r7, #6]
 800971c:	f003 0303 	and.w	r3, r3, #3
 8009720:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009722:	2300      	movs	r3, #0
 8009724:	623b      	str	r3, [r7, #32]
 8009726:	e014      	b.n	8009752 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	601a      	str	r2, [r3, #0]
    pDest++;
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	3301      	adds	r3, #1
 8009738:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	3301      	adds	r3, #1
 800973e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009742:	3301      	adds	r3, #1
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	3301      	adds	r3, #1
 800974a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	3301      	adds	r3, #1
 8009750:	623b      	str	r3, [r7, #32]
 8009752:	6a3a      	ldr	r2, [r7, #32]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	429a      	cmp	r2, r3
 8009758:	d3e6      	bcc.n	8009728 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800975a:	8bfb      	ldrh	r3, [r7, #30]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01e      	beq.n	800979e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800976a:	461a      	mov	r2, r3
 800976c:	f107 0310 	add.w	r3, r7, #16
 8009770:	6812      	ldr	r2, [r2, #0]
 8009772:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	b2db      	uxtb	r3, r3
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	fa22 f303 	lsr.w	r3, r2, r3
 8009780:	b2da      	uxtb	r2, r3
 8009782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009784:	701a      	strb	r2, [r3, #0]
      i++;
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	3301      	adds	r3, #1
 800978a:	623b      	str	r3, [r7, #32]
      pDest++;
 800978c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978e:	3301      	adds	r3, #1
 8009790:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009792:	8bfb      	ldrh	r3, [r7, #30]
 8009794:	3b01      	subs	r3, #1
 8009796:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009798:	8bfb      	ldrh	r3, [r7, #30]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1ea      	bne.n	8009774 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	372c      	adds	r7, #44	@ 0x2c
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097c4:	68fb      	ldr	r3, [r7, #12]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b085      	sub	sp, #20
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	4013      	ands	r3, r2
 8009804:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009806:	68bb      	ldr	r3, [r7, #8]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	f003 0301 	and.w	r3, r3, #1
}
 8009824:	4618      	mov	r0, r3
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3301      	adds	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009848:	d901      	bls.n	800984e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e022      	b.n	8009894 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	daf2      	bge.n	800983c <USB_CoreReset+0xc>

  count = 10U;
 8009856:	230a      	movs	r3, #10
 8009858:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800985a:	e002      	b.n	8009862 <USB_CoreReset+0x32>
  {
    count--;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3b01      	subs	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1f9      	bne.n	800985c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f043 0201 	orr.w	r2, r3, #1
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	3301      	adds	r3, #1
 8009878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009880:	d901      	bls.n	8009886 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e006      	b.n	8009894 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b01      	cmp	r3, #1
 8009890:	d0f0      	beq.n	8009874 <USB_CoreReset+0x44>

  return HAL_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098a0:	b084      	sub	sp, #16
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b086      	sub	sp, #24
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80098ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098c0:	461a      	mov	r2, r3
 80098c2:	2300      	movs	r3, #0
 80098c4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d119      	bne.n	800992a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80098f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d10a      	bne.n	8009914 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800990c:	f043 0304 	orr.w	r3, r3, #4
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	e014      	b.n	800993e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009922:	f023 0304 	bic.w	r3, r3, #4
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	e009      	b.n	800993e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009938:	f023 0304 	bic.w	r3, r3, #4
 800993c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800993e:	2110      	movs	r1, #16
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff fe3d 	bl	80095c0 <USB_FlushTxFifo>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff fe67 	bl	8009624 <USB_FlushRxFifo>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	e015      	b.n	8009992 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009972:	461a      	mov	r2, r3
 8009974:	f04f 33ff 	mov.w	r3, #4294967295
 8009978:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	4413      	add	r3, r2
 8009982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009986:	461a      	mov	r2, r3
 8009988:	2300      	movs	r3, #0
 800998a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3301      	adds	r3, #1
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009996:	461a      	mov	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	4293      	cmp	r3, r2
 800999c:	d3e3      	bcc.n	8009966 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a18      	ldr	r2, [pc, #96]	@ (8009a10 <USB_HostInit+0x170>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d10b      	bne.n	80099cc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099ba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a15      	ldr	r2, [pc, #84]	@ (8009a14 <USB_HostInit+0x174>)
 80099c0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a14      	ldr	r2, [pc, #80]	@ (8009a18 <USB_HostInit+0x178>)
 80099c6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80099ca:	e009      	b.n	80099e0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2280      	movs	r2, #128	@ 0x80
 80099d0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a11      	ldr	r2, [pc, #68]	@ (8009a1c <USB_HostInit+0x17c>)
 80099d6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a11      	ldr	r2, [pc, #68]	@ (8009a20 <USB_HostInit+0x180>)
 80099dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d105      	bne.n	80099f4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	f043 0210 	orr.w	r2, r3, #16
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699a      	ldr	r2, [r3, #24]
 80099f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a24 <USB_HostInit+0x184>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a0c:	b004      	add	sp, #16
 8009a0e:	4770      	bx	lr
 8009a10:	40040000 	.word	0x40040000
 8009a14:	01000200 	.word	0x01000200
 8009a18:	00e00300 	.word	0x00e00300
 8009a1c:	00600080 	.word	0x00600080
 8009a20:	004000e0 	.word	0x004000e0
 8009a24:	a3200008 	.word	0xa3200008

08009a28 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a46:	f023 0303 	bic.w	r3, r3, #3
 8009a4a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	f003 0303 	and.w	r3, r3, #3
 8009a5a:	68f9      	ldr	r1, [r7, #12]
 8009a5c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009a60:	4313      	orrs	r3, r2
 8009a62:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d107      	bne.n	8009a7a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a70:	461a      	mov	r2, r3
 8009a72:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009a76:	6053      	str	r3, [r2, #4]
 8009a78:	e00c      	b.n	8009a94 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d107      	bne.n	8009a90 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a86:	461a      	mov	r2, r3
 8009a88:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009a8c:	6053      	str	r3, [r2, #4]
 8009a8e:	e001      	b.n	8009a94 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	e000      	b.n	8009a96 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009ac2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ad0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009ad2:	2064      	movs	r0, #100	@ 0x64
 8009ad4:	f7fa f84a 	bl	8003b6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ae4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009ae6:	200a      	movs	r0, #10
 8009ae8:	f7fa f840 	bl	8003b6c <HAL_Delay>

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b085      	sub	sp, #20
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009b1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <USB_DriveVbus+0x44>
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d106      	bne.n	8009b3a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b38:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b44:	d109      	bne.n	8009b5a <USB_DriveVbus+0x64>
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009b54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b58:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	0c5b      	lsrs	r3, r3, #17
 8009b86:	f003 0303 	and.w	r3, r3, #3
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b085      	sub	sp, #20
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	b29b      	uxth	r3, r3
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3714      	adds	r7, #20
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	70fb      	strb	r3, [r7, #3]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70bb      	strb	r3, [r7, #2]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009be6:	461a      	mov	r2, r3
 8009be8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009bee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d87c      	bhi.n	8009cf0 <USB_HC_Init+0x138>
 8009bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8009bfc <USB_HC_Init+0x44>)
 8009bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfc:	08009c0d 	.word	0x08009c0d
 8009c00:	08009cb3 	.word	0x08009cb3
 8009c04:	08009c0d 	.word	0x08009c0d
 8009c08:	08009c75 	.word	0x08009c75
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	015a      	lsls	r2, r3, #5
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	4413      	add	r3, r2
 8009c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009c1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009c20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	da10      	bge.n	8009c4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009c28:	78fb      	ldrb	r3, [r7, #3]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	693a      	ldr	r2, [r7, #16]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c46:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009c48:	e055      	b.n	8009cf6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a6f      	ldr	r2, [pc, #444]	@ (8009e0c <USB_HC_Init+0x254>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d151      	bne.n	8009cf6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009c70:	60d3      	str	r3, [r2, #12]
      break;
 8009c72:	e040      	b.n	8009cf6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c80:	461a      	mov	r2, r3
 8009c82:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009c86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009c88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	da34      	bge.n	8009cfa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	0151      	lsls	r1, r2, #5
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	440a      	add	r2, r1
 8009ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cae:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009cb0:	e023      	b.n	8009cfa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	f240 2325 	movw	r3, #549	@ 0x225
 8009cc4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009cc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da17      	bge.n	8009cfe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009cce:	78fb      	ldrb	r3, [r7, #3]
 8009cd0:	015a      	lsls	r2, r3, #5
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	78fa      	ldrb	r2, [r7, #3]
 8009cde:	0151      	lsls	r1, r2, #5
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	440a      	add	r2, r1
 8009ce4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ce8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009cec:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009cee:	e006      	b.n	8009cfe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	77fb      	strb	r3, [r7, #31]
      break;
 8009cf4:	e004      	b.n	8009d00 <USB_HC_Init+0x148>
      break;
 8009cf6:	bf00      	nop
 8009cf8:	e002      	b.n	8009d00 <USB_HC_Init+0x148>
      break;
 8009cfa:	bf00      	nop
 8009cfc:	e000      	b.n	8009d00 <USB_HC_Init+0x148>
      break;
 8009cfe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	2300      	movs	r3, #0
 8009d10:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	015a      	lsls	r2, r3, #5
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	4413      	add	r3, r2
 8009d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	78fa      	ldrb	r2, [r7, #3]
 8009d22:	0151      	lsls	r1, r2, #5
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	440a      	add	r2, r1
 8009d28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d2c:	f043 0302 	orr.w	r3, r3, #2
 8009d30:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d38:	699a      	ldr	r2, [r3, #24]
 8009d3a:	78fb      	ldrb	r3, [r7, #3]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	2101      	movs	r1, #1
 8009d42:	fa01 f303 	lsl.w	r3, r1, r3
 8009d46:	6939      	ldr	r1, [r7, #16]
 8009d48:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009d5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da03      	bge.n	8009d6c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009d64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d68:	61bb      	str	r3, [r7, #24]
 8009d6a:	e001      	b.n	8009d70 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff fef9 	bl	8009b68 <USB_GetHostSpeed>
 8009d76:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009d78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d106      	bne.n	8009d8e <USB_HC_Init+0x1d6>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d003      	beq.n	8009d8e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009d86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009d8a:	617b      	str	r3, [r7, #20]
 8009d8c:	e001      	b.n	8009d92 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009d92:	787b      	ldrb	r3, [r7, #1]
 8009d94:	059b      	lsls	r3, r3, #22
 8009d96:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009d9a:	78bb      	ldrb	r3, [r7, #2]
 8009d9c:	02db      	lsls	r3, r3, #11
 8009d9e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009da2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009da4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009da8:	049b      	lsls	r3, r3, #18
 8009daa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009dae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009db0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009db6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	431a      	orrs	r2, r3
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009dcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009dd0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009dd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d003      	beq.n	8009de2 <USB_HC_Init+0x22a>
 8009dda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d10f      	bne.n	8009e02 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009de2:	78fb      	ldrb	r3, [r7, #3]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	78fa      	ldrb	r2, [r7, #3]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009dfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	40040000 	.word	0x40040000

08009e10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08c      	sub	sp, #48	@ 0x30
 8009e14:	af02      	add	r7, sp, #8
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009e28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e2c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4a5d      	ldr	r2, [pc, #372]	@ (8009fa8 <USB_HC_StartXfer+0x198>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d12f      	bne.n	8009e96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009e36:	79fb      	ldrb	r3, [r7, #7]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d11c      	bne.n	8009e76 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	7c9b      	ldrb	r3, [r3, #18]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d003      	beq.n	8009e4c <USB_HC_StartXfer+0x3c>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	7c9b      	ldrb	r3, [r3, #18]
 8009e48:	2b02      	cmp	r3, #2
 8009e4a:	d124      	bne.n	8009e96 <USB_HC_StartXfer+0x86>
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	799b      	ldrb	r3, [r3, #6]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d120      	bne.n	8009e96 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	69fa      	ldr	r2, [r7, #28]
 8009e64:	0151      	lsls	r1, r2, #5
 8009e66:	6a3a      	ldr	r2, [r7, #32]
 8009e68:	440a      	add	r2, r1
 8009e6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e72:	60d3      	str	r3, [r2, #12]
 8009e74:	e00f      	b.n	8009e96 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	791b      	ldrb	r3, [r3, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10b      	bne.n	8009e96 <USB_HC_StartXfer+0x86>
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	795b      	ldrb	r3, [r3, #5]
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d107      	bne.n	8009e96 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f000 fb6b 	bl	800a568 <USB_DoPing>
        return HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e232      	b.n	800a2fc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	799b      	ldrb	r3, [r3, #6]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d158      	bne.n	8009f50 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	78db      	ldrb	r3, [r3, #3]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009eaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	8a92      	ldrh	r2, [r2, #20]
 8009eb0:	fb03 f202 	mul.w	r2, r3, r2
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	61da      	str	r2, [r3, #28]
 8009eb8:	e07c      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	7c9b      	ldrb	r3, [r3, #18]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d130      	bne.n	8009f24 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	2bbc      	cmp	r3, #188	@ 0xbc
 8009ec8:	d918      	bls.n	8009efc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	8a9b      	ldrh	r3, [r3, #20]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d003      	beq.n	8009eec <USB_HC_StartXfer+0xdc>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	2b02      	cmp	r3, #2
 8009eea:	d103      	bne.n	8009ef4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	60da      	str	r2, [r3, #12]
 8009ef2:	e05f      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	60da      	str	r2, [r3, #12]
 8009efa:	e05b      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	6a1a      	ldr	r2, [r3, #32]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d007      	beq.n	8009f1c <USB_HC_StartXfer+0x10c>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d003      	beq.n	8009f1c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2204      	movs	r2, #4
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	e04b      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2203      	movs	r2, #3
 8009f20:	60da      	str	r2, [r3, #12]
 8009f22:	e047      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d10d      	bne.n	8009f46 <USB_HC_StartXfer+0x136>
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	8a92      	ldrh	r2, [r2, #20]
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d907      	bls.n	8009f46 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	8a92      	ldrh	r2, [r2, #20]
 8009f3c:	fb03 f202 	mul.w	r2, r3, r2
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	61da      	str	r2, [r3, #28]
 8009f44:	e036      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6a1a      	ldr	r2, [r3, #32]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	61da      	str	r2, [r3, #28]
 8009f4e:	e031      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d018      	beq.n	8009f8a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	8a92      	ldrh	r2, [r2, #20]
 8009f60:	4413      	add	r3, r2
 8009f62:	3b01      	subs	r3, #1
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	8a92      	ldrh	r2, [r2, #20]
 8009f68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009f6e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009f70:	8b7b      	ldrh	r3, [r7, #26]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d90b      	bls.n	8009f8e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009f76:	8b7b      	ldrh	r3, [r7, #26]
 8009f78:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	8a92      	ldrh	r2, [r2, #20]
 8009f80:	fb03 f202 	mul.w	r2, r3, r2
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	61da      	str	r2, [r3, #28]
 8009f88:	e001      	b.n	8009f8e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	78db      	ldrb	r3, [r3, #3]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	8a92      	ldrh	r2, [r2, #20]
 8009f9c:	fb03 f202 	mul.w	r2, r3, r2
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	61da      	str	r2, [r3, #28]
 8009fa4:	e006      	b.n	8009fb4 <USB_HC_StartXfer+0x1a4>
 8009fa6:	bf00      	nop
 8009fa8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	6a1a      	ldr	r2, [r3, #32]
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fbc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009fbe:	04d9      	lsls	r1, r3, #19
 8009fc0:	4ba3      	ldr	r3, [pc, #652]	@ (800a250 <USB_HC_StartXfer+0x440>)
 8009fc2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fc4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	7d9b      	ldrb	r3, [r3, #22]
 8009fca:	075b      	lsls	r3, r3, #29
 8009fcc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fd0:	69f9      	ldr	r1, [r7, #28]
 8009fd2:	0148      	lsls	r0, r1, #5
 8009fd4:	6a39      	ldr	r1, [r7, #32]
 8009fd6:	4401      	add	r1, r0
 8009fd8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fdc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fde:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6999      	ldr	r1, [r3, #24]
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ff6:	460a      	mov	r2, r1
 8009ff8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	bf0c      	ite	eq
 800a00a:	2301      	moveq	r3, #1
 800a00c:	2300      	movne	r3, #0
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	0151      	lsls	r1, r2, #5
 800a024:	6a3a      	ldr	r2, [r7, #32]
 800a026:	440a      	add	r2, r1
 800a028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a02c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a030:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	015a      	lsls	r2, r3, #5
 800a036:	6a3b      	ldr	r3, [r7, #32]
 800a038:	4413      	add	r3, r2
 800a03a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	7e7b      	ldrb	r3, [r7, #25]
 800a042:	075b      	lsls	r3, r3, #29
 800a044:	69f9      	ldr	r1, [r7, #28]
 800a046:	0148      	lsls	r0, r1, #5
 800a048:	6a39      	ldr	r1, [r7, #32]
 800a04a:	4401      	add	r1, r0
 800a04c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a050:	4313      	orrs	r3, r2
 800a052:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	799b      	ldrb	r3, [r3, #6]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	f040 80c3 	bne.w	800a1e4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	7c5b      	ldrb	r3, [r3, #17]
 800a062:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a068:	4313      	orrs	r3, r2
 800a06a:	69fa      	ldr	r2, [r7, #28]
 800a06c:	0151      	lsls	r1, r2, #5
 800a06e:	6a3a      	ldr	r2, [r7, #32]
 800a070:	440a      	add	r2, r1
 800a072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a07a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	4413      	add	r3, r2
 800a084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	0151      	lsls	r1, r2, #5
 800a08e:	6a3a      	ldr	r2, [r7, #32]
 800a090:	440a      	add	r2, r1
 800a092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a096:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a09a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	79db      	ldrb	r3, [r3, #7]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d123      	bne.n	800a0ec <USB_HC_StartXfer+0x2dc>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	78db      	ldrb	r3, [r3, #3]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d11f      	bne.n	800a0ec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	6a3a      	ldr	r2, [r7, #32]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0ca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	7c9b      	ldrb	r3, [r3, #18]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d003      	beq.n	800a0fc <USB_HC_StartXfer+0x2ec>
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	7c9b      	ldrb	r3, [r3, #18]
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d117      	bne.n	800a12c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a100:	2b01      	cmp	r3, #1
 800a102:	d113      	bne.n	800a12c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	78db      	ldrb	r3, [r3, #3]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d10f      	bne.n	800a12c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	6a3b      	ldr	r3, [r7, #32]
 800a112:	4413      	add	r3, r2
 800a114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	6a3a      	ldr	r2, [r7, #32]
 800a120:	440a      	add	r2, r1
 800a122:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a12a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	7c9b      	ldrb	r3, [r3, #18]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d162      	bne.n	800a1fa <USB_HC_StartXfer+0x3ea>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	78db      	ldrb	r3, [r3, #3]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d15e      	bne.n	800a1fa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	3b01      	subs	r3, #1
 800a142:	2b03      	cmp	r3, #3
 800a144:	d858      	bhi.n	800a1f8 <USB_HC_StartXfer+0x3e8>
 800a146:	a201      	add	r2, pc, #4	@ (adr r2, 800a14c <USB_HC_StartXfer+0x33c>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a15d 	.word	0x0800a15d
 800a150:	0800a17f 	.word	0x0800a17f
 800a154:	0800a1a1 	.word	0x0800a1a1
 800a158:	0800a1c3 	.word	0x0800a1c3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	015a      	lsls	r2, r3, #5
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	4413      	add	r3, r2
 800a164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	0151      	lsls	r1, r2, #5
 800a16e:	6a3a      	ldr	r2, [r7, #32]
 800a170:	440a      	add	r2, r1
 800a172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a17a:	6053      	str	r3, [r2, #4]
          break;
 800a17c:	e03d      	b.n	800a1fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	6a3b      	ldr	r3, [r7, #32]
 800a184:	4413      	add	r3, r2
 800a186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	69fa      	ldr	r2, [r7, #28]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	6a3a      	ldr	r2, [r7, #32]
 800a192:	440a      	add	r2, r1
 800a194:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a198:	f043 030e 	orr.w	r3, r3, #14
 800a19c:	6053      	str	r3, [r2, #4]
          break;
 800a19e:	e02c      	b.n	800a1fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	015a      	lsls	r2, r3, #5
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	4413      	add	r3, r2
 800a1a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	0151      	lsls	r1, r2, #5
 800a1b2:	6a3a      	ldr	r2, [r7, #32]
 800a1b4:	440a      	add	r2, r1
 800a1b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1be:	6053      	str	r3, [r2, #4]
          break;
 800a1c0:	e01b      	b.n	800a1fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	6a3b      	ldr	r3, [r7, #32]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	0151      	lsls	r1, r2, #5
 800a1d4:	6a3a      	ldr	r2, [r7, #32]
 800a1d6:	440a      	add	r2, r1
 800a1d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1e0:	6053      	str	r3, [r2, #4]
          break;
 800a1e2:	e00a      	b.n	800a1fa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	6053      	str	r3, [r2, #4]
 800a1f6:	e000      	b.n	800a1fa <USB_HC_StartXfer+0x3ea>
          break;
 800a1f8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	015a      	lsls	r2, r3, #5
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	4413      	add	r3, r2
 800a202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a210:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	78db      	ldrb	r3, [r3, #3]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a220:	613b      	str	r3, [r7, #16]
 800a222:	e003      	b.n	800a22c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a22a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a232:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a240:	461a      	mov	r2, r3
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e055      	b.n	800a2fc <USB_HC_StartXfer+0x4ec>
 800a250:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	78db      	ldrb	r3, [r3, #3]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d14e      	bne.n	800a2fa <USB_HC_StartXfer+0x4ea>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d04a      	beq.n	800a2fa <USB_HC_StartXfer+0x4ea>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	79db      	ldrb	r3, [r3, #7]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d146      	bne.n	800a2fa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	7c9b      	ldrb	r3, [r3, #18]
 800a270:	2b03      	cmp	r3, #3
 800a272:	d831      	bhi.n	800a2d8 <USB_HC_StartXfer+0x4c8>
 800a274:	a201      	add	r2, pc, #4	@ (adr r2, 800a27c <USB_HC_StartXfer+0x46c>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a28d 	.word	0x0800a28d
 800a280:	0800a2b1 	.word	0x0800a2b1
 800a284:	0800a28d 	.word	0x0800a28d
 800a288:	0800a2b1 	.word	0x0800a2b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	3303      	adds	r3, #3
 800a292:	089b      	lsrs	r3, r3, #2
 800a294:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a296:	8afa      	ldrh	r2, [r7, #22]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d91c      	bls.n	800a2dc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	f043 0220 	orr.w	r2, r3, #32
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2ae:	e015      	b.n	800a2dc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
 800a2b4:	3303      	adds	r3, #3
 800a2b6:	089b      	lsrs	r3, r3, #2
 800a2b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a2ba:	8afa      	ldrh	r2, [r7, #22]
 800a2bc:	6a3b      	ldr	r3, [r7, #32]
 800a2be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d90a      	bls.n	800a2e0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2d6:	e003      	b.n	800a2e0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a2d8:	bf00      	nop
 800a2da:	e002      	b.n	800a2e2 <USB_HC_StartXfer+0x4d2>
        break;
 800a2dc:	bf00      	nop
 800a2de:	e000      	b.n	800a2e2 <USB_HC_StartXfer+0x4d2>
        break;
 800a2e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	6999      	ldr	r1, [r3, #24]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	785a      	ldrb	r2, [r3, #1]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	9000      	str	r0, [sp, #0]
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f7ff f9c3 	bl	8009680 <USB_WritePacket>
  }

  return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3728      	adds	r7, #40	@ 0x28
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	b29b      	uxth	r3, r3
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a326:	b480      	push	{r7}
 800a328:	b089      	sub	sp, #36	@ 0x24
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
 800a32e:	460b      	mov	r3, r1
 800a330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a33a:	2300      	movs	r3, #0
 800a33c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	4413      	add	r3, r2
 800a346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	0c9b      	lsrs	r3, r3, #18
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	69fb      	ldr	r3, [r7, #28]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	0fdb      	lsrs	r3, r3, #31
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	015a      	lsls	r2, r3, #5
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4413      	add	r3, r2
 800a372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	0fdb      	lsrs	r3, r3, #31
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b20      	cmp	r3, #32
 800a38a:	d10d      	bne.n	800a3a8 <USB_HC_Halt+0x82>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10a      	bne.n	800a3a8 <USB_HC_Halt+0x82>
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d005      	beq.n	800a3a4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d002      	beq.n	800a3a4 <USB_HC_Halt+0x7e>
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d101      	bne.n	800a3a8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	e0d8      	b.n	800a55a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <USB_HC_Halt+0x8e>
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d173      	bne.n	800a49c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	0151      	lsls	r1, r2, #5
 800a3c6:	69fa      	ldr	r2, [r7, #28]
 800a3c8:	440a      	add	r2, r1
 800a3ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f003 0320 	and.w	r3, r3, #32
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d14a      	bne.n	800a476 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d133      	bne.n	800a454 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	69ba      	ldr	r2, [r7, #24]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	69fa      	ldr	r2, [r7, #28]
 800a400:	440a      	add	r2, r1
 800a402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a406:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a40a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	69fa      	ldr	r2, [r7, #28]
 800a420:	440a      	add	r2, r1
 800a422:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a426:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a42a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	3301      	adds	r3, #1
 800a430:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a438:	d82e      	bhi.n	800a498 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a44c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a450:	d0ec      	beq.n	800a42c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a452:	e081      	b.n	800a558 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a46e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a472:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a474:	e070      	b.n	800a558 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	0151      	lsls	r1, r2, #5
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	440a      	add	r2, r1
 800a48c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a490:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a494:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a496:	e05f      	b.n	800a558 <USB_HC_Halt+0x232>
            break;
 800a498:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a49a:	e05d      	b.n	800a558 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69ba      	ldr	r2, [r7, #24]
 800a4ac:	0151      	lsls	r1, r2, #5
 800a4ae:	69fa      	ldr	r2, [r7, #28]
 800a4b0:	440a      	add	r2, r1
 800a4b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d133      	bne.n	800a534 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	015a      	lsls	r2, r3, #5
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	0151      	lsls	r1, r2, #5
 800a4de:	69fa      	ldr	r2, [r7, #28]
 800a4e0:	440a      	add	r2, r1
 800a4e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	015a      	lsls	r2, r3, #5
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	0151      	lsls	r1, r2, #5
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	440a      	add	r2, r1
 800a502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a506:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a50a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	3301      	adds	r3, #1
 800a510:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a518:	d81d      	bhi.n	800a556 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	015a      	lsls	r2, r3, #5
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a52c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a530:	d0ec      	beq.n	800a50c <USB_HC_Halt+0x1e6>
 800a532:	e011      	b.n	800a558 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a54e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a552:	6013      	str	r3, [r2, #0]
 800a554:	e000      	b.n	800a558 <USB_HC_Halt+0x232>
          break;
 800a556:	bf00      	nop
    }
  }

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3724      	adds	r7, #36	@ 0x24
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
	...

0800a568 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	460b      	mov	r3, r1
 800a572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a578:	78fb      	ldrb	r3, [r7, #3]
 800a57a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a57c:	2301      	movs	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	04da      	lsls	r2, r3, #19
 800a584:	4b15      	ldr	r3, [pc, #84]	@ (800a5dc <USB_DoPing+0x74>)
 800a586:	4013      	ands	r3, r2
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a594:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a598:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a5cc:	2300      	movs	r3, #0
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	371c      	adds	r7, #28
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
 800a5da:	bf00      	nop
 800a5dc:	1ff80000 	.word	0x1ff80000

0800a5e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7fe ff86 	bl	8009506 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5fa:	2110      	movs	r1, #16
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7fe ffdf 	bl	80095c0 <USB_FlushTxFifo>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7ff f809 	bl	8009624 <USB_FlushRxFifo>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a61c:	2300      	movs	r3, #0
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e01f      	b.n	800a662 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a638:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a640:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a648:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	4413      	add	r3, r2
 800a652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a656:	461a      	mov	r2, r3
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	3301      	adds	r3, #1
 800a660:	61bb      	str	r3, [r7, #24]
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	2b0f      	cmp	r3, #15
 800a666:	d9dc      	bls.n	800a622 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a668:	2300      	movs	r3, #0
 800a66a:	61bb      	str	r3, [r7, #24]
 800a66c:	e034      	b.n	800a6d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	4413      	add	r3, r2
 800a676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a684:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a68c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a694:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6b4:	d80c      	bhi.n	800a6d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6cc:	d0ec      	beq.n	800a6a8 <USB_StopHost+0xc8>
 800a6ce:	e000      	b.n	800a6d2 <USB_StopHost+0xf2>
        break;
 800a6d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	2b0f      	cmp	r3, #15
 800a6dc:	d9c7      	bls.n	800a66e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7fe fef5 	bl	80094e4 <USB_EnableGlobalInt>

  return ret;
 800a6fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3720      	adds	r7, #32
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b089      	sub	sp, #36	@ 0x24
 800a708:	af04      	add	r7, sp, #16
 800a70a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a70c:	2301      	movs	r3, #1
 800a70e:	2202      	movs	r2, #2
 800a710:	2102      	movs	r1, #2
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fcb7 	bl	800b086 <USBH_FindInterface>
 800a718:	4603      	mov	r3, r0
 800a71a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	2bff      	cmp	r3, #255	@ 0xff
 800a720:	d002      	beq.n	800a728 <USBH_CDC_InterfaceInit+0x24>
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d901      	bls.n	800a72c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a728:	2302      	movs	r3, #2
 800a72a:	e13d      	b.n	800a9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fc8c 	bl	800b04e <USBH_SelectInterface>
 800a736:	4603      	mov	r3, r0
 800a738:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a740:	2302      	movs	r3, #2
 800a742:	e131      	b.n	800a9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a74a:	2050      	movs	r0, #80	@ 0x50
 800a74c:	f006 ffd8 	bl	8011700 <malloc>
 800a750:	4603      	mov	r3, r0
 800a752:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a75a:	69db      	ldr	r3, [r3, #28]
 800a75c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d101      	bne.n	800a768 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a764:	2302      	movs	r3, #2
 800a766:	e11f      	b.n	800a9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a768:	2250      	movs	r2, #80	@ 0x50
 800a76a:	2100      	movs	r1, #0
 800a76c:	68b8      	ldr	r0, [r7, #8]
 800a76e:	f008 fcae 	bl	80130ce <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	211a      	movs	r1, #26
 800a778:	fb01 f303 	mul.w	r3, r1, r3
 800a77c:	4413      	add	r3, r2
 800a77e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	b25b      	sxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	da15      	bge.n	800a7b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	211a      	movs	r1, #26
 800a790:	fb01 f303 	mul.w	r3, r1, r3
 800a794:	4413      	add	r3, r2
 800a796:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	211a      	movs	r1, #26
 800a7a6:	fb01 f303 	mul.w	r3, r1, r3
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a7b0:	881a      	ldrh	r2, [r3, #0]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	785b      	ldrb	r3, [r3, #1]
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f002 f904 	bl	800c9ca <USBH_AllocPipe>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	7819      	ldrb	r1, [r3, #0]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	7858      	ldrb	r0, [r3, #1]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	8952      	ldrh	r2, [r2, #10]
 800a7e2:	9202      	str	r2, [sp, #8]
 800a7e4:	2203      	movs	r2, #3
 800a7e6:	9201      	str	r2, [sp, #4]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	4623      	mov	r3, r4
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f002 f8bc 	bl	800c96c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f006 fef1 	bl	80115e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a802:	2300      	movs	r3, #0
 800a804:	2200      	movs	r2, #0
 800a806:	210a      	movs	r1, #10
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fc3c 	bl	800b086 <USBH_FindInterface>
 800a80e:	4603      	mov	r3, r0
 800a810:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a812:	7bfb      	ldrb	r3, [r7, #15]
 800a814:	2bff      	cmp	r3, #255	@ 0xff
 800a816:	d002      	beq.n	800a81e <USBH_CDC_InterfaceInit+0x11a>
 800a818:	7bfb      	ldrb	r3, [r7, #15]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d901      	bls.n	800a822 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a81e:	2302      	movs	r3, #2
 800a820:	e0c2      	b.n	800a9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	211a      	movs	r1, #26
 800a828:	fb01 f303 	mul.w	r3, r1, r3
 800a82c:	4413      	add	r3, r2
 800a82e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b25b      	sxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	da16      	bge.n	800a868 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	211a      	movs	r1, #26
 800a840:	fb01 f303 	mul.w	r3, r1, r3
 800a844:	4413      	add	r3, r2
 800a846:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a84a:	781a      	ldrb	r2, [r3, #0]
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	211a      	movs	r1, #26
 800a856:	fb01 f303 	mul.w	r3, r1, r3
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a860:	881a      	ldrh	r2, [r3, #0]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	835a      	strh	r2, [r3, #26]
 800a866:	e015      	b.n	800a894 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	211a      	movs	r1, #26
 800a86e:	fb01 f303 	mul.w	r3, r1, r3
 800a872:	4413      	add	r3, r2
 800a874:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a878:	781a      	ldrb	r2, [r3, #0]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a87e:	7bfb      	ldrb	r3, [r7, #15]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	211a      	movs	r1, #26
 800a884:	fb01 f303 	mul.w	r3, r1, r3
 800a888:	4413      	add	r3, r2
 800a88a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a88e:	881a      	ldrh	r2, [r3, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a894:	7bfb      	ldrb	r3, [r7, #15]
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	211a      	movs	r1, #26
 800a89a:	fb01 f303 	mul.w	r3, r1, r3
 800a89e:	4413      	add	r3, r2
 800a8a0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	b25b      	sxtb	r3, r3
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	da16      	bge.n	800a8da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	211a      	movs	r1, #26
 800a8b2:	fb01 f303 	mul.w	r3, r1, r3
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	211a      	movs	r1, #26
 800a8c8:	fb01 f303 	mul.w	r3, r1, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a8d2:	881a      	ldrh	r2, [r3, #0]
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	835a      	strh	r2, [r3, #26]
 800a8d8:	e015      	b.n	800a906 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	211a      	movs	r1, #26
 800a8e0:	fb01 f303 	mul.w	r3, r1, r3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	211a      	movs	r1, #26
 800a8f6:	fb01 f303 	mul.w	r3, r1, r3
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a900:	881a      	ldrh	r2, [r3, #0]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	7b9b      	ldrb	r3, [r3, #14]
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f002 f85c 	bl	800c9ca <USBH_AllocPipe>
 800a912:	4603      	mov	r3, r0
 800a914:	461a      	mov	r2, r3
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	7bdb      	ldrb	r3, [r3, #15]
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f002 f852 	bl	800c9ca <USBH_AllocPipe>
 800a926:	4603      	mov	r3, r0
 800a928:	461a      	mov	r2, r3
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	7b59      	ldrb	r1, [r3, #13]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	7b98      	ldrb	r0, [r3, #14]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	8b12      	ldrh	r2, [r2, #24]
 800a946:	9202      	str	r2, [sp, #8]
 800a948:	2202      	movs	r2, #2
 800a94a:	9201      	str	r2, [sp, #4]
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	4623      	mov	r3, r4
 800a950:	4602      	mov	r2, r0
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f002 f80a 	bl	800c96c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	7b19      	ldrb	r1, [r3, #12]
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	7bd8      	ldrb	r0, [r3, #15]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a96c:	68ba      	ldr	r2, [r7, #8]
 800a96e:	8b52      	ldrh	r2, [r2, #26]
 800a970:	9202      	str	r2, [sp, #8]
 800a972:	2202      	movs	r2, #2
 800a974:	9201      	str	r2, [sp, #4]
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4623      	mov	r3, r4
 800a97a:	4602      	mov	r2, r0
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 fff5 	bl	800c96c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	7b5b      	ldrb	r3, [r3, #13]
 800a98e:	2200      	movs	r2, #0
 800a990:	4619      	mov	r1, r3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f006 fe26 	bl	80115e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	7b1b      	ldrb	r3, [r3, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f006 fe1f 	bl	80115e4 <USBH_LL_SetToggle>

  return USBH_OK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd90      	pop	{r4, r7, pc}

0800a9b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9be:	69db      	ldr	r3, [r3, #28]
 800a9c0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00e      	beq.n	800a9e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f001 ffea 	bl	800c9aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f002 f815 	bl	800ca0c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	7b1b      	ldrb	r3, [r3, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00e      	beq.n	800aa0e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	7b1b      	ldrb	r3, [r3, #12]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f001 ffd7 	bl	800c9aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	7b1b      	ldrb	r3, [r3, #12]
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f002 f802 	bl	800ca0c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	7b5b      	ldrb	r3, [r3, #13]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00e      	beq.n	800aa34 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	7b5b      	ldrb	r3, [r3, #13]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 ffc4 	bl	800c9aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	7b5b      	ldrb	r3, [r3, #13]
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f001 ffef 	bl	800ca0c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f006 fe61 	bl	8011710 <free>
    phost->pActiveClass->pData = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa54:	2200      	movs	r2, #0
 800aa56:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	3340      	adds	r3, #64	@ 0x40
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f8b1 	bl	800abe2 <GetLineCoding>
 800aa80:	4603      	mov	r3, r0
 800aa82:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aa84:	7afb      	ldrb	r3, [r7, #11]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d105      	bne.n	800aa96 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aa90:	2102      	movs	r1, #2
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aa96:	7afb      	ldrb	r3, [r7, #11]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aac0:	2b04      	cmp	r3, #4
 800aac2:	d877      	bhi.n	800abb4 <USBH_CDC_Process+0x114>
 800aac4:	a201      	add	r2, pc, #4	@ (adr r2, 800aacc <USBH_CDC_Process+0x2c>)
 800aac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaca:	bf00      	nop
 800aacc:	0800aae1 	.word	0x0800aae1
 800aad0:	0800aae7 	.word	0x0800aae7
 800aad4:	0800ab17 	.word	0x0800ab17
 800aad8:	0800ab8b 	.word	0x0800ab8b
 800aadc:	0800ab99 	.word	0x0800ab99
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]
      break;
 800aae4:	e06d      	b.n	800abc2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f897 	bl	800ac20 <SetLineCoding>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d104      	bne.n	800ab06 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2202      	movs	r2, #2
 800ab00:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab04:	e058      	b.n	800abb8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d055      	beq.n	800abb8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2204      	movs	r2, #4
 800ab10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ab14:	e050      	b.n	800abb8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	3340      	adds	r3, #64	@ 0x40
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f860 	bl	800abe2 <GetLineCoding>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d126      	bne.n	800ab7a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab3e:	791b      	ldrb	r3, [r3, #4]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d13b      	bne.n	800abbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab4e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d133      	bne.n	800abbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab5e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d12b      	bne.n	800abbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab6c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d124      	bne.n	800abbc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f96a 	bl	800ae4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab78:	e020      	b.n	800abbc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ab7a:	7bbb      	ldrb	r3, [r7, #14]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d01d      	beq.n	800abbc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2204      	movs	r2, #4
 800ab84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ab88:	e018      	b.n	800abbc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 f867 	bl	800ac5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 f8e6 	bl	800ad62 <CDC_ProcessReception>
      break;
 800ab96:	e014      	b.n	800abc2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ab98:	2100      	movs	r1, #0
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f001 f8f8 	bl	800bd90 <USBH_ClrFeature>
 800aba0:	4603      	mov	r3, r0
 800aba2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10a      	bne.n	800abc0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2200      	movs	r2, #0
 800abae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800abb2:	e005      	b.n	800abc0 <USBH_CDC_Process+0x120>

    default:
      break;
 800abb4:	bf00      	nop
 800abb6:	e004      	b.n	800abc2 <USBH_CDC_Process+0x122>
      break;
 800abb8:	bf00      	nop
 800abba:	e002      	b.n	800abc2 <USBH_CDC_Process+0x122>
      break;
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <USBH_CDC_Process+0x122>
      break;
 800abc0:	bf00      	nop

  }

  return status;
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b082      	sub	sp, #8
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	22a1      	movs	r2, #161	@ 0xa1
 800abf0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2221      	movs	r2, #33	@ 0x21
 800abf6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2207      	movs	r2, #7
 800ac08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2207      	movs	r2, #7
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f001 fbf1 	bl	800c3f8 <USBH_CtlReq>
 800ac16:	4603      	mov	r3, r0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2221      	movs	r2, #33	@ 0x21
 800ac2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2220      	movs	r2, #32
 800ac34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2207      	movs	r2, #7
 800ac46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2207      	movs	r2, #7
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 fbd2 	bl	800c3f8 <USBH_CtlReq>
 800ac54:	4603      	mov	r3, r0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af02      	add	r7, sp, #8
 800ac64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d002      	beq.n	800ac84 <CDC_ProcessTransmission+0x26>
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d023      	beq.n	800acca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ac82:	e06a      	b.n	800ad5a <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	8b12      	ldrh	r2, [r2, #24]
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d90b      	bls.n	800aca8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	69d9      	ldr	r1, [r3, #28]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	8b1a      	ldrh	r2, [r3, #24]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7b5b      	ldrb	r3, [r3, #13]
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	9000      	str	r0, [sp, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f001 fe20 	bl	800c8e6 <USBH_BulkSendData>
 800aca6:	e00b      	b.n	800acc0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	7b5b      	ldrb	r3, [r3, #13]
 800acb6:	2001      	movs	r0, #1
 800acb8:	9000      	str	r0, [sp, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f001 fe13 	bl	800c8e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800acc8:	e047      	b.n	800ad5a <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	7b5b      	ldrb	r3, [r3, #13]
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f006 fc5d 	bl	8011590 <USBH_LL_GetURBState>
 800acd6:	4603      	mov	r3, r0
 800acd8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800acda:	7afb      	ldrb	r3, [r7, #11]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d12e      	bne.n	800ad3e <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	8b12      	ldrh	r2, [r2, #24]
 800ace8:	4293      	cmp	r3, r2
 800acea:	d90e      	bls.n	800ad0a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	8b12      	ldrh	r2, [r2, #24]
 800acf4:	1a9a      	subs	r2, r3, r2
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	8b12      	ldrh	r2, [r2, #24]
 800ad02:	441a      	add	r2, r3
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	61da      	str	r2, [r3, #28]
 800ad08:	e002      	b.n	800ad10 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800ad20:	e006      	b.n	800ad30 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f87a 	bl	800ae24 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ad30:	2300      	movs	r3, #0
 800ad32:	2200      	movs	r2, #0
 800ad34:	2104      	movs	r1, #4
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 feb6 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800ad3c:	e00c      	b.n	800ad58 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d109      	bne.n	800ad58 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2104      	movs	r1, #4
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fea8 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800ad58:	bf00      	nop
  }
}
 800ad5a:	bf00      	nop
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b086      	sub	sp, #24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d002      	beq.n	800ad88 <CDC_ProcessReception+0x26>
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d00e      	beq.n	800ada4 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800ad86:	e049      	b.n	800ae1c <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	6a19      	ldr	r1, [r3, #32]
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	8b5a      	ldrh	r2, [r3, #26]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	7b1b      	ldrb	r3, [r3, #12]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 fdcb 	bl	800c930 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	2204      	movs	r2, #4
 800ad9e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ada2:	e03b      	b.n	800ae1c <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	7b1b      	ldrb	r3, [r3, #12]
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f006 fbf0 	bl	8011590 <USBH_LL_GetURBState>
 800adb0:	4603      	mov	r3, r0
 800adb2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800adb4:	7cfb      	ldrb	r3, [r7, #19]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d12f      	bne.n	800ae1a <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	7b1b      	ldrb	r3, [r3, #12]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f006 fb53 	bl	801146c <USBH_LL_GetLastXferSize>
 800adc6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	429a      	cmp	r2, r3
 800add0:	d016      	beq.n	800ae00 <CDC_ProcessReception+0x9e>
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	8b5b      	ldrh	r3, [r3, #26]
 800add6:	461a      	mov	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	4293      	cmp	r3, r2
 800addc:	d110      	bne.n	800ae00 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	1ad2      	subs	r2, r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	6a1a      	ldr	r2, [r3, #32]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	441a      	add	r2, r3
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2203      	movs	r2, #3
 800adfa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800adfe:	e006      	b.n	800ae0e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f815 	bl	800ae38 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2200      	movs	r2, #0
 800ae12:	2104      	movs	r1, #4
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fe47 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800ae1a:	bf00      	nop
  }
}
 800ae1c:	bf00      	nop
 800ae1e:	3718      	adds	r7, #24
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae40:	bf00      	nop
 800ae42:	370c      	adds	r7, #12
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ae74:	2302      	movs	r3, #2
 800ae76:	e044      	b.n	800af02 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	79fa      	ldrb	r2, [r7, #7]
 800ae7c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f000 f841 	bl	800af18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d003      	beq.n	800aec4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800aec4:	2200      	movs	r2, #0
 800aec6:	2104      	movs	r1, #4
 800aec8:	2010      	movs	r0, #16
 800aeca:	f001 ff5a 	bl	800cd82 <osMessageQueueNew>
 800aece:	4602      	mov	r2, r0
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800aed6:	4b0d      	ldr	r3, [pc, #52]	@ (800af0c <USBH_Init+0xac>)
 800aed8:	4a0d      	ldr	r2, [pc, #52]	@ (800af10 <USBH_Init+0xb0>)
 800aeda:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800aedc:	4b0b      	ldr	r3, [pc, #44]	@ (800af0c <USBH_Init+0xac>)
 800aede:	2280      	movs	r2, #128	@ 0x80
 800aee0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800aee2:	4b0a      	ldr	r3, [pc, #40]	@ (800af0c <USBH_Init+0xac>)
 800aee4:	2218      	movs	r2, #24
 800aee6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800aee8:	4a08      	ldr	r2, [pc, #32]	@ (800af0c <USBH_Init+0xac>)
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	4809      	ldr	r0, [pc, #36]	@ (800af14 <USBH_Init+0xb4>)
 800aeee:	f001 fe9b 	bl	800cc28 <osThreadNew>
 800aef2:	4602      	mov	r2, r0
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f006 fa02 	bl	8011304 <USBH_LL_Init>

  return USBH_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20002710 	.word	0x20002710
 800af10:	0801658c 	.word	0x0801658c
 800af14:	0800baf1 	.word	0x0800baf1

0800af18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	e009      	b.n	800af3a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	33e0      	adds	r3, #224	@ 0xe0
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	2200      	movs	r2, #0
 800af32:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	3301      	adds	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b0f      	cmp	r3, #15
 800af3e:	d9f2      	bls.n	800af26 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
 800af44:	e009      	b.n	800af5a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af50:	2200      	movs	r2, #0
 800af52:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	3301      	adds	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af60:	d3f1      	bcc.n	800af46 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2201      	movs	r2, #1
 800af80:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2240      	movs	r2, #64	@ 0x40
 800af86:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	331c      	adds	r3, #28
 800afb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afb6:	2100      	movs	r1, #0
 800afb8:	4618      	mov	r0, r3
 800afba:	f008 f888 	bl	80130ce <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800afc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afc8:	2100      	movs	r1, #0
 800afca:	4618      	mov	r0, r3
 800afcc:	f008 f87f 	bl	80130ce <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800afd6:	2212      	movs	r2, #18
 800afd8:	2100      	movs	r1, #0
 800afda:	4618      	mov	r0, r3
 800afdc:	f008 f877 	bl	80130ce <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800afe6:	223e      	movs	r2, #62	@ 0x3e
 800afe8:	2100      	movs	r1, #0
 800afea:	4618      	mov	r0, r3
 800afec:	f008 f86f 	bl	80130ce <memset>

  return USBH_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3710      	adds	r7, #16
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800affa:	b480      	push	{r7}
 800affc:	b085      	sub	sp, #20
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d016      	beq.n	800b03c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10e      	bne.n	800b036 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b01e:	1c59      	adds	r1, r3, #1
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	33de      	adds	r3, #222	@ 0xde
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	73fb      	strb	r3, [r7, #15]
 800b034:	e004      	b.n	800b040 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b036:	2302      	movs	r3, #2
 800b038:	73fb      	strb	r3, [r7, #15]
 800b03a:	e001      	b.n	800b040 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b03c:	2302      	movs	r3, #2
 800b03e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b04e:	b480      	push	{r7}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	460b      	mov	r3, r1
 800b058:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b064:	78fa      	ldrb	r2, [r7, #3]
 800b066:	429a      	cmp	r2, r3
 800b068:	d204      	bcs.n	800b074 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	78fa      	ldrb	r2, [r7, #3]
 800b06e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b072:	e001      	b.n	800b078 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b074:	2302      	movs	r3, #2
 800b076:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b078:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b086:	b480      	push	{r7}
 800b088:	b087      	sub	sp, #28
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	4608      	mov	r0, r1
 800b090:	4611      	mov	r1, r2
 800b092:	461a      	mov	r2, r3
 800b094:	4603      	mov	r3, r0
 800b096:	70fb      	strb	r3, [r7, #3]
 800b098:	460b      	mov	r3, r1
 800b09a:	70bb      	strb	r3, [r7, #2]
 800b09c:	4613      	mov	r3, r2
 800b09e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b0ae:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0b0:	e025      	b.n	800b0fe <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	221a      	movs	r2, #26
 800b0b6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	3302      	adds	r3, #2
 800b0c2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	795b      	ldrb	r3, [r3, #5]
 800b0c8:	78fa      	ldrb	r2, [r7, #3]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d002      	beq.n	800b0d4 <USBH_FindInterface+0x4e>
 800b0ce:	78fb      	ldrb	r3, [r7, #3]
 800b0d0:	2bff      	cmp	r3, #255	@ 0xff
 800b0d2:	d111      	bne.n	800b0f8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0d8:	78ba      	ldrb	r2, [r7, #2]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d002      	beq.n	800b0e4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0de:	78bb      	ldrb	r3, [r7, #2]
 800b0e0:	2bff      	cmp	r3, #255	@ 0xff
 800b0e2:	d109      	bne.n	800b0f8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0e8:	787a      	ldrb	r2, [r7, #1]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d002      	beq.n	800b0f4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0ee:	787b      	ldrb	r3, [r7, #1]
 800b0f0:	2bff      	cmp	r3, #255	@ 0xff
 800b0f2:	d101      	bne.n	800b0f8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	e006      	b.n	800b106 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d9d6      	bls.n	800b0b2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b104:	23ff      	movs	r3, #255	@ 0xff
}
 800b106:	4618      	mov	r0, r3
 800b108:	371c      	adds	r7, #28
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f006 f92e 	bl	801137c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b120:	2101      	movs	r1, #1
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f006 fa47 	bl	80115b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af04      	add	r7, sp, #16
 800b13a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b13c:	2302      	movs	r3, #2
 800b13e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b140:	2300      	movs	r3, #0
 800b142:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d102      	bne.n	800b156 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2203      	movs	r2, #3
 800b154:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b0b      	cmp	r3, #11
 800b15e:	f200 81f5 	bhi.w	800b54c <USBH_Process+0x418>
 800b162:	a201      	add	r2, pc, #4	@ (adr r2, 800b168 <USBH_Process+0x34>)
 800b164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b168:	0800b199 	.word	0x0800b199
 800b16c:	0800b1d7 	.word	0x0800b1d7
 800b170:	0800b24d 	.word	0x0800b24d
 800b174:	0800b4db 	.word	0x0800b4db
 800b178:	0800b54d 	.word	0x0800b54d
 800b17c:	0800b2f9 	.word	0x0800b2f9
 800b180:	0800b475 	.word	0x0800b475
 800b184:	0800b33b 	.word	0x0800b33b
 800b188:	0800b367 	.word	0x0800b367
 800b18c:	0800b38f 	.word	0x0800b38f
 800b190:	0800b3dd 	.word	0x0800b3dd
 800b194:	0800b4c3 	.word	0x0800b4c3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f000 81d5 	beq.w	800b550 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b1ac:	20c8      	movs	r0, #200	@ 0xc8
 800b1ae:	f006 fa4c 	bl	801164a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f006 f93f 	bl	8011436 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fc6a 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b1d4:	e1bc      	b.n	800b550 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d107      	bne.n	800b1f2 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2202      	movs	r2, #2
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	e025      	b.n	800b23e <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b1f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b1fc:	d914      	bls.n	800b228 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b204:	3301      	adds	r3, #1
 800b206:	b2da      	uxtb	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b214:	2b03      	cmp	r3, #3
 800b216:	d903      	bls.n	800b220 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	220d      	movs	r2, #13
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	e00e      	b.n	800b23e <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	701a      	strb	r2, [r3, #0]
 800b226:	e00a      	b.n	800b23e <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b22e:	f103 020a 	add.w	r2, r3, #10
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b238:	200a      	movs	r0, #10
 800b23a:	f006 fa06 	bl	801164a <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b23e:	2300      	movs	r3, #0
 800b240:	2200      	movs	r2, #0
 800b242:	2101      	movs	r1, #1
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fc2f 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b24a:	e188      	b.n	800b55e <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d005      	beq.n	800b262 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b25c:	2104      	movs	r1, #4
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b262:	2064      	movs	r0, #100	@ 0x64
 800b264:	f006 f9f1 	bl	801164a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f006 f8bd 	bl	80113e8 <USBH_LL_GetSpeed>
 800b26e:	4603      	mov	r3, r0
 800b270:	461a      	mov	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2205      	movs	r2, #5
 800b27c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b27e:	2100      	movs	r1, #0
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 fba2 	bl	800c9ca <USBH_AllocPipe>
 800b286:	4603      	mov	r3, r0
 800b288:	461a      	mov	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b28e:	2180      	movs	r1, #128	@ 0x80
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f001 fb9a 	bl	800c9ca <USBH_AllocPipe>
 800b296:	4603      	mov	r3, r0
 800b298:	461a      	mov	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7919      	ldrb	r1, [r3, #4]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2b2:	9202      	str	r2, [sp, #8]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	9201      	str	r2, [sp, #4]
 800b2b8:	9300      	str	r3, [sp, #0]
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2280      	movs	r2, #128	@ 0x80
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 fb54 	bl	800c96c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7959      	ldrb	r1, [r3, #5]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2d8:	9202      	str	r2, [sp, #8]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	9201      	str	r2, [sp, #4]
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f001 fb41 	bl	800c96c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fbd9 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b2f6:	e132      	b.n	800b55e <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f935 	bl	800b568 <USBH_HandleEnum>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	b2db      	uxtb	r3, r3
 800b306:	2b00      	cmp	r3, #0
 800b308:	f040 8124 	bne.w	800b554 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d103      	bne.n	800b326 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2208      	movs	r2, #8
 800b322:	701a      	strb	r2, [r3, #0]
 800b324:	e002      	b.n	800b32c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2207      	movs	r2, #7
 800b32a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b32c:	2300      	movs	r3, #0
 800b32e:	2200      	movs	r2, #0
 800b330:	2105      	movs	r1, #5
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fbb8 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b338:	e10c      	b.n	800b554 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 8109 	beq.w	800b558 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b34c:	2101      	movs	r1, #1
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2208      	movs	r2, #8
 800b356:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b358:	2300      	movs	r3, #0
 800b35a:	2200      	movs	r2, #0
 800b35c:	2105      	movs	r1, #5
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fba2 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800b364:	e0f8      	b.n	800b558 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fcc7 	bl	800bd02 <USBH_SetCfg>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d102      	bne.n	800b380 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2209      	movs	r2, #9
 800b37e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b380:	2300      	movs	r3, #0
 800b382:	2200      	movs	r2, #0
 800b384:	2101      	movs	r1, #1
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fb8e 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b38c:	e0e7      	b.n	800b55e <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b394:	f003 0320 	and.w	r3, r3, #32
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d015      	beq.n	800b3c8 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b39c:	2101      	movs	r1, #1
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fcd2 	bl	800bd48 <USBH_SetFeature>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d103      	bne.n	800b3b8 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	701a      	strb	r2, [r3, #0]
 800b3b6:	e00a      	b.n	800b3ce <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b03      	cmp	r3, #3
 800b3be:	d106      	bne.n	800b3ce <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e002      	b.n	800b3ce <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	220a      	movs	r2, #10
 800b3cc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 fb67 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b3da:	e0c0      	b.n	800b55e <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d03f      	beq.n	800b466 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	73fb      	strb	r3, [r7, #15]
 800b3f2:	e016      	b.n	800b422 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b3f4:	7bfa      	ldrb	r2, [r7, #15]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	32de      	adds	r2, #222	@ 0xde
 800b3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3fe:	791a      	ldrb	r2, [r3, #4]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b406:	429a      	cmp	r2, r3
 800b408:	d108      	bne.n	800b41c <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b40a:	7bfa      	ldrb	r2, [r7, #15]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	32de      	adds	r2, #222	@ 0xde
 800b410:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b41a:	e005      	b.n	800b428 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
 800b41e:	3301      	adds	r3, #1
 800b420:	73fb      	strb	r3, [r7, #15]
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d0e5      	beq.n	800b3f4 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d016      	beq.n	800b460 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d109      	bne.n	800b458 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2206      	movs	r2, #6
 800b448:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b450:	2103      	movs	r1, #3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	4798      	blx	r3
 800b456:	e006      	b.n	800b466 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	220d      	movs	r2, #13
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	e002      	b.n	800b466 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	220d      	movs	r2, #13
 800b464:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b466:	2300      	movs	r3, #0
 800b468:	2200      	movs	r2, #0
 800b46a:	2105      	movs	r1, #5
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 fb1b 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b472:	e074      	b.n	800b55e <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d017      	beq.n	800b4ae <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	4798      	blx	r3
 800b48a:	4603      	mov	r3, r0
 800b48c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b48e:	7bbb      	ldrb	r3, [r7, #14]
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d103      	bne.n	800b49e <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	220b      	movs	r2, #11
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	e00a      	b.n	800b4b4 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d106      	bne.n	800b4b4 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	220d      	movs	r2, #13
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	e002      	b.n	800b4b4 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	220d      	movs	r2, #13
 800b4b2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2105      	movs	r1, #5
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 faf4 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b4c0:	e04d      	b.n	800b55e <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d047      	beq.n	800b55c <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4d2:	695b      	ldr	r3, [r3, #20]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	4798      	blx	r3
      }
      break;
 800b4d8:	e040      	b.n	800b55c <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff fd18 	bl	800af18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d009      	beq.n	800b506 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d005      	beq.n	800b51c <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b516:	2105      	movs	r1, #5
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b522:	b2db      	uxtb	r3, r3
 800b524:	2b01      	cmp	r3, #1
 800b526:	d107      	bne.n	800b538 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fdee 	bl	800b112 <USBH_Start>
 800b536:	e002      	b.n	800b53e <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f005 ff1f 	bl	801137c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b53e:	2300      	movs	r3, #0
 800b540:	2200      	movs	r2, #0
 800b542:	2101      	movs	r1, #1
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 faaf 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b54a:	e008      	b.n	800b55e <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800b54c:	bf00      	nop
 800b54e:	e006      	b.n	800b55e <USBH_Process+0x42a>
      break;
 800b550:	bf00      	nop
 800b552:	e004      	b.n	800b55e <USBH_Process+0x42a>
      break;
 800b554:	bf00      	nop
 800b556:	e002      	b.n	800b55e <USBH_Process+0x42a>
    break;
 800b558:	bf00      	nop
 800b55a:	e000      	b.n	800b55e <USBH_Process+0x42a>
      break;
 800b55c:	bf00      	nop
  }
  return USBH_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af04      	add	r7, sp, #16
 800b56e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b570:	2301      	movs	r3, #1
 800b572:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b574:	2301      	movs	r3, #1
 800b576:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	785b      	ldrb	r3, [r3, #1]
 800b57c:	2b07      	cmp	r3, #7
 800b57e:	f200 81db 	bhi.w	800b938 <USBH_HandleEnum+0x3d0>
 800b582:	a201      	add	r2, pc, #4	@ (adr r2, 800b588 <USBH_HandleEnum+0x20>)
 800b584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b588:	0800b5a9 	.word	0x0800b5a9
 800b58c:	0800b663 	.word	0x0800b663
 800b590:	0800b6cd 	.word	0x0800b6cd
 800b594:	0800b757 	.word	0x0800b757
 800b598:	0800b7c1 	.word	0x0800b7c1
 800b59c:	0800b831 	.word	0x0800b831
 800b5a0:	0800b89b 	.word	0x0800b89b
 800b5a4:	0800b8f9 	.word	0x0800b8f9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b5a8:	2108      	movs	r1, #8
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fac6 	bl	800bb3c <USBH_Get_DevDesc>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5b4:	7bbb      	ldrb	r3, [r7, #14]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d12e      	bne.n	800b618 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	7919      	ldrb	r1, [r3, #4]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5de:	9202      	str	r2, [sp, #8]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	9201      	str	r2, [sp, #4]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	2280      	movs	r2, #128	@ 0x80
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f9be 	bl	800c96c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	7959      	ldrb	r1, [r3, #5]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b604:	9202      	str	r2, [sp, #8]
 800b606:	2200      	movs	r2, #0
 800b608:	9201      	str	r2, [sp, #4]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4603      	mov	r3, r0
 800b60e:	2200      	movs	r2, #0
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f001 f9ab 	bl	800c96c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b616:	e191      	b.n	800b93c <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b618:	7bbb      	ldrb	r3, [r7, #14]
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	f040 818e 	bne.w	800b93c <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b626:	3301      	adds	r3, #1
 800b628:	b2da      	uxtb	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b636:	2b03      	cmp	r3, #3
 800b638:	d903      	bls.n	800b642 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	220d      	movs	r2, #13
 800b63e:	701a      	strb	r2, [r3, #0]
      break;
 800b640:	e17c      	b.n	800b93c <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	795b      	ldrb	r3, [r3, #5]
 800b646:	4619      	mov	r1, r3
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 f9df 	bl	800ca0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	791b      	ldrb	r3, [r3, #4]
 800b652:	4619      	mov	r1, r3
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f001 f9d9 	bl	800ca0c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	701a      	strb	r2, [r3, #0]
      break;
 800b660:	e16c      	b.n	800b93c <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b662:	2112      	movs	r1, #18
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fa69 	bl	800bb3c <USBH_Get_DevDesc>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d103      	bne.n	800b67c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b67a:	e161      	b.n	800b940 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	2b03      	cmp	r3, #3
 800b680:	f040 815e 	bne.w	800b940 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b68a:	3301      	adds	r3, #1
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d903      	bls.n	800b6a6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	220d      	movs	r2, #13
 800b6a2:	701a      	strb	r2, [r3, #0]
      break;
 800b6a4:	e14c      	b.n	800b940 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	795b      	ldrb	r3, [r3, #5]
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 f9ad 	bl	800ca0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	791b      	ldrb	r3, [r3, #4]
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f001 f9a7 	bl	800ca0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	701a      	strb	r2, [r3, #0]
      break;
 800b6ca:	e139      	b.n	800b940 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 faf3 	bl	800bcba <USBH_SetAddress>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d130      	bne.n	800b740 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b6de:	2002      	movs	r0, #2
 800b6e0:	f005 ffb3 	bl	801164a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2203      	movs	r2, #3
 800b6f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	7919      	ldrb	r1, [r3, #4]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b706:	9202      	str	r2, [sp, #8]
 800b708:	2200      	movs	r2, #0
 800b70a:	9201      	str	r2, [sp, #4]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	4603      	mov	r3, r0
 800b710:	2280      	movs	r2, #128	@ 0x80
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f001 f92a 	bl	800c96c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7959      	ldrb	r1, [r3, #5]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b72c:	9202      	str	r2, [sp, #8]
 800b72e:	2200      	movs	r2, #0
 800b730:	9201      	str	r2, [sp, #4]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	4603      	mov	r3, r0
 800b736:	2200      	movs	r2, #0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f001 f917 	bl	800c96c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b73e:	e101      	b.n	800b944 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b740:	7bbb      	ldrb	r3, [r7, #14]
 800b742:	2b03      	cmp	r3, #3
 800b744:	f040 80fe 	bne.w	800b944 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	220d      	movs	r2, #13
 800b74c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2200      	movs	r2, #0
 800b752:	705a      	strb	r2, [r3, #1]
      break;
 800b754:	e0f6      	b.n	800b944 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b756:	2109      	movs	r1, #9
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fa1b 	bl	800bb94 <USBH_Get_CfgDesc>
 800b75e:	4603      	mov	r3, r0
 800b760:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2204      	movs	r2, #4
 800b76c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b76e:	e0eb      	b.n	800b948 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b03      	cmp	r3, #3
 800b774:	f040 80e8 	bne.w	800b948 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b77e:	3301      	adds	r3, #1
 800b780:	b2da      	uxtb	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d903      	bls.n	800b79a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	220d      	movs	r2, #13
 800b796:	701a      	strb	r2, [r3, #0]
      break;
 800b798:	e0d6      	b.n	800b948 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	795b      	ldrb	r3, [r3, #5]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 f933 	bl	800ca0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 f92d 	bl	800ca0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	701a      	strb	r2, [r3, #0]
      break;
 800b7be:	e0c3      	b.n	800b948 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f9e3 	bl	800bb94 <USBH_Get_CfgDesc>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d103      	bne.n	800b7e0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2205      	movs	r2, #5
 800b7dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7de:	e0b5      	b.n	800b94c <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7e0:	7bbb      	ldrb	r3, [r7, #14]
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	f040 80b2 	bne.w	800b94c <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d903      	bls.n	800b80a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	220d      	movs	r2, #13
 800b806:	701a      	strb	r2, [r3, #0]
      break;
 800b808:	e0a0      	b.n	800b94c <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	795b      	ldrb	r3, [r3, #5]
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f001 f8fb 	bl	800ca0c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	791b      	ldrb	r3, [r3, #4]
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f001 f8f5 	bl	800ca0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	701a      	strb	r2, [r3, #0]
      break;
 800b82e:	e08d      	b.n	800b94c <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b836:	2b00      	cmp	r3, #0
 800b838:	d025      	beq.n	800b886 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b846:	23ff      	movs	r3, #255	@ 0xff
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f9cd 	bl	800bbe8 <USBH_Get_StringDesc>
 800b84e:	4603      	mov	r3, r0
 800b850:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d109      	bne.n	800b86c <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2206      	movs	r2, #6
 800b85c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b85e:	2300      	movs	r3, #0
 800b860:	2200      	movs	r2, #0
 800b862:	2105      	movs	r1, #5
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f91f 	bl	800baa8 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b86a:	e071      	b.n	800b950 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d16e      	bne.n	800b950 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2206      	movs	r2, #6
 800b876:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b878:	2300      	movs	r3, #0
 800b87a:	2200      	movs	r2, #0
 800b87c:	2105      	movs	r1, #5
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f912 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800b884:	e064      	b.n	800b950 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2206      	movs	r2, #6
 800b88a:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b88c:	2300      	movs	r3, #0
 800b88e:	2200      	movs	r2, #0
 800b890:	2105      	movs	r1, #5
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f908 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800b898:	e05a      	b.n	800b950 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d01f      	beq.n	800b8e4 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8b0:	23ff      	movs	r3, #255	@ 0xff
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f998 	bl	800bbe8 <USBH_Get_StringDesc>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d103      	bne.n	800b8ca <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2207      	movs	r2, #7
 800b8c6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b8c8:	e044      	b.n	800b954 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8ca:	7bbb      	ldrb	r3, [r7, #14]
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d141      	bne.n	800b954 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2207      	movs	r2, #7
 800b8d4:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2200      	movs	r2, #0
 800b8da:	2105      	movs	r1, #5
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f8e3 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800b8e2:	e037      	b.n	800b954 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2207      	movs	r2, #7
 800b8e8:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2105      	movs	r1, #5
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f8d9 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800b8f6:	e02d      	b.n	800b954 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d017      	beq.n	800b932 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b90e:	23ff      	movs	r3, #255	@ 0xff
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 f969 	bl	800bbe8 <USBH_Get_StringDesc>
 800b916:	4603      	mov	r3, r0
 800b918:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b920:	2300      	movs	r3, #0
 800b922:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b924:	e018      	b.n	800b958 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b03      	cmp	r3, #3
 800b92a:	d115      	bne.n	800b958 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800b92c:	2300      	movs	r3, #0
 800b92e:	73fb      	strb	r3, [r7, #15]
      break;
 800b930:	e012      	b.n	800b958 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]
      break;
 800b936:	e00f      	b.n	800b958 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800b938:	bf00      	nop
 800b93a:	e00e      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b93c:	bf00      	nop
 800b93e:	e00c      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b940:	bf00      	nop
 800b942:	e00a      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b944:	bf00      	nop
 800b946:	e008      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b948:	bf00      	nop
 800b94a:	e006      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b94c:	bf00      	nop
 800b94e:	e004      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b950:	bf00      	nop
 800b952:	e002      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b954:	bf00      	nop
 800b956:	e000      	b.n	800b95a <USBH_HandleEnum+0x3f2>
      break;
 800b958:	bf00      	nop
  }
  return Status;
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b976:	bf00      	nop
 800b978:	370c      	adds	r7, #12
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f804 	bl	800b9a6 <USBH_HandleSof>
}
 800b99e:	bf00      	nop
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	2b0b      	cmp	r3, #11
 800b9b6:	d10a      	bne.n	800b9ce <USBH_HandleSof+0x28>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d005      	beq.n	800b9ce <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	4798      	blx	r3
  }
}
 800b9ce:	bf00      	nop
 800b9d0:	3708      	adds	r7, #8
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f85b 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800b9f2:	bf00      	nop
}
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ba12:	bf00      	nop
}
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b082      	sub	sp, #8
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ba3e:	2300      	movs	r3, #0
 800ba40:	2200      	movs	r2, #0
 800ba42:	2101      	movs	r1, #1
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f82f 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f005 fc9c 	bl	80113b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	791b      	ldrb	r3, [r3, #4]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 ffc3 	bl	800ca0c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	795b      	ldrb	r3, [r3, #5]
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 ffbd 	bl	800ca0c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ba92:	2300      	movs	r3, #0
 800ba94:	2200      	movs	r2, #0
 800ba96:	2101      	movs	r1, #1
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f805 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	60f8      	str	r0, [r7, #12]
 800bab0:	607a      	str	r2, [r7, #4]
 800bab2:	603b      	str	r3, [r7, #0]
 800bab4:	460b      	mov	r3, r1
 800bab6:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800bab8:	7afa      	ldrb	r2, [r7, #11]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800bac6:	4618      	mov	r0, r3
 800bac8:	f001 fa8c 	bl	800cfe4 <osMessageQueueGetSpace>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	b2da      	uxtb	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f001 f9c0 	bl	800ce68 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800bae8:	bf00      	nop
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f001 fa0d 	bl	800cf28 <osMessageQueueGet>
 800bb0e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d1f0      	bne.n	800baf8 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff fb0c 	bl	800b134 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb1c:	e7ec      	b.n	800baf8 <USBH_Process_OS+0x8>

0800bb1e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b082      	sub	sp, #8
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800bb26:	2300      	movs	r3, #0
 800bb28:	2200      	movs	r2, #0
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff ffbb 	bl	800baa8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af02      	add	r7, sp, #8
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	460b      	mov	r3, r1
 800bb46:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bb48:	887b      	ldrh	r3, [r7, #2]
 800bb4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb4e:	d901      	bls.n	800bb54 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e01b      	b.n	800bb8c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bb5a:	887b      	ldrh	r3, [r7, #2]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	4613      	mov	r3, r2
 800bb60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb64:	2100      	movs	r1, #0
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f872 	bl	800bc50 <USBH_GetDescriptor>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bb70:	7bfb      	ldrb	r3, [r7, #15]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d109      	bne.n	800bb8a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb7c:	887a      	ldrh	r2, [r7, #2]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f929 	bl	800bdd8 <USBH_ParseDevDesc>
 800bb86:	4603      	mov	r3, r0
 800bb88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af02      	add	r7, sp, #8
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	331c      	adds	r3, #28
 800bba4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bba6:	887b      	ldrh	r3, [r7, #2]
 800bba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbac:	d901      	bls.n	800bbb2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	e016      	b.n	800bbe0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbb2:	887b      	ldrh	r3, [r7, #2]
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f846 	bl	800bc50 <USBH_GetDescriptor>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d107      	bne.n	800bbde <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bbce:	887b      	ldrh	r3, [r7, #2]
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 f9af 	bl	800bf38 <USBH_ParseCfgDesc>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b088      	sub	sp, #32
 800bbec:	af02      	add	r7, sp, #8
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	607a      	str	r2, [r7, #4]
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	72fb      	strb	r3, [r7, #11]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bbfc:	893b      	ldrh	r3, [r7, #8]
 800bbfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc02:	d802      	bhi.n	800bc0a <USBH_Get_StringDesc+0x22>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bc0a:	2303      	movs	r3, #3
 800bc0c:	e01c      	b.n	800bc48 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bc0e:	7afb      	ldrb	r3, [r7, #11]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bc16:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bc1e:	893b      	ldrh	r3, [r7, #8]
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	460b      	mov	r3, r1
 800bc24:	2100      	movs	r1, #0
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f000 f812 	bl	800bc50 <USBH_GetDescriptor>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d107      	bne.n	800bc46 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bc3c:	893a      	ldrh	r2, [r7, #8]
 800bc3e:	6879      	ldr	r1, [r7, #4]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 fb8c 	bl	800c35e <USBH_ParseStringDesc>
  }

  return status;
 800bc46:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3718      	adds	r7, #24
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	72fb      	strb	r3, [r7, #11]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	789b      	ldrb	r3, [r3, #2]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d11c      	bne.n	800bca4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc6a:	7afb      	ldrb	r3, [r7, #11]
 800bc6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2206      	movs	r2, #6
 800bc7a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	893a      	ldrh	r2, [r7, #8]
 800bc80:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc82:	893b      	ldrh	r3, [r7, #8]
 800bc84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc8c:	d104      	bne.n	800bc98 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f240 4209 	movw	r2, #1033	@ 0x409
 800bc94:	829a      	strh	r2, [r3, #20]
 800bc96:	e002      	b.n	800bc9e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8b3a      	ldrh	r2, [r7, #24]
 800bca2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bca4:	8b3b      	ldrh	r3, [r7, #24]
 800bca6:	461a      	mov	r2, r3
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 fba4 	bl	800c3f8 <USBH_CtlReq>
 800bcb0:	4603      	mov	r3, r0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	789b      	ldrb	r3, [r3, #2]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d10f      	bne.n	800bcee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2205      	movs	r2, #5
 800bcd8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bcda:	78fb      	ldrb	r3, [r7, #3]
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2200      	movs	r2, #0
 800bcec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fb80 	bl	800c3f8 <USBH_CtlReq>
 800bcf8:	4603      	mov	r3, r0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	789b      	ldrb	r3, [r3, #2]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d10e      	bne.n	800bd34 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2209      	movs	r2, #9
 800bd20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	887a      	ldrh	r2, [r7, #2]
 800bd26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd34:	2200      	movs	r2, #0
 800bd36:	2100      	movs	r1, #0
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fb5d 	bl	800c3f8 <USBH_CtlReq>
 800bd3e:	4603      	mov	r3, r0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	789b      	ldrb	r3, [r3, #2]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d10f      	bne.n	800bd7c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2203      	movs	r2, #3
 800bd66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	b29a      	uxth	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2100      	movs	r1, #0
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fb39 	bl	800c3f8 <USBH_CtlReq>
 800bd86:	4603      	mov	r3, r0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	789b      	ldrb	r3, [r3, #2]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d10f      	bne.n	800bdc4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2202      	movs	r2, #2
 800bda8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fb15 	bl	800c3f8 <USBH_CtlReq>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	4613      	mov	r3, r2
 800bde4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bdec:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e094      	b.n	800bf26 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	785a      	ldrb	r2, [r3, #1]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	3302      	adds	r3, #2
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	461a      	mov	r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	3303      	adds	r3, #3
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	021b      	lsls	r3, r3, #8
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	4313      	orrs	r3, r2
 800be20:	b29a      	uxth	r2, r3
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	791a      	ldrb	r2, [r3, #4]
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	795a      	ldrb	r2, [r3, #5]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	799a      	ldrb	r2, [r3, #6]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	79da      	ldrb	r2, [r3, #7]
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be56:	2b01      	cmp	r3, #1
 800be58:	d11b      	bne.n	800be92 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	79db      	ldrb	r3, [r3, #7]
 800be5e:	2b20      	cmp	r3, #32
 800be60:	dc0f      	bgt.n	800be82 <USBH_ParseDevDesc+0xaa>
 800be62:	2b08      	cmp	r3, #8
 800be64:	db0f      	blt.n	800be86 <USBH_ParseDevDesc+0xae>
 800be66:	3b08      	subs	r3, #8
 800be68:	4a32      	ldr	r2, [pc, #200]	@ (800bf34 <USBH_ParseDevDesc+0x15c>)
 800be6a:	fa22 f303 	lsr.w	r3, r2, r3
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	bf14      	ite	ne
 800be76:	2301      	movne	r3, #1
 800be78:	2300      	moveq	r3, #0
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d106      	bne.n	800be8e <USBH_ParseDevDesc+0xb6>
 800be80:	e001      	b.n	800be86 <USBH_ParseDevDesc+0xae>
 800be82:	2b40      	cmp	r3, #64	@ 0x40
 800be84:	d003      	beq.n	800be8e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2208      	movs	r2, #8
 800be8a:	71da      	strb	r2, [r3, #7]
        break;
 800be8c:	e000      	b.n	800be90 <USBH_ParseDevDesc+0xb8>
        break;
 800be8e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800be90:	e00e      	b.n	800beb0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d107      	bne.n	800beac <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	79db      	ldrb	r3, [r3, #7]
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d005      	beq.n	800beb0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	2208      	movs	r2, #8
 800bea8:	71da      	strb	r2, [r3, #7]
 800beaa:	e001      	b.n	800beb0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800beac:	2303      	movs	r3, #3
 800beae:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	2b08      	cmp	r3, #8
 800beb4:	d936      	bls.n	800bf24 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	3308      	adds	r3, #8
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	3309      	adds	r3, #9
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	021b      	lsls	r3, r3, #8
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	4313      	orrs	r3, r2
 800beca:	b29a      	uxth	r2, r3
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	330a      	adds	r3, #10
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	330b      	adds	r3, #11
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	021b      	lsls	r3, r3, #8
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	4313      	orrs	r3, r2
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	330c      	adds	r3, #12
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	461a      	mov	r2, r3
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	330d      	adds	r3, #13
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	021b      	lsls	r3, r3, #8
 800befa:	b29b      	uxth	r3, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	b29a      	uxth	r2, r3
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	7b9a      	ldrb	r2, [r3, #14]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	7bda      	ldrb	r2, [r3, #15]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	7c1a      	ldrb	r2, [r3, #16]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	7c5a      	ldrb	r2, [r3, #17]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	371c      	adds	r7, #28
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	01000101 	.word	0x01000101

0800bf38 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08c      	sub	sp, #48	@ 0x30
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	4613      	mov	r3, r2
 800bf44:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bf4c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d101      	bne.n	800bf6a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bf66:	2302      	movs	r3, #2
 800bf68:	e0de      	b.n	800c128 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	2b09      	cmp	r3, #9
 800bf74:	d002      	beq.n	800bf7c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf78:	2209      	movs	r2, #9
 800bf7a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	781a      	ldrb	r2, [r3, #0]
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	785a      	ldrb	r2, [r3, #1]
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3302      	adds	r3, #2
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	461a      	mov	r2, r3
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3303      	adds	r3, #3
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	021b      	lsls	r3, r3, #8
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfa6:	bf28      	it	cs
 800bfa8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	791a      	ldrb	r2, [r3, #4]
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	795a      	ldrb	r2, [r3, #5]
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	799a      	ldrb	r2, [r3, #6]
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	79da      	ldrb	r2, [r3, #7]
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	7a1a      	ldrb	r2, [r3, #8]
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfda:	88fb      	ldrh	r3, [r7, #6]
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	f240 80a1 	bls.w	800c124 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfe2:	2309      	movs	r3, #9
 800bfe4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfea:	e085      	b.n	800c0f8 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfec:	f107 0316 	add.w	r3, r7, #22
 800bff0:	4619      	mov	r1, r3
 800bff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bff4:	f000 f9e6 	bl	800c3c4 <USBH_GetNextDesc>
 800bff8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	785b      	ldrb	r3, [r3, #1]
 800bffe:	2b04      	cmp	r3, #4
 800c000:	d17a      	bne.n	800c0f8 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b09      	cmp	r3, #9
 800c008:	d002      	beq.n	800c010 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00c:	2209      	movs	r2, #9
 800c00e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c014:	221a      	movs	r2, #26
 800c016:	fb02 f303 	mul.w	r3, r2, r3
 800c01a:	3308      	adds	r3, #8
 800c01c:	6a3a      	ldr	r2, [r7, #32]
 800c01e:	4413      	add	r3, r2
 800c020:	3302      	adds	r3, #2
 800c022:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c026:	69f8      	ldr	r0, [r7, #28]
 800c028:	f000 f882 	bl	800c130 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c02c:	2300      	movs	r3, #0
 800c02e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c032:	2300      	movs	r3, #0
 800c034:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c036:	e043      	b.n	800c0c0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c038:	f107 0316 	add.w	r3, r7, #22
 800c03c:	4619      	mov	r1, r3
 800c03e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c040:	f000 f9c0 	bl	800c3c4 <USBH_GetNextDesc>
 800c044:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	785b      	ldrb	r3, [r3, #1]
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	d138      	bne.n	800c0c0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	795b      	ldrb	r3, [r3, #5]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d113      	bne.n	800c07e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d003      	beq.n	800c066 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	799b      	ldrb	r3, [r3, #6]
 800c062:	2b03      	cmp	r3, #3
 800c064:	d10b      	bne.n	800c07e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	79db      	ldrb	r3, [r3, #7]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10b      	bne.n	800c086 <USBH_ParseCfgDesc+0x14e>
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b09      	cmp	r3, #9
 800c074:	d007      	beq.n	800c086 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c078:	2209      	movs	r2, #9
 800c07a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c07c:	e003      	b.n	800c086 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	2207      	movs	r2, #7
 800c082:	701a      	strb	r2, [r3, #0]
 800c084:	e000      	b.n	800c088 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c086:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c08c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c090:	3201      	adds	r2, #1
 800c092:	00d2      	lsls	r2, r2, #3
 800c094:	211a      	movs	r1, #26
 800c096:	fb01 f303 	mul.w	r3, r1, r3
 800c09a:	4413      	add	r3, r2
 800c09c:	3308      	adds	r3, #8
 800c09e:	6a3a      	ldr	r2, [r7, #32]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c0a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0a8:	69b9      	ldr	r1, [r7, #24]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f86f 	bl	800c18e <USBH_ParseEPDesc>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c0b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d80a      	bhi.n	800c0de <USBH_ParseCfgDesc+0x1a6>
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	791b      	ldrb	r3, [r3, #4]
 800c0cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d204      	bcs.n	800c0de <USBH_ParseCfgDesc+0x1a6>
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	885a      	ldrh	r2, [r3, #2]
 800c0d8:	8afb      	ldrh	r3, [r7, #22]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d8ac      	bhi.n	800c038 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	791b      	ldrb	r3, [r3, #4]
 800c0e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d201      	bcs.n	800c0ee <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	e01c      	b.n	800c128 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800c0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d805      	bhi.n	800c10c <USBH_ParseCfgDesc+0x1d4>
 800c100:	6a3b      	ldr	r3, [r7, #32]
 800c102:	885a      	ldrh	r2, [r3, #2]
 800c104:	8afb      	ldrh	r3, [r7, #22]
 800c106:	429a      	cmp	r2, r3
 800c108:	f63f af70 	bhi.w	800bfec <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	791b      	ldrb	r3, [r3, #4]
 800c110:	2b02      	cmp	r3, #2
 800c112:	bf28      	it	cs
 800c114:	2302      	movcs	r3, #2
 800c116:	b2db      	uxtb	r3, r3
 800c118:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d201      	bcs.n	800c124 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800c120:	2303      	movs	r3, #3
 800c122:	e001      	b.n	800c128 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800c124:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3730      	adds	r7, #48	@ 0x30
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}

0800c130 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	781a      	ldrb	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	785a      	ldrb	r2, [r3, #1]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	789a      	ldrb	r2, [r3, #2]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	78da      	ldrb	r2, [r3, #3]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	791a      	ldrb	r2, [r3, #4]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	795a      	ldrb	r2, [r3, #5]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	799a      	ldrb	r2, [r3, #6]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	79da      	ldrb	r2, [r3, #7]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	7a1a      	ldrb	r2, [r3, #8]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	721a      	strb	r2, [r3, #8]
}
 800c182:	bf00      	nop
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c18e:	b480      	push	{r7}
 800c190:	b087      	sub	sp, #28
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	781a      	ldrb	r2, [r3, #0]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	785a      	ldrb	r2, [r3, #1]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	789a      	ldrb	r2, [r3, #2]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	78da      	ldrb	r2, [r3, #3]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	3305      	adds	r3, #5
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	799a      	ldrb	r2, [r3, #6]
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	889b      	ldrh	r3, [r3, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d009      	beq.n	800c1fc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1f0:	d804      	bhi.n	800c1fc <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1fa:	d901      	bls.n	800c200 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c206:	2b00      	cmp	r3, #0
 800c208:	d136      	bne.n	800c278 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	78db      	ldrb	r3, [r3, #3]
 800c20e:	f003 0303 	and.w	r3, r3, #3
 800c212:	2b02      	cmp	r3, #2
 800c214:	d108      	bne.n	800c228 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	889b      	ldrh	r3, [r3, #4]
 800c21a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c21e:	f240 8097 	bls.w	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c222:	2303      	movs	r3, #3
 800c224:	75fb      	strb	r3, [r7, #23]
 800c226:	e093      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	78db      	ldrb	r3, [r3, #3]
 800c22c:	f003 0303 	and.w	r3, r3, #3
 800c230:	2b00      	cmp	r3, #0
 800c232:	d107      	bne.n	800c244 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	889b      	ldrh	r3, [r3, #4]
 800c238:	2b40      	cmp	r3, #64	@ 0x40
 800c23a:	f240 8089 	bls.w	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c23e:	2303      	movs	r3, #3
 800c240:	75fb      	strb	r3, [r7, #23]
 800c242:	e085      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	78db      	ldrb	r3, [r3, #3]
 800c248:	f003 0303 	and.w	r3, r3, #3
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d005      	beq.n	800c25c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	78db      	ldrb	r3, [r3, #3]
 800c254:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c258:	2b03      	cmp	r3, #3
 800c25a:	d10a      	bne.n	800c272 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	799b      	ldrb	r3, [r3, #6]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d003      	beq.n	800c26c <USBH_ParseEPDesc+0xde>
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	799b      	ldrb	r3, [r3, #6]
 800c268:	2b10      	cmp	r3, #16
 800c26a:	d970      	bls.n	800c34e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c26c:	2303      	movs	r3, #3
 800c26e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c270:	e06d      	b.n	800c34e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c272:	2303      	movs	r3, #3
 800c274:	75fb      	strb	r3, [r7, #23]
 800c276:	e06b      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d13c      	bne.n	800c2fc <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	78db      	ldrb	r3, [r3, #3]
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	2b02      	cmp	r3, #2
 800c28c:	d005      	beq.n	800c29a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	78db      	ldrb	r3, [r3, #3]
 800c292:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	889b      	ldrh	r3, [r3, #4]
 800c29e:	2b40      	cmp	r3, #64	@ 0x40
 800c2a0:	d956      	bls.n	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2a2:	2303      	movs	r3, #3
 800c2a4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c2a6:	e053      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	78db      	ldrb	r3, [r3, #3]
 800c2ac:	f003 0303 	and.w	r3, r3, #3
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d10e      	bne.n	800c2d2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	799b      	ldrb	r3, [r3, #6]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d007      	beq.n	800c2cc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c2c0:	2b10      	cmp	r3, #16
 800c2c2:	d803      	bhi.n	800c2cc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c2c8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ca:	d941      	bls.n	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	75fb      	strb	r3, [r7, #23]
 800c2d0:	e03e      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	78db      	ldrb	r3, [r3, #3]
 800c2d6:	f003 0303 	and.w	r3, r3, #3
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	d10b      	bne.n	800c2f6 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	799b      	ldrb	r3, [r3, #6]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d004      	beq.n	800c2f0 <USBH_ParseEPDesc+0x162>
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	889b      	ldrh	r3, [r3, #4]
 800c2ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2ee:	d32f      	bcc.n	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	75fb      	strb	r3, [r7, #23]
 800c2f4:	e02c      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	75fb      	strb	r3, [r7, #23]
 800c2fa:	e029      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c302:	2b02      	cmp	r3, #2
 800c304:	d120      	bne.n	800c348 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	78db      	ldrb	r3, [r3, #3]
 800c30a:	f003 0303 	and.w	r3, r3, #3
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d106      	bne.n	800c320 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	889b      	ldrh	r3, [r3, #4]
 800c316:	2b08      	cmp	r3, #8
 800c318:	d01a      	beq.n	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c31a:	2303      	movs	r3, #3
 800c31c:	75fb      	strb	r3, [r7, #23]
 800c31e:	e017      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	78db      	ldrb	r3, [r3, #3]
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d10a      	bne.n	800c342 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	799b      	ldrb	r3, [r3, #6]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <USBH_ParseEPDesc+0x1ae>
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	889b      	ldrh	r3, [r3, #4]
 800c338:	2b08      	cmp	r3, #8
 800c33a:	d909      	bls.n	800c350 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c33c:	2303      	movs	r3, #3
 800c33e:	75fb      	strb	r3, [r7, #23]
 800c340:	e006      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c342:	2303      	movs	r3, #3
 800c344:	75fb      	strb	r3, [r7, #23]
 800c346:	e003      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c348:	2303      	movs	r3, #3
 800c34a:	75fb      	strb	r3, [r7, #23]
 800c34c:	e000      	b.n	800c350 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c34e:	bf00      	nop
  }

  return status;
 800c350:	7dfb      	ldrb	r3, [r7, #23]
}
 800c352:	4618      	mov	r0, r3
 800c354:	371c      	adds	r7, #28
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c35e:	b480      	push	{r7}
 800c360:	b087      	sub	sp, #28
 800c362:	af00      	add	r7, sp, #0
 800c364:	60f8      	str	r0, [r7, #12]
 800c366:	60b9      	str	r1, [r7, #8]
 800c368:	4613      	mov	r3, r2
 800c36a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3301      	adds	r3, #1
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2b03      	cmp	r3, #3
 800c374:	d120      	bne.n	800c3b8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	1e9a      	subs	r2, r3, #2
 800c37c:	88fb      	ldrh	r3, [r7, #6]
 800c37e:	4293      	cmp	r3, r2
 800c380:	bf28      	it	cs
 800c382:	4613      	movcs	r3, r2
 800c384:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3302      	adds	r3, #2
 800c38a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c38c:	2300      	movs	r3, #0
 800c38e:	82fb      	strh	r3, [r7, #22]
 800c390:	e00b      	b.n	800c3aa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c392:	8afb      	ldrh	r3, [r7, #22]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	4413      	add	r3, r2
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c3a4:	8afb      	ldrh	r3, [r7, #22]
 800c3a6:	3302      	adds	r3, #2
 800c3a8:	82fb      	strh	r3, [r7, #22]
 800c3aa:	8afa      	ldrh	r2, [r7, #22]
 800c3ac:	8abb      	ldrh	r3, [r7, #20]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d3ef      	bcc.n	800c392 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
  }
}
 800c3b8:	bf00      	nop
 800c3ba:	371c      	adds	r7, #28
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr

0800c3c4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	881b      	ldrh	r3, [r3, #0]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	7812      	ldrb	r2, [r2, #0]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	4613      	mov	r3, r2
 800c404:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c406:	2301      	movs	r3, #1
 800c408:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	789b      	ldrb	r3, [r3, #2]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d002      	beq.n	800c418 <USBH_CtlReq+0x20>
 800c412:	2b02      	cmp	r3, #2
 800c414:	d015      	beq.n	800c442 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800c416:	e033      	b.n	800c480 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	88fa      	ldrh	r2, [r7, #6]
 800c422:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2202      	movs	r2, #2
 800c42e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c430:	2301      	movs	r3, #1
 800c432:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c434:	2300      	movs	r3, #0
 800c436:	2200      	movs	r2, #0
 800c438:	2103      	movs	r1, #3
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f7ff fb34 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c440:	e01e      	b.n	800c480 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f000 f822 	bl	800c48c <USBH_HandleControl>
 800c448:	4603      	mov	r3, r0
 800c44a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <USBH_CtlReq+0x60>
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	2b03      	cmp	r3, #3
 800c456:	d106      	bne.n	800c466 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2201      	movs	r2, #1
 800c45c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	761a      	strb	r2, [r3, #24]
 800c464:	e005      	b.n	800c472 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800c466:	7dfb      	ldrb	r3, [r7, #23]
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d102      	bne.n	800c472 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c472:	2300      	movs	r3, #0
 800c474:	2200      	movs	r2, #0
 800c476:	2103      	movs	r1, #3
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f7ff fb15 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c47e:	bf00      	nop
  }
  return status;
 800c480:	7dfb      	ldrb	r3, [r7, #23]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
	...

0800c48c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af02      	add	r7, sp, #8
 800c492:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c494:	2301      	movs	r3, #1
 800c496:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c498:	2300      	movs	r3, #0
 800c49a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	7e1b      	ldrb	r3, [r3, #24]
 800c4a0:	3b01      	subs	r3, #1
 800c4a2:	2b0a      	cmp	r3, #10
 800c4a4:	f200 81b2 	bhi.w	800c80c <USBH_HandleControl+0x380>
 800c4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b0 <USBH_HandleControl+0x24>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c4dd 	.word	0x0800c4dd
 800c4b4:	0800c4f7 	.word	0x0800c4f7
 800c4b8:	0800c579 	.word	0x0800c579
 800c4bc:	0800c59f 	.word	0x0800c59f
 800c4c0:	0800c5fd 	.word	0x0800c5fd
 800c4c4:	0800c627 	.word	0x0800c627
 800c4c8:	0800c6a9 	.word	0x0800c6a9
 800c4cc:	0800c6cb 	.word	0x0800c6cb
 800c4d0:	0800c72d 	.word	0x0800c72d
 800c4d4:	0800c753 	.word	0x0800c753
 800c4d8:	0800c7b5 	.word	0x0800c7b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f103 0110 	add.w	r1, r3, #16
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	795b      	ldrb	r3, [r3, #5]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f99f 	bl	800c82c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	761a      	strb	r2, [r3, #24]
      break;
 800c4f4:	e195      	b.n	800c822 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	795b      	ldrb	r3, [r3, #5]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f005 f847 	bl	8011590 <USBH_LL_GetURBState>
 800c502:	4603      	mov	r3, r0
 800c504:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d124      	bne.n	800c556 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	7c1b      	ldrb	r3, [r3, #16]
 800c510:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c514:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	8adb      	ldrh	r3, [r3, #22]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c51e:	7b7b      	ldrb	r3, [r7, #13]
 800c520:	2b80      	cmp	r3, #128	@ 0x80
 800c522:	d103      	bne.n	800c52c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2203      	movs	r2, #3
 800c528:	761a      	strb	r2, [r3, #24]
 800c52a:	e00d      	b.n	800c548 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2205      	movs	r2, #5
 800c530:	761a      	strb	r2, [r3, #24]
 800c532:	e009      	b.n	800c548 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c534:	7b7b      	ldrb	r3, [r7, #13]
 800c536:	2b80      	cmp	r3, #128	@ 0x80
 800c538:	d103      	bne.n	800c542 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2209      	movs	r2, #9
 800c53e:	761a      	strb	r2, [r3, #24]
 800c540:	e002      	b.n	800c548 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2207      	movs	r2, #7
 800c546:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c548:	2300      	movs	r3, #0
 800c54a:	2200      	movs	r2, #0
 800c54c:	2103      	movs	r1, #3
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff faaa 	bl	800baa8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c554:	e15c      	b.n	800c810 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c556:	7bbb      	ldrb	r3, [r7, #14]
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d003      	beq.n	800c564 <USBH_HandleControl+0xd8>
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	2b02      	cmp	r3, #2
 800c560:	f040 8156 	bne.w	800c810 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	220b      	movs	r2, #11
 800c568:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c56a:	2300      	movs	r3, #0
 800c56c:	2200      	movs	r2, #0
 800c56e:	2103      	movs	r1, #3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff fa99 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c576:	e14b      	b.n	800c810 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c57e:	b29a      	uxth	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6899      	ldr	r1, [r3, #8]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	899a      	ldrh	r2, [r3, #12]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	791b      	ldrb	r3, [r3, #4]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f98a 	bl	800c8aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2204      	movs	r2, #4
 800c59a:	761a      	strb	r2, [r3, #24]
      break;
 800c59c:	e141      	b.n	800c822 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	791b      	ldrb	r3, [r3, #4]
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f004 fff3 	bl	8011590 <USBH_LL_GetURBState>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c5ae:	7bbb      	ldrb	r3, [r7, #14]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d109      	bne.n	800c5c8 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2209      	movs	r2, #9
 800c5b8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	2200      	movs	r2, #0
 800c5be:	2103      	movs	r1, #3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7ff fa71 	bl	800baa8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c5c6:	e125      	b.n	800c814 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800c5c8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ca:	2b05      	cmp	r3, #5
 800c5cc:	d108      	bne.n	800c5e0 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800c5ce:	2303      	movs	r3, #3
 800c5d0:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	2103      	movs	r1, #3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff fa65 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c5de:	e119      	b.n	800c814 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800c5e0:	7bbb      	ldrb	r3, [r7, #14]
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	f040 8116 	bne.w	800c814 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	220b      	movs	r2, #11
 800c5ec:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	2103      	movs	r1, #3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff fa57 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c5fa:	e10b      	b.n	800c814 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6899      	ldr	r1, [r3, #8]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	899a      	ldrh	r2, [r3, #12]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	795b      	ldrb	r3, [r3, #5]
 800c608:	2001      	movs	r0, #1
 800c60a:	9000      	str	r0, [sp, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f927 	bl	800c860 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c618:	b29a      	uxth	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2206      	movs	r2, #6
 800c622:	761a      	strb	r2, [r3, #24]
      break;
 800c624:	e0fd      	b.n	800c822 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	795b      	ldrb	r3, [r3, #5]
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f004 ffaf 	bl	8011590 <USBH_LL_GetURBState>
 800c632:	4603      	mov	r3, r0
 800c634:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c636:	7bbb      	ldrb	r3, [r7, #14]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d109      	bne.n	800c650 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2207      	movs	r2, #7
 800c640:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c642:	2300      	movs	r3, #0
 800c644:	2200      	movs	r2, #0
 800c646:	2103      	movs	r1, #3
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff fa2d 	bl	800baa8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c64e:	e0e3      	b.n	800c818 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	2b05      	cmp	r3, #5
 800c654:	d10b      	bne.n	800c66e <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	220c      	movs	r2, #12
 800c65a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c65c:	2303      	movs	r3, #3
 800c65e:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c660:	2300      	movs	r3, #0
 800c662:	2200      	movs	r2, #0
 800c664:	2103      	movs	r1, #3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff fa1e 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c66c:	e0d4      	b.n	800c818 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c66e:	7bbb      	ldrb	r3, [r7, #14]
 800c670:	2b02      	cmp	r3, #2
 800c672:	d109      	bne.n	800c688 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2205      	movs	r2, #5
 800c678:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c67a:	2300      	movs	r3, #0
 800c67c:	2200      	movs	r2, #0
 800c67e:	2103      	movs	r1, #3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff fa11 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c686:	e0c7      	b.n	800c818 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800c688:	7bbb      	ldrb	r3, [r7, #14]
 800c68a:	2b04      	cmp	r3, #4
 800c68c:	f040 80c4 	bne.w	800c818 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	220b      	movs	r2, #11
 800c694:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c696:	2302      	movs	r3, #2
 800c698:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c69a:	2300      	movs	r3, #0
 800c69c:	2200      	movs	r2, #0
 800c69e:	2103      	movs	r1, #3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f7ff fa01 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c6a6:	e0b7      	b.n	800c818 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	791b      	ldrb	r3, [r3, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2100      	movs	r1, #0
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f8fa 	bl	800c8aa <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	761a      	strb	r2, [r3, #24]

      break;
 800c6c8:	e0ab      	b.n	800c822 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	791b      	ldrb	r3, [r3, #4]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f004 ff5d 	bl	8011590 <USBH_LL_GetURBState>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d10b      	bne.n	800c6f8 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	220d      	movs	r2, #13
 800c6e4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	2103      	movs	r1, #3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff f9d9 	bl	800baa8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c6f6:	e091      	b.n	800c81c <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800c6f8:	7bbb      	ldrb	r3, [r7, #14]
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	d109      	bne.n	800c712 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	220b      	movs	r2, #11
 800c702:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c704:	2300      	movs	r3, #0
 800c706:	2200      	movs	r2, #0
 800c708:	2103      	movs	r1, #3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff f9cc 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c710:	e084      	b.n	800c81c <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800c712:	7bbb      	ldrb	r3, [r7, #14]
 800c714:	2b05      	cmp	r3, #5
 800c716:	f040 8081 	bne.w	800c81c <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800c71a:	2303      	movs	r3, #3
 800c71c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c71e:	2300      	movs	r3, #0
 800c720:	2200      	movs	r2, #0
 800c722:	2103      	movs	r1, #3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f7ff f9bf 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c72a:	e077      	b.n	800c81c <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	795b      	ldrb	r3, [r3, #5]
 800c730:	2201      	movs	r2, #1
 800c732:	9200      	str	r2, [sp, #0]
 800c734:	2200      	movs	r2, #0
 800c736:	2100      	movs	r1, #0
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f891 	bl	800c860 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c744:	b29a      	uxth	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	220a      	movs	r2, #10
 800c74e:	761a      	strb	r2, [r3, #24]
      break;
 800c750:	e067      	b.n	800c822 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	795b      	ldrb	r3, [r3, #5]
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f004 ff19 	bl	8011590 <USBH_LL_GetURBState>
 800c75e:	4603      	mov	r3, r0
 800c760:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c762:	7bbb      	ldrb	r3, [r7, #14]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d10b      	bne.n	800c780 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	220d      	movs	r2, #13
 800c770:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c772:	2300      	movs	r3, #0
 800c774:	2200      	movs	r2, #0
 800c776:	2103      	movs	r1, #3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f7ff f995 	bl	800baa8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c77e:	e04f      	b.n	800c820 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c780:	7bbb      	ldrb	r3, [r7, #14]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d109      	bne.n	800c79a <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2209      	movs	r2, #9
 800c78a:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c78c:	2300      	movs	r3, #0
 800c78e:	2200      	movs	r2, #0
 800c790:	2103      	movs	r1, #3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff f988 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c798:	e042      	b.n	800c820 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800c79a:	7bbb      	ldrb	r3, [r7, #14]
 800c79c:	2b04      	cmp	r3, #4
 800c79e:	d13f      	bne.n	800c820 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	220b      	movs	r2, #11
 800c7a4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	2103      	movs	r1, #3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff f97b 	bl	800baa8 <USBH_OS_PutMessage>
      break;
 800c7b2:	e035      	b.n	800c820 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7e5b      	ldrb	r3, [r3, #25]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	765a      	strb	r2, [r3, #25]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7e5b      	ldrb	r3, [r3, #25]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d806      	bhi.n	800c7d6 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c7d4:	e025      	b.n	800c822 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7dc:	2106      	movs	r1, #6
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	795b      	ldrb	r3, [r3, #5]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f90c 	bl	800ca0c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	791b      	ldrb	r3, [r3, #4]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f906 	bl	800ca0c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c806:	2302      	movs	r3, #2
 800c808:	73fb      	strb	r3, [r7, #15]
      break;
 800c80a:	e00a      	b.n	800c822 <USBH_HandleControl+0x396>

    default:
      break;
 800c80c:	bf00      	nop
 800c80e:	e008      	b.n	800c822 <USBH_HandleControl+0x396>
      break;
 800c810:	bf00      	nop
 800c812:	e006      	b.n	800c822 <USBH_HandleControl+0x396>
      break;
 800c814:	bf00      	nop
 800c816:	e004      	b.n	800c822 <USBH_HandleControl+0x396>
      break;
 800c818:	bf00      	nop
 800c81a:	e002      	b.n	800c822 <USBH_HandleControl+0x396>
      break;
 800c81c:	bf00      	nop
 800c81e:	e000      	b.n	800c822 <USBH_HandleControl+0x396>
      break;
 800c820:	bf00      	nop
  }

  return status;
 800c822:	7bfb      	ldrb	r3, [r7, #15]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b088      	sub	sp, #32
 800c830:	af04      	add	r7, sp, #16
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	4613      	mov	r3, r2
 800c838:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c83a:	79f9      	ldrb	r1, [r7, #7]
 800c83c:	2300      	movs	r3, #0
 800c83e:	9303      	str	r3, [sp, #12]
 800c840:	2308      	movs	r3, #8
 800c842:	9302      	str	r3, [sp, #8]
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	9301      	str	r3, [sp, #4]
 800c848:	2300      	movs	r3, #0
 800c84a:	9300      	str	r3, [sp, #0]
 800c84c:	2300      	movs	r3, #0
 800c84e:	2200      	movs	r2, #0
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f004 fe6c 	bl	801152e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c856:	2300      	movs	r3, #0
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3710      	adds	r7, #16
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af04      	add	r7, sp, #16
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	4611      	mov	r1, r2
 800c86c:	461a      	mov	r2, r3
 800c86e:	460b      	mov	r3, r1
 800c870:	80fb      	strh	r3, [r7, #6]
 800c872:	4613      	mov	r3, r2
 800c874:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c884:	7979      	ldrb	r1, [r7, #5]
 800c886:	7e3b      	ldrb	r3, [r7, #24]
 800c888:	9303      	str	r3, [sp, #12]
 800c88a:	88fb      	ldrh	r3, [r7, #6]
 800c88c:	9302      	str	r3, [sp, #8]
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	2301      	movs	r3, #1
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	2300      	movs	r3, #0
 800c898:	2200      	movs	r2, #0
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f004 fe47 	bl	801152e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b088      	sub	sp, #32
 800c8ae:	af04      	add	r7, sp, #16
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	80fb      	strh	r3, [r7, #6]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c8c0:	7979      	ldrb	r1, [r7, #5]
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	9303      	str	r3, [sp, #12]
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	9302      	str	r3, [sp, #8]
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	9301      	str	r3, [sp, #4]
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f004 fe29 	bl	801152e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c8dc:	2300      	movs	r3, #0

}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b088      	sub	sp, #32
 800c8ea:	af04      	add	r7, sp, #16
 800c8ec:	60f8      	str	r0, [r7, #12]
 800c8ee:	60b9      	str	r1, [r7, #8]
 800c8f0:	4611      	mov	r1, r2
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	80fb      	strh	r3, [r7, #6]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c906:	2300      	movs	r3, #0
 800c908:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c90a:	7979      	ldrb	r1, [r7, #5]
 800c90c:	7e3b      	ldrb	r3, [r7, #24]
 800c90e:	9303      	str	r3, [sp, #12]
 800c910:	88fb      	ldrh	r3, [r7, #6]
 800c912:	9302      	str	r3, [sp, #8]
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	9301      	str	r3, [sp, #4]
 800c918:	2301      	movs	r3, #1
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	2302      	movs	r3, #2
 800c91e:	2200      	movs	r2, #0
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f004 fe04 	bl	801152e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3710      	adds	r7, #16
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bd80      	pop	{r7, pc}

0800c930 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af04      	add	r7, sp, #16
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4611      	mov	r1, r2
 800c93c:	461a      	mov	r2, r3
 800c93e:	460b      	mov	r3, r1
 800c940:	80fb      	strh	r3, [r7, #6]
 800c942:	4613      	mov	r3, r2
 800c944:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c946:	7979      	ldrb	r1, [r7, #5]
 800c948:	2300      	movs	r3, #0
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	88fb      	ldrh	r3, [r7, #6]
 800c94e:	9302      	str	r3, [sp, #8]
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	9301      	str	r3, [sp, #4]
 800c954:	2301      	movs	r3, #1
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	2302      	movs	r3, #2
 800c95a:	2201      	movs	r2, #1
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f004 fde6 	bl	801152e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af04      	add	r7, sp, #16
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	4608      	mov	r0, r1
 800c976:	4611      	mov	r1, r2
 800c978:	461a      	mov	r2, r3
 800c97a:	4603      	mov	r3, r0
 800c97c:	70fb      	strb	r3, [r7, #3]
 800c97e:	460b      	mov	r3, r1
 800c980:	70bb      	strb	r3, [r7, #2]
 800c982:	4613      	mov	r3, r2
 800c984:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c986:	7878      	ldrb	r0, [r7, #1]
 800c988:	78ba      	ldrb	r2, [r7, #2]
 800c98a:	78f9      	ldrb	r1, [r7, #3]
 800c98c:	8b3b      	ldrh	r3, [r7, #24]
 800c98e:	9302      	str	r3, [sp, #8]
 800c990:	7d3b      	ldrb	r3, [r7, #20]
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	7c3b      	ldrb	r3, [r7, #16]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	4603      	mov	r3, r0
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f004 fd79 	bl	8011492 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b082      	sub	sp, #8
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c9b6:	78fb      	ldrb	r3, [r7, #3]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f004 fd98 	bl	80114f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 f836 	bl	800ca48 <USBH_GetFreePipe>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c9e0:	89fb      	ldrh	r3, [r7, #14]
 800c9e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d00a      	beq.n	800ca00 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c9ea:	78fa      	ldrb	r2, [r7, #3]
 800c9ec:	89fb      	ldrh	r3, [r7, #14]
 800c9ee:	f003 030f 	and.w	r3, r3, #15
 800c9f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c9f6:	6879      	ldr	r1, [r7, #4]
 800c9f8:	33e0      	adds	r3, #224	@ 0xe0
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	440b      	add	r3, r1
 800c9fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ca00:	89fb      	ldrh	r3, [r7, #14]
 800ca02:	b2db      	uxtb	r3, r3
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	460b      	mov	r3, r1
 800ca16:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ca18:	78fb      	ldrb	r3, [r7, #3]
 800ca1a:	2b0f      	cmp	r3, #15
 800ca1c:	d80d      	bhi.n	800ca3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	33e0      	adds	r3, #224	@ 0xe0
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	4413      	add	r3, r2
 800ca28:	685a      	ldr	r2, [r3, #4]
 800ca2a:	78fb      	ldrb	r3, [r7, #3]
 800ca2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca30:	6879      	ldr	r1, [r7, #4]
 800ca32:	33e0      	adds	r3, #224	@ 0xe0
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	440b      	add	r3, r1
 800ca38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ca50:	2300      	movs	r3, #0
 800ca52:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
 800ca58:	e00f      	b.n	800ca7a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	33e0      	adds	r3, #224	@ 0xe0
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d102      	bne.n	800ca74 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	e007      	b.n	800ca84 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	3301      	adds	r3, #1
 800ca78:	73fb      	strb	r3, [r7, #15]
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
 800ca7c:	2b0f      	cmp	r3, #15
 800ca7e:	d9ec      	bls.n	800ca5a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ca80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <__NVIC_SetPriority>:
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	6039      	str	r1, [r7, #0]
 800ca9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ca9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	db0a      	blt.n	800caba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	490c      	ldr	r1, [pc, #48]	@ (800cadc <__NVIC_SetPriority+0x4c>)
 800caaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caae:	0112      	lsls	r2, r2, #4
 800cab0:	b2d2      	uxtb	r2, r2
 800cab2:	440b      	add	r3, r1
 800cab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cab8:	e00a      	b.n	800cad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	b2da      	uxtb	r2, r3
 800cabe:	4908      	ldr	r1, [pc, #32]	@ (800cae0 <__NVIC_SetPriority+0x50>)
 800cac0:	79fb      	ldrb	r3, [r7, #7]
 800cac2:	f003 030f 	and.w	r3, r3, #15
 800cac6:	3b04      	subs	r3, #4
 800cac8:	0112      	lsls	r2, r2, #4
 800caca:	b2d2      	uxtb	r2, r2
 800cacc:	440b      	add	r3, r1
 800cace:	761a      	strb	r2, [r3, #24]
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr
 800cadc:	e000e100 	.word	0xe000e100
 800cae0:	e000ed00 	.word	0xe000ed00

0800cae4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cae8:	4b05      	ldr	r3, [pc, #20]	@ (800cb00 <SysTick_Handler+0x1c>)
 800caea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800caec:	f002 ff78 	bl	800f9e0 <xTaskGetSchedulerState>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d001      	beq.n	800cafa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800caf6:	f004 f877 	bl	8010be8 <xPortSysTickHandler>
  }
}
 800cafa:	bf00      	nop
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	e000e010 	.word	0xe000e010

0800cb04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb08:	2100      	movs	r1, #0
 800cb0a:	f06f 0004 	mvn.w	r0, #4
 800cb0e:	f7ff ffbf 	bl	800ca90 <__NVIC_SetPriority>
#endif
}
 800cb12:	bf00      	nop
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb1e:	f3ef 8305 	mrs	r3, IPSR
 800cb22:	603b      	str	r3, [r7, #0]
  return(result);
 800cb24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cb2a:	f06f 0305 	mvn.w	r3, #5
 800cb2e:	607b      	str	r3, [r7, #4]
 800cb30:	e00c      	b.n	800cb4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb32:	4b0a      	ldr	r3, [pc, #40]	@ (800cb5c <osKernelInitialize+0x44>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d105      	bne.n	800cb46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb3a:	4b08      	ldr	r3, [pc, #32]	@ (800cb5c <osKernelInitialize+0x44>)
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb40:	2300      	movs	r3, #0
 800cb42:	607b      	str	r3, [r7, #4]
 800cb44:	e002      	b.n	800cb4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cb46:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb4c:	687b      	ldr	r3, [r7, #4]
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	20002734 	.word	0x20002734

0800cb60 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d005      	beq.n	800cb7e <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4a0c      	ldr	r2, [pc, #48]	@ (800cba8 <osKernelGetInfo+0x48>)
 800cb76:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	4a0b      	ldr	r2, [pc, #44]	@ (800cba8 <osKernelGetInfo+0x48>)
 800cb7c:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00c      	beq.n	800cb9e <osKernelGetInfo+0x3e>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d009      	beq.n	800cb9e <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2b11      	cmp	r3, #17
 800cb8e:	d901      	bls.n	800cb94 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800cb90:	2311      	movs	r3, #17
 800cb92:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	4905      	ldr	r1, [pc, #20]	@ (800cbac <osKernelGetInfo+0x4c>)
 800cb98:	68b8      	ldr	r0, [r7, #8]
 800cb9a:	f006 fc08 	bl	80133ae <memcpy>
  }

  return (osOK);
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	05f5f531 	.word	0x05f5f531
 800cbac:	08016598 	.word	0x08016598

0800cbb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbb6:	f3ef 8305 	mrs	r3, IPSR
 800cbba:	603b      	str	r3, [r7, #0]
  return(result);
 800cbbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <osKernelStart+0x1a>
    stat = osErrorISR;
 800cbc2:	f06f 0305 	mvn.w	r3, #5
 800cbc6:	607b      	str	r3, [r7, #4]
 800cbc8:	e010      	b.n	800cbec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbca:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf8 <osKernelStart+0x48>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d109      	bne.n	800cbe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbd2:	f7ff ff97 	bl	800cb04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbd6:	4b08      	ldr	r3, [pc, #32]	@ (800cbf8 <osKernelStart+0x48>)
 800cbd8:	2202      	movs	r2, #2
 800cbda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbdc:	f002 f888 	bl	800ecf0 <vTaskStartScheduler>
      stat = osOK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	607b      	str	r3, [r7, #4]
 800cbe4:	e002      	b.n	800cbec <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbec:	687b      	ldr	r3, [r7, #4]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20002734 	.word	0x20002734

0800cbfc <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800cbfc:	b480      	push	{r7}
 800cbfe:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800cc00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
	...

0800cc10 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800cc10:	b480      	push	{r7}
 800cc12:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800cc14:	4b03      	ldr	r3, [pc, #12]	@ (800cc24 <osKernelGetSysTimerFreq+0x14>)
 800cc16:	681b      	ldr	r3, [r3, #0]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	20000264 	.word	0x20000264

0800cc28 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08e      	sub	sp, #56	@ 0x38
 800cc2c:	af04      	add	r7, sp, #16
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc34:	2300      	movs	r3, #0
 800cc36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc38:	f3ef 8305 	mrs	r3, IPSR
 800cc3c:	617b      	str	r3, [r7, #20]
  return(result);
 800cc3e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d17e      	bne.n	800cd42 <osThreadNew+0x11a>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d07b      	beq.n	800cd42 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc4a:	2380      	movs	r3, #128	@ 0x80
 800cc4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc4e:	2318      	movs	r3, #24
 800cc50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc52:	2300      	movs	r3, #0
 800cc54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cc56:	f04f 33ff 	mov.w	r3, #4294967295
 800cc5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d045      	beq.n	800ccee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <osThreadNew+0x48>
        name = attr->name;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d008      	beq.n	800cc96 <osThreadNew+0x6e>
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	2b38      	cmp	r3, #56	@ 0x38
 800cc88:	d805      	bhi.n	800cc96 <osThreadNew+0x6e>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d001      	beq.n	800cc9a <osThreadNew+0x72>
        return (NULL);
 800cc96:	2300      	movs	r3, #0
 800cc98:	e054      	b.n	800cd44 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d003      	beq.n	800ccaa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	089b      	lsrs	r3, r3, #2
 800cca8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00e      	beq.n	800ccd0 <osThreadNew+0xa8>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	2ba7      	cmp	r3, #167	@ 0xa7
 800ccb8:	d90a      	bls.n	800ccd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d006      	beq.n	800ccd0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <osThreadNew+0xa8>
        mem = 1;
 800ccca:	2301      	movs	r3, #1
 800cccc:	61bb      	str	r3, [r7, #24]
 800ccce:	e010      	b.n	800ccf2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10c      	bne.n	800ccf2 <osThreadNew+0xca>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d108      	bne.n	800ccf2 <osThreadNew+0xca>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d104      	bne.n	800ccf2 <osThreadNew+0xca>
          mem = 0;
 800cce8:	2300      	movs	r3, #0
 800ccea:	61bb      	str	r3, [r7, #24]
 800ccec:	e001      	b.n	800ccf2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d110      	bne.n	800cd1a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd00:	9202      	str	r2, [sp, #8]
 800cd02:	9301      	str	r3, [sp, #4]
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	6a3a      	ldr	r2, [r7, #32]
 800cd0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f001 fb78 	bl	800e404 <xTaskCreateStatic>
 800cd14:	4603      	mov	r3, r0
 800cd16:	613b      	str	r3, [r7, #16]
 800cd18:	e013      	b.n	800cd42 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d110      	bne.n	800cd42 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	f107 0310 	add.w	r3, r7, #16
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	9300      	str	r3, [sp, #0]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f001 fbc6 	bl	800e4c4 <xTaskCreate>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d001      	beq.n	800cd42 <osThreadNew+0x11a>
            hTask = NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd42:	693b      	ldr	r3, [r7, #16]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3728      	adds	r7, #40	@ 0x28
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd54:	f3ef 8305 	mrs	r3, IPSR
 800cd58:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <osDelay+0x1c>
    stat = osErrorISR;
 800cd60:	f06f 0305 	mvn.w	r3, #5
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e007      	b.n	800cd78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f001 fd78 	bl	800e868 <vTaskDelay>
    }
  }

  return (stat);
 800cd78:	68fb      	ldr	r3, [r7, #12]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b08a      	sub	sp, #40	@ 0x28
 800cd86:	af02      	add	r7, sp, #8
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd92:	f3ef 8305 	mrs	r3, IPSR
 800cd96:	613b      	str	r3, [r7, #16]
  return(result);
 800cd98:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d15f      	bne.n	800ce5e <osMessageQueueNew+0xdc>
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d05c      	beq.n	800ce5e <osMessageQueueNew+0xdc>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d059      	beq.n	800ce5e <osMessageQueueNew+0xdc>
    mem = -1;
 800cdaa:	f04f 33ff 	mov.w	r3, #4294967295
 800cdae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d029      	beq.n	800ce0a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	689b      	ldr	r3, [r3, #8]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d012      	beq.n	800cde4 <osMessageQueueNew+0x62>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdc4:	d90e      	bls.n	800cde4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d00a      	beq.n	800cde4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	695a      	ldr	r2, [r3, #20]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	68b9      	ldr	r1, [r7, #8]
 800cdd6:	fb01 f303 	mul.w	r3, r1, r3
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d302      	bcc.n	800cde4 <osMessageQueueNew+0x62>
        mem = 1;
 800cdde:	2301      	movs	r3, #1
 800cde0:	61bb      	str	r3, [r7, #24]
 800cde2:	e014      	b.n	800ce0e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d110      	bne.n	800ce0e <osMessageQueueNew+0x8c>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d10c      	bne.n	800ce0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d108      	bne.n	800ce0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	695b      	ldr	r3, [r3, #20]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d104      	bne.n	800ce0e <osMessageQueueNew+0x8c>
          mem = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	61bb      	str	r3, [r7, #24]
 800ce08:	e001      	b.n	800ce0e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d10b      	bne.n	800ce2c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	691a      	ldr	r2, [r3, #16]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	9100      	str	r1, [sp, #0]
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f000 fc22 	bl	800d66c <xQueueGenericCreateStatic>
 800ce28:	61f8      	str	r0, [r7, #28]
 800ce2a:	e008      	b.n	800ce3e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d105      	bne.n	800ce3e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ce32:	2200      	movs	r2, #0
 800ce34:	68b9      	ldr	r1, [r7, #8]
 800ce36:	68f8      	ldr	r0, [r7, #12]
 800ce38:	f000 fc95 	bl	800d766 <xQueueGenericCreate>
 800ce3c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00c      	beq.n	800ce5e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d003      	beq.n	800ce52 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	617b      	str	r3, [r7, #20]
 800ce50:	e001      	b.n	800ce56 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ce52:	2300      	movs	r3, #0
 800ce54:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ce56:	6979      	ldr	r1, [r7, #20]
 800ce58:	69f8      	ldr	r0, [r7, #28]
 800ce5a:	f001 fa75 	bl	800e348 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce5e:	69fb      	ldr	r3, [r7, #28]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3720      	adds	r7, #32
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	603b      	str	r3, [r7, #0]
 800ce74:	4613      	mov	r3, r2
 800ce76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce80:	f3ef 8305 	mrs	r3, IPSR
 800ce84:	617b      	str	r3, [r7, #20]
  return(result);
 800ce86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d028      	beq.n	800cede <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d005      	beq.n	800ce9e <osMessageQueuePut+0x36>
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <osMessageQueuePut+0x36>
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d003      	beq.n	800cea6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ce9e:	f06f 0303 	mvn.w	r3, #3
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e038      	b.n	800cf18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800cea6:	2300      	movs	r3, #0
 800cea8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ceaa:	f107 0210 	add.w	r2, r7, #16
 800ceae:	2300      	movs	r3, #0
 800ceb0:	68b9      	ldr	r1, [r7, #8]
 800ceb2:	69b8      	ldr	r0, [r7, #24]
 800ceb4:	f000 fdea 	bl	800da8c <xQueueGenericSendFromISR>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d003      	beq.n	800cec6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cebe:	f06f 0302 	mvn.w	r3, #2
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	e028      	b.n	800cf18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d025      	beq.n	800cf18 <osMessageQueuePut+0xb0>
 800cecc:	4b15      	ldr	r3, [pc, #84]	@ (800cf24 <osMessageQueuePut+0xbc>)
 800cece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ced2:	601a      	str	r2, [r3, #0]
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	e01c      	b.n	800cf18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <osMessageQueuePut+0x82>
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d103      	bne.n	800cef2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ceea:	f06f 0303 	mvn.w	r3, #3
 800ceee:	61fb      	str	r3, [r7, #28]
 800cef0:	e012      	b.n	800cf18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cef2:	2300      	movs	r3, #0
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	68b9      	ldr	r1, [r7, #8]
 800cef8:	69b8      	ldr	r0, [r7, #24]
 800cefa:	f000 fcc5 	bl	800d888 <xQueueGenericSend>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d009      	beq.n	800cf18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d003      	beq.n	800cf12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cf0a:	f06f 0301 	mvn.w	r3, #1
 800cf0e:	61fb      	str	r3, [r7, #28]
 800cf10:	e002      	b.n	800cf18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cf12:	f06f 0302 	mvn.w	r3, #2
 800cf16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf18:	69fb      	ldr	r3, [r7, #28]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3720      	adds	r7, #32
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	e000ed04 	.word	0xe000ed04

0800cf28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf3e:	f3ef 8305 	mrs	r3, IPSR
 800cf42:	617b      	str	r3, [r7, #20]
  return(result);
 800cf44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d028      	beq.n	800cf9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d005      	beq.n	800cf5c <osMessageQueueGet+0x34>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <osMessageQueueGet+0x34>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d003      	beq.n	800cf64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cf5c:	f06f 0303 	mvn.w	r3, #3
 800cf60:	61fb      	str	r3, [r7, #28]
 800cf62:	e037      	b.n	800cfd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cf64:	2300      	movs	r3, #0
 800cf66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cf68:	f107 0310 	add.w	r3, r7, #16
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	69b8      	ldr	r0, [r7, #24]
 800cf72:	f001 f81b 	bl	800dfac <xQueueReceiveFromISR>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d003      	beq.n	800cf84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf7c:	f06f 0302 	mvn.w	r3, #2
 800cf80:	61fb      	str	r3, [r7, #28]
 800cf82:	e027      	b.n	800cfd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d024      	beq.n	800cfd4 <osMessageQueueGet+0xac>
 800cf8a:	4b15      	ldr	r3, [pc, #84]	@ (800cfe0 <osMessageQueueGet+0xb8>)
 800cf8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf90:	601a      	str	r2, [r3, #0]
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	e01b      	b.n	800cfd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d002      	beq.n	800cfa8 <osMessageQueueGet+0x80>
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d103      	bne.n	800cfb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cfa8:	f06f 0303 	mvn.w	r3, #3
 800cfac:	61fb      	str	r3, [r7, #28]
 800cfae:	e011      	b.n	800cfd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfb0:	683a      	ldr	r2, [r7, #0]
 800cfb2:	68b9      	ldr	r1, [r7, #8]
 800cfb4:	69b8      	ldr	r0, [r7, #24]
 800cfb6:	f000 fe07 	bl	800dbc8 <xQueueReceive>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d009      	beq.n	800cfd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cfc6:	f06f 0301 	mvn.w	r3, #1
 800cfca:	61fb      	str	r3, [r7, #28]
 800cfcc:	e002      	b.n	800cfd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cfce:	f06f 0302 	mvn.w	r3, #2
 800cfd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfd4:	69fb      	ldr	r3, [r7, #28]
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	e000ed04 	.word	0xe000ed04

0800cfe4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08a      	sub	sp, #40	@ 0x28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d102      	bne.n	800cffc <osMessageQueueGetSpace+0x18>
    space = 0U;
 800cff6:	2300      	movs	r3, #0
 800cff8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cffa:	e023      	b.n	800d044 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cffc:	f3ef 8305 	mrs	r3, IPSR
 800d000:	61bb      	str	r3, [r7, #24]
  return(result);
 800d002:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800d004:	2b00      	cmp	r3, #0
 800d006:	d019      	beq.n	800d03c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d008:	f3ef 8211 	mrs	r2, BASEPRI
 800d00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	613a      	str	r2, [r7, #16]
 800d01e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d020:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d022:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d03a:	e003      	b.n	800d044 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d03c:	6a38      	ldr	r0, [r7, #32]
 800d03e:	f001 f837 	bl	800e0b0 <uxQueueSpacesAvailable>
 800d042:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d046:	4618      	mov	r0, r3
 800d048:	3728      	adds	r7, #40	@ 0x28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
	...

0800d050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	60f8      	str	r0, [r7, #12]
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4a07      	ldr	r2, [pc, #28]	@ (800d07c <vApplicationGetIdleTaskMemory+0x2c>)
 800d060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	4a06      	ldr	r2, [pc, #24]	@ (800d080 <vApplicationGetIdleTaskMemory+0x30>)
 800d066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2280      	movs	r2, #128	@ 0x80
 800d06c:	601a      	str	r2, [r3, #0]
}
 800d06e:	bf00      	nop
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	20002738 	.word	0x20002738
 800d080:	200027e0 	.word	0x200027e0

0800d084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	4a07      	ldr	r2, [pc, #28]	@ (800d0b0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	4a06      	ldr	r2, [pc, #24]	@ (800d0b4 <vApplicationGetTimerTaskMemory+0x30>)
 800d09a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d0a2:	601a      	str	r2, [r3, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	3714      	adds	r7, #20
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	200029e0 	.word	0x200029e0
 800d0b4:	20002a88 	.word	0x20002a88

0800d0b8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d0be:	2020      	movs	r0, #32
 800d0c0:	f003 fe24 	bl	8010d0c <pvPortMalloc>
 800d0c4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00a      	beq.n	800d0e2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 f9aa 	bl	800d430 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d0e2:	687b      	ldr	r3, [r7, #4]
	}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b090      	sub	sp, #64	@ 0x40
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d0fe:	2300      	movs	r3, #0
 800d100:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d102:	2300      	movs	r3, #0
 800d104:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d10b      	bne.n	800d124 <xEventGroupWaitBits+0x38>
	__asm volatile
 800d10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	623b      	str	r3, [r7, #32]
}
 800d11e:	bf00      	nop
 800d120:	bf00      	nop
 800d122:	e7fd      	b.n	800d120 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d12a:	d30b      	bcc.n	800d144 <xEventGroupWaitBits+0x58>
	__asm volatile
 800d12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d130:	f383 8811 	msr	BASEPRI, r3
 800d134:	f3bf 8f6f 	isb	sy
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	61fb      	str	r3, [r7, #28]
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	e7fd      	b.n	800d140 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10b      	bne.n	800d162 <xEventGroupWaitBits+0x76>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	61bb      	str	r3, [r7, #24]
}
 800d15c:	bf00      	nop
 800d15e:	bf00      	nop
 800d160:	e7fd      	b.n	800d15e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d162:	f002 fc3d 	bl	800f9e0 <xTaskGetSchedulerState>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d102      	bne.n	800d172 <xEventGroupWaitBits+0x86>
 800d16c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <xEventGroupWaitBits+0x8a>
 800d172:	2301      	movs	r3, #1
 800d174:	e000      	b.n	800d178 <xEventGroupWaitBits+0x8c>
 800d176:	2300      	movs	r3, #0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d10b      	bne.n	800d194 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800d17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	617b      	str	r3, [r7, #20]
}
 800d18e:	bf00      	nop
 800d190:	bf00      	nop
 800d192:	e7fd      	b.n	800d190 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800d194:	f001 fe1c 	bl	800edd0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d19e:	683a      	ldr	r2, [r7, #0]
 800d1a0:	68b9      	ldr	r1, [r7, #8]
 800d1a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1a4:	f000 f90d 	bl	800d3c2 <prvTestWaitCondition>
 800d1a8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800d1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00e      	beq.n	800d1ce <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d028      	beq.n	800d210 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	43db      	mvns	r3, r3
 800d1c6:	401a      	ands	r2, r3
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	e020      	b.n	800d210 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d1ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d104      	bne.n	800d1de <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1dc:	e018      	b.n	800d210 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d003      	beq.n	800d1ec <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d1ea:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d1f8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d1fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1fc:	1d18      	adds	r0, r3, #4
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d202:	4313      	orrs	r3, r2
 800d204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d206:	4619      	mov	r1, r3
 800d208:	f002 f8b8 	bl	800f37c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d210:	f001 fdec 	bl	800edec <xTaskResumeAll>
 800d214:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d031      	beq.n	800d280 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800d21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d107      	bne.n	800d232 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800d222:	4b1a      	ldr	r3, [pc, #104]	@ (800d28c <xEventGroupWaitBits+0x1a0>)
 800d224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d228:	601a      	str	r2, [r3, #0]
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d232:	f002 fd4f 	bl	800fcd4 <uxTaskResetEventItemValue>
 800d236:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d23a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d11a      	bne.n	800d278 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800d242:	f003 fc41 	bl	8010ac8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	68b9      	ldr	r1, [r7, #8]
 800d250:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d252:	f000 f8b6 	bl	800d3c2 <prvTestWaitCondition>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d009      	beq.n	800d270 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d006      	beq.n	800d270 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	43db      	mvns	r3, r3
 800d26a:	401a      	ands	r2, r3
 800d26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d270:	2301      	movs	r3, #1
 800d272:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800d274:	f003 fc5a 	bl	8010b2c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d27a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d282:	4618      	mov	r0, r3
 800d284:	3740      	adds	r7, #64	@ 0x40
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	e000ed04 	.word	0xe000ed04

0800d290 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b08e      	sub	sp, #56	@ 0x38
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d29a:	2300      	movs	r3, #0
 800d29c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10b      	bne.n	800d2c4 <xEventGroupSetBits+0x34>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	613b      	str	r3, [r7, #16]
}
 800d2be:	bf00      	nop
 800d2c0:	bf00      	nop
 800d2c2:	e7fd      	b.n	800d2c0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2ca:	d30b      	bcc.n	800d2e4 <xEventGroupSetBits+0x54>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	60fb      	str	r3, [r7, #12]
}
 800d2de:	bf00      	nop
 800d2e0:	bf00      	nop
 800d2e2:	e7fd      	b.n	800d2e0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d2f0:	f001 fd6e 	bl	800edd0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	431a      	orrs	r2, r3
 800d302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d304:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d306:	e03c      	b.n	800d382 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d314:	2300      	movs	r3, #0
 800d316:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d31e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d326:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d108      	bne.n	800d344 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	4013      	ands	r3, r2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800d33e:	2301      	movs	r3, #1
 800d340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d342:	e008      	b.n	800d356 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	4013      	ands	r3, r2
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d101      	bne.n	800d356 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d352:	2301      	movs	r3, #1
 800d354:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d010      	beq.n	800d37e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d362:	2b00      	cmp	r3, #0
 800d364:	d003      	beq.n	800d36e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	4313      	orrs	r3, r2
 800d36c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d376:	4619      	mov	r1, r3
 800d378:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d37a:	f002 f8cd 	bl	800f518 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800d382:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d384:	6a3b      	ldr	r3, [r7, #32]
 800d386:	429a      	cmp	r2, r3
 800d388:	d1be      	bne.n	800d308 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d390:	43db      	mvns	r3, r3
 800d392:	401a      	ands	r2, r3
 800d394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d396:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d398:	f001 fd28 	bl	800edec <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39e:	681b      	ldr	r3, [r3, #0]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3738      	adds	r7, #56	@ 0x38
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d3b2:	6839      	ldr	r1, [r7, #0]
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff ff6b 	bl	800d290 <xEventGroupSetBits>
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	b087      	sub	sp, #28
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	60f8      	str	r0, [r7, #12]
 800d3ca:	60b9      	str	r1, [r7, #8]
 800d3cc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d107      	bne.n	800d3e8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	4013      	ands	r3, r2
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00a      	beq.n	800d3f8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	617b      	str	r3, [r7, #20]
 800d3e6:	e007      	b.n	800d3f8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d101      	bne.n	800d3f8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d3f8:	697b      	ldr	r3, [r7, #20]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
	...

0800d408 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	68f9      	ldr	r1, [r7, #12]
 800d41a:	4804      	ldr	r0, [pc, #16]	@ (800d42c <xEventGroupSetBitsFromISR+0x24>)
 800d41c:	f003 fa00 	bl	8010820 <xTimerPendFunctionCallFromISR>
 800d420:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d422:	697b      	ldr	r3, [r7, #20]
	}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	0800d3a9 	.word	0x0800d3a9

0800d430 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f103 0208 	add.w	r2, r3, #8
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f04f 32ff 	mov.w	r2, #4294967295
 800d448:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f103 0208 	add.w	r2, r3, #8
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f103 0208 	add.w	r2, r3, #8
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d47e:	bf00      	nop
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d48a:	b480      	push	{r7}
 800d48c:	b085      	sub	sp, #20
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	689a      	ldr	r2, [r3, #8]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	1c5a      	adds	r2, r3, #1
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	601a      	str	r2, [r3, #0]
}
 800d4c6:	bf00      	nop
 800d4c8:	3714      	adds	r7, #20
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	b085      	sub	sp, #20
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4e8:	d103      	bne.n	800d4f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	60fb      	str	r3, [r7, #12]
 800d4f0:	e00c      	b.n	800d50c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3308      	adds	r3, #8
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	e002      	b.n	800d500 <vListInsert+0x2e>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d2f6      	bcs.n	800d4fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	685a      	ldr	r2, [r3, #4]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	683a      	ldr	r2, [r7, #0]
 800d51a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	683a      	ldr	r2, [r7, #0]
 800d526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	601a      	str	r2, [r3, #0]
}
 800d538:	bf00      	nop
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	6892      	ldr	r2, [r2, #8]
 800d55a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	6852      	ldr	r2, [r2, #4]
 800d564:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d103      	bne.n	800d578 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	1e5a      	subs	r2, r3, #1
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3714      	adds	r7, #20
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b084      	sub	sp, #16
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10b      	bne.n	800d5c4 <xQueueGenericReset+0x2c>
	__asm volatile
 800d5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b0:	f383 8811 	msr	BASEPRI, r3
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	60bb      	str	r3, [r7, #8]
}
 800d5be:	bf00      	nop
 800d5c0:	bf00      	nop
 800d5c2:	e7fd      	b.n	800d5c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d5c4:	f003 fa80 	bl	8010ac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5d0:	68f9      	ldr	r1, [r7, #12]
 800d5d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5d4:	fb01 f303 	mul.w	r3, r1, r3
 800d5d8:	441a      	add	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	68f9      	ldr	r1, [r7, #12]
 800d5f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5fa:	fb01 f303 	mul.w	r3, r1, r3
 800d5fe:	441a      	add	r2, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	22ff      	movs	r2, #255	@ 0xff
 800d608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	22ff      	movs	r2, #255	@ 0xff
 800d610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d114      	bne.n	800d644 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d01a      	beq.n	800d658 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3310      	adds	r3, #16
 800d626:	4618      	mov	r0, r3
 800d628:	f001 ff12 	bl	800f450 <xTaskRemoveFromEventList>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d012      	beq.n	800d658 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d632:	4b0d      	ldr	r3, [pc, #52]	@ (800d668 <xQueueGenericReset+0xd0>)
 800d634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d638:	601a      	str	r2, [r3, #0]
 800d63a:	f3bf 8f4f 	dsb	sy
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	e009      	b.n	800d658 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	3310      	adds	r3, #16
 800d648:	4618      	mov	r0, r3
 800d64a:	f7ff fef1 	bl	800d430 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3324      	adds	r3, #36	@ 0x24
 800d652:	4618      	mov	r0, r3
 800d654:	f7ff feec 	bl	800d430 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d658:	f003 fa68 	bl	8010b2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d65c:	2301      	movs	r3, #1
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	e000ed04 	.word	0xe000ed04

0800d66c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b08e      	sub	sp, #56	@ 0x38
 800d670:	af02      	add	r7, sp, #8
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	607a      	str	r2, [r7, #4]
 800d678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d10b      	bne.n	800d698 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d692:	bf00      	nop
 800d694:	bf00      	nop
 800d696:	e7fd      	b.n	800d694 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d10b      	bne.n	800d6b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a2:	f383 8811 	msr	BASEPRI, r3
 800d6a6:	f3bf 8f6f 	isb	sy
 800d6aa:	f3bf 8f4f 	dsb	sy
 800d6ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6b0:	bf00      	nop
 800d6b2:	bf00      	nop
 800d6b4:	e7fd      	b.n	800d6b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <xQueueGenericCreateStatic+0x56>
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <xQueueGenericCreateStatic+0x5a>
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e000      	b.n	800d6c8 <xQueueGenericCreateStatic+0x5c>
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10b      	bne.n	800d6e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d0:	f383 8811 	msr	BASEPRI, r3
 800d6d4:	f3bf 8f6f 	isb	sy
 800d6d8:	f3bf 8f4f 	dsb	sy
 800d6dc:	623b      	str	r3, [r7, #32]
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	e7fd      	b.n	800d6e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d102      	bne.n	800d6f0 <xQueueGenericCreateStatic+0x84>
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d101      	bne.n	800d6f4 <xQueueGenericCreateStatic+0x88>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e000      	b.n	800d6f6 <xQueueGenericCreateStatic+0x8a>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10b      	bne.n	800d712 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fe:	f383 8811 	msr	BASEPRI, r3
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	f3bf 8f4f 	dsb	sy
 800d70a:	61fb      	str	r3, [r7, #28]
}
 800d70c:	bf00      	nop
 800d70e:	bf00      	nop
 800d710:	e7fd      	b.n	800d70e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d712:	2350      	movs	r3, #80	@ 0x50
 800d714:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	2b50      	cmp	r3, #80	@ 0x50
 800d71a:	d00b      	beq.n	800d734 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	61bb      	str	r3, [r7, #24]
}
 800d72e:	bf00      	nop
 800d730:	bf00      	nop
 800d732:	e7fd      	b.n	800d730 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d734:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00d      	beq.n	800d75c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d748:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	4613      	mov	r3, r2
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	68b9      	ldr	r1, [r7, #8]
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f000 f840 	bl	800d7dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d75e:	4618      	mov	r0, r3
 800d760:	3730      	adds	r7, #48	@ 0x30
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d766:	b580      	push	{r7, lr}
 800d768:	b08a      	sub	sp, #40	@ 0x28
 800d76a:	af02      	add	r7, sp, #8
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	4613      	mov	r3, r2
 800d772:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10b      	bne.n	800d792 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	613b      	str	r3, [r7, #16]
}
 800d78c:	bf00      	nop
 800d78e:	bf00      	nop
 800d790:	e7fd      	b.n	800d78e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	fb02 f303 	mul.w	r3, r2, r3
 800d79a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	3350      	adds	r3, #80	@ 0x50
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f003 fab3 	bl	8010d0c <pvPortMalloc>
 800d7a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d011      	beq.n	800d7d2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	3350      	adds	r3, #80	@ 0x50
 800d7b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7c0:	79fa      	ldrb	r2, [r7, #7]
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 f805 	bl	800d7dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3720      	adds	r7, #32
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d103      	bne.n	800d7f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	69ba      	ldr	r2, [r7, #24]
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	e002      	b.n	800d7fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d80a:	2101      	movs	r1, #1
 800d80c:	69b8      	ldr	r0, [r7, #24]
 800d80e:	f7ff fec3 	bl	800d598 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	78fa      	ldrb	r2, [r7, #3]
 800d816:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d81a:	bf00      	nop
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d822:	b580      	push	{r7, lr}
 800d824:	b082      	sub	sp, #8
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00e      	beq.n	800d84e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2200      	movs	r2, #0
 800d840:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d842:	2300      	movs	r3, #0
 800d844:	2200      	movs	r2, #0
 800d846:	2100      	movs	r1, #0
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f81d 	bl	800d888 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d84e:	bf00      	nop
 800d850:	3708      	adds	r7, #8
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d856:	b580      	push	{r7, lr}
 800d858:	b086      	sub	sp, #24
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	4603      	mov	r3, r0
 800d85e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d860:	2301      	movs	r3, #1
 800d862:	617b      	str	r3, [r7, #20]
 800d864:	2300      	movs	r3, #0
 800d866:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	461a      	mov	r2, r3
 800d86c:	6939      	ldr	r1, [r7, #16]
 800d86e:	6978      	ldr	r0, [r7, #20]
 800d870:	f7ff ff79 	bl	800d766 <xQueueGenericCreate>
 800d874:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d876:	68f8      	ldr	r0, [r7, #12]
 800d878:	f7ff ffd3 	bl	800d822 <prvInitialiseMutex>

		return xNewQueue;
 800d87c:	68fb      	ldr	r3, [r7, #12]
	}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
	...

0800d888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08e      	sub	sp, #56	@ 0x38
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	607a      	str	r2, [r7, #4]
 800d894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d896:	2300      	movs	r3, #0
 800d898:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <xQueueGenericSend+0x34>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	e7fd      	b.n	800d8b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d103      	bne.n	800d8ca <xQueueGenericSend+0x42>
 800d8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <xQueueGenericSend+0x46>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e000      	b.n	800d8d0 <xQueueGenericSend+0x48>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10b      	bne.n	800d8ec <xQueueGenericSend+0x64>
	__asm volatile
 800d8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8e6:	bf00      	nop
 800d8e8:	bf00      	nop
 800d8ea:	e7fd      	b.n	800d8e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	d103      	bne.n	800d8fa <xQueueGenericSend+0x72>
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d101      	bne.n	800d8fe <xQueueGenericSend+0x76>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e000      	b.n	800d900 <xQueueGenericSend+0x78>
 800d8fe:	2300      	movs	r3, #0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10b      	bne.n	800d91c <xQueueGenericSend+0x94>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	623b      	str	r3, [r7, #32]
}
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	e7fd      	b.n	800d918 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d91c:	f002 f860 	bl	800f9e0 <xTaskGetSchedulerState>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d102      	bne.n	800d92c <xQueueGenericSend+0xa4>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d101      	bne.n	800d930 <xQueueGenericSend+0xa8>
 800d92c:	2301      	movs	r3, #1
 800d92e:	e000      	b.n	800d932 <xQueueGenericSend+0xaa>
 800d930:	2300      	movs	r3, #0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d10b      	bne.n	800d94e <xQueueGenericSend+0xc6>
	__asm volatile
 800d936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d93a:	f383 8811 	msr	BASEPRI, r3
 800d93e:	f3bf 8f6f 	isb	sy
 800d942:	f3bf 8f4f 	dsb	sy
 800d946:	61fb      	str	r3, [r7, #28]
}
 800d948:	bf00      	nop
 800d94a:	bf00      	nop
 800d94c:	e7fd      	b.n	800d94a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d94e:	f003 f8bb 	bl	8010ac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d302      	bcc.n	800d964 <xQueueGenericSend+0xdc>
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b02      	cmp	r3, #2
 800d962:	d129      	bne.n	800d9b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	68b9      	ldr	r1, [r7, #8]
 800d968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d96a:	f000 fbdd 	bl	800e128 <prvCopyDataToQueue>
 800d96e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d974:	2b00      	cmp	r3, #0
 800d976:	d010      	beq.n	800d99a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d97a:	3324      	adds	r3, #36	@ 0x24
 800d97c:	4618      	mov	r0, r3
 800d97e:	f001 fd67 	bl	800f450 <xTaskRemoveFromEventList>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d013      	beq.n	800d9b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d988:	4b3f      	ldr	r3, [pc, #252]	@ (800da88 <xQueueGenericSend+0x200>)
 800d98a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d98e:	601a      	str	r2, [r3, #0]
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	f3bf 8f6f 	isb	sy
 800d998:	e00a      	b.n	800d9b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d007      	beq.n	800d9b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9a0:	4b39      	ldr	r3, [pc, #228]	@ (800da88 <xQueueGenericSend+0x200>)
 800d9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9b0:	f003 f8bc 	bl	8010b2c <vPortExitCritical>
				return pdPASS;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e063      	b.n	800da80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d103      	bne.n	800d9c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9be:	f003 f8b5 	bl	8010b2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	e05c      	b.n	800da80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d106      	bne.n	800d9da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9cc:	f107 0314 	add.w	r3, r7, #20
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f001 fe05 	bl	800f5e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9da:	f003 f8a7 	bl	8010b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9de:	f001 f9f7 	bl	800edd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9e2:	f003 f871 	bl	8010ac8 <vPortEnterCritical>
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9ec:	b25b      	sxtb	r3, r3
 800d9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f2:	d103      	bne.n	800d9fc <xQueueGenericSend+0x174>
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da02:	b25b      	sxtb	r3, r3
 800da04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da08:	d103      	bne.n	800da12 <xQueueGenericSend+0x18a>
 800da0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0c:	2200      	movs	r2, #0
 800da0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da12:	f003 f88b 	bl	8010b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da16:	1d3a      	adds	r2, r7, #4
 800da18:	f107 0314 	add.w	r3, r7, #20
 800da1c:	4611      	mov	r1, r2
 800da1e:	4618      	mov	r0, r3
 800da20:	f001 fdf4 	bl	800f60c <xTaskCheckForTimeOut>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d124      	bne.n	800da74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da2c:	f000 fc74 	bl	800e318 <prvIsQueueFull>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d018      	beq.n	800da68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da38:	3310      	adds	r3, #16
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	4611      	mov	r1, r2
 800da3e:	4618      	mov	r0, r3
 800da40:	f001 fc76 	bl	800f330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da46:	f000 fbff 	bl	800e248 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da4a:	f001 f9cf 	bl	800edec <xTaskResumeAll>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	f47f af7c 	bne.w	800d94e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da56:	4b0c      	ldr	r3, [pc, #48]	@ (800da88 <xQueueGenericSend+0x200>)
 800da58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	e772      	b.n	800d94e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da6a:	f000 fbed 	bl	800e248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da6e:	f001 f9bd 	bl	800edec <xTaskResumeAll>
 800da72:	e76c      	b.n	800d94e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da76:	f000 fbe7 	bl	800e248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da7a:	f001 f9b7 	bl	800edec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da80:	4618      	mov	r0, r3
 800da82:	3738      	adds	r7, #56	@ 0x38
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	e000ed04 	.word	0xe000ed04

0800da8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b090      	sub	sp, #64	@ 0x40
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800da9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10b      	bne.n	800dabc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dab6:	bf00      	nop
 800dab8:	bf00      	nop
 800daba:	e7fd      	b.n	800dab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d103      	bne.n	800daca <xQueueGenericSendFromISR+0x3e>
 800dac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d101      	bne.n	800dace <xQueueGenericSendFromISR+0x42>
 800daca:	2301      	movs	r3, #1
 800dacc:	e000      	b.n	800dad0 <xQueueGenericSendFromISR+0x44>
 800dace:	2300      	movs	r3, #0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10b      	bne.n	800daec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dad8:	f383 8811 	msr	BASEPRI, r3
 800dadc:	f3bf 8f6f 	isb	sy
 800dae0:	f3bf 8f4f 	dsb	sy
 800dae4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dae6:	bf00      	nop
 800dae8:	bf00      	nop
 800daea:	e7fd      	b.n	800dae8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d103      	bne.n	800dafa <xQueueGenericSendFromISR+0x6e>
 800daf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d101      	bne.n	800dafe <xQueueGenericSendFromISR+0x72>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e000      	b.n	800db00 <xQueueGenericSendFromISR+0x74>
 800dafe:	2300      	movs	r3, #0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10b      	bne.n	800db1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	623b      	str	r3, [r7, #32]
}
 800db16:	bf00      	nop
 800db18:	bf00      	nop
 800db1a:	e7fd      	b.n	800db18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db1c:	f003 f8b4 	bl	8010c88 <vPortValidateInterruptPriority>
	__asm volatile
 800db20:	f3ef 8211 	mrs	r2, BASEPRI
 800db24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	61fa      	str	r2, [r7, #28]
 800db36:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800db38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db44:	429a      	cmp	r2, r3
 800db46:	d302      	bcc.n	800db4e <xQueueGenericSendFromISR+0xc2>
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	2b02      	cmp	r3, #2
 800db4c:	d12f      	bne.n	800dbae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db5e:	683a      	ldr	r2, [r7, #0]
 800db60:	68b9      	ldr	r1, [r7, #8]
 800db62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db64:	f000 fae0 	bl	800e128 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db70:	d112      	bne.n	800db98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db76:	2b00      	cmp	r3, #0
 800db78:	d016      	beq.n	800dba8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7c:	3324      	adds	r3, #36	@ 0x24
 800db7e:	4618      	mov	r0, r3
 800db80:	f001 fc66 	bl	800f450 <xTaskRemoveFromEventList>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00e      	beq.n	800dba8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00b      	beq.n	800dba8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	e007      	b.n	800dba8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800db98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800db9c:	3301      	adds	r3, #1
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	b25a      	sxtb	r2, r3
 800dba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dbac:	e001      	b.n	800dbb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb4:	617b      	str	r3, [r7, #20]
	__asm volatile
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f383 8811 	msr	BASEPRI, r3
}
 800dbbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3740      	adds	r7, #64	@ 0x40
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}

0800dbc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b08c      	sub	sp, #48	@ 0x30
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d10b      	bne.n	800dbfa <xQueueReceive+0x32>
	__asm volatile
 800dbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe6:	f383 8811 	msr	BASEPRI, r3
 800dbea:	f3bf 8f6f 	isb	sy
 800dbee:	f3bf 8f4f 	dsb	sy
 800dbf2:	623b      	str	r3, [r7, #32]
}
 800dbf4:	bf00      	nop
 800dbf6:	bf00      	nop
 800dbf8:	e7fd      	b.n	800dbf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d103      	bne.n	800dc08 <xQueueReceive+0x40>
 800dc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <xQueueReceive+0x44>
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e000      	b.n	800dc0e <xQueueReceive+0x46>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d10b      	bne.n	800dc2a <xQueueReceive+0x62>
	__asm volatile
 800dc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	61fb      	str	r3, [r7, #28]
}
 800dc24:	bf00      	nop
 800dc26:	bf00      	nop
 800dc28:	e7fd      	b.n	800dc26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc2a:	f001 fed9 	bl	800f9e0 <xTaskGetSchedulerState>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d102      	bne.n	800dc3a <xQueueReceive+0x72>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d101      	bne.n	800dc3e <xQueueReceive+0x76>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e000      	b.n	800dc40 <xQueueReceive+0x78>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10b      	bne.n	800dc5c <xQueueReceive+0x94>
	__asm volatile
 800dc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc48:	f383 8811 	msr	BASEPRI, r3
 800dc4c:	f3bf 8f6f 	isb	sy
 800dc50:	f3bf 8f4f 	dsb	sy
 800dc54:	61bb      	str	r3, [r7, #24]
}
 800dc56:	bf00      	nop
 800dc58:	bf00      	nop
 800dc5a:	e7fd      	b.n	800dc58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc5c:	f002 ff34 	bl	8010ac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d01f      	beq.n	800dcac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc70:	f000 fac4 	bl	800e1fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc76:	1e5a      	subs	r2, r3, #1
 800dc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7e:	691b      	ldr	r3, [r3, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00f      	beq.n	800dca4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc86:	3310      	adds	r3, #16
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f001 fbe1 	bl	800f450 <xTaskRemoveFromEventList>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d007      	beq.n	800dca4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dc94:	4b3c      	ldr	r3, [pc, #240]	@ (800dd88 <xQueueReceive+0x1c0>)
 800dc96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dca4:	f002 ff42 	bl	8010b2c <vPortExitCritical>
				return pdPASS;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e069      	b.n	800dd80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d103      	bne.n	800dcba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcb2:	f002 ff3b 	bl	8010b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	e062      	b.n	800dd80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d106      	bne.n	800dcce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcc0:	f107 0310 	add.w	r3, r7, #16
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f001 fc8b 	bl	800f5e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcca:	2301      	movs	r3, #1
 800dccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcce:	f002 ff2d 	bl	8010b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcd2:	f001 f87d 	bl	800edd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcd6:	f002 fef7 	bl	8010ac8 <vPortEnterCritical>
 800dcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dce0:	b25b      	sxtb	r3, r3
 800dce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce6:	d103      	bne.n	800dcf0 <xQueueReceive+0x128>
 800dce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcea:	2200      	movs	r2, #0
 800dcec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcf6:	b25b      	sxtb	r3, r3
 800dcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcfc:	d103      	bne.n	800dd06 <xQueueReceive+0x13e>
 800dcfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd06:	f002 ff11 	bl	8010b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd0a:	1d3a      	adds	r2, r7, #4
 800dd0c:	f107 0310 	add.w	r3, r7, #16
 800dd10:	4611      	mov	r1, r2
 800dd12:	4618      	mov	r0, r3
 800dd14:	f001 fc7a 	bl	800f60c <xTaskCheckForTimeOut>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d123      	bne.n	800dd66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd20:	f000 fae4 	bl	800e2ec <prvIsQueueEmpty>
 800dd24:	4603      	mov	r3, r0
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d017      	beq.n	800dd5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd2c:	3324      	adds	r3, #36	@ 0x24
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	4611      	mov	r1, r2
 800dd32:	4618      	mov	r0, r3
 800dd34:	f001 fafc 	bl	800f330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd3a:	f000 fa85 	bl	800e248 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd3e:	f001 f855 	bl	800edec <xTaskResumeAll>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d189      	bne.n	800dc5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dd48:	4b0f      	ldr	r3, [pc, #60]	@ (800dd88 <xQueueReceive+0x1c0>)
 800dd4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd4e:	601a      	str	r2, [r3, #0]
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	e780      	b.n	800dc5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd5c:	f000 fa74 	bl	800e248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd60:	f001 f844 	bl	800edec <xTaskResumeAll>
 800dd64:	e77a      	b.n	800dc5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd68:	f000 fa6e 	bl	800e248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd6c:	f001 f83e 	bl	800edec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd72:	f000 fabb 	bl	800e2ec <prvIsQueueEmpty>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f43f af6f 	beq.w	800dc5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3730      	adds	r7, #48	@ 0x30
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	e000ed04 	.word	0xe000ed04

0800dd8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b08e      	sub	sp, #56	@ 0x38
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd96:	2300      	movs	r3, #0
 800dd98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10b      	bne.n	800ddc0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddac:	f383 8811 	msr	BASEPRI, r3
 800ddb0:	f3bf 8f6f 	isb	sy
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	623b      	str	r3, [r7, #32]
}
 800ddba:	bf00      	nop
 800ddbc:	bf00      	nop
 800ddbe:	e7fd      	b.n	800ddbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00b      	beq.n	800dde0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ddc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddcc:	f383 8811 	msr	BASEPRI, r3
 800ddd0:	f3bf 8f6f 	isb	sy
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	61fb      	str	r3, [r7, #28]
}
 800ddda:	bf00      	nop
 800dddc:	bf00      	nop
 800ddde:	e7fd      	b.n	800dddc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dde0:	f001 fdfe 	bl	800f9e0 <xTaskGetSchedulerState>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d102      	bne.n	800ddf0 <xQueueSemaphoreTake+0x64>
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <xQueueSemaphoreTake+0x68>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	e000      	b.n	800ddf6 <xQueueSemaphoreTake+0x6a>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d10b      	bne.n	800de12 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	61bb      	str	r3, [r7, #24]
}
 800de0c:	bf00      	nop
 800de0e:	bf00      	nop
 800de10:	e7fd      	b.n	800de0e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de12:	f002 fe59 	bl	8010ac8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de1a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d024      	beq.n	800de6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de24:	1e5a      	subs	r2, r3, #1
 800de26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de28:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d104      	bne.n	800de3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de32:	f001 ff67 	bl	800fd04 <pvTaskIncrementMutexHeldCount>
 800de36:	4602      	mov	r2, r0
 800de38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00f      	beq.n	800de64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de46:	3310      	adds	r3, #16
 800de48:	4618      	mov	r0, r3
 800de4a:	f001 fb01 	bl	800f450 <xTaskRemoveFromEventList>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d007      	beq.n	800de64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de54:	4b54      	ldr	r3, [pc, #336]	@ (800dfa8 <xQueueSemaphoreTake+0x21c>)
 800de56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de64:	f002 fe62 	bl	8010b2c <vPortExitCritical>
				return pdPASS;
 800de68:	2301      	movs	r3, #1
 800de6a:	e098      	b.n	800df9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d112      	bne.n	800de98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00b      	beq.n	800de90 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800de78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7c:	f383 8811 	msr	BASEPRI, r3
 800de80:	f3bf 8f6f 	isb	sy
 800de84:	f3bf 8f4f 	dsb	sy
 800de88:	617b      	str	r3, [r7, #20]
}
 800de8a:	bf00      	nop
 800de8c:	bf00      	nop
 800de8e:	e7fd      	b.n	800de8c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800de90:	f002 fe4c 	bl	8010b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de94:	2300      	movs	r3, #0
 800de96:	e082      	b.n	800df9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d106      	bne.n	800deac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de9e:	f107 030c 	add.w	r3, r7, #12
 800dea2:	4618      	mov	r0, r3
 800dea4:	f001 fb9c 	bl	800f5e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dea8:	2301      	movs	r3, #1
 800deaa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800deac:	f002 fe3e 	bl	8010b2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800deb0:	f000 ff8e 	bl	800edd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800deb4:	f002 fe08 	bl	8010ac8 <vPortEnterCritical>
 800deb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800debe:	b25b      	sxtb	r3, r3
 800dec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec4:	d103      	bne.n	800dece <xQueueSemaphoreTake+0x142>
 800dec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec8:	2200      	movs	r2, #0
 800deca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ded4:	b25b      	sxtb	r3, r3
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d103      	bne.n	800dee4 <xQueueSemaphoreTake+0x158>
 800dedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dee4:	f002 fe22 	bl	8010b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dee8:	463a      	mov	r2, r7
 800deea:	f107 030c 	add.w	r3, r7, #12
 800deee:	4611      	mov	r1, r2
 800def0:	4618      	mov	r0, r3
 800def2:	f001 fb8b 	bl	800f60c <xTaskCheckForTimeOut>
 800def6:	4603      	mov	r3, r0
 800def8:	2b00      	cmp	r3, #0
 800defa:	d132      	bne.n	800df62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800defc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800defe:	f000 f9f5 	bl	800e2ec <prvIsQueueEmpty>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d026      	beq.n	800df56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d109      	bne.n	800df24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800df10:	f002 fdda 	bl	8010ac8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	4618      	mov	r0, r3
 800df1a:	f001 fd7f 	bl	800fa1c <xTaskPriorityInherit>
 800df1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800df20:	f002 fe04 	bl	8010b2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	3324      	adds	r3, #36	@ 0x24
 800df28:	683a      	ldr	r2, [r7, #0]
 800df2a:	4611      	mov	r1, r2
 800df2c:	4618      	mov	r0, r3
 800df2e:	f001 f9ff 	bl	800f330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df34:	f000 f988 	bl	800e248 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df38:	f000 ff58 	bl	800edec <xTaskResumeAll>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f47f af67 	bne.w	800de12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800df44:	4b18      	ldr	r3, [pc, #96]	@ (800dfa8 <xQueueSemaphoreTake+0x21c>)
 800df46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	e75d      	b.n	800de12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800df56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df58:	f000 f976 	bl	800e248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df5c:	f000 ff46 	bl	800edec <xTaskResumeAll>
 800df60:	e757      	b.n	800de12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800df62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df64:	f000 f970 	bl	800e248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df68:	f000 ff40 	bl	800edec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df6e:	f000 f9bd 	bl	800e2ec <prvIsQueueEmpty>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	f43f af4c 	beq.w	800de12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800df7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d00d      	beq.n	800df9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800df80:	f002 fda2 	bl	8010ac8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800df84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df86:	f000 f8b7 	bl	800e0f8 <prvGetDisinheritPriorityAfterTimeout>
 800df8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800df8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8e:	689b      	ldr	r3, [r3, #8]
 800df90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df92:	4618      	mov	r0, r3
 800df94:	f001 fe1a 	bl	800fbcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800df98:	f002 fdc8 	bl	8010b2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800df9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3738      	adds	r7, #56	@ 0x38
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	e000ed04 	.word	0xe000ed04

0800dfac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	@ 0x38
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10b      	bne.n	800dfda <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800dfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	623b      	str	r3, [r7, #32]
}
 800dfd4:	bf00      	nop
 800dfd6:	bf00      	nop
 800dfd8:	e7fd      	b.n	800dfd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d103      	bne.n	800dfe8 <xQueueReceiveFromISR+0x3c>
 800dfe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d101      	bne.n	800dfec <xQueueReceiveFromISR+0x40>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e000      	b.n	800dfee <xQueueReceiveFromISR+0x42>
 800dfec:	2300      	movs	r3, #0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10b      	bne.n	800e00a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	61fb      	str	r3, [r7, #28]
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop
 800e008:	e7fd      	b.n	800e006 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e00a:	f002 fe3d 	bl	8010c88 <vPortValidateInterruptPriority>
	__asm volatile
 800e00e:	f3ef 8211 	mrs	r2, BASEPRI
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	61ba      	str	r2, [r7, #24]
 800e024:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e026:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e028:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e02e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e032:	2b00      	cmp	r3, #0
 800e034:	d02f      	beq.n	800e096 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e03c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e044:	f000 f8da 	bl	800e1fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04a:	1e5a      	subs	r2, r3, #1
 800e04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e050:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e054:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e058:	d112      	bne.n	800e080 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d016      	beq.n	800e090 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e064:	3310      	adds	r3, #16
 800e066:	4618      	mov	r0, r3
 800e068:	f001 f9f2 	bl	800f450 <xTaskRemoveFromEventList>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00e      	beq.n	800e090 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00b      	beq.n	800e090 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	e007      	b.n	800e090 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e084:	3301      	adds	r3, #1
 800e086:	b2db      	uxtb	r3, r3
 800e088:	b25a      	sxtb	r2, r3
 800e08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e08c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e090:	2301      	movs	r3, #1
 800e092:	637b      	str	r3, [r7, #52]	@ 0x34
 800e094:	e001      	b.n	800e09a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e096:	2300      	movs	r3, #0
 800e098:	637b      	str	r3, [r7, #52]	@ 0x34
 800e09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	f383 8811 	msr	BASEPRI, r3
}
 800e0a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3738      	adds	r7, #56	@ 0x38
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d10b      	bne.n	800e0da <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800e0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0c6:	f383 8811 	msr	BASEPRI, r3
 800e0ca:	f3bf 8f6f 	isb	sy
 800e0ce:	f3bf 8f4f 	dsb	sy
 800e0d2:	60fb      	str	r3, [r7, #12]
}
 800e0d4:	bf00      	nop
 800e0d6:	bf00      	nop
 800e0d8:	e7fd      	b.n	800e0d6 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800e0da:	f002 fcf5 	bl	8010ac8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e0ea:	f002 fd1f 	bl	8010b2c <vPortExitCritical>

	return uxReturn;
 800e0ee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3718      	adds	r7, #24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b085      	sub	sp, #20
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e104:	2b00      	cmp	r3, #0
 800e106:	d006      	beq.n	800e116 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	e001      	b.n	800e11a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e11a:	68fb      	ldr	r3, [r7, #12]
	}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3714      	adds	r7, #20
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e134:	2300      	movs	r3, #0
 800e136:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e13c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e142:	2b00      	cmp	r3, #0
 800e144:	d10d      	bne.n	800e162 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d14d      	bne.n	800e1ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	689b      	ldr	r3, [r3, #8]
 800e152:	4618      	mov	r0, r3
 800e154:	f001 fcca 	bl	800faec <xTaskPriorityDisinherit>
 800e158:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	609a      	str	r2, [r3, #8]
 800e160:	e043      	b.n	800e1ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d119      	bne.n	800e19c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6858      	ldr	r0, [r3, #4]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e170:	461a      	mov	r2, r3
 800e172:	68b9      	ldr	r1, [r7, #8]
 800e174:	f005 f91b 	bl	80133ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e180:	441a      	add	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	685a      	ldr	r2, [r3, #4]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d32b      	bcc.n	800e1ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	605a      	str	r2, [r3, #4]
 800e19a:	e026      	b.n	800e1ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68d8      	ldr	r0, [r3, #12]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	68b9      	ldr	r1, [r7, #8]
 800e1a8:	f005 f901 	bl	80133ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68da      	ldr	r2, [r3, #12]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b4:	425b      	negs	r3, r3
 800e1b6:	441a      	add	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d207      	bcs.n	800e1d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	689a      	ldr	r2, [r3, #8]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d0:	425b      	negs	r3, r3
 800e1d2:	441a      	add	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d105      	bne.n	800e1ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d002      	beq.n	800e1ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e1f2:	697b      	ldr	r3, [r7, #20]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3718      	adds	r7, #24
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d018      	beq.n	800e240 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	68da      	ldr	r2, [r3, #12]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e216:	441a      	add	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	429a      	cmp	r2, r3
 800e226:	d303      	bcc.n	800e230 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	68d9      	ldr	r1, [r3, #12]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e238:	461a      	mov	r2, r3
 800e23a:	6838      	ldr	r0, [r7, #0]
 800e23c:	f005 f8b7 	bl	80133ae <memcpy>
	}
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e250:	f002 fc3a 	bl	8010ac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e25a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e25c:	e011      	b.n	800e282 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e262:	2b00      	cmp	r3, #0
 800e264:	d012      	beq.n	800e28c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3324      	adds	r3, #36	@ 0x24
 800e26a:	4618      	mov	r0, r3
 800e26c:	f001 f8f0 	bl	800f450 <xTaskRemoveFromEventList>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e276:	f001 fa2d 	bl	800f6d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
 800e27c:	3b01      	subs	r3, #1
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	dce9      	bgt.n	800e25e <prvUnlockQueue+0x16>
 800e28a:	e000      	b.n	800e28e <prvUnlockQueue+0x46>
					break;
 800e28c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	22ff      	movs	r2, #255	@ 0xff
 800e292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e296:	f002 fc49 	bl	8010b2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e29a:	f002 fc15 	bl	8010ac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2a6:	e011      	b.n	800e2cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d012      	beq.n	800e2d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3310      	adds	r3, #16
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f001 f8cb 	bl	800f450 <xTaskRemoveFromEventList>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e2c0:	f001 fa08 	bl	800f6d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2c4:	7bbb      	ldrb	r3, [r7, #14]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	dce9      	bgt.n	800e2a8 <prvUnlockQueue+0x60>
 800e2d4:	e000      	b.n	800e2d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	22ff      	movs	r2, #255	@ 0xff
 800e2dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e2e0:	f002 fc24 	bl	8010b2c <vPortExitCritical>
}
 800e2e4:	bf00      	nop
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2f4:	f002 fbe8 	bl	8010ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d102      	bne.n	800e306 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e300:	2301      	movs	r3, #1
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	e001      	b.n	800e30a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e306:	2300      	movs	r3, #0
 800e308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e30a:	f002 fc0f 	bl	8010b2c <vPortExitCritical>

	return xReturn;
 800e30e:	68fb      	ldr	r3, [r7, #12]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3710      	adds	r7, #16
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e320:	f002 fbd2 	bl	8010ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d102      	bne.n	800e336 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e330:	2301      	movs	r3, #1
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	e001      	b.n	800e33a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e336:	2300      	movs	r3, #0
 800e338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e33a:	f002 fbf7 	bl	8010b2c <vPortExitCritical>

	return xReturn;
 800e33e:	68fb      	ldr	r3, [r7, #12]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e352:	2300      	movs	r3, #0
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	e014      	b.n	800e382 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e358:	4a0f      	ldr	r2, [pc, #60]	@ (800e398 <vQueueAddToRegistry+0x50>)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10b      	bne.n	800e37c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e364:	490c      	ldr	r1, [pc, #48]	@ (800e398 <vQueueAddToRegistry+0x50>)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	683a      	ldr	r2, [r7, #0]
 800e36a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e36e:	4a0a      	ldr	r2, [pc, #40]	@ (800e398 <vQueueAddToRegistry+0x50>)
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	4413      	add	r3, r2
 800e376:	687a      	ldr	r2, [r7, #4]
 800e378:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e37a:	e006      	b.n	800e38a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	3301      	adds	r3, #1
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b07      	cmp	r3, #7
 800e386:	d9e7      	bls.n	800e358 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e388:	bf00      	nop
 800e38a:	bf00      	nop
 800e38c:	3714      	adds	r7, #20
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	20002e88 	.word	0x20002e88

0800e39c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3ac:	f002 fb8c 	bl	8010ac8 <vPortEnterCritical>
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3b6:	b25b      	sxtb	r3, r3
 800e3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3bc:	d103      	bne.n	800e3c6 <vQueueWaitForMessageRestricted+0x2a>
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3cc:	b25b      	sxtb	r3, r3
 800e3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d2:	d103      	bne.n	800e3dc <vQueueWaitForMessageRestricted+0x40>
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3dc:	f002 fba6 	bl	8010b2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d106      	bne.n	800e3f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	3324      	adds	r3, #36	@ 0x24
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	68b9      	ldr	r1, [r7, #8]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f001 f801 	bl	800f3f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e3f6:	6978      	ldr	r0, [r7, #20]
 800e3f8:	f7ff ff26 	bl	800e248 <prvUnlockQueue>
	}
 800e3fc:	bf00      	nop
 800e3fe:	3718      	adds	r7, #24
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e404:	b580      	push	{r7, lr}
 800e406:	b08e      	sub	sp, #56	@ 0x38
 800e408:	af04      	add	r7, sp, #16
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10b      	bne.n	800e430 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	623b      	str	r3, [r7, #32]
}
 800e42a:	bf00      	nop
 800e42c:	bf00      	nop
 800e42e:	e7fd      	b.n	800e42c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e432:	2b00      	cmp	r3, #0
 800e434:	d10b      	bne.n	800e44e <xTaskCreateStatic+0x4a>
	__asm volatile
 800e436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e43a:	f383 8811 	msr	BASEPRI, r3
 800e43e:	f3bf 8f6f 	isb	sy
 800e442:	f3bf 8f4f 	dsb	sy
 800e446:	61fb      	str	r3, [r7, #28]
}
 800e448:	bf00      	nop
 800e44a:	bf00      	nop
 800e44c:	e7fd      	b.n	800e44a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e44e:	23a8      	movs	r3, #168	@ 0xa8
 800e450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2ba8      	cmp	r3, #168	@ 0xa8
 800e456:	d00b      	beq.n	800e470 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	61bb      	str	r3, [r7, #24]
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	e7fd      	b.n	800e46c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e470:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01e      	beq.n	800e4b6 <xTaskCreateStatic+0xb2>
 800e478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d01b      	beq.n	800e4b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e480:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e486:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e48a:	2202      	movs	r2, #2
 800e48c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e490:	2300      	movs	r3, #0
 800e492:	9303      	str	r3, [sp, #12]
 800e494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e496:	9302      	str	r3, [sp, #8]
 800e498:	f107 0314 	add.w	r3, r7, #20
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	687a      	ldr	r2, [r7, #4]
 800e4a6:	68b9      	ldr	r1, [r7, #8]
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f000 f851 	bl	800e550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4b0:	f000 f8f6 	bl	800e6a0 <prvAddNewTaskToReadyList>
 800e4b4:	e001      	b.n	800e4ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4ba:	697b      	ldr	r3, [r7, #20]
	}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3728      	adds	r7, #40	@ 0x28
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b08c      	sub	sp, #48	@ 0x30
 800e4c8:	af04      	add	r7, sp, #16
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	60b9      	str	r1, [r7, #8]
 800e4ce:	603b      	str	r3, [r7, #0]
 800e4d0:	4613      	mov	r3, r2
 800e4d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4d4:	88fb      	ldrh	r3, [r7, #6]
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 fc17 	bl	8010d0c <pvPortMalloc>
 800e4de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00e      	beq.n	800e504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4e6:	20a8      	movs	r0, #168	@ 0xa8
 800e4e8:	f002 fc10 	bl	8010d0c <pvPortMalloc>
 800e4ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4ee:	69fb      	ldr	r3, [r7, #28]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d003      	beq.n	800e4fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4fa:	e005      	b.n	800e508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e4fc:	6978      	ldr	r0, [r7, #20]
 800e4fe:	f002 fcd3 	bl	8010ea8 <vPortFree>
 800e502:	e001      	b.n	800e508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e504:	2300      	movs	r3, #0
 800e506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d017      	beq.n	800e53e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e516:	88fa      	ldrh	r2, [r7, #6]
 800e518:	2300      	movs	r3, #0
 800e51a:	9303      	str	r3, [sp, #12]
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	9302      	str	r3, [sp, #8]
 800e520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e522:	9301      	str	r3, [sp, #4]
 800e524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e526:	9300      	str	r3, [sp, #0]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	68b9      	ldr	r1, [r7, #8]
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f80f 	bl	800e550 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e532:	69f8      	ldr	r0, [r7, #28]
 800e534:	f000 f8b4 	bl	800e6a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e538:	2301      	movs	r3, #1
 800e53a:	61bb      	str	r3, [r7, #24]
 800e53c:	e002      	b.n	800e544 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e53e:	f04f 33ff 	mov.w	r3, #4294967295
 800e542:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e544:	69bb      	ldr	r3, [r7, #24]
	}
 800e546:	4618      	mov	r0, r3
 800e548:	3720      	adds	r7, #32
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b088      	sub	sp, #32
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e560:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	461a      	mov	r2, r3
 800e568:	21a5      	movs	r1, #165	@ 0xa5
 800e56a:	f004 fdb0 	bl	80130ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e570:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e578:	3b01      	subs	r3, #1
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	4413      	add	r3, r2
 800e57e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	f023 0307 	bic.w	r3, r3, #7
 800e586:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	f003 0307 	and.w	r3, r3, #7
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00b      	beq.n	800e5aa <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e596:	f383 8811 	msr	BASEPRI, r3
 800e59a:	f3bf 8f6f 	isb	sy
 800e59e:	f3bf 8f4f 	dsb	sy
 800e5a2:	617b      	str	r3, [r7, #20]
}
 800e5a4:	bf00      	nop
 800e5a6:	bf00      	nop
 800e5a8:	e7fd      	b.n	800e5a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d01f      	beq.n	800e5f0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	61fb      	str	r3, [r7, #28]
 800e5b4:	e012      	b.n	800e5dc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5b6:	68ba      	ldr	r2, [r7, #8]
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	4413      	add	r3, r2
 800e5bc:	7819      	ldrb	r1, [r3, #0]
 800e5be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	3334      	adds	r3, #52	@ 0x34
 800e5c6:	460a      	mov	r2, r1
 800e5c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5ca:	68ba      	ldr	r2, [r7, #8]
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	4413      	add	r3, r2
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d006      	beq.n	800e5e4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	61fb      	str	r3, [r7, #28]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	2b0f      	cmp	r3, #15
 800e5e0:	d9e9      	bls.n	800e5b6 <prvInitialiseNewTask+0x66>
 800e5e2:	e000      	b.n	800e5e6 <prvInitialiseNewTask+0x96>
			{
				break;
 800e5e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e5ee:	e003      	b.n	800e5f8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5fa:	2b37      	cmp	r3, #55	@ 0x37
 800e5fc:	d901      	bls.n	800e602 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e5fe:	2337      	movs	r3, #55	@ 0x37
 800e600:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e606:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e60c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e610:	2200      	movs	r2, #0
 800e612:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e616:	3304      	adds	r3, #4
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe ff29 	bl	800d470 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e620:	3318      	adds	r3, #24
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe ff24 	bl	800d470 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e62c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e62e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e630:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e636:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e640:	2200      	movs	r2, #0
 800e642:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e648:	2200      	movs	r2, #0
 800e64a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e650:	3354      	adds	r3, #84	@ 0x54
 800e652:	224c      	movs	r2, #76	@ 0x4c
 800e654:	2100      	movs	r1, #0
 800e656:	4618      	mov	r0, r3
 800e658:	f004 fd39 	bl	80130ce <memset>
 800e65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e65e:	4a0d      	ldr	r2, [pc, #52]	@ (800e694 <prvInitialiseNewTask+0x144>)
 800e660:	659a      	str	r2, [r3, #88]	@ 0x58
 800e662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e664:	4a0c      	ldr	r2, [pc, #48]	@ (800e698 <prvInitialiseNewTask+0x148>)
 800e666:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66a:	4a0c      	ldr	r2, [pc, #48]	@ (800e69c <prvInitialiseNewTask+0x14c>)
 800e66c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	68f9      	ldr	r1, [r7, #12]
 800e672:	69b8      	ldr	r0, [r7, #24]
 800e674:	f002 f8f4 	bl	8010860 <pxPortInitialiseStack>
 800e678:	4602      	mov	r2, r0
 800e67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e680:	2b00      	cmp	r3, #0
 800e682:	d002      	beq.n	800e68a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e68a:	bf00      	nop
 800e68c:	3720      	adds	r7, #32
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	200136ec 	.word	0x200136ec
 800e698:	20013754 	.word	0x20013754
 800e69c:	200137bc 	.word	0x200137bc

0800e6a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e6a8:	f002 fa0e 	bl	8010ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e6ac:	4b2d      	ldr	r3, [pc, #180]	@ (800e764 <prvAddNewTaskToReadyList+0xc4>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	4a2c      	ldr	r2, [pc, #176]	@ (800e764 <prvAddNewTaskToReadyList+0xc4>)
 800e6b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e6b6:	4b2c      	ldr	r3, [pc, #176]	@ (800e768 <prvAddNewTaskToReadyList+0xc8>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d109      	bne.n	800e6d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6be:	4a2a      	ldr	r2, [pc, #168]	@ (800e768 <prvAddNewTaskToReadyList+0xc8>)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6c4:	4b27      	ldr	r3, [pc, #156]	@ (800e764 <prvAddNewTaskToReadyList+0xc4>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d110      	bne.n	800e6ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6cc:	f001 f826 	bl	800f71c <prvInitialiseTaskLists>
 800e6d0:	e00d      	b.n	800e6ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6d2:	4b26      	ldr	r3, [pc, #152]	@ (800e76c <prvAddNewTaskToReadyList+0xcc>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d109      	bne.n	800e6ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6da:	4b23      	ldr	r3, [pc, #140]	@ (800e768 <prvAddNewTaskToReadyList+0xc8>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d802      	bhi.n	800e6ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6e8:	4a1f      	ldr	r2, [pc, #124]	@ (800e768 <prvAddNewTaskToReadyList+0xc8>)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6ee:	4b20      	ldr	r3, [pc, #128]	@ (800e770 <prvAddNewTaskToReadyList+0xd0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	4a1e      	ldr	r2, [pc, #120]	@ (800e770 <prvAddNewTaskToReadyList+0xd0>)
 800e6f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e770 <prvAddNewTaskToReadyList+0xd0>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e704:	4b1b      	ldr	r3, [pc, #108]	@ (800e774 <prvAddNewTaskToReadyList+0xd4>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	429a      	cmp	r2, r3
 800e70a:	d903      	bls.n	800e714 <prvAddNewTaskToReadyList+0x74>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e710:	4a18      	ldr	r2, [pc, #96]	@ (800e774 <prvAddNewTaskToReadyList+0xd4>)
 800e712:	6013      	str	r3, [r2, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e718:	4613      	mov	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	4413      	add	r3, r2
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	4a15      	ldr	r2, [pc, #84]	@ (800e778 <prvAddNewTaskToReadyList+0xd8>)
 800e722:	441a      	add	r2, r3
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	3304      	adds	r3, #4
 800e728:	4619      	mov	r1, r3
 800e72a:	4610      	mov	r0, r2
 800e72c:	f7fe fead 	bl	800d48a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e730:	f002 f9fc 	bl	8010b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e734:	4b0d      	ldr	r3, [pc, #52]	@ (800e76c <prvAddNewTaskToReadyList+0xcc>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00e      	beq.n	800e75a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e73c:	4b0a      	ldr	r3, [pc, #40]	@ (800e768 <prvAddNewTaskToReadyList+0xc8>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e746:	429a      	cmp	r2, r3
 800e748:	d207      	bcs.n	800e75a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e74a:	4b0c      	ldr	r3, [pc, #48]	@ (800e77c <prvAddNewTaskToReadyList+0xdc>)
 800e74c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e750:	601a      	str	r2, [r3, #0]
 800e752:	f3bf 8f4f 	dsb	sy
 800e756:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e75a:	bf00      	nop
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	2000339c 	.word	0x2000339c
 800e768:	20002ec8 	.word	0x20002ec8
 800e76c:	200033a8 	.word	0x200033a8
 800e770:	200033b8 	.word	0x200033b8
 800e774:	200033a4 	.word	0x200033a4
 800e778:	20002ecc 	.word	0x20002ecc
 800e77c:	e000ed04 	.word	0xe000ed04

0800e780 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e788:	f002 f99e 	bl	8010ac8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d102      	bne.n	800e798 <vTaskDelete+0x18>
 800e792:	4b2d      	ldr	r3, [pc, #180]	@ (800e848 <vTaskDelete+0xc8>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	e000      	b.n	800e79a <vTaskDelete+0x1a>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fecf 	bl	800d544 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d004      	beq.n	800e7b8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	3318      	adds	r3, #24
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7fe fec6 	bl	800d544 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e7b8:	4b24      	ldr	r3, [pc, #144]	@ (800e84c <vTaskDelete+0xcc>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	4a23      	ldr	r2, [pc, #140]	@ (800e84c <vTaskDelete+0xcc>)
 800e7c0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e7c2:	4b21      	ldr	r3, [pc, #132]	@ (800e848 <vTaskDelete+0xc8>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68fa      	ldr	r2, [r7, #12]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d10b      	bne.n	800e7e4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3304      	adds	r3, #4
 800e7d0:	4619      	mov	r1, r3
 800e7d2:	481f      	ldr	r0, [pc, #124]	@ (800e850 <vTaskDelete+0xd0>)
 800e7d4:	f7fe fe59 	bl	800d48a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e7d8:	4b1e      	ldr	r3, [pc, #120]	@ (800e854 <vTaskDelete+0xd4>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	4a1d      	ldr	r2, [pc, #116]	@ (800e854 <vTaskDelete+0xd4>)
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	e009      	b.n	800e7f8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e7e4:	4b1c      	ldr	r3, [pc, #112]	@ (800e858 <vTaskDelete+0xd8>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e858 <vTaskDelete+0xd8>)
 800e7ec:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f001 f8a0 	bl	800f934 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e7f4:	f001 f8d4 	bl	800f9a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e7f8:	f002 f998 	bl	8010b2c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e7fc:	4b17      	ldr	r3, [pc, #92]	@ (800e85c <vTaskDelete+0xdc>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d01c      	beq.n	800e83e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e804:	4b10      	ldr	r3, [pc, #64]	@ (800e848 <vTaskDelete+0xc8>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d117      	bne.n	800e83e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e80e:	4b14      	ldr	r3, [pc, #80]	@ (800e860 <vTaskDelete+0xe0>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00b      	beq.n	800e82e <vTaskDelete+0xae>
	__asm volatile
 800e816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	60bb      	str	r3, [r7, #8]
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	e7fd      	b.n	800e82a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e82e:	4b0d      	ldr	r3, [pc, #52]	@ (800e864 <vTaskDelete+0xe4>)
 800e830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	f3bf 8f4f 	dsb	sy
 800e83a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e83e:	bf00      	nop
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	20002ec8 	.word	0x20002ec8
 800e84c:	200033b8 	.word	0x200033b8
 800e850:	20003370 	.word	0x20003370
 800e854:	20003384 	.word	0x20003384
 800e858:	2000339c 	.word	0x2000339c
 800e85c:	200033a8 	.word	0x200033a8
 800e860:	200033c4 	.word	0x200033c4
 800e864:	e000ed04 	.word	0xe000ed04

0800e868 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e870:	2300      	movs	r3, #0
 800e872:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d018      	beq.n	800e8ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e87a:	4b14      	ldr	r3, [pc, #80]	@ (800e8cc <vTaskDelay+0x64>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d00b      	beq.n	800e89a <vTaskDelay+0x32>
	__asm volatile
 800e882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e886:	f383 8811 	msr	BASEPRI, r3
 800e88a:	f3bf 8f6f 	isb	sy
 800e88e:	f3bf 8f4f 	dsb	sy
 800e892:	60bb      	str	r3, [r7, #8]
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop
 800e898:	e7fd      	b.n	800e896 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e89a:	f000 fa99 	bl	800edd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e89e:	2100      	movs	r1, #0
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f001 fbb1 	bl	8010008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e8a6:	f000 faa1 	bl	800edec <xTaskResumeAll>
 800e8aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d107      	bne.n	800e8c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e8b2:	4b07      	ldr	r3, [pc, #28]	@ (800e8d0 <vTaskDelay+0x68>)
 800e8b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	200033c4 	.word	0x200033c4
 800e8d0:	e000ed04 	.word	0xe000ed04

0800e8d4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10b      	bne.n	800e8fe <eTaskGetState+0x2a>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	60bb      	str	r3, [r7, #8]
}
 800e8f8:	bf00      	nop
 800e8fa:	bf00      	nop
 800e8fc:	e7fd      	b.n	800e8fa <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e8fe:	4b24      	ldr	r3, [pc, #144]	@ (800e990 <eTaskGetState+0xbc>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	69ba      	ldr	r2, [r7, #24]
 800e904:	429a      	cmp	r2, r3
 800e906:	d102      	bne.n	800e90e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e908:	2300      	movs	r3, #0
 800e90a:	77fb      	strb	r3, [r7, #31]
 800e90c:	e03a      	b.n	800e984 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800e90e:	f002 f8db 	bl	8010ac8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e912:	69bb      	ldr	r3, [r7, #24]
 800e914:	695b      	ldr	r3, [r3, #20]
 800e916:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e918:	4b1e      	ldr	r3, [pc, #120]	@ (800e994 <eTaskGetState+0xc0>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e91e:	4b1e      	ldr	r3, [pc, #120]	@ (800e998 <eTaskGetState+0xc4>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e924:	f002 f902 	bl	8010b2c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d003      	beq.n	800e938 <eTaskGetState+0x64>
 800e930:	697a      	ldr	r2, [r7, #20]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	429a      	cmp	r2, r3
 800e936:	d102      	bne.n	800e93e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e938:	2302      	movs	r3, #2
 800e93a:	77fb      	strb	r3, [r7, #31]
 800e93c:	e022      	b.n	800e984 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	4a16      	ldr	r2, [pc, #88]	@ (800e99c <eTaskGetState+0xc8>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d112      	bne.n	800e96c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10b      	bne.n	800e966 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e94e:	69bb      	ldr	r3, [r7, #24]
 800e950:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e954:	b2db      	uxtb	r3, r3
 800e956:	2b01      	cmp	r3, #1
 800e958:	d102      	bne.n	800e960 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800e95a:	2302      	movs	r3, #2
 800e95c:	77fb      	strb	r3, [r7, #31]
 800e95e:	e011      	b.n	800e984 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800e960:	2303      	movs	r3, #3
 800e962:	77fb      	strb	r3, [r7, #31]
 800e964:	e00e      	b.n	800e984 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e966:	2302      	movs	r3, #2
 800e968:	77fb      	strb	r3, [r7, #31]
 800e96a:	e00b      	b.n	800e984 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	4a0c      	ldr	r2, [pc, #48]	@ (800e9a0 <eTaskGetState+0xcc>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d002      	beq.n	800e97a <eTaskGetState+0xa6>
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d102      	bne.n	800e980 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e97a:	2304      	movs	r3, #4
 800e97c:	77fb      	strb	r3, [r7, #31]
 800e97e:	e001      	b.n	800e984 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e980:	2301      	movs	r3, #1
 800e982:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e984:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e986:	4618      	mov	r0, r3
 800e988:	3720      	adds	r7, #32
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	20002ec8 	.word	0x20002ec8
 800e994:	20003354 	.word	0x20003354
 800e998:	20003358 	.word	0x20003358
 800e99c:	20003388 	.word	0x20003388
 800e9a0:	20003370 	.word	0x20003370

0800e9a4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	2b37      	cmp	r3, #55	@ 0x37
 800e9b6:	d90b      	bls.n	800e9d0 <vTaskPrioritySet+0x2c>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	60fb      	str	r3, [r7, #12]
}
 800e9ca:	bf00      	nop
 800e9cc:	bf00      	nop
 800e9ce:	e7fd      	b.n	800e9cc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b37      	cmp	r3, #55	@ 0x37
 800e9d4:	d901      	bls.n	800e9da <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9d6:	2337      	movs	r3, #55	@ 0x37
 800e9d8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800e9da:	f002 f875 	bl	8010ac8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d102      	bne.n	800e9ea <vTaskPrioritySet+0x46>
 800e9e4:	4b3a      	ldr	r3, [pc, #232]	@ (800ead0 <vTaskPrioritySet+0x12c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	e000      	b.n	800e9ec <vTaskPrioritySet+0x48>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e9f2:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d063      	beq.n	800eac4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d90d      	bls.n	800ea20 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800ea04:	4b32      	ldr	r3, [pc, #200]	@ (800ead0 <vTaskPrioritySet+0x12c>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	69ba      	ldr	r2, [r7, #24]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d00f      	beq.n	800ea2e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ea0e:	4b30      	ldr	r3, [pc, #192]	@ (800ead0 <vTaskPrioritySet+0x12c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea14:	683a      	ldr	r2, [r7, #0]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d309      	bcc.n	800ea2e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	61fb      	str	r3, [r7, #28]
 800ea1e:	e006      	b.n	800ea2e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800ea20:	4b2b      	ldr	r3, [pc, #172]	@ (800ead0 <vTaskPrioritySet+0x12c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	69ba      	ldr	r2, [r7, #24]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d101      	bne.n	800ea2e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea32:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d102      	bne.n	800ea46 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	683a      	ldr	r2, [r7, #0]
 800ea44:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	683a      	ldr	r2, [r7, #0]
 800ea4a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea4c:	69bb      	ldr	r3, [r7, #24]
 800ea4e:	699b      	ldr	r3, [r3, #24]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	db04      	blt.n	800ea5e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea5a:	69bb      	ldr	r3, [r7, #24]
 800ea5c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	6959      	ldr	r1, [r3, #20]
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	4613      	mov	r3, r2
 800ea66:	009b      	lsls	r3, r3, #2
 800ea68:	4413      	add	r3, r2
 800ea6a:	009b      	lsls	r3, r3, #2
 800ea6c:	4a19      	ldr	r2, [pc, #100]	@ (800ead4 <vTaskPrioritySet+0x130>)
 800ea6e:	4413      	add	r3, r2
 800ea70:	4299      	cmp	r1, r3
 800ea72:	d11c      	bne.n	800eaae <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe fd63 	bl	800d544 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea82:	4b15      	ldr	r3, [pc, #84]	@ (800ead8 <vTaskPrioritySet+0x134>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d903      	bls.n	800ea92 <vTaskPrioritySet+0xee>
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea8e:	4a12      	ldr	r2, [pc, #72]	@ (800ead8 <vTaskPrioritySet+0x134>)
 800ea90:	6013      	str	r3, [r2, #0]
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea96:	4613      	mov	r3, r2
 800ea98:	009b      	lsls	r3, r3, #2
 800ea9a:	4413      	add	r3, r2
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4a0d      	ldr	r2, [pc, #52]	@ (800ead4 <vTaskPrioritySet+0x130>)
 800eaa0:	441a      	add	r2, r3
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	f7fe fcee 	bl	800d48a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800eaae:	69fb      	ldr	r3, [r7, #28]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d007      	beq.n	800eac4 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800eab4:	4b09      	ldr	r3, [pc, #36]	@ (800eadc <vTaskPrioritySet+0x138>)
 800eab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	f3bf 8f4f 	dsb	sy
 800eac0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800eac4:	f002 f832 	bl	8010b2c <vPortExitCritical>
	}
 800eac8:	bf00      	nop
 800eaca:	3720      	adds	r7, #32
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	20002ec8 	.word	0x20002ec8
 800ead4:	20002ecc 	.word	0x20002ecc
 800ead8:	200033a4 	.word	0x200033a4
 800eadc:	e000ed04 	.word	0xe000ed04

0800eae0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eae8:	f001 ffee 	bl	8010ac8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d102      	bne.n	800eaf8 <vTaskSuspend+0x18>
 800eaf2:	4b30      	ldr	r3, [pc, #192]	@ (800ebb4 <vTaskSuspend+0xd4>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	e000      	b.n	800eafa <vTaskSuspend+0x1a>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	3304      	adds	r3, #4
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fe fd1f 	bl	800d544 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d004      	beq.n	800eb18 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	3318      	adds	r3, #24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe fd16 	bl	800d544 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3304      	adds	r3, #4
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	4826      	ldr	r0, [pc, #152]	@ (800ebb8 <vTaskSuspend+0xd8>)
 800eb20:	f7fe fcb3 	bl	800d48a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d103      	bne.n	800eb38 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2200      	movs	r2, #0
 800eb34:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800eb38:	f001 fff8 	bl	8010b2c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800eb3c:	4b1f      	ldr	r3, [pc, #124]	@ (800ebbc <vTaskSuspend+0xdc>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d005      	beq.n	800eb50 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800eb44:	f001 ffc0 	bl	8010ac8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800eb48:	f000 ff2a 	bl	800f9a0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800eb4c:	f001 ffee 	bl	8010b2c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800eb50:	4b18      	ldr	r3, [pc, #96]	@ (800ebb4 <vTaskSuspend+0xd4>)
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	68fa      	ldr	r2, [r7, #12]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d128      	bne.n	800ebac <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800eb5a:	4b18      	ldr	r3, [pc, #96]	@ (800ebbc <vTaskSuspend+0xdc>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d018      	beq.n	800eb94 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800eb62:	4b17      	ldr	r3, [pc, #92]	@ (800ebc0 <vTaskSuspend+0xe0>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00b      	beq.n	800eb82 <vTaskSuspend+0xa2>
	__asm volatile
 800eb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6e:	f383 8811 	msr	BASEPRI, r3
 800eb72:	f3bf 8f6f 	isb	sy
 800eb76:	f3bf 8f4f 	dsb	sy
 800eb7a:	60bb      	str	r3, [r7, #8]
}
 800eb7c:	bf00      	nop
 800eb7e:	bf00      	nop
 800eb80:	e7fd      	b.n	800eb7e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800eb82:	4b10      	ldr	r3, [pc, #64]	@ (800ebc4 <vTaskSuspend+0xe4>)
 800eb84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	f3bf 8f4f 	dsb	sy
 800eb8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb92:	e00b      	b.n	800ebac <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800eb94:	4b08      	ldr	r3, [pc, #32]	@ (800ebb8 <vTaskSuspend+0xd8>)
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	4b0b      	ldr	r3, [pc, #44]	@ (800ebc8 <vTaskSuspend+0xe8>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d103      	bne.n	800eba8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800eba0:	4b04      	ldr	r3, [pc, #16]	@ (800ebb4 <vTaskSuspend+0xd4>)
 800eba2:	2200      	movs	r2, #0
 800eba4:	601a      	str	r2, [r3, #0]
	}
 800eba6:	e001      	b.n	800ebac <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800eba8:	f000 fb5c 	bl	800f264 <vTaskSwitchContext>
	}
 800ebac:	bf00      	nop
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	20002ec8 	.word	0x20002ec8
 800ebb8:	20003388 	.word	0x20003388
 800ebbc:	200033a8 	.word	0x200033a8
 800ebc0:	200033c4 	.word	0x200033c4
 800ebc4:	e000ed04 	.word	0xe000ed04
 800ebc8:	2000339c 	.word	0x2000339c

0800ebcc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ebcc:	b480      	push	{r7}
 800ebce:	b087      	sub	sp, #28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d10b      	bne.n	800ebfa <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebe6:	f383 8811 	msr	BASEPRI, r3
 800ebea:	f3bf 8f6f 	isb	sy
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	60fb      	str	r3, [r7, #12]
}
 800ebf4:	bf00      	nop
 800ebf6:	bf00      	nop
 800ebf8:	e7fd      	b.n	800ebf6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	695b      	ldr	r3, [r3, #20]
 800ebfe:	4a0a      	ldr	r2, [pc, #40]	@ (800ec28 <prvTaskIsTaskSuspended+0x5c>)
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d10a      	bne.n	800ec1a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec08:	4a08      	ldr	r2, [pc, #32]	@ (800ec2c <prvTaskIsTaskSuspended+0x60>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d005      	beq.n	800ec1a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800ec16:	2301      	movs	r3, #1
 800ec18:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec1a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	371c      	adds	r7, #28
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr
 800ec28:	20003388 	.word	0x20003388
 800ec2c:	2000335c 	.word	0x2000335c

0800ec30 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10b      	bne.n	800ec5a <vTaskResume+0x2a>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	60bb      	str	r3, [r7, #8]
}
 800ec54:	bf00      	nop
 800ec56:	bf00      	nop
 800ec58:	e7fd      	b.n	800ec56 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ec5a:	4b21      	ldr	r3, [pc, #132]	@ (800ece0 <vTaskResume+0xb0>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d038      	beq.n	800ecd6 <vTaskResume+0xa6>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d035      	beq.n	800ecd6 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800ec6a:	f001 ff2d 	bl	8010ac8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f7ff ffac 	bl	800ebcc <prvTaskIsTaskSuspended>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d02b      	beq.n	800ecd2 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fe fc60 	bl	800d544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec88:	4b16      	ldr	r3, [pc, #88]	@ (800ece4 <vTaskResume+0xb4>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d903      	bls.n	800ec98 <vTaskResume+0x68>
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec94:	4a13      	ldr	r2, [pc, #76]	@ (800ece4 <vTaskResume+0xb4>)
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	009b      	lsls	r3, r3, #2
 800eca0:	4413      	add	r3, r2
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4a10      	ldr	r2, [pc, #64]	@ (800ece8 <vTaskResume+0xb8>)
 800eca6:	441a      	add	r2, r3
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4619      	mov	r1, r3
 800ecae:	4610      	mov	r0, r2
 800ecb0:	f7fe fbeb 	bl	800d48a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecb8:	4b09      	ldr	r3, [pc, #36]	@ (800ece0 <vTaskResume+0xb0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d307      	bcc.n	800ecd2 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ecc2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecec <vTaskResume+0xbc>)
 800ecc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecc8:	601a      	str	r2, [r3, #0]
 800ecca:	f3bf 8f4f 	dsb	sy
 800ecce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ecd2:	f001 ff2b 	bl	8010b2c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecd6:	bf00      	nop
 800ecd8:	3710      	adds	r7, #16
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	20002ec8 	.word	0x20002ec8
 800ece4:	200033a4 	.word	0x200033a4
 800ece8:	20002ecc 	.word	0x20002ecc
 800ecec:	e000ed04 	.word	0xe000ed04

0800ecf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b08a      	sub	sp, #40	@ 0x28
 800ecf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ecfe:	463a      	mov	r2, r7
 800ed00:	1d39      	adds	r1, r7, #4
 800ed02:	f107 0308 	add.w	r3, r7, #8
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7fe f9a2 	bl	800d050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed0c:	6839      	ldr	r1, [r7, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	68ba      	ldr	r2, [r7, #8]
 800ed12:	9202      	str	r2, [sp, #8]
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	2300      	movs	r3, #0
 800ed18:	9300      	str	r3, [sp, #0]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	460a      	mov	r2, r1
 800ed1e:	4924      	ldr	r1, [pc, #144]	@ (800edb0 <vTaskStartScheduler+0xc0>)
 800ed20:	4824      	ldr	r0, [pc, #144]	@ (800edb4 <vTaskStartScheduler+0xc4>)
 800ed22:	f7ff fb6f 	bl	800e404 <xTaskCreateStatic>
 800ed26:	4603      	mov	r3, r0
 800ed28:	4a23      	ldr	r2, [pc, #140]	@ (800edb8 <vTaskStartScheduler+0xc8>)
 800ed2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed2c:	4b22      	ldr	r3, [pc, #136]	@ (800edb8 <vTaskStartScheduler+0xc8>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed34:	2301      	movs	r3, #1
 800ed36:	617b      	str	r3, [r7, #20]
 800ed38:	e001      	b.n	800ed3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d102      	bne.n	800ed4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed44:	f001 f9b4 	bl	80100b0 <xTimerCreateTimerTask>
 800ed48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	d11b      	bne.n	800ed88 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed54:	f383 8811 	msr	BASEPRI, r3
 800ed58:	f3bf 8f6f 	isb	sy
 800ed5c:	f3bf 8f4f 	dsb	sy
 800ed60:	613b      	str	r3, [r7, #16]
}
 800ed62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed64:	4b15      	ldr	r3, [pc, #84]	@ (800edbc <vTaskStartScheduler+0xcc>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3354      	adds	r3, #84	@ 0x54
 800ed6a:	4a15      	ldr	r2, [pc, #84]	@ (800edc0 <vTaskStartScheduler+0xd0>)
 800ed6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed6e:	4b15      	ldr	r3, [pc, #84]	@ (800edc4 <vTaskStartScheduler+0xd4>)
 800ed70:	f04f 32ff 	mov.w	r2, #4294967295
 800ed74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed76:	4b14      	ldr	r3, [pc, #80]	@ (800edc8 <vTaskStartScheduler+0xd8>)
 800ed78:	2201      	movs	r2, #1
 800ed7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed7c:	4b13      	ldr	r3, [pc, #76]	@ (800edcc <vTaskStartScheduler+0xdc>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed82:	f001 fdfd 	bl	8010980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed86:	e00f      	b.n	800eda8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed8e:	d10b      	bne.n	800eda8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800ed90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed94:	f383 8811 	msr	BASEPRI, r3
 800ed98:	f3bf 8f6f 	isb	sy
 800ed9c:	f3bf 8f4f 	dsb	sy
 800eda0:	60fb      	str	r3, [r7, #12]
}
 800eda2:	bf00      	nop
 800eda4:	bf00      	nop
 800eda6:	e7fd      	b.n	800eda4 <vTaskStartScheduler+0xb4>
}
 800eda8:	bf00      	nop
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	080165ac 	.word	0x080165ac
 800edb4:	0800f6ed 	.word	0x0800f6ed
 800edb8:	200033c0 	.word	0x200033c0
 800edbc:	20002ec8 	.word	0x20002ec8
 800edc0:	2000040c 	.word	0x2000040c
 800edc4:	200033bc 	.word	0x200033bc
 800edc8:	200033a8 	.word	0x200033a8
 800edcc:	200033a0 	.word	0x200033a0

0800edd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800edd0:	b480      	push	{r7}
 800edd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800edd4:	4b04      	ldr	r3, [pc, #16]	@ (800ede8 <vTaskSuspendAll+0x18>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3301      	adds	r3, #1
 800edda:	4a03      	ldr	r2, [pc, #12]	@ (800ede8 <vTaskSuspendAll+0x18>)
 800eddc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edde:	bf00      	nop
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	200033c4 	.word	0x200033c4

0800edec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800edf6:	2300      	movs	r3, #0
 800edf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800edfa:	4b42      	ldr	r3, [pc, #264]	@ (800ef04 <xTaskResumeAll+0x118>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10b      	bne.n	800ee1a <xTaskResumeAll+0x2e>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	603b      	str	r3, [r7, #0]
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop
 800ee18:	e7fd      	b.n	800ee16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee1a:	f001 fe55 	bl	8010ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee1e:	4b39      	ldr	r3, [pc, #228]	@ (800ef04 <xTaskResumeAll+0x118>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3b01      	subs	r3, #1
 800ee24:	4a37      	ldr	r2, [pc, #220]	@ (800ef04 <xTaskResumeAll+0x118>)
 800ee26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee28:	4b36      	ldr	r3, [pc, #216]	@ (800ef04 <xTaskResumeAll+0x118>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d162      	bne.n	800eef6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee30:	4b35      	ldr	r3, [pc, #212]	@ (800ef08 <xTaskResumeAll+0x11c>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d05e      	beq.n	800eef6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee38:	e02f      	b.n	800ee9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee3a:	4b34      	ldr	r3, [pc, #208]	@ (800ef0c <xTaskResumeAll+0x120>)
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	3318      	adds	r3, #24
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fe fb7c 	bl	800d544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	3304      	adds	r3, #4
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fe fb77 	bl	800d544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee5a:	4b2d      	ldr	r3, [pc, #180]	@ (800ef10 <xTaskResumeAll+0x124>)
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d903      	bls.n	800ee6a <xTaskResumeAll+0x7e>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee66:	4a2a      	ldr	r2, [pc, #168]	@ (800ef10 <xTaskResumeAll+0x124>)
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee6e:	4613      	mov	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	4413      	add	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4a27      	ldr	r2, [pc, #156]	@ (800ef14 <xTaskResumeAll+0x128>)
 800ee78:	441a      	add	r2, r3
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	3304      	adds	r3, #4
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4610      	mov	r0, r2
 800ee82:	f7fe fb02 	bl	800d48a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee8a:	4b23      	ldr	r3, [pc, #140]	@ (800ef18 <xTaskResumeAll+0x12c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d302      	bcc.n	800ee9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ee94:	4b21      	ldr	r3, [pc, #132]	@ (800ef1c <xTaskResumeAll+0x130>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee9a:	4b1c      	ldr	r3, [pc, #112]	@ (800ef0c <xTaskResumeAll+0x120>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1cb      	bne.n	800ee3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eea8:	f000 fd7a 	bl	800f9a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eeac:	4b1c      	ldr	r3, [pc, #112]	@ (800ef20 <xTaskResumeAll+0x134>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d010      	beq.n	800eeda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eeb8:	f000 f91a 	bl	800f0f0 <xTaskIncrementTick>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800eec2:	4b16      	ldr	r3, [pc, #88]	@ (800ef1c <xTaskResumeAll+0x130>)
 800eec4:	2201      	movs	r2, #1
 800eec6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	3b01      	subs	r3, #1
 800eecc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d1f1      	bne.n	800eeb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800eed4:	4b12      	ldr	r3, [pc, #72]	@ (800ef20 <xTaskResumeAll+0x134>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eeda:	4b10      	ldr	r3, [pc, #64]	@ (800ef1c <xTaskResumeAll+0x130>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d009      	beq.n	800eef6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eee2:	2301      	movs	r3, #1
 800eee4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eee6:	4b0f      	ldr	r3, [pc, #60]	@ (800ef24 <xTaskResumeAll+0x138>)
 800eee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eef6:	f001 fe19 	bl	8010b2c <vPortExitCritical>

	return xAlreadyYielded;
 800eefa:	68bb      	ldr	r3, [r7, #8]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	200033c4 	.word	0x200033c4
 800ef08:	2000339c 	.word	0x2000339c
 800ef0c:	2000335c 	.word	0x2000335c
 800ef10:	200033a4 	.word	0x200033a4
 800ef14:	20002ecc 	.word	0x20002ecc
 800ef18:	20002ec8 	.word	0x20002ec8
 800ef1c:	200033b0 	.word	0x200033b0
 800ef20:	200033ac 	.word	0x200033ac
 800ef24:	e000ed04 	.word	0xe000ed04

0800ef28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef2e:	4b05      	ldr	r3, [pc, #20]	@ (800ef44 <xTaskGetTickCount+0x1c>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef34:	687b      	ldr	r3, [r7, #4]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	200033a0 	.word	0x200033a0

0800ef48 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800ef48:	b480      	push	{r7}
 800ef4a:	b08b      	sub	sp, #44	@ 0x2c
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800ef52:	2300      	movs	r3, #0
 800ef54:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d05b      	beq.n	800f016 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	61bb      	str	r3, [r7, #24]
 800ef62:	69bb      	ldr	r3, [r7, #24]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	685a      	ldr	r2, [r3, #4]
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	605a      	str	r2, [r3, #4]
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	685a      	ldr	r2, [r3, #4]
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	3308      	adds	r3, #8
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d104      	bne.n	800ef82 <prvSearchForNameWithinSingleList+0x3a>
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	685a      	ldr	r2, [r3, #4]
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	605a      	str	r2, [r3, #4]
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	613b      	str	r3, [r7, #16]
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	685a      	ldr	r2, [r3, #4]
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	605a      	str	r2, [r3, #4]
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	685a      	ldr	r2, [r3, #4]
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	3308      	adds	r3, #8
 800efa0:	429a      	cmp	r2, r3
 800efa2:	d104      	bne.n	800efae <prvSearchForNameWithinSingleList+0x66>
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	605a      	str	r2, [r3, #4]
 800efae:	693b      	ldr	r3, [r7, #16]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800efb6:	2300      	movs	r3, #0
 800efb8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efba:	2300      	movs	r3, #0
 800efbc:	623b      	str	r3, [r7, #32]
 800efbe:	e01c      	b.n	800effa <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	6a3b      	ldr	r3, [r7, #32]
 800efc4:	4413      	add	r3, r2
 800efc6:	3334      	adds	r3, #52	@ 0x34
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	4413      	add	r3, r2
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	7afa      	ldrb	r2, [r7, #11]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d002      	beq.n	800efe0 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800efda:	2301      	movs	r3, #1
 800efdc:	61fb      	str	r3, [r7, #28]
 800efde:	e006      	b.n	800efee <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800efe0:	7afb      	ldrb	r3, [r7, #11]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d103      	bne.n	800efee <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800efea:	2301      	movs	r3, #1
 800efec:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d106      	bne.n	800f002 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	3301      	adds	r3, #1
 800eff8:	623b      	str	r3, [r7, #32]
 800effa:	6a3b      	ldr	r3, [r7, #32]
 800effc:	2b0f      	cmp	r3, #15
 800effe:	d9df      	bls.n	800efc0 <prvSearchForNameWithinSingleList+0x78>
 800f000:	e000      	b.n	800f004 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800f002:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800f004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f006:	2b00      	cmp	r3, #0
 800f008:	d104      	bne.n	800f014 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d1bb      	bne.n	800ef8a <prvSearchForNameWithinSingleList+0x42>
 800f012:	e000      	b.n	800f016 <prvSearchForNameWithinSingleList+0xce>
					break;
 800f014:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800f016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f018:	4618      	mov	r0, r3
 800f01a:	372c      	adds	r7, #44	@ 0x2c
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f024:	b580      	push	{r7, lr}
 800f026:	b086      	sub	sp, #24
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800f02c:	2338      	movs	r3, #56	@ 0x38
 800f02e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7f1 f91d 	bl	8000270 <strlen>
 800f036:	4603      	mov	r3, r0
 800f038:	2b0f      	cmp	r3, #15
 800f03a:	d90b      	bls.n	800f054 <xTaskGetHandle+0x30>
	__asm volatile
 800f03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f040:	f383 8811 	msr	BASEPRI, r3
 800f044:	f3bf 8f6f 	isb	sy
 800f048:	f3bf 8f4f 	dsb	sy
 800f04c:	60fb      	str	r3, [r7, #12]
}
 800f04e:	bf00      	nop
 800f050:	bf00      	nop
 800f052:	e7fd      	b.n	800f050 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800f054:	f7ff febc 	bl	800edd0 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	3b01      	subs	r3, #1
 800f05c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800f05e:	697a      	ldr	r2, [r7, #20]
 800f060:	4613      	mov	r3, r2
 800f062:	009b      	lsls	r3, r3, #2
 800f064:	4413      	add	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	4a1c      	ldr	r2, [pc, #112]	@ (800f0dc <xTaskGetHandle+0xb8>)
 800f06a:	4413      	add	r3, r2
 800f06c:	6879      	ldr	r1, [r7, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff ff6a 	bl	800ef48 <prvSearchForNameWithinSingleList>
 800f074:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d103      	bne.n	800f084 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1ea      	bne.n	800f058 <xTaskGetHandle+0x34>
 800f082:	e000      	b.n	800f086 <xTaskGetHandle+0x62>
					break;
 800f084:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d106      	bne.n	800f09a <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800f08c:	4b14      	ldr	r3, [pc, #80]	@ (800f0e0 <xTaskGetHandle+0xbc>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	6879      	ldr	r1, [r7, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	f7ff ff58 	bl	800ef48 <prvSearchForNameWithinSingleList>
 800f098:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d106      	bne.n	800f0ae <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800f0a0:	4b10      	ldr	r3, [pc, #64]	@ (800f0e4 <xTaskGetHandle+0xc0>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff ff4e 	bl	800ef48 <prvSearchForNameWithinSingleList>
 800f0ac:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d104      	bne.n	800f0be <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800f0b4:	6879      	ldr	r1, [r7, #4]
 800f0b6:	480c      	ldr	r0, [pc, #48]	@ (800f0e8 <xTaskGetHandle+0xc4>)
 800f0b8:	f7ff ff46 	bl	800ef48 <prvSearchForNameWithinSingleList>
 800f0bc:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d104      	bne.n	800f0ce <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	4809      	ldr	r0, [pc, #36]	@ (800f0ec <xTaskGetHandle+0xc8>)
 800f0c8:	f7ff ff3e 	bl	800ef48 <prvSearchForNameWithinSingleList>
 800f0cc:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800f0ce:	f7ff fe8d 	bl	800edec <xTaskResumeAll>

		return pxTCB;
 800f0d2:	693b      	ldr	r3, [r7, #16]
	}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3718      	adds	r7, #24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}
 800f0dc:	20002ecc 	.word	0x20002ecc
 800f0e0:	20003354 	.word	0x20003354
 800f0e4:	20003358 	.word	0x20003358
 800f0e8:	20003388 	.word	0x20003388
 800f0ec:	20003370 	.word	0x20003370

0800f0f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b086      	sub	sp, #24
 800f0f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0fa:	4b4f      	ldr	r3, [pc, #316]	@ (800f238 <xTaskIncrementTick+0x148>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	f040 8090 	bne.w	800f224 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f104:	4b4d      	ldr	r3, [pc, #308]	@ (800f23c <xTaskIncrementTick+0x14c>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	3301      	adds	r3, #1
 800f10a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f10c:	4a4b      	ldr	r2, [pc, #300]	@ (800f23c <xTaskIncrementTick+0x14c>)
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d121      	bne.n	800f15c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f118:	4b49      	ldr	r3, [pc, #292]	@ (800f240 <xTaskIncrementTick+0x150>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00b      	beq.n	800f13a <xTaskIncrementTick+0x4a>
	__asm volatile
 800f122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f126:	f383 8811 	msr	BASEPRI, r3
 800f12a:	f3bf 8f6f 	isb	sy
 800f12e:	f3bf 8f4f 	dsb	sy
 800f132:	603b      	str	r3, [r7, #0]
}
 800f134:	bf00      	nop
 800f136:	bf00      	nop
 800f138:	e7fd      	b.n	800f136 <xTaskIncrementTick+0x46>
 800f13a:	4b41      	ldr	r3, [pc, #260]	@ (800f240 <xTaskIncrementTick+0x150>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	4b40      	ldr	r3, [pc, #256]	@ (800f244 <xTaskIncrementTick+0x154>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4a3e      	ldr	r2, [pc, #248]	@ (800f240 <xTaskIncrementTick+0x150>)
 800f146:	6013      	str	r3, [r2, #0]
 800f148:	4a3e      	ldr	r2, [pc, #248]	@ (800f244 <xTaskIncrementTick+0x154>)
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6013      	str	r3, [r2, #0]
 800f14e:	4b3e      	ldr	r3, [pc, #248]	@ (800f248 <xTaskIncrementTick+0x158>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3301      	adds	r3, #1
 800f154:	4a3c      	ldr	r2, [pc, #240]	@ (800f248 <xTaskIncrementTick+0x158>)
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	f000 fc22 	bl	800f9a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f15c:	4b3b      	ldr	r3, [pc, #236]	@ (800f24c <xTaskIncrementTick+0x15c>)
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	693a      	ldr	r2, [r7, #16]
 800f162:	429a      	cmp	r2, r3
 800f164:	d349      	bcc.n	800f1fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f166:	4b36      	ldr	r3, [pc, #216]	@ (800f240 <xTaskIncrementTick+0x150>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d104      	bne.n	800f17a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f170:	4b36      	ldr	r3, [pc, #216]	@ (800f24c <xTaskIncrementTick+0x15c>)
 800f172:	f04f 32ff 	mov.w	r2, #4294967295
 800f176:	601a      	str	r2, [r3, #0]
					break;
 800f178:	e03f      	b.n	800f1fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f17a:	4b31      	ldr	r3, [pc, #196]	@ (800f240 <xTaskIncrementTick+0x150>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	68db      	ldr	r3, [r3, #12]
 800f182:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d203      	bcs.n	800f19a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f192:	4a2e      	ldr	r2, [pc, #184]	@ (800f24c <xTaskIncrementTick+0x15c>)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f198:	e02f      	b.n	800f1fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	3304      	adds	r3, #4
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fe f9d0 	bl	800d544 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d004      	beq.n	800f1b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	3318      	adds	r3, #24
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fe f9c7 	bl	800d544 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ba:	4b25      	ldr	r3, [pc, #148]	@ (800f250 <xTaskIncrementTick+0x160>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d903      	bls.n	800f1ca <xTaskIncrementTick+0xda>
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c6:	4a22      	ldr	r2, [pc, #136]	@ (800f250 <xTaskIncrementTick+0x160>)
 800f1c8:	6013      	str	r3, [r2, #0]
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	4413      	add	r3, r2
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	4a1f      	ldr	r2, [pc, #124]	@ (800f254 <xTaskIncrementTick+0x164>)
 800f1d8:	441a      	add	r2, r3
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	4619      	mov	r1, r3
 800f1e0:	4610      	mov	r0, r2
 800f1e2:	f7fe f952 	bl	800d48a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800f258 <xTaskIncrementTick+0x168>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d3b8      	bcc.n	800f166 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1f8:	e7b5      	b.n	800f166 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f1fa:	4b17      	ldr	r3, [pc, #92]	@ (800f258 <xTaskIncrementTick+0x168>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f200:	4914      	ldr	r1, [pc, #80]	@ (800f254 <xTaskIncrementTick+0x164>)
 800f202:	4613      	mov	r3, r2
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	4413      	add	r3, r2
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	440b      	add	r3, r1
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d901      	bls.n	800f216 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f212:	2301      	movs	r3, #1
 800f214:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f216:	4b11      	ldr	r3, [pc, #68]	@ (800f25c <xTaskIncrementTick+0x16c>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d007      	beq.n	800f22e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f21e:	2301      	movs	r3, #1
 800f220:	617b      	str	r3, [r7, #20]
 800f222:	e004      	b.n	800f22e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f224:	4b0e      	ldr	r3, [pc, #56]	@ (800f260 <xTaskIncrementTick+0x170>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	3301      	adds	r3, #1
 800f22a:	4a0d      	ldr	r2, [pc, #52]	@ (800f260 <xTaskIncrementTick+0x170>)
 800f22c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f22e:	697b      	ldr	r3, [r7, #20]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	200033c4 	.word	0x200033c4
 800f23c:	200033a0 	.word	0x200033a0
 800f240:	20003354 	.word	0x20003354
 800f244:	20003358 	.word	0x20003358
 800f248:	200033b4 	.word	0x200033b4
 800f24c:	200033bc 	.word	0x200033bc
 800f250:	200033a4 	.word	0x200033a4
 800f254:	20002ecc 	.word	0x20002ecc
 800f258:	20002ec8 	.word	0x20002ec8
 800f25c:	200033b0 	.word	0x200033b0
 800f260:	200033ac 	.word	0x200033ac

0800f264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f26a:	4b2b      	ldr	r3, [pc, #172]	@ (800f318 <vTaskSwitchContext+0xb4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d003      	beq.n	800f27a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f272:	4b2a      	ldr	r3, [pc, #168]	@ (800f31c <vTaskSwitchContext+0xb8>)
 800f274:	2201      	movs	r2, #1
 800f276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f278:	e047      	b.n	800f30a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f27a:	4b28      	ldr	r3, [pc, #160]	@ (800f31c <vTaskSwitchContext+0xb8>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f280:	4b27      	ldr	r3, [pc, #156]	@ (800f320 <vTaskSwitchContext+0xbc>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	60fb      	str	r3, [r7, #12]
 800f286:	e011      	b.n	800f2ac <vTaskSwitchContext+0x48>
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10b      	bne.n	800f2a6 <vTaskSwitchContext+0x42>
	__asm volatile
 800f28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f292:	f383 8811 	msr	BASEPRI, r3
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	f3bf 8f4f 	dsb	sy
 800f29e:	607b      	str	r3, [r7, #4]
}
 800f2a0:	bf00      	nop
 800f2a2:	bf00      	nop
 800f2a4:	e7fd      	b.n	800f2a2 <vTaskSwitchContext+0x3e>
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	491d      	ldr	r1, [pc, #116]	@ (800f324 <vTaskSwitchContext+0xc0>)
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	009b      	lsls	r3, r3, #2
 800f2b4:	4413      	add	r3, r2
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	440b      	add	r3, r1
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d0e3      	beq.n	800f288 <vTaskSwitchContext+0x24>
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	4413      	add	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4a16      	ldr	r2, [pc, #88]	@ (800f324 <vTaskSwitchContext+0xc0>)
 800f2cc:	4413      	add	r3, r2
 800f2ce:	60bb      	str	r3, [r7, #8]
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	605a      	str	r2, [r3, #4]
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	3308      	adds	r3, #8
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d104      	bne.n	800f2f0 <vTaskSwitchContext+0x8c>
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	685a      	ldr	r2, [r3, #4]
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	605a      	str	r2, [r3, #4]
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	685b      	ldr	r3, [r3, #4]
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	4a0c      	ldr	r2, [pc, #48]	@ (800f328 <vTaskSwitchContext+0xc4>)
 800f2f8:	6013      	str	r3, [r2, #0]
 800f2fa:	4a09      	ldr	r2, [pc, #36]	@ (800f320 <vTaskSwitchContext+0xbc>)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f300:	4b09      	ldr	r3, [pc, #36]	@ (800f328 <vTaskSwitchContext+0xc4>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	3354      	adds	r3, #84	@ 0x54
 800f306:	4a09      	ldr	r2, [pc, #36]	@ (800f32c <vTaskSwitchContext+0xc8>)
 800f308:	6013      	str	r3, [r2, #0]
}
 800f30a:	bf00      	nop
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	200033c4 	.word	0x200033c4
 800f31c:	200033b0 	.word	0x200033b0
 800f320:	200033a4 	.word	0x200033a4
 800f324:	20002ecc 	.word	0x20002ecc
 800f328:	20002ec8 	.word	0x20002ec8
 800f32c:	2000040c 	.word	0x2000040c

0800f330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10b      	bne.n	800f358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	60fb      	str	r3, [r7, #12]
}
 800f352:	bf00      	nop
 800f354:	bf00      	nop
 800f356:	e7fd      	b.n	800f354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f358:	4b07      	ldr	r3, [pc, #28]	@ (800f378 <vTaskPlaceOnEventList+0x48>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	3318      	adds	r3, #24
 800f35e:	4619      	mov	r1, r3
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7fe f8b6 	bl	800d4d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f366:	2101      	movs	r1, #1
 800f368:	6838      	ldr	r0, [r7, #0]
 800f36a:	f000 fe4d 	bl	8010008 <prvAddCurrentTaskToDelayedList>
}
 800f36e:	bf00      	nop
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	20002ec8 	.word	0x20002ec8

0800f37c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10b      	bne.n	800f3a6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	617b      	str	r3, [r7, #20]
}
 800f3a0:	bf00      	nop
 800f3a2:	bf00      	nop
 800f3a4:	e7fd      	b.n	800f3a2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f3a6:	4b12      	ldr	r3, [pc, #72]	@ (800f3f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10b      	bne.n	800f3c6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800f3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b2:	f383 8811 	msr	BASEPRI, r3
 800f3b6:	f3bf 8f6f 	isb	sy
 800f3ba:	f3bf 8f4f 	dsb	sy
 800f3be:	613b      	str	r3, [r7, #16]
}
 800f3c0:	bf00      	nop
 800f3c2:	bf00      	nop
 800f3c4:	e7fd      	b.n	800f3c2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3d0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3d2:	4b08      	ldr	r3, [pc, #32]	@ (800f3f4 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	3318      	adds	r3, #24
 800f3d8:	4619      	mov	r1, r3
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f7fe f855 	bl	800d48a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3e0:	2101      	movs	r1, #1
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fe10 	bl	8010008 <prvAddCurrentTaskToDelayedList>
}
 800f3e8:	bf00      	nop
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}
 800f3f0:	200033c4 	.word	0x200033c4
 800f3f4:	20002ec8 	.word	0x20002ec8

0800f3f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d10b      	bne.n	800f422 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40e:	f383 8811 	msr	BASEPRI, r3
 800f412:	f3bf 8f6f 	isb	sy
 800f416:	f3bf 8f4f 	dsb	sy
 800f41a:	617b      	str	r3, [r7, #20]
}
 800f41c:	bf00      	nop
 800f41e:	bf00      	nop
 800f420:	e7fd      	b.n	800f41e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f422:	4b0a      	ldr	r3, [pc, #40]	@ (800f44c <vTaskPlaceOnEventListRestricted+0x54>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	3318      	adds	r3, #24
 800f428:	4619      	mov	r1, r3
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f7fe f82d 	bl	800d48a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d002      	beq.n	800f43c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f436:	f04f 33ff 	mov.w	r3, #4294967295
 800f43a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f43c:	6879      	ldr	r1, [r7, #4]
 800f43e:	68b8      	ldr	r0, [r7, #8]
 800f440:	f000 fde2 	bl	8010008 <prvAddCurrentTaskToDelayedList>
	}
 800f444:	bf00      	nop
 800f446:	3718      	adds	r7, #24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	20002ec8 	.word	0x20002ec8

0800f450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b086      	sub	sp, #24
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	68db      	ldr	r3, [r3, #12]
 800f45e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d10b      	bne.n	800f47e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	60fb      	str	r3, [r7, #12]
}
 800f478:	bf00      	nop
 800f47a:	bf00      	nop
 800f47c:	e7fd      	b.n	800f47a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	3318      	adds	r3, #24
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe f85e 	bl	800d544 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f488:	4b1d      	ldr	r3, [pc, #116]	@ (800f500 <xTaskRemoveFromEventList+0xb0>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d11d      	bne.n	800f4cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	3304      	adds	r3, #4
 800f494:	4618      	mov	r0, r3
 800f496:	f7fe f855 	bl	800d544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f49e:	4b19      	ldr	r3, [pc, #100]	@ (800f504 <xTaskRemoveFromEventList+0xb4>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d903      	bls.n	800f4ae <xTaskRemoveFromEventList+0x5e>
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4aa:	4a16      	ldr	r2, [pc, #88]	@ (800f504 <xTaskRemoveFromEventList+0xb4>)
 800f4ac:	6013      	str	r3, [r2, #0]
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	4413      	add	r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4a13      	ldr	r2, [pc, #76]	@ (800f508 <xTaskRemoveFromEventList+0xb8>)
 800f4bc:	441a      	add	r2, r3
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	3304      	adds	r3, #4
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	f7fd ffe0 	bl	800d48a <vListInsertEnd>
 800f4ca:	e005      	b.n	800f4d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	3318      	adds	r3, #24
 800f4d0:	4619      	mov	r1, r3
 800f4d2:	480e      	ldr	r0, [pc, #56]	@ (800f50c <xTaskRemoveFromEventList+0xbc>)
 800f4d4:	f7fd ffd9 	bl	800d48a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f510 <xTaskRemoveFromEventList+0xc0>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d905      	bls.n	800f4f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f514 <xTaskRemoveFromEventList+0xc4>)
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	601a      	str	r2, [r3, #0]
 800f4f0:	e001      	b.n	800f4f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4f6:	697b      	ldr	r3, [r7, #20]
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	200033c4 	.word	0x200033c4
 800f504:	200033a4 	.word	0x200033a4
 800f508:	20002ecc 	.word	0x20002ecc
 800f50c:	2000335c 	.word	0x2000335c
 800f510:	20002ec8 	.word	0x20002ec8
 800f514:	200033b0 	.word	0x200033b0

0800f518 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f522:	4b2a      	ldr	r3, [pc, #168]	@ (800f5cc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d10b      	bne.n	800f542 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800f52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52e:	f383 8811 	msr	BASEPRI, r3
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	f3bf 8f4f 	dsb	sy
 800f53a:	613b      	str	r3, [r7, #16]
}
 800f53c:	bf00      	nop
 800f53e:	bf00      	nop
 800f540:	e7fd      	b.n	800f53e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d10b      	bne.n	800f570 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800f558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f55c:	f383 8811 	msr	BASEPRI, r3
 800f560:	f3bf 8f6f 	isb	sy
 800f564:	f3bf 8f4f 	dsb	sy
 800f568:	60fb      	str	r3, [r7, #12]
}
 800f56a:	bf00      	nop
 800f56c:	bf00      	nop
 800f56e:	e7fd      	b.n	800f56c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7fd ffe7 	bl	800d544 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	3304      	adds	r3, #4
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fd ffe2 	bl	800d544 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f584:	4b12      	ldr	r3, [pc, #72]	@ (800f5d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	429a      	cmp	r2, r3
 800f58a:	d903      	bls.n	800f594 <vTaskRemoveFromUnorderedEventList+0x7c>
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f590:	4a0f      	ldr	r2, [pc, #60]	@ (800f5d0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f592:	6013      	str	r3, [r2, #0]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	009b      	lsls	r3, r3, #2
 800f5a0:	4a0c      	ldr	r2, [pc, #48]	@ (800f5d4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f5a2:	441a      	add	r2, r3
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	f7fd ff6d 	bl	800d48a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5b4:	4b08      	ldr	r3, [pc, #32]	@ (800f5d8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d902      	bls.n	800f5c4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f5be:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	601a      	str	r2, [r3, #0]
	}
}
 800f5c4:	bf00      	nop
 800f5c6:	3718      	adds	r7, #24
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	200033c4 	.word	0x200033c4
 800f5d0:	200033a4 	.word	0x200033a4
 800f5d4:	20002ecc 	.word	0x20002ecc
 800f5d8:	20002ec8 	.word	0x20002ec8
 800f5dc:	200033b0 	.word	0x200033b0

0800f5e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5e8:	4b06      	ldr	r3, [pc, #24]	@ (800f604 <vTaskInternalSetTimeOutState+0x24>)
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f5f0:	4b05      	ldr	r3, [pc, #20]	@ (800f608 <vTaskInternalSetTimeOutState+0x28>)
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	605a      	str	r2, [r3, #4]
}
 800f5f8:	bf00      	nop
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr
 800f604:	200033b4 	.word	0x200033b4
 800f608:	200033a0 	.word	0x200033a0

0800f60c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d10b      	bne.n	800f634 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	613b      	str	r3, [r7, #16]
}
 800f62e:	bf00      	nop
 800f630:	bf00      	nop
 800f632:	e7fd      	b.n	800f630 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d10b      	bne.n	800f652 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f63e:	f383 8811 	msr	BASEPRI, r3
 800f642:	f3bf 8f6f 	isb	sy
 800f646:	f3bf 8f4f 	dsb	sy
 800f64a:	60fb      	str	r3, [r7, #12]
}
 800f64c:	bf00      	nop
 800f64e:	bf00      	nop
 800f650:	e7fd      	b.n	800f64e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f652:	f001 fa39 	bl	8010ac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f656:	4b1d      	ldr	r3, [pc, #116]	@ (800f6cc <xTaskCheckForTimeOut+0xc0>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	69ba      	ldr	r2, [r7, #24]
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66e:	d102      	bne.n	800f676 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f670:	2300      	movs	r3, #0
 800f672:	61fb      	str	r3, [r7, #28]
 800f674:	e023      	b.n	800f6be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	4b15      	ldr	r3, [pc, #84]	@ (800f6d0 <xTaskCheckForTimeOut+0xc4>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d007      	beq.n	800f692 <xTaskCheckForTimeOut+0x86>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	69ba      	ldr	r2, [r7, #24]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d302      	bcc.n	800f692 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f68c:	2301      	movs	r3, #1
 800f68e:	61fb      	str	r3, [r7, #28]
 800f690:	e015      	b.n	800f6be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	697a      	ldr	r2, [r7, #20]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d20b      	bcs.n	800f6b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	681a      	ldr	r2, [r3, #0]
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	1ad2      	subs	r2, r2, r3
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7ff ff99 	bl	800f5e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	61fb      	str	r3, [r7, #28]
 800f6b2:	e004      	b.n	800f6be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f6be:	f001 fa35 	bl	8010b2c <vPortExitCritical>

	return xReturn;
 800f6c2:	69fb      	ldr	r3, [r7, #28]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3720      	adds	r7, #32
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	200033a0 	.word	0x200033a0
 800f6d0:	200033b4 	.word	0x200033b4

0800f6d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6d8:	4b03      	ldr	r3, [pc, #12]	@ (800f6e8 <vTaskMissedYield+0x14>)
 800f6da:	2201      	movs	r2, #1
 800f6dc:	601a      	str	r2, [r3, #0]
}
 800f6de:	bf00      	nop
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	200033b0 	.word	0x200033b0

0800f6ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f6f4:	f000 f852 	bl	800f79c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f6f8:	4b06      	ldr	r3, [pc, #24]	@ (800f714 <prvIdleTask+0x28>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d9f9      	bls.n	800f6f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f700:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <prvIdleTask+0x2c>)
 800f702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	f3bf 8f4f 	dsb	sy
 800f70c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f710:	e7f0      	b.n	800f6f4 <prvIdleTask+0x8>
 800f712:	bf00      	nop
 800f714:	20002ecc 	.word	0x20002ecc
 800f718:	e000ed04 	.word	0xe000ed04

0800f71c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f722:	2300      	movs	r3, #0
 800f724:	607b      	str	r3, [r7, #4]
 800f726:	e00c      	b.n	800f742 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	4613      	mov	r3, r2
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	4413      	add	r3, r2
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	4a12      	ldr	r2, [pc, #72]	@ (800f77c <prvInitialiseTaskLists+0x60>)
 800f734:	4413      	add	r3, r2
 800f736:	4618      	mov	r0, r3
 800f738:	f7fd fe7a 	bl	800d430 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3301      	adds	r3, #1
 800f740:	607b      	str	r3, [r7, #4]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b37      	cmp	r3, #55	@ 0x37
 800f746:	d9ef      	bls.n	800f728 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f748:	480d      	ldr	r0, [pc, #52]	@ (800f780 <prvInitialiseTaskLists+0x64>)
 800f74a:	f7fd fe71 	bl	800d430 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f74e:	480d      	ldr	r0, [pc, #52]	@ (800f784 <prvInitialiseTaskLists+0x68>)
 800f750:	f7fd fe6e 	bl	800d430 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f754:	480c      	ldr	r0, [pc, #48]	@ (800f788 <prvInitialiseTaskLists+0x6c>)
 800f756:	f7fd fe6b 	bl	800d430 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f75a:	480c      	ldr	r0, [pc, #48]	@ (800f78c <prvInitialiseTaskLists+0x70>)
 800f75c:	f7fd fe68 	bl	800d430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f760:	480b      	ldr	r0, [pc, #44]	@ (800f790 <prvInitialiseTaskLists+0x74>)
 800f762:	f7fd fe65 	bl	800d430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f766:	4b0b      	ldr	r3, [pc, #44]	@ (800f794 <prvInitialiseTaskLists+0x78>)
 800f768:	4a05      	ldr	r2, [pc, #20]	@ (800f780 <prvInitialiseTaskLists+0x64>)
 800f76a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f76c:	4b0a      	ldr	r3, [pc, #40]	@ (800f798 <prvInitialiseTaskLists+0x7c>)
 800f76e:	4a05      	ldr	r2, [pc, #20]	@ (800f784 <prvInitialiseTaskLists+0x68>)
 800f770:	601a      	str	r2, [r3, #0]
}
 800f772:	bf00      	nop
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20002ecc 	.word	0x20002ecc
 800f780:	2000332c 	.word	0x2000332c
 800f784:	20003340 	.word	0x20003340
 800f788:	2000335c 	.word	0x2000335c
 800f78c:	20003370 	.word	0x20003370
 800f790:	20003388 	.word	0x20003388
 800f794:	20003354 	.word	0x20003354
 800f798:	20003358 	.word	0x20003358

0800f79c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7a2:	e019      	b.n	800f7d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f7a4:	f001 f990 	bl	8010ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a8:	4b10      	ldr	r3, [pc, #64]	@ (800f7ec <prvCheckTasksWaitingTermination+0x50>)
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	3304      	adds	r3, #4
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fd fec5 	bl	800d544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f7ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f7f0 <prvCheckTasksWaitingTermination+0x54>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3b01      	subs	r3, #1
 800f7c0:	4a0b      	ldr	r2, [pc, #44]	@ (800f7f0 <prvCheckTasksWaitingTermination+0x54>)
 800f7c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f7c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f7f4 <prvCheckTasksWaitingTermination+0x58>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	4a0a      	ldr	r2, [pc, #40]	@ (800f7f4 <prvCheckTasksWaitingTermination+0x58>)
 800f7cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7ce:	f001 f9ad 	bl	8010b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 f8ae 	bl	800f934 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7d8:	4b06      	ldr	r3, [pc, #24]	@ (800f7f4 <prvCheckTasksWaitingTermination+0x58>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1e1      	bne.n	800f7a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7e0:	bf00      	nop
 800f7e2:	bf00      	nop
 800f7e4:	3708      	adds	r7, #8
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	20003370 	.word	0x20003370
 800f7f0:	2000339c 	.word	0x2000339c
 800f7f4:	20003384 	.word	0x20003384

0800f7f8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b086      	sub	sp, #24
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	607a      	str	r2, [r7, #4]
 800f804:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d102      	bne.n	800f812 <vTaskGetInfo+0x1a>
 800f80c:	4b2c      	ldr	r3, [pc, #176]	@ (800f8c0 <vTaskGetInfo+0xc8>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	e000      	b.n	800f814 <vTaskGetInfo+0x1c>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2200      	movs	r2, #0
 800f84a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800f84c:	78fb      	ldrb	r3, [r7, #3]
 800f84e:	2b05      	cmp	r3, #5
 800f850:	d01a      	beq.n	800f888 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800f852:	4b1b      	ldr	r3, [pc, #108]	@ (800f8c0 <vTaskGetInfo+0xc8>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	697a      	ldr	r2, [r7, #20]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d103      	bne.n	800f864 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	2200      	movs	r2, #0
 800f860:	731a      	strb	r2, [r3, #12]
 800f862:	e018      	b.n	800f896 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	78fa      	ldrb	r2, [r7, #3]
 800f868:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800f86a:	78fb      	ldrb	r3, [r7, #3]
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d112      	bne.n	800f896 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800f870:	f7ff faae 	bl	800edd0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	2202      	movs	r2, #2
 800f880:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800f882:	f7ff fab3 	bl	800edec <xTaskResumeAll>
 800f886:	e006      	b.n	800f896 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800f888:	6978      	ldr	r0, [r7, #20]
 800f88a:	f7ff f823 	bl	800e8d4 <eTaskGetState>
 800f88e:	4603      	mov	r3, r0
 800f890:	461a      	mov	r2, r3
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d009      	beq.n	800f8b0 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f000 f80f 	bl	800f8c4 <prvTaskCheckFreeStackSpace>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800f8ae:	e002      	b.n	800f8b6 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800f8b0:	68bb      	ldr	r3, [r7, #8]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	841a      	strh	r2, [r3, #32]
	}
 800f8b6:	bf00      	nop
 800f8b8:	3718      	adds	r7, #24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	20002ec8 	.word	0x20002ec8

0800f8c4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f8d0:	e005      	b.n	800f8de <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2ba5      	cmp	r3, #165	@ 0xa5
 800f8e4:	d0f5      	beq.n	800f8d2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	089b      	lsrs	r3, r3, #2
 800f8ea:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	b29b      	uxth	r3, r3
	}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b086      	sub	sp, #24
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d102      	bne.n	800f910 <uxTaskGetStackHighWaterMark+0x14>
 800f90a:	4b09      	ldr	r3, [pc, #36]	@ (800f930 <uxTaskGetStackHighWaterMark+0x34>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	e000      	b.n	800f912 <uxTaskGetStackHighWaterMark+0x16>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f918:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800f91a:	6938      	ldr	r0, [r7, #16]
 800f91c:	f7ff ffd2 	bl	800f8c4 <prvTaskCheckFreeStackSpace>
 800f920:	4603      	mov	r3, r0
 800f922:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800f924:	68fb      	ldr	r3, [r7, #12]
	}
 800f926:	4618      	mov	r0, r3
 800f928:	3718      	adds	r7, #24
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20002ec8 	.word	0x20002ec8

0800f934 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f934:	b580      	push	{r7, lr}
 800f936:	b084      	sub	sp, #16
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3354      	adds	r3, #84	@ 0x54
 800f940:	4618      	mov	r0, r3
 800f942:	f003 fc5b 	bl	80131fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d108      	bne.n	800f962 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f954:	4618      	mov	r0, r3
 800f956:	f001 faa7 	bl	8010ea8 <vPortFree>
				vPortFree( pxTCB );
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f001 faa4 	bl	8010ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f960:	e019      	b.n	800f996 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d103      	bne.n	800f974 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f001 fa9b 	bl	8010ea8 <vPortFree>
	}
 800f972:	e010      	b.n	800f996 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d00b      	beq.n	800f996 <prvDeleteTCB+0x62>
	__asm volatile
 800f97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f982:	f383 8811 	msr	BASEPRI, r3
 800f986:	f3bf 8f6f 	isb	sy
 800f98a:	f3bf 8f4f 	dsb	sy
 800f98e:	60fb      	str	r3, [r7, #12]
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	e7fd      	b.n	800f992 <prvDeleteTCB+0x5e>
	}
 800f996:	bf00      	nop
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
	...

0800f9a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d8 <prvResetNextTaskUnblockTime+0x38>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d104      	bne.n	800f9ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9b0:	4b0a      	ldr	r3, [pc, #40]	@ (800f9dc <prvResetNextTaskUnblockTime+0x3c>)
 800f9b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9b8:	e008      	b.n	800f9cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ba:	4b07      	ldr	r3, [pc, #28]	@ (800f9d8 <prvResetNextTaskUnblockTime+0x38>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	68db      	ldr	r3, [r3, #12]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	4a04      	ldr	r2, [pc, #16]	@ (800f9dc <prvResetNextTaskUnblockTime+0x3c>)
 800f9ca:	6013      	str	r3, [r2, #0]
}
 800f9cc:	bf00      	nop
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr
 800f9d8:	20003354 	.word	0x20003354
 800f9dc:	200033bc 	.word	0x200033bc

0800f9e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b083      	sub	sp, #12
 800f9e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800fa14 <xTaskGetSchedulerState+0x34>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d102      	bne.n	800f9f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	607b      	str	r3, [r7, #4]
 800f9f2:	e008      	b.n	800fa06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9f4:	4b08      	ldr	r3, [pc, #32]	@ (800fa18 <xTaskGetSchedulerState+0x38>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d102      	bne.n	800fa02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f9fc:	2302      	movs	r3, #2
 800f9fe:	607b      	str	r3, [r7, #4]
 800fa00:	e001      	b.n	800fa06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa02:	2300      	movs	r3, #0
 800fa04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa06:	687b      	ldr	r3, [r7, #4]
	}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	200033a8 	.word	0x200033a8
 800fa18:	200033c4 	.word	0x200033c4

0800fa1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d051      	beq.n	800fad6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa36:	4b2a      	ldr	r3, [pc, #168]	@ (800fae0 <xTaskPriorityInherit+0xc4>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d241      	bcs.n	800fac4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	699b      	ldr	r3, [r3, #24]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	db06      	blt.n	800fa56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa48:	4b25      	ldr	r3, [pc, #148]	@ (800fae0 <xTaskPriorityInherit+0xc4>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6959      	ldr	r1, [r3, #20]
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa5e:	4613      	mov	r3, r2
 800fa60:	009b      	lsls	r3, r3, #2
 800fa62:	4413      	add	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4a1f      	ldr	r2, [pc, #124]	@ (800fae4 <xTaskPriorityInherit+0xc8>)
 800fa68:	4413      	add	r3, r2
 800fa6a:	4299      	cmp	r1, r3
 800fa6c:	d122      	bne.n	800fab4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	3304      	adds	r3, #4
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7fd fd66 	bl	800d544 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa78:	4b19      	ldr	r3, [pc, #100]	@ (800fae0 <xTaskPriorityInherit+0xc4>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa86:	4b18      	ldr	r3, [pc, #96]	@ (800fae8 <xTaskPriorityInherit+0xcc>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d903      	bls.n	800fa96 <xTaskPriorityInherit+0x7a>
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa92:	4a15      	ldr	r2, [pc, #84]	@ (800fae8 <xTaskPriorityInherit+0xcc>)
 800fa94:	6013      	str	r3, [r2, #0]
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	4a10      	ldr	r2, [pc, #64]	@ (800fae4 <xTaskPriorityInherit+0xc8>)
 800faa4:	441a      	add	r2, r3
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	3304      	adds	r3, #4
 800faaa:	4619      	mov	r1, r3
 800faac:	4610      	mov	r0, r2
 800faae:	f7fd fcec 	bl	800d48a <vListInsertEnd>
 800fab2:	e004      	b.n	800fabe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fab4:	4b0a      	ldr	r3, [pc, #40]	@ (800fae0 <xTaskPriorityInherit+0xc4>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fabe:	2301      	movs	r3, #1
 800fac0:	60fb      	str	r3, [r7, #12]
 800fac2:	e008      	b.n	800fad6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fac8:	4b05      	ldr	r3, [pc, #20]	@ (800fae0 <xTaskPriorityInherit+0xc4>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800face:	429a      	cmp	r2, r3
 800fad0:	d201      	bcs.n	800fad6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fad2:	2301      	movs	r3, #1
 800fad4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fad6:	68fb      	ldr	r3, [r7, #12]
	}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	20002ec8 	.word	0x20002ec8
 800fae4:	20002ecc 	.word	0x20002ecc
 800fae8:	200033a4 	.word	0x200033a4

0800faec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800faf8:	2300      	movs	r3, #0
 800fafa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d058      	beq.n	800fbb4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb02:	4b2f      	ldr	r3, [pc, #188]	@ (800fbc0 <xTaskPriorityDisinherit+0xd4>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	693a      	ldr	r2, [r7, #16]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d00b      	beq.n	800fb24 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fb0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb10:	f383 8811 	msr	BASEPRI, r3
 800fb14:	f3bf 8f6f 	isb	sy
 800fb18:	f3bf 8f4f 	dsb	sy
 800fb1c:	60fb      	str	r3, [r7, #12]
}
 800fb1e:	bf00      	nop
 800fb20:	bf00      	nop
 800fb22:	e7fd      	b.n	800fb20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb24:	693b      	ldr	r3, [r7, #16]
 800fb26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10b      	bne.n	800fb44 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb30:	f383 8811 	msr	BASEPRI, r3
 800fb34:	f3bf 8f6f 	isb	sy
 800fb38:	f3bf 8f4f 	dsb	sy
 800fb3c:	60bb      	str	r3, [r7, #8]
}
 800fb3e:	bf00      	nop
 800fb40:	bf00      	nop
 800fb42:	e7fd      	b.n	800fb40 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb48:	1e5a      	subs	r2, r3, #1
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d02c      	beq.n	800fbb4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d128      	bne.n	800fbb4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	3304      	adds	r3, #4
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fd fcec 	bl	800d544 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb84:	4b0f      	ldr	r3, [pc, #60]	@ (800fbc4 <xTaskPriorityDisinherit+0xd8>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d903      	bls.n	800fb94 <xTaskPriorityDisinherit+0xa8>
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb90:	4a0c      	ldr	r2, [pc, #48]	@ (800fbc4 <xTaskPriorityDisinherit+0xd8>)
 800fb92:	6013      	str	r3, [r2, #0]
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb98:	4613      	mov	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	4413      	add	r3, r2
 800fb9e:	009b      	lsls	r3, r3, #2
 800fba0:	4a09      	ldr	r2, [pc, #36]	@ (800fbc8 <xTaskPriorityDisinherit+0xdc>)
 800fba2:	441a      	add	r2, r3
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	3304      	adds	r3, #4
 800fba8:	4619      	mov	r1, r3
 800fbaa:	4610      	mov	r0, r2
 800fbac:	f7fd fc6d 	bl	800d48a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbb4:	697b      	ldr	r3, [r7, #20]
	}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3718      	adds	r7, #24
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	20002ec8 	.word	0x20002ec8
 800fbc4:	200033a4 	.word	0x200033a4
 800fbc8:	20002ecc 	.word	0x20002ecc

0800fbcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b088      	sub	sp, #32
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d06c      	beq.n	800fcbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10b      	bne.n	800fc04 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	60fb      	str	r3, [r7, #12]
}
 800fbfe:	bf00      	nop
 800fc00:	bf00      	nop
 800fc02:	e7fd      	b.n	800fc00 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fc04:	69bb      	ldr	r3, [r7, #24]
 800fc06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d902      	bls.n	800fc14 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	61fb      	str	r3, [r7, #28]
 800fc12:	e002      	b.n	800fc1a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc18:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc1e:	69fa      	ldr	r2, [r7, #28]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d04c      	beq.n	800fcbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc28:	697a      	ldr	r2, [r7, #20]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d147      	bne.n	800fcbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc2e:	4b26      	ldr	r3, [pc, #152]	@ (800fcc8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	69ba      	ldr	r2, [r7, #24]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d10b      	bne.n	800fc50 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	60bb      	str	r3, [r7, #8]
}
 800fc4a:	bf00      	nop
 800fc4c:	bf00      	nop
 800fc4e:	e7fd      	b.n	800fc4c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc54:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	69fa      	ldr	r2, [r7, #28]
 800fc5a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	db04      	blt.n	800fc6e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc6e:	69bb      	ldr	r3, [r7, #24]
 800fc70:	6959      	ldr	r1, [r3, #20]
 800fc72:	693a      	ldr	r2, [r7, #16]
 800fc74:	4613      	mov	r3, r2
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	4a13      	ldr	r2, [pc, #76]	@ (800fccc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc7e:	4413      	add	r3, r2
 800fc80:	4299      	cmp	r1, r3
 800fc82:	d11c      	bne.n	800fcbe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	3304      	adds	r3, #4
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7fd fc5b 	bl	800d544 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc8e:	69bb      	ldr	r3, [r7, #24]
 800fc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc92:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d903      	bls.n	800fca2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fc9a:	69bb      	ldr	r3, [r7, #24]
 800fc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc9e:	4a0c      	ldr	r2, [pc, #48]	@ (800fcd0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fca0:	6013      	str	r3, [r2, #0]
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fca6:	4613      	mov	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4413      	add	r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	4a07      	ldr	r2, [pc, #28]	@ (800fccc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fcb0:	441a      	add	r2, r3
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	4610      	mov	r0, r2
 800fcba:	f7fd fbe6 	bl	800d48a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcbe:	bf00      	nop
 800fcc0:	3720      	adds	r7, #32
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20002ec8 	.word	0x20002ec8
 800fccc:	20002ecc 	.word	0x20002ecc
 800fcd0:	200033a4 	.word	0x200033a4

0800fcd4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800fcda:	4b09      	ldr	r3, [pc, #36]	@ (800fd00 <uxTaskResetEventItemValue+0x2c>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	699b      	ldr	r3, [r3, #24]
 800fce0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce2:	4b07      	ldr	r3, [pc, #28]	@ (800fd00 <uxTaskResetEventItemValue+0x2c>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce8:	4b05      	ldr	r3, [pc, #20]	@ (800fd00 <uxTaskResetEventItemValue+0x2c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fcf0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800fcf2:	687b      	ldr	r3, [r7, #4]
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	370c      	adds	r7, #12
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr
 800fd00:	20002ec8 	.word	0x20002ec8

0800fd04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd04:	b480      	push	{r7}
 800fd06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd08:	4b07      	ldr	r3, [pc, #28]	@ (800fd28 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd10:	4b05      	ldr	r3, [pc, #20]	@ (800fd28 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd16:	3201      	adds	r2, #1
 800fd18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd1a:	4b03      	ldr	r3, [pc, #12]	@ (800fd28 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
	}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	20002ec8 	.word	0x20002ec8

0800fd2c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fd36:	f000 fec7 	bl	8010ac8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fd3a:	4b20      	ldr	r3, [pc, #128]	@ (800fdbc <ulTaskNotifyTake+0x90>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d113      	bne.n	800fd6e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fd46:	4b1d      	ldr	r3, [pc, #116]	@ (800fdbc <ulTaskNotifyTake+0x90>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00b      	beq.n	800fd6e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd56:	2101      	movs	r1, #1
 800fd58:	6838      	ldr	r0, [r7, #0]
 800fd5a:	f000 f955 	bl	8010008 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fd5e:	4b18      	ldr	r3, [pc, #96]	@ (800fdc0 <ulTaskNotifyTake+0x94>)
 800fd60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd64:	601a      	str	r2, [r3, #0]
 800fd66:	f3bf 8f4f 	dsb	sy
 800fd6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fd6e:	f000 fedd 	bl	8010b2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fd72:	f000 fea9 	bl	8010ac8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fd76:	4b11      	ldr	r3, [pc, #68]	@ (800fdbc <ulTaskNotifyTake+0x90>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd7e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00e      	beq.n	800fda4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d005      	beq.n	800fd98 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fd8c:	4b0b      	ldr	r3, [pc, #44]	@ (800fdbc <ulTaskNotifyTake+0x90>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800fd96:	e005      	b.n	800fda4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800fd98:	4b08      	ldr	r3, [pc, #32]	@ (800fdbc <ulTaskNotifyTake+0x90>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	3a01      	subs	r2, #1
 800fda0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fda4:	4b05      	ldr	r3, [pc, #20]	@ (800fdbc <ulTaskNotifyTake+0x90>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2200      	movs	r2, #0
 800fdaa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800fdae:	f000 febd 	bl	8010b2c <vPortExitCritical>

		return ulReturn;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
	}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20002ec8 	.word	0x20002ec8
 800fdc0:	e000ed04 	.word	0xe000ed04

0800fdc4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
 800fdd0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fdd2:	f000 fe79 	bl	8010ac8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fdd6:	4b29      	ldr	r3, [pc, #164]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	2b02      	cmp	r3, #2
 800fde2:	d01c      	beq.n	800fe1e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fde4:	4b25      	ldr	r3, [pc, #148]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	43d2      	mvns	r2, r2
 800fdf0:	400a      	ands	r2, r1
 800fdf2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fdf6:	4b21      	ldr	r3, [pc, #132]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2201      	movs	r2, #1
 800fdfc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00b      	beq.n	800fe1e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe06:	2101      	movs	r1, #1
 800fe08:	6838      	ldr	r0, [r7, #0]
 800fe0a:	f000 f8fd 	bl	8010008 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fe0e:	4b1c      	ldr	r3, [pc, #112]	@ (800fe80 <xTaskNotifyWait+0xbc>)
 800fe10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe14:	601a      	str	r2, [r3, #0]
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fe1e:	f000 fe85 	bl	8010b2c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fe22:	f000 fe51 	bl	8010ac8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d005      	beq.n	800fe38 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fe2c:	4b13      	ldr	r3, [pc, #76]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fe38:	4b10      	ldr	r3, [pc, #64]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d002      	beq.n	800fe4c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fe46:	2300      	movs	r3, #0
 800fe48:	617b      	str	r3, [r7, #20]
 800fe4a:	e00a      	b.n	800fe62 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fe4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fe54:	68ba      	ldr	r2, [r7, #8]
 800fe56:	43d2      	mvns	r2, r2
 800fe58:	400a      	ands	r2, r1
 800fe5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe62:	4b06      	ldr	r3, [pc, #24]	@ (800fe7c <xTaskNotifyWait+0xb8>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800fe6c:	f000 fe5e 	bl	8010b2c <vPortExitCritical>

		return xReturn;
 800fe70:	697b      	ldr	r3, [r7, #20]
	}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3718      	adds	r7, #24
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	20002ec8 	.word	0x20002ec8
 800fe80:	e000ed04 	.word	0xe000ed04

0800fe84 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08a      	sub	sp, #40	@ 0x28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	603b      	str	r3, [r7, #0]
 800fe90:	4613      	mov	r3, r2
 800fe92:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fe94:	2301      	movs	r3, #1
 800fe96:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d10b      	bne.n	800feb6 <xTaskGenericNotify+0x32>
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	61bb      	str	r3, [r7, #24]
}
 800feb0:	bf00      	nop
 800feb2:	bf00      	nop
 800feb4:	e7fd      	b.n	800feb2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800feba:	f000 fe05 	bl	8010ac8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d004      	beq.n	800fece <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fece:	6a3b      	ldr	r3, [r7, #32]
 800fed0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fed4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fed6:	6a3b      	ldr	r3, [r7, #32]
 800fed8:	2202      	movs	r2, #2
 800feda:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800fede:	79fb      	ldrb	r3, [r7, #7]
 800fee0:	2b04      	cmp	r3, #4
 800fee2:	d82e      	bhi.n	800ff42 <xTaskGenericNotify+0xbe>
 800fee4:	a201      	add	r2, pc, #4	@ (adr r2, 800feec <xTaskGenericNotify+0x68>)
 800fee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feea:	bf00      	nop
 800feec:	0800ff67 	.word	0x0800ff67
 800fef0:	0800ff01 	.word	0x0800ff01
 800fef4:	0800ff13 	.word	0x0800ff13
 800fef8:	0800ff23 	.word	0x0800ff23
 800fefc:	0800ff2d 	.word	0x0800ff2d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ff00:	6a3b      	ldr	r3, [r7, #32]
 800ff02:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff10:	e02c      	b.n	800ff6c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ff12:	6a3b      	ldr	r3, [r7, #32]
 800ff14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff18:	1c5a      	adds	r2, r3, #1
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff20:	e024      	b.n	800ff6c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff2a:	e01f      	b.n	800ff6c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ff2c:	7ffb      	ldrb	r3, [r7, #31]
 800ff2e:	2b02      	cmp	r3, #2
 800ff30:	d004      	beq.n	800ff3c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ff32:	6a3b      	ldr	r3, [r7, #32]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ff3a:	e017      	b.n	800ff6c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ff40:	e014      	b.n	800ff6c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4c:	d00d      	beq.n	800ff6a <xTaskGenericNotify+0xe6>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	617b      	str	r3, [r7, #20]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <xTaskGenericNotify+0xde>
					break;
 800ff66:	bf00      	nop
 800ff68:	e000      	b.n	800ff6c <xTaskGenericNotify+0xe8>

					break;
 800ff6a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ff6c:	7ffb      	ldrb	r3, [r7, #31]
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d13b      	bne.n	800ffea <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff72:	6a3b      	ldr	r3, [r7, #32]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fd fae4 	bl	800d544 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff80:	4b1d      	ldr	r3, [pc, #116]	@ (800fff8 <xTaskGenericNotify+0x174>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d903      	bls.n	800ff90 <xTaskGenericNotify+0x10c>
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff8c:	4a1a      	ldr	r2, [pc, #104]	@ (800fff8 <xTaskGenericNotify+0x174>)
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff94:	4613      	mov	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	4413      	add	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4a17      	ldr	r2, [pc, #92]	@ (800fffc <xTaskGenericNotify+0x178>)
 800ff9e:	441a      	add	r2, r3
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	f7fd fa6f 	bl	800d48a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ffac:	6a3b      	ldr	r3, [r7, #32]
 800ffae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d00b      	beq.n	800ffcc <xTaskGenericNotify+0x148>
	__asm volatile
 800ffb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb8:	f383 8811 	msr	BASEPRI, r3
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	613b      	str	r3, [r7, #16]
}
 800ffc6:	bf00      	nop
 800ffc8:	bf00      	nop
 800ffca:	e7fd      	b.n	800ffc8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffcc:	6a3b      	ldr	r3, [r7, #32]
 800ffce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffd0:	4b0b      	ldr	r3, [pc, #44]	@ (8010000 <xTaskGenericNotify+0x17c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d907      	bls.n	800ffea <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ffda:	4b0a      	ldr	r3, [pc, #40]	@ (8010004 <xTaskGenericNotify+0x180>)
 800ffdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ffea:	f000 fd9f 	bl	8010b2c <vPortExitCritical>

		return xReturn;
 800ffee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3728      	adds	r7, #40	@ 0x28
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	200033a4 	.word	0x200033a4
 800fffc:	20002ecc 	.word	0x20002ecc
 8010000:	20002ec8 	.word	0x20002ec8
 8010004:	e000ed04 	.word	0xe000ed04

08010008 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010012:	4b21      	ldr	r3, [pc, #132]	@ (8010098 <prvAddCurrentTaskToDelayedList+0x90>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010018:	4b20      	ldr	r3, [pc, #128]	@ (801009c <prvAddCurrentTaskToDelayedList+0x94>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	3304      	adds	r3, #4
 801001e:	4618      	mov	r0, r3
 8010020:	f7fd fa90 	bl	800d544 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002a:	d10a      	bne.n	8010042 <prvAddCurrentTaskToDelayedList+0x3a>
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d007      	beq.n	8010042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010032:	4b1a      	ldr	r3, [pc, #104]	@ (801009c <prvAddCurrentTaskToDelayedList+0x94>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	3304      	adds	r3, #4
 8010038:	4619      	mov	r1, r3
 801003a:	4819      	ldr	r0, [pc, #100]	@ (80100a0 <prvAddCurrentTaskToDelayedList+0x98>)
 801003c:	f7fd fa25 	bl	800d48a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010040:	e026      	b.n	8010090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	4413      	add	r3, r2
 8010048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801004a:	4b14      	ldr	r3, [pc, #80]	@ (801009c <prvAddCurrentTaskToDelayedList+0x94>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010052:	68ba      	ldr	r2, [r7, #8]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	429a      	cmp	r2, r3
 8010058:	d209      	bcs.n	801006e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801005a:	4b12      	ldr	r3, [pc, #72]	@ (80100a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	4b0f      	ldr	r3, [pc, #60]	@ (801009c <prvAddCurrentTaskToDelayedList+0x94>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	3304      	adds	r3, #4
 8010064:	4619      	mov	r1, r3
 8010066:	4610      	mov	r0, r2
 8010068:	f7fd fa33 	bl	800d4d2 <vListInsert>
}
 801006c:	e010      	b.n	8010090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801006e:	4b0e      	ldr	r3, [pc, #56]	@ (80100a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010070:	681a      	ldr	r2, [r3, #0]
 8010072:	4b0a      	ldr	r3, [pc, #40]	@ (801009c <prvAddCurrentTaskToDelayedList+0x94>)
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3304      	adds	r3, #4
 8010078:	4619      	mov	r1, r3
 801007a:	4610      	mov	r0, r2
 801007c:	f7fd fa29 	bl	800d4d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010080:	4b0a      	ldr	r3, [pc, #40]	@ (80100ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68ba      	ldr	r2, [r7, #8]
 8010086:	429a      	cmp	r2, r3
 8010088:	d202      	bcs.n	8010090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801008a:	4a08      	ldr	r2, [pc, #32]	@ (80100ac <prvAddCurrentTaskToDelayedList+0xa4>)
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	6013      	str	r3, [r2, #0]
}
 8010090:	bf00      	nop
 8010092:	3710      	adds	r7, #16
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	200033a0 	.word	0x200033a0
 801009c:	20002ec8 	.word	0x20002ec8
 80100a0:	20003388 	.word	0x20003388
 80100a4:	20003358 	.word	0x20003358
 80100a8:	20003354 	.word	0x20003354
 80100ac:	200033bc 	.word	0x200033bc

080100b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b08a      	sub	sp, #40	@ 0x28
 80100b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80100b6:	2300      	movs	r3, #0
 80100b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80100ba:	f000 fb71 	bl	80107a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80100be:	4b1d      	ldr	r3, [pc, #116]	@ (8010134 <xTimerCreateTimerTask+0x84>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d021      	beq.n	801010a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80100c6:	2300      	movs	r3, #0
 80100c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80100ca:	2300      	movs	r3, #0
 80100cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80100ce:	1d3a      	adds	r2, r7, #4
 80100d0:	f107 0108 	add.w	r1, r7, #8
 80100d4:	f107 030c 	add.w	r3, r7, #12
 80100d8:	4618      	mov	r0, r3
 80100da:	f7fc ffd3 	bl	800d084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80100de:	6879      	ldr	r1, [r7, #4]
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	9202      	str	r2, [sp, #8]
 80100e6:	9301      	str	r3, [sp, #4]
 80100e8:	2302      	movs	r3, #2
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	2300      	movs	r3, #0
 80100ee:	460a      	mov	r2, r1
 80100f0:	4911      	ldr	r1, [pc, #68]	@ (8010138 <xTimerCreateTimerTask+0x88>)
 80100f2:	4812      	ldr	r0, [pc, #72]	@ (801013c <xTimerCreateTimerTask+0x8c>)
 80100f4:	f7fe f986 	bl	800e404 <xTaskCreateStatic>
 80100f8:	4603      	mov	r3, r0
 80100fa:	4a11      	ldr	r2, [pc, #68]	@ (8010140 <xTimerCreateTimerTask+0x90>)
 80100fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80100fe:	4b10      	ldr	r3, [pc, #64]	@ (8010140 <xTimerCreateTimerTask+0x90>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d001      	beq.n	801010a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010106:	2301      	movs	r3, #1
 8010108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10b      	bne.n	8010128 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010114:	f383 8811 	msr	BASEPRI, r3
 8010118:	f3bf 8f6f 	isb	sy
 801011c:	f3bf 8f4f 	dsb	sy
 8010120:	613b      	str	r3, [r7, #16]
}
 8010122:	bf00      	nop
 8010124:	bf00      	nop
 8010126:	e7fd      	b.n	8010124 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010128:	697b      	ldr	r3, [r7, #20]
}
 801012a:	4618      	mov	r0, r3
 801012c:	3718      	adds	r7, #24
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}
 8010132:	bf00      	nop
 8010134:	200033f8 	.word	0x200033f8
 8010138:	080165b4 	.word	0x080165b4
 801013c:	08010339 	.word	0x08010339
 8010140:	200033fc 	.word	0x200033fc

08010144 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010144:	b580      	push	{r7, lr}
 8010146:	b088      	sub	sp, #32
 8010148:	af02      	add	r7, sp, #8
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
 8010150:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010152:	202c      	movs	r0, #44	@ 0x2c
 8010154:	f000 fdda 	bl	8010d0c <pvPortMalloc>
 8010158:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d00d      	beq.n	801017c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	2200      	movs	r2, #0
 8010164:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	9301      	str	r3, [sp, #4]
 801016c:	6a3b      	ldr	r3, [r7, #32]
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	687a      	ldr	r2, [r7, #4]
 8010174:	68b9      	ldr	r1, [r7, #8]
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f000 f805 	bl	8010186 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801017c:	697b      	ldr	r3, [r7, #20]
	}
 801017e:	4618      	mov	r0, r3
 8010180:	3718      	adds	r7, #24
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b086      	sub	sp, #24
 801018a:	af00      	add	r7, sp, #0
 801018c:	60f8      	str	r0, [r7, #12]
 801018e:	60b9      	str	r1, [r7, #8]
 8010190:	607a      	str	r2, [r7, #4]
 8010192:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d10b      	bne.n	80101b2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 801019a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	617b      	str	r3, [r7, #20]
}
 80101ac:	bf00      	nop
 80101ae:	bf00      	nop
 80101b0:	e7fd      	b.n	80101ae <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80101b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d01e      	beq.n	80101f6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80101b8:	f000 faf2 	bl	80107a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80101bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80101c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80101c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ca:	683a      	ldr	r2, [r7, #0]
 80101cc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80101ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d0:	6a3a      	ldr	r2, [r7, #32]
 80101d2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80101d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d6:	3304      	adds	r3, #4
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fd f949 	bl	800d470 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d008      	beq.n	80101f6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101ea:	f043 0304 	orr.w	r3, r3, #4
 80101ee:	b2da      	uxtb	r2, r3
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80101f6:	bf00      	nop
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b08a      	sub	sp, #40	@ 0x28
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	607a      	str	r2, [r7, #4]
 801020c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801020e:	2300      	movs	r3, #0
 8010210:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10b      	bne.n	8010230 <xTimerGenericCommand+0x30>
	__asm volatile
 8010218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801021c:	f383 8811 	msr	BASEPRI, r3
 8010220:	f3bf 8f6f 	isb	sy
 8010224:	f3bf 8f4f 	dsb	sy
 8010228:	623b      	str	r3, [r7, #32]
}
 801022a:	bf00      	nop
 801022c:	bf00      	nop
 801022e:	e7fd      	b.n	801022c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010230:	4b19      	ldr	r3, [pc, #100]	@ (8010298 <xTimerGenericCommand+0x98>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d02a      	beq.n	801028e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	2b05      	cmp	r3, #5
 8010248:	dc18      	bgt.n	801027c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801024a:	f7ff fbc9 	bl	800f9e0 <xTaskGetSchedulerState>
 801024e:	4603      	mov	r3, r0
 8010250:	2b02      	cmp	r3, #2
 8010252:	d109      	bne.n	8010268 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010254:	4b10      	ldr	r3, [pc, #64]	@ (8010298 <xTimerGenericCommand+0x98>)
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	f107 0110 	add.w	r1, r7, #16
 801025c:	2300      	movs	r3, #0
 801025e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010260:	f7fd fb12 	bl	800d888 <xQueueGenericSend>
 8010264:	6278      	str	r0, [r7, #36]	@ 0x24
 8010266:	e012      	b.n	801028e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010268:	4b0b      	ldr	r3, [pc, #44]	@ (8010298 <xTimerGenericCommand+0x98>)
 801026a:	6818      	ldr	r0, [r3, #0]
 801026c:	f107 0110 	add.w	r1, r7, #16
 8010270:	2300      	movs	r3, #0
 8010272:	2200      	movs	r2, #0
 8010274:	f7fd fb08 	bl	800d888 <xQueueGenericSend>
 8010278:	6278      	str	r0, [r7, #36]	@ 0x24
 801027a:	e008      	b.n	801028e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801027c:	4b06      	ldr	r3, [pc, #24]	@ (8010298 <xTimerGenericCommand+0x98>)
 801027e:	6818      	ldr	r0, [r3, #0]
 8010280:	f107 0110 	add.w	r1, r7, #16
 8010284:	2300      	movs	r3, #0
 8010286:	683a      	ldr	r2, [r7, #0]
 8010288:	f7fd fc00 	bl	800da8c <xQueueGenericSendFromISR>
 801028c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010290:	4618      	mov	r0, r3
 8010292:	3728      	adds	r7, #40	@ 0x28
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	200033f8 	.word	0x200033f8

0801029c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b088      	sub	sp, #32
 80102a0:	af02      	add	r7, sp, #8
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102a6:	4b23      	ldr	r3, [pc, #140]	@ (8010334 <prvProcessExpiredTimer+0x98>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	3304      	adds	r3, #4
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7fd f945 	bl	800d544 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102c0:	f003 0304 	and.w	r3, r3, #4
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d023      	beq.n	8010310 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	699a      	ldr	r2, [r3, #24]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	18d1      	adds	r1, r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	6978      	ldr	r0, [r7, #20]
 80102d6:	f000 f8d5 	bl	8010484 <prvInsertTimerInActiveList>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d020      	beq.n	8010322 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102e0:	2300      	movs	r3, #0
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	2300      	movs	r3, #0
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	2100      	movs	r1, #0
 80102ea:	6978      	ldr	r0, [r7, #20]
 80102ec:	f7ff ff88 	bl	8010200 <xTimerGenericCommand>
 80102f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d114      	bne.n	8010322 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80102f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	60fb      	str	r3, [r7, #12]
}
 801030a:	bf00      	nop
 801030c:	bf00      	nop
 801030e:	e7fd      	b.n	801030c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010316:	f023 0301 	bic.w	r3, r3, #1
 801031a:	b2da      	uxtb	r2, r3
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	6978      	ldr	r0, [r7, #20]
 8010328:	4798      	blx	r3
}
 801032a:	bf00      	nop
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	200033f0 	.word	0x200033f0

08010338 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010340:	f107 0308 	add.w	r3, r7, #8
 8010344:	4618      	mov	r0, r3
 8010346:	f000 f859 	bl	80103fc <prvGetNextExpireTime>
 801034a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	4619      	mov	r1, r3
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 f805 	bl	8010360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010356:	f000 f8d7 	bl	8010508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801035a:	bf00      	nop
 801035c:	e7f0      	b.n	8010340 <prvTimerTask+0x8>
	...

08010360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801036a:	f7fe fd31 	bl	800edd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801036e:	f107 0308 	add.w	r3, r7, #8
 8010372:	4618      	mov	r0, r3
 8010374:	f000 f866 	bl	8010444 <prvSampleTimeNow>
 8010378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d130      	bne.n	80103e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d10a      	bne.n	801039c <prvProcessTimerOrBlockTask+0x3c>
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	429a      	cmp	r2, r3
 801038c:	d806      	bhi.n	801039c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801038e:	f7fe fd2d 	bl	800edec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010392:	68f9      	ldr	r1, [r7, #12]
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7ff ff81 	bl	801029c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801039a:	e024      	b.n	80103e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d008      	beq.n	80103b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80103a2:	4b13      	ldr	r3, [pc, #76]	@ (80103f0 <prvProcessTimerOrBlockTask+0x90>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d101      	bne.n	80103b0 <prvProcessTimerOrBlockTask+0x50>
 80103ac:	2301      	movs	r3, #1
 80103ae:	e000      	b.n	80103b2 <prvProcessTimerOrBlockTask+0x52>
 80103b0:	2300      	movs	r3, #0
 80103b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80103b4:	4b0f      	ldr	r3, [pc, #60]	@ (80103f4 <prvProcessTimerOrBlockTask+0x94>)
 80103b6:	6818      	ldr	r0, [r3, #0]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	683a      	ldr	r2, [r7, #0]
 80103c0:	4619      	mov	r1, r3
 80103c2:	f7fd ffeb 	bl	800e39c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80103c6:	f7fe fd11 	bl	800edec <xTaskResumeAll>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10a      	bne.n	80103e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80103d0:	4b09      	ldr	r3, [pc, #36]	@ (80103f8 <prvProcessTimerOrBlockTask+0x98>)
 80103d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103d6:	601a      	str	r2, [r3, #0]
 80103d8:	f3bf 8f4f 	dsb	sy
 80103dc:	f3bf 8f6f 	isb	sy
}
 80103e0:	e001      	b.n	80103e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80103e2:	f7fe fd03 	bl	800edec <xTaskResumeAll>
}
 80103e6:	bf00      	nop
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	200033f4 	.word	0x200033f4
 80103f4:	200033f8 	.word	0x200033f8
 80103f8:	e000ed04 	.word	0xe000ed04

080103fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80103fc:	b480      	push	{r7}
 80103fe:	b085      	sub	sp, #20
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010404:	4b0e      	ldr	r3, [pc, #56]	@ (8010440 <prvGetNextExpireTime+0x44>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d101      	bne.n	8010412 <prvGetNextExpireTime+0x16>
 801040e:	2201      	movs	r2, #1
 8010410:	e000      	b.n	8010414 <prvGetNextExpireTime+0x18>
 8010412:	2200      	movs	r2, #0
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d105      	bne.n	801042c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010420:	4b07      	ldr	r3, [pc, #28]	@ (8010440 <prvGetNextExpireTime+0x44>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	60fb      	str	r3, [r7, #12]
 801042a:	e001      	b.n	8010430 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801042c:	2300      	movs	r3, #0
 801042e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010430:	68fb      	ldr	r3, [r7, #12]
}
 8010432:	4618      	mov	r0, r3
 8010434:	3714      	adds	r7, #20
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr
 801043e:	bf00      	nop
 8010440:	200033f0 	.word	0x200033f0

08010444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801044c:	f7fe fd6c 	bl	800ef28 <xTaskGetTickCount>
 8010450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010452:	4b0b      	ldr	r3, [pc, #44]	@ (8010480 <prvSampleTimeNow+0x3c>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	68fa      	ldr	r2, [r7, #12]
 8010458:	429a      	cmp	r2, r3
 801045a:	d205      	bcs.n	8010468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801045c:	f000 f93a 	bl	80106d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2201      	movs	r2, #1
 8010464:	601a      	str	r2, [r3, #0]
 8010466:	e002      	b.n	801046e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801046e:	4a04      	ldr	r2, [pc, #16]	@ (8010480 <prvSampleTimeNow+0x3c>)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010474:	68fb      	ldr	r3, [r7, #12]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3710      	adds	r7, #16
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	20003400 	.word	0x20003400

08010484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
 8010490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010492:	2300      	movs	r3, #0
 8010494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80104a2:	68ba      	ldr	r2, [r7, #8]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d812      	bhi.n	80104d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	1ad2      	subs	r2, r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	699b      	ldr	r3, [r3, #24]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d302      	bcc.n	80104be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80104b8:	2301      	movs	r3, #1
 80104ba:	617b      	str	r3, [r7, #20]
 80104bc:	e01b      	b.n	80104f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80104be:	4b10      	ldr	r3, [pc, #64]	@ (8010500 <prvInsertTimerInActiveList+0x7c>)
 80104c0:	681a      	ldr	r2, [r3, #0]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	3304      	adds	r3, #4
 80104c6:	4619      	mov	r1, r3
 80104c8:	4610      	mov	r0, r2
 80104ca:	f7fd f802 	bl	800d4d2 <vListInsert>
 80104ce:	e012      	b.n	80104f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	683b      	ldr	r3, [r7, #0]
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d206      	bcs.n	80104e6 <prvInsertTimerInActiveList+0x62>
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d302      	bcc.n	80104e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80104e0:	2301      	movs	r3, #1
 80104e2:	617b      	str	r3, [r7, #20]
 80104e4:	e007      	b.n	80104f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104e6:	4b07      	ldr	r3, [pc, #28]	@ (8010504 <prvInsertTimerInActiveList+0x80>)
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	3304      	adds	r3, #4
 80104ee:	4619      	mov	r1, r3
 80104f0:	4610      	mov	r0, r2
 80104f2:	f7fc ffee 	bl	800d4d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80104f6:	697b      	ldr	r3, [r7, #20]
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3718      	adds	r7, #24
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	200033f4 	.word	0x200033f4
 8010504:	200033f0 	.word	0x200033f0

08010508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08e      	sub	sp, #56	@ 0x38
 801050c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801050e:	e0ce      	b.n	80106ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2b00      	cmp	r3, #0
 8010514:	da19      	bge.n	801054a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010516:	1d3b      	adds	r3, r7, #4
 8010518:	3304      	adds	r3, #4
 801051a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801051c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10b      	bne.n	801053a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	61fb      	str	r3, [r7, #28]
}
 8010534:	bf00      	nop
 8010536:	bf00      	nop
 8010538:	e7fd      	b.n	8010536 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801053a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010540:	6850      	ldr	r0, [r2, #4]
 8010542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010544:	6892      	ldr	r2, [r2, #8]
 8010546:	4611      	mov	r1, r2
 8010548:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	f2c0 80ae 	blt.w	80106ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d004      	beq.n	8010568 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801055e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010560:	3304      	adds	r3, #4
 8010562:	4618      	mov	r0, r3
 8010564:	f7fc ffee 	bl	800d544 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010568:	463b      	mov	r3, r7
 801056a:	4618      	mov	r0, r3
 801056c:	f7ff ff6a 	bl	8010444 <prvSampleTimeNow>
 8010570:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b09      	cmp	r3, #9
 8010576:	f200 8097 	bhi.w	80106a8 <prvProcessReceivedCommands+0x1a0>
 801057a:	a201      	add	r2, pc, #4	@ (adr r2, 8010580 <prvProcessReceivedCommands+0x78>)
 801057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010580:	080105a9 	.word	0x080105a9
 8010584:	080105a9 	.word	0x080105a9
 8010588:	080105a9 	.word	0x080105a9
 801058c:	0801061f 	.word	0x0801061f
 8010590:	08010633 	.word	0x08010633
 8010594:	0801067f 	.word	0x0801067f
 8010598:	080105a9 	.word	0x080105a9
 801059c:	080105a9 	.word	0x080105a9
 80105a0:	0801061f 	.word	0x0801061f
 80105a4:	08010633 	.word	0x08010633
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105ae:	f043 0301 	orr.w	r3, r3, #1
 80105b2:	b2da      	uxtb	r2, r3
 80105b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105be:	699b      	ldr	r3, [r3, #24]
 80105c0:	18d1      	adds	r1, r2, r3
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105c8:	f7ff ff5c 	bl	8010484 <prvInsertTimerInActiveList>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d06c      	beq.n	80106ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d4:	6a1b      	ldr	r3, [r3, #32]
 80105d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105e0:	f003 0304 	and.w	r3, r3, #4
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d061      	beq.n	80106ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80105e8:	68ba      	ldr	r2, [r7, #8]
 80105ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	441a      	add	r2, r3
 80105f0:	2300      	movs	r3, #0
 80105f2:	9300      	str	r3, [sp, #0]
 80105f4:	2300      	movs	r3, #0
 80105f6:	2100      	movs	r1, #0
 80105f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105fa:	f7ff fe01 	bl	8010200 <xTimerGenericCommand>
 80105fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010600:	6a3b      	ldr	r3, [r7, #32]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d152      	bne.n	80106ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801060a:	f383 8811 	msr	BASEPRI, r3
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f3bf 8f4f 	dsb	sy
 8010616:	61bb      	str	r3, [r7, #24]
}
 8010618:	bf00      	nop
 801061a:	bf00      	nop
 801061c:	e7fd      	b.n	801061a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801061e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010624:	f023 0301 	bic.w	r3, r3, #1
 8010628:	b2da      	uxtb	r2, r3
 801062a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801062c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010630:	e03d      	b.n	80106ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010634:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010638:	f043 0301 	orr.w	r3, r3, #1
 801063c:	b2da      	uxtb	r2, r3
 801063e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010640:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010648:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801064a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10b      	bne.n	801066a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010656:	f383 8811 	msr	BASEPRI, r3
 801065a:	f3bf 8f6f 	isb	sy
 801065e:	f3bf 8f4f 	dsb	sy
 8010662:	617b      	str	r3, [r7, #20]
}
 8010664:	bf00      	nop
 8010666:	bf00      	nop
 8010668:	e7fd      	b.n	8010666 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801066a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066c:	699a      	ldr	r2, [r3, #24]
 801066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010670:	18d1      	adds	r1, r2, r3
 8010672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010678:	f7ff ff04 	bl	8010484 <prvInsertTimerInActiveList>
					break;
 801067c:	e017      	b.n	80106ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801067e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010680:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010684:	f003 0302 	and.w	r3, r3, #2
 8010688:	2b00      	cmp	r3, #0
 801068a:	d103      	bne.n	8010694 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801068c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801068e:	f000 fc0b 	bl	8010ea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010692:	e00c      	b.n	80106ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801069a:	f023 0301 	bic.w	r3, r3, #1
 801069e:	b2da      	uxtb	r2, r3
 80106a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80106a6:	e002      	b.n	80106ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80106a8:	bf00      	nop
 80106aa:	e000      	b.n	80106ae <prvProcessReceivedCommands+0x1a6>
					break;
 80106ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106ae:	4b08      	ldr	r3, [pc, #32]	@ (80106d0 <prvProcessReceivedCommands+0x1c8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	1d39      	adds	r1, r7, #4
 80106b4:	2200      	movs	r2, #0
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fd fa86 	bl	800dbc8 <xQueueReceive>
 80106bc:	4603      	mov	r3, r0
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f47f af26 	bne.w	8010510 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80106c4:	bf00      	nop
 80106c6:	bf00      	nop
 80106c8:	3730      	adds	r7, #48	@ 0x30
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	200033f8 	.word	0x200033f8

080106d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b088      	sub	sp, #32
 80106d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106da:	e049      	b.n	8010770 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106dc:	4b2e      	ldr	r3, [pc, #184]	@ (8010798 <prvSwitchTimerLists+0xc4>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106e6:	4b2c      	ldr	r3, [pc, #176]	@ (8010798 <prvSwitchTimerLists+0xc4>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	3304      	adds	r3, #4
 80106f4:	4618      	mov	r0, r3
 80106f6:	f7fc ff25 	bl	800d544 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	6a1b      	ldr	r3, [r3, #32]
 80106fe:	68f8      	ldr	r0, [r7, #12]
 8010700:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010708:	f003 0304 	and.w	r3, r3, #4
 801070c:	2b00      	cmp	r3, #0
 801070e:	d02f      	beq.n	8010770 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	699b      	ldr	r3, [r3, #24]
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	4413      	add	r3, r2
 8010718:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	429a      	cmp	r2, r3
 8010720:	d90e      	bls.n	8010740 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	68ba      	ldr	r2, [r7, #8]
 8010726:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801072e:	4b1a      	ldr	r3, [pc, #104]	@ (8010798 <prvSwitchTimerLists+0xc4>)
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	3304      	adds	r3, #4
 8010736:	4619      	mov	r1, r3
 8010738:	4610      	mov	r0, r2
 801073a:	f7fc feca 	bl	800d4d2 <vListInsert>
 801073e:	e017      	b.n	8010770 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010740:	2300      	movs	r3, #0
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	2300      	movs	r3, #0
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	2100      	movs	r1, #0
 801074a:	68f8      	ldr	r0, [r7, #12]
 801074c:	f7ff fd58 	bl	8010200 <xTimerGenericCommand>
 8010750:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10b      	bne.n	8010770 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	603b      	str	r3, [r7, #0]
}
 801076a:	bf00      	nop
 801076c:	bf00      	nop
 801076e:	e7fd      	b.n	801076c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010770:	4b09      	ldr	r3, [pc, #36]	@ (8010798 <prvSwitchTimerLists+0xc4>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1b0      	bne.n	80106dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801077a:	4b07      	ldr	r3, [pc, #28]	@ (8010798 <prvSwitchTimerLists+0xc4>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010780:	4b06      	ldr	r3, [pc, #24]	@ (801079c <prvSwitchTimerLists+0xc8>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a04      	ldr	r2, [pc, #16]	@ (8010798 <prvSwitchTimerLists+0xc4>)
 8010786:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010788:	4a04      	ldr	r2, [pc, #16]	@ (801079c <prvSwitchTimerLists+0xc8>)
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	6013      	str	r3, [r2, #0]
}
 801078e:	bf00      	nop
 8010790:	3718      	adds	r7, #24
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	200033f0 	.word	0x200033f0
 801079c:	200033f4 	.word	0x200033f4

080107a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80107a6:	f000 f98f 	bl	8010ac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80107aa:	4b15      	ldr	r3, [pc, #84]	@ (8010800 <prvCheckForValidListAndQueue+0x60>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d120      	bne.n	80107f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80107b2:	4814      	ldr	r0, [pc, #80]	@ (8010804 <prvCheckForValidListAndQueue+0x64>)
 80107b4:	f7fc fe3c 	bl	800d430 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80107b8:	4813      	ldr	r0, [pc, #76]	@ (8010808 <prvCheckForValidListAndQueue+0x68>)
 80107ba:	f7fc fe39 	bl	800d430 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80107be:	4b13      	ldr	r3, [pc, #76]	@ (801080c <prvCheckForValidListAndQueue+0x6c>)
 80107c0:	4a10      	ldr	r2, [pc, #64]	@ (8010804 <prvCheckForValidListAndQueue+0x64>)
 80107c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80107c4:	4b12      	ldr	r3, [pc, #72]	@ (8010810 <prvCheckForValidListAndQueue+0x70>)
 80107c6:	4a10      	ldr	r2, [pc, #64]	@ (8010808 <prvCheckForValidListAndQueue+0x68>)
 80107c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80107ca:	2300      	movs	r3, #0
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	4b11      	ldr	r3, [pc, #68]	@ (8010814 <prvCheckForValidListAndQueue+0x74>)
 80107d0:	4a11      	ldr	r2, [pc, #68]	@ (8010818 <prvCheckForValidListAndQueue+0x78>)
 80107d2:	2110      	movs	r1, #16
 80107d4:	200a      	movs	r0, #10
 80107d6:	f7fc ff49 	bl	800d66c <xQueueGenericCreateStatic>
 80107da:	4603      	mov	r3, r0
 80107dc:	4a08      	ldr	r2, [pc, #32]	@ (8010800 <prvCheckForValidListAndQueue+0x60>)
 80107de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80107e0:	4b07      	ldr	r3, [pc, #28]	@ (8010800 <prvCheckForValidListAndQueue+0x60>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d005      	beq.n	80107f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80107e8:	4b05      	ldr	r3, [pc, #20]	@ (8010800 <prvCheckForValidListAndQueue+0x60>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	490b      	ldr	r1, [pc, #44]	@ (801081c <prvCheckForValidListAndQueue+0x7c>)
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fd fdaa 	bl	800e348 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80107f4:	f000 f99a 	bl	8010b2c <vPortExitCritical>
}
 80107f8:	bf00      	nop
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	200033f8 	.word	0x200033f8
 8010804:	200033c8 	.word	0x200033c8
 8010808:	200033dc 	.word	0x200033dc
 801080c:	200033f0 	.word	0x200033f0
 8010810:	200033f4 	.word	0x200033f4
 8010814:	200034a4 	.word	0x200034a4
 8010818:	20003404 	.word	0x20003404
 801081c:	080165bc 	.word	0x080165bc

08010820 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010820:	b580      	push	{r7, lr}
 8010822:	b08a      	sub	sp, #40	@ 0x28
 8010824:	af00      	add	r7, sp, #0
 8010826:	60f8      	str	r0, [r7, #12]
 8010828:	60b9      	str	r1, [r7, #8]
 801082a:	607a      	str	r2, [r7, #4]
 801082c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801082e:	f06f 0301 	mvn.w	r3, #1
 8010832:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010840:	4b06      	ldr	r3, [pc, #24]	@ (801085c <xTimerPendFunctionCallFromISR+0x3c>)
 8010842:	6818      	ldr	r0, [r3, #0]
 8010844:	f107 0114 	add.w	r1, r7, #20
 8010848:	2300      	movs	r3, #0
 801084a:	683a      	ldr	r2, [r7, #0]
 801084c:	f7fd f91e 	bl	800da8c <xQueueGenericSendFromISR>
 8010850:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010854:	4618      	mov	r0, r3
 8010856:	3728      	adds	r7, #40	@ 0x28
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	200033f8 	.word	0x200033f8

08010860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010860:	b480      	push	{r7}
 8010862:	b085      	sub	sp, #20
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	60b9      	str	r1, [r7, #8]
 801086a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	3b04      	subs	r3, #4
 8010870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	3b04      	subs	r3, #4
 801087e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	f023 0201 	bic.w	r2, r3, #1
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	3b04      	subs	r3, #4
 801088e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010890:	4a0c      	ldr	r2, [pc, #48]	@ (80108c4 <pxPortInitialiseStack+0x64>)
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	3b14      	subs	r3, #20
 801089a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	3b04      	subs	r3, #4
 80108a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f06f 0202 	mvn.w	r2, #2
 80108ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	3b20      	subs	r3, #32
 80108b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80108b6:	68fb      	ldr	r3, [r7, #12]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3714      	adds	r7, #20
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr
 80108c4:	080108c9 	.word	0x080108c9

080108c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80108d2:	4b13      	ldr	r3, [pc, #76]	@ (8010920 <prvTaskExitError+0x58>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108da:	d00b      	beq.n	80108f4 <prvTaskExitError+0x2c>
	__asm volatile
 80108dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e0:	f383 8811 	msr	BASEPRI, r3
 80108e4:	f3bf 8f6f 	isb	sy
 80108e8:	f3bf 8f4f 	dsb	sy
 80108ec:	60fb      	str	r3, [r7, #12]
}
 80108ee:	bf00      	nop
 80108f0:	bf00      	nop
 80108f2:	e7fd      	b.n	80108f0 <prvTaskExitError+0x28>
	__asm volatile
 80108f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f8:	f383 8811 	msr	BASEPRI, r3
 80108fc:	f3bf 8f6f 	isb	sy
 8010900:	f3bf 8f4f 	dsb	sy
 8010904:	60bb      	str	r3, [r7, #8]
}
 8010906:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010908:	bf00      	nop
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d0fc      	beq.n	801090a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010910:	bf00      	nop
 8010912:	bf00      	nop
 8010914:	3714      	adds	r7, #20
 8010916:	46bd      	mov	sp, r7
 8010918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	20000290 	.word	0x20000290
	...

08010930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010930:	4b07      	ldr	r3, [pc, #28]	@ (8010950 <pxCurrentTCBConst2>)
 8010932:	6819      	ldr	r1, [r3, #0]
 8010934:	6808      	ldr	r0, [r1, #0]
 8010936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093a:	f380 8809 	msr	PSP, r0
 801093e:	f3bf 8f6f 	isb	sy
 8010942:	f04f 0000 	mov.w	r0, #0
 8010946:	f380 8811 	msr	BASEPRI, r0
 801094a:	4770      	bx	lr
 801094c:	f3af 8000 	nop.w

08010950 <pxCurrentTCBConst2>:
 8010950:	20002ec8 	.word	0x20002ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010954:	bf00      	nop
 8010956:	bf00      	nop

08010958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010958:	4808      	ldr	r0, [pc, #32]	@ (801097c <prvPortStartFirstTask+0x24>)
 801095a:	6800      	ldr	r0, [r0, #0]
 801095c:	6800      	ldr	r0, [r0, #0]
 801095e:	f380 8808 	msr	MSP, r0
 8010962:	f04f 0000 	mov.w	r0, #0
 8010966:	f380 8814 	msr	CONTROL, r0
 801096a:	b662      	cpsie	i
 801096c:	b661      	cpsie	f
 801096e:	f3bf 8f4f 	dsb	sy
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	df00      	svc	0
 8010978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801097a:	bf00      	nop
 801097c:	e000ed08 	.word	0xe000ed08

08010980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010986:	4b47      	ldr	r3, [pc, #284]	@ (8010aa4 <xPortStartScheduler+0x124>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	4a47      	ldr	r2, [pc, #284]	@ (8010aa8 <xPortStartScheduler+0x128>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d10b      	bne.n	80109a8 <xPortStartScheduler+0x28>
	__asm volatile
 8010990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	60fb      	str	r3, [r7, #12]
}
 80109a2:	bf00      	nop
 80109a4:	bf00      	nop
 80109a6:	e7fd      	b.n	80109a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80109a8:	4b3e      	ldr	r3, [pc, #248]	@ (8010aa4 <xPortStartScheduler+0x124>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a3f      	ldr	r2, [pc, #252]	@ (8010aac <xPortStartScheduler+0x12c>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d10b      	bne.n	80109ca <xPortStartScheduler+0x4a>
	__asm volatile
 80109b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109b6:	f383 8811 	msr	BASEPRI, r3
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	613b      	str	r3, [r7, #16]
}
 80109c4:	bf00      	nop
 80109c6:	bf00      	nop
 80109c8:	e7fd      	b.n	80109c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109ca:	4b39      	ldr	r3, [pc, #228]	@ (8010ab0 <xPortStartScheduler+0x130>)
 80109cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	b2db      	uxtb	r3, r3
 80109d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	22ff      	movs	r2, #255	@ 0xff
 80109da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109e4:	78fb      	ldrb	r3, [r7, #3]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80109ec:	b2da      	uxtb	r2, r3
 80109ee:	4b31      	ldr	r3, [pc, #196]	@ (8010ab4 <xPortStartScheduler+0x134>)
 80109f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109f2:	4b31      	ldr	r3, [pc, #196]	@ (8010ab8 <xPortStartScheduler+0x138>)
 80109f4:	2207      	movs	r2, #7
 80109f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109f8:	e009      	b.n	8010a0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80109fa:	4b2f      	ldr	r3, [pc, #188]	@ (8010ab8 <xPortStartScheduler+0x138>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	3b01      	subs	r3, #1
 8010a00:	4a2d      	ldr	r2, [pc, #180]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a04:	78fb      	ldrb	r3, [r7, #3]
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a0e:	78fb      	ldrb	r3, [r7, #3]
 8010a10:	b2db      	uxtb	r3, r3
 8010a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a16:	2b80      	cmp	r3, #128	@ 0x80
 8010a18:	d0ef      	beq.n	80109fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a1a:	4b27      	ldr	r3, [pc, #156]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f1c3 0307 	rsb	r3, r3, #7
 8010a22:	2b04      	cmp	r3, #4
 8010a24:	d00b      	beq.n	8010a3e <xPortStartScheduler+0xbe>
	__asm volatile
 8010a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a2a:	f383 8811 	msr	BASEPRI, r3
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	60bb      	str	r3, [r7, #8]
}
 8010a38:	bf00      	nop
 8010a3a:	bf00      	nop
 8010a3c:	e7fd      	b.n	8010a3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	021b      	lsls	r3, r3, #8
 8010a44:	4a1c      	ldr	r2, [pc, #112]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a48:	4b1b      	ldr	r3, [pc, #108]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010a50:	4a19      	ldr	r2, [pc, #100]	@ (8010ab8 <xPortStartScheduler+0x138>)
 8010a52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a5c:	4b17      	ldr	r3, [pc, #92]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a16      	ldr	r2, [pc, #88]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a68:	4b14      	ldr	r3, [pc, #80]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a13      	ldr	r2, [pc, #76]	@ (8010abc <xPortStartScheduler+0x13c>)
 8010a6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010a72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a74:	f000 f8da 	bl	8010c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a78:	4b11      	ldr	r3, [pc, #68]	@ (8010ac0 <xPortStartScheduler+0x140>)
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a7e:	f000 f8f9 	bl	8010c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a82:	4b10      	ldr	r3, [pc, #64]	@ (8010ac4 <xPortStartScheduler+0x144>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a0f      	ldr	r2, [pc, #60]	@ (8010ac4 <xPortStartScheduler+0x144>)
 8010a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010a8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a8e:	f7ff ff63 	bl	8010958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a92:	f7fe fbe7 	bl	800f264 <vTaskSwitchContext>
	prvTaskExitError();
 8010a96:	f7ff ff17 	bl	80108c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3718      	adds	r7, #24
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	e000ed00 	.word	0xe000ed00
 8010aa8:	410fc271 	.word	0x410fc271
 8010aac:	410fc270 	.word	0x410fc270
 8010ab0:	e000e400 	.word	0xe000e400
 8010ab4:	200034f4 	.word	0x200034f4
 8010ab8:	200034f8 	.word	0x200034f8
 8010abc:	e000ed20 	.word	0xe000ed20
 8010ac0:	20000290 	.word	0x20000290
 8010ac4:	e000ef34 	.word	0xe000ef34

08010ac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	607b      	str	r3, [r7, #4]
}
 8010ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010ae2:	4b10      	ldr	r3, [pc, #64]	@ (8010b24 <vPortEnterCritical+0x5c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8010b24 <vPortEnterCritical+0x5c>)
 8010aea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010aec:	4b0d      	ldr	r3, [pc, #52]	@ (8010b24 <vPortEnterCritical+0x5c>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d110      	bne.n	8010b16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010af4:	4b0c      	ldr	r3, [pc, #48]	@ (8010b28 <vPortEnterCritical+0x60>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d00b      	beq.n	8010b16 <vPortEnterCritical+0x4e>
	__asm volatile
 8010afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b02:	f383 8811 	msr	BASEPRI, r3
 8010b06:	f3bf 8f6f 	isb	sy
 8010b0a:	f3bf 8f4f 	dsb	sy
 8010b0e:	603b      	str	r3, [r7, #0]
}
 8010b10:	bf00      	nop
 8010b12:	bf00      	nop
 8010b14:	e7fd      	b.n	8010b12 <vPortEnterCritical+0x4a>
	}
}
 8010b16:	bf00      	nop
 8010b18:	370c      	adds	r7, #12
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	20000290 	.word	0x20000290
 8010b28:	e000ed04 	.word	0xe000ed04

08010b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b083      	sub	sp, #12
 8010b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b32:	4b12      	ldr	r3, [pc, #72]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d10b      	bne.n	8010b52 <vPortExitCritical+0x26>
	__asm volatile
 8010b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	607b      	str	r3, [r7, #4]
}
 8010b4c:	bf00      	nop
 8010b4e:	bf00      	nop
 8010b50:	e7fd      	b.n	8010b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010b52:	4b0a      	ldr	r3, [pc, #40]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	4a08      	ldr	r2, [pc, #32]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b5c:	4b07      	ldr	r3, [pc, #28]	@ (8010b7c <vPortExitCritical+0x50>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d105      	bne.n	8010b70 <vPortExitCritical+0x44>
 8010b64:	2300      	movs	r3, #0
 8010b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	f383 8811 	msr	BASEPRI, r3
}
 8010b6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	20000290 	.word	0x20000290

08010b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b80:	f3ef 8009 	mrs	r0, PSP
 8010b84:	f3bf 8f6f 	isb	sy
 8010b88:	4b15      	ldr	r3, [pc, #84]	@ (8010be0 <pxCurrentTCBConst>)
 8010b8a:	681a      	ldr	r2, [r3, #0]
 8010b8c:	f01e 0f10 	tst.w	lr, #16
 8010b90:	bf08      	it	eq
 8010b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	6010      	str	r0, [r2, #0]
 8010b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010ba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010ba4:	f380 8811 	msr	BASEPRI, r0
 8010ba8:	f3bf 8f4f 	dsb	sy
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f7fe fb58 	bl	800f264 <vTaskSwitchContext>
 8010bb4:	f04f 0000 	mov.w	r0, #0
 8010bb8:	f380 8811 	msr	BASEPRI, r0
 8010bbc:	bc09      	pop	{r0, r3}
 8010bbe:	6819      	ldr	r1, [r3, #0]
 8010bc0:	6808      	ldr	r0, [r1, #0]
 8010bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc6:	f01e 0f10 	tst.w	lr, #16
 8010bca:	bf08      	it	eq
 8010bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bd0:	f380 8809 	msr	PSP, r0
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	4770      	bx	lr
 8010bda:	bf00      	nop
 8010bdc:	f3af 8000 	nop.w

08010be0 <pxCurrentTCBConst>:
 8010be0:	20002ec8 	.word	0x20002ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010be4:	bf00      	nop
 8010be6:	bf00      	nop

08010be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
	__asm volatile
 8010bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bf2:	f383 8811 	msr	BASEPRI, r3
 8010bf6:	f3bf 8f6f 	isb	sy
 8010bfa:	f3bf 8f4f 	dsb	sy
 8010bfe:	607b      	str	r3, [r7, #4]
}
 8010c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c02:	f7fe fa75 	bl	800f0f0 <xTaskIncrementTick>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d003      	beq.n	8010c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c0c:	4b06      	ldr	r3, [pc, #24]	@ (8010c28 <xPortSysTickHandler+0x40>)
 8010c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c12:	601a      	str	r2, [r3, #0]
 8010c14:	2300      	movs	r3, #0
 8010c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	f383 8811 	msr	BASEPRI, r3
}
 8010c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c20:	bf00      	nop
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	e000ed04 	.word	0xe000ed04

08010c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c30:	4b0b      	ldr	r3, [pc, #44]	@ (8010c60 <vPortSetupTimerInterrupt+0x34>)
 8010c32:	2200      	movs	r2, #0
 8010c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c36:	4b0b      	ldr	r3, [pc, #44]	@ (8010c64 <vPortSetupTimerInterrupt+0x38>)
 8010c38:	2200      	movs	r2, #0
 8010c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010c68 <vPortSetupTimerInterrupt+0x3c>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a0a      	ldr	r2, [pc, #40]	@ (8010c6c <vPortSetupTimerInterrupt+0x40>)
 8010c42:	fba2 2303 	umull	r2, r3, r2, r3
 8010c46:	099b      	lsrs	r3, r3, #6
 8010c48:	4a09      	ldr	r2, [pc, #36]	@ (8010c70 <vPortSetupTimerInterrupt+0x44>)
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c4e:	4b04      	ldr	r3, [pc, #16]	@ (8010c60 <vPortSetupTimerInterrupt+0x34>)
 8010c50:	2207      	movs	r2, #7
 8010c52:	601a      	str	r2, [r3, #0]
}
 8010c54:	bf00      	nop
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	e000e010 	.word	0xe000e010
 8010c64:	e000e018 	.word	0xe000e018
 8010c68:	20000264 	.word	0x20000264
 8010c6c:	10624dd3 	.word	0x10624dd3
 8010c70:	e000e014 	.word	0xe000e014

08010c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010c84 <vPortEnableVFP+0x10>
 8010c78:	6801      	ldr	r1, [r0, #0]
 8010c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010c7e:	6001      	str	r1, [r0, #0]
 8010c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c82:	bf00      	nop
 8010c84:	e000ed88 	.word	0xe000ed88

08010c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c88:	b480      	push	{r7}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c8e:	f3ef 8305 	mrs	r3, IPSR
 8010c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	2b0f      	cmp	r3, #15
 8010c98:	d915      	bls.n	8010cc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c9a:	4a18      	ldr	r2, [pc, #96]	@ (8010cfc <vPortValidateInterruptPriority+0x74>)
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ca4:	4b16      	ldr	r3, [pc, #88]	@ (8010d00 <vPortValidateInterruptPriority+0x78>)
 8010ca6:	781b      	ldrb	r3, [r3, #0]
 8010ca8:	7afa      	ldrb	r2, [r7, #11]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d20b      	bcs.n	8010cc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	607b      	str	r3, [r7, #4]
}
 8010cc0:	bf00      	nop
 8010cc2:	bf00      	nop
 8010cc4:	e7fd      	b.n	8010cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8010d04 <vPortValidateInterruptPriority+0x7c>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010cce:	4b0e      	ldr	r3, [pc, #56]	@ (8010d08 <vPortValidateInterruptPriority+0x80>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d90b      	bls.n	8010cee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cda:	f383 8811 	msr	BASEPRI, r3
 8010cde:	f3bf 8f6f 	isb	sy
 8010ce2:	f3bf 8f4f 	dsb	sy
 8010ce6:	603b      	str	r3, [r7, #0]
}
 8010ce8:	bf00      	nop
 8010cea:	bf00      	nop
 8010cec:	e7fd      	b.n	8010cea <vPortValidateInterruptPriority+0x62>
	}
 8010cee:	bf00      	nop
 8010cf0:	3714      	adds	r7, #20
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf8:	4770      	bx	lr
 8010cfa:	bf00      	nop
 8010cfc:	e000e3f0 	.word	0xe000e3f0
 8010d00:	200034f4 	.word	0x200034f4
 8010d04:	e000ed0c 	.word	0xe000ed0c
 8010d08:	200034f8 	.word	0x200034f8

08010d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b08a      	sub	sp, #40	@ 0x28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d14:	2300      	movs	r3, #0
 8010d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d18:	f7fe f85a 	bl	800edd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e90 <pvPortMalloc+0x184>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d24:	f000 f924 	bl	8010f70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d28:	4b5a      	ldr	r3, [pc, #360]	@ (8010e94 <pvPortMalloc+0x188>)
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4013      	ands	r3, r2
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f040 8095 	bne.w	8010e60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d01e      	beq.n	8010d7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010d3c:	2208      	movs	r2, #8
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4413      	add	r3, r2
 8010d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f003 0307 	and.w	r3, r3, #7
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d015      	beq.n	8010d7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f023 0307 	bic.w	r3, r3, #7
 8010d54:	3308      	adds	r3, #8
 8010d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f003 0307 	and.w	r3, r3, #7
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00b      	beq.n	8010d7a <pvPortMalloc+0x6e>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d66:	f383 8811 	msr	BASEPRI, r3
 8010d6a:	f3bf 8f6f 	isb	sy
 8010d6e:	f3bf 8f4f 	dsb	sy
 8010d72:	617b      	str	r3, [r7, #20]
}
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
 8010d78:	e7fd      	b.n	8010d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d06f      	beq.n	8010e60 <pvPortMalloc+0x154>
 8010d80:	4b45      	ldr	r3, [pc, #276]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d86a      	bhi.n	8010e60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d8a:	4b44      	ldr	r3, [pc, #272]	@ (8010e9c <pvPortMalloc+0x190>)
 8010d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d8e:	4b43      	ldr	r3, [pc, #268]	@ (8010e9c <pvPortMalloc+0x190>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d94:	e004      	b.n	8010da0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d903      	bls.n	8010db2 <pvPortMalloc+0xa6>
 8010daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1f1      	bne.n	8010d96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010db2:	4b37      	ldr	r3, [pc, #220]	@ (8010e90 <pvPortMalloc+0x184>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d051      	beq.n	8010e60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010dbc:	6a3b      	ldr	r3, [r7, #32]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	2208      	movs	r2, #8
 8010dc2:	4413      	add	r3, r2
 8010dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	6a3b      	ldr	r3, [r7, #32]
 8010dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd0:	685a      	ldr	r2, [r3, #4]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	1ad2      	subs	r2, r2, r3
 8010dd6:	2308      	movs	r3, #8
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d920      	bls.n	8010e20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	4413      	add	r3, r2
 8010de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	f003 0307 	and.w	r3, r3, #7
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00b      	beq.n	8010e08 <pvPortMalloc+0xfc>
	__asm volatile
 8010df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	613b      	str	r3, [r7, #16]
}
 8010e02:	bf00      	nop
 8010e04:	bf00      	nop
 8010e06:	e7fd      	b.n	8010e04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0a:	685a      	ldr	r2, [r3, #4]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	1ad2      	subs	r2, r2, r3
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e1a:	69b8      	ldr	r0, [r7, #24]
 8010e1c:	f000 f90a 	bl	8011034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e20:	4b1d      	ldr	r3, [pc, #116]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	4b1b      	ldr	r3, [pc, #108]	@ (8010ea0 <pvPortMalloc+0x194>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d203      	bcs.n	8010e42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e3a:	4b17      	ldr	r3, [pc, #92]	@ (8010e98 <pvPortMalloc+0x18c>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	4a18      	ldr	r2, [pc, #96]	@ (8010ea0 <pvPortMalloc+0x194>)
 8010e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e44:	685a      	ldr	r2, [r3, #4]
 8010e46:	4b13      	ldr	r3, [pc, #76]	@ (8010e94 <pvPortMalloc+0x188>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	431a      	orrs	r2, r3
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e52:	2200      	movs	r2, #0
 8010e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010e56:	4b13      	ldr	r3, [pc, #76]	@ (8010ea4 <pvPortMalloc+0x198>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	4a11      	ldr	r2, [pc, #68]	@ (8010ea4 <pvPortMalloc+0x198>)
 8010e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e60:	f7fd ffc4 	bl	800edec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	f003 0307 	and.w	r3, r3, #7
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d00b      	beq.n	8010e86 <pvPortMalloc+0x17a>
	__asm volatile
 8010e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e72:	f383 8811 	msr	BASEPRI, r3
 8010e76:	f3bf 8f6f 	isb	sy
 8010e7a:	f3bf 8f4f 	dsb	sy
 8010e7e:	60fb      	str	r3, [r7, #12]
}
 8010e80:	bf00      	nop
 8010e82:	bf00      	nop
 8010e84:	e7fd      	b.n	8010e82 <pvPortMalloc+0x176>
	return pvReturn;
 8010e86:	69fb      	ldr	r3, [r7, #28]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3728      	adds	r7, #40	@ 0x28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}
 8010e90:	20012f04 	.word	0x20012f04
 8010e94:	20012f18 	.word	0x20012f18
 8010e98:	20012f08 	.word	0x20012f08
 8010e9c:	20012efc 	.word	0x20012efc
 8010ea0:	20012f0c 	.word	0x20012f0c
 8010ea4:	20012f10 	.word	0x20012f10

08010ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b086      	sub	sp, #24
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d04f      	beq.n	8010f5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eba:	2308      	movs	r3, #8
 8010ebc:	425b      	negs	r3, r3
 8010ebe:	697a      	ldr	r2, [r7, #20]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	4b25      	ldr	r3, [pc, #148]	@ (8010f64 <vPortFree+0xbc>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d10b      	bne.n	8010eee <vPortFree+0x46>
	__asm volatile
 8010ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eda:	f383 8811 	msr	BASEPRI, r3
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	60fb      	str	r3, [r7, #12]
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00b      	beq.n	8010f0e <vPortFree+0x66>
	__asm volatile
 8010ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010efa:	f383 8811 	msr	BASEPRI, r3
 8010efe:	f3bf 8f6f 	isb	sy
 8010f02:	f3bf 8f4f 	dsb	sy
 8010f06:	60bb      	str	r3, [r7, #8]
}
 8010f08:	bf00      	nop
 8010f0a:	bf00      	nop
 8010f0c:	e7fd      	b.n	8010f0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	685a      	ldr	r2, [r3, #4]
 8010f12:	4b14      	ldr	r3, [pc, #80]	@ (8010f64 <vPortFree+0xbc>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4013      	ands	r3, r2
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d01e      	beq.n	8010f5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d11a      	bne.n	8010f5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	685a      	ldr	r2, [r3, #4]
 8010f28:	4b0e      	ldr	r3, [pc, #56]	@ (8010f64 <vPortFree+0xbc>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	43db      	mvns	r3, r3
 8010f2e:	401a      	ands	r2, r3
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f34:	f7fd ff4c 	bl	800edd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	685a      	ldr	r2, [r3, #4]
 8010f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f68 <vPortFree+0xc0>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4413      	add	r3, r2
 8010f42:	4a09      	ldr	r2, [pc, #36]	@ (8010f68 <vPortFree+0xc0>)
 8010f44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f46:	6938      	ldr	r0, [r7, #16]
 8010f48:	f000 f874 	bl	8011034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f4c:	4b07      	ldr	r3, [pc, #28]	@ (8010f6c <vPortFree+0xc4>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	3301      	adds	r3, #1
 8010f52:	4a06      	ldr	r2, [pc, #24]	@ (8010f6c <vPortFree+0xc4>)
 8010f54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010f56:	f7fd ff49 	bl	800edec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f5a:	bf00      	nop
 8010f5c:	3718      	adds	r7, #24
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}
 8010f62:	bf00      	nop
 8010f64:	20012f18 	.word	0x20012f18
 8010f68:	20012f08 	.word	0x20012f08
 8010f6c:	20012f14 	.word	0x20012f14

08010f70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f76:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8010f7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f7c:	4b27      	ldr	r3, [pc, #156]	@ (801101c <prvHeapInit+0xac>)
 8010f7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f003 0307 	and.w	r3, r3, #7
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d00c      	beq.n	8010fa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	3307      	adds	r3, #7
 8010f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f023 0307 	bic.w	r3, r3, #7
 8010f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f98:	68ba      	ldr	r2, [r7, #8]
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	1ad3      	subs	r3, r2, r3
 8010f9e:	4a1f      	ldr	r2, [pc, #124]	@ (801101c <prvHeapInit+0xac>)
 8010fa0:	4413      	add	r3, r2
 8010fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8011020 <prvHeapInit+0xb0>)
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fae:	4b1c      	ldr	r3, [pc, #112]	@ (8011020 <prvHeapInit+0xb0>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	4413      	add	r3, r2
 8010fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fbc:	2208      	movs	r2, #8
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	1a9b      	subs	r3, r3, r2
 8010fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	f023 0307 	bic.w	r3, r3, #7
 8010fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	4a15      	ldr	r2, [pc, #84]	@ (8011024 <prvHeapInit+0xb4>)
 8010fd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fd2:	4b14      	ldr	r3, [pc, #80]	@ (8011024 <prvHeapInit+0xb4>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fda:	4b12      	ldr	r3, [pc, #72]	@ (8011024 <prvHeapInit+0xb4>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	68fa      	ldr	r2, [r7, #12]
 8010fea:	1ad2      	subs	r2, r2, r3
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8011024 <prvHeapInit+0xb4>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	685b      	ldr	r3, [r3, #4]
 8010ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8011028 <prvHeapInit+0xb8>)
 8010ffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	4a09      	ldr	r2, [pc, #36]	@ (801102c <prvHeapInit+0xbc>)
 8011006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011008:	4b09      	ldr	r3, [pc, #36]	@ (8011030 <prvHeapInit+0xc0>)
 801100a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801100e:	601a      	str	r2, [r3, #0]
}
 8011010:	bf00      	nop
 8011012:	3714      	adds	r7, #20
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr
 801101c:	200034fc 	.word	0x200034fc
 8011020:	20012efc 	.word	0x20012efc
 8011024:	20012f04 	.word	0x20012f04
 8011028:	20012f0c 	.word	0x20012f0c
 801102c:	20012f08 	.word	0x20012f08
 8011030:	20012f18 	.word	0x20012f18

08011034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801103c:	4b28      	ldr	r3, [pc, #160]	@ (80110e0 <prvInsertBlockIntoFreeList+0xac>)
 801103e:	60fb      	str	r3, [r7, #12]
 8011040:	e002      	b.n	8011048 <prvInsertBlockIntoFreeList+0x14>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	60fb      	str	r3, [r7, #12]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d8f7      	bhi.n	8011042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	68ba      	ldr	r2, [r7, #8]
 801105c:	4413      	add	r3, r2
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	429a      	cmp	r2, r3
 8011062:	d108      	bne.n	8011076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	685a      	ldr	r2, [r3, #4]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	441a      	add	r2, r3
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	441a      	add	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	429a      	cmp	r2, r3
 8011088:	d118      	bne.n	80110bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	4b15      	ldr	r3, [pc, #84]	@ (80110e4 <prvInsertBlockIntoFreeList+0xb0>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	429a      	cmp	r2, r3
 8011094:	d00d      	beq.n	80110b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	441a      	add	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	e008      	b.n	80110c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110b2:	4b0c      	ldr	r3, [pc, #48]	@ (80110e4 <prvInsertBlockIntoFreeList+0xb0>)
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	601a      	str	r2, [r3, #0]
 80110ba:	e003      	b.n	80110c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d002      	beq.n	80110d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110d2:	bf00      	nop
 80110d4:	3714      	adds	r7, #20
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	20012efc 	.word	0x20012efc
 80110e4:	20012f04 	.word	0x20012f04

080110e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80110ec:	2201      	movs	r2, #1
 80110ee:	490e      	ldr	r1, [pc, #56]	@ (8011128 <MX_USB_HOST_Init+0x40>)
 80110f0:	480e      	ldr	r0, [pc, #56]	@ (801112c <MX_USB_HOST_Init+0x44>)
 80110f2:	f7f9 feb5 	bl	800ae60 <USBH_Init>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80110fc:	f7f2 f93c 	bl	8003378 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011100:	490b      	ldr	r1, [pc, #44]	@ (8011130 <MX_USB_HOST_Init+0x48>)
 8011102:	480a      	ldr	r0, [pc, #40]	@ (801112c <MX_USB_HOST_Init+0x44>)
 8011104:	f7f9 ff79 	bl	800affa <USBH_RegisterClass>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801110e:	f7f2 f933 	bl	8003378 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011112:	4806      	ldr	r0, [pc, #24]	@ (801112c <MX_USB_HOST_Init+0x44>)
 8011114:	f7f9 fffd 	bl	800b112 <USBH_Start>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d001      	beq.n	8011122 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801111e:	f7f2 f92b 	bl	8003378 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	08011135 	.word	0x08011135
 801112c:	20012f1c 	.word	0x20012f1c
 8011130:	20000270 	.word	0x20000270

08011134 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	3b01      	subs	r3, #1
 8011144:	2b04      	cmp	r3, #4
 8011146:	d819      	bhi.n	801117c <USBH_UserProcess+0x48>
 8011148:	a201      	add	r2, pc, #4	@ (adr r2, 8011150 <USBH_UserProcess+0x1c>)
 801114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801114e:	bf00      	nop
 8011150:	0801117d 	.word	0x0801117d
 8011154:	0801116d 	.word	0x0801116d
 8011158:	0801117d 	.word	0x0801117d
 801115c:	08011175 	.word	0x08011175
 8011160:	08011165 	.word	0x08011165
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011164:	4b09      	ldr	r3, [pc, #36]	@ (801118c <USBH_UserProcess+0x58>)
 8011166:	2203      	movs	r2, #3
 8011168:	701a      	strb	r2, [r3, #0]
  break;
 801116a:	e008      	b.n	801117e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801116c:	4b07      	ldr	r3, [pc, #28]	@ (801118c <USBH_UserProcess+0x58>)
 801116e:	2202      	movs	r2, #2
 8011170:	701a      	strb	r2, [r3, #0]
  break;
 8011172:	e004      	b.n	801117e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011174:	4b05      	ldr	r3, [pc, #20]	@ (801118c <USBH_UserProcess+0x58>)
 8011176:	2201      	movs	r2, #1
 8011178:	701a      	strb	r2, [r3, #0]
  break;
 801117a:	e000      	b.n	801117e <USBH_UserProcess+0x4a>

  default:
  break;
 801117c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801117e:	bf00      	nop
 8011180:	370c      	adds	r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop
 801118c:	20013300 	.word	0x20013300

08011190 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b08a      	sub	sp, #40	@ 0x28
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011198:	f107 0314 	add.w	r3, r7, #20
 801119c:	2200      	movs	r2, #0
 801119e:	601a      	str	r2, [r3, #0]
 80111a0:	605a      	str	r2, [r3, #4]
 80111a2:	609a      	str	r2, [r3, #8]
 80111a4:	60da      	str	r2, [r3, #12]
 80111a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80111b0:	d147      	bne.n	8011242 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111b2:	2300      	movs	r3, #0
 80111b4:	613b      	str	r3, [r7, #16]
 80111b6:	4b25      	ldr	r3, [pc, #148]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 80111b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111ba:	4a24      	ldr	r2, [pc, #144]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 80111bc:	f043 0301 	orr.w	r3, r3, #1
 80111c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80111c2:	4b22      	ldr	r3, [pc, #136]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 80111c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111c6:	f003 0301 	and.w	r3, r3, #1
 80111ca:	613b      	str	r3, [r7, #16]
 80111cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80111ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80111d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80111d4:	2300      	movs	r3, #0
 80111d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111d8:	2300      	movs	r3, #0
 80111da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80111dc:	f107 0314 	add.w	r3, r7, #20
 80111e0:	4619      	mov	r1, r3
 80111e2:	481b      	ldr	r0, [pc, #108]	@ (8011250 <HAL_HCD_MspInit+0xc0>)
 80111e4:	f7f2 fe5a 	bl	8003e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80111e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80111ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111ee:	2302      	movs	r3, #2
 80111f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111f2:	2300      	movs	r3, #0
 80111f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80111f6:	2300      	movs	r3, #0
 80111f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80111fa:	230a      	movs	r3, #10
 80111fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80111fe:	f107 0314 	add.w	r3, r7, #20
 8011202:	4619      	mov	r1, r3
 8011204:	4812      	ldr	r0, [pc, #72]	@ (8011250 <HAL_HCD_MspInit+0xc0>)
 8011206:	f7f2 fe49 	bl	8003e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801120a:	4b10      	ldr	r3, [pc, #64]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 801120c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801120e:	4a0f      	ldr	r2, [pc, #60]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 8011210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011214:	6353      	str	r3, [r2, #52]	@ 0x34
 8011216:	2300      	movs	r3, #0
 8011218:	60fb      	str	r3, [r7, #12]
 801121a:	4b0c      	ldr	r3, [pc, #48]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 801121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801121e:	4a0b      	ldr	r2, [pc, #44]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 8011220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011224:	6453      	str	r3, [r2, #68]	@ 0x44
 8011226:	4b09      	ldr	r3, [pc, #36]	@ (801124c <HAL_HCD_MspInit+0xbc>)
 8011228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801122e:	60fb      	str	r3, [r7, #12]
 8011230:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011232:	2200      	movs	r2, #0
 8011234:	2105      	movs	r1, #5
 8011236:	2043      	movs	r0, #67	@ 0x43
 8011238:	f7f2 fd74 	bl	8003d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801123c:	2043      	movs	r0, #67	@ 0x43
 801123e:	f7f2 fd8d 	bl	8003d5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011242:	bf00      	nop
 8011244:	3728      	adds	r7, #40	@ 0x28
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	40023800 	.word	0x40023800
 8011250:	40020000 	.word	0x40020000

08011254 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011262:	4618      	mov	r0, r3
 8011264:	f7fa fb8d 	bl	800b982 <USBH_LL_IncTimer>
}
 8011268:	bf00      	nop
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801127e:	4618      	mov	r0, r3
 8011280:	f7fa fbcd 	bl	800ba1e <USBH_LL_Connect>
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801129a:	4618      	mov	r0, r3
 801129c:	f7fa fbda 	bl	800ba54 <USBH_LL_Disconnect>
}
 80112a0:	bf00      	nop
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	460b      	mov	r3, r1
 80112b2:	70fb      	strb	r3, [r7, #3]
 80112b4:	4613      	mov	r3, r2
 80112b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fa fc2d 	bl	800bb1e <USBH_LL_NotifyURBChange>
#endif
}
 80112c4:	bf00      	nop
 80112c6:	3708      	adds	r7, #8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fa fb7b 	bl	800b9d6 <USBH_LL_PortEnabled>
}
 80112e0:	bf00      	nop
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fa fb7f 	bl	800b9fa <USBH_LL_PortDisabled>
}
 80112fc:	bf00      	nop
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011312:	2b01      	cmp	r3, #1
 8011314:	d12a      	bne.n	801136c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011316:	4a18      	ldr	r2, [pc, #96]	@ (8011378 <USBH_LL_Init+0x74>)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a15      	ldr	r2, [pc, #84]	@ (8011378 <USBH_LL_Init+0x74>)
 8011322:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011326:	4b14      	ldr	r3, [pc, #80]	@ (8011378 <USBH_LL_Init+0x74>)
 8011328:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801132c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801132e:	4b12      	ldr	r3, [pc, #72]	@ (8011378 <USBH_LL_Init+0x74>)
 8011330:	2208      	movs	r2, #8
 8011332:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011334:	4b10      	ldr	r3, [pc, #64]	@ (8011378 <USBH_LL_Init+0x74>)
 8011336:	2201      	movs	r2, #1
 8011338:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801133a:	4b0f      	ldr	r3, [pc, #60]	@ (8011378 <USBH_LL_Init+0x74>)
 801133c:	2200      	movs	r2, #0
 801133e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011340:	4b0d      	ldr	r3, [pc, #52]	@ (8011378 <USBH_LL_Init+0x74>)
 8011342:	2202      	movs	r2, #2
 8011344:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011346:	4b0c      	ldr	r3, [pc, #48]	@ (8011378 <USBH_LL_Init+0x74>)
 8011348:	2200      	movs	r2, #0
 801134a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801134c:	480a      	ldr	r0, [pc, #40]	@ (8011378 <USBH_LL_Init+0x74>)
 801134e:	f7f2 ffb0 	bl	80042b2 <HAL_HCD_Init>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011358:	f7f2 f80e 	bl	8003378 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801135c:	4806      	ldr	r0, [pc, #24]	@ (8011378 <USBH_LL_Init+0x74>)
 801135e:	f7f3 fc11 	bl	8004b84 <HAL_HCD_GetCurrentFrame>
 8011362:	4603      	mov	r3, r0
 8011364:	4619      	mov	r1, r3
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7fa fafc 	bl	800b964 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801136c:	2300      	movs	r3, #0
}
 801136e:	4618      	mov	r0, r3
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	20013304 	.word	0x20013304

0801137c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8011392:	4618      	mov	r0, r3
 8011394:	f7f3 fb7e 	bl	8004a94 <HAL_HCD_Start>
 8011398:	4603      	mov	r3, r0
 801139a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801139c:	7bfb      	ldrb	r3, [r7, #15]
 801139e:	4618      	mov	r0, r3
 80113a0:	f000 f95e 	bl	8011660 <USBH_Get_USB_Status>
 80113a4:	4603      	mov	r3, r0
 80113a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3710      	adds	r7, #16
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80113b2:	b580      	push	{r7, lr}
 80113b4:	b084      	sub	sp, #16
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113be:	2300      	movs	r3, #0
 80113c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7f3 fb86 	bl	8004ada <HAL_HCD_Stop>
 80113ce:	4603      	mov	r3, r0
 80113d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f000 f943 	bl	8011660 <USBH_Get_USB_Status>
 80113da:	4603      	mov	r3, r0
 80113dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113de:	7bbb      	ldrb	r3, [r7, #14]
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3710      	adds	r7, #16
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80113f0:	2301      	movs	r3, #1
 80113f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7f3 fbd0 	bl	8004ba0 <HAL_HCD_GetCurrentSpeed>
 8011400:	4603      	mov	r3, r0
 8011402:	2b02      	cmp	r3, #2
 8011404:	d00c      	beq.n	8011420 <USBH_LL_GetSpeed+0x38>
 8011406:	2b02      	cmp	r3, #2
 8011408:	d80d      	bhi.n	8011426 <USBH_LL_GetSpeed+0x3e>
 801140a:	2b00      	cmp	r3, #0
 801140c:	d002      	beq.n	8011414 <USBH_LL_GetSpeed+0x2c>
 801140e:	2b01      	cmp	r3, #1
 8011410:	d003      	beq.n	801141a <USBH_LL_GetSpeed+0x32>
 8011412:	e008      	b.n	8011426 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011414:	2300      	movs	r3, #0
 8011416:	73fb      	strb	r3, [r7, #15]
    break;
 8011418:	e008      	b.n	801142c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801141a:	2301      	movs	r3, #1
 801141c:	73fb      	strb	r3, [r7, #15]
    break;
 801141e:	e005      	b.n	801142c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011420:	2302      	movs	r3, #2
 8011422:	73fb      	strb	r3, [r7, #15]
    break;
 8011424:	e002      	b.n	801142c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011426:	2301      	movs	r3, #1
 8011428:	73fb      	strb	r3, [r7, #15]
    break;
 801142a:	bf00      	nop
  }
  return  speed;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801143e:	2300      	movs	r3, #0
 8011440:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011442:	2300      	movs	r3, #0
 8011444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801144c:	4618      	mov	r0, r3
 801144e:	f7f3 fb61 	bl	8004b14 <HAL_HCD_ResetPort>
 8011452:	4603      	mov	r3, r0
 8011454:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011456:	7bfb      	ldrb	r3, [r7, #15]
 8011458:	4618      	mov	r0, r3
 801145a:	f000 f901 	bl	8011660 <USBH_Get_USB_Status>
 801145e:	4603      	mov	r3, r0
 8011460:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011462:	7bbb      	ldrb	r3, [r7, #14]
}
 8011464:	4618      	mov	r0, r3
 8011466:	3710      	adds	r7, #16
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	460b      	mov	r3, r1
 8011476:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801147e:	78fa      	ldrb	r2, [r7, #3]
 8011480:	4611      	mov	r1, r2
 8011482:	4618      	mov	r0, r3
 8011484:	f7f3 fb69 	bl	8004b5a <HAL_HCD_HC_GetXferCount>
 8011488:	4603      	mov	r3, r0
}
 801148a:	4618      	mov	r0, r3
 801148c:	3708      	adds	r7, #8
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}

08011492 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011492:	b590      	push	{r4, r7, lr}
 8011494:	b089      	sub	sp, #36	@ 0x24
 8011496:	af04      	add	r7, sp, #16
 8011498:	6078      	str	r0, [r7, #4]
 801149a:	4608      	mov	r0, r1
 801149c:	4611      	mov	r1, r2
 801149e:	461a      	mov	r2, r3
 80114a0:	4603      	mov	r3, r0
 80114a2:	70fb      	strb	r3, [r7, #3]
 80114a4:	460b      	mov	r3, r1
 80114a6:	70bb      	strb	r3, [r7, #2]
 80114a8:	4613      	mov	r3, r2
 80114aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ac:	2300      	movs	r3, #0
 80114ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114b0:	2300      	movs	r3, #0
 80114b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80114ba:	787c      	ldrb	r4, [r7, #1]
 80114bc:	78ba      	ldrb	r2, [r7, #2]
 80114be:	78f9      	ldrb	r1, [r7, #3]
 80114c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80114c2:	9302      	str	r3, [sp, #8]
 80114c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80114c8:	9301      	str	r3, [sp, #4]
 80114ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	4623      	mov	r3, r4
 80114d2:	f7f2 ff55 	bl	8004380 <HAL_HCD_HC_Init>
 80114d6:	4603      	mov	r3, r0
 80114d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80114da:	7bfb      	ldrb	r3, [r7, #15]
 80114dc:	4618      	mov	r0, r3
 80114de:	f000 f8bf 	bl	8011660 <USBH_Get_USB_Status>
 80114e2:	4603      	mov	r3, r0
 80114e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3714      	adds	r7, #20
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd90      	pop	{r4, r7, pc}

080114f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	460b      	mov	r3, r1
 80114fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114fc:	2300      	movs	r3, #0
 80114fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801150a:	78fa      	ldrb	r2, [r7, #3]
 801150c:	4611      	mov	r1, r2
 801150e:	4618      	mov	r0, r3
 8011510:	f7f2 ffee 	bl	80044f0 <HAL_HCD_HC_Halt>
 8011514:	4603      	mov	r3, r0
 8011516:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011518:	7bfb      	ldrb	r3, [r7, #15]
 801151a:	4618      	mov	r0, r3
 801151c:	f000 f8a0 	bl	8011660 <USBH_Get_USB_Status>
 8011520:	4603      	mov	r3, r0
 8011522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011524:	7bbb      	ldrb	r3, [r7, #14]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801152e:	b590      	push	{r4, r7, lr}
 8011530:	b089      	sub	sp, #36	@ 0x24
 8011532:	af04      	add	r7, sp, #16
 8011534:	6078      	str	r0, [r7, #4]
 8011536:	4608      	mov	r0, r1
 8011538:	4611      	mov	r1, r2
 801153a:	461a      	mov	r2, r3
 801153c:	4603      	mov	r3, r0
 801153e:	70fb      	strb	r3, [r7, #3]
 8011540:	460b      	mov	r3, r1
 8011542:	70bb      	strb	r3, [r7, #2]
 8011544:	4613      	mov	r3, r2
 8011546:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011548:	2300      	movs	r3, #0
 801154a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801154c:	2300      	movs	r3, #0
 801154e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011556:	787c      	ldrb	r4, [r7, #1]
 8011558:	78ba      	ldrb	r2, [r7, #2]
 801155a:	78f9      	ldrb	r1, [r7, #3]
 801155c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011560:	9303      	str	r3, [sp, #12]
 8011562:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011564:	9302      	str	r3, [sp, #8]
 8011566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011568:	9301      	str	r3, [sp, #4]
 801156a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801156e:	9300      	str	r3, [sp, #0]
 8011570:	4623      	mov	r3, r4
 8011572:	f7f2 ffe1 	bl	8004538 <HAL_HCD_HC_SubmitRequest>
 8011576:	4603      	mov	r3, r0
 8011578:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801157a:	7bfb      	ldrb	r3, [r7, #15]
 801157c:	4618      	mov	r0, r3
 801157e:	f000 f86f 	bl	8011660 <USBH_Get_USB_Status>
 8011582:	4603      	mov	r3, r0
 8011584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011586:	7bbb      	ldrb	r3, [r7, #14]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3714      	adds	r7, #20
 801158c:	46bd      	mov	sp, r7
 801158e:	bd90      	pop	{r4, r7, pc}

08011590 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	460b      	mov	r3, r1
 801159a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80115a2:	78fa      	ldrb	r2, [r7, #3]
 80115a4:	4611      	mov	r1, r2
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f3 fac2 	bl	8004b30 <HAL_HCD_HC_GetURBState>
 80115ac:	4603      	mov	r3, r0
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3708      	adds	r7, #8
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b082      	sub	sp, #8
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	460b      	mov	r3, r1
 80115c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d103      	bne.n	80115d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80115cc:	78fb      	ldrb	r3, [r7, #3]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f872 	bl	80116b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80115d4:	20c8      	movs	r0, #200	@ 0xc8
 80115d6:	f7f2 fac9 	bl	8003b6c <HAL_Delay>
  return USBH_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	460b      	mov	r3, r1
 80115ee:	70fb      	strb	r3, [r7, #3]
 80115f0:	4613      	mov	r3, r2
 80115f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80115fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80115fc:	78fa      	ldrb	r2, [r7, #3]
 80115fe:	68f9      	ldr	r1, [r7, #12]
 8011600:	4613      	mov	r3, r2
 8011602:	011b      	lsls	r3, r3, #4
 8011604:	1a9b      	subs	r3, r3, r2
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	440b      	add	r3, r1
 801160a:	3317      	adds	r3, #23
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d00a      	beq.n	8011628 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011612:	78fa      	ldrb	r2, [r7, #3]
 8011614:	68f9      	ldr	r1, [r7, #12]
 8011616:	4613      	mov	r3, r2
 8011618:	011b      	lsls	r3, r3, #4
 801161a:	1a9b      	subs	r3, r3, r2
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	440b      	add	r3, r1
 8011620:	333c      	adds	r3, #60	@ 0x3c
 8011622:	78ba      	ldrb	r2, [r7, #2]
 8011624:	701a      	strb	r2, [r3, #0]
 8011626:	e009      	b.n	801163c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011628:	78fa      	ldrb	r2, [r7, #3]
 801162a:	68f9      	ldr	r1, [r7, #12]
 801162c:	4613      	mov	r3, r2
 801162e:	011b      	lsls	r3, r3, #4
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	440b      	add	r3, r1
 8011636:	333d      	adds	r3, #61	@ 0x3d
 8011638:	78ba      	ldrb	r2, [r7, #2]
 801163a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801163c:	2300      	movs	r3, #0
}
 801163e:	4618      	mov	r0, r3
 8011640:	3714      	adds	r7, #20
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr

0801164a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b082      	sub	sp, #8
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7f2 fa8a 	bl	8003b6c <HAL_Delay>
}
 8011658:	bf00      	nop
 801165a:	3708      	adds	r7, #8
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011660:	b480      	push	{r7}
 8011662:	b085      	sub	sp, #20
 8011664:	af00      	add	r7, sp, #0
 8011666:	4603      	mov	r3, r0
 8011668:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801166a:	2300      	movs	r3, #0
 801166c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801166e:	79fb      	ldrb	r3, [r7, #7]
 8011670:	2b03      	cmp	r3, #3
 8011672:	d817      	bhi.n	80116a4 <USBH_Get_USB_Status+0x44>
 8011674:	a201      	add	r2, pc, #4	@ (adr r2, 801167c <USBH_Get_USB_Status+0x1c>)
 8011676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167a:	bf00      	nop
 801167c:	0801168d 	.word	0x0801168d
 8011680:	08011693 	.word	0x08011693
 8011684:	08011699 	.word	0x08011699
 8011688:	0801169f 	.word	0x0801169f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801168c:	2300      	movs	r3, #0
 801168e:	73fb      	strb	r3, [r7, #15]
    break;
 8011690:	e00b      	b.n	80116aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011692:	2302      	movs	r3, #2
 8011694:	73fb      	strb	r3, [r7, #15]
    break;
 8011696:	e008      	b.n	80116aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011698:	2301      	movs	r3, #1
 801169a:	73fb      	strb	r3, [r7, #15]
    break;
 801169c:	e005      	b.n	80116aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801169e:	2302      	movs	r3, #2
 80116a0:	73fb      	strb	r3, [r7, #15]
    break;
 80116a2:	e002      	b.n	80116aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80116a4:	2302      	movs	r3, #2
 80116a6:	73fb      	strb	r3, [r7, #15]
    break;
 80116a8:	bf00      	nop
  }
  return usb_status;
 80116aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3714      	adds	r7, #20
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	4603      	mov	r3, r0
 80116c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80116c2:	79fb      	ldrb	r3, [r7, #7]
 80116c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80116c6:	79fb      	ldrb	r3, [r7, #7]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d102      	bne.n	80116d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80116cc:	2301      	movs	r3, #1
 80116ce:	73fb      	strb	r3, [r7, #15]
 80116d0:	e001      	b.n	80116d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80116d2:	2300      	movs	r3, #0
 80116d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80116d6:	7bfb      	ldrb	r3, [r7, #15]
 80116d8:	461a      	mov	r2, r3
 80116da:	2101      	movs	r1, #1
 80116dc:	4803      	ldr	r0, [pc, #12]	@ (80116ec <MX_DriverVbusFS+0x34>)
 80116de:	f7f2 fd91 	bl	8004204 <HAL_GPIO_WritePin>
}
 80116e2:	bf00      	nop
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	40020800 	.word	0x40020800

080116f0 <atof>:
 80116f0:	2100      	movs	r1, #0
 80116f2:	f000 bec5 	b.w	8012480 <strtod>

080116f6 <atoi>:
 80116f6:	220a      	movs	r2, #10
 80116f8:	2100      	movs	r1, #0
 80116fa:	f000 bf47 	b.w	801258c <strtol>
	...

08011700 <malloc>:
 8011700:	4b02      	ldr	r3, [pc, #8]	@ (801170c <malloc+0xc>)
 8011702:	4601      	mov	r1, r0
 8011704:	6818      	ldr	r0, [r3, #0]
 8011706:	f000 b82d 	b.w	8011764 <_malloc_r>
 801170a:	bf00      	nop
 801170c:	2000040c 	.word	0x2000040c

08011710 <free>:
 8011710:	4b02      	ldr	r3, [pc, #8]	@ (801171c <free+0xc>)
 8011712:	4601      	mov	r1, r0
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	f002 bcdb 	b.w	80140d0 <_free_r>
 801171a:	bf00      	nop
 801171c:	2000040c 	.word	0x2000040c

08011720 <sbrk_aligned>:
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	4e0f      	ldr	r6, [pc, #60]	@ (8011760 <sbrk_aligned+0x40>)
 8011724:	460c      	mov	r4, r1
 8011726:	6831      	ldr	r1, [r6, #0]
 8011728:	4605      	mov	r5, r0
 801172a:	b911      	cbnz	r1, 8011732 <sbrk_aligned+0x12>
 801172c:	f001 fde8 	bl	8013300 <_sbrk_r>
 8011730:	6030      	str	r0, [r6, #0]
 8011732:	4621      	mov	r1, r4
 8011734:	4628      	mov	r0, r5
 8011736:	f001 fde3 	bl	8013300 <_sbrk_r>
 801173a:	1c43      	adds	r3, r0, #1
 801173c:	d103      	bne.n	8011746 <sbrk_aligned+0x26>
 801173e:	f04f 34ff 	mov.w	r4, #4294967295
 8011742:	4620      	mov	r0, r4
 8011744:	bd70      	pop	{r4, r5, r6, pc}
 8011746:	1cc4      	adds	r4, r0, #3
 8011748:	f024 0403 	bic.w	r4, r4, #3
 801174c:	42a0      	cmp	r0, r4
 801174e:	d0f8      	beq.n	8011742 <sbrk_aligned+0x22>
 8011750:	1a21      	subs	r1, r4, r0
 8011752:	4628      	mov	r0, r5
 8011754:	f001 fdd4 	bl	8013300 <_sbrk_r>
 8011758:	3001      	adds	r0, #1
 801175a:	d1f2      	bne.n	8011742 <sbrk_aligned+0x22>
 801175c:	e7ef      	b.n	801173e <sbrk_aligned+0x1e>
 801175e:	bf00      	nop
 8011760:	200136e4 	.word	0x200136e4

08011764 <_malloc_r>:
 8011764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011768:	1ccd      	adds	r5, r1, #3
 801176a:	f025 0503 	bic.w	r5, r5, #3
 801176e:	3508      	adds	r5, #8
 8011770:	2d0c      	cmp	r5, #12
 8011772:	bf38      	it	cc
 8011774:	250c      	movcc	r5, #12
 8011776:	2d00      	cmp	r5, #0
 8011778:	4606      	mov	r6, r0
 801177a:	db01      	blt.n	8011780 <_malloc_r+0x1c>
 801177c:	42a9      	cmp	r1, r5
 801177e:	d904      	bls.n	801178a <_malloc_r+0x26>
 8011780:	230c      	movs	r3, #12
 8011782:	6033      	str	r3, [r6, #0]
 8011784:	2000      	movs	r0, #0
 8011786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801178a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011860 <_malloc_r+0xfc>
 801178e:	f000 f869 	bl	8011864 <__malloc_lock>
 8011792:	f8d8 3000 	ldr.w	r3, [r8]
 8011796:	461c      	mov	r4, r3
 8011798:	bb44      	cbnz	r4, 80117ec <_malloc_r+0x88>
 801179a:	4629      	mov	r1, r5
 801179c:	4630      	mov	r0, r6
 801179e:	f7ff ffbf 	bl	8011720 <sbrk_aligned>
 80117a2:	1c43      	adds	r3, r0, #1
 80117a4:	4604      	mov	r4, r0
 80117a6:	d158      	bne.n	801185a <_malloc_r+0xf6>
 80117a8:	f8d8 4000 	ldr.w	r4, [r8]
 80117ac:	4627      	mov	r7, r4
 80117ae:	2f00      	cmp	r7, #0
 80117b0:	d143      	bne.n	801183a <_malloc_r+0xd6>
 80117b2:	2c00      	cmp	r4, #0
 80117b4:	d04b      	beq.n	801184e <_malloc_r+0xea>
 80117b6:	6823      	ldr	r3, [r4, #0]
 80117b8:	4639      	mov	r1, r7
 80117ba:	4630      	mov	r0, r6
 80117bc:	eb04 0903 	add.w	r9, r4, r3
 80117c0:	f001 fd9e 	bl	8013300 <_sbrk_r>
 80117c4:	4581      	cmp	r9, r0
 80117c6:	d142      	bne.n	801184e <_malloc_r+0xea>
 80117c8:	6821      	ldr	r1, [r4, #0]
 80117ca:	1a6d      	subs	r5, r5, r1
 80117cc:	4629      	mov	r1, r5
 80117ce:	4630      	mov	r0, r6
 80117d0:	f7ff ffa6 	bl	8011720 <sbrk_aligned>
 80117d4:	3001      	adds	r0, #1
 80117d6:	d03a      	beq.n	801184e <_malloc_r+0xea>
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	442b      	add	r3, r5
 80117dc:	6023      	str	r3, [r4, #0]
 80117de:	f8d8 3000 	ldr.w	r3, [r8]
 80117e2:	685a      	ldr	r2, [r3, #4]
 80117e4:	bb62      	cbnz	r2, 8011840 <_malloc_r+0xdc>
 80117e6:	f8c8 7000 	str.w	r7, [r8]
 80117ea:	e00f      	b.n	801180c <_malloc_r+0xa8>
 80117ec:	6822      	ldr	r2, [r4, #0]
 80117ee:	1b52      	subs	r2, r2, r5
 80117f0:	d420      	bmi.n	8011834 <_malloc_r+0xd0>
 80117f2:	2a0b      	cmp	r2, #11
 80117f4:	d917      	bls.n	8011826 <_malloc_r+0xc2>
 80117f6:	1961      	adds	r1, r4, r5
 80117f8:	42a3      	cmp	r3, r4
 80117fa:	6025      	str	r5, [r4, #0]
 80117fc:	bf18      	it	ne
 80117fe:	6059      	strne	r1, [r3, #4]
 8011800:	6863      	ldr	r3, [r4, #4]
 8011802:	bf08      	it	eq
 8011804:	f8c8 1000 	streq.w	r1, [r8]
 8011808:	5162      	str	r2, [r4, r5]
 801180a:	604b      	str	r3, [r1, #4]
 801180c:	4630      	mov	r0, r6
 801180e:	f000 f82f 	bl	8011870 <__malloc_unlock>
 8011812:	f104 000b 	add.w	r0, r4, #11
 8011816:	1d23      	adds	r3, r4, #4
 8011818:	f020 0007 	bic.w	r0, r0, #7
 801181c:	1ac2      	subs	r2, r0, r3
 801181e:	bf1c      	itt	ne
 8011820:	1a1b      	subne	r3, r3, r0
 8011822:	50a3      	strne	r3, [r4, r2]
 8011824:	e7af      	b.n	8011786 <_malloc_r+0x22>
 8011826:	6862      	ldr	r2, [r4, #4]
 8011828:	42a3      	cmp	r3, r4
 801182a:	bf0c      	ite	eq
 801182c:	f8c8 2000 	streq.w	r2, [r8]
 8011830:	605a      	strne	r2, [r3, #4]
 8011832:	e7eb      	b.n	801180c <_malloc_r+0xa8>
 8011834:	4623      	mov	r3, r4
 8011836:	6864      	ldr	r4, [r4, #4]
 8011838:	e7ae      	b.n	8011798 <_malloc_r+0x34>
 801183a:	463c      	mov	r4, r7
 801183c:	687f      	ldr	r7, [r7, #4]
 801183e:	e7b6      	b.n	80117ae <_malloc_r+0x4a>
 8011840:	461a      	mov	r2, r3
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	42a3      	cmp	r3, r4
 8011846:	d1fb      	bne.n	8011840 <_malloc_r+0xdc>
 8011848:	2300      	movs	r3, #0
 801184a:	6053      	str	r3, [r2, #4]
 801184c:	e7de      	b.n	801180c <_malloc_r+0xa8>
 801184e:	230c      	movs	r3, #12
 8011850:	6033      	str	r3, [r6, #0]
 8011852:	4630      	mov	r0, r6
 8011854:	f000 f80c 	bl	8011870 <__malloc_unlock>
 8011858:	e794      	b.n	8011784 <_malloc_r+0x20>
 801185a:	6005      	str	r5, [r0, #0]
 801185c:	e7d6      	b.n	801180c <_malloc_r+0xa8>
 801185e:	bf00      	nop
 8011860:	200136e8 	.word	0x200136e8

08011864 <__malloc_lock>:
 8011864:	4801      	ldr	r0, [pc, #4]	@ (801186c <__malloc_lock+0x8>)
 8011866:	f001 bd98 	b.w	801339a <__retarget_lock_acquire_recursive>
 801186a:	bf00      	nop
 801186c:	2001382c 	.word	0x2001382c

08011870 <__malloc_unlock>:
 8011870:	4801      	ldr	r0, [pc, #4]	@ (8011878 <__malloc_unlock+0x8>)
 8011872:	f001 bd93 	b.w	801339c <__retarget_lock_release_recursive>
 8011876:	bf00      	nop
 8011878:	2001382c 	.word	0x2001382c

0801187c <sulp>:
 801187c:	b570      	push	{r4, r5, r6, lr}
 801187e:	4604      	mov	r4, r0
 8011880:	460d      	mov	r5, r1
 8011882:	ec45 4b10 	vmov	d0, r4, r5
 8011886:	4616      	mov	r6, r2
 8011888:	f003 fb24 	bl	8014ed4 <__ulp>
 801188c:	ec51 0b10 	vmov	r0, r1, d0
 8011890:	b17e      	cbz	r6, 80118b2 <sulp+0x36>
 8011892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011896:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801189a:	2b00      	cmp	r3, #0
 801189c:	dd09      	ble.n	80118b2 <sulp+0x36>
 801189e:	051b      	lsls	r3, r3, #20
 80118a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80118a4:	2400      	movs	r4, #0
 80118a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80118aa:	4622      	mov	r2, r4
 80118ac:	462b      	mov	r3, r5
 80118ae:	f7ee fea3 	bl	80005f8 <__aeabi_dmul>
 80118b2:	ec41 0b10 	vmov	d0, r0, r1
 80118b6:	bd70      	pop	{r4, r5, r6, pc}

080118b8 <_strtod_l>:
 80118b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118bc:	b09f      	sub	sp, #124	@ 0x7c
 80118be:	460c      	mov	r4, r1
 80118c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80118c2:	2200      	movs	r2, #0
 80118c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80118c6:	9005      	str	r0, [sp, #20]
 80118c8:	f04f 0a00 	mov.w	sl, #0
 80118cc:	f04f 0b00 	mov.w	fp, #0
 80118d0:	460a      	mov	r2, r1
 80118d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80118d4:	7811      	ldrb	r1, [r2, #0]
 80118d6:	292b      	cmp	r1, #43	@ 0x2b
 80118d8:	d04a      	beq.n	8011970 <_strtod_l+0xb8>
 80118da:	d838      	bhi.n	801194e <_strtod_l+0x96>
 80118dc:	290d      	cmp	r1, #13
 80118de:	d832      	bhi.n	8011946 <_strtod_l+0x8e>
 80118e0:	2908      	cmp	r1, #8
 80118e2:	d832      	bhi.n	801194a <_strtod_l+0x92>
 80118e4:	2900      	cmp	r1, #0
 80118e6:	d03b      	beq.n	8011960 <_strtod_l+0xa8>
 80118e8:	2200      	movs	r2, #0
 80118ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80118ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80118ee:	782a      	ldrb	r2, [r5, #0]
 80118f0:	2a30      	cmp	r2, #48	@ 0x30
 80118f2:	f040 80b2 	bne.w	8011a5a <_strtod_l+0x1a2>
 80118f6:	786a      	ldrb	r2, [r5, #1]
 80118f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80118fc:	2a58      	cmp	r2, #88	@ 0x58
 80118fe:	d16e      	bne.n	80119de <_strtod_l+0x126>
 8011900:	9302      	str	r3, [sp, #8]
 8011902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	ab1a      	add	r3, sp, #104	@ 0x68
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	4a8f      	ldr	r2, [pc, #572]	@ (8011b48 <_strtod_l+0x290>)
 801190c:	9805      	ldr	r0, [sp, #20]
 801190e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011910:	a919      	add	r1, sp, #100	@ 0x64
 8011912:	f002 fc8f 	bl	8014234 <__gethex>
 8011916:	f010 060f 	ands.w	r6, r0, #15
 801191a:	4604      	mov	r4, r0
 801191c:	d005      	beq.n	801192a <_strtod_l+0x72>
 801191e:	2e06      	cmp	r6, #6
 8011920:	d128      	bne.n	8011974 <_strtod_l+0xbc>
 8011922:	3501      	adds	r5, #1
 8011924:	2300      	movs	r3, #0
 8011926:	9519      	str	r5, [sp, #100]	@ 0x64
 8011928:	930e      	str	r3, [sp, #56]	@ 0x38
 801192a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801192c:	2b00      	cmp	r3, #0
 801192e:	f040 858e 	bne.w	801244e <_strtod_l+0xb96>
 8011932:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011934:	b1cb      	cbz	r3, 801196a <_strtod_l+0xb2>
 8011936:	4652      	mov	r2, sl
 8011938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801193c:	ec43 2b10 	vmov	d0, r2, r3
 8011940:	b01f      	add	sp, #124	@ 0x7c
 8011942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011946:	2920      	cmp	r1, #32
 8011948:	d1ce      	bne.n	80118e8 <_strtod_l+0x30>
 801194a:	3201      	adds	r2, #1
 801194c:	e7c1      	b.n	80118d2 <_strtod_l+0x1a>
 801194e:	292d      	cmp	r1, #45	@ 0x2d
 8011950:	d1ca      	bne.n	80118e8 <_strtod_l+0x30>
 8011952:	2101      	movs	r1, #1
 8011954:	910e      	str	r1, [sp, #56]	@ 0x38
 8011956:	1c51      	adds	r1, r2, #1
 8011958:	9119      	str	r1, [sp, #100]	@ 0x64
 801195a:	7852      	ldrb	r2, [r2, #1]
 801195c:	2a00      	cmp	r2, #0
 801195e:	d1c5      	bne.n	80118ec <_strtod_l+0x34>
 8011960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011962:	9419      	str	r4, [sp, #100]	@ 0x64
 8011964:	2b00      	cmp	r3, #0
 8011966:	f040 8570 	bne.w	801244a <_strtod_l+0xb92>
 801196a:	4652      	mov	r2, sl
 801196c:	465b      	mov	r3, fp
 801196e:	e7e5      	b.n	801193c <_strtod_l+0x84>
 8011970:	2100      	movs	r1, #0
 8011972:	e7ef      	b.n	8011954 <_strtod_l+0x9c>
 8011974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011976:	b13a      	cbz	r2, 8011988 <_strtod_l+0xd0>
 8011978:	2135      	movs	r1, #53	@ 0x35
 801197a:	a81c      	add	r0, sp, #112	@ 0x70
 801197c:	f003 fba4 	bl	80150c8 <__copybits>
 8011980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011982:	9805      	ldr	r0, [sp, #20]
 8011984:	f002 ff7a 	bl	801487c <_Bfree>
 8011988:	3e01      	subs	r6, #1
 801198a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801198c:	2e04      	cmp	r6, #4
 801198e:	d806      	bhi.n	801199e <_strtod_l+0xe6>
 8011990:	e8df f006 	tbb	[pc, r6]
 8011994:	201d0314 	.word	0x201d0314
 8011998:	14          	.byte	0x14
 8011999:	00          	.byte	0x00
 801199a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801199e:	05e1      	lsls	r1, r4, #23
 80119a0:	bf48      	it	mi
 80119a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80119a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119aa:	0d1b      	lsrs	r3, r3, #20
 80119ac:	051b      	lsls	r3, r3, #20
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d1bb      	bne.n	801192a <_strtod_l+0x72>
 80119b2:	f001 fcc7 	bl	8013344 <__errno>
 80119b6:	2322      	movs	r3, #34	@ 0x22
 80119b8:	6003      	str	r3, [r0, #0]
 80119ba:	e7b6      	b.n	801192a <_strtod_l+0x72>
 80119bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80119c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80119c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80119c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80119cc:	e7e7      	b.n	801199e <_strtod_l+0xe6>
 80119ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011b50 <_strtod_l+0x298>
 80119d2:	e7e4      	b.n	801199e <_strtod_l+0xe6>
 80119d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80119d8:	f04f 3aff 	mov.w	sl, #4294967295
 80119dc:	e7df      	b.n	801199e <_strtod_l+0xe6>
 80119de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119e0:	1c5a      	adds	r2, r3, #1
 80119e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80119e4:	785b      	ldrb	r3, [r3, #1]
 80119e6:	2b30      	cmp	r3, #48	@ 0x30
 80119e8:	d0f9      	beq.n	80119de <_strtod_l+0x126>
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d09d      	beq.n	801192a <_strtod_l+0x72>
 80119ee:	2301      	movs	r3, #1
 80119f0:	2700      	movs	r7, #0
 80119f2:	9308      	str	r3, [sp, #32]
 80119f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119f6:	930c      	str	r3, [sp, #48]	@ 0x30
 80119f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80119fa:	46b9      	mov	r9, r7
 80119fc:	220a      	movs	r2, #10
 80119fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011a00:	7805      	ldrb	r5, [r0, #0]
 8011a02:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011a06:	b2d9      	uxtb	r1, r3
 8011a08:	2909      	cmp	r1, #9
 8011a0a:	d928      	bls.n	8011a5e <_strtod_l+0x1a6>
 8011a0c:	494f      	ldr	r1, [pc, #316]	@ (8011b4c <_strtod_l+0x294>)
 8011a0e:	2201      	movs	r2, #1
 8011a10:	f001 fb72 	bl	80130f8 <strncmp>
 8011a14:	2800      	cmp	r0, #0
 8011a16:	d032      	beq.n	8011a7e <_strtod_l+0x1c6>
 8011a18:	2000      	movs	r0, #0
 8011a1a:	462a      	mov	r2, r5
 8011a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a1e:	464d      	mov	r5, r9
 8011a20:	4603      	mov	r3, r0
 8011a22:	2a65      	cmp	r2, #101	@ 0x65
 8011a24:	d001      	beq.n	8011a2a <_strtod_l+0x172>
 8011a26:	2a45      	cmp	r2, #69	@ 0x45
 8011a28:	d114      	bne.n	8011a54 <_strtod_l+0x19c>
 8011a2a:	b91d      	cbnz	r5, 8011a34 <_strtod_l+0x17c>
 8011a2c:	9a08      	ldr	r2, [sp, #32]
 8011a2e:	4302      	orrs	r2, r0
 8011a30:	d096      	beq.n	8011960 <_strtod_l+0xa8>
 8011a32:	2500      	movs	r5, #0
 8011a34:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011a36:	1c62      	adds	r2, r4, #1
 8011a38:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a3a:	7862      	ldrb	r2, [r4, #1]
 8011a3c:	2a2b      	cmp	r2, #43	@ 0x2b
 8011a3e:	d07a      	beq.n	8011b36 <_strtod_l+0x27e>
 8011a40:	2a2d      	cmp	r2, #45	@ 0x2d
 8011a42:	d07e      	beq.n	8011b42 <_strtod_l+0x28a>
 8011a44:	f04f 0c00 	mov.w	ip, #0
 8011a48:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011a4c:	2909      	cmp	r1, #9
 8011a4e:	f240 8085 	bls.w	8011b5c <_strtod_l+0x2a4>
 8011a52:	9419      	str	r4, [sp, #100]	@ 0x64
 8011a54:	f04f 0800 	mov.w	r8, #0
 8011a58:	e0a5      	b.n	8011ba6 <_strtod_l+0x2ee>
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e7c8      	b.n	80119f0 <_strtod_l+0x138>
 8011a5e:	f1b9 0f08 	cmp.w	r9, #8
 8011a62:	bfd8      	it	le
 8011a64:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011a66:	f100 0001 	add.w	r0, r0, #1
 8011a6a:	bfda      	itte	le
 8011a6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011a70:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011a72:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011a76:	f109 0901 	add.w	r9, r9, #1
 8011a7a:	9019      	str	r0, [sp, #100]	@ 0x64
 8011a7c:	e7bf      	b.n	80119fe <_strtod_l+0x146>
 8011a7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a80:	1c5a      	adds	r2, r3, #1
 8011a82:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a84:	785a      	ldrb	r2, [r3, #1]
 8011a86:	f1b9 0f00 	cmp.w	r9, #0
 8011a8a:	d03b      	beq.n	8011b04 <_strtod_l+0x24c>
 8011a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a8e:	464d      	mov	r5, r9
 8011a90:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011a94:	2b09      	cmp	r3, #9
 8011a96:	d912      	bls.n	8011abe <_strtod_l+0x206>
 8011a98:	2301      	movs	r3, #1
 8011a9a:	e7c2      	b.n	8011a22 <_strtod_l+0x16a>
 8011a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a9e:	1c5a      	adds	r2, r3, #1
 8011aa0:	9219      	str	r2, [sp, #100]	@ 0x64
 8011aa2:	785a      	ldrb	r2, [r3, #1]
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	2a30      	cmp	r2, #48	@ 0x30
 8011aa8:	d0f8      	beq.n	8011a9c <_strtod_l+0x1e4>
 8011aaa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011aae:	2b08      	cmp	r3, #8
 8011ab0:	f200 84d2 	bhi.w	8012458 <_strtod_l+0xba0>
 8011ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ab6:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ab8:	2000      	movs	r0, #0
 8011aba:	930c      	str	r3, [sp, #48]	@ 0x30
 8011abc:	4605      	mov	r5, r0
 8011abe:	3a30      	subs	r2, #48	@ 0x30
 8011ac0:	f100 0301 	add.w	r3, r0, #1
 8011ac4:	d018      	beq.n	8011af8 <_strtod_l+0x240>
 8011ac6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011ac8:	4419      	add	r1, r3
 8011aca:	910a      	str	r1, [sp, #40]	@ 0x28
 8011acc:	462e      	mov	r6, r5
 8011ace:	f04f 0e0a 	mov.w	lr, #10
 8011ad2:	1c71      	adds	r1, r6, #1
 8011ad4:	eba1 0c05 	sub.w	ip, r1, r5
 8011ad8:	4563      	cmp	r3, ip
 8011ada:	dc15      	bgt.n	8011b08 <_strtod_l+0x250>
 8011adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011ae0:	182b      	adds	r3, r5, r0
 8011ae2:	2b08      	cmp	r3, #8
 8011ae4:	f105 0501 	add.w	r5, r5, #1
 8011ae8:	4405      	add	r5, r0
 8011aea:	dc1a      	bgt.n	8011b22 <_strtod_l+0x26a>
 8011aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011aee:	230a      	movs	r3, #10
 8011af0:	fb03 2301 	mla	r3, r3, r1, r2
 8011af4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011af6:	2300      	movs	r3, #0
 8011af8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011afa:	1c51      	adds	r1, r2, #1
 8011afc:	9119      	str	r1, [sp, #100]	@ 0x64
 8011afe:	7852      	ldrb	r2, [r2, #1]
 8011b00:	4618      	mov	r0, r3
 8011b02:	e7c5      	b.n	8011a90 <_strtod_l+0x1d8>
 8011b04:	4648      	mov	r0, r9
 8011b06:	e7ce      	b.n	8011aa6 <_strtod_l+0x1ee>
 8011b08:	2e08      	cmp	r6, #8
 8011b0a:	dc05      	bgt.n	8011b18 <_strtod_l+0x260>
 8011b0c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011b0e:	fb0e f606 	mul.w	r6, lr, r6
 8011b12:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011b14:	460e      	mov	r6, r1
 8011b16:	e7dc      	b.n	8011ad2 <_strtod_l+0x21a>
 8011b18:	2910      	cmp	r1, #16
 8011b1a:	bfd8      	it	le
 8011b1c:	fb0e f707 	mulle.w	r7, lr, r7
 8011b20:	e7f8      	b.n	8011b14 <_strtod_l+0x25c>
 8011b22:	2b0f      	cmp	r3, #15
 8011b24:	bfdc      	itt	le
 8011b26:	230a      	movle	r3, #10
 8011b28:	fb03 2707 	mlale	r7, r3, r7, r2
 8011b2c:	e7e3      	b.n	8011af6 <_strtod_l+0x23e>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b32:	2301      	movs	r3, #1
 8011b34:	e77a      	b.n	8011a2c <_strtod_l+0x174>
 8011b36:	f04f 0c00 	mov.w	ip, #0
 8011b3a:	1ca2      	adds	r2, r4, #2
 8011b3c:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b3e:	78a2      	ldrb	r2, [r4, #2]
 8011b40:	e782      	b.n	8011a48 <_strtod_l+0x190>
 8011b42:	f04f 0c01 	mov.w	ip, #1
 8011b46:	e7f8      	b.n	8011b3a <_strtod_l+0x282>
 8011b48:	080168c4 	.word	0x080168c4
 8011b4c:	08016684 	.word	0x08016684
 8011b50:	7ff00000 	.word	0x7ff00000
 8011b54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b56:	1c51      	adds	r1, r2, #1
 8011b58:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b5a:	7852      	ldrb	r2, [r2, #1]
 8011b5c:	2a30      	cmp	r2, #48	@ 0x30
 8011b5e:	d0f9      	beq.n	8011b54 <_strtod_l+0x29c>
 8011b60:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011b64:	2908      	cmp	r1, #8
 8011b66:	f63f af75 	bhi.w	8011a54 <_strtod_l+0x19c>
 8011b6a:	3a30      	subs	r2, #48	@ 0x30
 8011b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011b72:	f04f 080a 	mov.w	r8, #10
 8011b76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b78:	1c56      	adds	r6, r2, #1
 8011b7a:	9619      	str	r6, [sp, #100]	@ 0x64
 8011b7c:	7852      	ldrb	r2, [r2, #1]
 8011b7e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011b82:	f1be 0f09 	cmp.w	lr, #9
 8011b86:	d939      	bls.n	8011bfc <_strtod_l+0x344>
 8011b88:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b8a:	1a76      	subs	r6, r6, r1
 8011b8c:	2e08      	cmp	r6, #8
 8011b8e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011b92:	dc03      	bgt.n	8011b9c <_strtod_l+0x2e4>
 8011b94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011b96:	4588      	cmp	r8, r1
 8011b98:	bfa8      	it	ge
 8011b9a:	4688      	movge	r8, r1
 8011b9c:	f1bc 0f00 	cmp.w	ip, #0
 8011ba0:	d001      	beq.n	8011ba6 <_strtod_l+0x2ee>
 8011ba2:	f1c8 0800 	rsb	r8, r8, #0
 8011ba6:	2d00      	cmp	r5, #0
 8011ba8:	d14e      	bne.n	8011c48 <_strtod_l+0x390>
 8011baa:	9908      	ldr	r1, [sp, #32]
 8011bac:	4308      	orrs	r0, r1
 8011bae:	f47f aebc 	bne.w	801192a <_strtod_l+0x72>
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f47f aed4 	bne.w	8011960 <_strtod_l+0xa8>
 8011bb8:	2a69      	cmp	r2, #105	@ 0x69
 8011bba:	d028      	beq.n	8011c0e <_strtod_l+0x356>
 8011bbc:	dc25      	bgt.n	8011c0a <_strtod_l+0x352>
 8011bbe:	2a49      	cmp	r2, #73	@ 0x49
 8011bc0:	d025      	beq.n	8011c0e <_strtod_l+0x356>
 8011bc2:	2a4e      	cmp	r2, #78	@ 0x4e
 8011bc4:	f47f aecc 	bne.w	8011960 <_strtod_l+0xa8>
 8011bc8:	499a      	ldr	r1, [pc, #616]	@ (8011e34 <_strtod_l+0x57c>)
 8011bca:	a819      	add	r0, sp, #100	@ 0x64
 8011bcc:	f002 fd54 	bl	8014678 <__match>
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	f43f aec5 	beq.w	8011960 <_strtod_l+0xa8>
 8011bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	2b28      	cmp	r3, #40	@ 0x28
 8011bdc:	d12e      	bne.n	8011c3c <_strtod_l+0x384>
 8011bde:	4996      	ldr	r1, [pc, #600]	@ (8011e38 <_strtod_l+0x580>)
 8011be0:	aa1c      	add	r2, sp, #112	@ 0x70
 8011be2:	a819      	add	r0, sp, #100	@ 0x64
 8011be4:	f002 fd5c 	bl	80146a0 <__hexnan>
 8011be8:	2805      	cmp	r0, #5
 8011bea:	d127      	bne.n	8011c3c <_strtod_l+0x384>
 8011bec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011bf2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011bf6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011bfa:	e696      	b.n	801192a <_strtod_l+0x72>
 8011bfc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011bfe:	fb08 2101 	mla	r1, r8, r1, r2
 8011c02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011c06:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c08:	e7b5      	b.n	8011b76 <_strtod_l+0x2be>
 8011c0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8011c0c:	e7da      	b.n	8011bc4 <_strtod_l+0x30c>
 8011c0e:	498b      	ldr	r1, [pc, #556]	@ (8011e3c <_strtod_l+0x584>)
 8011c10:	a819      	add	r0, sp, #100	@ 0x64
 8011c12:	f002 fd31 	bl	8014678 <__match>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	f43f aea2 	beq.w	8011960 <_strtod_l+0xa8>
 8011c1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c1e:	4988      	ldr	r1, [pc, #544]	@ (8011e40 <_strtod_l+0x588>)
 8011c20:	3b01      	subs	r3, #1
 8011c22:	a819      	add	r0, sp, #100	@ 0x64
 8011c24:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c26:	f002 fd27 	bl	8014678 <__match>
 8011c2a:	b910      	cbnz	r0, 8011c32 <_strtod_l+0x37a>
 8011c2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c2e:	3301      	adds	r3, #1
 8011c30:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c32:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011e50 <_strtod_l+0x598>
 8011c36:	f04f 0a00 	mov.w	sl, #0
 8011c3a:	e676      	b.n	801192a <_strtod_l+0x72>
 8011c3c:	4881      	ldr	r0, [pc, #516]	@ (8011e44 <_strtod_l+0x58c>)
 8011c3e:	f001 fbc7 	bl	80133d0 <nan>
 8011c42:	ec5b ab10 	vmov	sl, fp, d0
 8011c46:	e670      	b.n	801192a <_strtod_l+0x72>
 8011c48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011c4c:	eba8 0303 	sub.w	r3, r8, r3
 8011c50:	f1b9 0f00 	cmp.w	r9, #0
 8011c54:	bf08      	it	eq
 8011c56:	46a9      	moveq	r9, r5
 8011c58:	2d10      	cmp	r5, #16
 8011c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c5c:	462c      	mov	r4, r5
 8011c5e:	bfa8      	it	ge
 8011c60:	2410      	movge	r4, #16
 8011c62:	f7ee fc4f 	bl	8000504 <__aeabi_ui2d>
 8011c66:	2d09      	cmp	r5, #9
 8011c68:	4682      	mov	sl, r0
 8011c6a:	468b      	mov	fp, r1
 8011c6c:	dc13      	bgt.n	8011c96 <_strtod_l+0x3de>
 8011c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f43f ae5a 	beq.w	801192a <_strtod_l+0x72>
 8011c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c78:	dd78      	ble.n	8011d6c <_strtod_l+0x4b4>
 8011c7a:	2b16      	cmp	r3, #22
 8011c7c:	dc5f      	bgt.n	8011d3e <_strtod_l+0x486>
 8011c7e:	4972      	ldr	r1, [pc, #456]	@ (8011e48 <_strtod_l+0x590>)
 8011c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c88:	4652      	mov	r2, sl
 8011c8a:	465b      	mov	r3, fp
 8011c8c:	f7ee fcb4 	bl	80005f8 <__aeabi_dmul>
 8011c90:	4682      	mov	sl, r0
 8011c92:	468b      	mov	fp, r1
 8011c94:	e649      	b.n	801192a <_strtod_l+0x72>
 8011c96:	4b6c      	ldr	r3, [pc, #432]	@ (8011e48 <_strtod_l+0x590>)
 8011c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011ca0:	f7ee fcaa 	bl	80005f8 <__aeabi_dmul>
 8011ca4:	4682      	mov	sl, r0
 8011ca6:	4638      	mov	r0, r7
 8011ca8:	468b      	mov	fp, r1
 8011caa:	f7ee fc2b 	bl	8000504 <__aeabi_ui2d>
 8011cae:	4602      	mov	r2, r0
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	4650      	mov	r0, sl
 8011cb4:	4659      	mov	r1, fp
 8011cb6:	f7ee fae9 	bl	800028c <__adddf3>
 8011cba:	2d0f      	cmp	r5, #15
 8011cbc:	4682      	mov	sl, r0
 8011cbe:	468b      	mov	fp, r1
 8011cc0:	ddd5      	ble.n	8011c6e <_strtod_l+0x3b6>
 8011cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cc4:	1b2c      	subs	r4, r5, r4
 8011cc6:	441c      	add	r4, r3
 8011cc8:	2c00      	cmp	r4, #0
 8011cca:	f340 8093 	ble.w	8011df4 <_strtod_l+0x53c>
 8011cce:	f014 030f 	ands.w	r3, r4, #15
 8011cd2:	d00a      	beq.n	8011cea <_strtod_l+0x432>
 8011cd4:	495c      	ldr	r1, [pc, #368]	@ (8011e48 <_strtod_l+0x590>)
 8011cd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011cda:	4652      	mov	r2, sl
 8011cdc:	465b      	mov	r3, fp
 8011cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ce2:	f7ee fc89 	bl	80005f8 <__aeabi_dmul>
 8011ce6:	4682      	mov	sl, r0
 8011ce8:	468b      	mov	fp, r1
 8011cea:	f034 040f 	bics.w	r4, r4, #15
 8011cee:	d073      	beq.n	8011dd8 <_strtod_l+0x520>
 8011cf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011cf4:	dd49      	ble.n	8011d8a <_strtod_l+0x4d2>
 8011cf6:	2400      	movs	r4, #0
 8011cf8:	46a0      	mov	r8, r4
 8011cfa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011cfc:	46a1      	mov	r9, r4
 8011cfe:	9a05      	ldr	r2, [sp, #20]
 8011d00:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011e50 <_strtod_l+0x598>
 8011d04:	2322      	movs	r3, #34	@ 0x22
 8011d06:	6013      	str	r3, [r2, #0]
 8011d08:	f04f 0a00 	mov.w	sl, #0
 8011d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	f43f ae0b 	beq.w	801192a <_strtod_l+0x72>
 8011d14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d16:	9805      	ldr	r0, [sp, #20]
 8011d18:	f002 fdb0 	bl	801487c <_Bfree>
 8011d1c:	9805      	ldr	r0, [sp, #20]
 8011d1e:	4649      	mov	r1, r9
 8011d20:	f002 fdac 	bl	801487c <_Bfree>
 8011d24:	9805      	ldr	r0, [sp, #20]
 8011d26:	4641      	mov	r1, r8
 8011d28:	f002 fda8 	bl	801487c <_Bfree>
 8011d2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d2e:	9805      	ldr	r0, [sp, #20]
 8011d30:	f002 fda4 	bl	801487c <_Bfree>
 8011d34:	9805      	ldr	r0, [sp, #20]
 8011d36:	4621      	mov	r1, r4
 8011d38:	f002 fda0 	bl	801487c <_Bfree>
 8011d3c:	e5f5      	b.n	801192a <_strtod_l+0x72>
 8011d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011d44:	4293      	cmp	r3, r2
 8011d46:	dbbc      	blt.n	8011cc2 <_strtod_l+0x40a>
 8011d48:	4c3f      	ldr	r4, [pc, #252]	@ (8011e48 <_strtod_l+0x590>)
 8011d4a:	f1c5 050f 	rsb	r5, r5, #15
 8011d4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d52:	4652      	mov	r2, sl
 8011d54:	465b      	mov	r3, fp
 8011d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d5a:	f7ee fc4d 	bl	80005f8 <__aeabi_dmul>
 8011d5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d60:	1b5d      	subs	r5, r3, r5
 8011d62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d6a:	e78f      	b.n	8011c8c <_strtod_l+0x3d4>
 8011d6c:	3316      	adds	r3, #22
 8011d6e:	dba8      	blt.n	8011cc2 <_strtod_l+0x40a>
 8011d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d72:	eba3 0808 	sub.w	r8, r3, r8
 8011d76:	4b34      	ldr	r3, [pc, #208]	@ (8011e48 <_strtod_l+0x590>)
 8011d78:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011d7c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011d80:	4650      	mov	r0, sl
 8011d82:	4659      	mov	r1, fp
 8011d84:	f7ee fd62 	bl	800084c <__aeabi_ddiv>
 8011d88:	e782      	b.n	8011c90 <_strtod_l+0x3d8>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	4f2f      	ldr	r7, [pc, #188]	@ (8011e4c <_strtod_l+0x594>)
 8011d8e:	1124      	asrs	r4, r4, #4
 8011d90:	4650      	mov	r0, sl
 8011d92:	4659      	mov	r1, fp
 8011d94:	461e      	mov	r6, r3
 8011d96:	2c01      	cmp	r4, #1
 8011d98:	dc21      	bgt.n	8011dde <_strtod_l+0x526>
 8011d9a:	b10b      	cbz	r3, 8011da0 <_strtod_l+0x4e8>
 8011d9c:	4682      	mov	sl, r0
 8011d9e:	468b      	mov	fp, r1
 8011da0:	492a      	ldr	r1, [pc, #168]	@ (8011e4c <_strtod_l+0x594>)
 8011da2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011da6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011daa:	4652      	mov	r2, sl
 8011dac:	465b      	mov	r3, fp
 8011dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011db2:	f7ee fc21 	bl	80005f8 <__aeabi_dmul>
 8011db6:	4b26      	ldr	r3, [pc, #152]	@ (8011e50 <_strtod_l+0x598>)
 8011db8:	460a      	mov	r2, r1
 8011dba:	400b      	ands	r3, r1
 8011dbc:	4925      	ldr	r1, [pc, #148]	@ (8011e54 <_strtod_l+0x59c>)
 8011dbe:	428b      	cmp	r3, r1
 8011dc0:	4682      	mov	sl, r0
 8011dc2:	d898      	bhi.n	8011cf6 <_strtod_l+0x43e>
 8011dc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011dc8:	428b      	cmp	r3, r1
 8011dca:	bf86      	itte	hi
 8011dcc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011e58 <_strtod_l+0x5a0>
 8011dd0:	f04f 3aff 	movhi.w	sl, #4294967295
 8011dd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011dd8:	2300      	movs	r3, #0
 8011dda:	9308      	str	r3, [sp, #32]
 8011ddc:	e076      	b.n	8011ecc <_strtod_l+0x614>
 8011dde:	07e2      	lsls	r2, r4, #31
 8011de0:	d504      	bpl.n	8011dec <_strtod_l+0x534>
 8011de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011de6:	f7ee fc07 	bl	80005f8 <__aeabi_dmul>
 8011dea:	2301      	movs	r3, #1
 8011dec:	3601      	adds	r6, #1
 8011dee:	1064      	asrs	r4, r4, #1
 8011df0:	3708      	adds	r7, #8
 8011df2:	e7d0      	b.n	8011d96 <_strtod_l+0x4de>
 8011df4:	d0f0      	beq.n	8011dd8 <_strtod_l+0x520>
 8011df6:	4264      	negs	r4, r4
 8011df8:	f014 020f 	ands.w	r2, r4, #15
 8011dfc:	d00a      	beq.n	8011e14 <_strtod_l+0x55c>
 8011dfe:	4b12      	ldr	r3, [pc, #72]	@ (8011e48 <_strtod_l+0x590>)
 8011e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e04:	4650      	mov	r0, sl
 8011e06:	4659      	mov	r1, fp
 8011e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0c:	f7ee fd1e 	bl	800084c <__aeabi_ddiv>
 8011e10:	4682      	mov	sl, r0
 8011e12:	468b      	mov	fp, r1
 8011e14:	1124      	asrs	r4, r4, #4
 8011e16:	d0df      	beq.n	8011dd8 <_strtod_l+0x520>
 8011e18:	2c1f      	cmp	r4, #31
 8011e1a:	dd1f      	ble.n	8011e5c <_strtod_l+0x5a4>
 8011e1c:	2400      	movs	r4, #0
 8011e1e:	46a0      	mov	r8, r4
 8011e20:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011e22:	46a1      	mov	r9, r4
 8011e24:	9a05      	ldr	r2, [sp, #20]
 8011e26:	2322      	movs	r3, #34	@ 0x22
 8011e28:	f04f 0a00 	mov.w	sl, #0
 8011e2c:	f04f 0b00 	mov.w	fp, #0
 8011e30:	6013      	str	r3, [r2, #0]
 8011e32:	e76b      	b.n	8011d0c <_strtod_l+0x454>
 8011e34:	08016693 	.word	0x08016693
 8011e38:	080168b0 	.word	0x080168b0
 8011e3c:	0801668b 	.word	0x0801668b
 8011e40:	08016772 	.word	0x08016772
 8011e44:	0801676e 	.word	0x0801676e
 8011e48:	08016a38 	.word	0x08016a38
 8011e4c:	08016a10 	.word	0x08016a10
 8011e50:	7ff00000 	.word	0x7ff00000
 8011e54:	7ca00000 	.word	0x7ca00000
 8011e58:	7fefffff 	.word	0x7fefffff
 8011e5c:	f014 0310 	ands.w	r3, r4, #16
 8011e60:	bf18      	it	ne
 8011e62:	236a      	movne	r3, #106	@ 0x6a
 8011e64:	4ea9      	ldr	r6, [pc, #676]	@ (801210c <_strtod_l+0x854>)
 8011e66:	9308      	str	r3, [sp, #32]
 8011e68:	4650      	mov	r0, sl
 8011e6a:	4659      	mov	r1, fp
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	07e7      	lsls	r7, r4, #31
 8011e70:	d504      	bpl.n	8011e7c <_strtod_l+0x5c4>
 8011e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e76:	f7ee fbbf 	bl	80005f8 <__aeabi_dmul>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	1064      	asrs	r4, r4, #1
 8011e7e:	f106 0608 	add.w	r6, r6, #8
 8011e82:	d1f4      	bne.n	8011e6e <_strtod_l+0x5b6>
 8011e84:	b10b      	cbz	r3, 8011e8a <_strtod_l+0x5d2>
 8011e86:	4682      	mov	sl, r0
 8011e88:	468b      	mov	fp, r1
 8011e8a:	9b08      	ldr	r3, [sp, #32]
 8011e8c:	b1b3      	cbz	r3, 8011ebc <_strtod_l+0x604>
 8011e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	4659      	mov	r1, fp
 8011e9a:	dd0f      	ble.n	8011ebc <_strtod_l+0x604>
 8011e9c:	2b1f      	cmp	r3, #31
 8011e9e:	dd56      	ble.n	8011f4e <_strtod_l+0x696>
 8011ea0:	2b34      	cmp	r3, #52	@ 0x34
 8011ea2:	bfde      	ittt	le
 8011ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8011ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011eac:	4093      	lslle	r3, r2
 8011eae:	f04f 0a00 	mov.w	sl, #0
 8011eb2:	bfcc      	ite	gt
 8011eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	4650      	mov	r0, sl
 8011ec2:	4659      	mov	r1, fp
 8011ec4:	f7ee fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d1a7      	bne.n	8011e1c <_strtod_l+0x564>
 8011ecc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ed2:	9805      	ldr	r0, [sp, #20]
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	464a      	mov	r2, r9
 8011ed8:	f002 fd38 	bl	801494c <__s2b>
 8011edc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011ede:	2800      	cmp	r0, #0
 8011ee0:	f43f af09 	beq.w	8011cf6 <_strtod_l+0x43e>
 8011ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ee8:	2a00      	cmp	r2, #0
 8011eea:	eba3 0308 	sub.w	r3, r3, r8
 8011eee:	bfa8      	it	ge
 8011ef0:	2300      	movge	r3, #0
 8011ef2:	9312      	str	r3, [sp, #72]	@ 0x48
 8011ef4:	2400      	movs	r4, #0
 8011ef6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011efa:	9316      	str	r3, [sp, #88]	@ 0x58
 8011efc:	46a0      	mov	r8, r4
 8011efe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f00:	9805      	ldr	r0, [sp, #20]
 8011f02:	6859      	ldr	r1, [r3, #4]
 8011f04:	f002 fc7a 	bl	80147fc <_Balloc>
 8011f08:	4681      	mov	r9, r0
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	f43f aef7 	beq.w	8011cfe <_strtod_l+0x446>
 8011f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f12:	691a      	ldr	r2, [r3, #16]
 8011f14:	3202      	adds	r2, #2
 8011f16:	f103 010c 	add.w	r1, r3, #12
 8011f1a:	0092      	lsls	r2, r2, #2
 8011f1c:	300c      	adds	r0, #12
 8011f1e:	f001 fa46 	bl	80133ae <memcpy>
 8011f22:	ec4b ab10 	vmov	d0, sl, fp
 8011f26:	9805      	ldr	r0, [sp, #20]
 8011f28:	aa1c      	add	r2, sp, #112	@ 0x70
 8011f2a:	a91b      	add	r1, sp, #108	@ 0x6c
 8011f2c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011f30:	f003 f840 	bl	8014fb4 <__d2b>
 8011f34:	901a      	str	r0, [sp, #104]	@ 0x68
 8011f36:	2800      	cmp	r0, #0
 8011f38:	f43f aee1 	beq.w	8011cfe <_strtod_l+0x446>
 8011f3c:	9805      	ldr	r0, [sp, #20]
 8011f3e:	2101      	movs	r1, #1
 8011f40:	f002 fd9a 	bl	8014a78 <__i2b>
 8011f44:	4680      	mov	r8, r0
 8011f46:	b948      	cbnz	r0, 8011f5c <_strtod_l+0x6a4>
 8011f48:	f04f 0800 	mov.w	r8, #0
 8011f4c:	e6d7      	b.n	8011cfe <_strtod_l+0x446>
 8011f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f52:	fa02 f303 	lsl.w	r3, r2, r3
 8011f56:	ea03 0a0a 	and.w	sl, r3, sl
 8011f5a:	e7af      	b.n	8011ebc <_strtod_l+0x604>
 8011f5c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011f5e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011f60:	2d00      	cmp	r5, #0
 8011f62:	bfab      	itete	ge
 8011f64:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011f66:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011f68:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011f6a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011f6c:	bfac      	ite	ge
 8011f6e:	18ef      	addge	r7, r5, r3
 8011f70:	1b5e      	sublt	r6, r3, r5
 8011f72:	9b08      	ldr	r3, [sp, #32]
 8011f74:	1aed      	subs	r5, r5, r3
 8011f76:	4415      	add	r5, r2
 8011f78:	4b65      	ldr	r3, [pc, #404]	@ (8012110 <_strtod_l+0x858>)
 8011f7a:	3d01      	subs	r5, #1
 8011f7c:	429d      	cmp	r5, r3
 8011f7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011f82:	da50      	bge.n	8012026 <_strtod_l+0x76e>
 8011f84:	1b5b      	subs	r3, r3, r5
 8011f86:	2b1f      	cmp	r3, #31
 8011f88:	eba2 0203 	sub.w	r2, r2, r3
 8011f8c:	f04f 0101 	mov.w	r1, #1
 8011f90:	dc3d      	bgt.n	801200e <_strtod_l+0x756>
 8011f92:	fa01 f303 	lsl.w	r3, r1, r3
 8011f96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f98:	2300      	movs	r3, #0
 8011f9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8011f9c:	18bd      	adds	r5, r7, r2
 8011f9e:	9b08      	ldr	r3, [sp, #32]
 8011fa0:	42af      	cmp	r7, r5
 8011fa2:	4416      	add	r6, r2
 8011fa4:	441e      	add	r6, r3
 8011fa6:	463b      	mov	r3, r7
 8011fa8:	bfa8      	it	ge
 8011faa:	462b      	movge	r3, r5
 8011fac:	42b3      	cmp	r3, r6
 8011fae:	bfa8      	it	ge
 8011fb0:	4633      	movge	r3, r6
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	bfc2      	ittt	gt
 8011fb6:	1aed      	subgt	r5, r5, r3
 8011fb8:	1af6      	subgt	r6, r6, r3
 8011fba:	1aff      	subgt	r7, r7, r3
 8011fbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	dd16      	ble.n	8011ff0 <_strtod_l+0x738>
 8011fc2:	4641      	mov	r1, r8
 8011fc4:	9805      	ldr	r0, [sp, #20]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	f002 fe0e 	bl	8014be8 <__pow5mult>
 8011fcc:	4680      	mov	r8, r0
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	d0ba      	beq.n	8011f48 <_strtod_l+0x690>
 8011fd2:	4601      	mov	r1, r0
 8011fd4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011fd6:	9805      	ldr	r0, [sp, #20]
 8011fd8:	f002 fd64 	bl	8014aa4 <__multiply>
 8011fdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	f43f ae8d 	beq.w	8011cfe <_strtod_l+0x446>
 8011fe4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011fe6:	9805      	ldr	r0, [sp, #20]
 8011fe8:	f002 fc48 	bl	801487c <_Bfree>
 8011fec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011fee:	931a      	str	r3, [sp, #104]	@ 0x68
 8011ff0:	2d00      	cmp	r5, #0
 8011ff2:	dc1d      	bgt.n	8012030 <_strtod_l+0x778>
 8011ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	dd23      	ble.n	8012042 <_strtod_l+0x78a>
 8011ffa:	4649      	mov	r1, r9
 8011ffc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8011ffe:	9805      	ldr	r0, [sp, #20]
 8012000:	f002 fdf2 	bl	8014be8 <__pow5mult>
 8012004:	4681      	mov	r9, r0
 8012006:	b9e0      	cbnz	r0, 8012042 <_strtod_l+0x78a>
 8012008:	f04f 0900 	mov.w	r9, #0
 801200c:	e677      	b.n	8011cfe <_strtod_l+0x446>
 801200e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012012:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012016:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801201a:	35e2      	adds	r5, #226	@ 0xe2
 801201c:	fa01 f305 	lsl.w	r3, r1, r5
 8012020:	9310      	str	r3, [sp, #64]	@ 0x40
 8012022:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012024:	e7ba      	b.n	8011f9c <_strtod_l+0x6e4>
 8012026:	2300      	movs	r3, #0
 8012028:	9310      	str	r3, [sp, #64]	@ 0x40
 801202a:	2301      	movs	r3, #1
 801202c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801202e:	e7b5      	b.n	8011f9c <_strtod_l+0x6e4>
 8012030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012032:	9805      	ldr	r0, [sp, #20]
 8012034:	462a      	mov	r2, r5
 8012036:	f002 fe31 	bl	8014c9c <__lshift>
 801203a:	901a      	str	r0, [sp, #104]	@ 0x68
 801203c:	2800      	cmp	r0, #0
 801203e:	d1d9      	bne.n	8011ff4 <_strtod_l+0x73c>
 8012040:	e65d      	b.n	8011cfe <_strtod_l+0x446>
 8012042:	2e00      	cmp	r6, #0
 8012044:	dd07      	ble.n	8012056 <_strtod_l+0x79e>
 8012046:	4649      	mov	r1, r9
 8012048:	9805      	ldr	r0, [sp, #20]
 801204a:	4632      	mov	r2, r6
 801204c:	f002 fe26 	bl	8014c9c <__lshift>
 8012050:	4681      	mov	r9, r0
 8012052:	2800      	cmp	r0, #0
 8012054:	d0d8      	beq.n	8012008 <_strtod_l+0x750>
 8012056:	2f00      	cmp	r7, #0
 8012058:	dd08      	ble.n	801206c <_strtod_l+0x7b4>
 801205a:	4641      	mov	r1, r8
 801205c:	9805      	ldr	r0, [sp, #20]
 801205e:	463a      	mov	r2, r7
 8012060:	f002 fe1c 	bl	8014c9c <__lshift>
 8012064:	4680      	mov	r8, r0
 8012066:	2800      	cmp	r0, #0
 8012068:	f43f ae49 	beq.w	8011cfe <_strtod_l+0x446>
 801206c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801206e:	9805      	ldr	r0, [sp, #20]
 8012070:	464a      	mov	r2, r9
 8012072:	f002 fe9b 	bl	8014dac <__mdiff>
 8012076:	4604      	mov	r4, r0
 8012078:	2800      	cmp	r0, #0
 801207a:	f43f ae40 	beq.w	8011cfe <_strtod_l+0x446>
 801207e:	68c3      	ldr	r3, [r0, #12]
 8012080:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012082:	2300      	movs	r3, #0
 8012084:	60c3      	str	r3, [r0, #12]
 8012086:	4641      	mov	r1, r8
 8012088:	f002 fe74 	bl	8014d74 <__mcmp>
 801208c:	2800      	cmp	r0, #0
 801208e:	da45      	bge.n	801211c <_strtod_l+0x864>
 8012090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012092:	ea53 030a 	orrs.w	r3, r3, sl
 8012096:	d16b      	bne.n	8012170 <_strtod_l+0x8b8>
 8012098:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801209c:	2b00      	cmp	r3, #0
 801209e:	d167      	bne.n	8012170 <_strtod_l+0x8b8>
 80120a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120a4:	0d1b      	lsrs	r3, r3, #20
 80120a6:	051b      	lsls	r3, r3, #20
 80120a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120ac:	d960      	bls.n	8012170 <_strtod_l+0x8b8>
 80120ae:	6963      	ldr	r3, [r4, #20]
 80120b0:	b913      	cbnz	r3, 80120b8 <_strtod_l+0x800>
 80120b2:	6923      	ldr	r3, [r4, #16]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	dd5b      	ble.n	8012170 <_strtod_l+0x8b8>
 80120b8:	4621      	mov	r1, r4
 80120ba:	2201      	movs	r2, #1
 80120bc:	9805      	ldr	r0, [sp, #20]
 80120be:	f002 fded 	bl	8014c9c <__lshift>
 80120c2:	4641      	mov	r1, r8
 80120c4:	4604      	mov	r4, r0
 80120c6:	f002 fe55 	bl	8014d74 <__mcmp>
 80120ca:	2800      	cmp	r0, #0
 80120cc:	dd50      	ble.n	8012170 <_strtod_l+0x8b8>
 80120ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120d2:	9a08      	ldr	r2, [sp, #32]
 80120d4:	0d1b      	lsrs	r3, r3, #20
 80120d6:	051b      	lsls	r3, r3, #20
 80120d8:	2a00      	cmp	r2, #0
 80120da:	d06a      	beq.n	80121b2 <_strtod_l+0x8fa>
 80120dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120e0:	d867      	bhi.n	80121b2 <_strtod_l+0x8fa>
 80120e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80120e6:	f67f ae9d 	bls.w	8011e24 <_strtod_l+0x56c>
 80120ea:	4b0a      	ldr	r3, [pc, #40]	@ (8012114 <_strtod_l+0x85c>)
 80120ec:	4650      	mov	r0, sl
 80120ee:	4659      	mov	r1, fp
 80120f0:	2200      	movs	r2, #0
 80120f2:	f7ee fa81 	bl	80005f8 <__aeabi_dmul>
 80120f6:	4b08      	ldr	r3, [pc, #32]	@ (8012118 <_strtod_l+0x860>)
 80120f8:	400b      	ands	r3, r1
 80120fa:	4682      	mov	sl, r0
 80120fc:	468b      	mov	fp, r1
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f47f ae08 	bne.w	8011d14 <_strtod_l+0x45c>
 8012104:	9a05      	ldr	r2, [sp, #20]
 8012106:	2322      	movs	r3, #34	@ 0x22
 8012108:	6013      	str	r3, [r2, #0]
 801210a:	e603      	b.n	8011d14 <_strtod_l+0x45c>
 801210c:	080168d8 	.word	0x080168d8
 8012110:	fffffc02 	.word	0xfffffc02
 8012114:	39500000 	.word	0x39500000
 8012118:	7ff00000 	.word	0x7ff00000
 801211c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012120:	d165      	bne.n	80121ee <_strtod_l+0x936>
 8012122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012128:	b35a      	cbz	r2, 8012182 <_strtod_l+0x8ca>
 801212a:	4a9f      	ldr	r2, [pc, #636]	@ (80123a8 <_strtod_l+0xaf0>)
 801212c:	4293      	cmp	r3, r2
 801212e:	d12b      	bne.n	8012188 <_strtod_l+0x8d0>
 8012130:	9b08      	ldr	r3, [sp, #32]
 8012132:	4651      	mov	r1, sl
 8012134:	b303      	cbz	r3, 8012178 <_strtod_l+0x8c0>
 8012136:	4b9d      	ldr	r3, [pc, #628]	@ (80123ac <_strtod_l+0xaf4>)
 8012138:	465a      	mov	r2, fp
 801213a:	4013      	ands	r3, r2
 801213c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012140:	f04f 32ff 	mov.w	r2, #4294967295
 8012144:	d81b      	bhi.n	801217e <_strtod_l+0x8c6>
 8012146:	0d1b      	lsrs	r3, r3, #20
 8012148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801214c:	fa02 f303 	lsl.w	r3, r2, r3
 8012150:	4299      	cmp	r1, r3
 8012152:	d119      	bne.n	8012188 <_strtod_l+0x8d0>
 8012154:	4b96      	ldr	r3, [pc, #600]	@ (80123b0 <_strtod_l+0xaf8>)
 8012156:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012158:	429a      	cmp	r2, r3
 801215a:	d102      	bne.n	8012162 <_strtod_l+0x8aa>
 801215c:	3101      	adds	r1, #1
 801215e:	f43f adce 	beq.w	8011cfe <_strtod_l+0x446>
 8012162:	4b92      	ldr	r3, [pc, #584]	@ (80123ac <_strtod_l+0xaf4>)
 8012164:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012166:	401a      	ands	r2, r3
 8012168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801216c:	f04f 0a00 	mov.w	sl, #0
 8012170:	9b08      	ldr	r3, [sp, #32]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1b9      	bne.n	80120ea <_strtod_l+0x832>
 8012176:	e5cd      	b.n	8011d14 <_strtod_l+0x45c>
 8012178:	f04f 33ff 	mov.w	r3, #4294967295
 801217c:	e7e8      	b.n	8012150 <_strtod_l+0x898>
 801217e:	4613      	mov	r3, r2
 8012180:	e7e6      	b.n	8012150 <_strtod_l+0x898>
 8012182:	ea53 030a 	orrs.w	r3, r3, sl
 8012186:	d0a2      	beq.n	80120ce <_strtod_l+0x816>
 8012188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801218a:	b1db      	cbz	r3, 80121c4 <_strtod_l+0x90c>
 801218c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801218e:	4213      	tst	r3, r2
 8012190:	d0ee      	beq.n	8012170 <_strtod_l+0x8b8>
 8012192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012194:	9a08      	ldr	r2, [sp, #32]
 8012196:	4650      	mov	r0, sl
 8012198:	4659      	mov	r1, fp
 801219a:	b1bb      	cbz	r3, 80121cc <_strtod_l+0x914>
 801219c:	f7ff fb6e 	bl	801187c <sulp>
 80121a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121a4:	ec53 2b10 	vmov	r2, r3, d0
 80121a8:	f7ee f870 	bl	800028c <__adddf3>
 80121ac:	4682      	mov	sl, r0
 80121ae:	468b      	mov	fp, r1
 80121b0:	e7de      	b.n	8012170 <_strtod_l+0x8b8>
 80121b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80121b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80121ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80121be:	f04f 3aff 	mov.w	sl, #4294967295
 80121c2:	e7d5      	b.n	8012170 <_strtod_l+0x8b8>
 80121c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121c6:	ea13 0f0a 	tst.w	r3, sl
 80121ca:	e7e1      	b.n	8012190 <_strtod_l+0x8d8>
 80121cc:	f7ff fb56 	bl	801187c <sulp>
 80121d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121d4:	ec53 2b10 	vmov	r2, r3, d0
 80121d8:	f7ee f856 	bl	8000288 <__aeabi_dsub>
 80121dc:	2200      	movs	r2, #0
 80121de:	2300      	movs	r3, #0
 80121e0:	4682      	mov	sl, r0
 80121e2:	468b      	mov	fp, r1
 80121e4:	f7ee fc70 	bl	8000ac8 <__aeabi_dcmpeq>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d0c1      	beq.n	8012170 <_strtod_l+0x8b8>
 80121ec:	e61a      	b.n	8011e24 <_strtod_l+0x56c>
 80121ee:	4641      	mov	r1, r8
 80121f0:	4620      	mov	r0, r4
 80121f2:	f002 ff37 	bl	8015064 <__ratio>
 80121f6:	ec57 6b10 	vmov	r6, r7, d0
 80121fa:	2200      	movs	r2, #0
 80121fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012200:	4630      	mov	r0, r6
 8012202:	4639      	mov	r1, r7
 8012204:	f7ee fc74 	bl	8000af0 <__aeabi_dcmple>
 8012208:	2800      	cmp	r0, #0
 801220a:	d06f      	beq.n	80122ec <_strtod_l+0xa34>
 801220c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801220e:	2b00      	cmp	r3, #0
 8012210:	d17a      	bne.n	8012308 <_strtod_l+0xa50>
 8012212:	f1ba 0f00 	cmp.w	sl, #0
 8012216:	d158      	bne.n	80122ca <_strtod_l+0xa12>
 8012218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801221a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801221e:	2b00      	cmp	r3, #0
 8012220:	d15a      	bne.n	80122d8 <_strtod_l+0xa20>
 8012222:	4b64      	ldr	r3, [pc, #400]	@ (80123b4 <_strtod_l+0xafc>)
 8012224:	2200      	movs	r2, #0
 8012226:	4630      	mov	r0, r6
 8012228:	4639      	mov	r1, r7
 801222a:	f7ee fc57 	bl	8000adc <__aeabi_dcmplt>
 801222e:	2800      	cmp	r0, #0
 8012230:	d159      	bne.n	80122e6 <_strtod_l+0xa2e>
 8012232:	4630      	mov	r0, r6
 8012234:	4639      	mov	r1, r7
 8012236:	4b60      	ldr	r3, [pc, #384]	@ (80123b8 <_strtod_l+0xb00>)
 8012238:	2200      	movs	r2, #0
 801223a:	f7ee f9dd 	bl	80005f8 <__aeabi_dmul>
 801223e:	4606      	mov	r6, r0
 8012240:	460f      	mov	r7, r1
 8012242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012246:	9606      	str	r6, [sp, #24]
 8012248:	9307      	str	r3, [sp, #28]
 801224a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801224e:	4d57      	ldr	r5, [pc, #348]	@ (80123ac <_strtod_l+0xaf4>)
 8012250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012256:	401d      	ands	r5, r3
 8012258:	4b58      	ldr	r3, [pc, #352]	@ (80123bc <_strtod_l+0xb04>)
 801225a:	429d      	cmp	r5, r3
 801225c:	f040 80b2 	bne.w	80123c4 <_strtod_l+0xb0c>
 8012260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012266:	ec4b ab10 	vmov	d0, sl, fp
 801226a:	f002 fe33 	bl	8014ed4 <__ulp>
 801226e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012272:	ec51 0b10 	vmov	r0, r1, d0
 8012276:	f7ee f9bf 	bl	80005f8 <__aeabi_dmul>
 801227a:	4652      	mov	r2, sl
 801227c:	465b      	mov	r3, fp
 801227e:	f7ee f805 	bl	800028c <__adddf3>
 8012282:	460b      	mov	r3, r1
 8012284:	4949      	ldr	r1, [pc, #292]	@ (80123ac <_strtod_l+0xaf4>)
 8012286:	4a4e      	ldr	r2, [pc, #312]	@ (80123c0 <_strtod_l+0xb08>)
 8012288:	4019      	ands	r1, r3
 801228a:	4291      	cmp	r1, r2
 801228c:	4682      	mov	sl, r0
 801228e:	d942      	bls.n	8012316 <_strtod_l+0xa5e>
 8012290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012292:	4b47      	ldr	r3, [pc, #284]	@ (80123b0 <_strtod_l+0xaf8>)
 8012294:	429a      	cmp	r2, r3
 8012296:	d103      	bne.n	80122a0 <_strtod_l+0x9e8>
 8012298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801229a:	3301      	adds	r3, #1
 801229c:	f43f ad2f 	beq.w	8011cfe <_strtod_l+0x446>
 80122a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80123b0 <_strtod_l+0xaf8>
 80122a4:	f04f 3aff 	mov.w	sl, #4294967295
 80122a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122aa:	9805      	ldr	r0, [sp, #20]
 80122ac:	f002 fae6 	bl	801487c <_Bfree>
 80122b0:	9805      	ldr	r0, [sp, #20]
 80122b2:	4649      	mov	r1, r9
 80122b4:	f002 fae2 	bl	801487c <_Bfree>
 80122b8:	9805      	ldr	r0, [sp, #20]
 80122ba:	4641      	mov	r1, r8
 80122bc:	f002 fade 	bl	801487c <_Bfree>
 80122c0:	9805      	ldr	r0, [sp, #20]
 80122c2:	4621      	mov	r1, r4
 80122c4:	f002 fada 	bl	801487c <_Bfree>
 80122c8:	e619      	b.n	8011efe <_strtod_l+0x646>
 80122ca:	f1ba 0f01 	cmp.w	sl, #1
 80122ce:	d103      	bne.n	80122d8 <_strtod_l+0xa20>
 80122d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	f43f ada6 	beq.w	8011e24 <_strtod_l+0x56c>
 80122d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012388 <_strtod_l+0xad0>
 80122dc:	4f35      	ldr	r7, [pc, #212]	@ (80123b4 <_strtod_l+0xafc>)
 80122de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122e2:	2600      	movs	r6, #0
 80122e4:	e7b1      	b.n	801224a <_strtod_l+0x992>
 80122e6:	4f34      	ldr	r7, [pc, #208]	@ (80123b8 <_strtod_l+0xb00>)
 80122e8:	2600      	movs	r6, #0
 80122ea:	e7aa      	b.n	8012242 <_strtod_l+0x98a>
 80122ec:	4b32      	ldr	r3, [pc, #200]	@ (80123b8 <_strtod_l+0xb00>)
 80122ee:	4630      	mov	r0, r6
 80122f0:	4639      	mov	r1, r7
 80122f2:	2200      	movs	r2, #0
 80122f4:	f7ee f980 	bl	80005f8 <__aeabi_dmul>
 80122f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122fa:	4606      	mov	r6, r0
 80122fc:	460f      	mov	r7, r1
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d09f      	beq.n	8012242 <_strtod_l+0x98a>
 8012302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012306:	e7a0      	b.n	801224a <_strtod_l+0x992>
 8012308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012390 <_strtod_l+0xad8>
 801230c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012310:	ec57 6b17 	vmov	r6, r7, d7
 8012314:	e799      	b.n	801224a <_strtod_l+0x992>
 8012316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801231a:	9b08      	ldr	r3, [sp, #32]
 801231c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1c1      	bne.n	80122a8 <_strtod_l+0x9f0>
 8012324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012328:	0d1b      	lsrs	r3, r3, #20
 801232a:	051b      	lsls	r3, r3, #20
 801232c:	429d      	cmp	r5, r3
 801232e:	d1bb      	bne.n	80122a8 <_strtod_l+0x9f0>
 8012330:	4630      	mov	r0, r6
 8012332:	4639      	mov	r1, r7
 8012334:	f7ee fc70 	bl	8000c18 <__aeabi_d2lz>
 8012338:	f7ee f930 	bl	800059c <__aeabi_l2d>
 801233c:	4602      	mov	r2, r0
 801233e:	460b      	mov	r3, r1
 8012340:	4630      	mov	r0, r6
 8012342:	4639      	mov	r1, r7
 8012344:	f7ed ffa0 	bl	8000288 <__aeabi_dsub>
 8012348:	460b      	mov	r3, r1
 801234a:	4602      	mov	r2, r0
 801234c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012356:	ea46 060a 	orr.w	r6, r6, sl
 801235a:	431e      	orrs	r6, r3
 801235c:	d06f      	beq.n	801243e <_strtod_l+0xb86>
 801235e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012398 <_strtod_l+0xae0>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	f7ee fbba 	bl	8000adc <__aeabi_dcmplt>
 8012368:	2800      	cmp	r0, #0
 801236a:	f47f acd3 	bne.w	8011d14 <_strtod_l+0x45c>
 801236e:	a30c      	add	r3, pc, #48	@ (adr r3, 80123a0 <_strtod_l+0xae8>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012378:	f7ee fbce 	bl	8000b18 <__aeabi_dcmpgt>
 801237c:	2800      	cmp	r0, #0
 801237e:	d093      	beq.n	80122a8 <_strtod_l+0x9f0>
 8012380:	e4c8      	b.n	8011d14 <_strtod_l+0x45c>
 8012382:	bf00      	nop
 8012384:	f3af 8000 	nop.w
 8012388:	00000000 	.word	0x00000000
 801238c:	bff00000 	.word	0xbff00000
 8012390:	00000000 	.word	0x00000000
 8012394:	3ff00000 	.word	0x3ff00000
 8012398:	94a03595 	.word	0x94a03595
 801239c:	3fdfffff 	.word	0x3fdfffff
 80123a0:	35afe535 	.word	0x35afe535
 80123a4:	3fe00000 	.word	0x3fe00000
 80123a8:	000fffff 	.word	0x000fffff
 80123ac:	7ff00000 	.word	0x7ff00000
 80123b0:	7fefffff 	.word	0x7fefffff
 80123b4:	3ff00000 	.word	0x3ff00000
 80123b8:	3fe00000 	.word	0x3fe00000
 80123bc:	7fe00000 	.word	0x7fe00000
 80123c0:	7c9fffff 	.word	0x7c9fffff
 80123c4:	9b08      	ldr	r3, [sp, #32]
 80123c6:	b323      	cbz	r3, 8012412 <_strtod_l+0xb5a>
 80123c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80123cc:	d821      	bhi.n	8012412 <_strtod_l+0xb5a>
 80123ce:	a328      	add	r3, pc, #160	@ (adr r3, 8012470 <_strtod_l+0xbb8>)
 80123d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123d4:	4630      	mov	r0, r6
 80123d6:	4639      	mov	r1, r7
 80123d8:	f7ee fb8a 	bl	8000af0 <__aeabi_dcmple>
 80123dc:	b1a0      	cbz	r0, 8012408 <_strtod_l+0xb50>
 80123de:	4639      	mov	r1, r7
 80123e0:	4630      	mov	r0, r6
 80123e2:	f7ee fbe1 	bl	8000ba8 <__aeabi_d2uiz>
 80123e6:	2801      	cmp	r0, #1
 80123e8:	bf38      	it	cc
 80123ea:	2001      	movcc	r0, #1
 80123ec:	f7ee f88a 	bl	8000504 <__aeabi_ui2d>
 80123f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123f2:	4606      	mov	r6, r0
 80123f4:	460f      	mov	r7, r1
 80123f6:	b9fb      	cbnz	r3, 8012438 <_strtod_l+0xb80>
 80123f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80123fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80123fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8012400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801240a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801240e:	1b5b      	subs	r3, r3, r5
 8012410:	9311      	str	r3, [sp, #68]	@ 0x44
 8012412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801241a:	f002 fd5b 	bl	8014ed4 <__ulp>
 801241e:	4650      	mov	r0, sl
 8012420:	ec53 2b10 	vmov	r2, r3, d0
 8012424:	4659      	mov	r1, fp
 8012426:	f7ee f8e7 	bl	80005f8 <__aeabi_dmul>
 801242a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801242e:	f7ed ff2d 	bl	800028c <__adddf3>
 8012432:	4682      	mov	sl, r0
 8012434:	468b      	mov	fp, r1
 8012436:	e770      	b.n	801231a <_strtod_l+0xa62>
 8012438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801243c:	e7e0      	b.n	8012400 <_strtod_l+0xb48>
 801243e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012478 <_strtod_l+0xbc0>)
 8012440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012444:	f7ee fb4a 	bl	8000adc <__aeabi_dcmplt>
 8012448:	e798      	b.n	801237c <_strtod_l+0xac4>
 801244a:	2300      	movs	r3, #0
 801244c:	930e      	str	r3, [sp, #56]	@ 0x38
 801244e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	f7ff ba6d 	b.w	8011932 <_strtod_l+0x7a>
 8012458:	2a65      	cmp	r2, #101	@ 0x65
 801245a:	f43f ab68 	beq.w	8011b2e <_strtod_l+0x276>
 801245e:	2a45      	cmp	r2, #69	@ 0x45
 8012460:	f43f ab65 	beq.w	8011b2e <_strtod_l+0x276>
 8012464:	2301      	movs	r3, #1
 8012466:	f7ff bba0 	b.w	8011baa <_strtod_l+0x2f2>
 801246a:	bf00      	nop
 801246c:	f3af 8000 	nop.w
 8012470:	ffc00000 	.word	0xffc00000
 8012474:	41dfffff 	.word	0x41dfffff
 8012478:	94a03595 	.word	0x94a03595
 801247c:	3fcfffff 	.word	0x3fcfffff

08012480 <strtod>:
 8012480:	460a      	mov	r2, r1
 8012482:	4601      	mov	r1, r0
 8012484:	4802      	ldr	r0, [pc, #8]	@ (8012490 <strtod+0x10>)
 8012486:	4b03      	ldr	r3, [pc, #12]	@ (8012494 <strtod+0x14>)
 8012488:	6800      	ldr	r0, [r0, #0]
 801248a:	f7ff ba15 	b.w	80118b8 <_strtod_l>
 801248e:	bf00      	nop
 8012490:	2000040c 	.word	0x2000040c
 8012494:	200002a0 	.word	0x200002a0

08012498 <_strtol_l.isra.0>:
 8012498:	2b24      	cmp	r3, #36	@ 0x24
 801249a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801249e:	4686      	mov	lr, r0
 80124a0:	4690      	mov	r8, r2
 80124a2:	d801      	bhi.n	80124a8 <_strtol_l.isra.0+0x10>
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d106      	bne.n	80124b6 <_strtol_l.isra.0+0x1e>
 80124a8:	f000 ff4c 	bl	8013344 <__errno>
 80124ac:	2316      	movs	r3, #22
 80124ae:	6003      	str	r3, [r0, #0]
 80124b0:	2000      	movs	r0, #0
 80124b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b6:	4834      	ldr	r0, [pc, #208]	@ (8012588 <_strtol_l.isra.0+0xf0>)
 80124b8:	460d      	mov	r5, r1
 80124ba:	462a      	mov	r2, r5
 80124bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124c0:	5d06      	ldrb	r6, [r0, r4]
 80124c2:	f016 0608 	ands.w	r6, r6, #8
 80124c6:	d1f8      	bne.n	80124ba <_strtol_l.isra.0+0x22>
 80124c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80124ca:	d110      	bne.n	80124ee <_strtol_l.isra.0+0x56>
 80124cc:	782c      	ldrb	r4, [r5, #0]
 80124ce:	2601      	movs	r6, #1
 80124d0:	1c95      	adds	r5, r2, #2
 80124d2:	f033 0210 	bics.w	r2, r3, #16
 80124d6:	d115      	bne.n	8012504 <_strtol_l.isra.0+0x6c>
 80124d8:	2c30      	cmp	r4, #48	@ 0x30
 80124da:	d10d      	bne.n	80124f8 <_strtol_l.isra.0+0x60>
 80124dc:	782a      	ldrb	r2, [r5, #0]
 80124de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80124e2:	2a58      	cmp	r2, #88	@ 0x58
 80124e4:	d108      	bne.n	80124f8 <_strtol_l.isra.0+0x60>
 80124e6:	786c      	ldrb	r4, [r5, #1]
 80124e8:	3502      	adds	r5, #2
 80124ea:	2310      	movs	r3, #16
 80124ec:	e00a      	b.n	8012504 <_strtol_l.isra.0+0x6c>
 80124ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80124f0:	bf04      	itt	eq
 80124f2:	782c      	ldrbeq	r4, [r5, #0]
 80124f4:	1c95      	addeq	r5, r2, #2
 80124f6:	e7ec      	b.n	80124d2 <_strtol_l.isra.0+0x3a>
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d1f6      	bne.n	80124ea <_strtol_l.isra.0+0x52>
 80124fc:	2c30      	cmp	r4, #48	@ 0x30
 80124fe:	bf14      	ite	ne
 8012500:	230a      	movne	r3, #10
 8012502:	2308      	moveq	r3, #8
 8012504:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012508:	f10c 3cff 	add.w	ip, ip, #4294967295
 801250c:	2200      	movs	r2, #0
 801250e:	fbbc f9f3 	udiv	r9, ip, r3
 8012512:	4610      	mov	r0, r2
 8012514:	fb03 ca19 	mls	sl, r3, r9, ip
 8012518:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801251c:	2f09      	cmp	r7, #9
 801251e:	d80f      	bhi.n	8012540 <_strtol_l.isra.0+0xa8>
 8012520:	463c      	mov	r4, r7
 8012522:	42a3      	cmp	r3, r4
 8012524:	dd1b      	ble.n	801255e <_strtol_l.isra.0+0xc6>
 8012526:	1c57      	adds	r7, r2, #1
 8012528:	d007      	beq.n	801253a <_strtol_l.isra.0+0xa2>
 801252a:	4581      	cmp	r9, r0
 801252c:	d314      	bcc.n	8012558 <_strtol_l.isra.0+0xc0>
 801252e:	d101      	bne.n	8012534 <_strtol_l.isra.0+0x9c>
 8012530:	45a2      	cmp	sl, r4
 8012532:	db11      	blt.n	8012558 <_strtol_l.isra.0+0xc0>
 8012534:	fb00 4003 	mla	r0, r0, r3, r4
 8012538:	2201      	movs	r2, #1
 801253a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801253e:	e7eb      	b.n	8012518 <_strtol_l.isra.0+0x80>
 8012540:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012544:	2f19      	cmp	r7, #25
 8012546:	d801      	bhi.n	801254c <_strtol_l.isra.0+0xb4>
 8012548:	3c37      	subs	r4, #55	@ 0x37
 801254a:	e7ea      	b.n	8012522 <_strtol_l.isra.0+0x8a>
 801254c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012550:	2f19      	cmp	r7, #25
 8012552:	d804      	bhi.n	801255e <_strtol_l.isra.0+0xc6>
 8012554:	3c57      	subs	r4, #87	@ 0x57
 8012556:	e7e4      	b.n	8012522 <_strtol_l.isra.0+0x8a>
 8012558:	f04f 32ff 	mov.w	r2, #4294967295
 801255c:	e7ed      	b.n	801253a <_strtol_l.isra.0+0xa2>
 801255e:	1c53      	adds	r3, r2, #1
 8012560:	d108      	bne.n	8012574 <_strtol_l.isra.0+0xdc>
 8012562:	2322      	movs	r3, #34	@ 0x22
 8012564:	f8ce 3000 	str.w	r3, [lr]
 8012568:	4660      	mov	r0, ip
 801256a:	f1b8 0f00 	cmp.w	r8, #0
 801256e:	d0a0      	beq.n	80124b2 <_strtol_l.isra.0+0x1a>
 8012570:	1e69      	subs	r1, r5, #1
 8012572:	e006      	b.n	8012582 <_strtol_l.isra.0+0xea>
 8012574:	b106      	cbz	r6, 8012578 <_strtol_l.isra.0+0xe0>
 8012576:	4240      	negs	r0, r0
 8012578:	f1b8 0f00 	cmp.w	r8, #0
 801257c:	d099      	beq.n	80124b2 <_strtol_l.isra.0+0x1a>
 801257e:	2a00      	cmp	r2, #0
 8012580:	d1f6      	bne.n	8012570 <_strtol_l.isra.0+0xd8>
 8012582:	f8c8 1000 	str.w	r1, [r8]
 8012586:	e794      	b.n	80124b2 <_strtol_l.isra.0+0x1a>
 8012588:	08016901 	.word	0x08016901

0801258c <strtol>:
 801258c:	4613      	mov	r3, r2
 801258e:	460a      	mov	r2, r1
 8012590:	4601      	mov	r1, r0
 8012592:	4802      	ldr	r0, [pc, #8]	@ (801259c <strtol+0x10>)
 8012594:	6800      	ldr	r0, [r0, #0]
 8012596:	f7ff bf7f 	b.w	8012498 <_strtol_l.isra.0>
 801259a:	bf00      	nop
 801259c:	2000040c 	.word	0x2000040c

080125a0 <__cvt>:
 80125a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125a4:	ec57 6b10 	vmov	r6, r7, d0
 80125a8:	2f00      	cmp	r7, #0
 80125aa:	460c      	mov	r4, r1
 80125ac:	4619      	mov	r1, r3
 80125ae:	463b      	mov	r3, r7
 80125b0:	bfbb      	ittet	lt
 80125b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80125b6:	461f      	movlt	r7, r3
 80125b8:	2300      	movge	r3, #0
 80125ba:	232d      	movlt	r3, #45	@ 0x2d
 80125bc:	700b      	strb	r3, [r1, #0]
 80125be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80125c4:	4691      	mov	r9, r2
 80125c6:	f023 0820 	bic.w	r8, r3, #32
 80125ca:	bfbc      	itt	lt
 80125cc:	4632      	movlt	r2, r6
 80125ce:	4616      	movlt	r6, r2
 80125d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80125d4:	d005      	beq.n	80125e2 <__cvt+0x42>
 80125d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80125da:	d100      	bne.n	80125de <__cvt+0x3e>
 80125dc:	3401      	adds	r4, #1
 80125de:	2102      	movs	r1, #2
 80125e0:	e000      	b.n	80125e4 <__cvt+0x44>
 80125e2:	2103      	movs	r1, #3
 80125e4:	ab03      	add	r3, sp, #12
 80125e6:	9301      	str	r3, [sp, #4]
 80125e8:	ab02      	add	r3, sp, #8
 80125ea:	9300      	str	r3, [sp, #0]
 80125ec:	ec47 6b10 	vmov	d0, r6, r7
 80125f0:	4653      	mov	r3, sl
 80125f2:	4622      	mov	r2, r4
 80125f4:	f000 ff9c 	bl	8013530 <_dtoa_r>
 80125f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80125fc:	4605      	mov	r5, r0
 80125fe:	d119      	bne.n	8012634 <__cvt+0x94>
 8012600:	f019 0f01 	tst.w	r9, #1
 8012604:	d00e      	beq.n	8012624 <__cvt+0x84>
 8012606:	eb00 0904 	add.w	r9, r0, r4
 801260a:	2200      	movs	r2, #0
 801260c:	2300      	movs	r3, #0
 801260e:	4630      	mov	r0, r6
 8012610:	4639      	mov	r1, r7
 8012612:	f7ee fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8012616:	b108      	cbz	r0, 801261c <__cvt+0x7c>
 8012618:	f8cd 900c 	str.w	r9, [sp, #12]
 801261c:	2230      	movs	r2, #48	@ 0x30
 801261e:	9b03      	ldr	r3, [sp, #12]
 8012620:	454b      	cmp	r3, r9
 8012622:	d31e      	bcc.n	8012662 <__cvt+0xc2>
 8012624:	9b03      	ldr	r3, [sp, #12]
 8012626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012628:	1b5b      	subs	r3, r3, r5
 801262a:	4628      	mov	r0, r5
 801262c:	6013      	str	r3, [r2, #0]
 801262e:	b004      	add	sp, #16
 8012630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012634:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012638:	eb00 0904 	add.w	r9, r0, r4
 801263c:	d1e5      	bne.n	801260a <__cvt+0x6a>
 801263e:	7803      	ldrb	r3, [r0, #0]
 8012640:	2b30      	cmp	r3, #48	@ 0x30
 8012642:	d10a      	bne.n	801265a <__cvt+0xba>
 8012644:	2200      	movs	r2, #0
 8012646:	2300      	movs	r3, #0
 8012648:	4630      	mov	r0, r6
 801264a:	4639      	mov	r1, r7
 801264c:	f7ee fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012650:	b918      	cbnz	r0, 801265a <__cvt+0xba>
 8012652:	f1c4 0401 	rsb	r4, r4, #1
 8012656:	f8ca 4000 	str.w	r4, [sl]
 801265a:	f8da 3000 	ldr.w	r3, [sl]
 801265e:	4499      	add	r9, r3
 8012660:	e7d3      	b.n	801260a <__cvt+0x6a>
 8012662:	1c59      	adds	r1, r3, #1
 8012664:	9103      	str	r1, [sp, #12]
 8012666:	701a      	strb	r2, [r3, #0]
 8012668:	e7d9      	b.n	801261e <__cvt+0x7e>

0801266a <__exponent>:
 801266a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801266c:	2900      	cmp	r1, #0
 801266e:	bfba      	itte	lt
 8012670:	4249      	neglt	r1, r1
 8012672:	232d      	movlt	r3, #45	@ 0x2d
 8012674:	232b      	movge	r3, #43	@ 0x2b
 8012676:	2909      	cmp	r1, #9
 8012678:	7002      	strb	r2, [r0, #0]
 801267a:	7043      	strb	r3, [r0, #1]
 801267c:	dd29      	ble.n	80126d2 <__exponent+0x68>
 801267e:	f10d 0307 	add.w	r3, sp, #7
 8012682:	461d      	mov	r5, r3
 8012684:	270a      	movs	r7, #10
 8012686:	461a      	mov	r2, r3
 8012688:	fbb1 f6f7 	udiv	r6, r1, r7
 801268c:	fb07 1416 	mls	r4, r7, r6, r1
 8012690:	3430      	adds	r4, #48	@ 0x30
 8012692:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012696:	460c      	mov	r4, r1
 8012698:	2c63      	cmp	r4, #99	@ 0x63
 801269a:	f103 33ff 	add.w	r3, r3, #4294967295
 801269e:	4631      	mov	r1, r6
 80126a0:	dcf1      	bgt.n	8012686 <__exponent+0x1c>
 80126a2:	3130      	adds	r1, #48	@ 0x30
 80126a4:	1e94      	subs	r4, r2, #2
 80126a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80126aa:	1c41      	adds	r1, r0, #1
 80126ac:	4623      	mov	r3, r4
 80126ae:	42ab      	cmp	r3, r5
 80126b0:	d30a      	bcc.n	80126c8 <__exponent+0x5e>
 80126b2:	f10d 0309 	add.w	r3, sp, #9
 80126b6:	1a9b      	subs	r3, r3, r2
 80126b8:	42ac      	cmp	r4, r5
 80126ba:	bf88      	it	hi
 80126bc:	2300      	movhi	r3, #0
 80126be:	3302      	adds	r3, #2
 80126c0:	4403      	add	r3, r0
 80126c2:	1a18      	subs	r0, r3, r0
 80126c4:	b003      	add	sp, #12
 80126c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80126cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80126d0:	e7ed      	b.n	80126ae <__exponent+0x44>
 80126d2:	2330      	movs	r3, #48	@ 0x30
 80126d4:	3130      	adds	r1, #48	@ 0x30
 80126d6:	7083      	strb	r3, [r0, #2]
 80126d8:	70c1      	strb	r1, [r0, #3]
 80126da:	1d03      	adds	r3, r0, #4
 80126dc:	e7f1      	b.n	80126c2 <__exponent+0x58>
	...

080126e0 <_printf_float>:
 80126e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e4:	b08d      	sub	sp, #52	@ 0x34
 80126e6:	460c      	mov	r4, r1
 80126e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80126ec:	4616      	mov	r6, r2
 80126ee:	461f      	mov	r7, r3
 80126f0:	4605      	mov	r5, r0
 80126f2:	f000 fd6f 	bl	80131d4 <_localeconv_r>
 80126f6:	6803      	ldr	r3, [r0, #0]
 80126f8:	9304      	str	r3, [sp, #16]
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7ed fdb8 	bl	8000270 <strlen>
 8012700:	2300      	movs	r3, #0
 8012702:	930a      	str	r3, [sp, #40]	@ 0x28
 8012704:	f8d8 3000 	ldr.w	r3, [r8]
 8012708:	9005      	str	r0, [sp, #20]
 801270a:	3307      	adds	r3, #7
 801270c:	f023 0307 	bic.w	r3, r3, #7
 8012710:	f103 0208 	add.w	r2, r3, #8
 8012714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012718:	f8d4 b000 	ldr.w	fp, [r4]
 801271c:	f8c8 2000 	str.w	r2, [r8]
 8012720:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012724:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012728:	9307      	str	r3, [sp, #28]
 801272a:	f8cd 8018 	str.w	r8, [sp, #24]
 801272e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012732:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012736:	4b9c      	ldr	r3, [pc, #624]	@ (80129a8 <_printf_float+0x2c8>)
 8012738:	f04f 32ff 	mov.w	r2, #4294967295
 801273c:	f7ee f9f6 	bl	8000b2c <__aeabi_dcmpun>
 8012740:	bb70      	cbnz	r0, 80127a0 <_printf_float+0xc0>
 8012742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012746:	4b98      	ldr	r3, [pc, #608]	@ (80129a8 <_printf_float+0x2c8>)
 8012748:	f04f 32ff 	mov.w	r2, #4294967295
 801274c:	f7ee f9d0 	bl	8000af0 <__aeabi_dcmple>
 8012750:	bb30      	cbnz	r0, 80127a0 <_printf_float+0xc0>
 8012752:	2200      	movs	r2, #0
 8012754:	2300      	movs	r3, #0
 8012756:	4640      	mov	r0, r8
 8012758:	4649      	mov	r1, r9
 801275a:	f7ee f9bf 	bl	8000adc <__aeabi_dcmplt>
 801275e:	b110      	cbz	r0, 8012766 <_printf_float+0x86>
 8012760:	232d      	movs	r3, #45	@ 0x2d
 8012762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012766:	4a91      	ldr	r2, [pc, #580]	@ (80129ac <_printf_float+0x2cc>)
 8012768:	4b91      	ldr	r3, [pc, #580]	@ (80129b0 <_printf_float+0x2d0>)
 801276a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801276e:	bf8c      	ite	hi
 8012770:	4690      	movhi	r8, r2
 8012772:	4698      	movls	r8, r3
 8012774:	2303      	movs	r3, #3
 8012776:	6123      	str	r3, [r4, #16]
 8012778:	f02b 0304 	bic.w	r3, fp, #4
 801277c:	6023      	str	r3, [r4, #0]
 801277e:	f04f 0900 	mov.w	r9, #0
 8012782:	9700      	str	r7, [sp, #0]
 8012784:	4633      	mov	r3, r6
 8012786:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012788:	4621      	mov	r1, r4
 801278a:	4628      	mov	r0, r5
 801278c:	f000 f9d2 	bl	8012b34 <_printf_common>
 8012790:	3001      	adds	r0, #1
 8012792:	f040 808d 	bne.w	80128b0 <_printf_float+0x1d0>
 8012796:	f04f 30ff 	mov.w	r0, #4294967295
 801279a:	b00d      	add	sp, #52	@ 0x34
 801279c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127a0:	4642      	mov	r2, r8
 80127a2:	464b      	mov	r3, r9
 80127a4:	4640      	mov	r0, r8
 80127a6:	4649      	mov	r1, r9
 80127a8:	f7ee f9c0 	bl	8000b2c <__aeabi_dcmpun>
 80127ac:	b140      	cbz	r0, 80127c0 <_printf_float+0xe0>
 80127ae:	464b      	mov	r3, r9
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	bfbc      	itt	lt
 80127b4:	232d      	movlt	r3, #45	@ 0x2d
 80127b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80127ba:	4a7e      	ldr	r2, [pc, #504]	@ (80129b4 <_printf_float+0x2d4>)
 80127bc:	4b7e      	ldr	r3, [pc, #504]	@ (80129b8 <_printf_float+0x2d8>)
 80127be:	e7d4      	b.n	801276a <_printf_float+0x8a>
 80127c0:	6863      	ldr	r3, [r4, #4]
 80127c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80127c6:	9206      	str	r2, [sp, #24]
 80127c8:	1c5a      	adds	r2, r3, #1
 80127ca:	d13b      	bne.n	8012844 <_printf_float+0x164>
 80127cc:	2306      	movs	r3, #6
 80127ce:	6063      	str	r3, [r4, #4]
 80127d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80127d4:	2300      	movs	r3, #0
 80127d6:	6022      	str	r2, [r4, #0]
 80127d8:	9303      	str	r3, [sp, #12]
 80127da:	ab0a      	add	r3, sp, #40	@ 0x28
 80127dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80127e0:	ab09      	add	r3, sp, #36	@ 0x24
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	6861      	ldr	r1, [r4, #4]
 80127e6:	ec49 8b10 	vmov	d0, r8, r9
 80127ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80127ee:	4628      	mov	r0, r5
 80127f0:	f7ff fed6 	bl	80125a0 <__cvt>
 80127f4:	9b06      	ldr	r3, [sp, #24]
 80127f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80127f8:	2b47      	cmp	r3, #71	@ 0x47
 80127fa:	4680      	mov	r8, r0
 80127fc:	d129      	bne.n	8012852 <_printf_float+0x172>
 80127fe:	1cc8      	adds	r0, r1, #3
 8012800:	db02      	blt.n	8012808 <_printf_float+0x128>
 8012802:	6863      	ldr	r3, [r4, #4]
 8012804:	4299      	cmp	r1, r3
 8012806:	dd41      	ble.n	801288c <_printf_float+0x1ac>
 8012808:	f1aa 0a02 	sub.w	sl, sl, #2
 801280c:	fa5f fa8a 	uxtb.w	sl, sl
 8012810:	3901      	subs	r1, #1
 8012812:	4652      	mov	r2, sl
 8012814:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012818:	9109      	str	r1, [sp, #36]	@ 0x24
 801281a:	f7ff ff26 	bl	801266a <__exponent>
 801281e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012820:	1813      	adds	r3, r2, r0
 8012822:	2a01      	cmp	r2, #1
 8012824:	4681      	mov	r9, r0
 8012826:	6123      	str	r3, [r4, #16]
 8012828:	dc02      	bgt.n	8012830 <_printf_float+0x150>
 801282a:	6822      	ldr	r2, [r4, #0]
 801282c:	07d2      	lsls	r2, r2, #31
 801282e:	d501      	bpl.n	8012834 <_printf_float+0x154>
 8012830:	3301      	adds	r3, #1
 8012832:	6123      	str	r3, [r4, #16]
 8012834:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012838:	2b00      	cmp	r3, #0
 801283a:	d0a2      	beq.n	8012782 <_printf_float+0xa2>
 801283c:	232d      	movs	r3, #45	@ 0x2d
 801283e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012842:	e79e      	b.n	8012782 <_printf_float+0xa2>
 8012844:	9a06      	ldr	r2, [sp, #24]
 8012846:	2a47      	cmp	r2, #71	@ 0x47
 8012848:	d1c2      	bne.n	80127d0 <_printf_float+0xf0>
 801284a:	2b00      	cmp	r3, #0
 801284c:	d1c0      	bne.n	80127d0 <_printf_float+0xf0>
 801284e:	2301      	movs	r3, #1
 8012850:	e7bd      	b.n	80127ce <_printf_float+0xee>
 8012852:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012856:	d9db      	bls.n	8012810 <_printf_float+0x130>
 8012858:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801285c:	d118      	bne.n	8012890 <_printf_float+0x1b0>
 801285e:	2900      	cmp	r1, #0
 8012860:	6863      	ldr	r3, [r4, #4]
 8012862:	dd0b      	ble.n	801287c <_printf_float+0x19c>
 8012864:	6121      	str	r1, [r4, #16]
 8012866:	b913      	cbnz	r3, 801286e <_printf_float+0x18e>
 8012868:	6822      	ldr	r2, [r4, #0]
 801286a:	07d0      	lsls	r0, r2, #31
 801286c:	d502      	bpl.n	8012874 <_printf_float+0x194>
 801286e:	3301      	adds	r3, #1
 8012870:	440b      	add	r3, r1
 8012872:	6123      	str	r3, [r4, #16]
 8012874:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012876:	f04f 0900 	mov.w	r9, #0
 801287a:	e7db      	b.n	8012834 <_printf_float+0x154>
 801287c:	b913      	cbnz	r3, 8012884 <_printf_float+0x1a4>
 801287e:	6822      	ldr	r2, [r4, #0]
 8012880:	07d2      	lsls	r2, r2, #31
 8012882:	d501      	bpl.n	8012888 <_printf_float+0x1a8>
 8012884:	3302      	adds	r3, #2
 8012886:	e7f4      	b.n	8012872 <_printf_float+0x192>
 8012888:	2301      	movs	r3, #1
 801288a:	e7f2      	b.n	8012872 <_printf_float+0x192>
 801288c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012890:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012892:	4299      	cmp	r1, r3
 8012894:	db05      	blt.n	80128a2 <_printf_float+0x1c2>
 8012896:	6823      	ldr	r3, [r4, #0]
 8012898:	6121      	str	r1, [r4, #16]
 801289a:	07d8      	lsls	r0, r3, #31
 801289c:	d5ea      	bpl.n	8012874 <_printf_float+0x194>
 801289e:	1c4b      	adds	r3, r1, #1
 80128a0:	e7e7      	b.n	8012872 <_printf_float+0x192>
 80128a2:	2900      	cmp	r1, #0
 80128a4:	bfd4      	ite	le
 80128a6:	f1c1 0202 	rsble	r2, r1, #2
 80128aa:	2201      	movgt	r2, #1
 80128ac:	4413      	add	r3, r2
 80128ae:	e7e0      	b.n	8012872 <_printf_float+0x192>
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	055a      	lsls	r2, r3, #21
 80128b4:	d407      	bmi.n	80128c6 <_printf_float+0x1e6>
 80128b6:	6923      	ldr	r3, [r4, #16]
 80128b8:	4642      	mov	r2, r8
 80128ba:	4631      	mov	r1, r6
 80128bc:	4628      	mov	r0, r5
 80128be:	47b8      	blx	r7
 80128c0:	3001      	adds	r0, #1
 80128c2:	d12b      	bne.n	801291c <_printf_float+0x23c>
 80128c4:	e767      	b.n	8012796 <_printf_float+0xb6>
 80128c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80128ca:	f240 80dd 	bls.w	8012a88 <_printf_float+0x3a8>
 80128ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80128d2:	2200      	movs	r2, #0
 80128d4:	2300      	movs	r3, #0
 80128d6:	f7ee f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 80128da:	2800      	cmp	r0, #0
 80128dc:	d033      	beq.n	8012946 <_printf_float+0x266>
 80128de:	4a37      	ldr	r2, [pc, #220]	@ (80129bc <_printf_float+0x2dc>)
 80128e0:	2301      	movs	r3, #1
 80128e2:	4631      	mov	r1, r6
 80128e4:	4628      	mov	r0, r5
 80128e6:	47b8      	blx	r7
 80128e8:	3001      	adds	r0, #1
 80128ea:	f43f af54 	beq.w	8012796 <_printf_float+0xb6>
 80128ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80128f2:	4543      	cmp	r3, r8
 80128f4:	db02      	blt.n	80128fc <_printf_float+0x21c>
 80128f6:	6823      	ldr	r3, [r4, #0]
 80128f8:	07d8      	lsls	r0, r3, #31
 80128fa:	d50f      	bpl.n	801291c <_printf_float+0x23c>
 80128fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012900:	4631      	mov	r1, r6
 8012902:	4628      	mov	r0, r5
 8012904:	47b8      	blx	r7
 8012906:	3001      	adds	r0, #1
 8012908:	f43f af45 	beq.w	8012796 <_printf_float+0xb6>
 801290c:	f04f 0900 	mov.w	r9, #0
 8012910:	f108 38ff 	add.w	r8, r8, #4294967295
 8012914:	f104 0a1a 	add.w	sl, r4, #26
 8012918:	45c8      	cmp	r8, r9
 801291a:	dc09      	bgt.n	8012930 <_printf_float+0x250>
 801291c:	6823      	ldr	r3, [r4, #0]
 801291e:	079b      	lsls	r3, r3, #30
 8012920:	f100 8103 	bmi.w	8012b2a <_printf_float+0x44a>
 8012924:	68e0      	ldr	r0, [r4, #12]
 8012926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012928:	4298      	cmp	r0, r3
 801292a:	bfb8      	it	lt
 801292c:	4618      	movlt	r0, r3
 801292e:	e734      	b.n	801279a <_printf_float+0xba>
 8012930:	2301      	movs	r3, #1
 8012932:	4652      	mov	r2, sl
 8012934:	4631      	mov	r1, r6
 8012936:	4628      	mov	r0, r5
 8012938:	47b8      	blx	r7
 801293a:	3001      	adds	r0, #1
 801293c:	f43f af2b 	beq.w	8012796 <_printf_float+0xb6>
 8012940:	f109 0901 	add.w	r9, r9, #1
 8012944:	e7e8      	b.n	8012918 <_printf_float+0x238>
 8012946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012948:	2b00      	cmp	r3, #0
 801294a:	dc39      	bgt.n	80129c0 <_printf_float+0x2e0>
 801294c:	4a1b      	ldr	r2, [pc, #108]	@ (80129bc <_printf_float+0x2dc>)
 801294e:	2301      	movs	r3, #1
 8012950:	4631      	mov	r1, r6
 8012952:	4628      	mov	r0, r5
 8012954:	47b8      	blx	r7
 8012956:	3001      	adds	r0, #1
 8012958:	f43f af1d 	beq.w	8012796 <_printf_float+0xb6>
 801295c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012960:	ea59 0303 	orrs.w	r3, r9, r3
 8012964:	d102      	bne.n	801296c <_printf_float+0x28c>
 8012966:	6823      	ldr	r3, [r4, #0]
 8012968:	07d9      	lsls	r1, r3, #31
 801296a:	d5d7      	bpl.n	801291c <_printf_float+0x23c>
 801296c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012970:	4631      	mov	r1, r6
 8012972:	4628      	mov	r0, r5
 8012974:	47b8      	blx	r7
 8012976:	3001      	adds	r0, #1
 8012978:	f43f af0d 	beq.w	8012796 <_printf_float+0xb6>
 801297c:	f04f 0a00 	mov.w	sl, #0
 8012980:	f104 0b1a 	add.w	fp, r4, #26
 8012984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012986:	425b      	negs	r3, r3
 8012988:	4553      	cmp	r3, sl
 801298a:	dc01      	bgt.n	8012990 <_printf_float+0x2b0>
 801298c:	464b      	mov	r3, r9
 801298e:	e793      	b.n	80128b8 <_printf_float+0x1d8>
 8012990:	2301      	movs	r3, #1
 8012992:	465a      	mov	r2, fp
 8012994:	4631      	mov	r1, r6
 8012996:	4628      	mov	r0, r5
 8012998:	47b8      	blx	r7
 801299a:	3001      	adds	r0, #1
 801299c:	f43f aefb 	beq.w	8012796 <_printf_float+0xb6>
 80129a0:	f10a 0a01 	add.w	sl, sl, #1
 80129a4:	e7ee      	b.n	8012984 <_printf_float+0x2a4>
 80129a6:	bf00      	nop
 80129a8:	7fefffff 	.word	0x7fefffff
 80129ac:	0801668a 	.word	0x0801668a
 80129b0:	08016686 	.word	0x08016686
 80129b4:	08016692 	.word	0x08016692
 80129b8:	0801668e 	.word	0x0801668e
 80129bc:	08016696 	.word	0x08016696
 80129c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80129c6:	4553      	cmp	r3, sl
 80129c8:	bfa8      	it	ge
 80129ca:	4653      	movge	r3, sl
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	4699      	mov	r9, r3
 80129d0:	dc36      	bgt.n	8012a40 <_printf_float+0x360>
 80129d2:	f04f 0b00 	mov.w	fp, #0
 80129d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129da:	f104 021a 	add.w	r2, r4, #26
 80129de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129e0:	9306      	str	r3, [sp, #24]
 80129e2:	eba3 0309 	sub.w	r3, r3, r9
 80129e6:	455b      	cmp	r3, fp
 80129e8:	dc31      	bgt.n	8012a4e <_printf_float+0x36e>
 80129ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ec:	459a      	cmp	sl, r3
 80129ee:	dc3a      	bgt.n	8012a66 <_printf_float+0x386>
 80129f0:	6823      	ldr	r3, [r4, #0]
 80129f2:	07da      	lsls	r2, r3, #31
 80129f4:	d437      	bmi.n	8012a66 <_printf_float+0x386>
 80129f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129f8:	ebaa 0903 	sub.w	r9, sl, r3
 80129fc:	9b06      	ldr	r3, [sp, #24]
 80129fe:	ebaa 0303 	sub.w	r3, sl, r3
 8012a02:	4599      	cmp	r9, r3
 8012a04:	bfa8      	it	ge
 8012a06:	4699      	movge	r9, r3
 8012a08:	f1b9 0f00 	cmp.w	r9, #0
 8012a0c:	dc33      	bgt.n	8012a76 <_printf_float+0x396>
 8012a0e:	f04f 0800 	mov.w	r8, #0
 8012a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a16:	f104 0b1a 	add.w	fp, r4, #26
 8012a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8012a20:	eba3 0309 	sub.w	r3, r3, r9
 8012a24:	4543      	cmp	r3, r8
 8012a26:	f77f af79 	ble.w	801291c <_printf_float+0x23c>
 8012a2a:	2301      	movs	r3, #1
 8012a2c:	465a      	mov	r2, fp
 8012a2e:	4631      	mov	r1, r6
 8012a30:	4628      	mov	r0, r5
 8012a32:	47b8      	blx	r7
 8012a34:	3001      	adds	r0, #1
 8012a36:	f43f aeae 	beq.w	8012796 <_printf_float+0xb6>
 8012a3a:	f108 0801 	add.w	r8, r8, #1
 8012a3e:	e7ec      	b.n	8012a1a <_printf_float+0x33a>
 8012a40:	4642      	mov	r2, r8
 8012a42:	4631      	mov	r1, r6
 8012a44:	4628      	mov	r0, r5
 8012a46:	47b8      	blx	r7
 8012a48:	3001      	adds	r0, #1
 8012a4a:	d1c2      	bne.n	80129d2 <_printf_float+0x2f2>
 8012a4c:	e6a3      	b.n	8012796 <_printf_float+0xb6>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	4631      	mov	r1, r6
 8012a52:	4628      	mov	r0, r5
 8012a54:	9206      	str	r2, [sp, #24]
 8012a56:	47b8      	blx	r7
 8012a58:	3001      	adds	r0, #1
 8012a5a:	f43f ae9c 	beq.w	8012796 <_printf_float+0xb6>
 8012a5e:	9a06      	ldr	r2, [sp, #24]
 8012a60:	f10b 0b01 	add.w	fp, fp, #1
 8012a64:	e7bb      	b.n	80129de <_printf_float+0x2fe>
 8012a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a6a:	4631      	mov	r1, r6
 8012a6c:	4628      	mov	r0, r5
 8012a6e:	47b8      	blx	r7
 8012a70:	3001      	adds	r0, #1
 8012a72:	d1c0      	bne.n	80129f6 <_printf_float+0x316>
 8012a74:	e68f      	b.n	8012796 <_printf_float+0xb6>
 8012a76:	9a06      	ldr	r2, [sp, #24]
 8012a78:	464b      	mov	r3, r9
 8012a7a:	4442      	add	r2, r8
 8012a7c:	4631      	mov	r1, r6
 8012a7e:	4628      	mov	r0, r5
 8012a80:	47b8      	blx	r7
 8012a82:	3001      	adds	r0, #1
 8012a84:	d1c3      	bne.n	8012a0e <_printf_float+0x32e>
 8012a86:	e686      	b.n	8012796 <_printf_float+0xb6>
 8012a88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a8c:	f1ba 0f01 	cmp.w	sl, #1
 8012a90:	dc01      	bgt.n	8012a96 <_printf_float+0x3b6>
 8012a92:	07db      	lsls	r3, r3, #31
 8012a94:	d536      	bpl.n	8012b04 <_printf_float+0x424>
 8012a96:	2301      	movs	r3, #1
 8012a98:	4642      	mov	r2, r8
 8012a9a:	4631      	mov	r1, r6
 8012a9c:	4628      	mov	r0, r5
 8012a9e:	47b8      	blx	r7
 8012aa0:	3001      	adds	r0, #1
 8012aa2:	f43f ae78 	beq.w	8012796 <_printf_float+0xb6>
 8012aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aaa:	4631      	mov	r1, r6
 8012aac:	4628      	mov	r0, r5
 8012aae:	47b8      	blx	r7
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	f43f ae70 	beq.w	8012796 <_printf_float+0xb6>
 8012ab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012aba:	2200      	movs	r2, #0
 8012abc:	2300      	movs	r3, #0
 8012abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ac2:	f7ee f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ac6:	b9c0      	cbnz	r0, 8012afa <_printf_float+0x41a>
 8012ac8:	4653      	mov	r3, sl
 8012aca:	f108 0201 	add.w	r2, r8, #1
 8012ace:	4631      	mov	r1, r6
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	47b8      	blx	r7
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	d10c      	bne.n	8012af2 <_printf_float+0x412>
 8012ad8:	e65d      	b.n	8012796 <_printf_float+0xb6>
 8012ada:	2301      	movs	r3, #1
 8012adc:	465a      	mov	r2, fp
 8012ade:	4631      	mov	r1, r6
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	47b8      	blx	r7
 8012ae4:	3001      	adds	r0, #1
 8012ae6:	f43f ae56 	beq.w	8012796 <_printf_float+0xb6>
 8012aea:	f108 0801 	add.w	r8, r8, #1
 8012aee:	45d0      	cmp	r8, sl
 8012af0:	dbf3      	blt.n	8012ada <_printf_float+0x3fa>
 8012af2:	464b      	mov	r3, r9
 8012af4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012af8:	e6df      	b.n	80128ba <_printf_float+0x1da>
 8012afa:	f04f 0800 	mov.w	r8, #0
 8012afe:	f104 0b1a 	add.w	fp, r4, #26
 8012b02:	e7f4      	b.n	8012aee <_printf_float+0x40e>
 8012b04:	2301      	movs	r3, #1
 8012b06:	4642      	mov	r2, r8
 8012b08:	e7e1      	b.n	8012ace <_printf_float+0x3ee>
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	464a      	mov	r2, r9
 8012b0e:	4631      	mov	r1, r6
 8012b10:	4628      	mov	r0, r5
 8012b12:	47b8      	blx	r7
 8012b14:	3001      	adds	r0, #1
 8012b16:	f43f ae3e 	beq.w	8012796 <_printf_float+0xb6>
 8012b1a:	f108 0801 	add.w	r8, r8, #1
 8012b1e:	68e3      	ldr	r3, [r4, #12]
 8012b20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b22:	1a5b      	subs	r3, r3, r1
 8012b24:	4543      	cmp	r3, r8
 8012b26:	dcf0      	bgt.n	8012b0a <_printf_float+0x42a>
 8012b28:	e6fc      	b.n	8012924 <_printf_float+0x244>
 8012b2a:	f04f 0800 	mov.w	r8, #0
 8012b2e:	f104 0919 	add.w	r9, r4, #25
 8012b32:	e7f4      	b.n	8012b1e <_printf_float+0x43e>

08012b34 <_printf_common>:
 8012b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b38:	4616      	mov	r6, r2
 8012b3a:	4698      	mov	r8, r3
 8012b3c:	688a      	ldr	r2, [r1, #8]
 8012b3e:	690b      	ldr	r3, [r1, #16]
 8012b40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b44:	4293      	cmp	r3, r2
 8012b46:	bfb8      	it	lt
 8012b48:	4613      	movlt	r3, r2
 8012b4a:	6033      	str	r3, [r6, #0]
 8012b4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b50:	4607      	mov	r7, r0
 8012b52:	460c      	mov	r4, r1
 8012b54:	b10a      	cbz	r2, 8012b5a <_printf_common+0x26>
 8012b56:	3301      	adds	r3, #1
 8012b58:	6033      	str	r3, [r6, #0]
 8012b5a:	6823      	ldr	r3, [r4, #0]
 8012b5c:	0699      	lsls	r1, r3, #26
 8012b5e:	bf42      	ittt	mi
 8012b60:	6833      	ldrmi	r3, [r6, #0]
 8012b62:	3302      	addmi	r3, #2
 8012b64:	6033      	strmi	r3, [r6, #0]
 8012b66:	6825      	ldr	r5, [r4, #0]
 8012b68:	f015 0506 	ands.w	r5, r5, #6
 8012b6c:	d106      	bne.n	8012b7c <_printf_common+0x48>
 8012b6e:	f104 0a19 	add.w	sl, r4, #25
 8012b72:	68e3      	ldr	r3, [r4, #12]
 8012b74:	6832      	ldr	r2, [r6, #0]
 8012b76:	1a9b      	subs	r3, r3, r2
 8012b78:	42ab      	cmp	r3, r5
 8012b7a:	dc26      	bgt.n	8012bca <_printf_common+0x96>
 8012b7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012b80:	6822      	ldr	r2, [r4, #0]
 8012b82:	3b00      	subs	r3, #0
 8012b84:	bf18      	it	ne
 8012b86:	2301      	movne	r3, #1
 8012b88:	0692      	lsls	r2, r2, #26
 8012b8a:	d42b      	bmi.n	8012be4 <_printf_common+0xb0>
 8012b8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012b90:	4641      	mov	r1, r8
 8012b92:	4638      	mov	r0, r7
 8012b94:	47c8      	blx	r9
 8012b96:	3001      	adds	r0, #1
 8012b98:	d01e      	beq.n	8012bd8 <_printf_common+0xa4>
 8012b9a:	6823      	ldr	r3, [r4, #0]
 8012b9c:	6922      	ldr	r2, [r4, #16]
 8012b9e:	f003 0306 	and.w	r3, r3, #6
 8012ba2:	2b04      	cmp	r3, #4
 8012ba4:	bf02      	ittt	eq
 8012ba6:	68e5      	ldreq	r5, [r4, #12]
 8012ba8:	6833      	ldreq	r3, [r6, #0]
 8012baa:	1aed      	subeq	r5, r5, r3
 8012bac:	68a3      	ldr	r3, [r4, #8]
 8012bae:	bf0c      	ite	eq
 8012bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bb4:	2500      	movne	r5, #0
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	bfc4      	itt	gt
 8012bba:	1a9b      	subgt	r3, r3, r2
 8012bbc:	18ed      	addgt	r5, r5, r3
 8012bbe:	2600      	movs	r6, #0
 8012bc0:	341a      	adds	r4, #26
 8012bc2:	42b5      	cmp	r5, r6
 8012bc4:	d11a      	bne.n	8012bfc <_printf_common+0xc8>
 8012bc6:	2000      	movs	r0, #0
 8012bc8:	e008      	b.n	8012bdc <_printf_common+0xa8>
 8012bca:	2301      	movs	r3, #1
 8012bcc:	4652      	mov	r2, sl
 8012bce:	4641      	mov	r1, r8
 8012bd0:	4638      	mov	r0, r7
 8012bd2:	47c8      	blx	r9
 8012bd4:	3001      	adds	r0, #1
 8012bd6:	d103      	bne.n	8012be0 <_printf_common+0xac>
 8012bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be0:	3501      	adds	r5, #1
 8012be2:	e7c6      	b.n	8012b72 <_printf_common+0x3e>
 8012be4:	18e1      	adds	r1, r4, r3
 8012be6:	1c5a      	adds	r2, r3, #1
 8012be8:	2030      	movs	r0, #48	@ 0x30
 8012bea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012bee:	4422      	add	r2, r4
 8012bf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012bf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012bf8:	3302      	adds	r3, #2
 8012bfa:	e7c7      	b.n	8012b8c <_printf_common+0x58>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	4622      	mov	r2, r4
 8012c00:	4641      	mov	r1, r8
 8012c02:	4638      	mov	r0, r7
 8012c04:	47c8      	blx	r9
 8012c06:	3001      	adds	r0, #1
 8012c08:	d0e6      	beq.n	8012bd8 <_printf_common+0xa4>
 8012c0a:	3601      	adds	r6, #1
 8012c0c:	e7d9      	b.n	8012bc2 <_printf_common+0x8e>
	...

08012c10 <_printf_i>:
 8012c10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c14:	7e0f      	ldrb	r7, [r1, #24]
 8012c16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c18:	2f78      	cmp	r7, #120	@ 0x78
 8012c1a:	4691      	mov	r9, r2
 8012c1c:	4680      	mov	r8, r0
 8012c1e:	460c      	mov	r4, r1
 8012c20:	469a      	mov	sl, r3
 8012c22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c26:	d807      	bhi.n	8012c38 <_printf_i+0x28>
 8012c28:	2f62      	cmp	r7, #98	@ 0x62
 8012c2a:	d80a      	bhi.n	8012c42 <_printf_i+0x32>
 8012c2c:	2f00      	cmp	r7, #0
 8012c2e:	f000 80d1 	beq.w	8012dd4 <_printf_i+0x1c4>
 8012c32:	2f58      	cmp	r7, #88	@ 0x58
 8012c34:	f000 80b8 	beq.w	8012da8 <_printf_i+0x198>
 8012c38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c40:	e03a      	b.n	8012cb8 <_printf_i+0xa8>
 8012c42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c46:	2b15      	cmp	r3, #21
 8012c48:	d8f6      	bhi.n	8012c38 <_printf_i+0x28>
 8012c4a:	a101      	add	r1, pc, #4	@ (adr r1, 8012c50 <_printf_i+0x40>)
 8012c4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c50:	08012ca9 	.word	0x08012ca9
 8012c54:	08012cbd 	.word	0x08012cbd
 8012c58:	08012c39 	.word	0x08012c39
 8012c5c:	08012c39 	.word	0x08012c39
 8012c60:	08012c39 	.word	0x08012c39
 8012c64:	08012c39 	.word	0x08012c39
 8012c68:	08012cbd 	.word	0x08012cbd
 8012c6c:	08012c39 	.word	0x08012c39
 8012c70:	08012c39 	.word	0x08012c39
 8012c74:	08012c39 	.word	0x08012c39
 8012c78:	08012c39 	.word	0x08012c39
 8012c7c:	08012dbb 	.word	0x08012dbb
 8012c80:	08012ce7 	.word	0x08012ce7
 8012c84:	08012d75 	.word	0x08012d75
 8012c88:	08012c39 	.word	0x08012c39
 8012c8c:	08012c39 	.word	0x08012c39
 8012c90:	08012ddd 	.word	0x08012ddd
 8012c94:	08012c39 	.word	0x08012c39
 8012c98:	08012ce7 	.word	0x08012ce7
 8012c9c:	08012c39 	.word	0x08012c39
 8012ca0:	08012c39 	.word	0x08012c39
 8012ca4:	08012d7d 	.word	0x08012d7d
 8012ca8:	6833      	ldr	r3, [r6, #0]
 8012caa:	1d1a      	adds	r2, r3, #4
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	6032      	str	r2, [r6, #0]
 8012cb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012cb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012cb8:	2301      	movs	r3, #1
 8012cba:	e09c      	b.n	8012df6 <_printf_i+0x1e6>
 8012cbc:	6833      	ldr	r3, [r6, #0]
 8012cbe:	6820      	ldr	r0, [r4, #0]
 8012cc0:	1d19      	adds	r1, r3, #4
 8012cc2:	6031      	str	r1, [r6, #0]
 8012cc4:	0606      	lsls	r6, r0, #24
 8012cc6:	d501      	bpl.n	8012ccc <_printf_i+0xbc>
 8012cc8:	681d      	ldr	r5, [r3, #0]
 8012cca:	e003      	b.n	8012cd4 <_printf_i+0xc4>
 8012ccc:	0645      	lsls	r5, r0, #25
 8012cce:	d5fb      	bpl.n	8012cc8 <_printf_i+0xb8>
 8012cd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012cd4:	2d00      	cmp	r5, #0
 8012cd6:	da03      	bge.n	8012ce0 <_printf_i+0xd0>
 8012cd8:	232d      	movs	r3, #45	@ 0x2d
 8012cda:	426d      	negs	r5, r5
 8012cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ce0:	4858      	ldr	r0, [pc, #352]	@ (8012e44 <_printf_i+0x234>)
 8012ce2:	230a      	movs	r3, #10
 8012ce4:	e011      	b.n	8012d0a <_printf_i+0xfa>
 8012ce6:	6821      	ldr	r1, [r4, #0]
 8012ce8:	6833      	ldr	r3, [r6, #0]
 8012cea:	0608      	lsls	r0, r1, #24
 8012cec:	f853 5b04 	ldr.w	r5, [r3], #4
 8012cf0:	d402      	bmi.n	8012cf8 <_printf_i+0xe8>
 8012cf2:	0649      	lsls	r1, r1, #25
 8012cf4:	bf48      	it	mi
 8012cf6:	b2ad      	uxthmi	r5, r5
 8012cf8:	2f6f      	cmp	r7, #111	@ 0x6f
 8012cfa:	4852      	ldr	r0, [pc, #328]	@ (8012e44 <_printf_i+0x234>)
 8012cfc:	6033      	str	r3, [r6, #0]
 8012cfe:	bf14      	ite	ne
 8012d00:	230a      	movne	r3, #10
 8012d02:	2308      	moveq	r3, #8
 8012d04:	2100      	movs	r1, #0
 8012d06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d0a:	6866      	ldr	r6, [r4, #4]
 8012d0c:	60a6      	str	r6, [r4, #8]
 8012d0e:	2e00      	cmp	r6, #0
 8012d10:	db05      	blt.n	8012d1e <_printf_i+0x10e>
 8012d12:	6821      	ldr	r1, [r4, #0]
 8012d14:	432e      	orrs	r6, r5
 8012d16:	f021 0104 	bic.w	r1, r1, #4
 8012d1a:	6021      	str	r1, [r4, #0]
 8012d1c:	d04b      	beq.n	8012db6 <_printf_i+0x1a6>
 8012d1e:	4616      	mov	r6, r2
 8012d20:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d24:	fb03 5711 	mls	r7, r3, r1, r5
 8012d28:	5dc7      	ldrb	r7, [r0, r7]
 8012d2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d2e:	462f      	mov	r7, r5
 8012d30:	42bb      	cmp	r3, r7
 8012d32:	460d      	mov	r5, r1
 8012d34:	d9f4      	bls.n	8012d20 <_printf_i+0x110>
 8012d36:	2b08      	cmp	r3, #8
 8012d38:	d10b      	bne.n	8012d52 <_printf_i+0x142>
 8012d3a:	6823      	ldr	r3, [r4, #0]
 8012d3c:	07df      	lsls	r7, r3, #31
 8012d3e:	d508      	bpl.n	8012d52 <_printf_i+0x142>
 8012d40:	6923      	ldr	r3, [r4, #16]
 8012d42:	6861      	ldr	r1, [r4, #4]
 8012d44:	4299      	cmp	r1, r3
 8012d46:	bfde      	ittt	le
 8012d48:	2330      	movle	r3, #48	@ 0x30
 8012d4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d52:	1b92      	subs	r2, r2, r6
 8012d54:	6122      	str	r2, [r4, #16]
 8012d56:	f8cd a000 	str.w	sl, [sp]
 8012d5a:	464b      	mov	r3, r9
 8012d5c:	aa03      	add	r2, sp, #12
 8012d5e:	4621      	mov	r1, r4
 8012d60:	4640      	mov	r0, r8
 8012d62:	f7ff fee7 	bl	8012b34 <_printf_common>
 8012d66:	3001      	adds	r0, #1
 8012d68:	d14a      	bne.n	8012e00 <_printf_i+0x1f0>
 8012d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d6e:	b004      	add	sp, #16
 8012d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d74:	6823      	ldr	r3, [r4, #0]
 8012d76:	f043 0320 	orr.w	r3, r3, #32
 8012d7a:	6023      	str	r3, [r4, #0]
 8012d7c:	4832      	ldr	r0, [pc, #200]	@ (8012e48 <_printf_i+0x238>)
 8012d7e:	2778      	movs	r7, #120	@ 0x78
 8012d80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012d84:	6823      	ldr	r3, [r4, #0]
 8012d86:	6831      	ldr	r1, [r6, #0]
 8012d88:	061f      	lsls	r7, r3, #24
 8012d8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012d8e:	d402      	bmi.n	8012d96 <_printf_i+0x186>
 8012d90:	065f      	lsls	r7, r3, #25
 8012d92:	bf48      	it	mi
 8012d94:	b2ad      	uxthmi	r5, r5
 8012d96:	6031      	str	r1, [r6, #0]
 8012d98:	07d9      	lsls	r1, r3, #31
 8012d9a:	bf44      	itt	mi
 8012d9c:	f043 0320 	orrmi.w	r3, r3, #32
 8012da0:	6023      	strmi	r3, [r4, #0]
 8012da2:	b11d      	cbz	r5, 8012dac <_printf_i+0x19c>
 8012da4:	2310      	movs	r3, #16
 8012da6:	e7ad      	b.n	8012d04 <_printf_i+0xf4>
 8012da8:	4826      	ldr	r0, [pc, #152]	@ (8012e44 <_printf_i+0x234>)
 8012daa:	e7e9      	b.n	8012d80 <_printf_i+0x170>
 8012dac:	6823      	ldr	r3, [r4, #0]
 8012dae:	f023 0320 	bic.w	r3, r3, #32
 8012db2:	6023      	str	r3, [r4, #0]
 8012db4:	e7f6      	b.n	8012da4 <_printf_i+0x194>
 8012db6:	4616      	mov	r6, r2
 8012db8:	e7bd      	b.n	8012d36 <_printf_i+0x126>
 8012dba:	6833      	ldr	r3, [r6, #0]
 8012dbc:	6825      	ldr	r5, [r4, #0]
 8012dbe:	6961      	ldr	r1, [r4, #20]
 8012dc0:	1d18      	adds	r0, r3, #4
 8012dc2:	6030      	str	r0, [r6, #0]
 8012dc4:	062e      	lsls	r6, r5, #24
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	d501      	bpl.n	8012dce <_printf_i+0x1be>
 8012dca:	6019      	str	r1, [r3, #0]
 8012dcc:	e002      	b.n	8012dd4 <_printf_i+0x1c4>
 8012dce:	0668      	lsls	r0, r5, #25
 8012dd0:	d5fb      	bpl.n	8012dca <_printf_i+0x1ba>
 8012dd2:	8019      	strh	r1, [r3, #0]
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	6123      	str	r3, [r4, #16]
 8012dd8:	4616      	mov	r6, r2
 8012dda:	e7bc      	b.n	8012d56 <_printf_i+0x146>
 8012ddc:	6833      	ldr	r3, [r6, #0]
 8012dde:	1d1a      	adds	r2, r3, #4
 8012de0:	6032      	str	r2, [r6, #0]
 8012de2:	681e      	ldr	r6, [r3, #0]
 8012de4:	6862      	ldr	r2, [r4, #4]
 8012de6:	2100      	movs	r1, #0
 8012de8:	4630      	mov	r0, r6
 8012dea:	f7ed f9f1 	bl	80001d0 <memchr>
 8012dee:	b108      	cbz	r0, 8012df4 <_printf_i+0x1e4>
 8012df0:	1b80      	subs	r0, r0, r6
 8012df2:	6060      	str	r0, [r4, #4]
 8012df4:	6863      	ldr	r3, [r4, #4]
 8012df6:	6123      	str	r3, [r4, #16]
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dfe:	e7aa      	b.n	8012d56 <_printf_i+0x146>
 8012e00:	6923      	ldr	r3, [r4, #16]
 8012e02:	4632      	mov	r2, r6
 8012e04:	4649      	mov	r1, r9
 8012e06:	4640      	mov	r0, r8
 8012e08:	47d0      	blx	sl
 8012e0a:	3001      	adds	r0, #1
 8012e0c:	d0ad      	beq.n	8012d6a <_printf_i+0x15a>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	079b      	lsls	r3, r3, #30
 8012e12:	d413      	bmi.n	8012e3c <_printf_i+0x22c>
 8012e14:	68e0      	ldr	r0, [r4, #12]
 8012e16:	9b03      	ldr	r3, [sp, #12]
 8012e18:	4298      	cmp	r0, r3
 8012e1a:	bfb8      	it	lt
 8012e1c:	4618      	movlt	r0, r3
 8012e1e:	e7a6      	b.n	8012d6e <_printf_i+0x15e>
 8012e20:	2301      	movs	r3, #1
 8012e22:	4632      	mov	r2, r6
 8012e24:	4649      	mov	r1, r9
 8012e26:	4640      	mov	r0, r8
 8012e28:	47d0      	blx	sl
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	d09d      	beq.n	8012d6a <_printf_i+0x15a>
 8012e2e:	3501      	adds	r5, #1
 8012e30:	68e3      	ldr	r3, [r4, #12]
 8012e32:	9903      	ldr	r1, [sp, #12]
 8012e34:	1a5b      	subs	r3, r3, r1
 8012e36:	42ab      	cmp	r3, r5
 8012e38:	dcf2      	bgt.n	8012e20 <_printf_i+0x210>
 8012e3a:	e7eb      	b.n	8012e14 <_printf_i+0x204>
 8012e3c:	2500      	movs	r5, #0
 8012e3e:	f104 0619 	add.w	r6, r4, #25
 8012e42:	e7f5      	b.n	8012e30 <_printf_i+0x220>
 8012e44:	08016698 	.word	0x08016698
 8012e48:	080166a9 	.word	0x080166a9

08012e4c <std>:
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	b510      	push	{r4, lr}
 8012e50:	4604      	mov	r4, r0
 8012e52:	e9c0 3300 	strd	r3, r3, [r0]
 8012e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e5a:	6083      	str	r3, [r0, #8]
 8012e5c:	8181      	strh	r1, [r0, #12]
 8012e5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012e60:	81c2      	strh	r2, [r0, #14]
 8012e62:	6183      	str	r3, [r0, #24]
 8012e64:	4619      	mov	r1, r3
 8012e66:	2208      	movs	r2, #8
 8012e68:	305c      	adds	r0, #92	@ 0x5c
 8012e6a:	f000 f930 	bl	80130ce <memset>
 8012e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea4 <std+0x58>)
 8012e70:	6263      	str	r3, [r4, #36]	@ 0x24
 8012e72:	4b0d      	ldr	r3, [pc, #52]	@ (8012ea8 <std+0x5c>)
 8012e74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012e76:	4b0d      	ldr	r3, [pc, #52]	@ (8012eac <std+0x60>)
 8012e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8012eb0 <std+0x64>)
 8012e7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8012eb4 <std+0x68>)
 8012e80:	6224      	str	r4, [r4, #32]
 8012e82:	429c      	cmp	r4, r3
 8012e84:	d006      	beq.n	8012e94 <std+0x48>
 8012e86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012e8a:	4294      	cmp	r4, r2
 8012e8c:	d002      	beq.n	8012e94 <std+0x48>
 8012e8e:	33d0      	adds	r3, #208	@ 0xd0
 8012e90:	429c      	cmp	r4, r3
 8012e92:	d105      	bne.n	8012ea0 <std+0x54>
 8012e94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e9c:	f000 ba7c 	b.w	8013398 <__retarget_lock_init_recursive>
 8012ea0:	bd10      	pop	{r4, pc}
 8012ea2:	bf00      	nop
 8012ea4:	08013015 	.word	0x08013015
 8012ea8:	08013037 	.word	0x08013037
 8012eac:	0801306f 	.word	0x0801306f
 8012eb0:	08013093 	.word	0x08013093
 8012eb4:	200136ec 	.word	0x200136ec

08012eb8 <stdio_exit_handler>:
 8012eb8:	4a02      	ldr	r2, [pc, #8]	@ (8012ec4 <stdio_exit_handler+0xc>)
 8012eba:	4903      	ldr	r1, [pc, #12]	@ (8012ec8 <stdio_exit_handler+0x10>)
 8012ebc:	4803      	ldr	r0, [pc, #12]	@ (8012ecc <stdio_exit_handler+0x14>)
 8012ebe:	f000 b869 	b.w	8012f94 <_fwalk_sglue>
 8012ec2:	bf00      	nop
 8012ec4:	20000294 	.word	0x20000294
 8012ec8:	08015521 	.word	0x08015521
 8012ecc:	20000410 	.word	0x20000410

08012ed0 <cleanup_stdio>:
 8012ed0:	6841      	ldr	r1, [r0, #4]
 8012ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8012f04 <cleanup_stdio+0x34>)
 8012ed4:	4299      	cmp	r1, r3
 8012ed6:	b510      	push	{r4, lr}
 8012ed8:	4604      	mov	r4, r0
 8012eda:	d001      	beq.n	8012ee0 <cleanup_stdio+0x10>
 8012edc:	f002 fb20 	bl	8015520 <_fflush_r>
 8012ee0:	68a1      	ldr	r1, [r4, #8]
 8012ee2:	4b09      	ldr	r3, [pc, #36]	@ (8012f08 <cleanup_stdio+0x38>)
 8012ee4:	4299      	cmp	r1, r3
 8012ee6:	d002      	beq.n	8012eee <cleanup_stdio+0x1e>
 8012ee8:	4620      	mov	r0, r4
 8012eea:	f002 fb19 	bl	8015520 <_fflush_r>
 8012eee:	68e1      	ldr	r1, [r4, #12]
 8012ef0:	4b06      	ldr	r3, [pc, #24]	@ (8012f0c <cleanup_stdio+0x3c>)
 8012ef2:	4299      	cmp	r1, r3
 8012ef4:	d004      	beq.n	8012f00 <cleanup_stdio+0x30>
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012efc:	f002 bb10 	b.w	8015520 <_fflush_r>
 8012f00:	bd10      	pop	{r4, pc}
 8012f02:	bf00      	nop
 8012f04:	200136ec 	.word	0x200136ec
 8012f08:	20013754 	.word	0x20013754
 8012f0c:	200137bc 	.word	0x200137bc

08012f10 <global_stdio_init.part.0>:
 8012f10:	b510      	push	{r4, lr}
 8012f12:	4b0b      	ldr	r3, [pc, #44]	@ (8012f40 <global_stdio_init.part.0+0x30>)
 8012f14:	4c0b      	ldr	r4, [pc, #44]	@ (8012f44 <global_stdio_init.part.0+0x34>)
 8012f16:	4a0c      	ldr	r2, [pc, #48]	@ (8012f48 <global_stdio_init.part.0+0x38>)
 8012f18:	601a      	str	r2, [r3, #0]
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	2104      	movs	r1, #4
 8012f20:	f7ff ff94 	bl	8012e4c <std>
 8012f24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012f28:	2201      	movs	r2, #1
 8012f2a:	2109      	movs	r1, #9
 8012f2c:	f7ff ff8e 	bl	8012e4c <std>
 8012f30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012f34:	2202      	movs	r2, #2
 8012f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f3a:	2112      	movs	r1, #18
 8012f3c:	f7ff bf86 	b.w	8012e4c <std>
 8012f40:	20013824 	.word	0x20013824
 8012f44:	200136ec 	.word	0x200136ec
 8012f48:	08012eb9 	.word	0x08012eb9

08012f4c <__sfp_lock_acquire>:
 8012f4c:	4801      	ldr	r0, [pc, #4]	@ (8012f54 <__sfp_lock_acquire+0x8>)
 8012f4e:	f000 ba24 	b.w	801339a <__retarget_lock_acquire_recursive>
 8012f52:	bf00      	nop
 8012f54:	2001382d 	.word	0x2001382d

08012f58 <__sfp_lock_release>:
 8012f58:	4801      	ldr	r0, [pc, #4]	@ (8012f60 <__sfp_lock_release+0x8>)
 8012f5a:	f000 ba1f 	b.w	801339c <__retarget_lock_release_recursive>
 8012f5e:	bf00      	nop
 8012f60:	2001382d 	.word	0x2001382d

08012f64 <__sinit>:
 8012f64:	b510      	push	{r4, lr}
 8012f66:	4604      	mov	r4, r0
 8012f68:	f7ff fff0 	bl	8012f4c <__sfp_lock_acquire>
 8012f6c:	6a23      	ldr	r3, [r4, #32]
 8012f6e:	b11b      	cbz	r3, 8012f78 <__sinit+0x14>
 8012f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f74:	f7ff bff0 	b.w	8012f58 <__sfp_lock_release>
 8012f78:	4b04      	ldr	r3, [pc, #16]	@ (8012f8c <__sinit+0x28>)
 8012f7a:	6223      	str	r3, [r4, #32]
 8012f7c:	4b04      	ldr	r3, [pc, #16]	@ (8012f90 <__sinit+0x2c>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d1f5      	bne.n	8012f70 <__sinit+0xc>
 8012f84:	f7ff ffc4 	bl	8012f10 <global_stdio_init.part.0>
 8012f88:	e7f2      	b.n	8012f70 <__sinit+0xc>
 8012f8a:	bf00      	nop
 8012f8c:	08012ed1 	.word	0x08012ed1
 8012f90:	20013824 	.word	0x20013824

08012f94 <_fwalk_sglue>:
 8012f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f98:	4607      	mov	r7, r0
 8012f9a:	4688      	mov	r8, r1
 8012f9c:	4614      	mov	r4, r2
 8012f9e:	2600      	movs	r6, #0
 8012fa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fa4:	f1b9 0901 	subs.w	r9, r9, #1
 8012fa8:	d505      	bpl.n	8012fb6 <_fwalk_sglue+0x22>
 8012faa:	6824      	ldr	r4, [r4, #0]
 8012fac:	2c00      	cmp	r4, #0
 8012fae:	d1f7      	bne.n	8012fa0 <_fwalk_sglue+0xc>
 8012fb0:	4630      	mov	r0, r6
 8012fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fb6:	89ab      	ldrh	r3, [r5, #12]
 8012fb8:	2b01      	cmp	r3, #1
 8012fba:	d907      	bls.n	8012fcc <_fwalk_sglue+0x38>
 8012fbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	d003      	beq.n	8012fcc <_fwalk_sglue+0x38>
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	4638      	mov	r0, r7
 8012fc8:	47c0      	blx	r8
 8012fca:	4306      	orrs	r6, r0
 8012fcc:	3568      	adds	r5, #104	@ 0x68
 8012fce:	e7e9      	b.n	8012fa4 <_fwalk_sglue+0x10>

08012fd0 <siprintf>:
 8012fd0:	b40e      	push	{r1, r2, r3}
 8012fd2:	b510      	push	{r4, lr}
 8012fd4:	b09d      	sub	sp, #116	@ 0x74
 8012fd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012fd8:	9002      	str	r0, [sp, #8]
 8012fda:	9006      	str	r0, [sp, #24]
 8012fdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012fe0:	480a      	ldr	r0, [pc, #40]	@ (801300c <siprintf+0x3c>)
 8012fe2:	9107      	str	r1, [sp, #28]
 8012fe4:	9104      	str	r1, [sp, #16]
 8012fe6:	490a      	ldr	r1, [pc, #40]	@ (8013010 <siprintf+0x40>)
 8012fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fec:	9105      	str	r1, [sp, #20]
 8012fee:	2400      	movs	r4, #0
 8012ff0:	a902      	add	r1, sp, #8
 8012ff2:	6800      	ldr	r0, [r0, #0]
 8012ff4:	9301      	str	r3, [sp, #4]
 8012ff6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012ff8:	f002 f912 	bl	8015220 <_svfiprintf_r>
 8012ffc:	9b02      	ldr	r3, [sp, #8]
 8012ffe:	701c      	strb	r4, [r3, #0]
 8013000:	b01d      	add	sp, #116	@ 0x74
 8013002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013006:	b003      	add	sp, #12
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop
 801300c:	2000040c 	.word	0x2000040c
 8013010:	ffff0208 	.word	0xffff0208

08013014 <__sread>:
 8013014:	b510      	push	{r4, lr}
 8013016:	460c      	mov	r4, r1
 8013018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801301c:	f000 f95e 	bl	80132dc <_read_r>
 8013020:	2800      	cmp	r0, #0
 8013022:	bfab      	itete	ge
 8013024:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013026:	89a3      	ldrhlt	r3, [r4, #12]
 8013028:	181b      	addge	r3, r3, r0
 801302a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801302e:	bfac      	ite	ge
 8013030:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013032:	81a3      	strhlt	r3, [r4, #12]
 8013034:	bd10      	pop	{r4, pc}

08013036 <__swrite>:
 8013036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303a:	461f      	mov	r7, r3
 801303c:	898b      	ldrh	r3, [r1, #12]
 801303e:	05db      	lsls	r3, r3, #23
 8013040:	4605      	mov	r5, r0
 8013042:	460c      	mov	r4, r1
 8013044:	4616      	mov	r6, r2
 8013046:	d505      	bpl.n	8013054 <__swrite+0x1e>
 8013048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801304c:	2302      	movs	r3, #2
 801304e:	2200      	movs	r2, #0
 8013050:	f000 f932 	bl	80132b8 <_lseek_r>
 8013054:	89a3      	ldrh	r3, [r4, #12]
 8013056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801305a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801305e:	81a3      	strh	r3, [r4, #12]
 8013060:	4632      	mov	r2, r6
 8013062:	463b      	mov	r3, r7
 8013064:	4628      	mov	r0, r5
 8013066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801306a:	f000 b959 	b.w	8013320 <_write_r>

0801306e <__sseek>:
 801306e:	b510      	push	{r4, lr}
 8013070:	460c      	mov	r4, r1
 8013072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013076:	f000 f91f 	bl	80132b8 <_lseek_r>
 801307a:	1c43      	adds	r3, r0, #1
 801307c:	89a3      	ldrh	r3, [r4, #12]
 801307e:	bf15      	itete	ne
 8013080:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013082:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013086:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801308a:	81a3      	strheq	r3, [r4, #12]
 801308c:	bf18      	it	ne
 801308e:	81a3      	strhne	r3, [r4, #12]
 8013090:	bd10      	pop	{r4, pc}

08013092 <__sclose>:
 8013092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013096:	f000 b8a1 	b.w	80131dc <_close_r>

0801309a <memmove>:
 801309a:	4288      	cmp	r0, r1
 801309c:	b510      	push	{r4, lr}
 801309e:	eb01 0402 	add.w	r4, r1, r2
 80130a2:	d902      	bls.n	80130aa <memmove+0x10>
 80130a4:	4284      	cmp	r4, r0
 80130a6:	4623      	mov	r3, r4
 80130a8:	d807      	bhi.n	80130ba <memmove+0x20>
 80130aa:	1e43      	subs	r3, r0, #1
 80130ac:	42a1      	cmp	r1, r4
 80130ae:	d008      	beq.n	80130c2 <memmove+0x28>
 80130b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80130b8:	e7f8      	b.n	80130ac <memmove+0x12>
 80130ba:	4402      	add	r2, r0
 80130bc:	4601      	mov	r1, r0
 80130be:	428a      	cmp	r2, r1
 80130c0:	d100      	bne.n	80130c4 <memmove+0x2a>
 80130c2:	bd10      	pop	{r4, pc}
 80130c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80130c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80130cc:	e7f7      	b.n	80130be <memmove+0x24>

080130ce <memset>:
 80130ce:	4402      	add	r2, r0
 80130d0:	4603      	mov	r3, r0
 80130d2:	4293      	cmp	r3, r2
 80130d4:	d100      	bne.n	80130d8 <memset+0xa>
 80130d6:	4770      	bx	lr
 80130d8:	f803 1b01 	strb.w	r1, [r3], #1
 80130dc:	e7f9      	b.n	80130d2 <memset+0x4>

080130de <strchr>:
 80130de:	b2c9      	uxtb	r1, r1
 80130e0:	4603      	mov	r3, r0
 80130e2:	4618      	mov	r0, r3
 80130e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130e8:	b112      	cbz	r2, 80130f0 <strchr+0x12>
 80130ea:	428a      	cmp	r2, r1
 80130ec:	d1f9      	bne.n	80130e2 <strchr+0x4>
 80130ee:	4770      	bx	lr
 80130f0:	2900      	cmp	r1, #0
 80130f2:	bf18      	it	ne
 80130f4:	2000      	movne	r0, #0
 80130f6:	4770      	bx	lr

080130f8 <strncmp>:
 80130f8:	b510      	push	{r4, lr}
 80130fa:	b16a      	cbz	r2, 8013118 <strncmp+0x20>
 80130fc:	3901      	subs	r1, #1
 80130fe:	1884      	adds	r4, r0, r2
 8013100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013104:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013108:	429a      	cmp	r2, r3
 801310a:	d103      	bne.n	8013114 <strncmp+0x1c>
 801310c:	42a0      	cmp	r0, r4
 801310e:	d001      	beq.n	8013114 <strncmp+0x1c>
 8013110:	2a00      	cmp	r2, #0
 8013112:	d1f5      	bne.n	8013100 <strncmp+0x8>
 8013114:	1ad0      	subs	r0, r2, r3
 8013116:	bd10      	pop	{r4, pc}
 8013118:	4610      	mov	r0, r2
 801311a:	e7fc      	b.n	8013116 <strncmp+0x1e>

0801311c <strtok>:
 801311c:	4b16      	ldr	r3, [pc, #88]	@ (8013178 <strtok+0x5c>)
 801311e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013122:	681f      	ldr	r7, [r3, #0]
 8013124:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8013126:	4605      	mov	r5, r0
 8013128:	460e      	mov	r6, r1
 801312a:	b9ec      	cbnz	r4, 8013168 <strtok+0x4c>
 801312c:	2050      	movs	r0, #80	@ 0x50
 801312e:	f7fe fae7 	bl	8011700 <malloc>
 8013132:	4602      	mov	r2, r0
 8013134:	6478      	str	r0, [r7, #68]	@ 0x44
 8013136:	b920      	cbnz	r0, 8013142 <strtok+0x26>
 8013138:	4b10      	ldr	r3, [pc, #64]	@ (801317c <strtok+0x60>)
 801313a:	4811      	ldr	r0, [pc, #68]	@ (8013180 <strtok+0x64>)
 801313c:	215b      	movs	r1, #91	@ 0x5b
 801313e:	f000 f94f 	bl	80133e0 <__assert_func>
 8013142:	e9c0 4400 	strd	r4, r4, [r0]
 8013146:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801314a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801314e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8013152:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8013156:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801315a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801315e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8013162:	6184      	str	r4, [r0, #24]
 8013164:	7704      	strb	r4, [r0, #28]
 8013166:	6244      	str	r4, [r0, #36]	@ 0x24
 8013168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801316a:	4631      	mov	r1, r6
 801316c:	4628      	mov	r0, r5
 801316e:	2301      	movs	r3, #1
 8013170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013174:	f000 b806 	b.w	8013184 <__strtok_r>
 8013178:	2000040c 	.word	0x2000040c
 801317c:	080166ba 	.word	0x080166ba
 8013180:	080166d1 	.word	0x080166d1

08013184 <__strtok_r>:
 8013184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013186:	4604      	mov	r4, r0
 8013188:	b908      	cbnz	r0, 801318e <__strtok_r+0xa>
 801318a:	6814      	ldr	r4, [r2, #0]
 801318c:	b144      	cbz	r4, 80131a0 <__strtok_r+0x1c>
 801318e:	4620      	mov	r0, r4
 8013190:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013194:	460f      	mov	r7, r1
 8013196:	f817 6b01 	ldrb.w	r6, [r7], #1
 801319a:	b91e      	cbnz	r6, 80131a4 <__strtok_r+0x20>
 801319c:	b965      	cbnz	r5, 80131b8 <__strtok_r+0x34>
 801319e:	6015      	str	r5, [r2, #0]
 80131a0:	2000      	movs	r0, #0
 80131a2:	e005      	b.n	80131b0 <__strtok_r+0x2c>
 80131a4:	42b5      	cmp	r5, r6
 80131a6:	d1f6      	bne.n	8013196 <__strtok_r+0x12>
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d1f0      	bne.n	801318e <__strtok_r+0xa>
 80131ac:	6014      	str	r4, [r2, #0]
 80131ae:	7003      	strb	r3, [r0, #0]
 80131b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131b2:	461c      	mov	r4, r3
 80131b4:	e00c      	b.n	80131d0 <__strtok_r+0x4c>
 80131b6:	b91d      	cbnz	r5, 80131c0 <__strtok_r+0x3c>
 80131b8:	4627      	mov	r7, r4
 80131ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80131be:	460e      	mov	r6, r1
 80131c0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80131c4:	42ab      	cmp	r3, r5
 80131c6:	d1f6      	bne.n	80131b6 <__strtok_r+0x32>
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d0f2      	beq.n	80131b2 <__strtok_r+0x2e>
 80131cc:	2300      	movs	r3, #0
 80131ce:	703b      	strb	r3, [r7, #0]
 80131d0:	6014      	str	r4, [r2, #0]
 80131d2:	e7ed      	b.n	80131b0 <__strtok_r+0x2c>

080131d4 <_localeconv_r>:
 80131d4:	4800      	ldr	r0, [pc, #0]	@ (80131d8 <_localeconv_r+0x4>)
 80131d6:	4770      	bx	lr
 80131d8:	20000390 	.word	0x20000390

080131dc <_close_r>:
 80131dc:	b538      	push	{r3, r4, r5, lr}
 80131de:	4d06      	ldr	r5, [pc, #24]	@ (80131f8 <_close_r+0x1c>)
 80131e0:	2300      	movs	r3, #0
 80131e2:	4604      	mov	r4, r0
 80131e4:	4608      	mov	r0, r1
 80131e6:	602b      	str	r3, [r5, #0]
 80131e8:	f7f0 fbd8 	bl	800399c <_close>
 80131ec:	1c43      	adds	r3, r0, #1
 80131ee:	d102      	bne.n	80131f6 <_close_r+0x1a>
 80131f0:	682b      	ldr	r3, [r5, #0]
 80131f2:	b103      	cbz	r3, 80131f6 <_close_r+0x1a>
 80131f4:	6023      	str	r3, [r4, #0]
 80131f6:	bd38      	pop	{r3, r4, r5, pc}
 80131f8:	20013828 	.word	0x20013828

080131fc <_reclaim_reent>:
 80131fc:	4b2d      	ldr	r3, [pc, #180]	@ (80132b4 <_reclaim_reent+0xb8>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	4283      	cmp	r3, r0
 8013202:	b570      	push	{r4, r5, r6, lr}
 8013204:	4604      	mov	r4, r0
 8013206:	d053      	beq.n	80132b0 <_reclaim_reent+0xb4>
 8013208:	69c3      	ldr	r3, [r0, #28]
 801320a:	b31b      	cbz	r3, 8013254 <_reclaim_reent+0x58>
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	b163      	cbz	r3, 801322a <_reclaim_reent+0x2e>
 8013210:	2500      	movs	r5, #0
 8013212:	69e3      	ldr	r3, [r4, #28]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	5959      	ldr	r1, [r3, r5]
 8013218:	b9b1      	cbnz	r1, 8013248 <_reclaim_reent+0x4c>
 801321a:	3504      	adds	r5, #4
 801321c:	2d80      	cmp	r5, #128	@ 0x80
 801321e:	d1f8      	bne.n	8013212 <_reclaim_reent+0x16>
 8013220:	69e3      	ldr	r3, [r4, #28]
 8013222:	4620      	mov	r0, r4
 8013224:	68d9      	ldr	r1, [r3, #12]
 8013226:	f000 ff53 	bl	80140d0 <_free_r>
 801322a:	69e3      	ldr	r3, [r4, #28]
 801322c:	6819      	ldr	r1, [r3, #0]
 801322e:	b111      	cbz	r1, 8013236 <_reclaim_reent+0x3a>
 8013230:	4620      	mov	r0, r4
 8013232:	f000 ff4d 	bl	80140d0 <_free_r>
 8013236:	69e3      	ldr	r3, [r4, #28]
 8013238:	689d      	ldr	r5, [r3, #8]
 801323a:	b15d      	cbz	r5, 8013254 <_reclaim_reent+0x58>
 801323c:	4629      	mov	r1, r5
 801323e:	4620      	mov	r0, r4
 8013240:	682d      	ldr	r5, [r5, #0]
 8013242:	f000 ff45 	bl	80140d0 <_free_r>
 8013246:	e7f8      	b.n	801323a <_reclaim_reent+0x3e>
 8013248:	680e      	ldr	r6, [r1, #0]
 801324a:	4620      	mov	r0, r4
 801324c:	f000 ff40 	bl	80140d0 <_free_r>
 8013250:	4631      	mov	r1, r6
 8013252:	e7e1      	b.n	8013218 <_reclaim_reent+0x1c>
 8013254:	6961      	ldr	r1, [r4, #20]
 8013256:	b111      	cbz	r1, 801325e <_reclaim_reent+0x62>
 8013258:	4620      	mov	r0, r4
 801325a:	f000 ff39 	bl	80140d0 <_free_r>
 801325e:	69e1      	ldr	r1, [r4, #28]
 8013260:	b111      	cbz	r1, 8013268 <_reclaim_reent+0x6c>
 8013262:	4620      	mov	r0, r4
 8013264:	f000 ff34 	bl	80140d0 <_free_r>
 8013268:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801326a:	b111      	cbz	r1, 8013272 <_reclaim_reent+0x76>
 801326c:	4620      	mov	r0, r4
 801326e:	f000 ff2f 	bl	80140d0 <_free_r>
 8013272:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013274:	b111      	cbz	r1, 801327c <_reclaim_reent+0x80>
 8013276:	4620      	mov	r0, r4
 8013278:	f000 ff2a 	bl	80140d0 <_free_r>
 801327c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801327e:	b111      	cbz	r1, 8013286 <_reclaim_reent+0x8a>
 8013280:	4620      	mov	r0, r4
 8013282:	f000 ff25 	bl	80140d0 <_free_r>
 8013286:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013288:	b111      	cbz	r1, 8013290 <_reclaim_reent+0x94>
 801328a:	4620      	mov	r0, r4
 801328c:	f000 ff20 	bl	80140d0 <_free_r>
 8013290:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013292:	b111      	cbz	r1, 801329a <_reclaim_reent+0x9e>
 8013294:	4620      	mov	r0, r4
 8013296:	f000 ff1b 	bl	80140d0 <_free_r>
 801329a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801329c:	b111      	cbz	r1, 80132a4 <_reclaim_reent+0xa8>
 801329e:	4620      	mov	r0, r4
 80132a0:	f000 ff16 	bl	80140d0 <_free_r>
 80132a4:	6a23      	ldr	r3, [r4, #32]
 80132a6:	b11b      	cbz	r3, 80132b0 <_reclaim_reent+0xb4>
 80132a8:	4620      	mov	r0, r4
 80132aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ae:	4718      	bx	r3
 80132b0:	bd70      	pop	{r4, r5, r6, pc}
 80132b2:	bf00      	nop
 80132b4:	2000040c 	.word	0x2000040c

080132b8 <_lseek_r>:
 80132b8:	b538      	push	{r3, r4, r5, lr}
 80132ba:	4d07      	ldr	r5, [pc, #28]	@ (80132d8 <_lseek_r+0x20>)
 80132bc:	4604      	mov	r4, r0
 80132be:	4608      	mov	r0, r1
 80132c0:	4611      	mov	r1, r2
 80132c2:	2200      	movs	r2, #0
 80132c4:	602a      	str	r2, [r5, #0]
 80132c6:	461a      	mov	r2, r3
 80132c8:	f7f0 fb8f 	bl	80039ea <_lseek>
 80132cc:	1c43      	adds	r3, r0, #1
 80132ce:	d102      	bne.n	80132d6 <_lseek_r+0x1e>
 80132d0:	682b      	ldr	r3, [r5, #0]
 80132d2:	b103      	cbz	r3, 80132d6 <_lseek_r+0x1e>
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	bd38      	pop	{r3, r4, r5, pc}
 80132d8:	20013828 	.word	0x20013828

080132dc <_read_r>:
 80132dc:	b538      	push	{r3, r4, r5, lr}
 80132de:	4d07      	ldr	r5, [pc, #28]	@ (80132fc <_read_r+0x20>)
 80132e0:	4604      	mov	r4, r0
 80132e2:	4608      	mov	r0, r1
 80132e4:	4611      	mov	r1, r2
 80132e6:	2200      	movs	r2, #0
 80132e8:	602a      	str	r2, [r5, #0]
 80132ea:	461a      	mov	r2, r3
 80132ec:	f7f0 fb1d 	bl	800392a <_read>
 80132f0:	1c43      	adds	r3, r0, #1
 80132f2:	d102      	bne.n	80132fa <_read_r+0x1e>
 80132f4:	682b      	ldr	r3, [r5, #0]
 80132f6:	b103      	cbz	r3, 80132fa <_read_r+0x1e>
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	bd38      	pop	{r3, r4, r5, pc}
 80132fc:	20013828 	.word	0x20013828

08013300 <_sbrk_r>:
 8013300:	b538      	push	{r3, r4, r5, lr}
 8013302:	4d06      	ldr	r5, [pc, #24]	@ (801331c <_sbrk_r+0x1c>)
 8013304:	2300      	movs	r3, #0
 8013306:	4604      	mov	r4, r0
 8013308:	4608      	mov	r0, r1
 801330a:	602b      	str	r3, [r5, #0]
 801330c:	f7f0 fb7a 	bl	8003a04 <_sbrk>
 8013310:	1c43      	adds	r3, r0, #1
 8013312:	d102      	bne.n	801331a <_sbrk_r+0x1a>
 8013314:	682b      	ldr	r3, [r5, #0]
 8013316:	b103      	cbz	r3, 801331a <_sbrk_r+0x1a>
 8013318:	6023      	str	r3, [r4, #0]
 801331a:	bd38      	pop	{r3, r4, r5, pc}
 801331c:	20013828 	.word	0x20013828

08013320 <_write_r>:
 8013320:	b538      	push	{r3, r4, r5, lr}
 8013322:	4d07      	ldr	r5, [pc, #28]	@ (8013340 <_write_r+0x20>)
 8013324:	4604      	mov	r4, r0
 8013326:	4608      	mov	r0, r1
 8013328:	4611      	mov	r1, r2
 801332a:	2200      	movs	r2, #0
 801332c:	602a      	str	r2, [r5, #0]
 801332e:	461a      	mov	r2, r3
 8013330:	f7f0 fb18 	bl	8003964 <_write>
 8013334:	1c43      	adds	r3, r0, #1
 8013336:	d102      	bne.n	801333e <_write_r+0x1e>
 8013338:	682b      	ldr	r3, [r5, #0]
 801333a:	b103      	cbz	r3, 801333e <_write_r+0x1e>
 801333c:	6023      	str	r3, [r4, #0]
 801333e:	bd38      	pop	{r3, r4, r5, pc}
 8013340:	20013828 	.word	0x20013828

08013344 <__errno>:
 8013344:	4b01      	ldr	r3, [pc, #4]	@ (801334c <__errno+0x8>)
 8013346:	6818      	ldr	r0, [r3, #0]
 8013348:	4770      	bx	lr
 801334a:	bf00      	nop
 801334c:	2000040c 	.word	0x2000040c

08013350 <__libc_init_array>:
 8013350:	b570      	push	{r4, r5, r6, lr}
 8013352:	4d0d      	ldr	r5, [pc, #52]	@ (8013388 <__libc_init_array+0x38>)
 8013354:	4c0d      	ldr	r4, [pc, #52]	@ (801338c <__libc_init_array+0x3c>)
 8013356:	1b64      	subs	r4, r4, r5
 8013358:	10a4      	asrs	r4, r4, #2
 801335a:	2600      	movs	r6, #0
 801335c:	42a6      	cmp	r6, r4
 801335e:	d109      	bne.n	8013374 <__libc_init_array+0x24>
 8013360:	4d0b      	ldr	r5, [pc, #44]	@ (8013390 <__libc_init_array+0x40>)
 8013362:	4c0c      	ldr	r4, [pc, #48]	@ (8013394 <__libc_init_array+0x44>)
 8013364:	f002 fc04 	bl	8015b70 <_init>
 8013368:	1b64      	subs	r4, r4, r5
 801336a:	10a4      	asrs	r4, r4, #2
 801336c:	2600      	movs	r6, #0
 801336e:	42a6      	cmp	r6, r4
 8013370:	d105      	bne.n	801337e <__libc_init_array+0x2e>
 8013372:	bd70      	pop	{r4, r5, r6, pc}
 8013374:	f855 3b04 	ldr.w	r3, [r5], #4
 8013378:	4798      	blx	r3
 801337a:	3601      	adds	r6, #1
 801337c:	e7ee      	b.n	801335c <__libc_init_array+0xc>
 801337e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013382:	4798      	blx	r3
 8013384:	3601      	adds	r6, #1
 8013386:	e7f2      	b.n	801336e <__libc_init_array+0x1e>
 8013388:	08016b08 	.word	0x08016b08
 801338c:	08016b08 	.word	0x08016b08
 8013390:	08016b08 	.word	0x08016b08
 8013394:	08016b0c 	.word	0x08016b0c

08013398 <__retarget_lock_init_recursive>:
 8013398:	4770      	bx	lr

0801339a <__retarget_lock_acquire_recursive>:
 801339a:	4770      	bx	lr

0801339c <__retarget_lock_release_recursive>:
 801339c:	4770      	bx	lr

0801339e <strcpy>:
 801339e:	4603      	mov	r3, r0
 80133a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133a4:	f803 2b01 	strb.w	r2, [r3], #1
 80133a8:	2a00      	cmp	r2, #0
 80133aa:	d1f9      	bne.n	80133a0 <strcpy+0x2>
 80133ac:	4770      	bx	lr

080133ae <memcpy>:
 80133ae:	440a      	add	r2, r1
 80133b0:	4291      	cmp	r1, r2
 80133b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80133b6:	d100      	bne.n	80133ba <memcpy+0xc>
 80133b8:	4770      	bx	lr
 80133ba:	b510      	push	{r4, lr}
 80133bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133c4:	4291      	cmp	r1, r2
 80133c6:	d1f9      	bne.n	80133bc <memcpy+0xe>
 80133c8:	bd10      	pop	{r4, pc}
 80133ca:	0000      	movs	r0, r0
 80133cc:	0000      	movs	r0, r0
	...

080133d0 <nan>:
 80133d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80133d8 <nan+0x8>
 80133d4:	4770      	bx	lr
 80133d6:	bf00      	nop
 80133d8:	00000000 	.word	0x00000000
 80133dc:	7ff80000 	.word	0x7ff80000

080133e0 <__assert_func>:
 80133e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80133e2:	4614      	mov	r4, r2
 80133e4:	461a      	mov	r2, r3
 80133e6:	4b09      	ldr	r3, [pc, #36]	@ (801340c <__assert_func+0x2c>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	4605      	mov	r5, r0
 80133ec:	68d8      	ldr	r0, [r3, #12]
 80133ee:	b14c      	cbz	r4, 8013404 <__assert_func+0x24>
 80133f0:	4b07      	ldr	r3, [pc, #28]	@ (8013410 <__assert_func+0x30>)
 80133f2:	9100      	str	r1, [sp, #0]
 80133f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133f8:	4906      	ldr	r1, [pc, #24]	@ (8013414 <__assert_func+0x34>)
 80133fa:	462b      	mov	r3, r5
 80133fc:	f002 f8b8 	bl	8015570 <fiprintf>
 8013400:	f002 f8c8 	bl	8015594 <abort>
 8013404:	4b04      	ldr	r3, [pc, #16]	@ (8013418 <__assert_func+0x38>)
 8013406:	461c      	mov	r4, r3
 8013408:	e7f3      	b.n	80133f2 <__assert_func+0x12>
 801340a:	bf00      	nop
 801340c:	2000040c 	.word	0x2000040c
 8013410:	08016733 	.word	0x08016733
 8013414:	08016740 	.word	0x08016740
 8013418:	0801676e 	.word	0x0801676e

0801341c <quorem>:
 801341c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	6903      	ldr	r3, [r0, #16]
 8013422:	690c      	ldr	r4, [r1, #16]
 8013424:	42a3      	cmp	r3, r4
 8013426:	4607      	mov	r7, r0
 8013428:	db7e      	blt.n	8013528 <quorem+0x10c>
 801342a:	3c01      	subs	r4, #1
 801342c:	f101 0814 	add.w	r8, r1, #20
 8013430:	00a3      	lsls	r3, r4, #2
 8013432:	f100 0514 	add.w	r5, r0, #20
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801343c:	9301      	str	r3, [sp, #4]
 801343e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013442:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013446:	3301      	adds	r3, #1
 8013448:	429a      	cmp	r2, r3
 801344a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801344e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013452:	d32e      	bcc.n	80134b2 <quorem+0x96>
 8013454:	f04f 0a00 	mov.w	sl, #0
 8013458:	46c4      	mov	ip, r8
 801345a:	46ae      	mov	lr, r5
 801345c:	46d3      	mov	fp, sl
 801345e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013462:	b298      	uxth	r0, r3
 8013464:	fb06 a000 	mla	r0, r6, r0, sl
 8013468:	0c02      	lsrs	r2, r0, #16
 801346a:	0c1b      	lsrs	r3, r3, #16
 801346c:	fb06 2303 	mla	r3, r6, r3, r2
 8013470:	f8de 2000 	ldr.w	r2, [lr]
 8013474:	b280      	uxth	r0, r0
 8013476:	b292      	uxth	r2, r2
 8013478:	1a12      	subs	r2, r2, r0
 801347a:	445a      	add	r2, fp
 801347c:	f8de 0000 	ldr.w	r0, [lr]
 8013480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013484:	b29b      	uxth	r3, r3
 8013486:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801348a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801348e:	b292      	uxth	r2, r2
 8013490:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013494:	45e1      	cmp	r9, ip
 8013496:	f84e 2b04 	str.w	r2, [lr], #4
 801349a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801349e:	d2de      	bcs.n	801345e <quorem+0x42>
 80134a0:	9b00      	ldr	r3, [sp, #0]
 80134a2:	58eb      	ldr	r3, [r5, r3]
 80134a4:	b92b      	cbnz	r3, 80134b2 <quorem+0x96>
 80134a6:	9b01      	ldr	r3, [sp, #4]
 80134a8:	3b04      	subs	r3, #4
 80134aa:	429d      	cmp	r5, r3
 80134ac:	461a      	mov	r2, r3
 80134ae:	d32f      	bcc.n	8013510 <quorem+0xf4>
 80134b0:	613c      	str	r4, [r7, #16]
 80134b2:	4638      	mov	r0, r7
 80134b4:	f001 fc5e 	bl	8014d74 <__mcmp>
 80134b8:	2800      	cmp	r0, #0
 80134ba:	db25      	blt.n	8013508 <quorem+0xec>
 80134bc:	4629      	mov	r1, r5
 80134be:	2000      	movs	r0, #0
 80134c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80134c4:	f8d1 c000 	ldr.w	ip, [r1]
 80134c8:	fa1f fe82 	uxth.w	lr, r2
 80134cc:	fa1f f38c 	uxth.w	r3, ip
 80134d0:	eba3 030e 	sub.w	r3, r3, lr
 80134d4:	4403      	add	r3, r0
 80134d6:	0c12      	lsrs	r2, r2, #16
 80134d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80134dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134e6:	45c1      	cmp	r9, r8
 80134e8:	f841 3b04 	str.w	r3, [r1], #4
 80134ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80134f0:	d2e6      	bcs.n	80134c0 <quorem+0xa4>
 80134f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80134f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80134fa:	b922      	cbnz	r2, 8013506 <quorem+0xea>
 80134fc:	3b04      	subs	r3, #4
 80134fe:	429d      	cmp	r5, r3
 8013500:	461a      	mov	r2, r3
 8013502:	d30b      	bcc.n	801351c <quorem+0x100>
 8013504:	613c      	str	r4, [r7, #16]
 8013506:	3601      	adds	r6, #1
 8013508:	4630      	mov	r0, r6
 801350a:	b003      	add	sp, #12
 801350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013510:	6812      	ldr	r2, [r2, #0]
 8013512:	3b04      	subs	r3, #4
 8013514:	2a00      	cmp	r2, #0
 8013516:	d1cb      	bne.n	80134b0 <quorem+0x94>
 8013518:	3c01      	subs	r4, #1
 801351a:	e7c6      	b.n	80134aa <quorem+0x8e>
 801351c:	6812      	ldr	r2, [r2, #0]
 801351e:	3b04      	subs	r3, #4
 8013520:	2a00      	cmp	r2, #0
 8013522:	d1ef      	bne.n	8013504 <quorem+0xe8>
 8013524:	3c01      	subs	r4, #1
 8013526:	e7ea      	b.n	80134fe <quorem+0xe2>
 8013528:	2000      	movs	r0, #0
 801352a:	e7ee      	b.n	801350a <quorem+0xee>
 801352c:	0000      	movs	r0, r0
	...

08013530 <_dtoa_r>:
 8013530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013534:	69c7      	ldr	r7, [r0, #28]
 8013536:	b097      	sub	sp, #92	@ 0x5c
 8013538:	ed8d 0b04 	vstr	d0, [sp, #16]
 801353c:	ec55 4b10 	vmov	r4, r5, d0
 8013540:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8013542:	9107      	str	r1, [sp, #28]
 8013544:	4681      	mov	r9, r0
 8013546:	920c      	str	r2, [sp, #48]	@ 0x30
 8013548:	9311      	str	r3, [sp, #68]	@ 0x44
 801354a:	b97f      	cbnz	r7, 801356c <_dtoa_r+0x3c>
 801354c:	2010      	movs	r0, #16
 801354e:	f7fe f8d7 	bl	8011700 <malloc>
 8013552:	4602      	mov	r2, r0
 8013554:	f8c9 001c 	str.w	r0, [r9, #28]
 8013558:	b920      	cbnz	r0, 8013564 <_dtoa_r+0x34>
 801355a:	4ba9      	ldr	r3, [pc, #676]	@ (8013800 <_dtoa_r+0x2d0>)
 801355c:	21ef      	movs	r1, #239	@ 0xef
 801355e:	48a9      	ldr	r0, [pc, #676]	@ (8013804 <_dtoa_r+0x2d4>)
 8013560:	f7ff ff3e 	bl	80133e0 <__assert_func>
 8013564:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013568:	6007      	str	r7, [r0, #0]
 801356a:	60c7      	str	r7, [r0, #12]
 801356c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013570:	6819      	ldr	r1, [r3, #0]
 8013572:	b159      	cbz	r1, 801358c <_dtoa_r+0x5c>
 8013574:	685a      	ldr	r2, [r3, #4]
 8013576:	604a      	str	r2, [r1, #4]
 8013578:	2301      	movs	r3, #1
 801357a:	4093      	lsls	r3, r2
 801357c:	608b      	str	r3, [r1, #8]
 801357e:	4648      	mov	r0, r9
 8013580:	f001 f97c 	bl	801487c <_Bfree>
 8013584:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013588:	2200      	movs	r2, #0
 801358a:	601a      	str	r2, [r3, #0]
 801358c:	1e2b      	subs	r3, r5, #0
 801358e:	bfb9      	ittee	lt
 8013590:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013594:	9305      	strlt	r3, [sp, #20]
 8013596:	2300      	movge	r3, #0
 8013598:	6033      	strge	r3, [r6, #0]
 801359a:	9f05      	ldr	r7, [sp, #20]
 801359c:	4b9a      	ldr	r3, [pc, #616]	@ (8013808 <_dtoa_r+0x2d8>)
 801359e:	bfbc      	itt	lt
 80135a0:	2201      	movlt	r2, #1
 80135a2:	6032      	strlt	r2, [r6, #0]
 80135a4:	43bb      	bics	r3, r7
 80135a6:	d112      	bne.n	80135ce <_dtoa_r+0x9e>
 80135a8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80135aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80135ae:	6013      	str	r3, [r2, #0]
 80135b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80135b4:	4323      	orrs	r3, r4
 80135b6:	f000 855a 	beq.w	801406e <_dtoa_r+0xb3e>
 80135ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80135bc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801381c <_dtoa_r+0x2ec>
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f000 855c 	beq.w	801407e <_dtoa_r+0xb4e>
 80135c6:	f10a 0303 	add.w	r3, sl, #3
 80135ca:	f000 bd56 	b.w	801407a <_dtoa_r+0xb4a>
 80135ce:	ed9d 7b04 	vldr	d7, [sp, #16]
 80135d2:	2200      	movs	r2, #0
 80135d4:	ec51 0b17 	vmov	r0, r1, d7
 80135d8:	2300      	movs	r3, #0
 80135da:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80135de:	f7ed fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 80135e2:	4680      	mov	r8, r0
 80135e4:	b158      	cbz	r0, 80135fe <_dtoa_r+0xce>
 80135e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80135e8:	2301      	movs	r3, #1
 80135ea:	6013      	str	r3, [r2, #0]
 80135ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80135ee:	b113      	cbz	r3, 80135f6 <_dtoa_r+0xc6>
 80135f0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80135f2:	4b86      	ldr	r3, [pc, #536]	@ (801380c <_dtoa_r+0x2dc>)
 80135f4:	6013      	str	r3, [r2, #0]
 80135f6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013820 <_dtoa_r+0x2f0>
 80135fa:	f000 bd40 	b.w	801407e <_dtoa_r+0xb4e>
 80135fe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8013602:	aa14      	add	r2, sp, #80	@ 0x50
 8013604:	a915      	add	r1, sp, #84	@ 0x54
 8013606:	4648      	mov	r0, r9
 8013608:	f001 fcd4 	bl	8014fb4 <__d2b>
 801360c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013610:	9002      	str	r0, [sp, #8]
 8013612:	2e00      	cmp	r6, #0
 8013614:	d078      	beq.n	8013708 <_dtoa_r+0x1d8>
 8013616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013618:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801361c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013624:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013628:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801362c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013630:	4619      	mov	r1, r3
 8013632:	2200      	movs	r2, #0
 8013634:	4b76      	ldr	r3, [pc, #472]	@ (8013810 <_dtoa_r+0x2e0>)
 8013636:	f7ec fe27 	bl	8000288 <__aeabi_dsub>
 801363a:	a36b      	add	r3, pc, #428	@ (adr r3, 80137e8 <_dtoa_r+0x2b8>)
 801363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013640:	f7ec ffda 	bl	80005f8 <__aeabi_dmul>
 8013644:	a36a      	add	r3, pc, #424	@ (adr r3, 80137f0 <_dtoa_r+0x2c0>)
 8013646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801364a:	f7ec fe1f 	bl	800028c <__adddf3>
 801364e:	4604      	mov	r4, r0
 8013650:	4630      	mov	r0, r6
 8013652:	460d      	mov	r5, r1
 8013654:	f7ec ff66 	bl	8000524 <__aeabi_i2d>
 8013658:	a367      	add	r3, pc, #412	@ (adr r3, 80137f8 <_dtoa_r+0x2c8>)
 801365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801365e:	f7ec ffcb 	bl	80005f8 <__aeabi_dmul>
 8013662:	4602      	mov	r2, r0
 8013664:	460b      	mov	r3, r1
 8013666:	4620      	mov	r0, r4
 8013668:	4629      	mov	r1, r5
 801366a:	f7ec fe0f 	bl	800028c <__adddf3>
 801366e:	4604      	mov	r4, r0
 8013670:	460d      	mov	r5, r1
 8013672:	f7ed fa71 	bl	8000b58 <__aeabi_d2iz>
 8013676:	2200      	movs	r2, #0
 8013678:	4607      	mov	r7, r0
 801367a:	2300      	movs	r3, #0
 801367c:	4620      	mov	r0, r4
 801367e:	4629      	mov	r1, r5
 8013680:	f7ed fa2c 	bl	8000adc <__aeabi_dcmplt>
 8013684:	b140      	cbz	r0, 8013698 <_dtoa_r+0x168>
 8013686:	4638      	mov	r0, r7
 8013688:	f7ec ff4c 	bl	8000524 <__aeabi_i2d>
 801368c:	4622      	mov	r2, r4
 801368e:	462b      	mov	r3, r5
 8013690:	f7ed fa1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013694:	b900      	cbnz	r0, 8013698 <_dtoa_r+0x168>
 8013696:	3f01      	subs	r7, #1
 8013698:	2f16      	cmp	r7, #22
 801369a:	d852      	bhi.n	8013742 <_dtoa_r+0x212>
 801369c:	4b5d      	ldr	r3, [pc, #372]	@ (8013814 <_dtoa_r+0x2e4>)
 801369e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80136a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80136aa:	f7ed fa17 	bl	8000adc <__aeabi_dcmplt>
 80136ae:	2800      	cmp	r0, #0
 80136b0:	d049      	beq.n	8013746 <_dtoa_r+0x216>
 80136b2:	3f01      	subs	r7, #1
 80136b4:	2300      	movs	r3, #0
 80136b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80136b8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80136ba:	1b9b      	subs	r3, r3, r6
 80136bc:	1e5a      	subs	r2, r3, #1
 80136be:	bf45      	ittet	mi
 80136c0:	f1c3 0301 	rsbmi	r3, r3, #1
 80136c4:	9300      	strmi	r3, [sp, #0]
 80136c6:	2300      	movpl	r3, #0
 80136c8:	2300      	movmi	r3, #0
 80136ca:	9206      	str	r2, [sp, #24]
 80136cc:	bf54      	ite	pl
 80136ce:	9300      	strpl	r3, [sp, #0]
 80136d0:	9306      	strmi	r3, [sp, #24]
 80136d2:	2f00      	cmp	r7, #0
 80136d4:	db39      	blt.n	801374a <_dtoa_r+0x21a>
 80136d6:	9b06      	ldr	r3, [sp, #24]
 80136d8:	970d      	str	r7, [sp, #52]	@ 0x34
 80136da:	443b      	add	r3, r7
 80136dc:	9306      	str	r3, [sp, #24]
 80136de:	2300      	movs	r3, #0
 80136e0:	9308      	str	r3, [sp, #32]
 80136e2:	9b07      	ldr	r3, [sp, #28]
 80136e4:	2b09      	cmp	r3, #9
 80136e6:	d863      	bhi.n	80137b0 <_dtoa_r+0x280>
 80136e8:	2b05      	cmp	r3, #5
 80136ea:	bfc4      	itt	gt
 80136ec:	3b04      	subgt	r3, #4
 80136ee:	9307      	strgt	r3, [sp, #28]
 80136f0:	9b07      	ldr	r3, [sp, #28]
 80136f2:	f1a3 0302 	sub.w	r3, r3, #2
 80136f6:	bfcc      	ite	gt
 80136f8:	2400      	movgt	r4, #0
 80136fa:	2401      	movle	r4, #1
 80136fc:	2b03      	cmp	r3, #3
 80136fe:	d863      	bhi.n	80137c8 <_dtoa_r+0x298>
 8013700:	e8df f003 	tbb	[pc, r3]
 8013704:	2b375452 	.word	0x2b375452
 8013708:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801370c:	441e      	add	r6, r3
 801370e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013712:	2b20      	cmp	r3, #32
 8013714:	bfc1      	itttt	gt
 8013716:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801371a:	409f      	lslgt	r7, r3
 801371c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013720:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013724:	bfd6      	itet	le
 8013726:	f1c3 0320 	rsble	r3, r3, #32
 801372a:	ea47 0003 	orrgt.w	r0, r7, r3
 801372e:	fa04 f003 	lslle.w	r0, r4, r3
 8013732:	f7ec fee7 	bl	8000504 <__aeabi_ui2d>
 8013736:	2201      	movs	r2, #1
 8013738:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801373c:	3e01      	subs	r6, #1
 801373e:	9212      	str	r2, [sp, #72]	@ 0x48
 8013740:	e776      	b.n	8013630 <_dtoa_r+0x100>
 8013742:	2301      	movs	r3, #1
 8013744:	e7b7      	b.n	80136b6 <_dtoa_r+0x186>
 8013746:	9010      	str	r0, [sp, #64]	@ 0x40
 8013748:	e7b6      	b.n	80136b8 <_dtoa_r+0x188>
 801374a:	9b00      	ldr	r3, [sp, #0]
 801374c:	1bdb      	subs	r3, r3, r7
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	427b      	negs	r3, r7
 8013752:	9308      	str	r3, [sp, #32]
 8013754:	2300      	movs	r3, #0
 8013756:	930d      	str	r3, [sp, #52]	@ 0x34
 8013758:	e7c3      	b.n	80136e2 <_dtoa_r+0x1b2>
 801375a:	2301      	movs	r3, #1
 801375c:	9309      	str	r3, [sp, #36]	@ 0x24
 801375e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013760:	eb07 0b03 	add.w	fp, r7, r3
 8013764:	f10b 0301 	add.w	r3, fp, #1
 8013768:	2b01      	cmp	r3, #1
 801376a:	9303      	str	r3, [sp, #12]
 801376c:	bfb8      	it	lt
 801376e:	2301      	movlt	r3, #1
 8013770:	e006      	b.n	8013780 <_dtoa_r+0x250>
 8013772:	2301      	movs	r3, #1
 8013774:	9309      	str	r3, [sp, #36]	@ 0x24
 8013776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013778:	2b00      	cmp	r3, #0
 801377a:	dd28      	ble.n	80137ce <_dtoa_r+0x29e>
 801377c:	469b      	mov	fp, r3
 801377e:	9303      	str	r3, [sp, #12]
 8013780:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8013784:	2100      	movs	r1, #0
 8013786:	2204      	movs	r2, #4
 8013788:	f102 0514 	add.w	r5, r2, #20
 801378c:	429d      	cmp	r5, r3
 801378e:	d926      	bls.n	80137de <_dtoa_r+0x2ae>
 8013790:	6041      	str	r1, [r0, #4]
 8013792:	4648      	mov	r0, r9
 8013794:	f001 f832 	bl	80147fc <_Balloc>
 8013798:	4682      	mov	sl, r0
 801379a:	2800      	cmp	r0, #0
 801379c:	d142      	bne.n	8013824 <_dtoa_r+0x2f4>
 801379e:	4b1e      	ldr	r3, [pc, #120]	@ (8013818 <_dtoa_r+0x2e8>)
 80137a0:	4602      	mov	r2, r0
 80137a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80137a6:	e6da      	b.n	801355e <_dtoa_r+0x2e>
 80137a8:	2300      	movs	r3, #0
 80137aa:	e7e3      	b.n	8013774 <_dtoa_r+0x244>
 80137ac:	2300      	movs	r3, #0
 80137ae:	e7d5      	b.n	801375c <_dtoa_r+0x22c>
 80137b0:	2401      	movs	r4, #1
 80137b2:	2300      	movs	r3, #0
 80137b4:	9307      	str	r3, [sp, #28]
 80137b6:	9409      	str	r4, [sp, #36]	@ 0x24
 80137b8:	f04f 3bff 	mov.w	fp, #4294967295
 80137bc:	2200      	movs	r2, #0
 80137be:	f8cd b00c 	str.w	fp, [sp, #12]
 80137c2:	2312      	movs	r3, #18
 80137c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80137c6:	e7db      	b.n	8013780 <_dtoa_r+0x250>
 80137c8:	2301      	movs	r3, #1
 80137ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80137cc:	e7f4      	b.n	80137b8 <_dtoa_r+0x288>
 80137ce:	f04f 0b01 	mov.w	fp, #1
 80137d2:	f8cd b00c 	str.w	fp, [sp, #12]
 80137d6:	465b      	mov	r3, fp
 80137d8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80137dc:	e7d0      	b.n	8013780 <_dtoa_r+0x250>
 80137de:	3101      	adds	r1, #1
 80137e0:	0052      	lsls	r2, r2, #1
 80137e2:	e7d1      	b.n	8013788 <_dtoa_r+0x258>
 80137e4:	f3af 8000 	nop.w
 80137e8:	636f4361 	.word	0x636f4361
 80137ec:	3fd287a7 	.word	0x3fd287a7
 80137f0:	8b60c8b3 	.word	0x8b60c8b3
 80137f4:	3fc68a28 	.word	0x3fc68a28
 80137f8:	509f79fb 	.word	0x509f79fb
 80137fc:	3fd34413 	.word	0x3fd34413
 8013800:	080166ba 	.word	0x080166ba
 8013804:	0801677c 	.word	0x0801677c
 8013808:	7ff00000 	.word	0x7ff00000
 801380c:	08016697 	.word	0x08016697
 8013810:	3ff80000 	.word	0x3ff80000
 8013814:	08016a38 	.word	0x08016a38
 8013818:	080167d4 	.word	0x080167d4
 801381c:	08016778 	.word	0x08016778
 8013820:	08016696 	.word	0x08016696
 8013824:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013828:	6018      	str	r0, [r3, #0]
 801382a:	9b03      	ldr	r3, [sp, #12]
 801382c:	2b0e      	cmp	r3, #14
 801382e:	f200 80a1 	bhi.w	8013974 <_dtoa_r+0x444>
 8013832:	2c00      	cmp	r4, #0
 8013834:	f000 809e 	beq.w	8013974 <_dtoa_r+0x444>
 8013838:	2f00      	cmp	r7, #0
 801383a:	dd33      	ble.n	80138a4 <_dtoa_r+0x374>
 801383c:	4b9c      	ldr	r3, [pc, #624]	@ (8013ab0 <_dtoa_r+0x580>)
 801383e:	f007 020f 	and.w	r2, r7, #15
 8013842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013846:	ed93 7b00 	vldr	d7, [r3]
 801384a:	05f8      	lsls	r0, r7, #23
 801384c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8013850:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013854:	d516      	bpl.n	8013884 <_dtoa_r+0x354>
 8013856:	4b97      	ldr	r3, [pc, #604]	@ (8013ab4 <_dtoa_r+0x584>)
 8013858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801385c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013860:	f7ec fff4 	bl	800084c <__aeabi_ddiv>
 8013864:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013868:	f004 040f 	and.w	r4, r4, #15
 801386c:	2603      	movs	r6, #3
 801386e:	4d91      	ldr	r5, [pc, #580]	@ (8013ab4 <_dtoa_r+0x584>)
 8013870:	b954      	cbnz	r4, 8013888 <_dtoa_r+0x358>
 8013872:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801387a:	f7ec ffe7 	bl	800084c <__aeabi_ddiv>
 801387e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013882:	e028      	b.n	80138d6 <_dtoa_r+0x3a6>
 8013884:	2602      	movs	r6, #2
 8013886:	e7f2      	b.n	801386e <_dtoa_r+0x33e>
 8013888:	07e1      	lsls	r1, r4, #31
 801388a:	d508      	bpl.n	801389e <_dtoa_r+0x36e>
 801388c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013890:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013894:	f7ec feb0 	bl	80005f8 <__aeabi_dmul>
 8013898:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801389c:	3601      	adds	r6, #1
 801389e:	1064      	asrs	r4, r4, #1
 80138a0:	3508      	adds	r5, #8
 80138a2:	e7e5      	b.n	8013870 <_dtoa_r+0x340>
 80138a4:	f000 80af 	beq.w	8013a06 <_dtoa_r+0x4d6>
 80138a8:	427c      	negs	r4, r7
 80138aa:	4b81      	ldr	r3, [pc, #516]	@ (8013ab0 <_dtoa_r+0x580>)
 80138ac:	4d81      	ldr	r5, [pc, #516]	@ (8013ab4 <_dtoa_r+0x584>)
 80138ae:	f004 020f 	and.w	r2, r4, #15
 80138b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80138be:	f7ec fe9b 	bl	80005f8 <__aeabi_dmul>
 80138c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138c6:	1124      	asrs	r4, r4, #4
 80138c8:	2300      	movs	r3, #0
 80138ca:	2602      	movs	r6, #2
 80138cc:	2c00      	cmp	r4, #0
 80138ce:	f040 808f 	bne.w	80139f0 <_dtoa_r+0x4c0>
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d1d3      	bne.n	801387e <_dtoa_r+0x34e>
 80138d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 8094 	beq.w	8013a0a <_dtoa_r+0x4da>
 80138e2:	4b75      	ldr	r3, [pc, #468]	@ (8013ab8 <_dtoa_r+0x588>)
 80138e4:	2200      	movs	r2, #0
 80138e6:	4620      	mov	r0, r4
 80138e8:	4629      	mov	r1, r5
 80138ea:	f7ed f8f7 	bl	8000adc <__aeabi_dcmplt>
 80138ee:	2800      	cmp	r0, #0
 80138f0:	f000 808b 	beq.w	8013a0a <_dtoa_r+0x4da>
 80138f4:	9b03      	ldr	r3, [sp, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	f000 8087 	beq.w	8013a0a <_dtoa_r+0x4da>
 80138fc:	f1bb 0f00 	cmp.w	fp, #0
 8013900:	dd34      	ble.n	801396c <_dtoa_r+0x43c>
 8013902:	4620      	mov	r0, r4
 8013904:	4b6d      	ldr	r3, [pc, #436]	@ (8013abc <_dtoa_r+0x58c>)
 8013906:	2200      	movs	r2, #0
 8013908:	4629      	mov	r1, r5
 801390a:	f7ec fe75 	bl	80005f8 <__aeabi_dmul>
 801390e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013912:	f107 38ff 	add.w	r8, r7, #4294967295
 8013916:	3601      	adds	r6, #1
 8013918:	465c      	mov	r4, fp
 801391a:	4630      	mov	r0, r6
 801391c:	f7ec fe02 	bl	8000524 <__aeabi_i2d>
 8013920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013924:	f7ec fe68 	bl	80005f8 <__aeabi_dmul>
 8013928:	4b65      	ldr	r3, [pc, #404]	@ (8013ac0 <_dtoa_r+0x590>)
 801392a:	2200      	movs	r2, #0
 801392c:	f7ec fcae 	bl	800028c <__adddf3>
 8013930:	4605      	mov	r5, r0
 8013932:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013936:	2c00      	cmp	r4, #0
 8013938:	d16a      	bne.n	8013a10 <_dtoa_r+0x4e0>
 801393a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801393e:	4b61      	ldr	r3, [pc, #388]	@ (8013ac4 <_dtoa_r+0x594>)
 8013940:	2200      	movs	r2, #0
 8013942:	f7ec fca1 	bl	8000288 <__aeabi_dsub>
 8013946:	4602      	mov	r2, r0
 8013948:	460b      	mov	r3, r1
 801394a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801394e:	462a      	mov	r2, r5
 8013950:	4633      	mov	r3, r6
 8013952:	f7ed f8e1 	bl	8000b18 <__aeabi_dcmpgt>
 8013956:	2800      	cmp	r0, #0
 8013958:	f040 8298 	bne.w	8013e8c <_dtoa_r+0x95c>
 801395c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013960:	462a      	mov	r2, r5
 8013962:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013966:	f7ed f8b9 	bl	8000adc <__aeabi_dcmplt>
 801396a:	bb38      	cbnz	r0, 80139bc <_dtoa_r+0x48c>
 801396c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8013970:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013974:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013976:	2b00      	cmp	r3, #0
 8013978:	f2c0 8157 	blt.w	8013c2a <_dtoa_r+0x6fa>
 801397c:	2f0e      	cmp	r7, #14
 801397e:	f300 8154 	bgt.w	8013c2a <_dtoa_r+0x6fa>
 8013982:	4b4b      	ldr	r3, [pc, #300]	@ (8013ab0 <_dtoa_r+0x580>)
 8013984:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013988:	ed93 7b00 	vldr	d7, [r3]
 801398c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801398e:	2b00      	cmp	r3, #0
 8013990:	ed8d 7b00 	vstr	d7, [sp]
 8013994:	f280 80e5 	bge.w	8013b62 <_dtoa_r+0x632>
 8013998:	9b03      	ldr	r3, [sp, #12]
 801399a:	2b00      	cmp	r3, #0
 801399c:	f300 80e1 	bgt.w	8013b62 <_dtoa_r+0x632>
 80139a0:	d10c      	bne.n	80139bc <_dtoa_r+0x48c>
 80139a2:	4b48      	ldr	r3, [pc, #288]	@ (8013ac4 <_dtoa_r+0x594>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	ec51 0b17 	vmov	r0, r1, d7
 80139aa:	f7ec fe25 	bl	80005f8 <__aeabi_dmul>
 80139ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80139b2:	f7ed f8a7 	bl	8000b04 <__aeabi_dcmpge>
 80139b6:	2800      	cmp	r0, #0
 80139b8:	f000 8266 	beq.w	8013e88 <_dtoa_r+0x958>
 80139bc:	2400      	movs	r4, #0
 80139be:	4625      	mov	r5, r4
 80139c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139c2:	4656      	mov	r6, sl
 80139c4:	ea6f 0803 	mvn.w	r8, r3
 80139c8:	2700      	movs	r7, #0
 80139ca:	4621      	mov	r1, r4
 80139cc:	4648      	mov	r0, r9
 80139ce:	f000 ff55 	bl	801487c <_Bfree>
 80139d2:	2d00      	cmp	r5, #0
 80139d4:	f000 80bd 	beq.w	8013b52 <_dtoa_r+0x622>
 80139d8:	b12f      	cbz	r7, 80139e6 <_dtoa_r+0x4b6>
 80139da:	42af      	cmp	r7, r5
 80139dc:	d003      	beq.n	80139e6 <_dtoa_r+0x4b6>
 80139de:	4639      	mov	r1, r7
 80139e0:	4648      	mov	r0, r9
 80139e2:	f000 ff4b 	bl	801487c <_Bfree>
 80139e6:	4629      	mov	r1, r5
 80139e8:	4648      	mov	r0, r9
 80139ea:	f000 ff47 	bl	801487c <_Bfree>
 80139ee:	e0b0      	b.n	8013b52 <_dtoa_r+0x622>
 80139f0:	07e2      	lsls	r2, r4, #31
 80139f2:	d505      	bpl.n	8013a00 <_dtoa_r+0x4d0>
 80139f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80139f8:	f7ec fdfe 	bl	80005f8 <__aeabi_dmul>
 80139fc:	3601      	adds	r6, #1
 80139fe:	2301      	movs	r3, #1
 8013a00:	1064      	asrs	r4, r4, #1
 8013a02:	3508      	adds	r5, #8
 8013a04:	e762      	b.n	80138cc <_dtoa_r+0x39c>
 8013a06:	2602      	movs	r6, #2
 8013a08:	e765      	b.n	80138d6 <_dtoa_r+0x3a6>
 8013a0a:	9c03      	ldr	r4, [sp, #12]
 8013a0c:	46b8      	mov	r8, r7
 8013a0e:	e784      	b.n	801391a <_dtoa_r+0x3ea>
 8013a10:	4b27      	ldr	r3, [pc, #156]	@ (8013ab0 <_dtoa_r+0x580>)
 8013a12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013a1c:	4454      	add	r4, sl
 8013a1e:	2900      	cmp	r1, #0
 8013a20:	d054      	beq.n	8013acc <_dtoa_r+0x59c>
 8013a22:	4929      	ldr	r1, [pc, #164]	@ (8013ac8 <_dtoa_r+0x598>)
 8013a24:	2000      	movs	r0, #0
 8013a26:	f7ec ff11 	bl	800084c <__aeabi_ddiv>
 8013a2a:	4633      	mov	r3, r6
 8013a2c:	462a      	mov	r2, r5
 8013a2e:	f7ec fc2b 	bl	8000288 <__aeabi_dsub>
 8013a32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a36:	4656      	mov	r6, sl
 8013a38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a3c:	f7ed f88c 	bl	8000b58 <__aeabi_d2iz>
 8013a40:	4605      	mov	r5, r0
 8013a42:	f7ec fd6f 	bl	8000524 <__aeabi_i2d>
 8013a46:	4602      	mov	r2, r0
 8013a48:	460b      	mov	r3, r1
 8013a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a4e:	f7ec fc1b 	bl	8000288 <__aeabi_dsub>
 8013a52:	3530      	adds	r5, #48	@ 0x30
 8013a54:	4602      	mov	r2, r0
 8013a56:	460b      	mov	r3, r1
 8013a58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013a5c:	f806 5b01 	strb.w	r5, [r6], #1
 8013a60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013a64:	f7ed f83a 	bl	8000adc <__aeabi_dcmplt>
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d172      	bne.n	8013b52 <_dtoa_r+0x622>
 8013a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a70:	4911      	ldr	r1, [pc, #68]	@ (8013ab8 <_dtoa_r+0x588>)
 8013a72:	2000      	movs	r0, #0
 8013a74:	f7ec fc08 	bl	8000288 <__aeabi_dsub>
 8013a78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013a7c:	f7ed f82e 	bl	8000adc <__aeabi_dcmplt>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	f040 80b4 	bne.w	8013bee <_dtoa_r+0x6be>
 8013a86:	42a6      	cmp	r6, r4
 8013a88:	f43f af70 	beq.w	801396c <_dtoa_r+0x43c>
 8013a8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013a90:	4b0a      	ldr	r3, [pc, #40]	@ (8013abc <_dtoa_r+0x58c>)
 8013a92:	2200      	movs	r2, #0
 8013a94:	f7ec fdb0 	bl	80005f8 <__aeabi_dmul>
 8013a98:	4b08      	ldr	r3, [pc, #32]	@ (8013abc <_dtoa_r+0x58c>)
 8013a9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013aa4:	f7ec fda8 	bl	80005f8 <__aeabi_dmul>
 8013aa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013aac:	e7c4      	b.n	8013a38 <_dtoa_r+0x508>
 8013aae:	bf00      	nop
 8013ab0:	08016a38 	.word	0x08016a38
 8013ab4:	08016a10 	.word	0x08016a10
 8013ab8:	3ff00000 	.word	0x3ff00000
 8013abc:	40240000 	.word	0x40240000
 8013ac0:	401c0000 	.word	0x401c0000
 8013ac4:	40140000 	.word	0x40140000
 8013ac8:	3fe00000 	.word	0x3fe00000
 8013acc:	4631      	mov	r1, r6
 8013ace:	4628      	mov	r0, r5
 8013ad0:	f7ec fd92 	bl	80005f8 <__aeabi_dmul>
 8013ad4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013ad8:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013ada:	4656      	mov	r6, sl
 8013adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ae0:	f7ed f83a 	bl	8000b58 <__aeabi_d2iz>
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	f7ec fd1d 	bl	8000524 <__aeabi_i2d>
 8013aea:	4602      	mov	r2, r0
 8013aec:	460b      	mov	r3, r1
 8013aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013af2:	f7ec fbc9 	bl	8000288 <__aeabi_dsub>
 8013af6:	3530      	adds	r5, #48	@ 0x30
 8013af8:	f806 5b01 	strb.w	r5, [r6], #1
 8013afc:	4602      	mov	r2, r0
 8013afe:	460b      	mov	r3, r1
 8013b00:	42a6      	cmp	r6, r4
 8013b02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b06:	f04f 0200 	mov.w	r2, #0
 8013b0a:	d124      	bne.n	8013b56 <_dtoa_r+0x626>
 8013b0c:	4baf      	ldr	r3, [pc, #700]	@ (8013dcc <_dtoa_r+0x89c>)
 8013b0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b12:	f7ec fbbb 	bl	800028c <__adddf3>
 8013b16:	4602      	mov	r2, r0
 8013b18:	460b      	mov	r3, r1
 8013b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b1e:	f7ec fffb 	bl	8000b18 <__aeabi_dcmpgt>
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d163      	bne.n	8013bee <_dtoa_r+0x6be>
 8013b26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013b2a:	49a8      	ldr	r1, [pc, #672]	@ (8013dcc <_dtoa_r+0x89c>)
 8013b2c:	2000      	movs	r0, #0
 8013b2e:	f7ec fbab 	bl	8000288 <__aeabi_dsub>
 8013b32:	4602      	mov	r2, r0
 8013b34:	460b      	mov	r3, r1
 8013b36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b3a:	f7ec ffcf 	bl	8000adc <__aeabi_dcmplt>
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	f43f af14 	beq.w	801396c <_dtoa_r+0x43c>
 8013b44:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013b46:	1e73      	subs	r3, r6, #1
 8013b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013b4a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013b4e:	2b30      	cmp	r3, #48	@ 0x30
 8013b50:	d0f8      	beq.n	8013b44 <_dtoa_r+0x614>
 8013b52:	4647      	mov	r7, r8
 8013b54:	e03b      	b.n	8013bce <_dtoa_r+0x69e>
 8013b56:	4b9e      	ldr	r3, [pc, #632]	@ (8013dd0 <_dtoa_r+0x8a0>)
 8013b58:	f7ec fd4e 	bl	80005f8 <__aeabi_dmul>
 8013b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b60:	e7bc      	b.n	8013adc <_dtoa_r+0x5ac>
 8013b62:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013b66:	4656      	mov	r6, sl
 8013b68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	4629      	mov	r1, r5
 8013b70:	f7ec fe6c 	bl	800084c <__aeabi_ddiv>
 8013b74:	f7ec fff0 	bl	8000b58 <__aeabi_d2iz>
 8013b78:	4680      	mov	r8, r0
 8013b7a:	f7ec fcd3 	bl	8000524 <__aeabi_i2d>
 8013b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b82:	f7ec fd39 	bl	80005f8 <__aeabi_dmul>
 8013b86:	4602      	mov	r2, r0
 8013b88:	460b      	mov	r3, r1
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	4629      	mov	r1, r5
 8013b8e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013b92:	f7ec fb79 	bl	8000288 <__aeabi_dsub>
 8013b96:	f806 4b01 	strb.w	r4, [r6], #1
 8013b9a:	9d03      	ldr	r5, [sp, #12]
 8013b9c:	eba6 040a 	sub.w	r4, r6, sl
 8013ba0:	42a5      	cmp	r5, r4
 8013ba2:	4602      	mov	r2, r0
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	d133      	bne.n	8013c10 <_dtoa_r+0x6e0>
 8013ba8:	f7ec fb70 	bl	800028c <__adddf3>
 8013bac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	460d      	mov	r5, r1
 8013bb4:	f7ec ffb0 	bl	8000b18 <__aeabi_dcmpgt>
 8013bb8:	b9c0      	cbnz	r0, 8013bec <_dtoa_r+0x6bc>
 8013bba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	4629      	mov	r1, r5
 8013bc2:	f7ec ff81 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bc6:	b110      	cbz	r0, 8013bce <_dtoa_r+0x69e>
 8013bc8:	f018 0f01 	tst.w	r8, #1
 8013bcc:	d10e      	bne.n	8013bec <_dtoa_r+0x6bc>
 8013bce:	9902      	ldr	r1, [sp, #8]
 8013bd0:	4648      	mov	r0, r9
 8013bd2:	f000 fe53 	bl	801487c <_Bfree>
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	7033      	strb	r3, [r6, #0]
 8013bda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013bdc:	3701      	adds	r7, #1
 8013bde:	601f      	str	r7, [r3, #0]
 8013be0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f000 824b 	beq.w	801407e <_dtoa_r+0xb4e>
 8013be8:	601e      	str	r6, [r3, #0]
 8013bea:	e248      	b.n	801407e <_dtoa_r+0xb4e>
 8013bec:	46b8      	mov	r8, r7
 8013bee:	4633      	mov	r3, r6
 8013bf0:	461e      	mov	r6, r3
 8013bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013bf6:	2a39      	cmp	r2, #57	@ 0x39
 8013bf8:	d106      	bne.n	8013c08 <_dtoa_r+0x6d8>
 8013bfa:	459a      	cmp	sl, r3
 8013bfc:	d1f8      	bne.n	8013bf0 <_dtoa_r+0x6c0>
 8013bfe:	2230      	movs	r2, #48	@ 0x30
 8013c00:	f108 0801 	add.w	r8, r8, #1
 8013c04:	f88a 2000 	strb.w	r2, [sl]
 8013c08:	781a      	ldrb	r2, [r3, #0]
 8013c0a:	3201      	adds	r2, #1
 8013c0c:	701a      	strb	r2, [r3, #0]
 8013c0e:	e7a0      	b.n	8013b52 <_dtoa_r+0x622>
 8013c10:	4b6f      	ldr	r3, [pc, #444]	@ (8013dd0 <_dtoa_r+0x8a0>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	f7ec fcf0 	bl	80005f8 <__aeabi_dmul>
 8013c18:	2200      	movs	r2, #0
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	460d      	mov	r5, r1
 8013c20:	f7ec ff52 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c24:	2800      	cmp	r0, #0
 8013c26:	d09f      	beq.n	8013b68 <_dtoa_r+0x638>
 8013c28:	e7d1      	b.n	8013bce <_dtoa_r+0x69e>
 8013c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c2c:	2a00      	cmp	r2, #0
 8013c2e:	f000 80ea 	beq.w	8013e06 <_dtoa_r+0x8d6>
 8013c32:	9a07      	ldr	r2, [sp, #28]
 8013c34:	2a01      	cmp	r2, #1
 8013c36:	f300 80cd 	bgt.w	8013dd4 <_dtoa_r+0x8a4>
 8013c3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013c3c:	2a00      	cmp	r2, #0
 8013c3e:	f000 80c1 	beq.w	8013dc4 <_dtoa_r+0x894>
 8013c42:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013c46:	9c08      	ldr	r4, [sp, #32]
 8013c48:	9e00      	ldr	r6, [sp, #0]
 8013c4a:	9a00      	ldr	r2, [sp, #0]
 8013c4c:	441a      	add	r2, r3
 8013c4e:	9200      	str	r2, [sp, #0]
 8013c50:	9a06      	ldr	r2, [sp, #24]
 8013c52:	2101      	movs	r1, #1
 8013c54:	441a      	add	r2, r3
 8013c56:	4648      	mov	r0, r9
 8013c58:	9206      	str	r2, [sp, #24]
 8013c5a:	f000 ff0d 	bl	8014a78 <__i2b>
 8013c5e:	4605      	mov	r5, r0
 8013c60:	b166      	cbz	r6, 8013c7c <_dtoa_r+0x74c>
 8013c62:	9b06      	ldr	r3, [sp, #24]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	dd09      	ble.n	8013c7c <_dtoa_r+0x74c>
 8013c68:	42b3      	cmp	r3, r6
 8013c6a:	9a00      	ldr	r2, [sp, #0]
 8013c6c:	bfa8      	it	ge
 8013c6e:	4633      	movge	r3, r6
 8013c70:	1ad2      	subs	r2, r2, r3
 8013c72:	9200      	str	r2, [sp, #0]
 8013c74:	9a06      	ldr	r2, [sp, #24]
 8013c76:	1af6      	subs	r6, r6, r3
 8013c78:	1ad3      	subs	r3, r2, r3
 8013c7a:	9306      	str	r3, [sp, #24]
 8013c7c:	9b08      	ldr	r3, [sp, #32]
 8013c7e:	b30b      	cbz	r3, 8013cc4 <_dtoa_r+0x794>
 8013c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	f000 80c6 	beq.w	8013e14 <_dtoa_r+0x8e4>
 8013c88:	2c00      	cmp	r4, #0
 8013c8a:	f000 80c0 	beq.w	8013e0e <_dtoa_r+0x8de>
 8013c8e:	4629      	mov	r1, r5
 8013c90:	4622      	mov	r2, r4
 8013c92:	4648      	mov	r0, r9
 8013c94:	f000 ffa8 	bl	8014be8 <__pow5mult>
 8013c98:	9a02      	ldr	r2, [sp, #8]
 8013c9a:	4601      	mov	r1, r0
 8013c9c:	4605      	mov	r5, r0
 8013c9e:	4648      	mov	r0, r9
 8013ca0:	f000 ff00 	bl	8014aa4 <__multiply>
 8013ca4:	9902      	ldr	r1, [sp, #8]
 8013ca6:	4680      	mov	r8, r0
 8013ca8:	4648      	mov	r0, r9
 8013caa:	f000 fde7 	bl	801487c <_Bfree>
 8013cae:	9b08      	ldr	r3, [sp, #32]
 8013cb0:	1b1b      	subs	r3, r3, r4
 8013cb2:	9308      	str	r3, [sp, #32]
 8013cb4:	f000 80b1 	beq.w	8013e1a <_dtoa_r+0x8ea>
 8013cb8:	9a08      	ldr	r2, [sp, #32]
 8013cba:	4641      	mov	r1, r8
 8013cbc:	4648      	mov	r0, r9
 8013cbe:	f000 ff93 	bl	8014be8 <__pow5mult>
 8013cc2:	9002      	str	r0, [sp, #8]
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	4648      	mov	r0, r9
 8013cc8:	f000 fed6 	bl	8014a78 <__i2b>
 8013ccc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013cce:	4604      	mov	r4, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	f000 81d8 	beq.w	8014086 <_dtoa_r+0xb56>
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	4601      	mov	r1, r0
 8013cda:	4648      	mov	r0, r9
 8013cdc:	f000 ff84 	bl	8014be8 <__pow5mult>
 8013ce0:	9b07      	ldr	r3, [sp, #28]
 8013ce2:	2b01      	cmp	r3, #1
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	f300 809f 	bgt.w	8013e28 <_dtoa_r+0x8f8>
 8013cea:	9b04      	ldr	r3, [sp, #16]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	f040 8097 	bne.w	8013e20 <_dtoa_r+0x8f0>
 8013cf2:	9b05      	ldr	r3, [sp, #20]
 8013cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	f040 8093 	bne.w	8013e24 <_dtoa_r+0x8f4>
 8013cfe:	9b05      	ldr	r3, [sp, #20]
 8013d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d04:	0d1b      	lsrs	r3, r3, #20
 8013d06:	051b      	lsls	r3, r3, #20
 8013d08:	b133      	cbz	r3, 8013d18 <_dtoa_r+0x7e8>
 8013d0a:	9b00      	ldr	r3, [sp, #0]
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	9300      	str	r3, [sp, #0]
 8013d10:	9b06      	ldr	r3, [sp, #24]
 8013d12:	3301      	adds	r3, #1
 8013d14:	9306      	str	r3, [sp, #24]
 8013d16:	2301      	movs	r3, #1
 8013d18:	9308      	str	r3, [sp, #32]
 8013d1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	f000 81b8 	beq.w	8014092 <_dtoa_r+0xb62>
 8013d22:	6923      	ldr	r3, [r4, #16]
 8013d24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013d28:	6918      	ldr	r0, [r3, #16]
 8013d2a:	f000 fe59 	bl	80149e0 <__hi0bits>
 8013d2e:	f1c0 0020 	rsb	r0, r0, #32
 8013d32:	9b06      	ldr	r3, [sp, #24]
 8013d34:	4418      	add	r0, r3
 8013d36:	f010 001f 	ands.w	r0, r0, #31
 8013d3a:	f000 8082 	beq.w	8013e42 <_dtoa_r+0x912>
 8013d3e:	f1c0 0320 	rsb	r3, r0, #32
 8013d42:	2b04      	cmp	r3, #4
 8013d44:	dd73      	ble.n	8013e2e <_dtoa_r+0x8fe>
 8013d46:	9b00      	ldr	r3, [sp, #0]
 8013d48:	f1c0 001c 	rsb	r0, r0, #28
 8013d4c:	4403      	add	r3, r0
 8013d4e:	9300      	str	r3, [sp, #0]
 8013d50:	9b06      	ldr	r3, [sp, #24]
 8013d52:	4403      	add	r3, r0
 8013d54:	4406      	add	r6, r0
 8013d56:	9306      	str	r3, [sp, #24]
 8013d58:	9b00      	ldr	r3, [sp, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	dd05      	ble.n	8013d6a <_dtoa_r+0x83a>
 8013d5e:	9902      	ldr	r1, [sp, #8]
 8013d60:	461a      	mov	r2, r3
 8013d62:	4648      	mov	r0, r9
 8013d64:	f000 ff9a 	bl	8014c9c <__lshift>
 8013d68:	9002      	str	r0, [sp, #8]
 8013d6a:	9b06      	ldr	r3, [sp, #24]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	dd05      	ble.n	8013d7c <_dtoa_r+0x84c>
 8013d70:	4621      	mov	r1, r4
 8013d72:	461a      	mov	r2, r3
 8013d74:	4648      	mov	r0, r9
 8013d76:	f000 ff91 	bl	8014c9c <__lshift>
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d061      	beq.n	8013e46 <_dtoa_r+0x916>
 8013d82:	9802      	ldr	r0, [sp, #8]
 8013d84:	4621      	mov	r1, r4
 8013d86:	f000 fff5 	bl	8014d74 <__mcmp>
 8013d8a:	2800      	cmp	r0, #0
 8013d8c:	da5b      	bge.n	8013e46 <_dtoa_r+0x916>
 8013d8e:	2300      	movs	r3, #0
 8013d90:	9902      	ldr	r1, [sp, #8]
 8013d92:	220a      	movs	r2, #10
 8013d94:	4648      	mov	r0, r9
 8013d96:	f000 fd93 	bl	80148c0 <__multadd>
 8013d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d9c:	9002      	str	r0, [sp, #8]
 8013d9e:	f107 38ff 	add.w	r8, r7, #4294967295
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f000 8177 	beq.w	8014096 <_dtoa_r+0xb66>
 8013da8:	4629      	mov	r1, r5
 8013daa:	2300      	movs	r3, #0
 8013dac:	220a      	movs	r2, #10
 8013dae:	4648      	mov	r0, r9
 8013db0:	f000 fd86 	bl	80148c0 <__multadd>
 8013db4:	f1bb 0f00 	cmp.w	fp, #0
 8013db8:	4605      	mov	r5, r0
 8013dba:	dc6f      	bgt.n	8013e9c <_dtoa_r+0x96c>
 8013dbc:	9b07      	ldr	r3, [sp, #28]
 8013dbe:	2b02      	cmp	r3, #2
 8013dc0:	dc49      	bgt.n	8013e56 <_dtoa_r+0x926>
 8013dc2:	e06b      	b.n	8013e9c <_dtoa_r+0x96c>
 8013dc4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013dc6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013dca:	e73c      	b.n	8013c46 <_dtoa_r+0x716>
 8013dcc:	3fe00000 	.word	0x3fe00000
 8013dd0:	40240000 	.word	0x40240000
 8013dd4:	9b03      	ldr	r3, [sp, #12]
 8013dd6:	1e5c      	subs	r4, r3, #1
 8013dd8:	9b08      	ldr	r3, [sp, #32]
 8013dda:	42a3      	cmp	r3, r4
 8013ddc:	db09      	blt.n	8013df2 <_dtoa_r+0x8c2>
 8013dde:	1b1c      	subs	r4, r3, r4
 8013de0:	9b03      	ldr	r3, [sp, #12]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f6bf af30 	bge.w	8013c48 <_dtoa_r+0x718>
 8013de8:	9b00      	ldr	r3, [sp, #0]
 8013dea:	9a03      	ldr	r2, [sp, #12]
 8013dec:	1a9e      	subs	r6, r3, r2
 8013dee:	2300      	movs	r3, #0
 8013df0:	e72b      	b.n	8013c4a <_dtoa_r+0x71a>
 8013df2:	9b08      	ldr	r3, [sp, #32]
 8013df4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013df6:	9408      	str	r4, [sp, #32]
 8013df8:	1ae3      	subs	r3, r4, r3
 8013dfa:	441a      	add	r2, r3
 8013dfc:	9e00      	ldr	r6, [sp, #0]
 8013dfe:	9b03      	ldr	r3, [sp, #12]
 8013e00:	920d      	str	r2, [sp, #52]	@ 0x34
 8013e02:	2400      	movs	r4, #0
 8013e04:	e721      	b.n	8013c4a <_dtoa_r+0x71a>
 8013e06:	9c08      	ldr	r4, [sp, #32]
 8013e08:	9e00      	ldr	r6, [sp, #0]
 8013e0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013e0c:	e728      	b.n	8013c60 <_dtoa_r+0x730>
 8013e0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013e12:	e751      	b.n	8013cb8 <_dtoa_r+0x788>
 8013e14:	9a08      	ldr	r2, [sp, #32]
 8013e16:	9902      	ldr	r1, [sp, #8]
 8013e18:	e750      	b.n	8013cbc <_dtoa_r+0x78c>
 8013e1a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013e1e:	e751      	b.n	8013cc4 <_dtoa_r+0x794>
 8013e20:	2300      	movs	r3, #0
 8013e22:	e779      	b.n	8013d18 <_dtoa_r+0x7e8>
 8013e24:	9b04      	ldr	r3, [sp, #16]
 8013e26:	e777      	b.n	8013d18 <_dtoa_r+0x7e8>
 8013e28:	2300      	movs	r3, #0
 8013e2a:	9308      	str	r3, [sp, #32]
 8013e2c:	e779      	b.n	8013d22 <_dtoa_r+0x7f2>
 8013e2e:	d093      	beq.n	8013d58 <_dtoa_r+0x828>
 8013e30:	9a00      	ldr	r2, [sp, #0]
 8013e32:	331c      	adds	r3, #28
 8013e34:	441a      	add	r2, r3
 8013e36:	9200      	str	r2, [sp, #0]
 8013e38:	9a06      	ldr	r2, [sp, #24]
 8013e3a:	441a      	add	r2, r3
 8013e3c:	441e      	add	r6, r3
 8013e3e:	9206      	str	r2, [sp, #24]
 8013e40:	e78a      	b.n	8013d58 <_dtoa_r+0x828>
 8013e42:	4603      	mov	r3, r0
 8013e44:	e7f4      	b.n	8013e30 <_dtoa_r+0x900>
 8013e46:	9b03      	ldr	r3, [sp, #12]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	46b8      	mov	r8, r7
 8013e4c:	dc20      	bgt.n	8013e90 <_dtoa_r+0x960>
 8013e4e:	469b      	mov	fp, r3
 8013e50:	9b07      	ldr	r3, [sp, #28]
 8013e52:	2b02      	cmp	r3, #2
 8013e54:	dd1e      	ble.n	8013e94 <_dtoa_r+0x964>
 8013e56:	f1bb 0f00 	cmp.w	fp, #0
 8013e5a:	f47f adb1 	bne.w	80139c0 <_dtoa_r+0x490>
 8013e5e:	4621      	mov	r1, r4
 8013e60:	465b      	mov	r3, fp
 8013e62:	2205      	movs	r2, #5
 8013e64:	4648      	mov	r0, r9
 8013e66:	f000 fd2b 	bl	80148c0 <__multadd>
 8013e6a:	4601      	mov	r1, r0
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	9802      	ldr	r0, [sp, #8]
 8013e70:	f000 ff80 	bl	8014d74 <__mcmp>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	f77f ada3 	ble.w	80139c0 <_dtoa_r+0x490>
 8013e7a:	4656      	mov	r6, sl
 8013e7c:	2331      	movs	r3, #49	@ 0x31
 8013e7e:	f806 3b01 	strb.w	r3, [r6], #1
 8013e82:	f108 0801 	add.w	r8, r8, #1
 8013e86:	e59f      	b.n	80139c8 <_dtoa_r+0x498>
 8013e88:	9c03      	ldr	r4, [sp, #12]
 8013e8a:	46b8      	mov	r8, r7
 8013e8c:	4625      	mov	r5, r4
 8013e8e:	e7f4      	b.n	8013e7a <_dtoa_r+0x94a>
 8013e90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	f000 8101 	beq.w	801409e <_dtoa_r+0xb6e>
 8013e9c:	2e00      	cmp	r6, #0
 8013e9e:	dd05      	ble.n	8013eac <_dtoa_r+0x97c>
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4632      	mov	r2, r6
 8013ea4:	4648      	mov	r0, r9
 8013ea6:	f000 fef9 	bl	8014c9c <__lshift>
 8013eaa:	4605      	mov	r5, r0
 8013eac:	9b08      	ldr	r3, [sp, #32]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d05c      	beq.n	8013f6c <_dtoa_r+0xa3c>
 8013eb2:	6869      	ldr	r1, [r5, #4]
 8013eb4:	4648      	mov	r0, r9
 8013eb6:	f000 fca1 	bl	80147fc <_Balloc>
 8013eba:	4606      	mov	r6, r0
 8013ebc:	b928      	cbnz	r0, 8013eca <_dtoa_r+0x99a>
 8013ebe:	4b82      	ldr	r3, [pc, #520]	@ (80140c8 <_dtoa_r+0xb98>)
 8013ec0:	4602      	mov	r2, r0
 8013ec2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013ec6:	f7ff bb4a 	b.w	801355e <_dtoa_r+0x2e>
 8013eca:	692a      	ldr	r2, [r5, #16]
 8013ecc:	3202      	adds	r2, #2
 8013ece:	0092      	lsls	r2, r2, #2
 8013ed0:	f105 010c 	add.w	r1, r5, #12
 8013ed4:	300c      	adds	r0, #12
 8013ed6:	f7ff fa6a 	bl	80133ae <memcpy>
 8013eda:	2201      	movs	r2, #1
 8013edc:	4631      	mov	r1, r6
 8013ede:	4648      	mov	r0, r9
 8013ee0:	f000 fedc 	bl	8014c9c <__lshift>
 8013ee4:	f10a 0301 	add.w	r3, sl, #1
 8013ee8:	9300      	str	r3, [sp, #0]
 8013eea:	eb0a 030b 	add.w	r3, sl, fp
 8013eee:	9308      	str	r3, [sp, #32]
 8013ef0:	9b04      	ldr	r3, [sp, #16]
 8013ef2:	f003 0301 	and.w	r3, r3, #1
 8013ef6:	462f      	mov	r7, r5
 8013ef8:	9306      	str	r3, [sp, #24]
 8013efa:	4605      	mov	r5, r0
 8013efc:	9b00      	ldr	r3, [sp, #0]
 8013efe:	9802      	ldr	r0, [sp, #8]
 8013f00:	4621      	mov	r1, r4
 8013f02:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f06:	f7ff fa89 	bl	801341c <quorem>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	3330      	adds	r3, #48	@ 0x30
 8013f0e:	9003      	str	r0, [sp, #12]
 8013f10:	4639      	mov	r1, r7
 8013f12:	9802      	ldr	r0, [sp, #8]
 8013f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f16:	f000 ff2d 	bl	8014d74 <__mcmp>
 8013f1a:	462a      	mov	r2, r5
 8013f1c:	9004      	str	r0, [sp, #16]
 8013f1e:	4621      	mov	r1, r4
 8013f20:	4648      	mov	r0, r9
 8013f22:	f000 ff43 	bl	8014dac <__mdiff>
 8013f26:	68c2      	ldr	r2, [r0, #12]
 8013f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	bb02      	cbnz	r2, 8013f70 <_dtoa_r+0xa40>
 8013f2e:	4601      	mov	r1, r0
 8013f30:	9802      	ldr	r0, [sp, #8]
 8013f32:	f000 ff1f 	bl	8014d74 <__mcmp>
 8013f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f38:	4602      	mov	r2, r0
 8013f3a:	4631      	mov	r1, r6
 8013f3c:	4648      	mov	r0, r9
 8013f3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8013f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f42:	f000 fc9b 	bl	801487c <_Bfree>
 8013f46:	9b07      	ldr	r3, [sp, #28]
 8013f48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013f4a:	9e00      	ldr	r6, [sp, #0]
 8013f4c:	ea42 0103 	orr.w	r1, r2, r3
 8013f50:	9b06      	ldr	r3, [sp, #24]
 8013f52:	4319      	orrs	r1, r3
 8013f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f56:	d10d      	bne.n	8013f74 <_dtoa_r+0xa44>
 8013f58:	2b39      	cmp	r3, #57	@ 0x39
 8013f5a:	d027      	beq.n	8013fac <_dtoa_r+0xa7c>
 8013f5c:	9a04      	ldr	r2, [sp, #16]
 8013f5e:	2a00      	cmp	r2, #0
 8013f60:	dd01      	ble.n	8013f66 <_dtoa_r+0xa36>
 8013f62:	9b03      	ldr	r3, [sp, #12]
 8013f64:	3331      	adds	r3, #49	@ 0x31
 8013f66:	f88b 3000 	strb.w	r3, [fp]
 8013f6a:	e52e      	b.n	80139ca <_dtoa_r+0x49a>
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	e7b9      	b.n	8013ee4 <_dtoa_r+0x9b4>
 8013f70:	2201      	movs	r2, #1
 8013f72:	e7e2      	b.n	8013f3a <_dtoa_r+0xa0a>
 8013f74:	9904      	ldr	r1, [sp, #16]
 8013f76:	2900      	cmp	r1, #0
 8013f78:	db04      	blt.n	8013f84 <_dtoa_r+0xa54>
 8013f7a:	9807      	ldr	r0, [sp, #28]
 8013f7c:	4301      	orrs	r1, r0
 8013f7e:	9806      	ldr	r0, [sp, #24]
 8013f80:	4301      	orrs	r1, r0
 8013f82:	d120      	bne.n	8013fc6 <_dtoa_r+0xa96>
 8013f84:	2a00      	cmp	r2, #0
 8013f86:	ddee      	ble.n	8013f66 <_dtoa_r+0xa36>
 8013f88:	9902      	ldr	r1, [sp, #8]
 8013f8a:	9300      	str	r3, [sp, #0]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	4648      	mov	r0, r9
 8013f90:	f000 fe84 	bl	8014c9c <__lshift>
 8013f94:	4621      	mov	r1, r4
 8013f96:	9002      	str	r0, [sp, #8]
 8013f98:	f000 feec 	bl	8014d74 <__mcmp>
 8013f9c:	2800      	cmp	r0, #0
 8013f9e:	9b00      	ldr	r3, [sp, #0]
 8013fa0:	dc02      	bgt.n	8013fa8 <_dtoa_r+0xa78>
 8013fa2:	d1e0      	bne.n	8013f66 <_dtoa_r+0xa36>
 8013fa4:	07da      	lsls	r2, r3, #31
 8013fa6:	d5de      	bpl.n	8013f66 <_dtoa_r+0xa36>
 8013fa8:	2b39      	cmp	r3, #57	@ 0x39
 8013faa:	d1da      	bne.n	8013f62 <_dtoa_r+0xa32>
 8013fac:	2339      	movs	r3, #57	@ 0x39
 8013fae:	f88b 3000 	strb.w	r3, [fp]
 8013fb2:	4633      	mov	r3, r6
 8013fb4:	461e      	mov	r6, r3
 8013fb6:	3b01      	subs	r3, #1
 8013fb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013fbc:	2a39      	cmp	r2, #57	@ 0x39
 8013fbe:	d04e      	beq.n	801405e <_dtoa_r+0xb2e>
 8013fc0:	3201      	adds	r2, #1
 8013fc2:	701a      	strb	r2, [r3, #0]
 8013fc4:	e501      	b.n	80139ca <_dtoa_r+0x49a>
 8013fc6:	2a00      	cmp	r2, #0
 8013fc8:	dd03      	ble.n	8013fd2 <_dtoa_r+0xaa2>
 8013fca:	2b39      	cmp	r3, #57	@ 0x39
 8013fcc:	d0ee      	beq.n	8013fac <_dtoa_r+0xa7c>
 8013fce:	3301      	adds	r3, #1
 8013fd0:	e7c9      	b.n	8013f66 <_dtoa_r+0xa36>
 8013fd2:	9a00      	ldr	r2, [sp, #0]
 8013fd4:	9908      	ldr	r1, [sp, #32]
 8013fd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013fda:	428a      	cmp	r2, r1
 8013fdc:	d028      	beq.n	8014030 <_dtoa_r+0xb00>
 8013fde:	9902      	ldr	r1, [sp, #8]
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	220a      	movs	r2, #10
 8013fe4:	4648      	mov	r0, r9
 8013fe6:	f000 fc6b 	bl	80148c0 <__multadd>
 8013fea:	42af      	cmp	r7, r5
 8013fec:	9002      	str	r0, [sp, #8]
 8013fee:	f04f 0300 	mov.w	r3, #0
 8013ff2:	f04f 020a 	mov.w	r2, #10
 8013ff6:	4639      	mov	r1, r7
 8013ff8:	4648      	mov	r0, r9
 8013ffa:	d107      	bne.n	801400c <_dtoa_r+0xadc>
 8013ffc:	f000 fc60 	bl	80148c0 <__multadd>
 8014000:	4607      	mov	r7, r0
 8014002:	4605      	mov	r5, r0
 8014004:	9b00      	ldr	r3, [sp, #0]
 8014006:	3301      	adds	r3, #1
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	e777      	b.n	8013efc <_dtoa_r+0x9cc>
 801400c:	f000 fc58 	bl	80148c0 <__multadd>
 8014010:	4629      	mov	r1, r5
 8014012:	4607      	mov	r7, r0
 8014014:	2300      	movs	r3, #0
 8014016:	220a      	movs	r2, #10
 8014018:	4648      	mov	r0, r9
 801401a:	f000 fc51 	bl	80148c0 <__multadd>
 801401e:	4605      	mov	r5, r0
 8014020:	e7f0      	b.n	8014004 <_dtoa_r+0xad4>
 8014022:	f1bb 0f00 	cmp.w	fp, #0
 8014026:	bfcc      	ite	gt
 8014028:	465e      	movgt	r6, fp
 801402a:	2601      	movle	r6, #1
 801402c:	4456      	add	r6, sl
 801402e:	2700      	movs	r7, #0
 8014030:	9902      	ldr	r1, [sp, #8]
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	2201      	movs	r2, #1
 8014036:	4648      	mov	r0, r9
 8014038:	f000 fe30 	bl	8014c9c <__lshift>
 801403c:	4621      	mov	r1, r4
 801403e:	9002      	str	r0, [sp, #8]
 8014040:	f000 fe98 	bl	8014d74 <__mcmp>
 8014044:	2800      	cmp	r0, #0
 8014046:	dcb4      	bgt.n	8013fb2 <_dtoa_r+0xa82>
 8014048:	d102      	bne.n	8014050 <_dtoa_r+0xb20>
 801404a:	9b00      	ldr	r3, [sp, #0]
 801404c:	07db      	lsls	r3, r3, #31
 801404e:	d4b0      	bmi.n	8013fb2 <_dtoa_r+0xa82>
 8014050:	4633      	mov	r3, r6
 8014052:	461e      	mov	r6, r3
 8014054:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014058:	2a30      	cmp	r2, #48	@ 0x30
 801405a:	d0fa      	beq.n	8014052 <_dtoa_r+0xb22>
 801405c:	e4b5      	b.n	80139ca <_dtoa_r+0x49a>
 801405e:	459a      	cmp	sl, r3
 8014060:	d1a8      	bne.n	8013fb4 <_dtoa_r+0xa84>
 8014062:	2331      	movs	r3, #49	@ 0x31
 8014064:	f108 0801 	add.w	r8, r8, #1
 8014068:	f88a 3000 	strb.w	r3, [sl]
 801406c:	e4ad      	b.n	80139ca <_dtoa_r+0x49a>
 801406e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014070:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80140cc <_dtoa_r+0xb9c>
 8014074:	b11b      	cbz	r3, 801407e <_dtoa_r+0xb4e>
 8014076:	f10a 0308 	add.w	r3, sl, #8
 801407a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801407c:	6013      	str	r3, [r2, #0]
 801407e:	4650      	mov	r0, sl
 8014080:	b017      	add	sp, #92	@ 0x5c
 8014082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014086:	9b07      	ldr	r3, [sp, #28]
 8014088:	2b01      	cmp	r3, #1
 801408a:	f77f ae2e 	ble.w	8013cea <_dtoa_r+0x7ba>
 801408e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014090:	9308      	str	r3, [sp, #32]
 8014092:	2001      	movs	r0, #1
 8014094:	e64d      	b.n	8013d32 <_dtoa_r+0x802>
 8014096:	f1bb 0f00 	cmp.w	fp, #0
 801409a:	f77f aed9 	ble.w	8013e50 <_dtoa_r+0x920>
 801409e:	4656      	mov	r6, sl
 80140a0:	9802      	ldr	r0, [sp, #8]
 80140a2:	4621      	mov	r1, r4
 80140a4:	f7ff f9ba 	bl	801341c <quorem>
 80140a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80140ac:	f806 3b01 	strb.w	r3, [r6], #1
 80140b0:	eba6 020a 	sub.w	r2, r6, sl
 80140b4:	4593      	cmp	fp, r2
 80140b6:	ddb4      	ble.n	8014022 <_dtoa_r+0xaf2>
 80140b8:	9902      	ldr	r1, [sp, #8]
 80140ba:	2300      	movs	r3, #0
 80140bc:	220a      	movs	r2, #10
 80140be:	4648      	mov	r0, r9
 80140c0:	f000 fbfe 	bl	80148c0 <__multadd>
 80140c4:	9002      	str	r0, [sp, #8]
 80140c6:	e7eb      	b.n	80140a0 <_dtoa_r+0xb70>
 80140c8:	080167d4 	.word	0x080167d4
 80140cc:	0801676f 	.word	0x0801676f

080140d0 <_free_r>:
 80140d0:	b538      	push	{r3, r4, r5, lr}
 80140d2:	4605      	mov	r5, r0
 80140d4:	2900      	cmp	r1, #0
 80140d6:	d041      	beq.n	801415c <_free_r+0x8c>
 80140d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140dc:	1f0c      	subs	r4, r1, #4
 80140de:	2b00      	cmp	r3, #0
 80140e0:	bfb8      	it	lt
 80140e2:	18e4      	addlt	r4, r4, r3
 80140e4:	f7fd fbbe 	bl	8011864 <__malloc_lock>
 80140e8:	4a1d      	ldr	r2, [pc, #116]	@ (8014160 <_free_r+0x90>)
 80140ea:	6813      	ldr	r3, [r2, #0]
 80140ec:	b933      	cbnz	r3, 80140fc <_free_r+0x2c>
 80140ee:	6063      	str	r3, [r4, #4]
 80140f0:	6014      	str	r4, [r2, #0]
 80140f2:	4628      	mov	r0, r5
 80140f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140f8:	f7fd bbba 	b.w	8011870 <__malloc_unlock>
 80140fc:	42a3      	cmp	r3, r4
 80140fe:	d908      	bls.n	8014112 <_free_r+0x42>
 8014100:	6820      	ldr	r0, [r4, #0]
 8014102:	1821      	adds	r1, r4, r0
 8014104:	428b      	cmp	r3, r1
 8014106:	bf01      	itttt	eq
 8014108:	6819      	ldreq	r1, [r3, #0]
 801410a:	685b      	ldreq	r3, [r3, #4]
 801410c:	1809      	addeq	r1, r1, r0
 801410e:	6021      	streq	r1, [r4, #0]
 8014110:	e7ed      	b.n	80140ee <_free_r+0x1e>
 8014112:	461a      	mov	r2, r3
 8014114:	685b      	ldr	r3, [r3, #4]
 8014116:	b10b      	cbz	r3, 801411c <_free_r+0x4c>
 8014118:	42a3      	cmp	r3, r4
 801411a:	d9fa      	bls.n	8014112 <_free_r+0x42>
 801411c:	6811      	ldr	r1, [r2, #0]
 801411e:	1850      	adds	r0, r2, r1
 8014120:	42a0      	cmp	r0, r4
 8014122:	d10b      	bne.n	801413c <_free_r+0x6c>
 8014124:	6820      	ldr	r0, [r4, #0]
 8014126:	4401      	add	r1, r0
 8014128:	1850      	adds	r0, r2, r1
 801412a:	4283      	cmp	r3, r0
 801412c:	6011      	str	r1, [r2, #0]
 801412e:	d1e0      	bne.n	80140f2 <_free_r+0x22>
 8014130:	6818      	ldr	r0, [r3, #0]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	6053      	str	r3, [r2, #4]
 8014136:	4408      	add	r0, r1
 8014138:	6010      	str	r0, [r2, #0]
 801413a:	e7da      	b.n	80140f2 <_free_r+0x22>
 801413c:	d902      	bls.n	8014144 <_free_r+0x74>
 801413e:	230c      	movs	r3, #12
 8014140:	602b      	str	r3, [r5, #0]
 8014142:	e7d6      	b.n	80140f2 <_free_r+0x22>
 8014144:	6820      	ldr	r0, [r4, #0]
 8014146:	1821      	adds	r1, r4, r0
 8014148:	428b      	cmp	r3, r1
 801414a:	bf04      	itt	eq
 801414c:	6819      	ldreq	r1, [r3, #0]
 801414e:	685b      	ldreq	r3, [r3, #4]
 8014150:	6063      	str	r3, [r4, #4]
 8014152:	bf04      	itt	eq
 8014154:	1809      	addeq	r1, r1, r0
 8014156:	6021      	streq	r1, [r4, #0]
 8014158:	6054      	str	r4, [r2, #4]
 801415a:	e7ca      	b.n	80140f2 <_free_r+0x22>
 801415c:	bd38      	pop	{r3, r4, r5, pc}
 801415e:	bf00      	nop
 8014160:	200136e8 	.word	0x200136e8

08014164 <rshift>:
 8014164:	6903      	ldr	r3, [r0, #16]
 8014166:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801416a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801416e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014172:	f100 0414 	add.w	r4, r0, #20
 8014176:	dd45      	ble.n	8014204 <rshift+0xa0>
 8014178:	f011 011f 	ands.w	r1, r1, #31
 801417c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014184:	d10c      	bne.n	80141a0 <rshift+0x3c>
 8014186:	f100 0710 	add.w	r7, r0, #16
 801418a:	4629      	mov	r1, r5
 801418c:	42b1      	cmp	r1, r6
 801418e:	d334      	bcc.n	80141fa <rshift+0x96>
 8014190:	1a9b      	subs	r3, r3, r2
 8014192:	009b      	lsls	r3, r3, #2
 8014194:	1eea      	subs	r2, r5, #3
 8014196:	4296      	cmp	r6, r2
 8014198:	bf38      	it	cc
 801419a:	2300      	movcc	r3, #0
 801419c:	4423      	add	r3, r4
 801419e:	e015      	b.n	80141cc <rshift+0x68>
 80141a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80141a4:	f1c1 0820 	rsb	r8, r1, #32
 80141a8:	40cf      	lsrs	r7, r1
 80141aa:	f105 0e04 	add.w	lr, r5, #4
 80141ae:	46a1      	mov	r9, r4
 80141b0:	4576      	cmp	r6, lr
 80141b2:	46f4      	mov	ip, lr
 80141b4:	d815      	bhi.n	80141e2 <rshift+0x7e>
 80141b6:	1a9a      	subs	r2, r3, r2
 80141b8:	0092      	lsls	r2, r2, #2
 80141ba:	3a04      	subs	r2, #4
 80141bc:	3501      	adds	r5, #1
 80141be:	42ae      	cmp	r6, r5
 80141c0:	bf38      	it	cc
 80141c2:	2200      	movcc	r2, #0
 80141c4:	18a3      	adds	r3, r4, r2
 80141c6:	50a7      	str	r7, [r4, r2]
 80141c8:	b107      	cbz	r7, 80141cc <rshift+0x68>
 80141ca:	3304      	adds	r3, #4
 80141cc:	1b1a      	subs	r2, r3, r4
 80141ce:	42a3      	cmp	r3, r4
 80141d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80141d4:	bf08      	it	eq
 80141d6:	2300      	moveq	r3, #0
 80141d8:	6102      	str	r2, [r0, #16]
 80141da:	bf08      	it	eq
 80141dc:	6143      	streq	r3, [r0, #20]
 80141de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141e2:	f8dc c000 	ldr.w	ip, [ip]
 80141e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80141ea:	ea4c 0707 	orr.w	r7, ip, r7
 80141ee:	f849 7b04 	str.w	r7, [r9], #4
 80141f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80141f6:	40cf      	lsrs	r7, r1
 80141f8:	e7da      	b.n	80141b0 <rshift+0x4c>
 80141fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80141fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8014202:	e7c3      	b.n	801418c <rshift+0x28>
 8014204:	4623      	mov	r3, r4
 8014206:	e7e1      	b.n	80141cc <rshift+0x68>

08014208 <__hexdig_fun>:
 8014208:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801420c:	2b09      	cmp	r3, #9
 801420e:	d802      	bhi.n	8014216 <__hexdig_fun+0xe>
 8014210:	3820      	subs	r0, #32
 8014212:	b2c0      	uxtb	r0, r0
 8014214:	4770      	bx	lr
 8014216:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801421a:	2b05      	cmp	r3, #5
 801421c:	d801      	bhi.n	8014222 <__hexdig_fun+0x1a>
 801421e:	3847      	subs	r0, #71	@ 0x47
 8014220:	e7f7      	b.n	8014212 <__hexdig_fun+0xa>
 8014222:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014226:	2b05      	cmp	r3, #5
 8014228:	d801      	bhi.n	801422e <__hexdig_fun+0x26>
 801422a:	3827      	subs	r0, #39	@ 0x27
 801422c:	e7f1      	b.n	8014212 <__hexdig_fun+0xa>
 801422e:	2000      	movs	r0, #0
 8014230:	4770      	bx	lr
	...

08014234 <__gethex>:
 8014234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014238:	b085      	sub	sp, #20
 801423a:	468a      	mov	sl, r1
 801423c:	9302      	str	r3, [sp, #8]
 801423e:	680b      	ldr	r3, [r1, #0]
 8014240:	9001      	str	r0, [sp, #4]
 8014242:	4690      	mov	r8, r2
 8014244:	1c9c      	adds	r4, r3, #2
 8014246:	46a1      	mov	r9, r4
 8014248:	f814 0b01 	ldrb.w	r0, [r4], #1
 801424c:	2830      	cmp	r0, #48	@ 0x30
 801424e:	d0fa      	beq.n	8014246 <__gethex+0x12>
 8014250:	eba9 0303 	sub.w	r3, r9, r3
 8014254:	f1a3 0b02 	sub.w	fp, r3, #2
 8014258:	f7ff ffd6 	bl	8014208 <__hexdig_fun>
 801425c:	4605      	mov	r5, r0
 801425e:	2800      	cmp	r0, #0
 8014260:	d168      	bne.n	8014334 <__gethex+0x100>
 8014262:	49a0      	ldr	r1, [pc, #640]	@ (80144e4 <__gethex+0x2b0>)
 8014264:	2201      	movs	r2, #1
 8014266:	4648      	mov	r0, r9
 8014268:	f7fe ff46 	bl	80130f8 <strncmp>
 801426c:	4607      	mov	r7, r0
 801426e:	2800      	cmp	r0, #0
 8014270:	d167      	bne.n	8014342 <__gethex+0x10e>
 8014272:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014276:	4626      	mov	r6, r4
 8014278:	f7ff ffc6 	bl	8014208 <__hexdig_fun>
 801427c:	2800      	cmp	r0, #0
 801427e:	d062      	beq.n	8014346 <__gethex+0x112>
 8014280:	4623      	mov	r3, r4
 8014282:	7818      	ldrb	r0, [r3, #0]
 8014284:	2830      	cmp	r0, #48	@ 0x30
 8014286:	4699      	mov	r9, r3
 8014288:	f103 0301 	add.w	r3, r3, #1
 801428c:	d0f9      	beq.n	8014282 <__gethex+0x4e>
 801428e:	f7ff ffbb 	bl	8014208 <__hexdig_fun>
 8014292:	fab0 f580 	clz	r5, r0
 8014296:	096d      	lsrs	r5, r5, #5
 8014298:	f04f 0b01 	mov.w	fp, #1
 801429c:	464a      	mov	r2, r9
 801429e:	4616      	mov	r6, r2
 80142a0:	3201      	adds	r2, #1
 80142a2:	7830      	ldrb	r0, [r6, #0]
 80142a4:	f7ff ffb0 	bl	8014208 <__hexdig_fun>
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d1f8      	bne.n	801429e <__gethex+0x6a>
 80142ac:	498d      	ldr	r1, [pc, #564]	@ (80144e4 <__gethex+0x2b0>)
 80142ae:	2201      	movs	r2, #1
 80142b0:	4630      	mov	r0, r6
 80142b2:	f7fe ff21 	bl	80130f8 <strncmp>
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d13f      	bne.n	801433a <__gethex+0x106>
 80142ba:	b944      	cbnz	r4, 80142ce <__gethex+0x9a>
 80142bc:	1c74      	adds	r4, r6, #1
 80142be:	4622      	mov	r2, r4
 80142c0:	4616      	mov	r6, r2
 80142c2:	3201      	adds	r2, #1
 80142c4:	7830      	ldrb	r0, [r6, #0]
 80142c6:	f7ff ff9f 	bl	8014208 <__hexdig_fun>
 80142ca:	2800      	cmp	r0, #0
 80142cc:	d1f8      	bne.n	80142c0 <__gethex+0x8c>
 80142ce:	1ba4      	subs	r4, r4, r6
 80142d0:	00a7      	lsls	r7, r4, #2
 80142d2:	7833      	ldrb	r3, [r6, #0]
 80142d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80142d8:	2b50      	cmp	r3, #80	@ 0x50
 80142da:	d13e      	bne.n	801435a <__gethex+0x126>
 80142dc:	7873      	ldrb	r3, [r6, #1]
 80142de:	2b2b      	cmp	r3, #43	@ 0x2b
 80142e0:	d033      	beq.n	801434a <__gethex+0x116>
 80142e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80142e4:	d034      	beq.n	8014350 <__gethex+0x11c>
 80142e6:	1c71      	adds	r1, r6, #1
 80142e8:	2400      	movs	r4, #0
 80142ea:	7808      	ldrb	r0, [r1, #0]
 80142ec:	f7ff ff8c 	bl	8014208 <__hexdig_fun>
 80142f0:	1e43      	subs	r3, r0, #1
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	2b18      	cmp	r3, #24
 80142f6:	d830      	bhi.n	801435a <__gethex+0x126>
 80142f8:	f1a0 0210 	sub.w	r2, r0, #16
 80142fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014300:	f7ff ff82 	bl	8014208 <__hexdig_fun>
 8014304:	f100 3cff 	add.w	ip, r0, #4294967295
 8014308:	fa5f fc8c 	uxtb.w	ip, ip
 801430c:	f1bc 0f18 	cmp.w	ip, #24
 8014310:	f04f 030a 	mov.w	r3, #10
 8014314:	d91e      	bls.n	8014354 <__gethex+0x120>
 8014316:	b104      	cbz	r4, 801431a <__gethex+0xe6>
 8014318:	4252      	negs	r2, r2
 801431a:	4417      	add	r7, r2
 801431c:	f8ca 1000 	str.w	r1, [sl]
 8014320:	b1ed      	cbz	r5, 801435e <__gethex+0x12a>
 8014322:	f1bb 0f00 	cmp.w	fp, #0
 8014326:	bf0c      	ite	eq
 8014328:	2506      	moveq	r5, #6
 801432a:	2500      	movne	r5, #0
 801432c:	4628      	mov	r0, r5
 801432e:	b005      	add	sp, #20
 8014330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014334:	2500      	movs	r5, #0
 8014336:	462c      	mov	r4, r5
 8014338:	e7b0      	b.n	801429c <__gethex+0x68>
 801433a:	2c00      	cmp	r4, #0
 801433c:	d1c7      	bne.n	80142ce <__gethex+0x9a>
 801433e:	4627      	mov	r7, r4
 8014340:	e7c7      	b.n	80142d2 <__gethex+0x9e>
 8014342:	464e      	mov	r6, r9
 8014344:	462f      	mov	r7, r5
 8014346:	2501      	movs	r5, #1
 8014348:	e7c3      	b.n	80142d2 <__gethex+0x9e>
 801434a:	2400      	movs	r4, #0
 801434c:	1cb1      	adds	r1, r6, #2
 801434e:	e7cc      	b.n	80142ea <__gethex+0xb6>
 8014350:	2401      	movs	r4, #1
 8014352:	e7fb      	b.n	801434c <__gethex+0x118>
 8014354:	fb03 0002 	mla	r0, r3, r2, r0
 8014358:	e7ce      	b.n	80142f8 <__gethex+0xc4>
 801435a:	4631      	mov	r1, r6
 801435c:	e7de      	b.n	801431c <__gethex+0xe8>
 801435e:	eba6 0309 	sub.w	r3, r6, r9
 8014362:	3b01      	subs	r3, #1
 8014364:	4629      	mov	r1, r5
 8014366:	2b07      	cmp	r3, #7
 8014368:	dc0a      	bgt.n	8014380 <__gethex+0x14c>
 801436a:	9801      	ldr	r0, [sp, #4]
 801436c:	f000 fa46 	bl	80147fc <_Balloc>
 8014370:	4604      	mov	r4, r0
 8014372:	b940      	cbnz	r0, 8014386 <__gethex+0x152>
 8014374:	4b5c      	ldr	r3, [pc, #368]	@ (80144e8 <__gethex+0x2b4>)
 8014376:	4602      	mov	r2, r0
 8014378:	21e4      	movs	r1, #228	@ 0xe4
 801437a:	485c      	ldr	r0, [pc, #368]	@ (80144ec <__gethex+0x2b8>)
 801437c:	f7ff f830 	bl	80133e0 <__assert_func>
 8014380:	3101      	adds	r1, #1
 8014382:	105b      	asrs	r3, r3, #1
 8014384:	e7ef      	b.n	8014366 <__gethex+0x132>
 8014386:	f100 0a14 	add.w	sl, r0, #20
 801438a:	2300      	movs	r3, #0
 801438c:	4655      	mov	r5, sl
 801438e:	469b      	mov	fp, r3
 8014390:	45b1      	cmp	r9, r6
 8014392:	d337      	bcc.n	8014404 <__gethex+0x1d0>
 8014394:	f845 bb04 	str.w	fp, [r5], #4
 8014398:	eba5 050a 	sub.w	r5, r5, sl
 801439c:	10ad      	asrs	r5, r5, #2
 801439e:	6125      	str	r5, [r4, #16]
 80143a0:	4658      	mov	r0, fp
 80143a2:	f000 fb1d 	bl	80149e0 <__hi0bits>
 80143a6:	016d      	lsls	r5, r5, #5
 80143a8:	f8d8 6000 	ldr.w	r6, [r8]
 80143ac:	1a2d      	subs	r5, r5, r0
 80143ae:	42b5      	cmp	r5, r6
 80143b0:	dd54      	ble.n	801445c <__gethex+0x228>
 80143b2:	1bad      	subs	r5, r5, r6
 80143b4:	4629      	mov	r1, r5
 80143b6:	4620      	mov	r0, r4
 80143b8:	f000 fea9 	bl	801510e <__any_on>
 80143bc:	4681      	mov	r9, r0
 80143be:	b178      	cbz	r0, 80143e0 <__gethex+0x1ac>
 80143c0:	1e6b      	subs	r3, r5, #1
 80143c2:	1159      	asrs	r1, r3, #5
 80143c4:	f003 021f 	and.w	r2, r3, #31
 80143c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80143cc:	f04f 0901 	mov.w	r9, #1
 80143d0:	fa09 f202 	lsl.w	r2, r9, r2
 80143d4:	420a      	tst	r2, r1
 80143d6:	d003      	beq.n	80143e0 <__gethex+0x1ac>
 80143d8:	454b      	cmp	r3, r9
 80143da:	dc36      	bgt.n	801444a <__gethex+0x216>
 80143dc:	f04f 0902 	mov.w	r9, #2
 80143e0:	4629      	mov	r1, r5
 80143e2:	4620      	mov	r0, r4
 80143e4:	f7ff febe 	bl	8014164 <rshift>
 80143e8:	442f      	add	r7, r5
 80143ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80143ee:	42bb      	cmp	r3, r7
 80143f0:	da42      	bge.n	8014478 <__gethex+0x244>
 80143f2:	9801      	ldr	r0, [sp, #4]
 80143f4:	4621      	mov	r1, r4
 80143f6:	f000 fa41 	bl	801487c <_Bfree>
 80143fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80143fc:	2300      	movs	r3, #0
 80143fe:	6013      	str	r3, [r2, #0]
 8014400:	25a3      	movs	r5, #163	@ 0xa3
 8014402:	e793      	b.n	801432c <__gethex+0xf8>
 8014404:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014408:	2a2e      	cmp	r2, #46	@ 0x2e
 801440a:	d012      	beq.n	8014432 <__gethex+0x1fe>
 801440c:	2b20      	cmp	r3, #32
 801440e:	d104      	bne.n	801441a <__gethex+0x1e6>
 8014410:	f845 bb04 	str.w	fp, [r5], #4
 8014414:	f04f 0b00 	mov.w	fp, #0
 8014418:	465b      	mov	r3, fp
 801441a:	7830      	ldrb	r0, [r6, #0]
 801441c:	9303      	str	r3, [sp, #12]
 801441e:	f7ff fef3 	bl	8014208 <__hexdig_fun>
 8014422:	9b03      	ldr	r3, [sp, #12]
 8014424:	f000 000f 	and.w	r0, r0, #15
 8014428:	4098      	lsls	r0, r3
 801442a:	ea4b 0b00 	orr.w	fp, fp, r0
 801442e:	3304      	adds	r3, #4
 8014430:	e7ae      	b.n	8014390 <__gethex+0x15c>
 8014432:	45b1      	cmp	r9, r6
 8014434:	d8ea      	bhi.n	801440c <__gethex+0x1d8>
 8014436:	492b      	ldr	r1, [pc, #172]	@ (80144e4 <__gethex+0x2b0>)
 8014438:	9303      	str	r3, [sp, #12]
 801443a:	2201      	movs	r2, #1
 801443c:	4630      	mov	r0, r6
 801443e:	f7fe fe5b 	bl	80130f8 <strncmp>
 8014442:	9b03      	ldr	r3, [sp, #12]
 8014444:	2800      	cmp	r0, #0
 8014446:	d1e1      	bne.n	801440c <__gethex+0x1d8>
 8014448:	e7a2      	b.n	8014390 <__gethex+0x15c>
 801444a:	1ea9      	subs	r1, r5, #2
 801444c:	4620      	mov	r0, r4
 801444e:	f000 fe5e 	bl	801510e <__any_on>
 8014452:	2800      	cmp	r0, #0
 8014454:	d0c2      	beq.n	80143dc <__gethex+0x1a8>
 8014456:	f04f 0903 	mov.w	r9, #3
 801445a:	e7c1      	b.n	80143e0 <__gethex+0x1ac>
 801445c:	da09      	bge.n	8014472 <__gethex+0x23e>
 801445e:	1b75      	subs	r5, r6, r5
 8014460:	4621      	mov	r1, r4
 8014462:	9801      	ldr	r0, [sp, #4]
 8014464:	462a      	mov	r2, r5
 8014466:	f000 fc19 	bl	8014c9c <__lshift>
 801446a:	1b7f      	subs	r7, r7, r5
 801446c:	4604      	mov	r4, r0
 801446e:	f100 0a14 	add.w	sl, r0, #20
 8014472:	f04f 0900 	mov.w	r9, #0
 8014476:	e7b8      	b.n	80143ea <__gethex+0x1b6>
 8014478:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801447c:	42bd      	cmp	r5, r7
 801447e:	dd6f      	ble.n	8014560 <__gethex+0x32c>
 8014480:	1bed      	subs	r5, r5, r7
 8014482:	42ae      	cmp	r6, r5
 8014484:	dc34      	bgt.n	80144f0 <__gethex+0x2bc>
 8014486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801448a:	2b02      	cmp	r3, #2
 801448c:	d022      	beq.n	80144d4 <__gethex+0x2a0>
 801448e:	2b03      	cmp	r3, #3
 8014490:	d024      	beq.n	80144dc <__gethex+0x2a8>
 8014492:	2b01      	cmp	r3, #1
 8014494:	d115      	bne.n	80144c2 <__gethex+0x28e>
 8014496:	42ae      	cmp	r6, r5
 8014498:	d113      	bne.n	80144c2 <__gethex+0x28e>
 801449a:	2e01      	cmp	r6, #1
 801449c:	d10b      	bne.n	80144b6 <__gethex+0x282>
 801449e:	9a02      	ldr	r2, [sp, #8]
 80144a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80144a4:	6013      	str	r3, [r2, #0]
 80144a6:	2301      	movs	r3, #1
 80144a8:	6123      	str	r3, [r4, #16]
 80144aa:	f8ca 3000 	str.w	r3, [sl]
 80144ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144b0:	2562      	movs	r5, #98	@ 0x62
 80144b2:	601c      	str	r4, [r3, #0]
 80144b4:	e73a      	b.n	801432c <__gethex+0xf8>
 80144b6:	1e71      	subs	r1, r6, #1
 80144b8:	4620      	mov	r0, r4
 80144ba:	f000 fe28 	bl	801510e <__any_on>
 80144be:	2800      	cmp	r0, #0
 80144c0:	d1ed      	bne.n	801449e <__gethex+0x26a>
 80144c2:	9801      	ldr	r0, [sp, #4]
 80144c4:	4621      	mov	r1, r4
 80144c6:	f000 f9d9 	bl	801487c <_Bfree>
 80144ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80144cc:	2300      	movs	r3, #0
 80144ce:	6013      	str	r3, [r2, #0]
 80144d0:	2550      	movs	r5, #80	@ 0x50
 80144d2:	e72b      	b.n	801432c <__gethex+0xf8>
 80144d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1f3      	bne.n	80144c2 <__gethex+0x28e>
 80144da:	e7e0      	b.n	801449e <__gethex+0x26a>
 80144dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d1dd      	bne.n	801449e <__gethex+0x26a>
 80144e2:	e7ee      	b.n	80144c2 <__gethex+0x28e>
 80144e4:	08016684 	.word	0x08016684
 80144e8:	080167d4 	.word	0x080167d4
 80144ec:	080167e5 	.word	0x080167e5
 80144f0:	1e6f      	subs	r7, r5, #1
 80144f2:	f1b9 0f00 	cmp.w	r9, #0
 80144f6:	d130      	bne.n	801455a <__gethex+0x326>
 80144f8:	b127      	cbz	r7, 8014504 <__gethex+0x2d0>
 80144fa:	4639      	mov	r1, r7
 80144fc:	4620      	mov	r0, r4
 80144fe:	f000 fe06 	bl	801510e <__any_on>
 8014502:	4681      	mov	r9, r0
 8014504:	117a      	asrs	r2, r7, #5
 8014506:	2301      	movs	r3, #1
 8014508:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801450c:	f007 071f 	and.w	r7, r7, #31
 8014510:	40bb      	lsls	r3, r7
 8014512:	4213      	tst	r3, r2
 8014514:	4629      	mov	r1, r5
 8014516:	4620      	mov	r0, r4
 8014518:	bf18      	it	ne
 801451a:	f049 0902 	orrne.w	r9, r9, #2
 801451e:	f7ff fe21 	bl	8014164 <rshift>
 8014522:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014526:	1b76      	subs	r6, r6, r5
 8014528:	2502      	movs	r5, #2
 801452a:	f1b9 0f00 	cmp.w	r9, #0
 801452e:	d047      	beq.n	80145c0 <__gethex+0x38c>
 8014530:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014534:	2b02      	cmp	r3, #2
 8014536:	d015      	beq.n	8014564 <__gethex+0x330>
 8014538:	2b03      	cmp	r3, #3
 801453a:	d017      	beq.n	801456c <__gethex+0x338>
 801453c:	2b01      	cmp	r3, #1
 801453e:	d109      	bne.n	8014554 <__gethex+0x320>
 8014540:	f019 0f02 	tst.w	r9, #2
 8014544:	d006      	beq.n	8014554 <__gethex+0x320>
 8014546:	f8da 3000 	ldr.w	r3, [sl]
 801454a:	ea49 0903 	orr.w	r9, r9, r3
 801454e:	f019 0f01 	tst.w	r9, #1
 8014552:	d10e      	bne.n	8014572 <__gethex+0x33e>
 8014554:	f045 0510 	orr.w	r5, r5, #16
 8014558:	e032      	b.n	80145c0 <__gethex+0x38c>
 801455a:	f04f 0901 	mov.w	r9, #1
 801455e:	e7d1      	b.n	8014504 <__gethex+0x2d0>
 8014560:	2501      	movs	r5, #1
 8014562:	e7e2      	b.n	801452a <__gethex+0x2f6>
 8014564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014566:	f1c3 0301 	rsb	r3, r3, #1
 801456a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801456c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801456e:	2b00      	cmp	r3, #0
 8014570:	d0f0      	beq.n	8014554 <__gethex+0x320>
 8014572:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014576:	f104 0314 	add.w	r3, r4, #20
 801457a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801457e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014582:	f04f 0c00 	mov.w	ip, #0
 8014586:	4618      	mov	r0, r3
 8014588:	f853 2b04 	ldr.w	r2, [r3], #4
 801458c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014590:	d01b      	beq.n	80145ca <__gethex+0x396>
 8014592:	3201      	adds	r2, #1
 8014594:	6002      	str	r2, [r0, #0]
 8014596:	2d02      	cmp	r5, #2
 8014598:	f104 0314 	add.w	r3, r4, #20
 801459c:	d13c      	bne.n	8014618 <__gethex+0x3e4>
 801459e:	f8d8 2000 	ldr.w	r2, [r8]
 80145a2:	3a01      	subs	r2, #1
 80145a4:	42b2      	cmp	r2, r6
 80145a6:	d109      	bne.n	80145bc <__gethex+0x388>
 80145a8:	1171      	asrs	r1, r6, #5
 80145aa:	2201      	movs	r2, #1
 80145ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145b0:	f006 061f 	and.w	r6, r6, #31
 80145b4:	fa02 f606 	lsl.w	r6, r2, r6
 80145b8:	421e      	tst	r6, r3
 80145ba:	d13a      	bne.n	8014632 <__gethex+0x3fe>
 80145bc:	f045 0520 	orr.w	r5, r5, #32
 80145c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145c2:	601c      	str	r4, [r3, #0]
 80145c4:	9b02      	ldr	r3, [sp, #8]
 80145c6:	601f      	str	r7, [r3, #0]
 80145c8:	e6b0      	b.n	801432c <__gethex+0xf8>
 80145ca:	4299      	cmp	r1, r3
 80145cc:	f843 cc04 	str.w	ip, [r3, #-4]
 80145d0:	d8d9      	bhi.n	8014586 <__gethex+0x352>
 80145d2:	68a3      	ldr	r3, [r4, #8]
 80145d4:	459b      	cmp	fp, r3
 80145d6:	db17      	blt.n	8014608 <__gethex+0x3d4>
 80145d8:	6861      	ldr	r1, [r4, #4]
 80145da:	9801      	ldr	r0, [sp, #4]
 80145dc:	3101      	adds	r1, #1
 80145de:	f000 f90d 	bl	80147fc <_Balloc>
 80145e2:	4681      	mov	r9, r0
 80145e4:	b918      	cbnz	r0, 80145ee <__gethex+0x3ba>
 80145e6:	4b1a      	ldr	r3, [pc, #104]	@ (8014650 <__gethex+0x41c>)
 80145e8:	4602      	mov	r2, r0
 80145ea:	2184      	movs	r1, #132	@ 0x84
 80145ec:	e6c5      	b.n	801437a <__gethex+0x146>
 80145ee:	6922      	ldr	r2, [r4, #16]
 80145f0:	3202      	adds	r2, #2
 80145f2:	f104 010c 	add.w	r1, r4, #12
 80145f6:	0092      	lsls	r2, r2, #2
 80145f8:	300c      	adds	r0, #12
 80145fa:	f7fe fed8 	bl	80133ae <memcpy>
 80145fe:	4621      	mov	r1, r4
 8014600:	9801      	ldr	r0, [sp, #4]
 8014602:	f000 f93b 	bl	801487c <_Bfree>
 8014606:	464c      	mov	r4, r9
 8014608:	6923      	ldr	r3, [r4, #16]
 801460a:	1c5a      	adds	r2, r3, #1
 801460c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014610:	6122      	str	r2, [r4, #16]
 8014612:	2201      	movs	r2, #1
 8014614:	615a      	str	r2, [r3, #20]
 8014616:	e7be      	b.n	8014596 <__gethex+0x362>
 8014618:	6922      	ldr	r2, [r4, #16]
 801461a:	455a      	cmp	r2, fp
 801461c:	dd0b      	ble.n	8014636 <__gethex+0x402>
 801461e:	2101      	movs	r1, #1
 8014620:	4620      	mov	r0, r4
 8014622:	f7ff fd9f 	bl	8014164 <rshift>
 8014626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801462a:	3701      	adds	r7, #1
 801462c:	42bb      	cmp	r3, r7
 801462e:	f6ff aee0 	blt.w	80143f2 <__gethex+0x1be>
 8014632:	2501      	movs	r5, #1
 8014634:	e7c2      	b.n	80145bc <__gethex+0x388>
 8014636:	f016 061f 	ands.w	r6, r6, #31
 801463a:	d0fa      	beq.n	8014632 <__gethex+0x3fe>
 801463c:	4453      	add	r3, sl
 801463e:	f1c6 0620 	rsb	r6, r6, #32
 8014642:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014646:	f000 f9cb 	bl	80149e0 <__hi0bits>
 801464a:	42b0      	cmp	r0, r6
 801464c:	dbe7      	blt.n	801461e <__gethex+0x3ea>
 801464e:	e7f0      	b.n	8014632 <__gethex+0x3fe>
 8014650:	080167d4 	.word	0x080167d4

08014654 <L_shift>:
 8014654:	f1c2 0208 	rsb	r2, r2, #8
 8014658:	0092      	lsls	r2, r2, #2
 801465a:	b570      	push	{r4, r5, r6, lr}
 801465c:	f1c2 0620 	rsb	r6, r2, #32
 8014660:	6843      	ldr	r3, [r0, #4]
 8014662:	6804      	ldr	r4, [r0, #0]
 8014664:	fa03 f506 	lsl.w	r5, r3, r6
 8014668:	432c      	orrs	r4, r5
 801466a:	40d3      	lsrs	r3, r2
 801466c:	6004      	str	r4, [r0, #0]
 801466e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014672:	4288      	cmp	r0, r1
 8014674:	d3f4      	bcc.n	8014660 <L_shift+0xc>
 8014676:	bd70      	pop	{r4, r5, r6, pc}

08014678 <__match>:
 8014678:	b530      	push	{r4, r5, lr}
 801467a:	6803      	ldr	r3, [r0, #0]
 801467c:	3301      	adds	r3, #1
 801467e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014682:	b914      	cbnz	r4, 801468a <__match+0x12>
 8014684:	6003      	str	r3, [r0, #0]
 8014686:	2001      	movs	r0, #1
 8014688:	bd30      	pop	{r4, r5, pc}
 801468a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801468e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014692:	2d19      	cmp	r5, #25
 8014694:	bf98      	it	ls
 8014696:	3220      	addls	r2, #32
 8014698:	42a2      	cmp	r2, r4
 801469a:	d0f0      	beq.n	801467e <__match+0x6>
 801469c:	2000      	movs	r0, #0
 801469e:	e7f3      	b.n	8014688 <__match+0x10>

080146a0 <__hexnan>:
 80146a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146a4:	680b      	ldr	r3, [r1, #0]
 80146a6:	6801      	ldr	r1, [r0, #0]
 80146a8:	115e      	asrs	r6, r3, #5
 80146aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80146ae:	f013 031f 	ands.w	r3, r3, #31
 80146b2:	b087      	sub	sp, #28
 80146b4:	bf18      	it	ne
 80146b6:	3604      	addne	r6, #4
 80146b8:	2500      	movs	r5, #0
 80146ba:	1f37      	subs	r7, r6, #4
 80146bc:	4682      	mov	sl, r0
 80146be:	4690      	mov	r8, r2
 80146c0:	9301      	str	r3, [sp, #4]
 80146c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80146c6:	46b9      	mov	r9, r7
 80146c8:	463c      	mov	r4, r7
 80146ca:	9502      	str	r5, [sp, #8]
 80146cc:	46ab      	mov	fp, r5
 80146ce:	784a      	ldrb	r2, [r1, #1]
 80146d0:	1c4b      	adds	r3, r1, #1
 80146d2:	9303      	str	r3, [sp, #12]
 80146d4:	b342      	cbz	r2, 8014728 <__hexnan+0x88>
 80146d6:	4610      	mov	r0, r2
 80146d8:	9105      	str	r1, [sp, #20]
 80146da:	9204      	str	r2, [sp, #16]
 80146dc:	f7ff fd94 	bl	8014208 <__hexdig_fun>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	d151      	bne.n	8014788 <__hexnan+0xe8>
 80146e4:	9a04      	ldr	r2, [sp, #16]
 80146e6:	9905      	ldr	r1, [sp, #20]
 80146e8:	2a20      	cmp	r2, #32
 80146ea:	d818      	bhi.n	801471e <__hexnan+0x7e>
 80146ec:	9b02      	ldr	r3, [sp, #8]
 80146ee:	459b      	cmp	fp, r3
 80146f0:	dd13      	ble.n	801471a <__hexnan+0x7a>
 80146f2:	454c      	cmp	r4, r9
 80146f4:	d206      	bcs.n	8014704 <__hexnan+0x64>
 80146f6:	2d07      	cmp	r5, #7
 80146f8:	dc04      	bgt.n	8014704 <__hexnan+0x64>
 80146fa:	462a      	mov	r2, r5
 80146fc:	4649      	mov	r1, r9
 80146fe:	4620      	mov	r0, r4
 8014700:	f7ff ffa8 	bl	8014654 <L_shift>
 8014704:	4544      	cmp	r4, r8
 8014706:	d952      	bls.n	80147ae <__hexnan+0x10e>
 8014708:	2300      	movs	r3, #0
 801470a:	f1a4 0904 	sub.w	r9, r4, #4
 801470e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014712:	f8cd b008 	str.w	fp, [sp, #8]
 8014716:	464c      	mov	r4, r9
 8014718:	461d      	mov	r5, r3
 801471a:	9903      	ldr	r1, [sp, #12]
 801471c:	e7d7      	b.n	80146ce <__hexnan+0x2e>
 801471e:	2a29      	cmp	r2, #41	@ 0x29
 8014720:	d157      	bne.n	80147d2 <__hexnan+0x132>
 8014722:	3102      	adds	r1, #2
 8014724:	f8ca 1000 	str.w	r1, [sl]
 8014728:	f1bb 0f00 	cmp.w	fp, #0
 801472c:	d051      	beq.n	80147d2 <__hexnan+0x132>
 801472e:	454c      	cmp	r4, r9
 8014730:	d206      	bcs.n	8014740 <__hexnan+0xa0>
 8014732:	2d07      	cmp	r5, #7
 8014734:	dc04      	bgt.n	8014740 <__hexnan+0xa0>
 8014736:	462a      	mov	r2, r5
 8014738:	4649      	mov	r1, r9
 801473a:	4620      	mov	r0, r4
 801473c:	f7ff ff8a 	bl	8014654 <L_shift>
 8014740:	4544      	cmp	r4, r8
 8014742:	d936      	bls.n	80147b2 <__hexnan+0x112>
 8014744:	f1a8 0204 	sub.w	r2, r8, #4
 8014748:	4623      	mov	r3, r4
 801474a:	f853 1b04 	ldr.w	r1, [r3], #4
 801474e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014752:	429f      	cmp	r7, r3
 8014754:	d2f9      	bcs.n	801474a <__hexnan+0xaa>
 8014756:	1b3b      	subs	r3, r7, r4
 8014758:	f023 0303 	bic.w	r3, r3, #3
 801475c:	3304      	adds	r3, #4
 801475e:	3401      	adds	r4, #1
 8014760:	3e03      	subs	r6, #3
 8014762:	42b4      	cmp	r4, r6
 8014764:	bf88      	it	hi
 8014766:	2304      	movhi	r3, #4
 8014768:	4443      	add	r3, r8
 801476a:	2200      	movs	r2, #0
 801476c:	f843 2b04 	str.w	r2, [r3], #4
 8014770:	429f      	cmp	r7, r3
 8014772:	d2fb      	bcs.n	801476c <__hexnan+0xcc>
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	b91b      	cbnz	r3, 8014780 <__hexnan+0xe0>
 8014778:	4547      	cmp	r7, r8
 801477a:	d128      	bne.n	80147ce <__hexnan+0x12e>
 801477c:	2301      	movs	r3, #1
 801477e:	603b      	str	r3, [r7, #0]
 8014780:	2005      	movs	r0, #5
 8014782:	b007      	add	sp, #28
 8014784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014788:	3501      	adds	r5, #1
 801478a:	2d08      	cmp	r5, #8
 801478c:	f10b 0b01 	add.w	fp, fp, #1
 8014790:	dd06      	ble.n	80147a0 <__hexnan+0x100>
 8014792:	4544      	cmp	r4, r8
 8014794:	d9c1      	bls.n	801471a <__hexnan+0x7a>
 8014796:	2300      	movs	r3, #0
 8014798:	f844 3c04 	str.w	r3, [r4, #-4]
 801479c:	2501      	movs	r5, #1
 801479e:	3c04      	subs	r4, #4
 80147a0:	6822      	ldr	r2, [r4, #0]
 80147a2:	f000 000f 	and.w	r0, r0, #15
 80147a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80147aa:	6020      	str	r0, [r4, #0]
 80147ac:	e7b5      	b.n	801471a <__hexnan+0x7a>
 80147ae:	2508      	movs	r5, #8
 80147b0:	e7b3      	b.n	801471a <__hexnan+0x7a>
 80147b2:	9b01      	ldr	r3, [sp, #4]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d0dd      	beq.n	8014774 <__hexnan+0xd4>
 80147b8:	f1c3 0320 	rsb	r3, r3, #32
 80147bc:	f04f 32ff 	mov.w	r2, #4294967295
 80147c0:	40da      	lsrs	r2, r3
 80147c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80147c6:	4013      	ands	r3, r2
 80147c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80147cc:	e7d2      	b.n	8014774 <__hexnan+0xd4>
 80147ce:	3f04      	subs	r7, #4
 80147d0:	e7d0      	b.n	8014774 <__hexnan+0xd4>
 80147d2:	2004      	movs	r0, #4
 80147d4:	e7d5      	b.n	8014782 <__hexnan+0xe2>

080147d6 <__ascii_mbtowc>:
 80147d6:	b082      	sub	sp, #8
 80147d8:	b901      	cbnz	r1, 80147dc <__ascii_mbtowc+0x6>
 80147da:	a901      	add	r1, sp, #4
 80147dc:	b142      	cbz	r2, 80147f0 <__ascii_mbtowc+0x1a>
 80147de:	b14b      	cbz	r3, 80147f4 <__ascii_mbtowc+0x1e>
 80147e0:	7813      	ldrb	r3, [r2, #0]
 80147e2:	600b      	str	r3, [r1, #0]
 80147e4:	7812      	ldrb	r2, [r2, #0]
 80147e6:	1e10      	subs	r0, r2, #0
 80147e8:	bf18      	it	ne
 80147ea:	2001      	movne	r0, #1
 80147ec:	b002      	add	sp, #8
 80147ee:	4770      	bx	lr
 80147f0:	4610      	mov	r0, r2
 80147f2:	e7fb      	b.n	80147ec <__ascii_mbtowc+0x16>
 80147f4:	f06f 0001 	mvn.w	r0, #1
 80147f8:	e7f8      	b.n	80147ec <__ascii_mbtowc+0x16>
	...

080147fc <_Balloc>:
 80147fc:	b570      	push	{r4, r5, r6, lr}
 80147fe:	69c6      	ldr	r6, [r0, #28]
 8014800:	4604      	mov	r4, r0
 8014802:	460d      	mov	r5, r1
 8014804:	b976      	cbnz	r6, 8014824 <_Balloc+0x28>
 8014806:	2010      	movs	r0, #16
 8014808:	f7fc ff7a 	bl	8011700 <malloc>
 801480c:	4602      	mov	r2, r0
 801480e:	61e0      	str	r0, [r4, #28]
 8014810:	b920      	cbnz	r0, 801481c <_Balloc+0x20>
 8014812:	4b18      	ldr	r3, [pc, #96]	@ (8014874 <_Balloc+0x78>)
 8014814:	4818      	ldr	r0, [pc, #96]	@ (8014878 <_Balloc+0x7c>)
 8014816:	216b      	movs	r1, #107	@ 0x6b
 8014818:	f7fe fde2 	bl	80133e0 <__assert_func>
 801481c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014820:	6006      	str	r6, [r0, #0]
 8014822:	60c6      	str	r6, [r0, #12]
 8014824:	69e6      	ldr	r6, [r4, #28]
 8014826:	68f3      	ldr	r3, [r6, #12]
 8014828:	b183      	cbz	r3, 801484c <_Balloc+0x50>
 801482a:	69e3      	ldr	r3, [r4, #28]
 801482c:	68db      	ldr	r3, [r3, #12]
 801482e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014832:	b9b8      	cbnz	r0, 8014864 <_Balloc+0x68>
 8014834:	2101      	movs	r1, #1
 8014836:	fa01 f605 	lsl.w	r6, r1, r5
 801483a:	1d72      	adds	r2, r6, #5
 801483c:	0092      	lsls	r2, r2, #2
 801483e:	4620      	mov	r0, r4
 8014840:	f000 feaf 	bl	80155a2 <_calloc_r>
 8014844:	b160      	cbz	r0, 8014860 <_Balloc+0x64>
 8014846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801484a:	e00e      	b.n	801486a <_Balloc+0x6e>
 801484c:	2221      	movs	r2, #33	@ 0x21
 801484e:	2104      	movs	r1, #4
 8014850:	4620      	mov	r0, r4
 8014852:	f000 fea6 	bl	80155a2 <_calloc_r>
 8014856:	69e3      	ldr	r3, [r4, #28]
 8014858:	60f0      	str	r0, [r6, #12]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d1e4      	bne.n	801482a <_Balloc+0x2e>
 8014860:	2000      	movs	r0, #0
 8014862:	bd70      	pop	{r4, r5, r6, pc}
 8014864:	6802      	ldr	r2, [r0, #0]
 8014866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801486a:	2300      	movs	r3, #0
 801486c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014870:	e7f7      	b.n	8014862 <_Balloc+0x66>
 8014872:	bf00      	nop
 8014874:	080166ba 	.word	0x080166ba
 8014878:	08016845 	.word	0x08016845

0801487c <_Bfree>:
 801487c:	b570      	push	{r4, r5, r6, lr}
 801487e:	69c6      	ldr	r6, [r0, #28]
 8014880:	4605      	mov	r5, r0
 8014882:	460c      	mov	r4, r1
 8014884:	b976      	cbnz	r6, 80148a4 <_Bfree+0x28>
 8014886:	2010      	movs	r0, #16
 8014888:	f7fc ff3a 	bl	8011700 <malloc>
 801488c:	4602      	mov	r2, r0
 801488e:	61e8      	str	r0, [r5, #28]
 8014890:	b920      	cbnz	r0, 801489c <_Bfree+0x20>
 8014892:	4b09      	ldr	r3, [pc, #36]	@ (80148b8 <_Bfree+0x3c>)
 8014894:	4809      	ldr	r0, [pc, #36]	@ (80148bc <_Bfree+0x40>)
 8014896:	218f      	movs	r1, #143	@ 0x8f
 8014898:	f7fe fda2 	bl	80133e0 <__assert_func>
 801489c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148a0:	6006      	str	r6, [r0, #0]
 80148a2:	60c6      	str	r6, [r0, #12]
 80148a4:	b13c      	cbz	r4, 80148b6 <_Bfree+0x3a>
 80148a6:	69eb      	ldr	r3, [r5, #28]
 80148a8:	6862      	ldr	r2, [r4, #4]
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148b0:	6021      	str	r1, [r4, #0]
 80148b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80148b6:	bd70      	pop	{r4, r5, r6, pc}
 80148b8:	080166ba 	.word	0x080166ba
 80148bc:	08016845 	.word	0x08016845

080148c0 <__multadd>:
 80148c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c4:	690d      	ldr	r5, [r1, #16]
 80148c6:	4607      	mov	r7, r0
 80148c8:	460c      	mov	r4, r1
 80148ca:	461e      	mov	r6, r3
 80148cc:	f101 0c14 	add.w	ip, r1, #20
 80148d0:	2000      	movs	r0, #0
 80148d2:	f8dc 3000 	ldr.w	r3, [ip]
 80148d6:	b299      	uxth	r1, r3
 80148d8:	fb02 6101 	mla	r1, r2, r1, r6
 80148dc:	0c1e      	lsrs	r6, r3, #16
 80148de:	0c0b      	lsrs	r3, r1, #16
 80148e0:	fb02 3306 	mla	r3, r2, r6, r3
 80148e4:	b289      	uxth	r1, r1
 80148e6:	3001      	adds	r0, #1
 80148e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80148ec:	4285      	cmp	r5, r0
 80148ee:	f84c 1b04 	str.w	r1, [ip], #4
 80148f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80148f6:	dcec      	bgt.n	80148d2 <__multadd+0x12>
 80148f8:	b30e      	cbz	r6, 801493e <__multadd+0x7e>
 80148fa:	68a3      	ldr	r3, [r4, #8]
 80148fc:	42ab      	cmp	r3, r5
 80148fe:	dc19      	bgt.n	8014934 <__multadd+0x74>
 8014900:	6861      	ldr	r1, [r4, #4]
 8014902:	4638      	mov	r0, r7
 8014904:	3101      	adds	r1, #1
 8014906:	f7ff ff79 	bl	80147fc <_Balloc>
 801490a:	4680      	mov	r8, r0
 801490c:	b928      	cbnz	r0, 801491a <__multadd+0x5a>
 801490e:	4602      	mov	r2, r0
 8014910:	4b0c      	ldr	r3, [pc, #48]	@ (8014944 <__multadd+0x84>)
 8014912:	480d      	ldr	r0, [pc, #52]	@ (8014948 <__multadd+0x88>)
 8014914:	21ba      	movs	r1, #186	@ 0xba
 8014916:	f7fe fd63 	bl	80133e0 <__assert_func>
 801491a:	6922      	ldr	r2, [r4, #16]
 801491c:	3202      	adds	r2, #2
 801491e:	f104 010c 	add.w	r1, r4, #12
 8014922:	0092      	lsls	r2, r2, #2
 8014924:	300c      	adds	r0, #12
 8014926:	f7fe fd42 	bl	80133ae <memcpy>
 801492a:	4621      	mov	r1, r4
 801492c:	4638      	mov	r0, r7
 801492e:	f7ff ffa5 	bl	801487c <_Bfree>
 8014932:	4644      	mov	r4, r8
 8014934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014938:	3501      	adds	r5, #1
 801493a:	615e      	str	r6, [r3, #20]
 801493c:	6125      	str	r5, [r4, #16]
 801493e:	4620      	mov	r0, r4
 8014940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014944:	080167d4 	.word	0x080167d4
 8014948:	08016845 	.word	0x08016845

0801494c <__s2b>:
 801494c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014950:	460c      	mov	r4, r1
 8014952:	4615      	mov	r5, r2
 8014954:	461f      	mov	r7, r3
 8014956:	2209      	movs	r2, #9
 8014958:	3308      	adds	r3, #8
 801495a:	4606      	mov	r6, r0
 801495c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014960:	2100      	movs	r1, #0
 8014962:	2201      	movs	r2, #1
 8014964:	429a      	cmp	r2, r3
 8014966:	db09      	blt.n	801497c <__s2b+0x30>
 8014968:	4630      	mov	r0, r6
 801496a:	f7ff ff47 	bl	80147fc <_Balloc>
 801496e:	b940      	cbnz	r0, 8014982 <__s2b+0x36>
 8014970:	4602      	mov	r2, r0
 8014972:	4b19      	ldr	r3, [pc, #100]	@ (80149d8 <__s2b+0x8c>)
 8014974:	4819      	ldr	r0, [pc, #100]	@ (80149dc <__s2b+0x90>)
 8014976:	21d3      	movs	r1, #211	@ 0xd3
 8014978:	f7fe fd32 	bl	80133e0 <__assert_func>
 801497c:	0052      	lsls	r2, r2, #1
 801497e:	3101      	adds	r1, #1
 8014980:	e7f0      	b.n	8014964 <__s2b+0x18>
 8014982:	9b08      	ldr	r3, [sp, #32]
 8014984:	6143      	str	r3, [r0, #20]
 8014986:	2d09      	cmp	r5, #9
 8014988:	f04f 0301 	mov.w	r3, #1
 801498c:	6103      	str	r3, [r0, #16]
 801498e:	dd16      	ble.n	80149be <__s2b+0x72>
 8014990:	f104 0909 	add.w	r9, r4, #9
 8014994:	46c8      	mov	r8, r9
 8014996:	442c      	add	r4, r5
 8014998:	f818 3b01 	ldrb.w	r3, [r8], #1
 801499c:	4601      	mov	r1, r0
 801499e:	3b30      	subs	r3, #48	@ 0x30
 80149a0:	220a      	movs	r2, #10
 80149a2:	4630      	mov	r0, r6
 80149a4:	f7ff ff8c 	bl	80148c0 <__multadd>
 80149a8:	45a0      	cmp	r8, r4
 80149aa:	d1f5      	bne.n	8014998 <__s2b+0x4c>
 80149ac:	f1a5 0408 	sub.w	r4, r5, #8
 80149b0:	444c      	add	r4, r9
 80149b2:	1b2d      	subs	r5, r5, r4
 80149b4:	1963      	adds	r3, r4, r5
 80149b6:	42bb      	cmp	r3, r7
 80149b8:	db04      	blt.n	80149c4 <__s2b+0x78>
 80149ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149be:	340a      	adds	r4, #10
 80149c0:	2509      	movs	r5, #9
 80149c2:	e7f6      	b.n	80149b2 <__s2b+0x66>
 80149c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80149c8:	4601      	mov	r1, r0
 80149ca:	3b30      	subs	r3, #48	@ 0x30
 80149cc:	220a      	movs	r2, #10
 80149ce:	4630      	mov	r0, r6
 80149d0:	f7ff ff76 	bl	80148c0 <__multadd>
 80149d4:	e7ee      	b.n	80149b4 <__s2b+0x68>
 80149d6:	bf00      	nop
 80149d8:	080167d4 	.word	0x080167d4
 80149dc:	08016845 	.word	0x08016845

080149e0 <__hi0bits>:
 80149e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80149e4:	4603      	mov	r3, r0
 80149e6:	bf36      	itet	cc
 80149e8:	0403      	lslcc	r3, r0, #16
 80149ea:	2000      	movcs	r0, #0
 80149ec:	2010      	movcc	r0, #16
 80149ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80149f2:	bf3c      	itt	cc
 80149f4:	021b      	lslcc	r3, r3, #8
 80149f6:	3008      	addcc	r0, #8
 80149f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80149fc:	bf3c      	itt	cc
 80149fe:	011b      	lslcc	r3, r3, #4
 8014a00:	3004      	addcc	r0, #4
 8014a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a06:	bf3c      	itt	cc
 8014a08:	009b      	lslcc	r3, r3, #2
 8014a0a:	3002      	addcc	r0, #2
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	db05      	blt.n	8014a1c <__hi0bits+0x3c>
 8014a10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a14:	f100 0001 	add.w	r0, r0, #1
 8014a18:	bf08      	it	eq
 8014a1a:	2020      	moveq	r0, #32
 8014a1c:	4770      	bx	lr

08014a1e <__lo0bits>:
 8014a1e:	6803      	ldr	r3, [r0, #0]
 8014a20:	4602      	mov	r2, r0
 8014a22:	f013 0007 	ands.w	r0, r3, #7
 8014a26:	d00b      	beq.n	8014a40 <__lo0bits+0x22>
 8014a28:	07d9      	lsls	r1, r3, #31
 8014a2a:	d421      	bmi.n	8014a70 <__lo0bits+0x52>
 8014a2c:	0798      	lsls	r0, r3, #30
 8014a2e:	bf49      	itett	mi
 8014a30:	085b      	lsrmi	r3, r3, #1
 8014a32:	089b      	lsrpl	r3, r3, #2
 8014a34:	2001      	movmi	r0, #1
 8014a36:	6013      	strmi	r3, [r2, #0]
 8014a38:	bf5c      	itt	pl
 8014a3a:	6013      	strpl	r3, [r2, #0]
 8014a3c:	2002      	movpl	r0, #2
 8014a3e:	4770      	bx	lr
 8014a40:	b299      	uxth	r1, r3
 8014a42:	b909      	cbnz	r1, 8014a48 <__lo0bits+0x2a>
 8014a44:	0c1b      	lsrs	r3, r3, #16
 8014a46:	2010      	movs	r0, #16
 8014a48:	b2d9      	uxtb	r1, r3
 8014a4a:	b909      	cbnz	r1, 8014a50 <__lo0bits+0x32>
 8014a4c:	3008      	adds	r0, #8
 8014a4e:	0a1b      	lsrs	r3, r3, #8
 8014a50:	0719      	lsls	r1, r3, #28
 8014a52:	bf04      	itt	eq
 8014a54:	091b      	lsreq	r3, r3, #4
 8014a56:	3004      	addeq	r0, #4
 8014a58:	0799      	lsls	r1, r3, #30
 8014a5a:	bf04      	itt	eq
 8014a5c:	089b      	lsreq	r3, r3, #2
 8014a5e:	3002      	addeq	r0, #2
 8014a60:	07d9      	lsls	r1, r3, #31
 8014a62:	d403      	bmi.n	8014a6c <__lo0bits+0x4e>
 8014a64:	085b      	lsrs	r3, r3, #1
 8014a66:	f100 0001 	add.w	r0, r0, #1
 8014a6a:	d003      	beq.n	8014a74 <__lo0bits+0x56>
 8014a6c:	6013      	str	r3, [r2, #0]
 8014a6e:	4770      	bx	lr
 8014a70:	2000      	movs	r0, #0
 8014a72:	4770      	bx	lr
 8014a74:	2020      	movs	r0, #32
 8014a76:	4770      	bx	lr

08014a78 <__i2b>:
 8014a78:	b510      	push	{r4, lr}
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	2101      	movs	r1, #1
 8014a7e:	f7ff febd 	bl	80147fc <_Balloc>
 8014a82:	4602      	mov	r2, r0
 8014a84:	b928      	cbnz	r0, 8014a92 <__i2b+0x1a>
 8014a86:	4b05      	ldr	r3, [pc, #20]	@ (8014a9c <__i2b+0x24>)
 8014a88:	4805      	ldr	r0, [pc, #20]	@ (8014aa0 <__i2b+0x28>)
 8014a8a:	f240 1145 	movw	r1, #325	@ 0x145
 8014a8e:	f7fe fca7 	bl	80133e0 <__assert_func>
 8014a92:	2301      	movs	r3, #1
 8014a94:	6144      	str	r4, [r0, #20]
 8014a96:	6103      	str	r3, [r0, #16]
 8014a98:	bd10      	pop	{r4, pc}
 8014a9a:	bf00      	nop
 8014a9c:	080167d4 	.word	0x080167d4
 8014aa0:	08016845 	.word	0x08016845

08014aa4 <__multiply>:
 8014aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa8:	4617      	mov	r7, r2
 8014aaa:	690a      	ldr	r2, [r1, #16]
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	bfa8      	it	ge
 8014ab2:	463b      	movge	r3, r7
 8014ab4:	4689      	mov	r9, r1
 8014ab6:	bfa4      	itt	ge
 8014ab8:	460f      	movge	r7, r1
 8014aba:	4699      	movge	r9, r3
 8014abc:	693d      	ldr	r5, [r7, #16]
 8014abe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	6879      	ldr	r1, [r7, #4]
 8014ac6:	eb05 060a 	add.w	r6, r5, sl
 8014aca:	42b3      	cmp	r3, r6
 8014acc:	b085      	sub	sp, #20
 8014ace:	bfb8      	it	lt
 8014ad0:	3101      	addlt	r1, #1
 8014ad2:	f7ff fe93 	bl	80147fc <_Balloc>
 8014ad6:	b930      	cbnz	r0, 8014ae6 <__multiply+0x42>
 8014ad8:	4602      	mov	r2, r0
 8014ada:	4b41      	ldr	r3, [pc, #260]	@ (8014be0 <__multiply+0x13c>)
 8014adc:	4841      	ldr	r0, [pc, #260]	@ (8014be4 <__multiply+0x140>)
 8014ade:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014ae2:	f7fe fc7d 	bl	80133e0 <__assert_func>
 8014ae6:	f100 0414 	add.w	r4, r0, #20
 8014aea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014aee:	4623      	mov	r3, r4
 8014af0:	2200      	movs	r2, #0
 8014af2:	4573      	cmp	r3, lr
 8014af4:	d320      	bcc.n	8014b38 <__multiply+0x94>
 8014af6:	f107 0814 	add.w	r8, r7, #20
 8014afa:	f109 0114 	add.w	r1, r9, #20
 8014afe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014b02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014b06:	9302      	str	r3, [sp, #8]
 8014b08:	1beb      	subs	r3, r5, r7
 8014b0a:	3b15      	subs	r3, #21
 8014b0c:	f023 0303 	bic.w	r3, r3, #3
 8014b10:	3304      	adds	r3, #4
 8014b12:	3715      	adds	r7, #21
 8014b14:	42bd      	cmp	r5, r7
 8014b16:	bf38      	it	cc
 8014b18:	2304      	movcc	r3, #4
 8014b1a:	9301      	str	r3, [sp, #4]
 8014b1c:	9b02      	ldr	r3, [sp, #8]
 8014b1e:	9103      	str	r1, [sp, #12]
 8014b20:	428b      	cmp	r3, r1
 8014b22:	d80c      	bhi.n	8014b3e <__multiply+0x9a>
 8014b24:	2e00      	cmp	r6, #0
 8014b26:	dd03      	ble.n	8014b30 <__multiply+0x8c>
 8014b28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d055      	beq.n	8014bdc <__multiply+0x138>
 8014b30:	6106      	str	r6, [r0, #16]
 8014b32:	b005      	add	sp, #20
 8014b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b38:	f843 2b04 	str.w	r2, [r3], #4
 8014b3c:	e7d9      	b.n	8014af2 <__multiply+0x4e>
 8014b3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014b42:	f1ba 0f00 	cmp.w	sl, #0
 8014b46:	d01f      	beq.n	8014b88 <__multiply+0xe4>
 8014b48:	46c4      	mov	ip, r8
 8014b4a:	46a1      	mov	r9, r4
 8014b4c:	2700      	movs	r7, #0
 8014b4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014b52:	f8d9 3000 	ldr.w	r3, [r9]
 8014b56:	fa1f fb82 	uxth.w	fp, r2
 8014b5a:	b29b      	uxth	r3, r3
 8014b5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014b60:	443b      	add	r3, r7
 8014b62:	f8d9 7000 	ldr.w	r7, [r9]
 8014b66:	0c12      	lsrs	r2, r2, #16
 8014b68:	0c3f      	lsrs	r7, r7, #16
 8014b6a:	fb0a 7202 	mla	r2, sl, r2, r7
 8014b6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014b72:	b29b      	uxth	r3, r3
 8014b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b78:	4565      	cmp	r5, ip
 8014b7a:	f849 3b04 	str.w	r3, [r9], #4
 8014b7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014b82:	d8e4      	bhi.n	8014b4e <__multiply+0xaa>
 8014b84:	9b01      	ldr	r3, [sp, #4]
 8014b86:	50e7      	str	r7, [r4, r3]
 8014b88:	9b03      	ldr	r3, [sp, #12]
 8014b8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014b8e:	3104      	adds	r1, #4
 8014b90:	f1b9 0f00 	cmp.w	r9, #0
 8014b94:	d020      	beq.n	8014bd8 <__multiply+0x134>
 8014b96:	6823      	ldr	r3, [r4, #0]
 8014b98:	4647      	mov	r7, r8
 8014b9a:	46a4      	mov	ip, r4
 8014b9c:	f04f 0a00 	mov.w	sl, #0
 8014ba0:	f8b7 b000 	ldrh.w	fp, [r7]
 8014ba4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014ba8:	fb09 220b 	mla	r2, r9, fp, r2
 8014bac:	4452      	add	r2, sl
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bb4:	f84c 3b04 	str.w	r3, [ip], #4
 8014bb8:	f857 3b04 	ldr.w	r3, [r7], #4
 8014bbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bc0:	f8bc 3000 	ldrh.w	r3, [ip]
 8014bc4:	fb09 330a 	mla	r3, r9, sl, r3
 8014bc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014bcc:	42bd      	cmp	r5, r7
 8014bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bd2:	d8e5      	bhi.n	8014ba0 <__multiply+0xfc>
 8014bd4:	9a01      	ldr	r2, [sp, #4]
 8014bd6:	50a3      	str	r3, [r4, r2]
 8014bd8:	3404      	adds	r4, #4
 8014bda:	e79f      	b.n	8014b1c <__multiply+0x78>
 8014bdc:	3e01      	subs	r6, #1
 8014bde:	e7a1      	b.n	8014b24 <__multiply+0x80>
 8014be0:	080167d4 	.word	0x080167d4
 8014be4:	08016845 	.word	0x08016845

08014be8 <__pow5mult>:
 8014be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bec:	4615      	mov	r5, r2
 8014bee:	f012 0203 	ands.w	r2, r2, #3
 8014bf2:	4607      	mov	r7, r0
 8014bf4:	460e      	mov	r6, r1
 8014bf6:	d007      	beq.n	8014c08 <__pow5mult+0x20>
 8014bf8:	4c25      	ldr	r4, [pc, #148]	@ (8014c90 <__pow5mult+0xa8>)
 8014bfa:	3a01      	subs	r2, #1
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c02:	f7ff fe5d 	bl	80148c0 <__multadd>
 8014c06:	4606      	mov	r6, r0
 8014c08:	10ad      	asrs	r5, r5, #2
 8014c0a:	d03d      	beq.n	8014c88 <__pow5mult+0xa0>
 8014c0c:	69fc      	ldr	r4, [r7, #28]
 8014c0e:	b97c      	cbnz	r4, 8014c30 <__pow5mult+0x48>
 8014c10:	2010      	movs	r0, #16
 8014c12:	f7fc fd75 	bl	8011700 <malloc>
 8014c16:	4602      	mov	r2, r0
 8014c18:	61f8      	str	r0, [r7, #28]
 8014c1a:	b928      	cbnz	r0, 8014c28 <__pow5mult+0x40>
 8014c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8014c94 <__pow5mult+0xac>)
 8014c1e:	481e      	ldr	r0, [pc, #120]	@ (8014c98 <__pow5mult+0xb0>)
 8014c20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c24:	f7fe fbdc 	bl	80133e0 <__assert_func>
 8014c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c2c:	6004      	str	r4, [r0, #0]
 8014c2e:	60c4      	str	r4, [r0, #12]
 8014c30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c38:	b94c      	cbnz	r4, 8014c4e <__pow5mult+0x66>
 8014c3a:	f240 2171 	movw	r1, #625	@ 0x271
 8014c3e:	4638      	mov	r0, r7
 8014c40:	f7ff ff1a 	bl	8014a78 <__i2b>
 8014c44:	2300      	movs	r3, #0
 8014c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c4a:	4604      	mov	r4, r0
 8014c4c:	6003      	str	r3, [r0, #0]
 8014c4e:	f04f 0900 	mov.w	r9, #0
 8014c52:	07eb      	lsls	r3, r5, #31
 8014c54:	d50a      	bpl.n	8014c6c <__pow5mult+0x84>
 8014c56:	4631      	mov	r1, r6
 8014c58:	4622      	mov	r2, r4
 8014c5a:	4638      	mov	r0, r7
 8014c5c:	f7ff ff22 	bl	8014aa4 <__multiply>
 8014c60:	4631      	mov	r1, r6
 8014c62:	4680      	mov	r8, r0
 8014c64:	4638      	mov	r0, r7
 8014c66:	f7ff fe09 	bl	801487c <_Bfree>
 8014c6a:	4646      	mov	r6, r8
 8014c6c:	106d      	asrs	r5, r5, #1
 8014c6e:	d00b      	beq.n	8014c88 <__pow5mult+0xa0>
 8014c70:	6820      	ldr	r0, [r4, #0]
 8014c72:	b938      	cbnz	r0, 8014c84 <__pow5mult+0x9c>
 8014c74:	4622      	mov	r2, r4
 8014c76:	4621      	mov	r1, r4
 8014c78:	4638      	mov	r0, r7
 8014c7a:	f7ff ff13 	bl	8014aa4 <__multiply>
 8014c7e:	6020      	str	r0, [r4, #0]
 8014c80:	f8c0 9000 	str.w	r9, [r0]
 8014c84:	4604      	mov	r4, r0
 8014c86:	e7e4      	b.n	8014c52 <__pow5mult+0x6a>
 8014c88:	4630      	mov	r0, r6
 8014c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c8e:	bf00      	nop
 8014c90:	08016a04 	.word	0x08016a04
 8014c94:	080166ba 	.word	0x080166ba
 8014c98:	08016845 	.word	0x08016845

08014c9c <__lshift>:
 8014c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ca0:	460c      	mov	r4, r1
 8014ca2:	6849      	ldr	r1, [r1, #4]
 8014ca4:	6923      	ldr	r3, [r4, #16]
 8014ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014caa:	68a3      	ldr	r3, [r4, #8]
 8014cac:	4607      	mov	r7, r0
 8014cae:	4691      	mov	r9, r2
 8014cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014cb4:	f108 0601 	add.w	r6, r8, #1
 8014cb8:	42b3      	cmp	r3, r6
 8014cba:	db0b      	blt.n	8014cd4 <__lshift+0x38>
 8014cbc:	4638      	mov	r0, r7
 8014cbe:	f7ff fd9d 	bl	80147fc <_Balloc>
 8014cc2:	4605      	mov	r5, r0
 8014cc4:	b948      	cbnz	r0, 8014cda <__lshift+0x3e>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	4b28      	ldr	r3, [pc, #160]	@ (8014d6c <__lshift+0xd0>)
 8014cca:	4829      	ldr	r0, [pc, #164]	@ (8014d70 <__lshift+0xd4>)
 8014ccc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014cd0:	f7fe fb86 	bl	80133e0 <__assert_func>
 8014cd4:	3101      	adds	r1, #1
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	e7ee      	b.n	8014cb8 <__lshift+0x1c>
 8014cda:	2300      	movs	r3, #0
 8014cdc:	f100 0114 	add.w	r1, r0, #20
 8014ce0:	f100 0210 	add.w	r2, r0, #16
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	4553      	cmp	r3, sl
 8014ce8:	db33      	blt.n	8014d52 <__lshift+0xb6>
 8014cea:	6920      	ldr	r0, [r4, #16]
 8014cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014cf0:	f104 0314 	add.w	r3, r4, #20
 8014cf4:	f019 091f 	ands.w	r9, r9, #31
 8014cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d00:	d02b      	beq.n	8014d5a <__lshift+0xbe>
 8014d02:	f1c9 0e20 	rsb	lr, r9, #32
 8014d06:	468a      	mov	sl, r1
 8014d08:	2200      	movs	r2, #0
 8014d0a:	6818      	ldr	r0, [r3, #0]
 8014d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8014d10:	4310      	orrs	r0, r2
 8014d12:	f84a 0b04 	str.w	r0, [sl], #4
 8014d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d1a:	459c      	cmp	ip, r3
 8014d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d20:	d8f3      	bhi.n	8014d0a <__lshift+0x6e>
 8014d22:	ebac 0304 	sub.w	r3, ip, r4
 8014d26:	3b15      	subs	r3, #21
 8014d28:	f023 0303 	bic.w	r3, r3, #3
 8014d2c:	3304      	adds	r3, #4
 8014d2e:	f104 0015 	add.w	r0, r4, #21
 8014d32:	4560      	cmp	r0, ip
 8014d34:	bf88      	it	hi
 8014d36:	2304      	movhi	r3, #4
 8014d38:	50ca      	str	r2, [r1, r3]
 8014d3a:	b10a      	cbz	r2, 8014d40 <__lshift+0xa4>
 8014d3c:	f108 0602 	add.w	r6, r8, #2
 8014d40:	3e01      	subs	r6, #1
 8014d42:	4638      	mov	r0, r7
 8014d44:	612e      	str	r6, [r5, #16]
 8014d46:	4621      	mov	r1, r4
 8014d48:	f7ff fd98 	bl	801487c <_Bfree>
 8014d4c:	4628      	mov	r0, r5
 8014d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d56:	3301      	adds	r3, #1
 8014d58:	e7c5      	b.n	8014ce6 <__lshift+0x4a>
 8014d5a:	3904      	subs	r1, #4
 8014d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8014d64:	459c      	cmp	ip, r3
 8014d66:	d8f9      	bhi.n	8014d5c <__lshift+0xc0>
 8014d68:	e7ea      	b.n	8014d40 <__lshift+0xa4>
 8014d6a:	bf00      	nop
 8014d6c:	080167d4 	.word	0x080167d4
 8014d70:	08016845 	.word	0x08016845

08014d74 <__mcmp>:
 8014d74:	690a      	ldr	r2, [r1, #16]
 8014d76:	4603      	mov	r3, r0
 8014d78:	6900      	ldr	r0, [r0, #16]
 8014d7a:	1a80      	subs	r0, r0, r2
 8014d7c:	b530      	push	{r4, r5, lr}
 8014d7e:	d10e      	bne.n	8014d9e <__mcmp+0x2a>
 8014d80:	3314      	adds	r3, #20
 8014d82:	3114      	adds	r1, #20
 8014d84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014d88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014d8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014d90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014d94:	4295      	cmp	r5, r2
 8014d96:	d003      	beq.n	8014da0 <__mcmp+0x2c>
 8014d98:	d205      	bcs.n	8014da6 <__mcmp+0x32>
 8014d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d9e:	bd30      	pop	{r4, r5, pc}
 8014da0:	42a3      	cmp	r3, r4
 8014da2:	d3f3      	bcc.n	8014d8c <__mcmp+0x18>
 8014da4:	e7fb      	b.n	8014d9e <__mcmp+0x2a>
 8014da6:	2001      	movs	r0, #1
 8014da8:	e7f9      	b.n	8014d9e <__mcmp+0x2a>
	...

08014dac <__mdiff>:
 8014dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db0:	4689      	mov	r9, r1
 8014db2:	4606      	mov	r6, r0
 8014db4:	4611      	mov	r1, r2
 8014db6:	4648      	mov	r0, r9
 8014db8:	4614      	mov	r4, r2
 8014dba:	f7ff ffdb 	bl	8014d74 <__mcmp>
 8014dbe:	1e05      	subs	r5, r0, #0
 8014dc0:	d112      	bne.n	8014de8 <__mdiff+0x3c>
 8014dc2:	4629      	mov	r1, r5
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	f7ff fd19 	bl	80147fc <_Balloc>
 8014dca:	4602      	mov	r2, r0
 8014dcc:	b928      	cbnz	r0, 8014dda <__mdiff+0x2e>
 8014dce:	4b3f      	ldr	r3, [pc, #252]	@ (8014ecc <__mdiff+0x120>)
 8014dd0:	f240 2137 	movw	r1, #567	@ 0x237
 8014dd4:	483e      	ldr	r0, [pc, #248]	@ (8014ed0 <__mdiff+0x124>)
 8014dd6:	f7fe fb03 	bl	80133e0 <__assert_func>
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014de0:	4610      	mov	r0, r2
 8014de2:	b003      	add	sp, #12
 8014de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014de8:	bfbc      	itt	lt
 8014dea:	464b      	movlt	r3, r9
 8014dec:	46a1      	movlt	r9, r4
 8014dee:	4630      	mov	r0, r6
 8014df0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014df4:	bfba      	itte	lt
 8014df6:	461c      	movlt	r4, r3
 8014df8:	2501      	movlt	r5, #1
 8014dfa:	2500      	movge	r5, #0
 8014dfc:	f7ff fcfe 	bl	80147fc <_Balloc>
 8014e00:	4602      	mov	r2, r0
 8014e02:	b918      	cbnz	r0, 8014e0c <__mdiff+0x60>
 8014e04:	4b31      	ldr	r3, [pc, #196]	@ (8014ecc <__mdiff+0x120>)
 8014e06:	f240 2145 	movw	r1, #581	@ 0x245
 8014e0a:	e7e3      	b.n	8014dd4 <__mdiff+0x28>
 8014e0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e10:	6926      	ldr	r6, [r4, #16]
 8014e12:	60c5      	str	r5, [r0, #12]
 8014e14:	f109 0310 	add.w	r3, r9, #16
 8014e18:	f109 0514 	add.w	r5, r9, #20
 8014e1c:	f104 0e14 	add.w	lr, r4, #20
 8014e20:	f100 0b14 	add.w	fp, r0, #20
 8014e24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014e28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014e2c:	9301      	str	r3, [sp, #4]
 8014e2e:	46d9      	mov	r9, fp
 8014e30:	f04f 0c00 	mov.w	ip, #0
 8014e34:	9b01      	ldr	r3, [sp, #4]
 8014e36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014e3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014e3e:	9301      	str	r3, [sp, #4]
 8014e40:	fa1f f38a 	uxth.w	r3, sl
 8014e44:	4619      	mov	r1, r3
 8014e46:	b283      	uxth	r3, r0
 8014e48:	1acb      	subs	r3, r1, r3
 8014e4a:	0c00      	lsrs	r0, r0, #16
 8014e4c:	4463      	add	r3, ip
 8014e4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014e52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014e5c:	4576      	cmp	r6, lr
 8014e5e:	f849 3b04 	str.w	r3, [r9], #4
 8014e62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014e66:	d8e5      	bhi.n	8014e34 <__mdiff+0x88>
 8014e68:	1b33      	subs	r3, r6, r4
 8014e6a:	3b15      	subs	r3, #21
 8014e6c:	f023 0303 	bic.w	r3, r3, #3
 8014e70:	3415      	adds	r4, #21
 8014e72:	3304      	adds	r3, #4
 8014e74:	42a6      	cmp	r6, r4
 8014e76:	bf38      	it	cc
 8014e78:	2304      	movcc	r3, #4
 8014e7a:	441d      	add	r5, r3
 8014e7c:	445b      	add	r3, fp
 8014e7e:	461e      	mov	r6, r3
 8014e80:	462c      	mov	r4, r5
 8014e82:	4544      	cmp	r4, r8
 8014e84:	d30e      	bcc.n	8014ea4 <__mdiff+0xf8>
 8014e86:	f108 0103 	add.w	r1, r8, #3
 8014e8a:	1b49      	subs	r1, r1, r5
 8014e8c:	f021 0103 	bic.w	r1, r1, #3
 8014e90:	3d03      	subs	r5, #3
 8014e92:	45a8      	cmp	r8, r5
 8014e94:	bf38      	it	cc
 8014e96:	2100      	movcc	r1, #0
 8014e98:	440b      	add	r3, r1
 8014e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014e9e:	b191      	cbz	r1, 8014ec6 <__mdiff+0x11a>
 8014ea0:	6117      	str	r7, [r2, #16]
 8014ea2:	e79d      	b.n	8014de0 <__mdiff+0x34>
 8014ea4:	f854 1b04 	ldr.w	r1, [r4], #4
 8014ea8:	46e6      	mov	lr, ip
 8014eaa:	0c08      	lsrs	r0, r1, #16
 8014eac:	fa1c fc81 	uxtah	ip, ip, r1
 8014eb0:	4471      	add	r1, lr
 8014eb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014eb6:	b289      	uxth	r1, r1
 8014eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014ebc:	f846 1b04 	str.w	r1, [r6], #4
 8014ec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014ec4:	e7dd      	b.n	8014e82 <__mdiff+0xd6>
 8014ec6:	3f01      	subs	r7, #1
 8014ec8:	e7e7      	b.n	8014e9a <__mdiff+0xee>
 8014eca:	bf00      	nop
 8014ecc:	080167d4 	.word	0x080167d4
 8014ed0:	08016845 	.word	0x08016845

08014ed4 <__ulp>:
 8014ed4:	b082      	sub	sp, #8
 8014ed6:	ed8d 0b00 	vstr	d0, [sp]
 8014eda:	9a01      	ldr	r2, [sp, #4]
 8014edc:	4b0f      	ldr	r3, [pc, #60]	@ (8014f1c <__ulp+0x48>)
 8014ede:	4013      	ands	r3, r2
 8014ee0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	dc08      	bgt.n	8014efa <__ulp+0x26>
 8014ee8:	425b      	negs	r3, r3
 8014eea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014eee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014ef2:	da04      	bge.n	8014efe <__ulp+0x2a>
 8014ef4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014ef8:	4113      	asrs	r3, r2
 8014efa:	2200      	movs	r2, #0
 8014efc:	e008      	b.n	8014f10 <__ulp+0x3c>
 8014efe:	f1a2 0314 	sub.w	r3, r2, #20
 8014f02:	2b1e      	cmp	r3, #30
 8014f04:	bfda      	itte	le
 8014f06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014f0a:	40da      	lsrle	r2, r3
 8014f0c:	2201      	movgt	r2, #1
 8014f0e:	2300      	movs	r3, #0
 8014f10:	4619      	mov	r1, r3
 8014f12:	4610      	mov	r0, r2
 8014f14:	ec41 0b10 	vmov	d0, r0, r1
 8014f18:	b002      	add	sp, #8
 8014f1a:	4770      	bx	lr
 8014f1c:	7ff00000 	.word	0x7ff00000

08014f20 <__b2d>:
 8014f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f24:	6906      	ldr	r6, [r0, #16]
 8014f26:	f100 0814 	add.w	r8, r0, #20
 8014f2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014f2e:	1f37      	subs	r7, r6, #4
 8014f30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014f34:	4610      	mov	r0, r2
 8014f36:	f7ff fd53 	bl	80149e0 <__hi0bits>
 8014f3a:	f1c0 0320 	rsb	r3, r0, #32
 8014f3e:	280a      	cmp	r0, #10
 8014f40:	600b      	str	r3, [r1, #0]
 8014f42:	491b      	ldr	r1, [pc, #108]	@ (8014fb0 <__b2d+0x90>)
 8014f44:	dc15      	bgt.n	8014f72 <__b2d+0x52>
 8014f46:	f1c0 0c0b 	rsb	ip, r0, #11
 8014f4a:	fa22 f30c 	lsr.w	r3, r2, ip
 8014f4e:	45b8      	cmp	r8, r7
 8014f50:	ea43 0501 	orr.w	r5, r3, r1
 8014f54:	bf34      	ite	cc
 8014f56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f5a:	2300      	movcs	r3, #0
 8014f5c:	3015      	adds	r0, #21
 8014f5e:	fa02 f000 	lsl.w	r0, r2, r0
 8014f62:	fa23 f30c 	lsr.w	r3, r3, ip
 8014f66:	4303      	orrs	r3, r0
 8014f68:	461c      	mov	r4, r3
 8014f6a:	ec45 4b10 	vmov	d0, r4, r5
 8014f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f72:	45b8      	cmp	r8, r7
 8014f74:	bf3a      	itte	cc
 8014f76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014f7a:	f1a6 0708 	subcc.w	r7, r6, #8
 8014f7e:	2300      	movcs	r3, #0
 8014f80:	380b      	subs	r0, #11
 8014f82:	d012      	beq.n	8014faa <__b2d+0x8a>
 8014f84:	f1c0 0120 	rsb	r1, r0, #32
 8014f88:	fa23 f401 	lsr.w	r4, r3, r1
 8014f8c:	4082      	lsls	r2, r0
 8014f8e:	4322      	orrs	r2, r4
 8014f90:	4547      	cmp	r7, r8
 8014f92:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8014f96:	bf8c      	ite	hi
 8014f98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014f9c:	2200      	movls	r2, #0
 8014f9e:	4083      	lsls	r3, r0
 8014fa0:	40ca      	lsrs	r2, r1
 8014fa2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014fa6:	4313      	orrs	r3, r2
 8014fa8:	e7de      	b.n	8014f68 <__b2d+0x48>
 8014faa:	ea42 0501 	orr.w	r5, r2, r1
 8014fae:	e7db      	b.n	8014f68 <__b2d+0x48>
 8014fb0:	3ff00000 	.word	0x3ff00000

08014fb4 <__d2b>:
 8014fb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014fb8:	460f      	mov	r7, r1
 8014fba:	2101      	movs	r1, #1
 8014fbc:	ec59 8b10 	vmov	r8, r9, d0
 8014fc0:	4616      	mov	r6, r2
 8014fc2:	f7ff fc1b 	bl	80147fc <_Balloc>
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	b930      	cbnz	r0, 8014fd8 <__d2b+0x24>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	4b23      	ldr	r3, [pc, #140]	@ (801505c <__d2b+0xa8>)
 8014fce:	4824      	ldr	r0, [pc, #144]	@ (8015060 <__d2b+0xac>)
 8014fd0:	f240 310f 	movw	r1, #783	@ 0x30f
 8014fd4:	f7fe fa04 	bl	80133e0 <__assert_func>
 8014fd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014fdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014fe0:	b10d      	cbz	r5, 8014fe6 <__d2b+0x32>
 8014fe2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014fe6:	9301      	str	r3, [sp, #4]
 8014fe8:	f1b8 0300 	subs.w	r3, r8, #0
 8014fec:	d023      	beq.n	8015036 <__d2b+0x82>
 8014fee:	4668      	mov	r0, sp
 8014ff0:	9300      	str	r3, [sp, #0]
 8014ff2:	f7ff fd14 	bl	8014a1e <__lo0bits>
 8014ff6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014ffa:	b1d0      	cbz	r0, 8015032 <__d2b+0x7e>
 8014ffc:	f1c0 0320 	rsb	r3, r0, #32
 8015000:	fa02 f303 	lsl.w	r3, r2, r3
 8015004:	430b      	orrs	r3, r1
 8015006:	40c2      	lsrs	r2, r0
 8015008:	6163      	str	r3, [r4, #20]
 801500a:	9201      	str	r2, [sp, #4]
 801500c:	9b01      	ldr	r3, [sp, #4]
 801500e:	61a3      	str	r3, [r4, #24]
 8015010:	2b00      	cmp	r3, #0
 8015012:	bf0c      	ite	eq
 8015014:	2201      	moveq	r2, #1
 8015016:	2202      	movne	r2, #2
 8015018:	6122      	str	r2, [r4, #16]
 801501a:	b1a5      	cbz	r5, 8015046 <__d2b+0x92>
 801501c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015020:	4405      	add	r5, r0
 8015022:	603d      	str	r5, [r7, #0]
 8015024:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015028:	6030      	str	r0, [r6, #0]
 801502a:	4620      	mov	r0, r4
 801502c:	b003      	add	sp, #12
 801502e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015032:	6161      	str	r1, [r4, #20]
 8015034:	e7ea      	b.n	801500c <__d2b+0x58>
 8015036:	a801      	add	r0, sp, #4
 8015038:	f7ff fcf1 	bl	8014a1e <__lo0bits>
 801503c:	9b01      	ldr	r3, [sp, #4]
 801503e:	6163      	str	r3, [r4, #20]
 8015040:	3020      	adds	r0, #32
 8015042:	2201      	movs	r2, #1
 8015044:	e7e8      	b.n	8015018 <__d2b+0x64>
 8015046:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801504a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801504e:	6038      	str	r0, [r7, #0]
 8015050:	6918      	ldr	r0, [r3, #16]
 8015052:	f7ff fcc5 	bl	80149e0 <__hi0bits>
 8015056:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801505a:	e7e5      	b.n	8015028 <__d2b+0x74>
 801505c:	080167d4 	.word	0x080167d4
 8015060:	08016845 	.word	0x08016845

08015064 <__ratio>:
 8015064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015068:	b085      	sub	sp, #20
 801506a:	e9cd 1000 	strd	r1, r0, [sp]
 801506e:	a902      	add	r1, sp, #8
 8015070:	f7ff ff56 	bl	8014f20 <__b2d>
 8015074:	9800      	ldr	r0, [sp, #0]
 8015076:	a903      	add	r1, sp, #12
 8015078:	ec55 4b10 	vmov	r4, r5, d0
 801507c:	f7ff ff50 	bl	8014f20 <__b2d>
 8015080:	9b01      	ldr	r3, [sp, #4]
 8015082:	6919      	ldr	r1, [r3, #16]
 8015084:	9b00      	ldr	r3, [sp, #0]
 8015086:	691b      	ldr	r3, [r3, #16]
 8015088:	1ac9      	subs	r1, r1, r3
 801508a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801508e:	1a9b      	subs	r3, r3, r2
 8015090:	ec5b ab10 	vmov	sl, fp, d0
 8015094:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015098:	2b00      	cmp	r3, #0
 801509a:	bfce      	itee	gt
 801509c:	462a      	movgt	r2, r5
 801509e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80150a2:	465a      	movle	r2, fp
 80150a4:	462f      	mov	r7, r5
 80150a6:	46d9      	mov	r9, fp
 80150a8:	bfcc      	ite	gt
 80150aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80150ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80150b2:	464b      	mov	r3, r9
 80150b4:	4652      	mov	r2, sl
 80150b6:	4620      	mov	r0, r4
 80150b8:	4639      	mov	r1, r7
 80150ba:	f7eb fbc7 	bl	800084c <__aeabi_ddiv>
 80150be:	ec41 0b10 	vmov	d0, r0, r1
 80150c2:	b005      	add	sp, #20
 80150c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150c8 <__copybits>:
 80150c8:	3901      	subs	r1, #1
 80150ca:	b570      	push	{r4, r5, r6, lr}
 80150cc:	1149      	asrs	r1, r1, #5
 80150ce:	6914      	ldr	r4, [r2, #16]
 80150d0:	3101      	adds	r1, #1
 80150d2:	f102 0314 	add.w	r3, r2, #20
 80150d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80150da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80150de:	1f05      	subs	r5, r0, #4
 80150e0:	42a3      	cmp	r3, r4
 80150e2:	d30c      	bcc.n	80150fe <__copybits+0x36>
 80150e4:	1aa3      	subs	r3, r4, r2
 80150e6:	3b11      	subs	r3, #17
 80150e8:	f023 0303 	bic.w	r3, r3, #3
 80150ec:	3211      	adds	r2, #17
 80150ee:	42a2      	cmp	r2, r4
 80150f0:	bf88      	it	hi
 80150f2:	2300      	movhi	r3, #0
 80150f4:	4418      	add	r0, r3
 80150f6:	2300      	movs	r3, #0
 80150f8:	4288      	cmp	r0, r1
 80150fa:	d305      	bcc.n	8015108 <__copybits+0x40>
 80150fc:	bd70      	pop	{r4, r5, r6, pc}
 80150fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8015102:	f845 6f04 	str.w	r6, [r5, #4]!
 8015106:	e7eb      	b.n	80150e0 <__copybits+0x18>
 8015108:	f840 3b04 	str.w	r3, [r0], #4
 801510c:	e7f4      	b.n	80150f8 <__copybits+0x30>

0801510e <__any_on>:
 801510e:	f100 0214 	add.w	r2, r0, #20
 8015112:	6900      	ldr	r0, [r0, #16]
 8015114:	114b      	asrs	r3, r1, #5
 8015116:	4298      	cmp	r0, r3
 8015118:	b510      	push	{r4, lr}
 801511a:	db11      	blt.n	8015140 <__any_on+0x32>
 801511c:	dd0a      	ble.n	8015134 <__any_on+0x26>
 801511e:	f011 011f 	ands.w	r1, r1, #31
 8015122:	d007      	beq.n	8015134 <__any_on+0x26>
 8015124:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015128:	fa24 f001 	lsr.w	r0, r4, r1
 801512c:	fa00 f101 	lsl.w	r1, r0, r1
 8015130:	428c      	cmp	r4, r1
 8015132:	d10b      	bne.n	801514c <__any_on+0x3e>
 8015134:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015138:	4293      	cmp	r3, r2
 801513a:	d803      	bhi.n	8015144 <__any_on+0x36>
 801513c:	2000      	movs	r0, #0
 801513e:	bd10      	pop	{r4, pc}
 8015140:	4603      	mov	r3, r0
 8015142:	e7f7      	b.n	8015134 <__any_on+0x26>
 8015144:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015148:	2900      	cmp	r1, #0
 801514a:	d0f5      	beq.n	8015138 <__any_on+0x2a>
 801514c:	2001      	movs	r0, #1
 801514e:	e7f6      	b.n	801513e <__any_on+0x30>

08015150 <__ascii_wctomb>:
 8015150:	4603      	mov	r3, r0
 8015152:	4608      	mov	r0, r1
 8015154:	b141      	cbz	r1, 8015168 <__ascii_wctomb+0x18>
 8015156:	2aff      	cmp	r2, #255	@ 0xff
 8015158:	d904      	bls.n	8015164 <__ascii_wctomb+0x14>
 801515a:	228a      	movs	r2, #138	@ 0x8a
 801515c:	601a      	str	r2, [r3, #0]
 801515e:	f04f 30ff 	mov.w	r0, #4294967295
 8015162:	4770      	bx	lr
 8015164:	700a      	strb	r2, [r1, #0]
 8015166:	2001      	movs	r0, #1
 8015168:	4770      	bx	lr

0801516a <__ssputs_r>:
 801516a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801516e:	688e      	ldr	r6, [r1, #8]
 8015170:	461f      	mov	r7, r3
 8015172:	42be      	cmp	r6, r7
 8015174:	680b      	ldr	r3, [r1, #0]
 8015176:	4682      	mov	sl, r0
 8015178:	460c      	mov	r4, r1
 801517a:	4690      	mov	r8, r2
 801517c:	d82d      	bhi.n	80151da <__ssputs_r+0x70>
 801517e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015182:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015186:	d026      	beq.n	80151d6 <__ssputs_r+0x6c>
 8015188:	6965      	ldr	r5, [r4, #20]
 801518a:	6909      	ldr	r1, [r1, #16]
 801518c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015190:	eba3 0901 	sub.w	r9, r3, r1
 8015194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015198:	1c7b      	adds	r3, r7, #1
 801519a:	444b      	add	r3, r9
 801519c:	106d      	asrs	r5, r5, #1
 801519e:	429d      	cmp	r5, r3
 80151a0:	bf38      	it	cc
 80151a2:	461d      	movcc	r5, r3
 80151a4:	0553      	lsls	r3, r2, #21
 80151a6:	d527      	bpl.n	80151f8 <__ssputs_r+0x8e>
 80151a8:	4629      	mov	r1, r5
 80151aa:	f7fc fadb 	bl	8011764 <_malloc_r>
 80151ae:	4606      	mov	r6, r0
 80151b0:	b360      	cbz	r0, 801520c <__ssputs_r+0xa2>
 80151b2:	6921      	ldr	r1, [r4, #16]
 80151b4:	464a      	mov	r2, r9
 80151b6:	f7fe f8fa 	bl	80133ae <memcpy>
 80151ba:	89a3      	ldrh	r3, [r4, #12]
 80151bc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151c4:	81a3      	strh	r3, [r4, #12]
 80151c6:	6126      	str	r6, [r4, #16]
 80151c8:	6165      	str	r5, [r4, #20]
 80151ca:	444e      	add	r6, r9
 80151cc:	eba5 0509 	sub.w	r5, r5, r9
 80151d0:	6026      	str	r6, [r4, #0]
 80151d2:	60a5      	str	r5, [r4, #8]
 80151d4:	463e      	mov	r6, r7
 80151d6:	42be      	cmp	r6, r7
 80151d8:	d900      	bls.n	80151dc <__ssputs_r+0x72>
 80151da:	463e      	mov	r6, r7
 80151dc:	6820      	ldr	r0, [r4, #0]
 80151de:	4632      	mov	r2, r6
 80151e0:	4641      	mov	r1, r8
 80151e2:	f7fd ff5a 	bl	801309a <memmove>
 80151e6:	68a3      	ldr	r3, [r4, #8]
 80151e8:	1b9b      	subs	r3, r3, r6
 80151ea:	60a3      	str	r3, [r4, #8]
 80151ec:	6823      	ldr	r3, [r4, #0]
 80151ee:	4433      	add	r3, r6
 80151f0:	6023      	str	r3, [r4, #0]
 80151f2:	2000      	movs	r0, #0
 80151f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151f8:	462a      	mov	r2, r5
 80151fa:	f000 f9e6 	bl	80155ca <_realloc_r>
 80151fe:	4606      	mov	r6, r0
 8015200:	2800      	cmp	r0, #0
 8015202:	d1e0      	bne.n	80151c6 <__ssputs_r+0x5c>
 8015204:	6921      	ldr	r1, [r4, #16]
 8015206:	4650      	mov	r0, sl
 8015208:	f7fe ff62 	bl	80140d0 <_free_r>
 801520c:	230c      	movs	r3, #12
 801520e:	f8ca 3000 	str.w	r3, [sl]
 8015212:	89a3      	ldrh	r3, [r4, #12]
 8015214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015218:	81a3      	strh	r3, [r4, #12]
 801521a:	f04f 30ff 	mov.w	r0, #4294967295
 801521e:	e7e9      	b.n	80151f4 <__ssputs_r+0x8a>

08015220 <_svfiprintf_r>:
 8015220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015224:	4698      	mov	r8, r3
 8015226:	898b      	ldrh	r3, [r1, #12]
 8015228:	061b      	lsls	r3, r3, #24
 801522a:	b09d      	sub	sp, #116	@ 0x74
 801522c:	4607      	mov	r7, r0
 801522e:	460d      	mov	r5, r1
 8015230:	4614      	mov	r4, r2
 8015232:	d510      	bpl.n	8015256 <_svfiprintf_r+0x36>
 8015234:	690b      	ldr	r3, [r1, #16]
 8015236:	b973      	cbnz	r3, 8015256 <_svfiprintf_r+0x36>
 8015238:	2140      	movs	r1, #64	@ 0x40
 801523a:	f7fc fa93 	bl	8011764 <_malloc_r>
 801523e:	6028      	str	r0, [r5, #0]
 8015240:	6128      	str	r0, [r5, #16]
 8015242:	b930      	cbnz	r0, 8015252 <_svfiprintf_r+0x32>
 8015244:	230c      	movs	r3, #12
 8015246:	603b      	str	r3, [r7, #0]
 8015248:	f04f 30ff 	mov.w	r0, #4294967295
 801524c:	b01d      	add	sp, #116	@ 0x74
 801524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015252:	2340      	movs	r3, #64	@ 0x40
 8015254:	616b      	str	r3, [r5, #20]
 8015256:	2300      	movs	r3, #0
 8015258:	9309      	str	r3, [sp, #36]	@ 0x24
 801525a:	2320      	movs	r3, #32
 801525c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015260:	f8cd 800c 	str.w	r8, [sp, #12]
 8015264:	2330      	movs	r3, #48	@ 0x30
 8015266:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015404 <_svfiprintf_r+0x1e4>
 801526a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801526e:	f04f 0901 	mov.w	r9, #1
 8015272:	4623      	mov	r3, r4
 8015274:	469a      	mov	sl, r3
 8015276:	f813 2b01 	ldrb.w	r2, [r3], #1
 801527a:	b10a      	cbz	r2, 8015280 <_svfiprintf_r+0x60>
 801527c:	2a25      	cmp	r2, #37	@ 0x25
 801527e:	d1f9      	bne.n	8015274 <_svfiprintf_r+0x54>
 8015280:	ebba 0b04 	subs.w	fp, sl, r4
 8015284:	d00b      	beq.n	801529e <_svfiprintf_r+0x7e>
 8015286:	465b      	mov	r3, fp
 8015288:	4622      	mov	r2, r4
 801528a:	4629      	mov	r1, r5
 801528c:	4638      	mov	r0, r7
 801528e:	f7ff ff6c 	bl	801516a <__ssputs_r>
 8015292:	3001      	adds	r0, #1
 8015294:	f000 80a7 	beq.w	80153e6 <_svfiprintf_r+0x1c6>
 8015298:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801529a:	445a      	add	r2, fp
 801529c:	9209      	str	r2, [sp, #36]	@ 0x24
 801529e:	f89a 3000 	ldrb.w	r3, [sl]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	f000 809f 	beq.w	80153e6 <_svfiprintf_r+0x1c6>
 80152a8:	2300      	movs	r3, #0
 80152aa:	f04f 32ff 	mov.w	r2, #4294967295
 80152ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152b2:	f10a 0a01 	add.w	sl, sl, #1
 80152b6:	9304      	str	r3, [sp, #16]
 80152b8:	9307      	str	r3, [sp, #28]
 80152ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152be:	931a      	str	r3, [sp, #104]	@ 0x68
 80152c0:	4654      	mov	r4, sl
 80152c2:	2205      	movs	r2, #5
 80152c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152c8:	484e      	ldr	r0, [pc, #312]	@ (8015404 <_svfiprintf_r+0x1e4>)
 80152ca:	f7ea ff81 	bl	80001d0 <memchr>
 80152ce:	9a04      	ldr	r2, [sp, #16]
 80152d0:	b9d8      	cbnz	r0, 801530a <_svfiprintf_r+0xea>
 80152d2:	06d0      	lsls	r0, r2, #27
 80152d4:	bf44      	itt	mi
 80152d6:	2320      	movmi	r3, #32
 80152d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152dc:	0711      	lsls	r1, r2, #28
 80152de:	bf44      	itt	mi
 80152e0:	232b      	movmi	r3, #43	@ 0x2b
 80152e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80152e6:	f89a 3000 	ldrb.w	r3, [sl]
 80152ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80152ec:	d015      	beq.n	801531a <_svfiprintf_r+0xfa>
 80152ee:	9a07      	ldr	r2, [sp, #28]
 80152f0:	4654      	mov	r4, sl
 80152f2:	2000      	movs	r0, #0
 80152f4:	f04f 0c0a 	mov.w	ip, #10
 80152f8:	4621      	mov	r1, r4
 80152fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152fe:	3b30      	subs	r3, #48	@ 0x30
 8015300:	2b09      	cmp	r3, #9
 8015302:	d94b      	bls.n	801539c <_svfiprintf_r+0x17c>
 8015304:	b1b0      	cbz	r0, 8015334 <_svfiprintf_r+0x114>
 8015306:	9207      	str	r2, [sp, #28]
 8015308:	e014      	b.n	8015334 <_svfiprintf_r+0x114>
 801530a:	eba0 0308 	sub.w	r3, r0, r8
 801530e:	fa09 f303 	lsl.w	r3, r9, r3
 8015312:	4313      	orrs	r3, r2
 8015314:	9304      	str	r3, [sp, #16]
 8015316:	46a2      	mov	sl, r4
 8015318:	e7d2      	b.n	80152c0 <_svfiprintf_r+0xa0>
 801531a:	9b03      	ldr	r3, [sp, #12]
 801531c:	1d19      	adds	r1, r3, #4
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	9103      	str	r1, [sp, #12]
 8015322:	2b00      	cmp	r3, #0
 8015324:	bfbb      	ittet	lt
 8015326:	425b      	neglt	r3, r3
 8015328:	f042 0202 	orrlt.w	r2, r2, #2
 801532c:	9307      	strge	r3, [sp, #28]
 801532e:	9307      	strlt	r3, [sp, #28]
 8015330:	bfb8      	it	lt
 8015332:	9204      	strlt	r2, [sp, #16]
 8015334:	7823      	ldrb	r3, [r4, #0]
 8015336:	2b2e      	cmp	r3, #46	@ 0x2e
 8015338:	d10a      	bne.n	8015350 <_svfiprintf_r+0x130>
 801533a:	7863      	ldrb	r3, [r4, #1]
 801533c:	2b2a      	cmp	r3, #42	@ 0x2a
 801533e:	d132      	bne.n	80153a6 <_svfiprintf_r+0x186>
 8015340:	9b03      	ldr	r3, [sp, #12]
 8015342:	1d1a      	adds	r2, r3, #4
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	9203      	str	r2, [sp, #12]
 8015348:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801534c:	3402      	adds	r4, #2
 801534e:	9305      	str	r3, [sp, #20]
 8015350:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015414 <_svfiprintf_r+0x1f4>
 8015354:	7821      	ldrb	r1, [r4, #0]
 8015356:	2203      	movs	r2, #3
 8015358:	4650      	mov	r0, sl
 801535a:	f7ea ff39 	bl	80001d0 <memchr>
 801535e:	b138      	cbz	r0, 8015370 <_svfiprintf_r+0x150>
 8015360:	9b04      	ldr	r3, [sp, #16]
 8015362:	eba0 000a 	sub.w	r0, r0, sl
 8015366:	2240      	movs	r2, #64	@ 0x40
 8015368:	4082      	lsls	r2, r0
 801536a:	4313      	orrs	r3, r2
 801536c:	3401      	adds	r4, #1
 801536e:	9304      	str	r3, [sp, #16]
 8015370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015374:	4824      	ldr	r0, [pc, #144]	@ (8015408 <_svfiprintf_r+0x1e8>)
 8015376:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801537a:	2206      	movs	r2, #6
 801537c:	f7ea ff28 	bl	80001d0 <memchr>
 8015380:	2800      	cmp	r0, #0
 8015382:	d036      	beq.n	80153f2 <_svfiprintf_r+0x1d2>
 8015384:	4b21      	ldr	r3, [pc, #132]	@ (801540c <_svfiprintf_r+0x1ec>)
 8015386:	bb1b      	cbnz	r3, 80153d0 <_svfiprintf_r+0x1b0>
 8015388:	9b03      	ldr	r3, [sp, #12]
 801538a:	3307      	adds	r3, #7
 801538c:	f023 0307 	bic.w	r3, r3, #7
 8015390:	3308      	adds	r3, #8
 8015392:	9303      	str	r3, [sp, #12]
 8015394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015396:	4433      	add	r3, r6
 8015398:	9309      	str	r3, [sp, #36]	@ 0x24
 801539a:	e76a      	b.n	8015272 <_svfiprintf_r+0x52>
 801539c:	fb0c 3202 	mla	r2, ip, r2, r3
 80153a0:	460c      	mov	r4, r1
 80153a2:	2001      	movs	r0, #1
 80153a4:	e7a8      	b.n	80152f8 <_svfiprintf_r+0xd8>
 80153a6:	2300      	movs	r3, #0
 80153a8:	3401      	adds	r4, #1
 80153aa:	9305      	str	r3, [sp, #20]
 80153ac:	4619      	mov	r1, r3
 80153ae:	f04f 0c0a 	mov.w	ip, #10
 80153b2:	4620      	mov	r0, r4
 80153b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153b8:	3a30      	subs	r2, #48	@ 0x30
 80153ba:	2a09      	cmp	r2, #9
 80153bc:	d903      	bls.n	80153c6 <_svfiprintf_r+0x1a6>
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d0c6      	beq.n	8015350 <_svfiprintf_r+0x130>
 80153c2:	9105      	str	r1, [sp, #20]
 80153c4:	e7c4      	b.n	8015350 <_svfiprintf_r+0x130>
 80153c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80153ca:	4604      	mov	r4, r0
 80153cc:	2301      	movs	r3, #1
 80153ce:	e7f0      	b.n	80153b2 <_svfiprintf_r+0x192>
 80153d0:	ab03      	add	r3, sp, #12
 80153d2:	9300      	str	r3, [sp, #0]
 80153d4:	462a      	mov	r2, r5
 80153d6:	4b0e      	ldr	r3, [pc, #56]	@ (8015410 <_svfiprintf_r+0x1f0>)
 80153d8:	a904      	add	r1, sp, #16
 80153da:	4638      	mov	r0, r7
 80153dc:	f7fd f980 	bl	80126e0 <_printf_float>
 80153e0:	1c42      	adds	r2, r0, #1
 80153e2:	4606      	mov	r6, r0
 80153e4:	d1d6      	bne.n	8015394 <_svfiprintf_r+0x174>
 80153e6:	89ab      	ldrh	r3, [r5, #12]
 80153e8:	065b      	lsls	r3, r3, #25
 80153ea:	f53f af2d 	bmi.w	8015248 <_svfiprintf_r+0x28>
 80153ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80153f0:	e72c      	b.n	801524c <_svfiprintf_r+0x2c>
 80153f2:	ab03      	add	r3, sp, #12
 80153f4:	9300      	str	r3, [sp, #0]
 80153f6:	462a      	mov	r2, r5
 80153f8:	4b05      	ldr	r3, [pc, #20]	@ (8015410 <_svfiprintf_r+0x1f0>)
 80153fa:	a904      	add	r1, sp, #16
 80153fc:	4638      	mov	r0, r7
 80153fe:	f7fd fc07 	bl	8012c10 <_printf_i>
 8015402:	e7ed      	b.n	80153e0 <_svfiprintf_r+0x1c0>
 8015404:	0801689e 	.word	0x0801689e
 8015408:	080168a8 	.word	0x080168a8
 801540c:	080126e1 	.word	0x080126e1
 8015410:	0801516b 	.word	0x0801516b
 8015414:	080168a4 	.word	0x080168a4

08015418 <__sflush_r>:
 8015418:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015420:	0716      	lsls	r6, r2, #28
 8015422:	4605      	mov	r5, r0
 8015424:	460c      	mov	r4, r1
 8015426:	d454      	bmi.n	80154d2 <__sflush_r+0xba>
 8015428:	684b      	ldr	r3, [r1, #4]
 801542a:	2b00      	cmp	r3, #0
 801542c:	dc02      	bgt.n	8015434 <__sflush_r+0x1c>
 801542e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015430:	2b00      	cmp	r3, #0
 8015432:	dd48      	ble.n	80154c6 <__sflush_r+0xae>
 8015434:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015436:	2e00      	cmp	r6, #0
 8015438:	d045      	beq.n	80154c6 <__sflush_r+0xae>
 801543a:	2300      	movs	r3, #0
 801543c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015440:	682f      	ldr	r7, [r5, #0]
 8015442:	6a21      	ldr	r1, [r4, #32]
 8015444:	602b      	str	r3, [r5, #0]
 8015446:	d030      	beq.n	80154aa <__sflush_r+0x92>
 8015448:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801544a:	89a3      	ldrh	r3, [r4, #12]
 801544c:	0759      	lsls	r1, r3, #29
 801544e:	d505      	bpl.n	801545c <__sflush_r+0x44>
 8015450:	6863      	ldr	r3, [r4, #4]
 8015452:	1ad2      	subs	r2, r2, r3
 8015454:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015456:	b10b      	cbz	r3, 801545c <__sflush_r+0x44>
 8015458:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801545a:	1ad2      	subs	r2, r2, r3
 801545c:	2300      	movs	r3, #0
 801545e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015460:	6a21      	ldr	r1, [r4, #32]
 8015462:	4628      	mov	r0, r5
 8015464:	47b0      	blx	r6
 8015466:	1c43      	adds	r3, r0, #1
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	d106      	bne.n	801547a <__sflush_r+0x62>
 801546c:	6829      	ldr	r1, [r5, #0]
 801546e:	291d      	cmp	r1, #29
 8015470:	d82b      	bhi.n	80154ca <__sflush_r+0xb2>
 8015472:	4a2a      	ldr	r2, [pc, #168]	@ (801551c <__sflush_r+0x104>)
 8015474:	40ca      	lsrs	r2, r1
 8015476:	07d6      	lsls	r6, r2, #31
 8015478:	d527      	bpl.n	80154ca <__sflush_r+0xb2>
 801547a:	2200      	movs	r2, #0
 801547c:	6062      	str	r2, [r4, #4]
 801547e:	04d9      	lsls	r1, r3, #19
 8015480:	6922      	ldr	r2, [r4, #16]
 8015482:	6022      	str	r2, [r4, #0]
 8015484:	d504      	bpl.n	8015490 <__sflush_r+0x78>
 8015486:	1c42      	adds	r2, r0, #1
 8015488:	d101      	bne.n	801548e <__sflush_r+0x76>
 801548a:	682b      	ldr	r3, [r5, #0]
 801548c:	b903      	cbnz	r3, 8015490 <__sflush_r+0x78>
 801548e:	6560      	str	r0, [r4, #84]	@ 0x54
 8015490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015492:	602f      	str	r7, [r5, #0]
 8015494:	b1b9      	cbz	r1, 80154c6 <__sflush_r+0xae>
 8015496:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801549a:	4299      	cmp	r1, r3
 801549c:	d002      	beq.n	80154a4 <__sflush_r+0x8c>
 801549e:	4628      	mov	r0, r5
 80154a0:	f7fe fe16 	bl	80140d0 <_free_r>
 80154a4:	2300      	movs	r3, #0
 80154a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80154a8:	e00d      	b.n	80154c6 <__sflush_r+0xae>
 80154aa:	2301      	movs	r3, #1
 80154ac:	4628      	mov	r0, r5
 80154ae:	47b0      	blx	r6
 80154b0:	4602      	mov	r2, r0
 80154b2:	1c50      	adds	r0, r2, #1
 80154b4:	d1c9      	bne.n	801544a <__sflush_r+0x32>
 80154b6:	682b      	ldr	r3, [r5, #0]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d0c6      	beq.n	801544a <__sflush_r+0x32>
 80154bc:	2b1d      	cmp	r3, #29
 80154be:	d001      	beq.n	80154c4 <__sflush_r+0xac>
 80154c0:	2b16      	cmp	r3, #22
 80154c2:	d11e      	bne.n	8015502 <__sflush_r+0xea>
 80154c4:	602f      	str	r7, [r5, #0]
 80154c6:	2000      	movs	r0, #0
 80154c8:	e022      	b.n	8015510 <__sflush_r+0xf8>
 80154ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80154ce:	b21b      	sxth	r3, r3
 80154d0:	e01b      	b.n	801550a <__sflush_r+0xf2>
 80154d2:	690f      	ldr	r7, [r1, #16]
 80154d4:	2f00      	cmp	r7, #0
 80154d6:	d0f6      	beq.n	80154c6 <__sflush_r+0xae>
 80154d8:	0793      	lsls	r3, r2, #30
 80154da:	680e      	ldr	r6, [r1, #0]
 80154dc:	bf08      	it	eq
 80154de:	694b      	ldreq	r3, [r1, #20]
 80154e0:	600f      	str	r7, [r1, #0]
 80154e2:	bf18      	it	ne
 80154e4:	2300      	movne	r3, #0
 80154e6:	eba6 0807 	sub.w	r8, r6, r7
 80154ea:	608b      	str	r3, [r1, #8]
 80154ec:	f1b8 0f00 	cmp.w	r8, #0
 80154f0:	dde9      	ble.n	80154c6 <__sflush_r+0xae>
 80154f2:	6a21      	ldr	r1, [r4, #32]
 80154f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80154f6:	4643      	mov	r3, r8
 80154f8:	463a      	mov	r2, r7
 80154fa:	4628      	mov	r0, r5
 80154fc:	47b0      	blx	r6
 80154fe:	2800      	cmp	r0, #0
 8015500:	dc08      	bgt.n	8015514 <__sflush_r+0xfc>
 8015502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801550a:	81a3      	strh	r3, [r4, #12]
 801550c:	f04f 30ff 	mov.w	r0, #4294967295
 8015510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015514:	4407      	add	r7, r0
 8015516:	eba8 0800 	sub.w	r8, r8, r0
 801551a:	e7e7      	b.n	80154ec <__sflush_r+0xd4>
 801551c:	20400001 	.word	0x20400001

08015520 <_fflush_r>:
 8015520:	b538      	push	{r3, r4, r5, lr}
 8015522:	690b      	ldr	r3, [r1, #16]
 8015524:	4605      	mov	r5, r0
 8015526:	460c      	mov	r4, r1
 8015528:	b913      	cbnz	r3, 8015530 <_fflush_r+0x10>
 801552a:	2500      	movs	r5, #0
 801552c:	4628      	mov	r0, r5
 801552e:	bd38      	pop	{r3, r4, r5, pc}
 8015530:	b118      	cbz	r0, 801553a <_fflush_r+0x1a>
 8015532:	6a03      	ldr	r3, [r0, #32]
 8015534:	b90b      	cbnz	r3, 801553a <_fflush_r+0x1a>
 8015536:	f7fd fd15 	bl	8012f64 <__sinit>
 801553a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d0f3      	beq.n	801552a <_fflush_r+0xa>
 8015542:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015544:	07d0      	lsls	r0, r2, #31
 8015546:	d404      	bmi.n	8015552 <_fflush_r+0x32>
 8015548:	0599      	lsls	r1, r3, #22
 801554a:	d402      	bmi.n	8015552 <_fflush_r+0x32>
 801554c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801554e:	f7fd ff24 	bl	801339a <__retarget_lock_acquire_recursive>
 8015552:	4628      	mov	r0, r5
 8015554:	4621      	mov	r1, r4
 8015556:	f7ff ff5f 	bl	8015418 <__sflush_r>
 801555a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801555c:	07da      	lsls	r2, r3, #31
 801555e:	4605      	mov	r5, r0
 8015560:	d4e4      	bmi.n	801552c <_fflush_r+0xc>
 8015562:	89a3      	ldrh	r3, [r4, #12]
 8015564:	059b      	lsls	r3, r3, #22
 8015566:	d4e1      	bmi.n	801552c <_fflush_r+0xc>
 8015568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801556a:	f7fd ff17 	bl	801339c <__retarget_lock_release_recursive>
 801556e:	e7dd      	b.n	801552c <_fflush_r+0xc>

08015570 <fiprintf>:
 8015570:	b40e      	push	{r1, r2, r3}
 8015572:	b503      	push	{r0, r1, lr}
 8015574:	4601      	mov	r1, r0
 8015576:	ab03      	add	r3, sp, #12
 8015578:	4805      	ldr	r0, [pc, #20]	@ (8015590 <fiprintf+0x20>)
 801557a:	f853 2b04 	ldr.w	r2, [r3], #4
 801557e:	6800      	ldr	r0, [r0, #0]
 8015580:	9301      	str	r3, [sp, #4]
 8015582:	f000 f879 	bl	8015678 <_vfiprintf_r>
 8015586:	b002      	add	sp, #8
 8015588:	f85d eb04 	ldr.w	lr, [sp], #4
 801558c:	b003      	add	sp, #12
 801558e:	4770      	bx	lr
 8015590:	2000040c 	.word	0x2000040c

08015594 <abort>:
 8015594:	b508      	push	{r3, lr}
 8015596:	2006      	movs	r0, #6
 8015598:	f000 fa42 	bl	8015a20 <raise>
 801559c:	2001      	movs	r0, #1
 801559e:	f7ee f9b9 	bl	8003914 <_exit>

080155a2 <_calloc_r>:
 80155a2:	b570      	push	{r4, r5, r6, lr}
 80155a4:	fba1 5402 	umull	r5, r4, r1, r2
 80155a8:	b934      	cbnz	r4, 80155b8 <_calloc_r+0x16>
 80155aa:	4629      	mov	r1, r5
 80155ac:	f7fc f8da 	bl	8011764 <_malloc_r>
 80155b0:	4606      	mov	r6, r0
 80155b2:	b928      	cbnz	r0, 80155c0 <_calloc_r+0x1e>
 80155b4:	4630      	mov	r0, r6
 80155b6:	bd70      	pop	{r4, r5, r6, pc}
 80155b8:	220c      	movs	r2, #12
 80155ba:	6002      	str	r2, [r0, #0]
 80155bc:	2600      	movs	r6, #0
 80155be:	e7f9      	b.n	80155b4 <_calloc_r+0x12>
 80155c0:	462a      	mov	r2, r5
 80155c2:	4621      	mov	r1, r4
 80155c4:	f7fd fd83 	bl	80130ce <memset>
 80155c8:	e7f4      	b.n	80155b4 <_calloc_r+0x12>

080155ca <_realloc_r>:
 80155ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ce:	4607      	mov	r7, r0
 80155d0:	4614      	mov	r4, r2
 80155d2:	460d      	mov	r5, r1
 80155d4:	b921      	cbnz	r1, 80155e0 <_realloc_r+0x16>
 80155d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155da:	4611      	mov	r1, r2
 80155dc:	f7fc b8c2 	b.w	8011764 <_malloc_r>
 80155e0:	b92a      	cbnz	r2, 80155ee <_realloc_r+0x24>
 80155e2:	f7fe fd75 	bl	80140d0 <_free_r>
 80155e6:	4625      	mov	r5, r4
 80155e8:	4628      	mov	r0, r5
 80155ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ee:	f000 fa33 	bl	8015a58 <_malloc_usable_size_r>
 80155f2:	4284      	cmp	r4, r0
 80155f4:	4606      	mov	r6, r0
 80155f6:	d802      	bhi.n	80155fe <_realloc_r+0x34>
 80155f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80155fc:	d8f4      	bhi.n	80155e8 <_realloc_r+0x1e>
 80155fe:	4621      	mov	r1, r4
 8015600:	4638      	mov	r0, r7
 8015602:	f7fc f8af 	bl	8011764 <_malloc_r>
 8015606:	4680      	mov	r8, r0
 8015608:	b908      	cbnz	r0, 801560e <_realloc_r+0x44>
 801560a:	4645      	mov	r5, r8
 801560c:	e7ec      	b.n	80155e8 <_realloc_r+0x1e>
 801560e:	42b4      	cmp	r4, r6
 8015610:	4622      	mov	r2, r4
 8015612:	4629      	mov	r1, r5
 8015614:	bf28      	it	cs
 8015616:	4632      	movcs	r2, r6
 8015618:	f7fd fec9 	bl	80133ae <memcpy>
 801561c:	4629      	mov	r1, r5
 801561e:	4638      	mov	r0, r7
 8015620:	f7fe fd56 	bl	80140d0 <_free_r>
 8015624:	e7f1      	b.n	801560a <_realloc_r+0x40>

08015626 <__sfputc_r>:
 8015626:	6893      	ldr	r3, [r2, #8]
 8015628:	3b01      	subs	r3, #1
 801562a:	2b00      	cmp	r3, #0
 801562c:	b410      	push	{r4}
 801562e:	6093      	str	r3, [r2, #8]
 8015630:	da08      	bge.n	8015644 <__sfputc_r+0x1e>
 8015632:	6994      	ldr	r4, [r2, #24]
 8015634:	42a3      	cmp	r3, r4
 8015636:	db01      	blt.n	801563c <__sfputc_r+0x16>
 8015638:	290a      	cmp	r1, #10
 801563a:	d103      	bne.n	8015644 <__sfputc_r+0x1e>
 801563c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015640:	f000 b932 	b.w	80158a8 <__swbuf_r>
 8015644:	6813      	ldr	r3, [r2, #0]
 8015646:	1c58      	adds	r0, r3, #1
 8015648:	6010      	str	r0, [r2, #0]
 801564a:	7019      	strb	r1, [r3, #0]
 801564c:	4608      	mov	r0, r1
 801564e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015652:	4770      	bx	lr

08015654 <__sfputs_r>:
 8015654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015656:	4606      	mov	r6, r0
 8015658:	460f      	mov	r7, r1
 801565a:	4614      	mov	r4, r2
 801565c:	18d5      	adds	r5, r2, r3
 801565e:	42ac      	cmp	r4, r5
 8015660:	d101      	bne.n	8015666 <__sfputs_r+0x12>
 8015662:	2000      	movs	r0, #0
 8015664:	e007      	b.n	8015676 <__sfputs_r+0x22>
 8015666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801566a:	463a      	mov	r2, r7
 801566c:	4630      	mov	r0, r6
 801566e:	f7ff ffda 	bl	8015626 <__sfputc_r>
 8015672:	1c43      	adds	r3, r0, #1
 8015674:	d1f3      	bne.n	801565e <__sfputs_r+0xa>
 8015676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015678 <_vfiprintf_r>:
 8015678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567c:	460d      	mov	r5, r1
 801567e:	b09d      	sub	sp, #116	@ 0x74
 8015680:	4614      	mov	r4, r2
 8015682:	4698      	mov	r8, r3
 8015684:	4606      	mov	r6, r0
 8015686:	b118      	cbz	r0, 8015690 <_vfiprintf_r+0x18>
 8015688:	6a03      	ldr	r3, [r0, #32]
 801568a:	b90b      	cbnz	r3, 8015690 <_vfiprintf_r+0x18>
 801568c:	f7fd fc6a 	bl	8012f64 <__sinit>
 8015690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015692:	07d9      	lsls	r1, r3, #31
 8015694:	d405      	bmi.n	80156a2 <_vfiprintf_r+0x2a>
 8015696:	89ab      	ldrh	r3, [r5, #12]
 8015698:	059a      	lsls	r2, r3, #22
 801569a:	d402      	bmi.n	80156a2 <_vfiprintf_r+0x2a>
 801569c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801569e:	f7fd fe7c 	bl	801339a <__retarget_lock_acquire_recursive>
 80156a2:	89ab      	ldrh	r3, [r5, #12]
 80156a4:	071b      	lsls	r3, r3, #28
 80156a6:	d501      	bpl.n	80156ac <_vfiprintf_r+0x34>
 80156a8:	692b      	ldr	r3, [r5, #16]
 80156aa:	b99b      	cbnz	r3, 80156d4 <_vfiprintf_r+0x5c>
 80156ac:	4629      	mov	r1, r5
 80156ae:	4630      	mov	r0, r6
 80156b0:	f000 f938 	bl	8015924 <__swsetup_r>
 80156b4:	b170      	cbz	r0, 80156d4 <_vfiprintf_r+0x5c>
 80156b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80156b8:	07dc      	lsls	r4, r3, #31
 80156ba:	d504      	bpl.n	80156c6 <_vfiprintf_r+0x4e>
 80156bc:	f04f 30ff 	mov.w	r0, #4294967295
 80156c0:	b01d      	add	sp, #116	@ 0x74
 80156c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156c6:	89ab      	ldrh	r3, [r5, #12]
 80156c8:	0598      	lsls	r0, r3, #22
 80156ca:	d4f7      	bmi.n	80156bc <_vfiprintf_r+0x44>
 80156cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80156ce:	f7fd fe65 	bl	801339c <__retarget_lock_release_recursive>
 80156d2:	e7f3      	b.n	80156bc <_vfiprintf_r+0x44>
 80156d4:	2300      	movs	r3, #0
 80156d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80156d8:	2320      	movs	r3, #32
 80156da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80156de:	f8cd 800c 	str.w	r8, [sp, #12]
 80156e2:	2330      	movs	r3, #48	@ 0x30
 80156e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015894 <_vfiprintf_r+0x21c>
 80156e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80156ec:	f04f 0901 	mov.w	r9, #1
 80156f0:	4623      	mov	r3, r4
 80156f2:	469a      	mov	sl, r3
 80156f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156f8:	b10a      	cbz	r2, 80156fe <_vfiprintf_r+0x86>
 80156fa:	2a25      	cmp	r2, #37	@ 0x25
 80156fc:	d1f9      	bne.n	80156f2 <_vfiprintf_r+0x7a>
 80156fe:	ebba 0b04 	subs.w	fp, sl, r4
 8015702:	d00b      	beq.n	801571c <_vfiprintf_r+0xa4>
 8015704:	465b      	mov	r3, fp
 8015706:	4622      	mov	r2, r4
 8015708:	4629      	mov	r1, r5
 801570a:	4630      	mov	r0, r6
 801570c:	f7ff ffa2 	bl	8015654 <__sfputs_r>
 8015710:	3001      	adds	r0, #1
 8015712:	f000 80a7 	beq.w	8015864 <_vfiprintf_r+0x1ec>
 8015716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015718:	445a      	add	r2, fp
 801571a:	9209      	str	r2, [sp, #36]	@ 0x24
 801571c:	f89a 3000 	ldrb.w	r3, [sl]
 8015720:	2b00      	cmp	r3, #0
 8015722:	f000 809f 	beq.w	8015864 <_vfiprintf_r+0x1ec>
 8015726:	2300      	movs	r3, #0
 8015728:	f04f 32ff 	mov.w	r2, #4294967295
 801572c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015730:	f10a 0a01 	add.w	sl, sl, #1
 8015734:	9304      	str	r3, [sp, #16]
 8015736:	9307      	str	r3, [sp, #28]
 8015738:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801573c:	931a      	str	r3, [sp, #104]	@ 0x68
 801573e:	4654      	mov	r4, sl
 8015740:	2205      	movs	r2, #5
 8015742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015746:	4853      	ldr	r0, [pc, #332]	@ (8015894 <_vfiprintf_r+0x21c>)
 8015748:	f7ea fd42 	bl	80001d0 <memchr>
 801574c:	9a04      	ldr	r2, [sp, #16]
 801574e:	b9d8      	cbnz	r0, 8015788 <_vfiprintf_r+0x110>
 8015750:	06d1      	lsls	r1, r2, #27
 8015752:	bf44      	itt	mi
 8015754:	2320      	movmi	r3, #32
 8015756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801575a:	0713      	lsls	r3, r2, #28
 801575c:	bf44      	itt	mi
 801575e:	232b      	movmi	r3, #43	@ 0x2b
 8015760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015764:	f89a 3000 	ldrb.w	r3, [sl]
 8015768:	2b2a      	cmp	r3, #42	@ 0x2a
 801576a:	d015      	beq.n	8015798 <_vfiprintf_r+0x120>
 801576c:	9a07      	ldr	r2, [sp, #28]
 801576e:	4654      	mov	r4, sl
 8015770:	2000      	movs	r0, #0
 8015772:	f04f 0c0a 	mov.w	ip, #10
 8015776:	4621      	mov	r1, r4
 8015778:	f811 3b01 	ldrb.w	r3, [r1], #1
 801577c:	3b30      	subs	r3, #48	@ 0x30
 801577e:	2b09      	cmp	r3, #9
 8015780:	d94b      	bls.n	801581a <_vfiprintf_r+0x1a2>
 8015782:	b1b0      	cbz	r0, 80157b2 <_vfiprintf_r+0x13a>
 8015784:	9207      	str	r2, [sp, #28]
 8015786:	e014      	b.n	80157b2 <_vfiprintf_r+0x13a>
 8015788:	eba0 0308 	sub.w	r3, r0, r8
 801578c:	fa09 f303 	lsl.w	r3, r9, r3
 8015790:	4313      	orrs	r3, r2
 8015792:	9304      	str	r3, [sp, #16]
 8015794:	46a2      	mov	sl, r4
 8015796:	e7d2      	b.n	801573e <_vfiprintf_r+0xc6>
 8015798:	9b03      	ldr	r3, [sp, #12]
 801579a:	1d19      	adds	r1, r3, #4
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	9103      	str	r1, [sp, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	bfbb      	ittet	lt
 80157a4:	425b      	neglt	r3, r3
 80157a6:	f042 0202 	orrlt.w	r2, r2, #2
 80157aa:	9307      	strge	r3, [sp, #28]
 80157ac:	9307      	strlt	r3, [sp, #28]
 80157ae:	bfb8      	it	lt
 80157b0:	9204      	strlt	r2, [sp, #16]
 80157b2:	7823      	ldrb	r3, [r4, #0]
 80157b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80157b6:	d10a      	bne.n	80157ce <_vfiprintf_r+0x156>
 80157b8:	7863      	ldrb	r3, [r4, #1]
 80157ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80157bc:	d132      	bne.n	8015824 <_vfiprintf_r+0x1ac>
 80157be:	9b03      	ldr	r3, [sp, #12]
 80157c0:	1d1a      	adds	r2, r3, #4
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	9203      	str	r2, [sp, #12]
 80157c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80157ca:	3402      	adds	r4, #2
 80157cc:	9305      	str	r3, [sp, #20]
 80157ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80158a4 <_vfiprintf_r+0x22c>
 80157d2:	7821      	ldrb	r1, [r4, #0]
 80157d4:	2203      	movs	r2, #3
 80157d6:	4650      	mov	r0, sl
 80157d8:	f7ea fcfa 	bl	80001d0 <memchr>
 80157dc:	b138      	cbz	r0, 80157ee <_vfiprintf_r+0x176>
 80157de:	9b04      	ldr	r3, [sp, #16]
 80157e0:	eba0 000a 	sub.w	r0, r0, sl
 80157e4:	2240      	movs	r2, #64	@ 0x40
 80157e6:	4082      	lsls	r2, r0
 80157e8:	4313      	orrs	r3, r2
 80157ea:	3401      	adds	r4, #1
 80157ec:	9304      	str	r3, [sp, #16]
 80157ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157f2:	4829      	ldr	r0, [pc, #164]	@ (8015898 <_vfiprintf_r+0x220>)
 80157f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80157f8:	2206      	movs	r2, #6
 80157fa:	f7ea fce9 	bl	80001d0 <memchr>
 80157fe:	2800      	cmp	r0, #0
 8015800:	d03f      	beq.n	8015882 <_vfiprintf_r+0x20a>
 8015802:	4b26      	ldr	r3, [pc, #152]	@ (801589c <_vfiprintf_r+0x224>)
 8015804:	bb1b      	cbnz	r3, 801584e <_vfiprintf_r+0x1d6>
 8015806:	9b03      	ldr	r3, [sp, #12]
 8015808:	3307      	adds	r3, #7
 801580a:	f023 0307 	bic.w	r3, r3, #7
 801580e:	3308      	adds	r3, #8
 8015810:	9303      	str	r3, [sp, #12]
 8015812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015814:	443b      	add	r3, r7
 8015816:	9309      	str	r3, [sp, #36]	@ 0x24
 8015818:	e76a      	b.n	80156f0 <_vfiprintf_r+0x78>
 801581a:	fb0c 3202 	mla	r2, ip, r2, r3
 801581e:	460c      	mov	r4, r1
 8015820:	2001      	movs	r0, #1
 8015822:	e7a8      	b.n	8015776 <_vfiprintf_r+0xfe>
 8015824:	2300      	movs	r3, #0
 8015826:	3401      	adds	r4, #1
 8015828:	9305      	str	r3, [sp, #20]
 801582a:	4619      	mov	r1, r3
 801582c:	f04f 0c0a 	mov.w	ip, #10
 8015830:	4620      	mov	r0, r4
 8015832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015836:	3a30      	subs	r2, #48	@ 0x30
 8015838:	2a09      	cmp	r2, #9
 801583a:	d903      	bls.n	8015844 <_vfiprintf_r+0x1cc>
 801583c:	2b00      	cmp	r3, #0
 801583e:	d0c6      	beq.n	80157ce <_vfiprintf_r+0x156>
 8015840:	9105      	str	r1, [sp, #20]
 8015842:	e7c4      	b.n	80157ce <_vfiprintf_r+0x156>
 8015844:	fb0c 2101 	mla	r1, ip, r1, r2
 8015848:	4604      	mov	r4, r0
 801584a:	2301      	movs	r3, #1
 801584c:	e7f0      	b.n	8015830 <_vfiprintf_r+0x1b8>
 801584e:	ab03      	add	r3, sp, #12
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	462a      	mov	r2, r5
 8015854:	4b12      	ldr	r3, [pc, #72]	@ (80158a0 <_vfiprintf_r+0x228>)
 8015856:	a904      	add	r1, sp, #16
 8015858:	4630      	mov	r0, r6
 801585a:	f7fc ff41 	bl	80126e0 <_printf_float>
 801585e:	4607      	mov	r7, r0
 8015860:	1c78      	adds	r0, r7, #1
 8015862:	d1d6      	bne.n	8015812 <_vfiprintf_r+0x19a>
 8015864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015866:	07d9      	lsls	r1, r3, #31
 8015868:	d405      	bmi.n	8015876 <_vfiprintf_r+0x1fe>
 801586a:	89ab      	ldrh	r3, [r5, #12]
 801586c:	059a      	lsls	r2, r3, #22
 801586e:	d402      	bmi.n	8015876 <_vfiprintf_r+0x1fe>
 8015870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015872:	f7fd fd93 	bl	801339c <__retarget_lock_release_recursive>
 8015876:	89ab      	ldrh	r3, [r5, #12]
 8015878:	065b      	lsls	r3, r3, #25
 801587a:	f53f af1f 	bmi.w	80156bc <_vfiprintf_r+0x44>
 801587e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015880:	e71e      	b.n	80156c0 <_vfiprintf_r+0x48>
 8015882:	ab03      	add	r3, sp, #12
 8015884:	9300      	str	r3, [sp, #0]
 8015886:	462a      	mov	r2, r5
 8015888:	4b05      	ldr	r3, [pc, #20]	@ (80158a0 <_vfiprintf_r+0x228>)
 801588a:	a904      	add	r1, sp, #16
 801588c:	4630      	mov	r0, r6
 801588e:	f7fd f9bf 	bl	8012c10 <_printf_i>
 8015892:	e7e4      	b.n	801585e <_vfiprintf_r+0x1e6>
 8015894:	0801689e 	.word	0x0801689e
 8015898:	080168a8 	.word	0x080168a8
 801589c:	080126e1 	.word	0x080126e1
 80158a0:	08015655 	.word	0x08015655
 80158a4:	080168a4 	.word	0x080168a4

080158a8 <__swbuf_r>:
 80158a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158aa:	460e      	mov	r6, r1
 80158ac:	4614      	mov	r4, r2
 80158ae:	4605      	mov	r5, r0
 80158b0:	b118      	cbz	r0, 80158ba <__swbuf_r+0x12>
 80158b2:	6a03      	ldr	r3, [r0, #32]
 80158b4:	b90b      	cbnz	r3, 80158ba <__swbuf_r+0x12>
 80158b6:	f7fd fb55 	bl	8012f64 <__sinit>
 80158ba:	69a3      	ldr	r3, [r4, #24]
 80158bc:	60a3      	str	r3, [r4, #8]
 80158be:	89a3      	ldrh	r3, [r4, #12]
 80158c0:	071a      	lsls	r2, r3, #28
 80158c2:	d501      	bpl.n	80158c8 <__swbuf_r+0x20>
 80158c4:	6923      	ldr	r3, [r4, #16]
 80158c6:	b943      	cbnz	r3, 80158da <__swbuf_r+0x32>
 80158c8:	4621      	mov	r1, r4
 80158ca:	4628      	mov	r0, r5
 80158cc:	f000 f82a 	bl	8015924 <__swsetup_r>
 80158d0:	b118      	cbz	r0, 80158da <__swbuf_r+0x32>
 80158d2:	f04f 37ff 	mov.w	r7, #4294967295
 80158d6:	4638      	mov	r0, r7
 80158d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158da:	6823      	ldr	r3, [r4, #0]
 80158dc:	6922      	ldr	r2, [r4, #16]
 80158de:	1a98      	subs	r0, r3, r2
 80158e0:	6963      	ldr	r3, [r4, #20]
 80158e2:	b2f6      	uxtb	r6, r6
 80158e4:	4283      	cmp	r3, r0
 80158e6:	4637      	mov	r7, r6
 80158e8:	dc05      	bgt.n	80158f6 <__swbuf_r+0x4e>
 80158ea:	4621      	mov	r1, r4
 80158ec:	4628      	mov	r0, r5
 80158ee:	f7ff fe17 	bl	8015520 <_fflush_r>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d1ed      	bne.n	80158d2 <__swbuf_r+0x2a>
 80158f6:	68a3      	ldr	r3, [r4, #8]
 80158f8:	3b01      	subs	r3, #1
 80158fa:	60a3      	str	r3, [r4, #8]
 80158fc:	6823      	ldr	r3, [r4, #0]
 80158fe:	1c5a      	adds	r2, r3, #1
 8015900:	6022      	str	r2, [r4, #0]
 8015902:	701e      	strb	r6, [r3, #0]
 8015904:	6962      	ldr	r2, [r4, #20]
 8015906:	1c43      	adds	r3, r0, #1
 8015908:	429a      	cmp	r2, r3
 801590a:	d004      	beq.n	8015916 <__swbuf_r+0x6e>
 801590c:	89a3      	ldrh	r3, [r4, #12]
 801590e:	07db      	lsls	r3, r3, #31
 8015910:	d5e1      	bpl.n	80158d6 <__swbuf_r+0x2e>
 8015912:	2e0a      	cmp	r6, #10
 8015914:	d1df      	bne.n	80158d6 <__swbuf_r+0x2e>
 8015916:	4621      	mov	r1, r4
 8015918:	4628      	mov	r0, r5
 801591a:	f7ff fe01 	bl	8015520 <_fflush_r>
 801591e:	2800      	cmp	r0, #0
 8015920:	d0d9      	beq.n	80158d6 <__swbuf_r+0x2e>
 8015922:	e7d6      	b.n	80158d2 <__swbuf_r+0x2a>

08015924 <__swsetup_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	4b29      	ldr	r3, [pc, #164]	@ (80159cc <__swsetup_r+0xa8>)
 8015928:	4605      	mov	r5, r0
 801592a:	6818      	ldr	r0, [r3, #0]
 801592c:	460c      	mov	r4, r1
 801592e:	b118      	cbz	r0, 8015938 <__swsetup_r+0x14>
 8015930:	6a03      	ldr	r3, [r0, #32]
 8015932:	b90b      	cbnz	r3, 8015938 <__swsetup_r+0x14>
 8015934:	f7fd fb16 	bl	8012f64 <__sinit>
 8015938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801593c:	0719      	lsls	r1, r3, #28
 801593e:	d422      	bmi.n	8015986 <__swsetup_r+0x62>
 8015940:	06da      	lsls	r2, r3, #27
 8015942:	d407      	bmi.n	8015954 <__swsetup_r+0x30>
 8015944:	2209      	movs	r2, #9
 8015946:	602a      	str	r2, [r5, #0]
 8015948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801594c:	81a3      	strh	r3, [r4, #12]
 801594e:	f04f 30ff 	mov.w	r0, #4294967295
 8015952:	e033      	b.n	80159bc <__swsetup_r+0x98>
 8015954:	0758      	lsls	r0, r3, #29
 8015956:	d512      	bpl.n	801597e <__swsetup_r+0x5a>
 8015958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801595a:	b141      	cbz	r1, 801596e <__swsetup_r+0x4a>
 801595c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015960:	4299      	cmp	r1, r3
 8015962:	d002      	beq.n	801596a <__swsetup_r+0x46>
 8015964:	4628      	mov	r0, r5
 8015966:	f7fe fbb3 	bl	80140d0 <_free_r>
 801596a:	2300      	movs	r3, #0
 801596c:	6363      	str	r3, [r4, #52]	@ 0x34
 801596e:	89a3      	ldrh	r3, [r4, #12]
 8015970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015974:	81a3      	strh	r3, [r4, #12]
 8015976:	2300      	movs	r3, #0
 8015978:	6063      	str	r3, [r4, #4]
 801597a:	6923      	ldr	r3, [r4, #16]
 801597c:	6023      	str	r3, [r4, #0]
 801597e:	89a3      	ldrh	r3, [r4, #12]
 8015980:	f043 0308 	orr.w	r3, r3, #8
 8015984:	81a3      	strh	r3, [r4, #12]
 8015986:	6923      	ldr	r3, [r4, #16]
 8015988:	b94b      	cbnz	r3, 801599e <__swsetup_r+0x7a>
 801598a:	89a3      	ldrh	r3, [r4, #12]
 801598c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015994:	d003      	beq.n	801599e <__swsetup_r+0x7a>
 8015996:	4621      	mov	r1, r4
 8015998:	4628      	mov	r0, r5
 801599a:	f000 f88b 	bl	8015ab4 <__smakebuf_r>
 801599e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159a2:	f013 0201 	ands.w	r2, r3, #1
 80159a6:	d00a      	beq.n	80159be <__swsetup_r+0x9a>
 80159a8:	2200      	movs	r2, #0
 80159aa:	60a2      	str	r2, [r4, #8]
 80159ac:	6962      	ldr	r2, [r4, #20]
 80159ae:	4252      	negs	r2, r2
 80159b0:	61a2      	str	r2, [r4, #24]
 80159b2:	6922      	ldr	r2, [r4, #16]
 80159b4:	b942      	cbnz	r2, 80159c8 <__swsetup_r+0xa4>
 80159b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80159ba:	d1c5      	bne.n	8015948 <__swsetup_r+0x24>
 80159bc:	bd38      	pop	{r3, r4, r5, pc}
 80159be:	0799      	lsls	r1, r3, #30
 80159c0:	bf58      	it	pl
 80159c2:	6962      	ldrpl	r2, [r4, #20]
 80159c4:	60a2      	str	r2, [r4, #8]
 80159c6:	e7f4      	b.n	80159b2 <__swsetup_r+0x8e>
 80159c8:	2000      	movs	r0, #0
 80159ca:	e7f7      	b.n	80159bc <__swsetup_r+0x98>
 80159cc:	2000040c 	.word	0x2000040c

080159d0 <_raise_r>:
 80159d0:	291f      	cmp	r1, #31
 80159d2:	b538      	push	{r3, r4, r5, lr}
 80159d4:	4605      	mov	r5, r0
 80159d6:	460c      	mov	r4, r1
 80159d8:	d904      	bls.n	80159e4 <_raise_r+0x14>
 80159da:	2316      	movs	r3, #22
 80159dc:	6003      	str	r3, [r0, #0]
 80159de:	f04f 30ff 	mov.w	r0, #4294967295
 80159e2:	bd38      	pop	{r3, r4, r5, pc}
 80159e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80159e6:	b112      	cbz	r2, 80159ee <_raise_r+0x1e>
 80159e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159ec:	b94b      	cbnz	r3, 8015a02 <_raise_r+0x32>
 80159ee:	4628      	mov	r0, r5
 80159f0:	f000 f830 	bl	8015a54 <_getpid_r>
 80159f4:	4622      	mov	r2, r4
 80159f6:	4601      	mov	r1, r0
 80159f8:	4628      	mov	r0, r5
 80159fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159fe:	f000 b817 	b.w	8015a30 <_kill_r>
 8015a02:	2b01      	cmp	r3, #1
 8015a04:	d00a      	beq.n	8015a1c <_raise_r+0x4c>
 8015a06:	1c59      	adds	r1, r3, #1
 8015a08:	d103      	bne.n	8015a12 <_raise_r+0x42>
 8015a0a:	2316      	movs	r3, #22
 8015a0c:	6003      	str	r3, [r0, #0]
 8015a0e:	2001      	movs	r0, #1
 8015a10:	e7e7      	b.n	80159e2 <_raise_r+0x12>
 8015a12:	2100      	movs	r1, #0
 8015a14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a18:	4620      	mov	r0, r4
 8015a1a:	4798      	blx	r3
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	e7e0      	b.n	80159e2 <_raise_r+0x12>

08015a20 <raise>:
 8015a20:	4b02      	ldr	r3, [pc, #8]	@ (8015a2c <raise+0xc>)
 8015a22:	4601      	mov	r1, r0
 8015a24:	6818      	ldr	r0, [r3, #0]
 8015a26:	f7ff bfd3 	b.w	80159d0 <_raise_r>
 8015a2a:	bf00      	nop
 8015a2c:	2000040c 	.word	0x2000040c

08015a30 <_kill_r>:
 8015a30:	b538      	push	{r3, r4, r5, lr}
 8015a32:	4d07      	ldr	r5, [pc, #28]	@ (8015a50 <_kill_r+0x20>)
 8015a34:	2300      	movs	r3, #0
 8015a36:	4604      	mov	r4, r0
 8015a38:	4608      	mov	r0, r1
 8015a3a:	4611      	mov	r1, r2
 8015a3c:	602b      	str	r3, [r5, #0]
 8015a3e:	f7ed ff59 	bl	80038f4 <_kill>
 8015a42:	1c43      	adds	r3, r0, #1
 8015a44:	d102      	bne.n	8015a4c <_kill_r+0x1c>
 8015a46:	682b      	ldr	r3, [r5, #0]
 8015a48:	b103      	cbz	r3, 8015a4c <_kill_r+0x1c>
 8015a4a:	6023      	str	r3, [r4, #0]
 8015a4c:	bd38      	pop	{r3, r4, r5, pc}
 8015a4e:	bf00      	nop
 8015a50:	20013828 	.word	0x20013828

08015a54 <_getpid_r>:
 8015a54:	f7ed bf46 	b.w	80038e4 <_getpid>

08015a58 <_malloc_usable_size_r>:
 8015a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a5c:	1f18      	subs	r0, r3, #4
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	bfbc      	itt	lt
 8015a62:	580b      	ldrlt	r3, [r1, r0]
 8015a64:	18c0      	addlt	r0, r0, r3
 8015a66:	4770      	bx	lr

08015a68 <__swhatbuf_r>:
 8015a68:	b570      	push	{r4, r5, r6, lr}
 8015a6a:	460c      	mov	r4, r1
 8015a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a70:	2900      	cmp	r1, #0
 8015a72:	b096      	sub	sp, #88	@ 0x58
 8015a74:	4615      	mov	r5, r2
 8015a76:	461e      	mov	r6, r3
 8015a78:	da0d      	bge.n	8015a96 <__swhatbuf_r+0x2e>
 8015a7a:	89a3      	ldrh	r3, [r4, #12]
 8015a7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015a80:	f04f 0100 	mov.w	r1, #0
 8015a84:	bf14      	ite	ne
 8015a86:	2340      	movne	r3, #64	@ 0x40
 8015a88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015a8c:	2000      	movs	r0, #0
 8015a8e:	6031      	str	r1, [r6, #0]
 8015a90:	602b      	str	r3, [r5, #0]
 8015a92:	b016      	add	sp, #88	@ 0x58
 8015a94:	bd70      	pop	{r4, r5, r6, pc}
 8015a96:	466a      	mov	r2, sp
 8015a98:	f000 f848 	bl	8015b2c <_fstat_r>
 8015a9c:	2800      	cmp	r0, #0
 8015a9e:	dbec      	blt.n	8015a7a <__swhatbuf_r+0x12>
 8015aa0:	9901      	ldr	r1, [sp, #4]
 8015aa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015aa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015aaa:	4259      	negs	r1, r3
 8015aac:	4159      	adcs	r1, r3
 8015aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ab2:	e7eb      	b.n	8015a8c <__swhatbuf_r+0x24>

08015ab4 <__smakebuf_r>:
 8015ab4:	898b      	ldrh	r3, [r1, #12]
 8015ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ab8:	079d      	lsls	r5, r3, #30
 8015aba:	4606      	mov	r6, r0
 8015abc:	460c      	mov	r4, r1
 8015abe:	d507      	bpl.n	8015ad0 <__smakebuf_r+0x1c>
 8015ac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015ac4:	6023      	str	r3, [r4, #0]
 8015ac6:	6123      	str	r3, [r4, #16]
 8015ac8:	2301      	movs	r3, #1
 8015aca:	6163      	str	r3, [r4, #20]
 8015acc:	b003      	add	sp, #12
 8015ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ad0:	ab01      	add	r3, sp, #4
 8015ad2:	466a      	mov	r2, sp
 8015ad4:	f7ff ffc8 	bl	8015a68 <__swhatbuf_r>
 8015ad8:	9f00      	ldr	r7, [sp, #0]
 8015ada:	4605      	mov	r5, r0
 8015adc:	4639      	mov	r1, r7
 8015ade:	4630      	mov	r0, r6
 8015ae0:	f7fb fe40 	bl	8011764 <_malloc_r>
 8015ae4:	b948      	cbnz	r0, 8015afa <__smakebuf_r+0x46>
 8015ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015aea:	059a      	lsls	r2, r3, #22
 8015aec:	d4ee      	bmi.n	8015acc <__smakebuf_r+0x18>
 8015aee:	f023 0303 	bic.w	r3, r3, #3
 8015af2:	f043 0302 	orr.w	r3, r3, #2
 8015af6:	81a3      	strh	r3, [r4, #12]
 8015af8:	e7e2      	b.n	8015ac0 <__smakebuf_r+0xc>
 8015afa:	89a3      	ldrh	r3, [r4, #12]
 8015afc:	6020      	str	r0, [r4, #0]
 8015afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b02:	81a3      	strh	r3, [r4, #12]
 8015b04:	9b01      	ldr	r3, [sp, #4]
 8015b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b0a:	b15b      	cbz	r3, 8015b24 <__smakebuf_r+0x70>
 8015b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b10:	4630      	mov	r0, r6
 8015b12:	f000 f81d 	bl	8015b50 <_isatty_r>
 8015b16:	b128      	cbz	r0, 8015b24 <__smakebuf_r+0x70>
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	f023 0303 	bic.w	r3, r3, #3
 8015b1e:	f043 0301 	orr.w	r3, r3, #1
 8015b22:	81a3      	strh	r3, [r4, #12]
 8015b24:	89a3      	ldrh	r3, [r4, #12]
 8015b26:	431d      	orrs	r5, r3
 8015b28:	81a5      	strh	r5, [r4, #12]
 8015b2a:	e7cf      	b.n	8015acc <__smakebuf_r+0x18>

08015b2c <_fstat_r>:
 8015b2c:	b538      	push	{r3, r4, r5, lr}
 8015b2e:	4d07      	ldr	r5, [pc, #28]	@ (8015b4c <_fstat_r+0x20>)
 8015b30:	2300      	movs	r3, #0
 8015b32:	4604      	mov	r4, r0
 8015b34:	4608      	mov	r0, r1
 8015b36:	4611      	mov	r1, r2
 8015b38:	602b      	str	r3, [r5, #0]
 8015b3a:	f7ed ff3b 	bl	80039b4 <_fstat>
 8015b3e:	1c43      	adds	r3, r0, #1
 8015b40:	d102      	bne.n	8015b48 <_fstat_r+0x1c>
 8015b42:	682b      	ldr	r3, [r5, #0]
 8015b44:	b103      	cbz	r3, 8015b48 <_fstat_r+0x1c>
 8015b46:	6023      	str	r3, [r4, #0]
 8015b48:	bd38      	pop	{r3, r4, r5, pc}
 8015b4a:	bf00      	nop
 8015b4c:	20013828 	.word	0x20013828

08015b50 <_isatty_r>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	4d06      	ldr	r5, [pc, #24]	@ (8015b6c <_isatty_r+0x1c>)
 8015b54:	2300      	movs	r3, #0
 8015b56:	4604      	mov	r4, r0
 8015b58:	4608      	mov	r0, r1
 8015b5a:	602b      	str	r3, [r5, #0]
 8015b5c:	f7ed ff3a 	bl	80039d4 <_isatty>
 8015b60:	1c43      	adds	r3, r0, #1
 8015b62:	d102      	bne.n	8015b6a <_isatty_r+0x1a>
 8015b64:	682b      	ldr	r3, [r5, #0]
 8015b66:	b103      	cbz	r3, 8015b6a <_isatty_r+0x1a>
 8015b68:	6023      	str	r3, [r4, #0]
 8015b6a:	bd38      	pop	{r3, r4, r5, pc}
 8015b6c:	20013828 	.word	0x20013828

08015b70 <_init>:
 8015b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b72:	bf00      	nop
 8015b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b76:	bc08      	pop	{r3}
 8015b78:	469e      	mov	lr, r3
 8015b7a:	4770      	bx	lr

08015b7c <_fini>:
 8015b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b7e:	bf00      	nop
 8015b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b82:	bc08      	pop	{r3}
 8015b84:	469e      	mov	lr, r3
 8015b86:	4770      	bx	lr
