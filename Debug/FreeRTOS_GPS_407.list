
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d74  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c38  08011f04  08011f04  00012f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b3c  08012b3c  000142b8  2**0
                  CONTENTS
  4 .ARM          00000008  08012b3c  08012b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b44  08012b44  000142b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b44  08012b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b48  08012b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08012b4c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011374  200002b8  08012e04  000142b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001162c  08012e04  0001462c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e7c8  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074ad  00000000  00000000  00042ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  00049f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d1c  00000000  00000000  0004c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4a0  00000000  00000000  0004e24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034ea4  00000000  00000000  0007a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5465  00000000  00000000  000af590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001949f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a954  00000000  00000000  00194a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0019f38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002b8 	.word	0x200002b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011eec 	.word	0x08011eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002bc 	.word	0x200002bc
 80001cc:	08011eec 	.word	0x08011eec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	4619      	mov	r1, r3
 80005ba:	4808      	ldr	r0, [pc, #32]	@ (80005dc <toggle_led+0x30>)
 80005bc:	f002 ff55 	bl	800346a <HAL_GPIO_TogglePin>
	osDelay(20);
 80005c0:	2014      	movs	r0, #20
 80005c2:	f00b fcdd 	bl	800bf80 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	4803      	ldr	r0, [pc, #12]	@ (80005dc <toggle_led+0x30>)
 80005ce:	f002 ff4c 	bl	800346a <HAL_GPIO_TogglePin>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 80005e8:	4813      	ldr	r0, [pc, #76]	@ (8000638 <ARM_keys_IRQ+0x58>)
 80005ea:	f001 fc07 	bl	8001dfc <UART_puts>
 80005ee:	4813      	ldr	r0, [pc, #76]	@ (800063c <ARM_keys_IRQ+0x5c>)
 80005f0:	f001 fc04 	bl	8001dfc <UART_puts>
 80005f4:	4812      	ldr	r0, [pc, #72]	@ (8000640 <ARM_keys_IRQ+0x60>)
 80005f6:	f001 fc01 	bl	8001dfc <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <ARM_keys_IRQ+0x64>)
 80005fc:	f00d fe2c 	bl	800e258 <xTaskGetHandle>
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d102      	bne.n	800060e <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <ARM_keys_IRQ+0x68>)
 800060a:	f000 fb1f 	bl	8000c4c <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <ARM_keys_IRQ+0x6c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2201      	movs	r2, #1
 800061c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000620:	f00b fe7e 	bl	800c320 <xEventGroupWaitBits>
 8000624:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000626:	2300      	movs	r3, #0
 8000628:	2203      	movs	r2, #3
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f00e fd43 	bl	800f0b8 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000632:	bf00      	nop
 8000634:	e7eb      	b.n	800060e <ARM_keys_IRQ+0x2e>
 8000636:	bf00      	nop
 8000638:	08011f04 	.word	0x08011f04
 800063c:	080128a4 	.word	0x080128a4
 8000640:	08011f08 	.word	0x08011f08
 8000644:	08011f14 	.word	0x08011f14
 8000648:	08011f24 	.word	0x08011f24
 800064c:	200002e4 	.word	0x200002e4

08000650 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	2000      	movs	r0, #0
 8000666:	f00e fcc7 	bl	800eff8 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <ARM_keys_task+0xc4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f04f 31ff 	mov.w	r1, #4294967295
 8000672:	4618      	mov	r0, r3
 8000674:	f00c fca4 	bl	800cfc0 <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	b2db      	uxtb	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fb71 	bl	8001d64 <LED_put>
	    BUZZER_put (500);
 8000682:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000686:	f001 f88d 	bl	80017a4 <BUZZER_put>
		osDelay(500);
 800068a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800068e:	f00b fc77 	bl	800bf80 <osDelay>

		UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8000692:	4821      	ldr	r0, [pc, #132]	@ (8000718 <ARM_keys_task+0xc8>)
 8000694:	f001 fbb2 	bl	8001dfc <UART_puts>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fbca 	bl	8001e34 <UART_putint>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <ARM_keys_task+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <ARM_keys_task+0x6a>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <ARM_keys_task+0xc8>)
 80006ae:	f001 fba5 	bl	8001dfc <UART_puts>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fbbd 	bl	8001e34 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <ARM_keys_task+0xc4>)
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	f00c f9fa 	bl	800cabc <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	e015      	b.n	80006fa <ARM_keys_task+0xaa>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d008      	beq.n	80006e6 <ARM_keys_task+0x96>
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d102      	bne.n	80006e0 <ARM_keys_task+0x90>
 80006da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006de:	e004      	b.n	80006ea <ARM_keys_task+0x9a>
 80006e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e4:	e001      	b.n	80006ea <ARM_keys_task+0x9a>
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff5c 	bl	80005ac <toggle_led>
		for (i=0; i<3; i++)
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	3301      	adds	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	dde6      	ble.n	80006ce <ARM_keys_task+0x7e>
	  	}
     	taskYIELD(); // done, force context switch
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <ARM_keys_task+0xd0>)
 8000702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	f3bf 8f4f 	dsb	sy
 800070c:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 8000710:	e7a2      	b.n	8000658 <ARM_keys_task+0x8>
 8000712:	bf00      	nop
 8000714:	200002e0 	.word	0x200002e0
 8000718:	08011f34 	.word	0x08011f34
 800071c:	200002d4 	.word	0x200002d4
 8000720:	e000ed04 	.word	0xe000ed04

08000724 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8000734:	4847      	ldr	r0, [pc, #284]	@ (8000854 <UART_keys_IRQ+0x130>)
 8000736:	f001 fb61 	bl	8001dfc <UART_puts>
 800073a:	4847      	ldr	r0, [pc, #284]	@ (8000858 <UART_keys_IRQ+0x134>)
 800073c:	f001 fb5e 	bl	8001dfc <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 8000740:	4846      	ldr	r0, [pc, #280]	@ (800085c <UART_keys_IRQ+0x138>)
 8000742:	f00d fd89 	bl	800e258 <xTaskGetHandle>
 8000746:	6278      	str	r0, [r7, #36]	@ 0x24
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	2b00      	cmp	r3, #0
 800074c:	d102      	bne.n	8000754 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 800074e:	4844      	ldr	r0, [pc, #272]	@ (8000860 <UART_keys_IRQ+0x13c>)
 8000750:	f000 fa7c 	bl	8000c4c <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8000754:	4b43      	ldr	r3, [pc, #268]	@ (8000864 <UART_keys_IRQ+0x140>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	f107 0218 	add.w	r2, r7, #24
 800075c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800075e:	4413      	add	r3, r2
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	4619      	mov	r1, r3
 8000766:	f00c fb49 	bl	800cdfc <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 800076a:	f107 0218 	add.w	r2, r7, #24
 800076e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d06b      	beq.n	8000850 <UART_keys_IRQ+0x12c>
 8000778:	f107 0218 	add.w	r2, r7, #24
 800077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800077e:	4413      	add	r3, r2
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2bff      	cmp	r3, #255	@ 0xff
 8000784:	d064      	beq.n	8000850 <UART_keys_IRQ+0x12c>
 8000786:	f107 0218 	add.w	r2, r7, #24
 800078a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b0d      	cmp	r3, #13
 8000792:	d05d      	beq.n	8000850 <UART_keys_IRQ+0x12c>
 8000794:	f107 0218 	add.w	r2, r7, #24
 8000798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b20      	cmp	r3, #32
 80007a0:	d056      	beq.n	8000850 <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80007a2:	f107 0218 	add.w	r2, r7, #24
 80007a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b0a      	cmp	r3, #10
 80007ae:	d108      	bne.n	80007c2 <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80007b0:	f107 0218 	add.w	r2, r7, #24
 80007b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b6:	4413      	add	r3, r2
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80007bc:	2301      	movs	r3, #1
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007c0:	e00d      	b.n	80007de <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 80007c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c4:	2b08      	cmp	r3, #8
 80007c6:	d10a      	bne.n	80007de <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 80007c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ca:	3301      	adds	r3, #1
 80007cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007ce:	f107 0218 	add.w	r2, r7, #24
 80007d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007d4:	4413      	add	r3, r2
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80007da:	2301      	movs	r3, #1
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 80007de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d031      	beq.n	8000848 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 80007e4:	f107 0218 	add.w	r2, r7, #24
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f010 fc67 	bl	80110c2 <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	220a      	movs	r2, #10
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f010 fafc 	bl	8010dfa <memset>
			finish = FALSE;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 800080a:	f107 010c 	add.w	r1, r7, #12
 800080e:	2300      	movs	r3, #0
 8000810:	2203      	movs	r2, #3
 8000812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000814:	f00e fc50 	bl	800f0b8 <xTaskGenericNotify>

			if (Uart_debug_out & UART_DEBUG_OUT)
 8000818:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <UART_keys_IRQ+0x144>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	2b00      	cmp	r3, #0
 8000822:	d097      	beq.n	8000754 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8000824:	4811      	ldr	r0, [pc, #68]	@ (800086c <UART_keys_IRQ+0x148>)
 8000826:	f001 fae9 	bl	8001dfc <UART_puts>
 800082a:	480a      	ldr	r0, [pc, #40]	@ (8000854 <UART_keys_IRQ+0x130>)
 800082c:	f001 fae6 	bl	8001dfc <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 8000830:	480f      	ldr	r0, [pc, #60]	@ (8000870 <UART_keys_IRQ+0x14c>)
 8000832:	f001 fae3 	bl	8001dfc <UART_puts>
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fade 	bl	8001dfc <UART_puts>
				UART_puts("\r\n");
 8000840:	480c      	ldr	r0, [pc, #48]	@ (8000874 <UART_keys_IRQ+0x150>)
 8000842:	f001 fadb 	bl	8001dfc <UART_puts>
 8000846:	e785      	b.n	8000754 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8000848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800084a:	3301      	adds	r3, #1
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800084e:	e781      	b.n	8000754 <UART_keys_IRQ+0x30>
			continue;
 8000850:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8000852:	e77f      	b.n	8000754 <UART_keys_IRQ+0x30>
 8000854:	080128b4 	.word	0x080128b4
 8000858:	08011fa0 	.word	0x08011fa0
 800085c:	08011f54 	.word	0x08011f54
 8000860:	08011fc4 	.word	0x08011fc4
 8000864:	200002d8 	.word	0x200002d8
 8000868:	200002d4 	.word	0x200002d4
 800086c:	08011f84 	.word	0x08011f84
 8000870:	08011fd4 	.word	0x08011fd4
 8000874:	08011f9c 	.word	0x08011f9c

08000878 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 8000880:	4bab      	ldr	r3, [pc, #684]	@ (8000b30 <UART_menu+0x2b8>)
 8000882:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8000884:	48ab      	ldr	r0, [pc, #684]	@ (8000b34 <UART_menu+0x2bc>)
 8000886:	f001 fab9 	bl	8001dfc <UART_puts>
 800088a:	48ab      	ldr	r0, [pc, #684]	@ (8000b38 <UART_menu+0x2c0>)
 800088c:	f001 fab6 	bl	8001dfc <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	2001      	movs	r0, #1
 8000896:	f00e fb63 	bl	800ef60 <ulTaskNotifyTake>
 800089a:	4603      	mov	r3, r0
 800089c:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	75fb      	strb	r3, [r7, #23]
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	3301      	adds	r3, #1
 80008a8:	4aa4      	ldr	r2, [pc, #656]	@ (8000b3c <UART_menu+0x2c4>)
 80008aa:	4413      	add	r3, r2
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f003 0303 	and.w	r3, r3, #3
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d102      	bne.n	80008bc <UART_menu+0x44>
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	3b20      	subs	r3, #32
 80008ba:	e000      	b.n	80008be <UART_menu+0x46>
 80008bc:	7dfb      	ldrb	r3, [r7, #23]
 80008be:	3b30      	subs	r3, #48	@ 0x30
 80008c0:	2b24      	cmp	r3, #36	@ 0x24
 80008c2:	d84d      	bhi.n	8000960 <UART_menu+0xe8>
 80008c4:	a201      	add	r2, pc, #4	@ (adr r2, 80008cc <UART_menu+0x54>)
 80008c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ca:	bf00      	nop
 80008cc:	0800096f 	.word	0x0800096f
 80008d0:	080009ab 	.word	0x080009ab
 80008d4:	080009d7 	.word	0x080009d7
 80008d8:	08000a03 	.word	0x08000a03
 80008dc:	08000a2f 	.word	0x08000a2f
 80008e0:	08000a5b 	.word	0x08000a5b
 80008e4:	08000961 	.word	0x08000961
 80008e8:	08000961 	.word	0x08000961
 80008ec:	08000961 	.word	0x08000961
 80008f0:	08000961 	.word	0x08000961
 80008f4:	08000961 	.word	0x08000961
 80008f8:	08000961 	.word	0x08000961
 80008fc:	08000961 	.word	0x08000961
 8000900:	08000961 	.word	0x08000961
 8000904:	08000961 	.word	0x08000961
 8000908:	08000961 	.word	0x08000961
 800090c:	08000961 	.word	0x08000961
 8000910:	08000961 	.word	0x08000961
 8000914:	08000961 	.word	0x08000961
 8000918:	08000961 	.word	0x08000961
 800091c:	08000a87 	.word	0x08000a87
 8000920:	08000961 	.word	0x08000961
 8000924:	08000961 	.word	0x08000961
 8000928:	08000961 	.word	0x08000961
 800092c:	08000961 	.word	0x08000961
 8000930:	08000961 	.word	0x08000961
 8000934:	08000961 	.word	0x08000961
 8000938:	08000961 	.word	0x08000961
 800093c:	08000961 	.word	0x08000961
 8000940:	08000aab 	.word	0x08000aab
 8000944:	08000961 	.word	0x08000961
 8000948:	08000961 	.word	0x08000961
 800094c:	08000ab7 	.word	0x08000ab7
 8000950:	08000961 	.word	0x08000961
 8000954:	08000961 	.word	0x08000961
 8000958:	08000afb 	.word	0x08000afb
 800095c:	08000ab1 	.word	0x08000ab1
		{
		default:  UART_puts(s);
 8000960:	69b8      	ldr	r0, [r7, #24]
 8000962:	f001 fa4b 	bl	8001dfc <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8000966:	4876      	ldr	r0, [pc, #472]	@ (8000b40 <UART_menu+0x2c8>)
 8000968:	f001 fa48 	bl	8001dfc <UART_puts>
				  break;
 800096c:	e0df      	b.n	8000b2e <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 800096e:	4b75      	ldr	r3, [pc, #468]	@ (8000b44 <UART_menu+0x2cc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <UART_menu+0x102>
 8000976:	2300      	movs	r3, #0
 8000978:	e000      	b.n	800097c <UART_menu+0x104>
 800097a:	23ff      	movs	r3, #255	@ 0xff
 800097c:	4a71      	ldr	r2, [pc, #452]	@ (8000b44 <UART_menu+0x2cc>)
 800097e:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 8000980:	4871      	ldr	r0, [pc, #452]	@ (8000b48 <UART_menu+0x2d0>)
 8000982:	f001 fa3b 	bl	8001dfc <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 8000986:	4b6f      	ldr	r3, [pc, #444]	@ (8000b44 <UART_menu+0x2cc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	2bff      	cmp	r3, #255	@ 0xff
 800098c:	d101      	bne.n	8000992 <UART_menu+0x11a>
 800098e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b4c <UART_menu+0x2d4>)
 8000990:	e000      	b.n	8000994 <UART_menu+0x11c>
 8000992:	4b6f      	ldr	r3, [pc, #444]	@ (8000b50 <UART_menu+0x2d8>)
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fa31 	bl	8001dfc <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 800099a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b44 <UART_menu+0x2cc>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 80c0 	bne.w	8000b24 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80009a4:	f000 f944 	bl	8000c30 <DisplayMenu>
				  break;
 80009a8:	e0bc      	b.n	8000b24 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80009aa:	4b66      	ldr	r3, [pc, #408]	@ (8000b44 <UART_menu+0x2cc>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f083 0301 	eor.w	r3, r3, #1
 80009b2:	4a64      	ldr	r2, [pc, #400]	@ (8000b44 <UART_menu+0x2cc>)
 80009b4:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80009b6:	4867      	ldr	r0, [pc, #412]	@ (8000b54 <UART_menu+0x2dc>)
 80009b8:	f001 fa20 	bl	8001dfc <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80009bc:	4b61      	ldr	r3, [pc, #388]	@ (8000b44 <UART_menu+0x2cc>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <UART_menu+0x154>
 80009c8:	4b60      	ldr	r3, [pc, #384]	@ (8000b4c <UART_menu+0x2d4>)
 80009ca:	e000      	b.n	80009ce <UART_menu+0x156>
 80009cc:	4b60      	ldr	r3, [pc, #384]	@ (8000b50 <UART_menu+0x2d8>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fa14 	bl	8001dfc <UART_puts>
				  break;
 80009d4:	e0ab      	b.n	8000b2e <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 80009d6:	4b5b      	ldr	r3, [pc, #364]	@ (8000b44 <UART_menu+0x2cc>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f083 0302 	eor.w	r3, r3, #2
 80009de:	4a59      	ldr	r2, [pc, #356]	@ (8000b44 <UART_menu+0x2cc>)
 80009e0:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 80009e2:	485d      	ldr	r0, [pc, #372]	@ (8000b58 <UART_menu+0x2e0>)
 80009e4:	f001 fa0a 	bl	8001dfc <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80009e8:	4b56      	ldr	r3, [pc, #344]	@ (8000b44 <UART_menu+0x2cc>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <UART_menu+0x180>
 80009f4:	4b55      	ldr	r3, [pc, #340]	@ (8000b4c <UART_menu+0x2d4>)
 80009f6:	e000      	b.n	80009fa <UART_menu+0x182>
 80009f8:	4b55      	ldr	r3, [pc, #340]	@ (8000b50 <UART_menu+0x2d8>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f9fe 	bl	8001dfc <UART_puts>
				  break;
 8000a00:	e095      	b.n	8000b2e <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 8000a02:	4b50      	ldr	r3, [pc, #320]	@ (8000b44 <UART_menu+0x2cc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f083 0304 	eor.w	r3, r3, #4
 8000a0a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b44 <UART_menu+0x2cc>)
 8000a0c:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 8000a0e:	4853      	ldr	r0, [pc, #332]	@ (8000b5c <UART_menu+0x2e4>)
 8000a10:	f001 f9f4 	bl	8001dfc <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a14:	4b4b      	ldr	r3, [pc, #300]	@ (8000b44 <UART_menu+0x2cc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <UART_menu+0x1ac>
 8000a20:	4b4a      	ldr	r3, [pc, #296]	@ (8000b4c <UART_menu+0x2d4>)
 8000a22:	e000      	b.n	8000a26 <UART_menu+0x1ae>
 8000a24:	4b4a      	ldr	r3, [pc, #296]	@ (8000b50 <UART_menu+0x2d8>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f9e8 	bl	8001dfc <UART_puts>
				  break;
 8000a2c:	e07f      	b.n	8000b2e <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 8000a2e:	4b45      	ldr	r3, [pc, #276]	@ (8000b44 <UART_menu+0x2cc>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f083 0308 	eor.w	r3, r3, #8
 8000a36:	4a43      	ldr	r2, [pc, #268]	@ (8000b44 <UART_menu+0x2cc>)
 8000a38:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8000a3a:	4849      	ldr	r0, [pc, #292]	@ (8000b60 <UART_menu+0x2e8>)
 8000a3c:	f001 f9de 	bl	8001dfc <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a40:	4b40      	ldr	r3, [pc, #256]	@ (8000b44 <UART_menu+0x2cc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f003 0308 	and.w	r3, r3, #8
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <UART_menu+0x1d8>
 8000a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b4c <UART_menu+0x2d4>)
 8000a4e:	e000      	b.n	8000a52 <UART_menu+0x1da>
 8000a50:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <UART_menu+0x2d8>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 f9d2 	bl	8001dfc <UART_puts>
				  break;
 8000a58:	e069      	b.n	8000b2e <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8000a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b44 <UART_menu+0x2cc>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f083 0310 	eor.w	r3, r3, #16
 8000a62:	4a38      	ldr	r2, [pc, #224]	@ (8000b44 <UART_menu+0x2cc>)
 8000a64:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8000a66:	483f      	ldr	r0, [pc, #252]	@ (8000b64 <UART_menu+0x2ec>)
 8000a68:	f001 f9c8 	bl	8001dfc <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8000a6c:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <UART_menu+0x2cc>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0310 	and.w	r3, r3, #16
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <UART_menu+0x204>
 8000a78:	4b34      	ldr	r3, [pc, #208]	@ (8000b4c <UART_menu+0x2d4>)
 8000a7a:	e000      	b.n	8000a7e <UART_menu+0x206>
 8000a7c:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <UART_menu+0x2d8>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f9bc 	bl	8001dfc <UART_puts>
				  break;
 8000a84:	e053      	b.n	8000b2e <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	3302      	adds	r3, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00f ff48 	bl	8010920 <atoi>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <UART_menu+0x2f0>)
 8000a96:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 8000a98:	4834      	ldr	r0, [pc, #208]	@ (8000b6c <UART_menu+0x2f4>)
 8000a9a:	f001 f9af 	bl	8001dfc <UART_puts>
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <UART_menu+0x2f0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 f9c6 	bl	8001e34 <UART_putint>
				  break;
 8000aa8:	e041      	b.n	8000b2e <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 8000aaa:	f000 f8c1 	bl	8000c30 <DisplayMenu>
				  break;
 8000aae:	e03e      	b.n	8000b2e <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 8000ab0:	f000 fa28 	bl	8000f04 <DisplayTaskData>
				  break;
 8000ab4:	e03b      	b.n	8000b2e <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 8000ab6:	69f9      	ldr	r1, [r7, #28]
 8000ab8:	69b8      	ldr	r0, [r7, #24]
 8000aba:	f010 f9c5 	bl	8010e48 <strtok>
 8000abe:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8000ac0:	69f9      	ldr	r1, [r7, #28]
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f010 f9c0 	bl	8010e48 <strtok>
 8000ac8:	61b8      	str	r0, [r7, #24]
 8000aca:	69b8      	ldr	r0, [r7, #24]
 8000acc:	f00f ff28 	bl	8010920 <atoi>
 8000ad0:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 8000ad2:	69f9      	ldr	r1, [r7, #28]
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f010 f9b7 	bl	8010e48 <strtok>
 8000ada:	61b8      	str	r0, [r7, #24]
 8000adc:	69b8      	ldr	r0, [r7, #24]
 8000ade:	f00f ff1f 	bl	8010920 <atoi>
 8000ae2:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d01e      	beq.n	8000b28 <UART_menu+0x2b0>
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d01b      	beq.n	8000b28 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 8000af0:	68f9      	ldr	r1, [r7, #12]
 8000af2:	6938      	ldr	r0, [r7, #16]
 8000af4:	f000 f982 	bl	8000dfc <SetTaskPriority>
				  break;
 8000af8:	e016      	b.n	8000b28 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8000afa:	69f9      	ldr	r1, [r7, #28]
 8000afc:	69b8      	ldr	r0, [r7, #24]
 8000afe:	f010 f9a3 	bl	8010e48 <strtok>
 8000b02:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8000b04:	69f9      	ldr	r1, [r7, #28]
 8000b06:	2000      	movs	r0, #0
 8000b08:	f010 f99e 	bl	8010e48 <strtok>
 8000b0c:	61b8      	str	r0, [r7, #24]
 8000b0e:	69b8      	ldr	r0, [r7, #24]
 8000b10:	f00f ff06 	bl	8010920 <atoi>
 8000b14:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d007      	beq.n	8000b2c <UART_menu+0x2b4>
					  StartStopTask(val1);
 8000b1c:	6938      	ldr	r0, [r7, #16]
 8000b1e:	f000 f9a9 	bl	8000e74 <StartStopTask>
				  break;
 8000b22:	e003      	b.n	8000b2c <UART_menu+0x2b4>
				  break;
 8000b24:	bf00      	nop
 8000b26:	e6b3      	b.n	8000890 <UART_menu+0x18>
				  break;
 8000b28:	bf00      	nop
 8000b2a:	e6b1      	b.n	8000890 <UART_menu+0x18>
				  break;
 8000b2c:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000b2e:	e6af      	b.n	8000890 <UART_menu+0x18>
 8000b30:	08011ff0 	.word	0x08011ff0
 8000b34:	080128c4 	.word	0x080128c4
 8000b38:	08011ff4 	.word	0x08011ff4
 8000b3c:	08012958 	.word	0x08012958
 8000b40:	08012000 	.word	0x08012000
 8000b44:	200002d4 	.word	0x200002d4
 8000b48:	08012014 	.word	0x08012014
 8000b4c:	0801202c 	.word	0x0801202c
 8000b50:	08012034 	.word	0x08012034
 8000b54:	0801203c 	.word	0x0801203c
 8000b58:	08012050 	.word	0x08012050
 8000b5c:	08012064 	.word	0x08012064
 8000b60:	08012078 	.word	0x08012078
 8000b64:	0801208c 	.word	0x0801208c
 8000b68:	20000218 	.word	0x20000218
 8000b6c:	0801209c 	.word	0x0801209c

08000b70 <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b09c      	sub	sp, #112	@ 0x70
 8000b74:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 8000b76:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <DisplayVersion+0x98>)
 8000b78:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 8000b7a:	f000 ff55 	bl	8001a28 <LCD_clear>
	LCD_puts(app_nameLCD);
 8000b7e:	4b23      	ldr	r3, [pc, #140]	@ (8000c0c <DisplayVersion+0x9c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f848 	bl	8001c18 <LCD_puts>

	UART_puts(app_name);
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <DisplayVersion+0xa0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f001 f935 	bl	8001dfc <UART_puts>
	UART_puts(functionality);
 8000b92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000b94:	f001 f932 	bl	8001dfc <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 8000b98:	f107 0108 	add.w	r1, r7, #8
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2264      	movs	r2, #100	@ 0x64
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00b f8f7 	bl	800bd94 <osKernelGetInfo>
	UART_puts("\t-----");
 8000ba6:	481b      	ldr	r0, [pc, #108]	@ (8000c14 <DisplayVersion+0xa4>)
 8000ba8:	f001 f928 	bl	8001dfc <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 8000bac:	481a      	ldr	r0, [pc, #104]	@ (8000c18 <DisplayVersion+0xa8>)
 8000bae:	f001 f925 	bl	8001dfc <UART_puts>
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 f920 	bl	8001dfc <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <DisplayVersion+0xac>)
 8000bbe:	f001 f91d 	bl	8001dfc <UART_puts>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 f935 	bl	8001e34 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 8000bca:	4815      	ldr	r0, [pc, #84]	@ (8000c20 <DisplayVersion+0xb0>)
 8000bcc:	f001 f916 	bl	8001dfc <UART_puts>
 8000bd0:	f00b f938 	bl	800be44 <osKernelGetSysTimerFreq>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a13      	ldr	r2, [pc, #76]	@ (8000c24 <DisplayVersion+0xb4>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	0c9b      	lsrs	r3, r3, #18
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f928 	bl	8001e34 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 8000be4:	4810      	ldr	r0, [pc, #64]	@ (8000c28 <DisplayVersion+0xb8>)
 8000be6:	f001 f909 	bl	8001dfc <UART_puts>
 8000bea:	f00b f921 	bl	800be30 <osKernelGetTickFreq>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 f91f 	bl	8001e34 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <DisplayVersion+0xbc>)
 8000bf8:	f001 f900 	bl	8001dfc <UART_puts>

    DisplayMenu();
 8000bfc:	f000 f818 	bl	8000c30 <DisplayMenu>
}
 8000c00:	bf00      	nop
 8000c02:	3770      	adds	r7, #112	@ 0x70
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08012170 	.word	0x08012170
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000000 	.word	0x20000000
 8000c14:	080122e0 	.word	0x080122e0
 8000c18:	080122e8 	.word	0x080122e8
 8000c1c:	080122ec 	.word	0x080122ec
 8000c20:	080122fc 	.word	0x080122fc
 8000c24:	431bde83 	.word	0x431bde83
 8000c28:	08012318 	.word	0x08012318
 8000c2c:	08012330 	.word	0x08012330

08000c30 <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	char *menu =
 8000c36:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <DisplayMenu+0x18>)
 8000c38:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f001 f8de 	bl	8001dfc <UART_puts>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0801233c 	.word	0x0801233c

08000c4c <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 ffdf 	bl	8001c18 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f001 f8ce 	bl	8001dfc <UART_puts>
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <error_HaltOS+0x2c>)
 8000c62:	f001 f8cb 	bl	8001dfc <UART_puts>

	BUZZER_put(1000);
 8000c66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6a:	f000 fd9b 	bl	80017a4 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 8000c6e:	f00d f9c9 	bl	800e004 <vTaskSuspendAll>

	while (TRUE)
 8000c72:	bf00      	nop
 8000c74:	e7fd      	b.n	8000c72 <error_HaltOS+0x26>
 8000c76:	bf00      	nop
 8000c78:	0801257c 	.word	0x0801257c

08000c7c <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 8000c82:	2001      	movs	r0, #1
 8000c84:	f00b ff01 	bl	800ca8a <xQueueCreateMutex>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a30      	ldr	r2, [pc, #192]	@ (8000d4c <CreateHandles+0xd0>)
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d4c <CreateHandles+0xd0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d102      	bne.n	8000c9c <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 8000c96:	482e      	ldr	r0, [pc, #184]	@ (8000d50 <CreateHandles+0xd4>)
 8000c98:	f7ff ffd8 	bl	8000c4c <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	200a      	movs	r0, #10
 8000ca2:	f00b fe7a 	bl	800c99a <xQueueGenericCreate>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d54 <CreateHandles+0xd8>)
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b29      	ldr	r3, [pc, #164]	@ (8000d54 <CreateHandles+0xd8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 8000cb4:	4828      	ldr	r0, [pc, #160]	@ (8000d58 <CreateHandles+0xdc>)
 8000cb6:	f7ff ffc9 	bl	8000c4c <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	2053      	movs	r0, #83	@ 0x53
 8000cc0:	f00b fe6b 	bl	800c99a <xQueueGenericCreate>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <CreateHandles+0xe0>)
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <CreateHandles+0xe0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 8000cd2:	4823      	ldr	r0, [pc, #140]	@ (8000d60 <CreateHandles+0xe4>)
 8000cd4:	f7ff ffba 	bl	8000c4c <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8000cd8:	f00b fb08 	bl	800c2ec <xEventGroupCreate>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a21      	ldr	r2, [pc, #132]	@ (8000d64 <CreateHandles+0xe8>)
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <CreateHandles+0xe8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d102      	bne.n	8000cf0 <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 8000cea:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <CreateHandles+0xec>)
 8000cec:	f7ff ffae 	bl	8000c4c <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <CreateHandles+0xf0>)
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cfc:	481c      	ldr	r0, [pc, #112]	@ (8000d70 <CreateHandles+0xf4>)
 8000cfe:	f00e fb3b 	bl	800f378 <xTimerCreate>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <CreateHandles+0xf8>)
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <CreateHandles+0xf8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8000d10:	4819      	ldr	r0, [pc, #100]	@ (8000d78 <CreateHandles+0xfc>)
 8000d12:	f7ff ff9b 	bl	8000c4c <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8000d16:	4819      	ldr	r0, [pc, #100]	@ (8000d7c <CreateHandles+0x100>)
 8000d18:	f001 f870 	bl	8001dfc <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8000d1c:	4818      	ldr	r0, [pc, #96]	@ (8000d80 <CreateHandles+0x104>)
 8000d1e:	f001 f86d 	bl	8001dfc <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8000d22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d26:	f001 f885 	bl	8001e34 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <CreateHandles+0xf8>)
 8000d2c:	681c      	ldr	r4, [r3, #0]
 8000d2e:	f00d fa15 	bl	800e15c <xTaskGetTickCount>
 8000d32:	4602      	mov	r2, r0
 8000d34:	2300      	movs	r3, #0
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4620      	mov	r0, r4
 8000d3e:	f00e fb79 	bl	800f434 <xTimerGenericCommand>
}
 8000d42:	bf00      	nop
 8000d44:	3704      	adds	r7, #4
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002e0 	.word	0x200002e0
 8000d50:	08012594 	.word	0x08012594
 8000d54:	200002d8 	.word	0x200002d8
 8000d58:	080125a4 	.word	0x080125a4
 8000d5c:	200002dc 	.word	0x200002dc
 8000d60:	080125b4 	.word	0x080125b4
 8000d64:	200002e4 	.word	0x200002e4
 8000d68:	080125c4 	.word	0x080125c4
 8000d6c:	08000d85 	.word	0x08000d85
 8000d70:	080125d8 	.word	0x080125d8
 8000d74:	200002e8 	.word	0x200002e8
 8000d78:	080125e0 	.word	0x080125e0
 8000d7c:	080125f0 	.word	0x080125f0
 8000d80:	08012614 	.word	0x08012614

08000d84 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8000d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <Timer1_Handler+0x14>)
 8000d8e:	f002 fb6c 	bl	800346a <HAL_GPIO_TogglePin>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40020c00 	.word	0x40020c00

08000d9c <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <CreateTasks+0x58>)
 8000da4:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8000da6:	f00d f92d 	bl	800e004 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8000daa:	e016      	b.n	8000dda <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8000dac:	4812      	ldr	r0, [pc, #72]	@ (8000df8 <CreateTasks+0x5c>)
 8000dae:	f001 f825 	bl	8001dfc <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f820 	bl	8001dfc <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6859      	ldr	r1, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f00b f847 	bl	800be5c <osThreadNew>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3330      	adds	r3, #48	@ 0x30
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1e4      	bne.n	8000dac <CreateTasks+0x10>
	}

	xTaskResumeAll();   // start nu de scheduler: play ball
 8000de2:	f00d f91d 	bl	800e020 <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8000de6:	f000 f88d 	bl	8000f04 <DisplayTaskData>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	08012628 	.word	0x08012628

08000dfc <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 8000e06:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <SetTaskPriority+0x6c>)
 8000e08:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	e023      	b.n	8000e58 <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d119      	bne.n	8000e4c <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	683a      	ldr	r2, [r7, #0]
 8000e1c:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00c fed6 	bl	800dbd8 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8000e2c:	480f      	ldr	r0, [pc, #60]	@ (8000e6c <SetTaskPriority+0x70>)
 8000e2e:	f000 ffe5 	bl	8001dfc <UART_puts>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 ffe0 	bl	8001dfc <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <SetTaskPriority+0x74>)
 8000e3e:	f000 ffdd 	bl	8001dfc <UART_puts>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fff5 	bl	8001e34 <UART_putint>
			return;
 8000e4a:	e009      	b.n	8000e60 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	3330      	adds	r3, #48	@ 0x30
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1d7      	bne.n	8000e10 <SetTaskPriority+0x14>
		}
}
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	08012634 	.word	0x08012634
 8000e70:	08012640 	.word	0x08012640

08000e74 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	@ 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef4 <StartStopTask+0x80>)
 8000e7e:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000e80:	2301      	movs	r3, #1
 8000e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e84:	e02e      	b.n	8000ee4 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d124      	bne.n	8000ed8 <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e90:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000e92:	f107 010c 	add.w	r1, r7, #12
 8000e96:	2305      	movs	r3, #5
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f00d fdc7 	bl	800ea2c <vTaskGetInfo>
			UART_puts("\r\n");
 8000e9e:	4816      	ldr	r0, [pc, #88]	@ (8000ef8 <StartStopTask+0x84>)
 8000ea0:	f000 ffac 	bl	8001dfc <UART_puts>
			UART_puts(ptd->attr.name);
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 ffa7 	bl	8001dfc <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8000eae:	7e3b      	ldrb	r3, [r7, #24]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d108      	bne.n	8000ec6 <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8000eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f00c ffd3 	bl	800de64 <vTaskResume>
				UART_puts(" resumed.");
 8000ebe:	480f      	ldr	r0, [pc, #60]	@ (8000efc <StartStopTask+0x88>)
 8000ec0:	f000 ff9c 	bl	8001dfc <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8000ec4:	e012      	b.n	8000eec <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8000ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f00c ff22 	bl	800dd14 <vTaskSuspend>
				UART_puts(" suspended.");
 8000ed0:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <StartStopTask+0x8c>)
 8000ed2:	f000 ff93 	bl	8001dfc <UART_puts>
 8000ed6:	e009      	b.n	8000eec <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8000ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eda:	3330      	adds	r3, #48	@ 0x30
 8000edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1cc      	bne.n	8000e86 <StartStopTask+0x12>
		}
}
 8000eec:	3738      	adds	r7, #56	@ 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	08012654 	.word	0x08012654
 8000efc:	08012658 	.word	0x08012658
 8000f00:	08012664 	.word	0x08012664

08000f04 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8000f0a:	4b47      	ldr	r3, [pc, #284]	@ (8001028 <DisplayTaskData+0x124>)
 8000f0c:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8000f12:	2301      	movs	r3, #1
 8000f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f16:	e062      	b.n	8000fde <DisplayTaskData+0xda>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8000f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00d fe07 	bl	800eb30 <uxTaskGetStackHighWaterMark>
 8000f22:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8000f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f26:	2264      	movs	r2, #100	@ 0x64
 8000f28:	fb03 f202 	mul.w	r2, r3, r2
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8000f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f3c:	4413      	add	r3, r2
 8000f3e:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8000f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f42:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000f44:	4639      	mov	r1, r7
 8000f46:	2305      	movs	r3, #5
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f00d fd6f 	bl	800ea2c <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8000f4e:	4837      	ldr	r0, [pc, #220]	@ (800102c <DisplayTaskData+0x128>)
 8000f50:	f000 ff54 	bl	8001dfc <UART_puts>
 8000f54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000f56:	f000 ff6d 	bl	8001e34 <UART_putint>
 8000f5a:	4835      	ldr	r0, [pc, #212]	@ (8001030 <DisplayTaskData+0x12c>)
 8000f5c:	f000 ff4e 	bl	8001dfc <UART_puts>
		UART_puts(ptd->attr.name);
 8000f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 ff49 	bl	8001dfc <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8000f6a:	4832      	ldr	r0, [pc, #200]	@ (8001034 <DisplayTaskData+0x130>)
 8000f6c:	f000 ff46 	bl	8001dfc <UART_puts>
 8000f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 ff5d 	bl	8001e34 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8000f7a:	482f      	ldr	r0, [pc, #188]	@ (8001038 <DisplayTaskData+0x134>)
 8000f7c:	f000 ff3e 	bl	8001dfc <UART_puts>
 8000f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 ff54 	bl	8001e34 <UART_putint>
		UART_puts("\t free: ");  UART_putint((ptd->attr.stack_size- highwatermark) * 4);
 8000f8c:	482b      	ldr	r0, [pc, #172]	@ (800103c <DisplayTaskData+0x138>)
 8000f8e:	f000 ff35 	bl	8001dfc <UART_puts>
 8000f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 ff49 	bl	8001e34 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8000fa2:	4827      	ldr	r0, [pc, #156]	@ (8001040 <DisplayTaskData+0x13c>)
 8000fa4:	f000 ff2a 	bl	8001dfc <UART_puts>
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000faa:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 ff40 	bl	8001e34 <UART_putint>
 8000fb4:	4823      	ldr	r0, [pc, #140]	@ (8001044 <DisplayTaskData+0x140>)
 8000fb6:	f000 ff21 	bl	8001dfc <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8000fba:	4823      	ldr	r0, [pc, #140]	@ (8001048 <DisplayTaskData+0x144>)
 8000fbc:	f000 ff1e 	bl	8001dfc <UART_puts>
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d101      	bne.n	8000fca <DisplayTaskData+0xc6>
 8000fc6:	4b21      	ldr	r3, [pc, #132]	@ (800104c <DisplayTaskData+0x148>)
 8000fc8:	e000      	b.n	8000fcc <DisplayTaskData+0xc8>
 8000fca:	4b21      	ldr	r3, [pc, #132]	@ (8001050 <DisplayTaskData+0x14c>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 ff15 	bl	8001dfc <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8000fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd4:	3330      	adds	r3, #48	@ 0x30
 8000fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fda:	3301      	adds	r3, #1
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d198      	bne.n	8000f18 <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 8000fe6:	481b      	ldr	r0, [pc, #108]	@ (8001054 <DisplayTaskData+0x150>)
 8000fe8:	f000 ff08 	bl	8001dfc <UART_puts>
 8000fec:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8000ff0:	f000 ff20 	bl	8001e34 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 8000ff4:	4818      	ldr	r0, [pc, #96]	@ (8001058 <DisplayTaskData+0x154>)
 8000ff6:	f000 ff01 	bl	8001dfc <UART_puts>
 8000ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 ff18 	bl	8001e34 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 8001004:	4815      	ldr	r0, [pc, #84]	@ (800105c <DisplayTaskData+0x158>)
 8001006:	f000 fef9 	bl	8001dfc <UART_puts>
 800100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800100c:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f000 ff0e 	bl	8001e34 <UART_putint>
	UART_puts("\r\n");
 8001018:	4811      	ldr	r0, [pc, #68]	@ (8001060 <DisplayTaskData+0x15c>)
 800101a:	f000 feef 	bl	8001dfc <UART_puts>
}
 800101e:	bf00      	nop
 8001020:	3738      	adds	r7, #56	@ 0x38
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	08012670 	.word	0x08012670
 8001030:	08012678 	.word	0x08012678
 8001034:	0801267c 	.word	0x0801267c
 8001038:	0801268c 	.word	0x0801268c
 800103c:	0801269c 	.word	0x0801269c
 8001040:	080126a8 	.word	0x080126a8
 8001044:	080126b4 	.word	0x080126b4
 8001048:	080126b8 	.word	0x080126b8
 800104c:	080126c4 	.word	0x080126c4
 8001050:	080126d0 	.word	0x080126d0
 8001054:	080126d8 	.word	0x080126d8
 8001058:	080126e8 	.word	0x080126e8
 800105c:	08012704 	.word	0x08012704
 8001060:	08012654 	.word	0x08012654

08001064 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,
	char *tok = ",";
 800106c:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <fill_GNRMC+0x100>)
 800106e:	60fb      	str	r3, [r7, #12]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 8001070:	2247      	movs	r2, #71	@ 0x47
 8001072:	2100      	movs	r1, #0
 8001074:	483c      	ldr	r0, [pc, #240]	@ (8001168 <fill_GNRMC+0x104>)
 8001076:	f00f fec0 	bl	8010dfa <memset>

	s = strtok(message, tok); // 0. header;
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f00f fee3 	bl	8010e48 <strtok>
 8001082:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.head, s);
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4838      	ldr	r0, [pc, #224]	@ (8001168 <fill_GNRMC+0x104>)
 8001088:	f010 f81b 	bl	80110c2 <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 800108c:	68f9      	ldr	r1, [r7, #12]
 800108e:	2000      	movs	r0, #0
 8001090:	f00f feda 	bl	8010e48 <strtok>
 8001094:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 2. valid;
 8001096:	68f9      	ldr	r1, [r7, #12]
 8001098:	2000      	movs	r0, #0
 800109a:	f00f fed5 	bl	8010e48 <strtok>
 800109e:	60b8      	str	r0, [r7, #8]
	gnrmc.status = s[0];
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <fill_GNRMC+0x104>)
 80010a6:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	2000      	movs	r0, #0
 80010ac:	f00f fecc 	bl	8010e48 <strtok>
 80010b0:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.latitude, s);
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	482d      	ldr	r0, [pc, #180]	@ (800116c <fill_GNRMC+0x108>)
 80010b6:	f010 f804 	bl	80110c2 <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 80010ba:	68f9      	ldr	r1, [r7, #12]
 80010bc:	2000      	movs	r0, #0
 80010be:	f00f fec3 	bl	8010e48 <strtok>
 80010c2:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 5. longitude;
 80010c4:	68f9      	ldr	r1, [r7, #12]
 80010c6:	2000      	movs	r0, #0
 80010c8:	f00f febe 	bl	8010e48 <strtok>
 80010cc:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.longitude, s);
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4827      	ldr	r0, [pc, #156]	@ (8001170 <fill_GNRMC+0x10c>)
 80010d2:	f00f fff6 	bl	80110c2 <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	2000      	movs	r0, #0
 80010da:	f00f feb5 	bl	8010e48 <strtok>
 80010de:	60b8      	str	r0, [r7, #8]

	s = strtok(NULL, tok);    // 7. speed;
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	2000      	movs	r0, #0
 80010e4:	f00f feb0 	bl	8010e48 <strtok>
 80010e8:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.speed, s);
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	4821      	ldr	r0, [pc, #132]	@ (8001174 <fill_GNRMC+0x110>)
 80010ee:	f00f ffe8 	bl	80110c2 <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	2000      	movs	r0, #0
 80010f6:	f00f fea7 	bl	8010e48 <strtok>
 80010fa:	60b8      	str	r0, [r7, #8]
	strcpy(gnrmc.course, s);
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	481e      	ldr	r0, [pc, #120]	@ (8001178 <fill_GNRMC+0x114>)
 8001100:	f00f ffdf 	bl	80110c2 <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001104:	4b1d      	ldr	r3, [pc, #116]	@ (800117c <fill_GNRMC+0x118>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0310 	and.w	r3, r3, #16
 800110c:	2b00      	cmp	r3, #0
 800110e:	d025      	beq.n	800115c <fill_GNRMC+0xf8>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001110:	481b      	ldr	r0, [pc, #108]	@ (8001180 <fill_GNRMC+0x11c>)
 8001112:	f000 fe73 	bl	8001dfc <UART_puts>
 8001116:	4814      	ldr	r0, [pc, #80]	@ (8001168 <fill_GNRMC+0x104>)
 8001118:	f000 fe70 	bl	8001dfc <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 800111c:	4819      	ldr	r0, [pc, #100]	@ (8001184 <fill_GNRMC+0x120>)
 800111e:	f000 fe6d 	bl	8001dfc <UART_puts>
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <fill_GNRMC+0x104>)
 8001124:	7c5b      	ldrb	r3, [r3, #17]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fe56 	bl	8001dd8 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <fill_GNRMC+0x124>)
 800112e:	f000 fe65 	bl	8001dfc <UART_puts>
 8001132:	480e      	ldr	r0, [pc, #56]	@ (800116c <fill_GNRMC+0x108>)
 8001134:	f000 fe62 	bl	8001dfc <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001138:	4814      	ldr	r0, [pc, #80]	@ (800118c <fill_GNRMC+0x128>)
 800113a:	f000 fe5f 	bl	8001dfc <UART_puts>
 800113e:	480c      	ldr	r0, [pc, #48]	@ (8001170 <fill_GNRMC+0x10c>)
 8001140:	f000 fe5c 	bl	8001dfc <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001144:	4812      	ldr	r0, [pc, #72]	@ (8001190 <fill_GNRMC+0x12c>)
 8001146:	f000 fe59 	bl	8001dfc <UART_puts>
 800114a:	480a      	ldr	r0, [pc, #40]	@ (8001174 <fill_GNRMC+0x110>)
 800114c:	f000 fe56 	bl	8001dfc <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <fill_GNRMC+0x130>)
 8001152:	f000 fe53 	bl	8001dfc <UART_puts>
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <fill_GNRMC+0x114>)
 8001158:	f000 fe50 	bl	8001dfc <UART_puts>
	}
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0801271c 	.word	0x0801271c
 8001168:	200002ec 	.word	0x200002ec
 800116c:	200002fe 	.word	0x200002fe
 8001170:	20000309 	.word	0x20000309
 8001174:	20000314 	.word	0x20000314
 8001178:	2000031a 	.word	0x2000031a
 800117c:	200002d4 	.word	0x200002d4
 8001180:	08012720 	.word	0x08012720
 8001184:	08012730 	.word	0x08012730
 8001188:	08012740 	.word	0x08012740
 800118c:	08012750 	.word	0x08012750
 8001190:	08012760 	.word	0x08012760
 8001194:	08012770 	.word	0x08012770

08001198 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b09c      	sub	sp, #112	@ 0x70
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 80011a4:	2300      	movs	r3, #0
 80011a6:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 80011a8:	2300      	movs	r3, #0
 80011aa:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80011ac:	4855      	ldr	r0, [pc, #340]	@ (8001304 <GPS_getNMEA+0x16c>)
 80011ae:	f000 fe25 	bl	8001dfc <UART_puts>
 80011b2:	4855      	ldr	r0, [pc, #340]	@ (8001308 <GPS_getNMEA+0x170>)
 80011b4:	f000 fe22 	bl	8001dfc <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80011b8:	4b54      	ldr	r3, [pc, #336]	@ (800130c <GPS_getNMEA+0x174>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00b fe19 	bl	800cdfc <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 80011ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80011ce:	2b24      	cmp	r3, #36	@ 0x24
 80011d0:	d10a      	bne.n	80011e8 <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	2253      	movs	r2, #83	@ 0x53
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f00f fe0d 	bl	8010dfa <memset>
			pos = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 80011e4:	2301      	movs	r3, #1
 80011e6:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 80011e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8088 	beq.w	8001300 <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 80011f0:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 80011f4:	f107 020c 	add.w	r2, r7, #12
 80011f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011fa:	4413      	add	r3, r2
 80011fc:	460a      	mov	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001202:	2b05      	cmp	r3, #5
 8001204:	d130      	bne.n	8001268 <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 8001206:	2300      	movs	r3, #0
 8001208:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	3301      	adds	r3, #1
 8001210:	2205      	movs	r2, #5
 8001212:	493f      	ldr	r1, [pc, #252]	@ (8001310 <GPS_getNMEA+0x178>)
 8001214:	4618      	mov	r0, r3
 8001216:	f00f fe05 	bl	8010e24 <strncmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <GPS_getNMEA+0x8e>
 8001220:	2301      	movs	r3, #1
 8001222:	667b      	str	r3, [r7, #100]	@ 0x64
 8001224:	e01a      	b.n	800125c <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	3301      	adds	r3, #1
 800122c:	2205      	movs	r2, #5
 800122e:	4939      	ldr	r1, [pc, #228]	@ (8001314 <GPS_getNMEA+0x17c>)
 8001230:	4618      	mov	r0, r3
 8001232:	f00f fdf7 	bl	8010e24 <strncmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <GPS_getNMEA+0xaa>
 800123c:	2302      	movs	r3, #2
 800123e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001240:	e00c      	b.n	800125c <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	3301      	adds	r3, #1
 8001248:	2205      	movs	r2, #5
 800124a:	4933      	ldr	r1, [pc, #204]	@ (8001318 <GPS_getNMEA+0x180>)
 800124c:	4618      	mov	r0, r3
 800124e:	f00f fde9 	bl	8010e24 <strncmp>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <GPS_getNMEA+0xc4>
 8001258:	2303      	movs	r3, #3
 800125a:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 800125c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 8001262:	2300      	movs	r3, #0
 8001264:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 8001266:	e04c      	b.n	8001302 <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8001268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800126a:	2b51      	cmp	r3, #81	@ 0x51
 800126c:	dd02      	ble.n	8001274 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 800126e:	2300      	movs	r3, #0
 8001270:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 8001272:	e046      	b.n	8001302 <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b0d      	cmp	r3, #13
 8001280:	d13a      	bne.n	80012f8 <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001288:	4413      	add	r3, r2
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f88e 	bl	80013b4 <checksum_valid>
 8001298:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <GPS_getNMEA+0x184>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d010      	beq.n	80012c8 <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 80012a6:	481e      	ldr	r0, [pc, #120]	@ (8001320 <GPS_getNMEA+0x188>)
 80012a8:	f000 fda8 	bl	8001dfc <UART_puts>
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fda3 	bl	8001dfc <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 80012b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <GPS_getNMEA+0x128>
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <GPS_getNMEA+0x18c>)
 80012be:	e000      	b.n	80012c2 <GPS_getNMEA+0x12a>
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <GPS_getNMEA+0x190>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fd9a 	bl	8001dfc <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 80012c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 80012ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d007      	beq.n	80012e4 <GPS_getNMEA+0x14c>
 80012d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dd0a      	ble.n	80012f0 <GPS_getNMEA+0x158>
 80012da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012dc:	3b02      	subs	r3, #2
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d806      	bhi.n	80012f0 <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 80012e2:	e006      	b.n	80012f2 <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff febb 	bl	8001064 <fill_GNRMC>
						     break;
 80012ee:	e000      	b.n	80012f2 <GPS_getNMEA+0x15a>
				default:     break;
 80012f0:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 80012f2:	2300      	movs	r3, #0
 80012f4:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80012f6:	e004      	b.n	8001302 <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 80012f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012fa:	3301      	adds	r3, #1
 80012fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80012fe:	e75b      	b.n	80011b8 <GPS_getNMEA+0x20>
			continue;
 8001300:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001302:	e759      	b.n	80011b8 <GPS_getNMEA+0x20>
 8001304:	080128d0 	.word	0x080128d0
 8001308:	08012780 	.word	0x08012780
 800130c:	200002dc 	.word	0x200002dc
 8001310:	0801278c 	.word	0x0801278c
 8001314:	08012794 	.word	0x08012794
 8001318:	0801279c 	.word	0x0801279c
 800131c:	200002d4 	.word	0x200002d4
 8001320:	080127a4 	.word	0x080127a4
 8001324:	080127b4 	.word	0x080127b4
 8001328:	080127c0 	.word	0x080127c0

0800132c <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 f813 	bl	8001364 <hexchar2int>
 800133e:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f809 	bl	8001364 <hexchar2int>
 8001352:	4602      	mov	r2, r0
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]

	return value;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <hexchar2int>:


int hexchar2int(char c)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	2b2f      	cmp	r3, #47	@ 0x2f
 8001372:	d905      	bls.n	8001380 <hexchar2int+0x1c>
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	2b39      	cmp	r3, #57	@ 0x39
 8001378:	d802      	bhi.n	8001380 <hexchar2int+0x1c>
        return (c - '0');
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	3b30      	subs	r3, #48	@ 0x30
 800137e:	e013      	b.n	80013a8 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b40      	cmp	r3, #64	@ 0x40
 8001384:	d905      	bls.n	8001392 <hexchar2int+0x2e>
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b46      	cmp	r3, #70	@ 0x46
 800138a:	d802      	bhi.n	8001392 <hexchar2int+0x2e>
        return (c - 'A' + 10);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	3b37      	subs	r3, #55	@ 0x37
 8001390:	e00a      	b.n	80013a8 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b60      	cmp	r3, #96	@ 0x60
 8001396:	d905      	bls.n	80013a4 <hexchar2int+0x40>
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b66      	cmp	r3, #102	@ 0x66
 800139c:	d802      	bhi.n	80013a4 <hexchar2int+0x40>
        return (c - 'a' + 10);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3b57      	subs	r3, #87	@ 0x57
 80013a2:	e001      	b.n	80013a8 <hexchar2int+0x44>
    return (-1);
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 80013c0:	212a      	movs	r1, #42	@ 0x2a
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f00f fd21 	bl	8010e0a <strchr>
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d022      	beq.n	8001416 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 80013d6:	2301      	movs	r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	7cfb      	ldrb	r3, [r7, #19]
 80013e6:	4053      	eors	r3, r2
 80013e8:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7fe feed 	bl	80001d0 <strlen>
 80013f6:	4602      	mov	r2, r0
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d8ee      	bhi.n	80013dc <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3301      	adds	r3, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff92 	bl	800132c <hex2int>
 8001408:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 800140a:	7cfb      	ldrb	r3, [r7, #19]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	429a      	cmp	r2, r3
 8001410:	d101      	bne.n	8001416 <checksum_valid+0x62>
			return (1);
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <checksum_valid+0x64>
	}

	return (0);
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001428:	4820      	ldr	r0, [pc, #128]	@ (80014ac <LED_Task1+0x8c>)
 800142a:	f000 fce7 	bl	8001dfc <UART_puts>
 800142e:	4820      	ldr	r0, [pc, #128]	@ (80014b0 <LED_Task1+0x90>)
 8001430:	f000 fce4 	bl	8001dfc <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <LED_Task1+0x94>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	4618      	mov	r0, r3
 800143e:	f00b fdbf 	bl	800cfc0 <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e01c      	b.n	8001486 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fc87 	bl	8001d64 <LED_put>
           	osDelay(os_delay);
 8001456:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <LED_Task1+0x98>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f00a fd90 	bl	800bf80 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <LED_Task1+0x9c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 800146c:	4814      	ldr	r0, [pc, #80]	@ (80014c0 <LED_Task1+0xa0>)
 800146e:	f000 fcc5 	bl	8001dfc <UART_puts>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fcdd 	bl	8001e34 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3301      	adds	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	105b      	asrs	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b07      	cmp	r3, #7
 800148a:	dddf      	ble.n	800144c <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <LED_Task1+0x94>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	2200      	movs	r2, #0
 8001494:	2100      	movs	r1, #0
 8001496:	f00b fb11 	bl	800cabc <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <LED_Task1+0xa4>)
 800149c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f3bf 8f4f 	dsb	sy
 80014a6:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 80014aa:	e7c3      	b.n	8001434 <LED_Task1+0x14>
 80014ac:	080128dc 	.word	0x080128dc
 80014b0:	080127cc 	.word	0x080127cc
 80014b4:	200002e0 	.word	0x200002e0
 80014b8:	20000218 	.word	0x20000218
 80014bc:	200002d4 	.word	0x200002d4
 80014c0:	080127d8 	.word	0x080127d8
 80014c4:	e000ed04 	.word	0xe000ed04

080014c8 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80014d0:	4820      	ldr	r0, [pc, #128]	@ (8001554 <LED_Task2+0x8c>)
 80014d2:	f000 fc93 	bl	8001dfc <UART_puts>
 80014d6:	4820      	ldr	r0, [pc, #128]	@ (8001558 <LED_Task2+0x90>)
 80014d8:	f000 fc90 	bl	8001dfc <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 80014dc:	4b1f      	ldr	r3, [pc, #124]	@ (800155c <LED_Task2+0x94>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00b fd6b 	bl	800cfc0 <xQueueSemaphoreTake>
		leds = 1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e01c      	b.n	800152e <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 fc33 	bl	8001d64 <LED_put>
          	osDelay(os_delay);
 80014fe:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <LED_Task2+0x98>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f00a fd3c 	bl	800bf80 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <LED_Task2+0x9c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 8001514:	4814      	ldr	r0, [pc, #80]	@ (8001568 <LED_Task2+0xa0>)
 8001516:	f000 fc71 	bl	8001dfc <UART_puts>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fc89 	bl	8001e34 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b07      	cmp	r3, #7
 8001532:	dddf      	ble.n	80014f4 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <LED_Task2+0x94>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	2300      	movs	r3, #0
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	f00b fabd 	bl	800cabc <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8001542:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <LED_Task2+0xa4>)
 8001544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 8001552:	e7c3      	b.n	80014dc <LED_Task2+0x14>
 8001554:	080128e8 	.word	0x080128e8
 8001558:	080127cc 	.word	0x080127cc
 800155c:	200002e0 	.word	0x200002e0
 8001560:	20000218 	.word	0x20000218
 8001564:	200002d4 	.word	0x200002d4
 8001568:	080127e4 	.word	0x080127e4
 800156c:	e000ed04 	.word	0xe000ed04

08001570 <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8001578:	4830      	ldr	r0, [pc, #192]	@ (800163c <LED_Task3+0xcc>)
 800157a:	f00c fe6d 	bl	800e258 <xTaskGetHandle>
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8001586:	482e      	ldr	r0, [pc, #184]	@ (8001640 <LED_Task3+0xd0>)
 8001588:	f7ff fb60 	bl	8000c4c <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800158c:	482d      	ldr	r0, [pc, #180]	@ (8001644 <LED_Task3+0xd4>)
 800158e:	f000 fc35 	bl	8001dfc <UART_puts>
 8001592:	482d      	ldr	r0, [pc, #180]	@ (8001648 <LED_Task3+0xd8>)
 8001594:	f000 fc32 	bl	8001dfc <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8001598:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <LED_Task3+0xdc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00b fd0d 	bl	800cfc0 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e02d      	b.n	8001608 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <LED_Task3+0x48>
 80015b2:	2318      	movs	r3, #24
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	e00d      	b.n	80015d4 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d102      	bne.n	80015c4 <LED_Task3+0x54>
 80015be:	2324      	movs	r3, #36	@ 0x24
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	e007      	b.n	80015d4 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d102      	bne.n	80015d0 <LED_Task3+0x60>
 80015ca:	2342      	movs	r3, #66	@ 0x42
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	e001      	b.n	80015d4 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 80015d0:	2381      	movs	r3, #129	@ 0x81
 80015d2:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fbc3 	bl	8001d64 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <LED_Task3+0xe0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00a fccc 	bl	800bf80 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <LED_Task3+0xe4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 80015f4:	4818      	ldr	r0, [pc, #96]	@ (8001658 <LED_Task3+0xe8>)
 80015f6:	f000 fc01 	bl	8001dfc <UART_puts>
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fc19 	bl	8001e34 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b03      	cmp	r3, #3
 800160c:	ddce      	ble.n	80015ac <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <LED_Task3+0xdc>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	f00b fa50 	bl	800cabc <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 800161c:	2300      	movs	r3, #0
 800161e:	2202      	movs	r2, #2
 8001620:	2100      	movs	r1, #0
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f00d fd48 	bl	800f0b8 <xTaskGenericNotify>
		osDelay(200);
 8001628:	20c8      	movs	r0, #200	@ 0xc8
 800162a:	f00a fca9 	bl	800bf80 <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 800162e:	f04f 31ff 	mov.w	r1, #4294967295
 8001632:	2001      	movs	r0, #1
 8001634:	f00d fc94 	bl	800ef60 <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8001638:	e7ae      	b.n	8001598 <LED_Task3+0x28>
 800163a:	bf00      	nop
 800163c:	080127f0 	.word	0x080127f0
 8001640:	080127fc 	.word	0x080127fc
 8001644:	080128f4 	.word	0x080128f4
 8001648:	080127cc 	.word	0x080127cc
 800164c:	200002e0 	.word	0x200002e0
 8001650:	20000218 	.word	0x20000218
 8001654:	200002d4 	.word	0x200002d4
 8001658:	08012808 	.word	0x08012808

0800165c <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8001664:	4830      	ldr	r0, [pc, #192]	@ (8001728 <LED_Task4+0xcc>)
 8001666:	f00c fdf7 	bl	800e258 <xTaskGetHandle>
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <LED_Task4+0xd0>)
 8001674:	f7ff faea 	bl	8000c4c <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001678:	482d      	ldr	r0, [pc, #180]	@ (8001730 <LED_Task4+0xd4>)
 800167a:	f000 fbbf 	bl	8001dfc <UART_puts>
 800167e:	482d      	ldr	r0, [pc, #180]	@ (8001734 <LED_Task4+0xd8>)
 8001680:	f000 fbbc 	bl	8001dfc <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	2001      	movs	r0, #1
 800168a:	f00d fc69 	bl	800ef60 <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <LED_Task4+0xdc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f04f 31ff 	mov.w	r1, #4294967295
 8001696:	4618      	mov	r0, r3
 8001698:	f00b fc92 	bl	800cfc0 <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e02d      	b.n	80016fe <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <LED_Task4+0x52>
 80016a8:	2381      	movs	r3, #129	@ 0x81
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e00d      	b.n	80016ca <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <LED_Task4+0x5e>
 80016b4:	2342      	movs	r3, #66	@ 0x42
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	e007      	b.n	80016ca <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d102      	bne.n	80016c6 <LED_Task4+0x6a>
 80016c0:	2324      	movs	r3, #36	@ 0x24
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	e001      	b.n	80016ca <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 80016c6:	2318      	movs	r3, #24
 80016c8:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fb48 	bl	8001d64 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <LED_Task4+0xe0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f00a fc51 	bl	800bf80 <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <LED_Task4+0xe4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 80016ea:	4816      	ldr	r0, [pc, #88]	@ (8001744 <LED_Task4+0xe8>)
 80016ec:	f000 fb86 	bl	8001dfc <UART_puts>
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fb9e 	bl	8001e34 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b03      	cmp	r3, #3
 8001702:	ddce      	ble.n	80016a2 <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <LED_Task4+0xdc>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	f00b f9d5 	bl	800cabc <xQueueGenericSend>
		osDelay(200);
 8001712:	20c8      	movs	r0, #200	@ 0xc8
 8001714:	f00a fc34 	bl	800bf80 <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 8001718:	2300      	movs	r3, #0
 800171a:	2202      	movs	r2, #2
 800171c:	2100      	movs	r1, #0
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f00d fcca 	bl	800f0b8 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8001724:	e7ae      	b.n	8001684 <LED_Task4+0x28>
 8001726:	bf00      	nop
 8001728:	08012818 	.word	0x08012818
 800172c:	08012824 	.word	0x08012824
 8001730:	08012900 	.word	0x08012900
 8001734:	080127cc 	.word	0x080127cc
 8001738:	200002e0 	.word	0x200002e0
 800173c:	20000218 	.word	0x20000218
 8001740:	200002d4 	.word	0x200002d4
 8001744:	08012830 	.word	0x08012830

08001748 <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b098      	sub	sp, #96	@ 0x60
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001750:	4810      	ldr	r0, [pc, #64]	@ (8001794 <Student_task1+0x4c>)
 8001752:	f000 fb53 	bl	8001dfc <UART_puts>
 8001756:	4810      	ldr	r0, [pc, #64]	@ (8001798 <Student_task1+0x50>)
 8001758:	f000 fb50 	bl	8001dfc <UART_puts>
	char buf[80];
	unsigned int i = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 8001760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001764:	f00a fc0c 	bl	800bf80 <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <Student_task1+0x54>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f5      	beq.n	8001760 <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8001774:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800177a:	f107 000c 	add.w	r0, r7, #12
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <Student_task1+0x4c>)
 8001780:	4907      	ldr	r1, [pc, #28]	@ (80017a0 <Student_task1+0x58>)
 8001782:	f00f fad5 	bl	8010d30 <siprintf>
			UART_puts(buf);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fb36 	bl	8001dfc <UART_puts>
       	osDelay(1000);
 8001790:	e7e6      	b.n	8001760 <Student_task1+0x18>
 8001792:	bf00      	nop
 8001794:	0801290c 	.word	0x0801290c
 8001798:	08012840 	.word	0x08012840
 800179c:	200002d4 	.word	0x200002d4
 80017a0:	0801284c 	.word	0x0801284c

080017a4 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 80017b0:	e023      	b.n	80017fa <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017b8:	4815      	ldr	r0, [pc, #84]	@ (8001810 <BUZZER_put+0x6c>)
 80017ba:	f001 fe3d 	bl	8003438 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e002      	b.n	80017ca <BUZZER_put+0x26>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	441a      	add	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d8f6      	bhi.n	80017c4 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <BUZZER_put+0x6c>)
 80017de:	f001 fe2b 	bl	8003438 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e002      	b.n	80017ee <BUZZER_put+0x4a>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	441a      	add	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d8f6      	bhi.n	80017e8 <BUZZER_put+0x44>
	while (k++<100)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	2b63      	cmp	r3, #99	@ 0x63
 8001802:	d9d6      	bls.n	80017b2 <BUZZER_put+0xe>
	}
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40020800 	.word	0x40020800

08001814 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <KEYS_init+0x6c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a17      	ldr	r2, [pc, #92]	@ (8001880 <KEYS_init+0x6c>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <KEYS_init+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 8001842:	f640 030e 	movw	r3, #2062	@ 0x80e
 8001846:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	4619      	mov	r1, r3
 800184c:	480d      	ldr	r0, [pc, #52]	@ (8001884 <KEYS_init+0x70>)
 800184e:	f001 fc3f 	bl	80030d0 <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 8001852:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001856:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 800185c:	2302      	movs	r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <KEYS_init+0x70>)
 8001866:	f001 fc33 	bl	80030d0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	f640 010e 	movw	r1, #2062	@ 0x80e
 8001870:	4804      	ldr	r0, [pc, #16]	@ (8001884 <KEYS_init+0x70>)
 8001872:	f001 fde1 	bl	8003438 <HAL_GPIO_WritePin>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800
 8001884:	40020c00 	.word	0x40020c00

08001888 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800189a:	480e      	ldr	r0, [pc, #56]	@ (80018d4 <KEYS_initISR+0x4c>)
 800189c:	f001 fdcc 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	2102      	movs	r1, #2
 80018a8:	480a      	ldr	r0, [pc, #40]	@ (80018d4 <KEYS_initISR+0x4c>)
 80018aa:	f001 fdc5 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	2108      	movs	r1, #8
 80018b6:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <KEYS_initISR+0x4c>)
 80018b8:	f001 fdbe 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	2104      	movs	r1, #4
 80018c4:	4803      	ldr	r0, [pc, #12]	@ (80018d4 <KEYS_initISR+0x4c>)
 80018c6:	f001 fdb7 	bl	8003438 <HAL_GPIO_WritePin>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ec:	4827      	ldr	r0, [pc, #156]	@ (800198c <KEYS_read+0xb4>)
 80018ee:	f001 fda3 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2108      	movs	r1, #8
 80018f6:	4825      	ldr	r0, [pc, #148]	@ (800198c <KEYS_read+0xb4>)
 80018f8:	f001 fd9e 	bl	8003438 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80018fc:	f000 f848 	bl	8001990 <KEYS_kolom>
 8001900:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <KEYS_read+0x36>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	330c      	adds	r3, #12
 800190c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2108      	movs	r1, #8
 8001912:	481e      	ldr	r0, [pc, #120]	@ (800198c <KEYS_read+0xb4>)
 8001914:	f001 fd90 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 8001918:	2201      	movs	r2, #1
 800191a:	2104      	movs	r1, #4
 800191c:	481b      	ldr	r0, [pc, #108]	@ (800198c <KEYS_read+0xb4>)
 800191e:	f001 fd8b 	bl	8003438 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8001922:	f000 f835 	bl	8001990 <KEYS_kolom>
 8001926:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <KEYS_read+0x5c>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	3308      	adds	r3, #8
 8001932:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2104      	movs	r1, #4
 8001938:	4814      	ldr	r0, [pc, #80]	@ (800198c <KEYS_read+0xb4>)
 800193a:	f001 fd7d 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 800193e:	2201      	movs	r2, #1
 8001940:	2102      	movs	r1, #2
 8001942:	4812      	ldr	r0, [pc, #72]	@ (800198c <KEYS_read+0xb4>)
 8001944:	f001 fd78 	bl	8003438 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8001948:	f000 f822 	bl	8001990 <KEYS_kolom>
 800194c:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <KEYS_read+0x82>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3304      	adds	r3, #4
 8001958:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2102      	movs	r1, #2
 800195e:	480b      	ldr	r0, [pc, #44]	@ (800198c <KEYS_read+0xb4>)
 8001960:	f001 fd6a 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800196a:	4808      	ldr	r0, [pc, #32]	@ (800198c <KEYS_read+0xb4>)
 800196c:	f001 fd64 	bl	8003438 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8001970:	f000 f80e 	bl	8001990 <KEYS_kolom>
 8001974:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <KEYS_read+0xa8>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	607b      	str	r3, [r7, #4]

	return out;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40020c00 	.word	0x40020c00

08001990 <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 800199a:	2140      	movs	r1, #64	@ 0x40
 800199c:	4814      	ldr	r0, [pc, #80]	@ (80019f0 <KEYS_kolom+0x60>)
 800199e:	f001 fd33 	bl	8003408 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <KEYS_kolom+0x1c>
 80019a8:	2301      	movs	r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 80019ac:	2180      	movs	r1, #128	@ 0x80
 80019ae:	4810      	ldr	r0, [pc, #64]	@ (80019f0 <KEYS_kolom+0x60>)
 80019b0:	f001 fd2a 	bl	8003408 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <KEYS_kolom+0x2e>
 80019ba:	2302      	movs	r3, #2
 80019bc:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 80019be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c2:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <KEYS_kolom+0x60>)
 80019c4:	f001 fd20 	bl	8003408 <HAL_GPIO_ReadPin>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <KEYS_kolom+0x42>
 80019ce:	2303      	movs	r3, #3
 80019d0:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 80019d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019d6:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <KEYS_kolom+0x60>)
 80019d8:	f001 fd16 	bl	8003408 <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <KEYS_kolom+0x56>
 80019e2:	2304      	movs	r3, #4
 80019e4:	607b      	str	r3, [r7, #4]
	return key;
 80019e6:	687b      	ldr	r3, [r7, #4]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2108      	movs	r1, #8
 80019fc:	4809      	ldr	r0, [pc, #36]	@ (8001a24 <ClearBits+0x30>)
 80019fe:	f001 fd1b 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2110      	movs	r1, #16
 8001a06:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <ClearBits+0x30>)
 8001a08:	f001 fd16 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2120      	movs	r1, #32
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <ClearBits+0x30>)
 8001a12:	f001 fd11 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2140      	movs	r1, #64	@ 0x40
 8001a1a:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <ClearBits+0x30>)
 8001a1c:	f001 fd0c 	bl	8003438 <HAL_GPIO_WritePin>
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000

08001a28 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f000 f967 	bl	8001d00 <LCD_writecontrol>
   curpos=0;               // reset position
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <LCD_clear+0x1c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8001a38:	2005      	movs	r0, #5
 8001a3a:	f001 f9b1 	bl	8002da0 <HAL_Delay>
//   busyflag();

}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000333 	.word	0x20000333

08001a48 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b44      	ldr	r3, [pc, #272]	@ (8001b64 <LCD_init+0x11c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a43      	ldr	r2, [pc, #268]	@ (8001b64 <LCD_init+0x11c>)
 8001a58:	f043 0310 	orr.w	r3, r3, #16
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b41      	ldr	r3, [pc, #260]	@ (8001b64 <LCD_init+0x11c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b64 <LCD_init+0x11c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a3c      	ldr	r2, [pc, #240]	@ (8001b64 <LCD_init+0x11c>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b64 <LCD_init+0x11c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	603b      	str	r3, [r7, #0]
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <LCD_init+0x11c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a35      	ldr	r2, [pc, #212]	@ (8001b64 <LCD_init+0x11c>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <LCD_init+0x11c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8001aae:	2378      	movs	r3, #120	@ 0x78
 8001ab0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	482b      	ldr	r0, [pc, #172]	@ (8001b68 <LCD_init+0x120>)
 8001aba:	f001 fb09 	bl	80030d0 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8001abe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001ac2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4828      	ldr	r0, [pc, #160]	@ (8001b6c <LCD_init+0x124>)
 8001acc:	f001 fb00 	bl	80030d0 <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4825      	ldr	r0, [pc, #148]	@ (8001b70 <LCD_init+0x128>)
 8001adc:	f001 faf8 	bl	80030d0 <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ae6:	4821      	ldr	r0, [pc, #132]	@ (8001b6c <LCD_init+0x124>)
 8001ae8:	f001 fca6 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	481f      	ldr	r0, [pc, #124]	@ (8001b70 <LCD_init+0x128>)
 8001af2:	f001 fca1 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001afc:	481b      	ldr	r0, [pc, #108]	@ (8001b6c <LCD_init+0x124>)
 8001afe:	f001 fc9b 	bl	8003438 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 8001b02:	200f      	movs	r0, #15
 8001b04:	f001 f94c 	bl	8002da0 <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 8001b08:	2030      	movs	r0, #48	@ 0x30
 8001b0a:	f000 f8c7 	bl	8001c9c <LCD_writebyte>
    HAL_Delay(70);
 8001b0e:	2046      	movs	r0, #70	@ 0x46
 8001b10:	f001 f946 	bl	8002da0 <HAL_Delay>
    LCD_writebyte(0x30);
 8001b14:	2030      	movs	r0, #48	@ 0x30
 8001b16:	f000 f8c1 	bl	8001c9c <LCD_writebyte>
    LCD_writebyte(0x30);
 8001b1a:	2030      	movs	r0, #48	@ 0x30
 8001b1c:	f000 f8be 	bl	8001c9c <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 8001b20:	2002      	movs	r0, #2
 8001b22:	f000 f8bb 	bl	8001c9c <LCD_writebyte>
    HAL_Delay(5);
 8001b26:	2005      	movs	r0, #5
 8001b28:	f001 f93a 	bl	8002da0 <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8001b2c:	202c      	movs	r0, #44	@ 0x2c
 8001b2e:	f000 f8b5 	bl	8001c9c <LCD_writebyte>
    HAL_Delay(15);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f001 f934 	bl	8002da0 <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8001b38:	200c      	movs	r0, #12
 8001b3a:	f000 f8af 	bl	8001c9c <LCD_writebyte>
    HAL_Delay(15);
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f001 f92e 	bl	8002da0 <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 f8a9 	bl	8001c9c <LCD_writebyte>
    HAL_Delay(15);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f001 f928 	bl	8002da0 <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 8001b50:	2006      	movs	r0, #6
 8001b52:	f000 f8a3 	bl	8001c9c <LCD_writebyte>
    HAL_Delay(15);
 8001b56:	200f      	movs	r0, #15
 8001b58:	f001 f922 	bl	8002da0 <HAL_Delay>
}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00

08001b74 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b84:	480b      	ldr	r0, [pc, #44]	@ (8001bb4 <LCD_putchar+0x40>)
 8001b86:	f001 fc57 	bl	8003438 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f885 	bl	8001c9c <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <LCD_putchar+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <LCD_putchar+0x44>)
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <LCD_putchar+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d102      	bne.n	8001bac <LCD_putchar+0x38>
    	curpos=0;
 8001ba6:	4b04      	ldr	r3, [pc, #16]	@ (8001bb8 <LCD_putchar+0x44>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	20000333 	.word	0x20000333

08001bbc <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73bb      	strb	r3, [r7, #14]
 8001bc8:	e019      	b.n	8001bfe <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <LCD_put+0x58>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d10b      	bne.n	8001bea <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	73fb      	strb	r3, [r7, #15]
 8001bd6:	e005      	b.n	8001be4 <LCD_put+0x28>
 8001bd8:	2014      	movs	r0, #20
 8001bda:	f000 f891 	bl	8001d00 <LCD_writecontrol>
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	3301      	adds	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b1f      	cmp	r3, #31
 8001be8:	d9f6      	bls.n	8001bd8 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ffbe 	bl	8001b74 <LCD_putchar>
    for (k=0; string[k]; k++)
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73bb      	strb	r3, [r7, #14]
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1df      	bne.n	8001bca <LCD_put+0xe>
    }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000333 	.word	0x20000333

08001c18 <LCD_puts>:

void LCD_puts(char *c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffcb 	bl	8001bbc <LCD_put>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8001c3a:	f7ff fedb 	bl	80019f4 <ClearBits>

    if (data & 0x01)
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d004      	beq.n	8001c52 <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2140      	movs	r1, #64	@ 0x40
 8001c4c:	4812      	ldr	r0, [pc, #72]	@ (8001c98 <LCD_writenibble+0x68>)
 8001c4e:	f001 fbf3 	bl	8003438 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2120      	movs	r1, #32
 8001c60:	480d      	ldr	r0, [pc, #52]	@ (8001c98 <LCD_writenibble+0x68>)
 8001c62:	f001 fbe9 	bl	8003438 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d004      	beq.n	8001c7a <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2110      	movs	r1, #16
 8001c74:	4808      	ldr	r0, [pc, #32]	@ (8001c98 <LCD_writenibble+0x68>)
 8001c76:	f001 fbdf 	bl	8003438 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8001c84:	2201      	movs	r2, #1
 8001c86:	2108      	movs	r1, #8
 8001c88:	4803      	ldr	r0, [pc, #12]	@ (8001c98 <LCD_writenibble+0x68>)
 8001c8a:	f001 fbd5 	bl	8003438 <HAL_GPIO_WritePin>

}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	2101      	movs	r1, #1
 8001caa:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <LCD_writebyte+0x60>)
 8001cac:	f001 fbc4 	bl	8003438 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff ffba 	bl	8001c30 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	480e      	ldr	r0, [pc, #56]	@ (8001cfc <LCD_writebyte+0x60>)
 8001cc2:	f001 fbb9 	bl	8003438 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f001 f86a 	bl	8002da0 <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2101      	movs	r1, #1
 8001cd0:	480a      	ldr	r0, [pc, #40]	@ (8001cfc <LCD_writebyte+0x60>)
 8001cd2:	f001 fbb1 	bl	8003438 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 030f 	and.w	r3, r3, #15
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffa6 	bl	8001c30 <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <LCD_writebyte+0x60>)
 8001cea:	f001 fba5 	bl	8003438 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f001 f856 	bl	8002da0 <HAL_Delay>
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020c00 	.word	0x40020c00

08001d00 <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d10:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <LCD_writecontrol+0x28>)
 8001d12:	f001 fb91 	bl	8003438 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ffbf 	bl	8001c9c <LCD_writebyte>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40020800 	.word	0x40020800

08001d2c <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d36:	4809      	ldr	r0, [pc, #36]	@ (8001d5c <LED_init+0x30>)
 8001d38:	f001 fb7e 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d42:	4807      	ldr	r0, [pc, #28]	@ (8001d60 <LED_init+0x34>)
 8001d44:	f001 fb78 	bl	8003438 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4804      	ldr	r0, [pc, #16]	@ (8001d60 <LED_init+0x34>)
 8001d4e:	f001 fb73 	bl	8003438 <HAL_GPIO_WritePin>
    LED_put(0);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 f806 	bl	8001d64 <LED_put>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400

08001d64 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e01c      	b.n	8001dae <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d8a:	4811      	ldr	r0, [pc, #68]	@ (8001dd0 <LED_put+0x6c>)
 8001d8c:	f001 fb54 	bl	8003438 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8001d90:	2201      	movs	r2, #1
 8001d92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d96:	480f      	ldr	r0, [pc, #60]	@ (8001dd4 <LED_put+0x70>)
 8001d98:	f001 fb4e 	bl	8003438 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001da2:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LED_put+0x70>)
 8001da4:	f001 fb48 	bl	8003438 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1df      	bne.n	8001d74 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	2102      	movs	r1, #2
 8001db8:	4806      	ldr	r0, [pc, #24]	@ (8001dd4 <LED_put+0x70>)
 8001dba:	f001 fb3d 	bl	8003438 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	4804      	ldr	r0, [pc, #16]	@ (8001dd4 <LED_put+0x70>)
 8001dc4:	f001 fb38 	bl	8003438 <HAL_GPIO_WritePin>
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8001de2:	1df9      	adds	r1, r7, #7
 8001de4:	2364      	movs	r3, #100	@ 0x64
 8001de6:	2201      	movs	r2, #1
 8001de8:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <UART_putchar+0x20>)
 8001dea:	f005 fc15 	bl	8007618 <HAL_UART_Transmit>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000470 	.word	0x20000470

08001dfc <UART_puts>:

void UART_puts(const char *s)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e009      	b.n	8001e1e <UART_puts+0x22>
		UART_putchar(s[i]);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ffe0 	bl	8001dd8 <UART_putchar>
	for (i=0; s[i]; i++)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ef      	bne.n	8001e0a <UART_puts+0xe>
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8001e3c:	210a      	movs	r1, #10
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f804 	bl	8001e4c <UART_putnum>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8001e58:	230f      	movs	r3, #15
 8001e5a:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d129      	bne.n	8001eb6 <UART_putnum+0x6a>
    {
        c[i]='0';
 8001e62:	f107 0208 	add.w	r2, r7, #8
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	4413      	add	r3, r2
 8001e6a:	2230      	movs	r2, #48	@ 0x30
 8001e6c:	701a      	strb	r2, [r3, #0]
        i--;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	e030      	b.n	8001ed8 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e7e:	fb01 f202 	mul.w	r2, r1, r2
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8001e90:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <UART_putnum+0x9c>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b259      	sxtb	r1, r3
 8001e9a:	f107 0208 	add.w	r2, r7, #8
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
            i--;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <UART_putnum+0x6a>
                num=0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
        while(num>0)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1dc      	bne.n	8001e76 <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8001ebc:	e00c      	b.n	8001ed8 <UART_putnum+0x8c>
    {
        i++;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8001ec4:	f107 0208 	add.w	r2, r7, #8
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff80 	bl	8001dd8 <UART_putchar>
    while(i<15)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0e      	cmp	r3, #14
 8001edc:	ddef      	ble.n	8001ebe <UART_putnum+0x72>
    }
}
 8001ede:	bf00      	nop
 8001ee0:	bf00      	nop
 8001ee2:	3720      	adds	r7, #32
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	2000021c 	.word	0x2000021c

08001eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef0:	f000 ff14 	bl	8002d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef4:	f000 f830 	bl	8001f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef8:	f000 f980 	bl	80021fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001efc:	f000 f896 	bl	800202c <MX_I2C1_Init>
  MX_I2S3_Init();
 8001f00:	f000 f8c2 	bl	8002088 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001f04:	f000 f8f0 	bl	80020e8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001f08:	f000 f94e 	bl	80021a8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001f0c:	f000 f922 	bl	8002154 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8001f10:	f7ff fd9a 	bl	8001a48 <LCD_init>
  KEYS_init();
 8001f14:	f7ff fc7e 	bl	8001814 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff fcb5 	bl	8001888 <KEYS_initISR>
  LED_init();
 8001f1e:	f7ff ff05 	bl	8001d2c <LED_init>

  DisplayVersion();
 8001f22:	f7fe fe25 	bl	8000b70 <DisplayVersion>
  osDelay(500); // time to read version
 8001f26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f2a:	f00a f829 	bl	800bf80 <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f2e:	f009 ff0d 	bl	800bd4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f32:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <main+0x60>)
 8001f34:	2100      	movs	r1, #0
 8001f36:	4806      	ldr	r0, [pc, #24]	@ (8001f50 <main+0x64>)
 8001f38:	f009 ff90 	bl	800be5c <osThreadNew>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <main+0x68>)
 8001f40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f42:	f009 ff4f 	bl	800bde4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f46:	bf00      	nop
 8001f48:	e7fd      	b.n	8001f46 <main+0x5a>
 8001f4a:	bf00      	nop
 8001f4c:	0801291c 	.word	0x0801291c
 8001f50:	08002525 	.word	0x08002525
 8001f54:	200004b8 	.word	0x200004b8

08001f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b094      	sub	sp, #80	@ 0x50
 8001f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5e:	f107 0320 	add.w	r3, r7, #32
 8001f62:	2230      	movs	r2, #48	@ 0x30
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00e ff47 	bl	8010dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	f107 030c 	add.w	r3, r7, #12
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <SystemClock_Config+0xcc>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <SystemClock_Config+0xcc>)
 8001f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8c:	4b25      	ldr	r3, [pc, #148]	@ (8002024 <SystemClock_Config+0xcc>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <SystemClock_Config+0xd0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a21      	ldr	r2, [pc, #132]	@ (8002028 <SystemClock_Config+0xd0>)
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <SystemClock_Config+0xd0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001fcc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fda:	f107 0320 	add.w	r3, r7, #32
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 f99a 	bl	8006318 <HAL_RCC_OscConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fea:	f000 fadf 	bl	80025ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fee:	230f      	movs	r3, #15
 8001ff0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ffa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002004:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	2105      	movs	r1, #5
 800200c:	4618      	mov	r0, r3
 800200e:	f004 fbfb 	bl	8006808 <HAL_RCC_ClockConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002018:	f000 fac8 	bl	80025ac <Error_Handler>
  }
}
 800201c:	bf00      	nop
 800201e:	3750      	adds	r7, #80	@ 0x50
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002030:	4b12      	ldr	r3, [pc, #72]	@ (800207c <MX_I2C1_Init+0x50>)
 8002032:	4a13      	ldr	r2, [pc, #76]	@ (8002080 <MX_I2C1_Init+0x54>)
 8002034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <MX_I2C1_Init+0x50>)
 8002038:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <MX_I2C1_Init+0x58>)
 800203a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <MX_I2C1_Init+0x50>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <MX_I2C1_Init+0x50>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <MX_I2C1_Init+0x50>)
 800204a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800204e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <MX_I2C1_Init+0x50>)
 8002052:	2200      	movs	r2, #0
 8002054:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <MX_I2C1_Init+0x50>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800205c:	4b07      	ldr	r3, [pc, #28]	@ (800207c <MX_I2C1_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002062:	4b06      	ldr	r3, [pc, #24]	@ (800207c <MX_I2C1_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_I2C1_Init+0x50>)
 800206a:	f003 fb71 	bl	8005750 <HAL_I2C_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002074:	f000 fa9a 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000334 	.word	0x20000334
 8002080:	40005400 	.word	0x40005400
 8002084:	000186a0 	.word	0x000186a0

08002088 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800208c:	4b13      	ldr	r3, [pc, #76]	@ (80020dc <MX_I2S3_Init+0x54>)
 800208e:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <MX_I2S3_Init+0x58>)
 8002090:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002092:	4b12      	ldr	r3, [pc, #72]	@ (80020dc <MX_I2S3_Init+0x54>)
 8002094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002098:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <MX_I2S3_Init+0x54>)
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ac:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020b0:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <MX_I2S3_Init+0x5c>)
 80020b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80020b4:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80020c6:	4805      	ldr	r0, [pc, #20]	@ (80020dc <MX_I2S3_Init+0x54>)
 80020c8:	f003 fc86 	bl	80059d8 <HAL_I2S_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80020d2:	f000 fa6b 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000388 	.word	0x20000388
 80020e0:	40003c00 	.word	0x40003c00
 80020e4:	00017700 	.word	0x00017700

080020e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020ec:	4b17      	ldr	r3, [pc, #92]	@ (800214c <MX_SPI1_Init+0x64>)
 80020ee:	4a18      	ldr	r2, [pc, #96]	@ (8002150 <MX_SPI1_Init+0x68>)
 80020f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_SPI1_Init+0x64>)
 80020f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_SPI1_Init+0x64>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <MX_SPI1_Init+0x64>)
 8002102:	2200      	movs	r2, #0
 8002104:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <MX_SPI1_Init+0x64>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <MX_SPI1_Init+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <MX_SPI1_Init+0x64>)
 8002114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002118:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <MX_SPI1_Init+0x64>)
 800211c:	2200      	movs	r2, #0
 800211e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <MX_SPI1_Init+0x64>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <MX_SPI1_Init+0x64>)
 8002128:	2200      	movs	r2, #0
 800212a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800212c:	4b07      	ldr	r3, [pc, #28]	@ (800214c <MX_SPI1_Init+0x64>)
 800212e:	2200      	movs	r2, #0
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <MX_SPI1_Init+0x64>)
 8002134:	220a      	movs	r2, #10
 8002136:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002138:	4804      	ldr	r0, [pc, #16]	@ (800214c <MX_SPI1_Init+0x64>)
 800213a:	f004 fef9 	bl	8006f30 <HAL_SPI_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002144:	f000 fa32 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200003d0 	.word	0x200003d0
 8002150:	40013000 	.word	0x40013000

08002154 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <MX_UART4_Init+0x4c>)
 800215a:	4a12      	ldr	r2, [pc, #72]	@ (80021a4 <MX_UART4_Init+0x50>)
 800215c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <MX_UART4_Init+0x4c>)
 8002160:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002164:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002166:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <MX_UART4_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800216c:	4b0c      	ldr	r3, [pc, #48]	@ (80021a0 <MX_UART4_Init+0x4c>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002172:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <MX_UART4_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002178:	4b09      	ldr	r3, [pc, #36]	@ (80021a0 <MX_UART4_Init+0x4c>)
 800217a:	220c      	movs	r2, #12
 800217c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800217e:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <MX_UART4_Init+0x4c>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <MX_UART4_Init+0x4c>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <MX_UART4_Init+0x4c>)
 800218c:	f005 f9f4 	bl	8007578 <HAL_UART_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002196:	f000 fa09 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000428 	.word	0x20000428
 80021a4:	40004c00 	.word	0x40004c00

080021a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ac:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <MX_USART2_UART_Init+0x50>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021e0:	f005 f9ca 	bl	8007578 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ea:	f000 f9df 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000470 	.word	0x20000470
 80021f8:	40004400 	.word	0x40004400

080021fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	@ 0x30
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	60da      	str	r2, [r3, #12]
 8002210:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	4b8e      	ldr	r3, [pc, #568]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4a8d      	ldr	r2, [pc, #564]	@ (8002450 <MX_GPIO_Init+0x254>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
 8002222:	4b8b      	ldr	r3, [pc, #556]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	4b87      	ldr	r3, [pc, #540]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a86      	ldr	r2, [pc, #536]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b84      	ldr	r3, [pc, #528]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b80      	ldr	r3, [pc, #512]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a7f      	ldr	r2, [pc, #508]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b7d      	ldr	r3, [pc, #500]	@ (8002450 <MX_GPIO_Init+0x254>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b79      	ldr	r3, [pc, #484]	@ (8002450 <MX_GPIO_Init+0x254>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a78      	ldr	r2, [pc, #480]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	4b72      	ldr	r3, [pc, #456]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	4a71      	ldr	r2, [pc, #452]	@ (8002450 <MX_GPIO_Init+0x254>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	@ 0x30
 8002292:	4b6f      	ldr	r3, [pc, #444]	@ (8002450 <MX_GPIO_Init+0x254>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	4b6b      	ldr	r3, [pc, #428]	@ (8002450 <MX_GPIO_Init+0x254>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	4a6a      	ldr	r2, [pc, #424]	@ (8002450 <MX_GPIO_Init+0x254>)
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ae:	4b68      	ldr	r3, [pc, #416]	@ (8002450 <MX_GPIO_Init+0x254>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2108      	movs	r1, #8
 80022be:	4865      	ldr	r0, [pc, #404]	@ (8002454 <MX_GPIO_Init+0x258>)
 80022c0:	f001 f8ba 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2101      	movs	r1, #1
 80022c8:	4863      	ldr	r0, [pc, #396]	@ (8002458 <MX_GPIO_Init+0x25c>)
 80022ca:	f001 f8b5 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 80022ce:	2200      	movs	r2, #0
 80022d0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80022d4:	4861      	ldr	r0, [pc, #388]	@ (800245c <MX_GPIO_Init+0x260>)
 80022d6:	f001 f8af 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80022da:	2200      	movs	r2, #0
 80022dc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80022e0:	485f      	ldr	r0, [pc, #380]	@ (8002460 <MX_GPIO_Init+0x264>)
 80022e2:	f001 f8a9 	bl	8003438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ec:	485a      	ldr	r0, [pc, #360]	@ (8002458 <MX_GPIO_Init+0x25c>)
 80022ee:	f001 f8a3 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f8:	485a      	ldr	r0, [pc, #360]	@ (8002464 <MX_GPIO_Init+0x268>)
 80022fa:	f001 f89d 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80022fe:	2308      	movs	r3, #8
 8002300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002302:	2301      	movs	r3, #1
 8002304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800230e:	f107 031c 	add.w	r3, r7, #28
 8002312:	4619      	mov	r1, r3
 8002314:	484f      	ldr	r0, [pc, #316]	@ (8002454 <MX_GPIO_Init+0x258>)
 8002316:	f000 fedb 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 800231a:	f240 1301 	movw	r3, #257	@ 0x101
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002320:	2301      	movs	r3, #1
 8002322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	4849      	ldr	r0, [pc, #292]	@ (8002458 <MX_GPIO_Init+0x25c>)
 8002334:	f000 fecc 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002338:	2308      	movs	r3, #8
 800233a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002348:	2305      	movs	r3, #5
 800234a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4619      	mov	r1, r3
 8002352:	4841      	ldr	r0, [pc, #260]	@ (8002458 <MX_GPIO_Init+0x25c>)
 8002354:	f000 febc 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8002358:	2301      	movs	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	483b      	ldr	r0, [pc, #236]	@ (800245c <MX_GPIO_Init+0x260>)
 800236e:	f000 feaf 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 8002372:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002384:	f107 031c 	add.w	r3, r7, #28
 8002388:	4619      	mov	r1, r3
 800238a:	4834      	ldr	r0, [pc, #208]	@ (800245c <MX_GPIO_Init+0x260>)
 800238c:	f000 fea0 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002390:	2304      	movs	r3, #4
 8002392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	482e      	ldr	r0, [pc, #184]	@ (800245c <MX_GPIO_Init+0x260>)
 80023a4:	f000 fe94 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80023a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ba:	2305      	movs	r3, #5
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	4825      	ldr	r0, [pc, #148]	@ (800245c <MX_GPIO_Init+0x260>)
 80023c6:	f000 fe83 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80023ca:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80023ce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4619      	mov	r1, r3
 80023e2:	481f      	ldr	r0, [pc, #124]	@ (8002460 <MX_GPIO_Init+0x264>)
 80023e4:	f000 fe74 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 80023e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4818      	ldr	r0, [pc, #96]	@ (8002464 <MX_GPIO_Init+0x268>)
 8002402:	f000 fe65 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002406:	2320      	movs	r3, #32
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4811      	ldr	r0, [pc, #68]	@ (8002460 <MX_GPIO_Init+0x264>)
 800241a:	f000 fe59 	bl	80030d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800241e:	2302      	movs	r3, #2
 8002420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002422:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 031c 	add.w	r3, r7, #28
 8002430:	4619      	mov	r1, r3
 8002432:	4808      	ldr	r0, [pc, #32]	@ (8002454 <MX_GPIO_Init+0x258>)
 8002434:	f000 fe4c 	bl	80030d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002438:	2200      	movs	r2, #0
 800243a:	2105      	movs	r1, #5
 800243c:	2006      	movs	r0, #6
 800243e:	f000 fd8b 	bl	8002f58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002442:	2006      	movs	r0, #6
 8002444:	f000 fda4 	bl	8002f90 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002448:	bf00      	nop
 800244a:	3730      	adds	r7, #48	@ 0x30
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40021000 	.word	0x40021000
 8002458:	40020800 	.word	0x40020800
 800245c:	40020400 	.word	0x40020400
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	@ (8002508 <HAL_UART_RxCpltCallback+0xa0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d11d      	bne.n	80024ba <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 800247e:	f107 030e 	add.w	r3, r7, #14
 8002482:	2201      	movs	r2, #1
 8002484:	4619      	mov	r1, r3
 8002486:	4821      	ldr	r0, [pc, #132]	@ (800250c <HAL_UART_RxCpltCallback+0xa4>)
 8002488:	f005 f951 	bl	800772e <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 800248c:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_UART_RxCpltCallback+0xa8>)
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	f107 0208 	add.w	r2, r7, #8
 8002494:	f107 010e 	add.w	r1, r7, #14
 8002498:	2300      	movs	r3, #0
 800249a:	f00a fc11 	bl	800ccc0 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_UART_RxCpltCallback+0x52>
 80024aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <HAL_UART_RxCpltCallback+0xac>)
 80024ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <HAL_UART_RxCpltCallback+0xb0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d11d      	bne.n	8002500 <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 80024c4:	f107 030f 	add.w	r3, r7, #15
 80024c8:	2201      	movs	r2, #1
 80024ca:	4619      	mov	r1, r3
 80024cc:	4813      	ldr	r0, [pc, #76]	@ (800251c <HAL_UART_RxCpltCallback+0xb4>)
 80024ce:	f005 f92e 	bl	800772e <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 80024d2:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <HAL_UART_RxCpltCallback+0xb8>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	f107 0208 	add.w	r2, r7, #8
 80024da:	f107 010f 	add.w	r1, r7, #15
 80024de:	2300      	movs	r3, #0
 80024e0:	f00a fbee 	bl	800ccc0 <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_UART_RxCpltCallback+0x98>
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <HAL_UART_RxCpltCallback+0xac>)
 80024f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	f3bf 8f6f 	isb	sy
	}

}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40004400 	.word	0x40004400
 800250c:	20000470 	.word	0x20000470
 8002510:	200002d8 	.word	0x200002d8
 8002514:	e000ed04 	.word	0xe000ed04
 8002518:	40004c00 	.word	0x40004c00
 800251c:	20000428 	.word	0x20000428
 8002520:	200002dc 	.word	0x200002dc

08002524 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800252c:	f00d fef4 	bl	8010318 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 8002530:	f7fe fba4 	bl	8000c7c <CreateHandles>
  CreateTasks();
 8002534:	f7fe fc32 	bl	8000d9c <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8002538:	f107 030e 	add.w	r3, r7, #14
 800253c:	2201      	movs	r2, #1
 800253e:	4619      	mov	r1, r3
 8002540:	480d      	ldr	r0, [pc, #52]	@ (8002578 <StartDefaultTask+0x54>)
 8002542:	f005 f8f4 	bl	800772e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 8002546:	f107 030f 	add.w	r3, r7, #15
 800254a:	2201      	movs	r2, #1
 800254c:	4619      	mov	r1, r3
 800254e:	480b      	ldr	r0, [pc, #44]	@ (800257c <StartDefaultTask+0x58>)
 8002550:	f005 f8ed 	bl	800772e <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fc6c 	bl	8001e34 <UART_putint>
 800255c:	4808      	ldr	r0, [pc, #32]	@ (8002580 <StartDefaultTask+0x5c>)
 800255e:	f7ff fc4d 	bl	8001dfc <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002562:	2001      	movs	r0, #1
 8002564:	f009 fd0c 	bl	800bf80 <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8002568:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <StartDefaultTask+0x60>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f00b fa21 	bl	800d9b4 <vTaskDelete>
    osDelay(1);
 8002572:	bf00      	nop
 8002574:	e7f5      	b.n	8002562 <StartDefaultTask+0x3e>
 8002576:	bf00      	nop
 8002578:	20000470 	.word	0x20000470
 800257c:	20000428 	.word	0x20000428
 8002580:	08012864 	.word	0x08012864
 8002584:	200004b8 	.word	0x200004b8

08002588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a04      	ldr	r2, [pc, #16]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800259a:	f000 fbe1 	bl	8002d60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40010000 	.word	0x40010000

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <Error_Handler+0x8>

080025b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b12      	ldr	r3, [pc, #72]	@ (800260c <HAL_MspInit+0x54>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_MspInit+0x54>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_MspInit+0x54>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_MspInit+0x54>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <HAL_MspInit+0x54>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ea:	4b08      	ldr	r3, [pc, #32]	@ (800260c <HAL_MspInit+0x54>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	210f      	movs	r1, #15
 80025fa:	f06f 0001 	mvn.w	r0, #1
 80025fe:	f000 fcab 	bl	8002f58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_I2C_MspInit+0x84>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d12c      	bne.n	800268c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a17      	ldr	r2, [pc, #92]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800264e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002654:	2312      	movs	r3, #18
 8002656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002658:	2301      	movs	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002660:	2304      	movs	r3, #4
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4619      	mov	r1, r3
 800266a:	480c      	ldr	r0, [pc, #48]	@ (800269c <HAL_I2C_MspInit+0x8c>)
 800266c:	f000 fd30 	bl	80030d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	4a07      	ldr	r2, [pc, #28]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 800267a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800267e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002680:	4b05      	ldr	r3, [pc, #20]	@ (8002698 <HAL_I2C_MspInit+0x88>)
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800268c:	bf00      	nop
 800268e:	3728      	adds	r7, #40	@ 0x28
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40005400 	.word	0x40005400
 8002698:	40023800 	.word	0x40023800
 800269c:	40020400 	.word	0x40020400

080026a0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	@ 0x38
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a31      	ldr	r2, [pc, #196]	@ (8002790 <HAL_I2S_MspInit+0xf0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d15a      	bne.n	8002786 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80026d0:	2301      	movs	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80026d4:	23c0      	movs	r3, #192	@ 0xc0
 80026d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80026d8:	2302      	movs	r3, #2
 80026da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fae3 	bl	8006cac <HAL_RCCEx_PeriphCLKConfig>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80026ec:	f7ff ff5e 	bl	80025ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	4a1f      	ldr	r2, [pc, #124]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6313      	str	r3, [r2, #48]	@ 0x30
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	4a18      	ldr	r2, [pc, #96]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6313      	str	r3, [r2, #48]	@ 0x30
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_I2S_MspInit+0xf4>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002744:	2310      	movs	r3, #16
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002754:	2306      	movs	r3, #6
 8002756:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	480e      	ldr	r0, [pc, #56]	@ (8002798 <HAL_I2S_MspInit+0xf8>)
 8002760:	f000 fcb6 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002764:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002776:	2306      	movs	r3, #6
 8002778:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800277e:	4619      	mov	r1, r3
 8002780:	4806      	ldr	r0, [pc, #24]	@ (800279c <HAL_I2S_MspInit+0xfc>)
 8002782:	f000 fca5 	bl	80030d0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002786:	bf00      	nop
 8002788:	3738      	adds	r7, #56	@ 0x38
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40003c00 	.word	0x40003c00
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000
 800279c:	40020800 	.word	0x40020800

080027a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0314 	add.w	r3, r7, #20
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_SPI_MspInit+0x84>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12b      	bne.n	800281a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	4b18      	ldr	r3, [pc, #96]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d2:	4b15      	ldr	r3, [pc, #84]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4a10      	ldr	r2, [pc, #64]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <HAL_SPI_MspInit+0x88>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80027fa:	23e0      	movs	r3, #224	@ 0xe0
 80027fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800280a:	2305      	movs	r3, #5
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <HAL_SPI_MspInit+0x8c>)
 8002816:	f000 fc5b 	bl	80030d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40013000 	.word	0x40013000
 8002828:	40023800 	.word	0x40023800
 800282c:	40020000 	.word	0x40020000

08002830 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3a      	ldr	r2, [pc, #232]	@ (8002938 <HAL_UART_MspInit+0x108>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d134      	bne.n	80028bc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	4b39      	ldr	r3, [pc, #228]	@ (800293c <HAL_UART_MspInit+0x10c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	4a38      	ldr	r2, [pc, #224]	@ (800293c <HAL_UART_MspInit+0x10c>)
 800285c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002860:	6413      	str	r3, [r2, #64]	@ 0x40
 8002862:	4b36      	ldr	r3, [pc, #216]	@ (800293c <HAL_UART_MspInit+0x10c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	4b32      	ldr	r3, [pc, #200]	@ (800293c <HAL_UART_MspInit+0x10c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a31      	ldr	r2, [pc, #196]	@ (800293c <HAL_UART_MspInit+0x10c>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <HAL_UART_MspInit+0x10c>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800288a:	2303      	movs	r3, #3
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800289a:	2308      	movs	r3, #8
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4826      	ldr	r0, [pc, #152]	@ (8002940 <HAL_UART_MspInit+0x110>)
 80028a6:	f000 fc13 	bl	80030d0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2105      	movs	r1, #5
 80028ae:	2034      	movs	r0, #52	@ 0x34
 80028b0:	f000 fb52 	bl	8002f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80028b4:	2034      	movs	r0, #52	@ 0x34
 80028b6:	f000 fb6b 	bl	8002f90 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ba:	e038      	b.n	800292e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a20      	ldr	r2, [pc, #128]	@ (8002944 <HAL_UART_MspInit+0x114>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d133      	bne.n	800292e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	4b1c      	ldr	r3, [pc, #112]	@ (800293c <HAL_UART_MspInit+0x10c>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a1b      	ldr	r2, [pc, #108]	@ (800293c <HAL_UART_MspInit+0x10c>)
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_UART_MspInit+0x10c>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_UART_MspInit+0x10c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a14      	ldr	r2, [pc, #80]	@ (800293c <HAL_UART_MspInit+0x10c>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_UART_MspInit+0x10c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028fe:	230c      	movs	r3, #12
 8002900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800290e:	2307      	movs	r3, #7
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	4619      	mov	r1, r3
 8002918:	4809      	ldr	r0, [pc, #36]	@ (8002940 <HAL_UART_MspInit+0x110>)
 800291a:	f000 fbd9 	bl	80030d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2105      	movs	r1, #5
 8002922:	2026      	movs	r0, #38	@ 0x26
 8002924:	f000 fb18 	bl	8002f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002928:	2026      	movs	r0, #38	@ 0x26
 800292a:	f000 fb31 	bl	8002f90 <HAL_NVIC_EnableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3730      	adds	r7, #48	@ 0x30
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40004c00 	.word	0x40004c00
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	40004400 	.word	0x40004400

08002948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	@ 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a1c <HAL_InitTick+0xd4>)
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	4a2e      	ldr	r2, [pc, #184]	@ (8002a1c <HAL_InitTick+0xd4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6453      	str	r3, [r2, #68]	@ 0x44
 8002968:	4b2c      	ldr	r3, [pc, #176]	@ (8002a1c <HAL_InitTick+0xd4>)
 800296a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002974:	f107 020c 	add.w	r2, r7, #12
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f004 f962 	bl	8006c48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002984:	f004 f94c 	bl	8006c20 <HAL_RCC_GetPCLK2Freq>
 8002988:	4603      	mov	r3, r0
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_InitTick+0xd8>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9b      	lsrs	r3, r3, #18
 8002998:	3b01      	subs	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800299c:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <HAL_InitTick+0xdc>)
 800299e:	4a22      	ldr	r2, [pc, #136]	@ (8002a28 <HAL_InitTick+0xe0>)
 80029a0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029a2:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80029c2:	4818      	ldr	r0, [pc, #96]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029c4:	f004 fb3d 	bl	8007042 <HAL_TIM_Base_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80029ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11b      	bne.n	8002a0e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80029d6:	4813      	ldr	r0, [pc, #76]	@ (8002a24 <HAL_InitTick+0xdc>)
 80029d8:	f004 fb8c 	bl	80070f4 <HAL_TIM_Base_Start_IT>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80029e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d111      	bne.n	8002a0e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029ea:	2019      	movs	r0, #25
 80029ec:	f000 fad0 	bl	8002f90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	d808      	bhi.n	8002a08 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80029f6:	2200      	movs	r2, #0
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	2019      	movs	r0, #25
 80029fc:	f000 faac 	bl	8002f58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a00:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <HAL_InitTick+0xe4>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e002      	b.n	8002a0e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3730      	adds	r7, #48	@ 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	431bde83 	.word	0x431bde83
 8002a24:	200004bc 	.word	0x200004bc
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	20000230 	.word	0x20000230

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <NMI_Handler+0x4>

08002a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <HardFault_Handler+0x4>

08002a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <MemManage_Handler+0x4>

08002a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <BusFault_Handler+0x4>

08002a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <UsageFault_Handler+0x4>

08002a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8002a72:	2001      	movs	r0, #1
 8002a74:	f000 fd14 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8002a78:	f7fe ff2e 	bl	80018d8 <KEYS_read>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <EXTI0_IRQHandler+0x58>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	463a      	mov	r2, r7
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f009 fdd7 	bl	800c63c <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 8002a8e:	2001      	movs	r0, #1
 8002a90:	f7fe fefa 	bl	8001888 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d007      	beq.n	8002ab0 <EXTI0_IRQHandler+0x48>
 8002aa0:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <EXTI0_IRQHandler+0x5c>)
 8002aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f000 fcf5 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200002e4 	.word	0x200002e4
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ace:	f004 fb81 	bl	80071d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200004bc 	.word	0x200004bc

08002adc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ae0:	4802      	ldr	r0, [pc, #8]	@ (8002aec <USART2_IRQHandler+0x10>)
 8002ae2:	f004 fe49 	bl	8007778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000470 	.word	0x20000470

08002af0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <UART4_IRQHandler+0x10>)
 8002af6:	f004 fe3f 	bl	8007778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000428 	.word	0x20000428

08002b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <OTG_FS_IRQHandler+0x10>)
 8002b0a:	f000 ffcd 	bl	8003aa8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20011100 	.word	0x20011100

08002b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
	return 1;
 8002b1c:	2301      	movs	r3, #1
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <_kill>:

int _kill(int pid, int sig)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b32:	f00e fa99 	bl	8011068 <__errno>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2216      	movs	r2, #22
 8002b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <_exit>:

void _exit (int status)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ffe7 	bl	8002b28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b5a:	bf00      	nop
 8002b5c:	e7fd      	b.n	8002b5a <_exit+0x12>

08002b5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e00a      	b.n	8002b86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b70:	f3af 8000 	nop.w
 8002b74:	4601      	mov	r1, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	60ba      	str	r2, [r7, #8]
 8002b7c:	b2ca      	uxtb	r2, r1
 8002b7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	3301      	adds	r3, #1
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	dbf0      	blt.n	8002b70 <_read+0x12>
	}

return len;
 8002b8e:	687b      	ldr	r3, [r7, #4]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e009      	b.n	8002bbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	dbf1      	blt.n	8002baa <_write+0x12>
	}
	return len;
 8002bc6:	687b      	ldr	r3, [r7, #4]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_close>:

int _close(int file)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	return -1;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bf8:	605a      	str	r2, [r3, #4]
	return 0;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_isatty>:

int _isatty(int file)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c10:	2301      	movs	r3, #1
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
	return 0;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f00e f9fe 	bl	8011068 <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <_sbrk+0x64>)
 8002c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20020000 	.word	0x20020000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	20000504 	.word	0x20000504
 8002ca0:	20011630 	.word	0x20011630

08002ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <SystemInit+0x20>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <SystemInit+0x20>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ccc:	480d      	ldr	r0, [pc, #52]	@ (8002d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cce:	490e      	ldr	r1, [pc, #56]	@ (8002d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	@ (8002d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cd4:	e002      	b.n	8002cdc <LoopCopyDataInit>

08002cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cda:	3304      	adds	r3, #4

08002cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce0:	d3f9      	bcc.n	8002cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8002d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8002d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce8:	e001      	b.n	8002cee <LoopFillZerobss>

08002cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cec:	3204      	adds	r2, #4

08002cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf0:	d3fb      	bcc.n	8002cea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cf2:	f7ff ffd7 	bl	8002ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cf6:	f00e f9bd 	bl	8011074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cfa:	f7ff f8f7 	bl	8001eec <main>
  bx  lr    
 8002cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d08:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8002d0c:	08012b4c 	.word	0x08012b4c
  ldr r2, =_sbss
 8002d10:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8002d14:	2001162c 	.word	0x2001162c

08002d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d18:	e7fe      	b.n	8002d18 <ADC_IRQHandler>
	...

08002d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d20:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0d      	ldr	r2, [pc, #52]	@ (8002d5c <HAL_Init+0x40>)
 8002d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <HAL_Init+0x40>)
 8002d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d38:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <HAL_Init+0x40>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a07      	ldr	r2, [pc, #28]	@ (8002d5c <HAL_Init+0x40>)
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d44:	2003      	movs	r0, #3
 8002d46:	f000 f8fc 	bl	8002f42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff fdfc 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d50:	f7ff fc32 	bl	80025b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000234 	.word	0x20000234
 8002d84:	20000508 	.word	0x20000508

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000508 	.word	0x20000508

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000234 	.word	0x20000234

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	@ (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ff4c 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f50:	bf00      	nop
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6a:	f7ff ff61 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002f6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	6978      	ldr	r0, [r7, #20]
 8002f76:	f7ff ffb1 	bl	8002edc <NVIC_EncodePriority>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff80 	bl	8002e88 <__NVIC_SetPriority>
}
 8002f88:	bf00      	nop
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff54 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fba:	f7ff fee5 	bl	8002d88 <HAL_GetTick>
 8002fbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d008      	beq.n	8002fde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e052      	b.n	8003084 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0216 	bic.w	r2, r2, #22
 8002fec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ffc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d103      	bne.n	800300e <HAL_DMA_Abort+0x62>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0208 	bic.w	r2, r2, #8
 800301c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302e:	e013      	b.n	8003058 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003030:	f7ff feaa 	bl	8002d88 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b05      	cmp	r3, #5
 800303c:	d90c      	bls.n	8003058 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2203      	movs	r2, #3
 8003048:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e015      	b.n	8003084 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e4      	bne.n	8003030 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306a:	223f      	movs	r2, #63	@ 0x3f
 800306c:	409a      	lsls	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d004      	beq.n	80030aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2280      	movs	r2, #128	@ 0x80
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00c      	b.n	80030c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2205      	movs	r2, #5
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	e16b      	b.n	80033c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030ec:	2201      	movs	r2, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	f040 815a 	bne.w	80033be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d005      	beq.n	8003122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	2b02      	cmp	r3, #2
 8003120:	d130      	bne.n	8003184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	2203      	movs	r2, #3
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 0201 	and.w	r2, r3, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b03      	cmp	r3, #3
 800318e:	d017      	beq.n	80031c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d123      	bne.n	8003214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3208      	adds	r2, #8
 80031d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	08da      	lsrs	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3208      	adds	r2, #8
 800320e:	69b9      	ldr	r1, [r7, #24]
 8003210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	2203      	movs	r2, #3
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0203 	and.w	r2, r3, #3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80b4 	beq.w	80033be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	4b60      	ldr	r3, [pc, #384]	@ (80033dc <HAL_GPIO_Init+0x30c>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	4a5f      	ldr	r2, [pc, #380]	@ (80033dc <HAL_GPIO_Init+0x30c>)
 8003260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003264:	6453      	str	r3, [r2, #68]	@ 0x44
 8003266:	4b5d      	ldr	r3, [pc, #372]	@ (80033dc <HAL_GPIO_Init+0x30c>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003272:	4a5b      	ldr	r2, [pc, #364]	@ (80033e0 <HAL_GPIO_Init+0x310>)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	3302      	adds	r3, #2
 800327a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a52      	ldr	r2, [pc, #328]	@ (80033e4 <HAL_GPIO_Init+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d02b      	beq.n	80032f6 <HAL_GPIO_Init+0x226>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a51      	ldr	r2, [pc, #324]	@ (80033e8 <HAL_GPIO_Init+0x318>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d025      	beq.n	80032f2 <HAL_GPIO_Init+0x222>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a50      	ldr	r2, [pc, #320]	@ (80033ec <HAL_GPIO_Init+0x31c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01f      	beq.n	80032ee <HAL_GPIO_Init+0x21e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4f      	ldr	r2, [pc, #316]	@ (80033f0 <HAL_GPIO_Init+0x320>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x21a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4e      	ldr	r2, [pc, #312]	@ (80033f4 <HAL_GPIO_Init+0x324>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x216>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4d      	ldr	r2, [pc, #308]	@ (80033f8 <HAL_GPIO_Init+0x328>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x212>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4c      	ldr	r2, [pc, #304]	@ (80033fc <HAL_GPIO_Init+0x32c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x20e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003400 <HAL_GPIO_Init+0x330>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x20a>
 80032d6:	2307      	movs	r3, #7
 80032d8:	e00e      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032da:	2308      	movs	r3, #8
 80032dc:	e00c      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032de:	2306      	movs	r3, #6
 80032e0:	e00a      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032e2:	2305      	movs	r3, #5
 80032e4:	e008      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032e6:	2304      	movs	r3, #4
 80032e8:	e006      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032ea:	2303      	movs	r3, #3
 80032ec:	e004      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e002      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_GPIO_Init+0x228>
 80032f6:	2300      	movs	r3, #0
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	f002 0203 	and.w	r2, r2, #3
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	4093      	lsls	r3, r2
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003308:	4935      	ldr	r1, [pc, #212]	@ (80033e0 <HAL_GPIO_Init+0x310>)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003316:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <HAL_GPIO_Init+0x334>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800333a:	4a32      	ldr	r2, [pc, #200]	@ (8003404 <HAL_GPIO_Init+0x334>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003340:	4b30      	ldr	r3, [pc, #192]	@ (8003404 <HAL_GPIO_Init+0x334>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003364:	4a27      	ldr	r2, [pc, #156]	@ (8003404 <HAL_GPIO_Init+0x334>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800336a:	4b26      	ldr	r3, [pc, #152]	@ (8003404 <HAL_GPIO_Init+0x334>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338e:	4a1d      	ldr	r2, [pc, #116]	@ (8003404 <HAL_GPIO_Init+0x334>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_GPIO_Init+0x334>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b8:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <HAL_GPIO_Init+0x334>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	f67f ae90 	bls.w	80030ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3724      	adds	r7, #36	@ 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020800 	.word	0x40020800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40021400 	.word	0x40021400
 80033fc:	40021800 	.word	0x40021800
 8003400:	40021c00 	.word	0x40021c00
 8003404:	40013c00 	.word	0x40013c00

08003408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e001      	b.n	800342a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800347c:	887a      	ldrh	r2, [r7, #2]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	041a      	lsls	r2, r3, #16
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43d9      	mvns	r1, r3
 8003488:	887b      	ldrh	r3, [r7, #2]
 800348a:	400b      	ands	r3, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	619a      	str	r2, [r3, #24]
}
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034aa:	4b08      	ldr	r3, [pc, #32]	@ (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b6:	4a05      	ldr	r2, [pc, #20]	@ (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f806 	bl	80034d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013c00 	.word	0x40013c00

080034d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af02      	add	r7, sp, #8
 80034ec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e059      	b.n	80035ac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f00c ff54 	bl	80103c0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2203      	movs	r2, #3
 800351c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003526:	d102      	bne.n	800352e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f005 f901 	bl	800873a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7c1a      	ldrb	r2, [r3, #16]
 8003540:	f88d 2000 	strb.w	r2, [sp]
 8003544:	3304      	adds	r3, #4
 8003546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003548:	f005 f882 	bl	8008650 <USB_CoreInit>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2202      	movs	r2, #2
 8003556:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e026      	b.n	80035ac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f005 f8f9 	bl	800875c <USB_SetCurrentMode>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e017      	b.n	80035ac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7c1a      	ldrb	r2, [r3, #16]
 8003584:	f88d 2000 	strb.w	r2, [sp]
 8003588:	3304      	adds	r3, #4
 800358a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358c:	f005 faa2 	bl	8008ad4 <USB_HostInit>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2202      	movs	r2, #2
 800359a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e004      	b.n	80035ac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b08b      	sub	sp, #44	@ 0x2c
 80035b8:	af04      	add	r7, sp, #16
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4603      	mov	r3, r0
 80035c4:	70fb      	strb	r3, [r7, #3]
 80035c6:	460b      	mov	r3, r1
 80035c8:	70bb      	strb	r3, [r7, #2]
 80035ca:	4613      	mov	r3, r2
 80035cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80035ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80035d0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_HCD_HC_Init+0x2c>
 80035dc:	2302      	movs	r3, #2
 80035de:	e09d      	b.n	800371c <HAL_HCD_HC_Init+0x168>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3319      	adds	r3, #25
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3314      	adds	r3, #20
 800360c:	787a      	ldrb	r2, [r7, #1]
 800360e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3315      	adds	r3, #21
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	4613      	mov	r3, r2
 800362a:	011b      	lsls	r3, r3, #4
 800362c:	1a9b      	subs	r3, r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3326      	adds	r3, #38	@ 0x26
 8003634:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003638:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	78bb      	ldrb	r3, [r7, #2]
 800363e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003642:	b2d8      	uxtb	r0, r3
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3316      	adds	r3, #22
 8003652:	4602      	mov	r2, r0
 8003654:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fbc8 	bl	8003df0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003660:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003664:	2b00      	cmp	r3, #0
 8003666:	da0a      	bge.n	800367e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3317      	adds	r3, #23
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e009      	b.n	8003692 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3317      	adds	r3, #23
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f005 fb80 	bl	8008d9c <USB_GetHostSpeed>
 800369c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800369e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d10b      	bne.n	80036be <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80036a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <HAL_HCD_HC_Init+0x10a>
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80036b8:	d901      	bls.n	80036be <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80036ba:	23bc      	movs	r3, #188	@ 0xbc
 80036bc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3318      	adds	r3, #24
 80036ce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80036d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	b298      	uxth	r0, r3
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3328      	adds	r3, #40	@ 0x28
 80036e8:	4602      	mov	r2, r0
 80036ea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	787c      	ldrb	r4, [r7, #1]
 80036f6:	78ba      	ldrb	r2, [r7, #2]
 80036f8:	78f9      	ldrb	r1, [r7, #3]
 80036fa:	9302      	str	r3, [sp, #8]
 80036fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	4623      	mov	r3, r4
 800370a:	f005 fb6f 	bl	8008dec <USB_HC_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}

08003724 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_HCD_HC_Halt+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e00f      	b.n	8003762 <HAL_HCD_HC_Halt+0x3e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	4611      	mov	r1, r2
 8003752:	4618      	mov	r0, r3
 8003754:	f005 ff01 	bl	800955a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	460b      	mov	r3, r1
 8003780:	70bb      	strb	r3, [r7, #2]
 8003782:	4613      	mov	r3, r2
 8003784:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3317      	adds	r3, #23
 8003796:	78ba      	ldrb	r2, [r7, #2]
 8003798:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3326      	adds	r3, #38	@ 0x26
 80037aa:	787a      	ldrb	r2, [r7, #1]
 80037ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037ae:	7c3b      	ldrb	r3, [r7, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d114      	bne.n	80037de <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	332a      	adds	r3, #42	@ 0x2a
 80037c4:	2203      	movs	r2, #3
 80037c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3319      	adds	r3, #25
 80037d8:	7f3a      	ldrb	r2, [r7, #28]
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e009      	b.n	80037f2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	332a      	adds	r3, #42	@ 0x2a
 80037ee:	2202      	movs	r2, #2
 80037f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80037f2:	787b      	ldrb	r3, [r7, #1]
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	f200 8102 	bhi.w	80039fe <HAL_HCD_HC_SubmitRequest+0x292>
 80037fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <HAL_HCD_HC_SubmitRequest+0x94>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003811 	.word	0x08003811
 8003804:	080039e9 	.word	0x080039e9
 8003808:	080038d5 	.word	0x080038d5
 800380c:	0800395f 	.word	0x0800395f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003810:	7c3b      	ldrb	r3, [r7, #16]
 8003812:	2b01      	cmp	r3, #1
 8003814:	f040 80f5 	bne.w	8003a02 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003818:	78bb      	ldrb	r3, [r7, #2]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d12d      	bne.n	800387a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800381e:	8b3b      	ldrh	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	333d      	adds	r3, #61	@ 0x3d
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4613      	mov	r3, r2
 800383e:	011b      	lsls	r3, r3, #4
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	333d      	adds	r3, #61	@ 0x3d
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	332a      	adds	r3, #42	@ 0x2a
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003862:	e0ce      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	332a      	adds	r3, #42	@ 0x2a
 8003874:	2202      	movs	r2, #2
 8003876:	701a      	strb	r2, [r3, #0]
      break;
 8003878:	e0c3      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	331a      	adds	r3, #26
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	f040 80b8 	bne.w	8003a02 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	333c      	adds	r3, #60	@ 0x3c
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	332a      	adds	r3, #42	@ 0x2a
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
      break;
 80038bc:	e0a1      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	332a      	adds	r3, #42	@ 0x2a
 80038ce:	2202      	movs	r2, #2
 80038d0:	701a      	strb	r2, [r3, #0]
      break;
 80038d2:	e096      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038d4:	78bb      	ldrb	r3, [r7, #2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d120      	bne.n	800391c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	333d      	adds	r3, #61	@ 0x3d
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	332a      	adds	r3, #42	@ 0x2a
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003904:	e07e      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	332a      	adds	r3, #42	@ 0x2a
 8003916:	2202      	movs	r2, #2
 8003918:	701a      	strb	r2, [r3, #0]
      break;
 800391a:	e073      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	333c      	adds	r3, #60	@ 0x3c
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	332a      	adds	r3, #42	@ 0x2a
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
      break;
 8003946:	e05d      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	332a      	adds	r3, #42	@ 0x2a
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]
      break;
 800395c:	e052      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800395e:	78bb      	ldrb	r3, [r7, #2]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d120      	bne.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	333d      	adds	r3, #61	@ 0x3d
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	332a      	adds	r3, #42	@ 0x2a
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800398e:	e039      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	332a      	adds	r3, #42	@ 0x2a
 80039a0:	2202      	movs	r2, #2
 80039a2:	701a      	strb	r2, [r3, #0]
      break;
 80039a4:	e02e      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	333c      	adds	r3, #60	@ 0x3c
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	332a      	adds	r3, #42	@ 0x2a
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
      break;
 80039d0:	e018      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	332a      	adds	r3, #42	@ 0x2a
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
      break;
 80039e6:	e00d      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	332a      	adds	r3, #42	@ 0x2a
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
      break;
 80039fc:	e002      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80039fe:	bf00      	nop
 8003a00:	e000      	b.n	8003a04 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003a02:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	332c      	adds	r3, #44	@ 0x2c
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	8b39      	ldrh	r1, [r7, #24]
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4403      	add	r3, r0
 8003a28:	3334      	adds	r3, #52	@ 0x34
 8003a2a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334c      	adds	r3, #76	@ 0x4c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3338      	adds	r3, #56	@ 0x38
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3315      	adds	r3, #21
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334d      	adds	r3, #77	@ 0x4d
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	78fa      	ldrb	r2, [r7, #3]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	3310      	adds	r3, #16
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	1d19      	adds	r1, r3, #4
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	799b      	ldrb	r3, [r3, #6]
 8003a96:	461a      	mov	r2, r3
 8003a98:	f005 fad4 	bl	8009044 <USB_HC_StartXfer>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop

08003aa8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 ffc2 	bl	8008a48 <USB_GetMode>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	f040 80fb 	bne.w	8003cc2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f004 ff85 	bl	80089e0 <USB_ReadInterrupts>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80f1 	beq.w	8003cc0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f004 ff7c 	bl	80089e0 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003af2:	d104      	bne.n	8003afe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003afc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 ff6c 	bl	80089e0 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b12:	d104      	bne.n	8003b1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 ff5c 	bl	80089e0 <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b32:	d104      	bne.n	8003b3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 ff4c 	bl	80089e0 <USB_ReadInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d103      	bne.n	8003b5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2202      	movs	r2, #2
 8003b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 ff3e 	bl	80089e0 <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b6e:	d120      	bne.n	8003bb2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003b78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d113      	bne.n	8003bb2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	6938      	ldr	r0, [r7, #16]
 8003b8e:	f004 fe31 	bl	80087f4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b92:	6938      	ldr	r0, [r7, #16]
 8003b94:	f004 fe60 	bl	8008858 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7a5b      	ldrb	r3, [r3, #9]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d105      	bne.n	8003bac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f005 f858 	bl	8008c5c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f00c fc85 	bl	80104bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f004 ff12 	bl	80089e0 <USB_ReadInterrupts>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bc6:	d102      	bne.n	8003bce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 fd4d 	bl	8005668 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 ff04 	bl	80089e0 <USB_ReadInterrupts>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d106      	bne.n	8003bf0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f00c fc4e 	bl	8010484 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2208      	movs	r2, #8
 8003bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f004 fef3 	bl	80089e0 <USB_ReadInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c04:	d139      	bne.n	8003c7a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f005 fc94 	bl	8009538 <USB_HC_ReadInterrupt>
 8003c10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e025      	b.n	8003c64 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	fa22 f303 	lsr.w	r3, r2, r3
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d018      	beq.n	8003c5e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c42:	d106      	bne.n	8003c52 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f905 	bl	8003e5a <HCD_HC_IN_IRQHandler>
 8003c50:	e005      	b.n	8003c5e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 ff67 	bl	8004b2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	795b      	ldrb	r3, [r3, #5]
 8003c68:	461a      	mov	r2, r3
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d3d3      	bcc.n	8003c18 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 feae 	bl	80089e0 <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f003 0310 	and.w	r3, r3, #16
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d101      	bne.n	8003c92 <HAL_HCD_IRQHandler+0x1ea>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <HAL_HCD_IRQHandler+0x1ec>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d014      	beq.n	8003cc2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0210 	bic.w	r2, r2, #16
 8003ca6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f001 fbfe 	bl	80054aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699a      	ldr	r2, [r3, #24]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0210 	orr.w	r2, r2, #16
 8003cbc:	619a      	str	r2, [r3, #24]
 8003cbe:	e000      	b.n	8003cc2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003cc0:	bf00      	nop
    }
  }
}
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_HCD_Start+0x16>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e013      	b.n	8003d06 <HAL_HCD_Start+0x3e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f005 f81c 	bl	8008d2a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f004 fd0e 	bl	8008718 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_HCD_Stop+0x16>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e00d      	b.n	8003d40 <HAL_HCD_Stop+0x32>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 fd6f 	bl	8009814 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f004 ffbe 	bl	8008cd6 <USB_ResetPort>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	334c      	adds	r3, #76	@ 0x4c
 8003d80:	781b      	ldrb	r3, [r3, #0]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3338      	adds	r3, #56	@ 0x38
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f005 f800 	bl	8008dca <USB_GetCurrentFrame>
 8003dca:	4603      	mov	r3, r0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 ffdb 	bl	8008d9c <USB_GetHostSpeed>
 8003de6:	4603      	mov	r3, r0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	331a      	adds	r3, #26
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	331b      	adds	r3, #27
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3325      	adds	r3, #37	@ 0x25
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3324      	adds	r3, #36	@ 0x24
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
 8003e62:	460b      	mov	r3, r1
 8003e64:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	78fa      	ldrb	r2, [r7, #3]
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f004 fdc4 	bl	8008a06 <USB_ReadChInterrupts>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d11a      	bne.n	8003ebe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	2304      	movs	r3, #4
 8003e98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	334d      	adds	r3, #77	@ 0x4d
 8003eaa:	2207      	movs	r2, #7
 8003eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f005 fb4f 	bl	800955a <USB_HC_Halt>
 8003ebc:	e09e      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f004 fd9d 	bl	8008a06 <USB_ReadChInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed6:	d11b      	bne.n	8003f10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003eea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	334d      	adds	r3, #77	@ 0x4d
 8003efc:	2208      	movs	r2, #8
 8003efe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f005 fb26 	bl	800955a <USB_HC_Halt>
 8003f0e:	e075      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	4611      	mov	r1, r2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f004 fd74 	bl	8008a06 <USB_ReadChInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d11a      	bne.n	8003f5e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2308      	movs	r3, #8
 8003f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	334d      	adds	r3, #77	@ 0x4d
 8003f4a:	2206      	movs	r2, #6
 8003f4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f005 faff 	bl	800955a <USB_HC_Halt>
 8003f5c:	e04e      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f004 fd4d 	bl	8008a06 <USB_ReadChInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f76:	d11b      	bne.n	8003fb0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f84:	461a      	mov	r2, r3
 8003f86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334d      	adds	r3, #77	@ 0x4d
 8003f9c:	2209      	movs	r2, #9
 8003f9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	78fa      	ldrb	r2, [r7, #3]
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f005 fad6 	bl	800955a <USB_HC_Halt>
 8003fae:	e025      	b.n	8003ffc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f004 fd24 	bl	8008a06 <USB_ReadChInterrupts>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fc4:	2b80      	cmp	r3, #128	@ 0x80
 8003fc6:	d119      	bne.n	8003ffc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	334d      	adds	r3, #77	@ 0x4d
 8003fea:	2207      	movs	r2, #7
 8003fec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f005 faaf 	bl	800955a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fcfe 	bl	8008a06 <USB_ReadChInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004014:	d112      	bne.n	800403c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f005 fa9b 	bl	800955a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4413      	add	r3, r2
 800402c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004030:	461a      	mov	r2, r3
 8004032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	f000 bd75 	b.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	78fa      	ldrb	r2, [r7, #3]
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f004 fcde 	bl	8008a06 <USB_ReadChInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 8128 	bne.w	80042a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004062:	461a      	mov	r2, r3
 8004064:	2320      	movs	r3, #32
 8004066:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	331b      	adds	r3, #27
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d119      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	331b      	adds	r3, #27
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	799b      	ldrb	r3, [r3, #6]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01b      	beq.n	80040f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80040ba:	78fa      	ldrb	r2, [r7, #3]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	3330      	adds	r3, #48	@ 0x30
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	1ac9      	subs	r1, r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4403      	add	r3, r0
 80040ee:	3338      	adds	r3, #56	@ 0x38
 80040f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334d      	adds	r3, #77	@ 0x4d
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3344      	adds	r3, #68	@ 0x44
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	2301      	movs	r3, #1
 800412a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3326      	adds	r3, #38	@ 0x26
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3326      	adds	r3, #38	@ 0x26
 8004152:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004154:	2b02      	cmp	r3, #2
 8004156:	d110      	bne.n	800417a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	4611      	mov	r1, r2
 8004160:	4618      	mov	r0, r3
 8004162:	f005 f9fa 	bl	800955a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004166:	78fb      	ldrb	r3, [r7, #3]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004172:	461a      	mov	r2, r3
 8004174:	2310      	movs	r3, #16
 8004176:	6093      	str	r3, [r2, #8]
 8004178:	e03d      	b.n	80041f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	3326      	adds	r3, #38	@ 0x26
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d00a      	beq.n	80041a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	3326      	adds	r3, #38	@ 0x26
 80041a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d127      	bne.n	80041f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80041a6:	78fb      	ldrb	r3, [r7, #3]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80041c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	334c      	adds	r3, #76	@ 0x4c
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80041da:	78fa      	ldrb	r2, [r7, #3]
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	334c      	adds	r3, #76	@ 0x4c
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	4619      	mov	r1, r3
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f00c f971 	bl	80104d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	799b      	ldrb	r3, [r3, #6]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d13b      	bne.n	8004276 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	3338      	adds	r3, #56	@ 0x38
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4403      	add	r3, r0
 800421e:	3328      	adds	r3, #40	@ 0x28
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	440b      	add	r3, r1
 8004224:	1e59      	subs	r1, r3, #1
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4403      	add	r3, r0
 8004234:	3328      	adds	r3, #40	@ 0x28
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	fbb1 f3f3 	udiv	r3, r1, r3
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8470 	beq.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	333c      	adds	r3, #60	@ 0x3c
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2d8      	uxtb	r0, r3
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	333c      	adds	r3, #60	@ 0x3c
 800426e:	4602      	mov	r2, r0
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	f000 bc58 	b.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	333c      	adds	r3, #60	@ 0x3c
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	f083 0301 	eor.w	r3, r3, #1
 800428e:	b2d8      	uxtb	r0, r3
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	1a9b      	subs	r3, r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	333c      	adds	r3, #60	@ 0x3c
 800429e:	4602      	mov	r2, r0
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	f000 bc40 	b.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 fba9 	bl	8008a06 <USB_ReadChInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d131      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ca:	461a      	mov	r2, r3
 80042cc:	2320      	movs	r3, #32
 80042ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	331a      	adds	r3, #26
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 841f 	bne.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	331b      	adds	r3, #27
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	334d      	adds	r3, #77	@ 0x4d
 800430c:	2203      	movs	r2, #3
 800430e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f005 f91e 	bl	800955a <USB_HC_Halt>
 800431e:	f000 bc02 	b.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f004 fb6b 	bl	8008a06 <USB_ReadChInterrupts>
 8004330:	4603      	mov	r3, r0
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b02      	cmp	r3, #2
 8004338:	f040 8305 	bne.w	8004946 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004348:	461a      	mov	r2, r3
 800434a:	2302      	movs	r3, #2
 800434c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334d      	adds	r3, #77	@ 0x4d
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d114      	bne.n	800438e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334d      	adds	r3, #77	@ 0x4d
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	334c      	adds	r3, #76	@ 0x4c
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e2cc      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	334d      	adds	r3, #77	@ 0x4d
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b06      	cmp	r3, #6
 80043a2:	d114      	bne.n	80043ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	334d      	adds	r3, #77	@ 0x4d
 80043b4:	2202      	movs	r2, #2
 80043b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	334c      	adds	r3, #76	@ 0x4c
 80043c8:	2205      	movs	r2, #5
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	e2ac      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	4613      	mov	r3, r2
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	1a9b      	subs	r3, r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	334d      	adds	r3, #77	@ 0x4d
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b07      	cmp	r3, #7
 80043e2:	d00b      	beq.n	80043fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	6879      	ldr	r1, [r7, #4]
 80043e8:	4613      	mov	r3, r2
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	334d      	adds	r3, #77	@ 0x4d
 80043f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	f040 80a6 	bne.w	8004548 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	334d      	adds	r3, #77	@ 0x4d
 800440c:	2202      	movs	r2, #2
 800440e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3344      	adds	r3, #68	@ 0x44
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1c59      	adds	r1, r3, #1
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4403      	add	r3, r0
 8004430:	3344      	adds	r3, #68	@ 0x44
 8004432:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3344      	adds	r3, #68	@ 0x44
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d943      	bls.n	80044d2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	3344      	adds	r3, #68	@ 0x44
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	331a      	adds	r3, #26
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d123      	bne.n	80044bc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	331b      	adds	r3, #27
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	331c      	adds	r3, #28
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334c      	adds	r3, #76	@ 0x4c
 80044cc:	2204      	movs	r2, #4
 80044ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044d0:	e229      	b.n	8004926 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	334c      	adds	r3, #76	@ 0x4c
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3326      	adds	r3, #38	@ 0x26
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3326      	adds	r3, #38	@ 0x26
 800450c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800450e:	2b02      	cmp	r3, #2
 8004510:	f040 8209 	bne.w	8004926 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4413      	add	r3, r2
 800451c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800452a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004532:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004540:	461a      	mov	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004546:	e1ee      	b.n	8004926 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334d      	adds	r3, #77	@ 0x4d
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b05      	cmp	r3, #5
 800455c:	f040 80c8 	bne.w	80046f0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	334d      	adds	r3, #77	@ 0x4d
 8004570:	2202      	movs	r2, #2
 8004572:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	331b      	adds	r3, #27
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	f040 81ce 	bne.w	8004928 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3326      	adds	r3, #38	@ 0x26
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d16b      	bne.n	800467a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	3348      	adds	r3, #72	@ 0x48
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	1c59      	adds	r1, r3, #1
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4403      	add	r3, r0
 80045c2:	3348      	adds	r3, #72	@ 0x48
 80045c4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3348      	adds	r3, #72	@ 0x48
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d943      	bls.n	8004664 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	3348      	adds	r3, #72	@ 0x48
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	331b      	adds	r3, #27
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004604:	78fa      	ldrb	r2, [r7, #3]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	1a9b      	subs	r3, r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	3344      	adds	r3, #68	@ 0x44
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d809      	bhi.n	800462e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	331c      	adds	r3, #28
 800462a:	2201      	movs	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	015a      	lsls	r2, r3, #5
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4413      	add	r3, r2
 8004636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	0151      	lsls	r1, r2, #5
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	440a      	add	r2, r1
 8004644:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	334c      	adds	r3, #76	@ 0x4c
 800465e:	2204      	movs	r2, #4
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	e014      	b.n	800468e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	334c      	adds	r3, #76	@ 0x4c
 8004674:	2202      	movs	r2, #2
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e009      	b.n	800468e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	334c      	adds	r3, #76	@ 0x4c
 800468a:	2202      	movs	r2, #2
 800468c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	3326      	adds	r3, #38	@ 0x26
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3326      	adds	r3, #38	@ 0x26
 80046b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	f040 8136 	bne.w	8004928 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e8:	461a      	mov	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e11b      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334d      	adds	r3, #77	@ 0x4d
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b03      	cmp	r3, #3
 8004704:	f040 8081 	bne.w	800480a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	334d      	adds	r3, #77	@ 0x4d
 8004718:	2202      	movs	r2, #2
 800471a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	331b      	adds	r3, #27
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 80fa 	bne.w	8004928 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	334c      	adds	r3, #76	@ 0x4c
 8004744:	2202      	movs	r2, #2
 8004746:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	440a      	add	r2, r1
 800475e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004766:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	440a      	add	r2, r1
 800477e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004786:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	0151      	lsls	r1, r2, #5
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	440a      	add	r2, r1
 800479e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047a2:	f023 0320 	bic.w	r3, r3, #32
 80047a6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3326      	adds	r3, #38	@ 0x26
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047be:	78fa      	ldrb	r2, [r7, #3]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	3326      	adds	r3, #38	@ 0x26
 80047ce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	f040 80a9 	bne.w	8004928 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e08e      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	334d      	adds	r3, #77	@ 0x4d
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d143      	bne.n	80048a8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	334d      	adds	r3, #77	@ 0x4d
 8004830:	2202      	movs	r2, #2
 8004832:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004834:	78fa      	ldrb	r2, [r7, #3]
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	334c      	adds	r3, #76	@ 0x4c
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3326      	adds	r3, #38	@ 0x26
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	3326      	adds	r3, #38	@ 0x26
 800486e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004870:	2b02      	cmp	r3, #2
 8004872:	d159      	bne.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4413      	add	r3, r2
 800487c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800488a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004892:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4413      	add	r3, r2
 800489c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a0:	461a      	mov	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e03f      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	334d      	adds	r3, #77	@ 0x4d
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d126      	bne.n	800490c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	334d      	adds	r3, #77	@ 0x4d
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3344      	adds	r3, #68	@ 0x44
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4403      	add	r3, r0
 80048f2:	3344      	adds	r3, #68	@ 0x44
 80048f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	334c      	adds	r3, #76	@ 0x4c
 8004906:	2204      	movs	r2, #4
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e00d      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	4613      	mov	r3, r2
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	334d      	adds	r3, #77	@ 0x4d
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b02      	cmp	r3, #2
 8004920:	f000 8100 	beq.w	8004b24 <HCD_HC_IN_IRQHandler+0xcca>
 8004924:	e000      	b.n	8004928 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004926:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	334c      	adds	r3, #76	@ 0x4c
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f00b fdca 	bl	80104d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004944:	e0ef      	b.n	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f004 f859 	bl	8008a06 <USB_ReadChInterrupts>
 8004954:	4603      	mov	r3, r0
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d12f      	bne.n	80049be <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4413      	add	r3, r2
 8004966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800496a:	461a      	mov	r2, r3
 800496c:	2340      	movs	r3, #64	@ 0x40
 800496e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	334d      	adds	r3, #77	@ 0x4d
 8004980:	2205      	movs	r2, #5
 8004982:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	331a      	adds	r3, #26
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d109      	bne.n	80049ae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3344      	adds	r3, #68	@ 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 fdcf 	bl	800955a <USB_HC_Halt>
 80049bc:	e0b3      	b.n	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f004 f81d 	bl	8008a06 <USB_ReadChInterrupts>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	f040 80a7 	bne.w	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	3326      	adds	r3, #38	@ 0x26
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d11b      	bne.n	8004a26 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049ee:	78fa      	ldrb	r2, [r7, #3]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	3344      	adds	r3, #68	@ 0x44
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	334d      	adds	r3, #77	@ 0x4d
 8004a12:	2204      	movs	r2, #4
 8004a14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f004 fd9b 	bl	800955a <USB_HC_Halt>
 8004a24:	e03f      	b.n	8004aa6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3326      	adds	r3, #38	@ 0x26
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a3c:	78fa      	ldrb	r2, [r7, #3]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	1a9b      	subs	r3, r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3326      	adds	r3, #38	@ 0x26
 8004a4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d129      	bne.n	8004aa6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004a52:	78fa      	ldrb	r2, [r7, #3]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3344      	adds	r3, #68	@ 0x44
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	799b      	ldrb	r3, [r3, #6]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HCD_HC_IN_IRQHandler+0xc2a>
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	331b      	adds	r3, #27
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d110      	bne.n	8004aa6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004a84:	78fa      	ldrb	r2, [r7, #3]
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	1a9b      	subs	r3, r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	334d      	adds	r3, #77	@ 0x4d
 8004a94:	2204      	movs	r2, #4
 8004a96:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f004 fd5a 	bl	800955a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	1a9b      	subs	r3, r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	331b      	adds	r3, #27
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d129      	bne.n	8004b10 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	331b      	adds	r3, #27
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b0a:	f043 0320 	orr.w	r3, r3, #32
 8004b0e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004b10:	78fb      	ldrb	r3, [r7, #3]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2310      	movs	r3, #16
 8004b20:	6093      	str	r3, [r2, #8]
 8004b22:	e000      	b.n	8004b26 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004b24:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f003 ff5b 	bl	8008a06 <USB_ReadChInterrupts>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f003 0304 	and.w	r3, r3, #4
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d11b      	bne.n	8004b92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b66:	461a      	mov	r2, r3
 8004b68:	2304      	movs	r3, #4
 8004b6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b6c:	78fa      	ldrb	r2, [r7, #3]
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	4613      	mov	r3, r2
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	334d      	adds	r3, #77	@ 0x4d
 8004b7c:	2207      	movs	r2, #7
 8004b7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f004 fce6 	bl	800955a <USB_HC_Halt>
 8004b8e:	f000 bc89 	b.w	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	4611      	mov	r1, r2
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 ff33 	bl	8008a06 <USB_ReadChInterrupts>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	f040 8082 	bne.w	8004cb0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2320      	movs	r3, #32
 8004bbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3319      	adds	r3, #25
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d124      	bne.n	8004c1e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3319      	adds	r3, #25
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	334c      	adds	r3, #76	@ 0x4c
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	334d      	adds	r3, #77	@ 0x4d
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 fc9e 	bl	800955a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	331a      	adds	r3, #26
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	f040 8437 	bne.w	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	331b      	adds	r3, #27
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 842b 	bne.w	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3326      	adds	r3, #38	@ 0x26
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d009      	beq.n	8004c78 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	331b      	adds	r3, #27
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	334d      	adds	r3, #77	@ 0x4d
 8004c88:	2203      	movs	r2, #3
 8004c8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f004 fc60 	bl	800955a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3344      	adds	r3, #68	@ 0x44
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	e3f9      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f003 fea4 	bl	8008a06 <USB_ReadChInterrupts>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cc8:	d111      	bne.n	8004cee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cdc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	78fa      	ldrb	r2, [r7, #3]
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 fc37 	bl	800955a <USB_HC_Halt>
 8004cec:	e3da      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	78fa      	ldrb	r2, [r7, #3]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f003 fe85 	bl	8008a06 <USB_ReadChInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d168      	bne.n	8004dd8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	3344      	adds	r3, #68	@ 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f003 fe6f 	bl	8008a06 <USB_ReadChInterrupts>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2e:	2b40      	cmp	r3, #64	@ 0x40
 8004d30:	d112      	bne.n	8004d58 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3319      	adds	r3, #25
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d52:	461a      	mov	r2, r3
 8004d54:	2340      	movs	r3, #64	@ 0x40
 8004d56:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	331b      	adds	r3, #27
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d019      	beq.n	8004da2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d6e:	78fa      	ldrb	r2, [r7, #3]
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	1a9b      	subs	r3, r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	331b      	adds	r3, #27
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004da2:	78fb      	ldrb	r3, [r7, #3]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dae:	461a      	mov	r2, r3
 8004db0:	2301      	movs	r3, #1
 8004db2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	334d      	adds	r3, #77	@ 0x4d
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	78fa      	ldrb	r2, [r7, #3]
 8004dce:	4611      	mov	r1, r2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f004 fbc2 	bl	800955a <USB_HC_Halt>
 8004dd6:	e365      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	4611      	mov	r1, r2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f003 fe10 	bl	8008a06 <USB_ReadChInterrupts>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d139      	bne.n	8004e64 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	334d      	adds	r3, #77	@ 0x4d
 8004e00:	2205      	movs	r2, #5
 8004e02:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	331a      	adds	r3, #26
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3319      	adds	r3, #25
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	3344      	adds	r3, #68	@ 0x44
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f004 fb85 	bl	800955a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2340      	movs	r3, #64	@ 0x40
 8004e60:	6093      	str	r3, [r2, #8]
 8004e62:	e31f      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f003 fdca 	bl	8008a06 <USB_ReadChInterrupts>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d11a      	bne.n	8004eb2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2308      	movs	r3, #8
 8004e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	334d      	adds	r3, #77	@ 0x4d
 8004e9e:	2206      	movs	r2, #6
 8004ea0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f004 fb55 	bl	800955a <USB_HC_Halt>
 8004eb0:	e2f8      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	78fa      	ldrb	r2, [r7, #3]
 8004eb8:	4611      	mov	r1, r2
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f003 fda3 	bl	8008a06 <USB_ReadChInterrupts>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b10      	cmp	r3, #16
 8004ec8:	d144      	bne.n	8004f54 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3344      	adds	r3, #68	@ 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	334d      	adds	r3, #77	@ 0x4d
 8004eee:	2204      	movs	r2, #4
 8004ef0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3319      	adds	r3, #25
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d114      	bne.n	8004f32 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3318      	adds	r3, #24
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3319      	adds	r3, #25
 8004f2e:	2201      	movs	r2, #1
 8004f30:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	78fa      	ldrb	r2, [r7, #3]
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fb0d 	bl	800955a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	2310      	movs	r3, #16
 8004f50:	6093      	str	r3, [r2, #8]
 8004f52:	e2a7      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f003 fd52 	bl	8008a06 <USB_ReadChInterrupts>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	f040 8083 	bne.w	8005074 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	799b      	ldrb	r3, [r3, #6]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d111      	bne.n	8004f9a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004f76:	78fa      	ldrb	r2, [r7, #3]
 8004f78:	6879      	ldr	r1, [r7, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	1a9b      	subs	r3, r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	334d      	adds	r3, #77	@ 0x4d
 8004f86:	2207      	movs	r2, #7
 8004f88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f004 fae1 	bl	800955a <USB_HC_Halt>
 8004f98:	e062      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3344      	adds	r3, #68	@ 0x44
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	1c59      	adds	r1, r3, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4403      	add	r3, r0
 8004fba:	3344      	adds	r3, #68	@ 0x44
 8004fbc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3344      	adds	r3, #68	@ 0x44
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d922      	bls.n	800501a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	1a9b      	subs	r3, r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3344      	adds	r3, #68	@ 0x44
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	6879      	ldr	r1, [r7, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	334c      	adds	r3, #76	@ 0x4c
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	334c      	adds	r3, #76	@ 0x4c
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f00b fa60 	bl	80104d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005018:	e022      	b.n	8005060 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	334c      	adds	r3, #76	@ 0x4c
 800502a:	2202      	movs	r2, #2
 800502c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005044:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800504c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506c:	461a      	mov	r2, r3
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	6093      	str	r3, [r2, #8]
 8005072:	e217      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f003 fcc2 	bl	8008a06 <USB_ReadChInterrupts>
 8005082:	4603      	mov	r3, r0
 8005084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508c:	d11b      	bne.n	80050c6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800508e:	78fa      	ldrb	r2, [r7, #3]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	334d      	adds	r3, #77	@ 0x4d
 800509e:	2209      	movs	r2, #9
 80050a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f004 fa55 	bl	800955a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050bc:	461a      	mov	r2, r3
 80050be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050c2:	6093      	str	r3, [r2, #8]
 80050c4:	e1ee      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f003 fc99 	bl	8008a06 <USB_ReadChInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b02      	cmp	r3, #2
 80050dc:	f040 81df 	bne.w	800549e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050ec:	461a      	mov	r2, r3
 80050ee:	2302      	movs	r3, #2
 80050f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	334d      	adds	r3, #77	@ 0x4d
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	f040 8093 	bne.w	8005230 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800510a:	78fa      	ldrb	r2, [r7, #3]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	334d      	adds	r3, #77	@ 0x4d
 800511a:	2202      	movs	r2, #2
 800511c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	334c      	adds	r3, #76	@ 0x4c
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3326      	adds	r3, #38	@ 0x26
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d00b      	beq.n	8005160 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3326      	adds	r3, #38	@ 0x26
 8005158:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800515a:	2b03      	cmp	r3, #3
 800515c:	f040 8190 	bne.w	8005480 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	799b      	ldrb	r3, [r3, #6]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d115      	bne.n	8005194 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	333d      	adds	r3, #61	@ 0x3d
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	f083 0301 	eor.w	r3, r3, #1
 8005180:	b2d8      	uxtb	r0, r3
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	333d      	adds	r3, #61	@ 0x3d
 8005190:	4602      	mov	r2, r0
 8005192:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	799b      	ldrb	r3, [r3, #6]
 8005198:	2b01      	cmp	r3, #1
 800519a:	f040 8171 	bne.w	8005480 <HCD_HC_OUT_IRQHandler+0x954>
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3334      	adds	r3, #52	@ 0x34
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 8165 	beq.w	8005480 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	3334      	adds	r3, #52	@ 0x34
 80051c6:	6819      	ldr	r1, [r3, #0]
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4403      	add	r3, r0
 80051d6:	3328      	adds	r3, #40	@ 0x28
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	440b      	add	r3, r1
 80051dc:	1e59      	subs	r1, r3, #1
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4403      	add	r3, r0
 80051ec:	3328      	adds	r3, #40	@ 0x28
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 813f 	beq.w	8005480 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	333d      	adds	r3, #61	@ 0x3d
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	f083 0301 	eor.w	r3, r3, #1
 800521a:	b2d8      	uxtb	r0, r3
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	333d      	adds	r3, #61	@ 0x3d
 800522a:	4602      	mov	r2, r0
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e127      	b.n	8005480 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	334d      	adds	r3, #77	@ 0x4d
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d120      	bne.n	8005288 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	334d      	adds	r3, #77	@ 0x4d
 8005256:	2202      	movs	r2, #2
 8005258:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	331b      	adds	r3, #27
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b01      	cmp	r3, #1
 800526e:	f040 8107 	bne.w	8005480 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	334c      	adds	r3, #76	@ 0x4c
 8005282:	2202      	movs	r2, #2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e0fb      	b.n	8005480 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	334d      	adds	r3, #77	@ 0x4d
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d13a      	bne.n	8005314 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	334d      	adds	r3, #77	@ 0x4d
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	334c      	adds	r3, #76	@ 0x4c
 80052c2:	2202      	movs	r2, #2
 80052c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80052c6:	78fa      	ldrb	r2, [r7, #3]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	331b      	adds	r3, #27
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 80d1 	bne.w	8005480 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	331b      	adds	r3, #27
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800530c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005310:	6053      	str	r3, [r2, #4]
 8005312:	e0b5      	b.n	8005480 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	440b      	add	r3, r1
 8005322:	334d      	adds	r3, #77	@ 0x4d
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d114      	bne.n	8005354 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800532a:	78fa      	ldrb	r2, [r7, #3]
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	334d      	adds	r3, #77	@ 0x4d
 800533a:	2202      	movs	r2, #2
 800533c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800533e:	78fa      	ldrb	r2, [r7, #3]
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	334c      	adds	r3, #76	@ 0x4c
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e095      	b.n	8005480 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	4613      	mov	r3, r2
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	334d      	adds	r3, #77	@ 0x4d
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b06      	cmp	r3, #6
 8005368:	d114      	bne.n	8005394 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	334d      	adds	r3, #77	@ 0x4d
 800537a:	2202      	movs	r2, #2
 800537c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	334c      	adds	r3, #76	@ 0x4c
 800538e:	2205      	movs	r2, #5
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e075      	b.n	8005480 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005394:	78fa      	ldrb	r2, [r7, #3]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	334d      	adds	r3, #77	@ 0x4d
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b07      	cmp	r3, #7
 80053a8:	d00a      	beq.n	80053c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	334d      	adds	r3, #77	@ 0x4d
 80053ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80053bc:	2b09      	cmp	r3, #9
 80053be:	d170      	bne.n	80054a2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	334d      	adds	r3, #77	@ 0x4d
 80053d0:	2202      	movs	r2, #2
 80053d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	3344      	adds	r3, #68	@ 0x44
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	1c59      	adds	r1, r3, #1
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	011b      	lsls	r3, r3, #4
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4403      	add	r3, r0
 80053f4:	3344      	adds	r3, #68	@ 0x44
 80053f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	3344      	adds	r3, #68	@ 0x44
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d914      	bls.n	8005438 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3344      	adds	r3, #68	@ 0x44
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	334c      	adds	r3, #76	@ 0x4c
 8005432:	2204      	movs	r2, #4
 8005434:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005436:	e022      	b.n	800547e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	334c      	adds	r3, #76	@ 0x4c
 8005448:	2202      	movs	r2, #2
 800544a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005462:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800546a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005478:	461a      	mov	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800547e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	334c      	adds	r3, #76	@ 0x4c
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f00b f81e 	bl	80104d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800549c:	e002      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80054a2:	bf00      	nop
  }
}
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b08a      	sub	sp, #40	@ 0x28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	0c5b      	lsrs	r3, r3, #17
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d004      	beq.n	80054f0 <HCD_RXQLVL_IRQHandler+0x46>
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b05      	cmp	r3, #5
 80054ea:	f000 80b6 	beq.w	800565a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80054ee:	e0b7      	b.n	8005660 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80b3 	beq.w	800565e <HCD_RXQLVL_IRQHandler+0x1b4>
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	332c      	adds	r3, #44	@ 0x2c
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80a7 	beq.w	800565e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	3338      	adds	r3, #56	@ 0x38
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	18d1      	adds	r1, r2, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4403      	add	r3, r0
 8005534:	3334      	adds	r3, #52	@ 0x34
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4299      	cmp	r1, r3
 800553a:	f200 8083 	bhi.w	8005644 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4613      	mov	r3, r2
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	332c      	adds	r3, #44	@ 0x2c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	b292      	uxth	r2, r2
 8005558:	4619      	mov	r1, r3
 800555a:	f003 f9e9 	bl	8008930 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	440b      	add	r3, r1
 800556c:	332c      	adds	r3, #44	@ 0x2c
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	18d1      	adds	r1, r2, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4613      	mov	r3, r2
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4403      	add	r3, r0
 8005582:	332c      	adds	r3, #44	@ 0x2c
 8005584:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	3338      	adds	r3, #56	@ 0x38
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	18d1      	adds	r1, r2, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4613      	mov	r3, r2
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4403      	add	r3, r0
 80055aa:	3338      	adds	r3, #56	@ 0x38
 80055ac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	0cdb      	lsrs	r3, r3, #19
 80055be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	3328      	adds	r3, #40	@ 0x28
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4293      	cmp	r3, r2
 80055dc:	d13f      	bne.n	800565e <HCD_RXQLVL_IRQHandler+0x1b4>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d03c      	beq.n	800565e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005602:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005610:	461a      	mov	r2, r3
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	333c      	adds	r3, #60	@ 0x3c
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2d8      	uxtb	r0, r3
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4613      	mov	r3, r2
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	1a9b      	subs	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	333c      	adds	r3, #60	@ 0x3c
 800563e:	4602      	mov	r2, r0
 8005640:	701a      	strb	r2, [r3, #0]
      break;
 8005642:	e00c      	b.n	800565e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334c      	adds	r3, #76	@ 0x4c
 8005654:	2204      	movs	r2, #4
 8005656:	701a      	strb	r2, [r3, #0]
      break;
 8005658:	e001      	b.n	800565e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800565e:	bf00      	nop
  }
}
 8005660:	bf00      	nop
 8005662:	3728      	adds	r7, #40	@ 0x28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005694:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b02      	cmp	r3, #2
 800569e:	d10b      	bne.n	80056b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d102      	bne.n	80056b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f00a fef8 	bl	80104a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f043 0302 	orr.w	r3, r3, #2
 80056b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b08      	cmp	r3, #8
 80056c0:	d132      	bne.n	8005728 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f043 0308 	orr.w	r3, r3, #8
 80056c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d126      	bne.n	8005722 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	7a5b      	ldrb	r3, [r3, #9]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d113      	bne.n	8005704 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80056e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056e6:	d106      	bne.n	80056f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2102      	movs	r1, #2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f003 fab4 	bl	8008c5c <USB_InitFSLSPClkSel>
 80056f4:	e011      	b.n	800571a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f003 faad 	bl	8008c5c <USB_InitFSLSPClkSel>
 8005702:	e00a      	b.n	800571a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	79db      	ldrb	r3, [r3, #7]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d106      	bne.n	800571a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005712:	461a      	mov	r2, r3
 8005714:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005718:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f00a feee 	bl	80104fc <HAL_HCD_PortEnabled_Callback>
 8005720:	e002      	b.n	8005728 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f00a fef8 	bl	8010518 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d103      	bne.n	800573a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f043 0320 	orr.w	r3, r3, #32
 8005738:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005740:	461a      	mov	r2, r3
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6013      	str	r3, [r2, #0]
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e12b      	b.n	80059ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc ff4a 	bl	8002610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2224      	movs	r2, #36	@ 0x24
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0201 	bic.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80057b4:	f001 fa20 	bl	8006bf8 <HAL_RCC_GetPCLK1Freq>
 80057b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	4a81      	ldr	r2, [pc, #516]	@ (80059c4 <HAL_I2C_Init+0x274>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d807      	bhi.n	80057d4 <HAL_I2C_Init+0x84>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a80      	ldr	r2, [pc, #512]	@ (80059c8 <HAL_I2C_Init+0x278>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	bf94      	ite	ls
 80057cc:	2301      	movls	r3, #1
 80057ce:	2300      	movhi	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e006      	b.n	80057e2 <HAL_I2C_Init+0x92>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4a7d      	ldr	r2, [pc, #500]	@ (80059cc <HAL_I2C_Init+0x27c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf94      	ite	ls
 80057dc:	2301      	movls	r3, #1
 80057de:	2300      	movhi	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e0e7      	b.n	80059ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a78      	ldr	r2, [pc, #480]	@ (80059d0 <HAL_I2C_Init+0x280>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0c9b      	lsrs	r3, r3, #18
 80057f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a6a      	ldr	r2, [pc, #424]	@ (80059c4 <HAL_I2C_Init+0x274>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d802      	bhi.n	8005824 <HAL_I2C_Init+0xd4>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	3301      	adds	r3, #1
 8005822:	e009      	b.n	8005838 <HAL_I2C_Init+0xe8>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	4a69      	ldr	r2, [pc, #420]	@ (80059d4 <HAL_I2C_Init+0x284>)
 8005830:	fba2 2303 	umull	r2, r3, r2, r3
 8005834:	099b      	lsrs	r3, r3, #6
 8005836:	3301      	adds	r3, #1
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	430b      	orrs	r3, r1
 800583e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800584a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	495c      	ldr	r1, [pc, #368]	@ (80059c4 <HAL_I2C_Init+0x274>)
 8005854:	428b      	cmp	r3, r1
 8005856:	d819      	bhi.n	800588c <HAL_I2C_Init+0x13c>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1e59      	subs	r1, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	fbb1 f3f3 	udiv	r3, r1, r3
 8005866:	1c59      	adds	r1, r3, #1
 8005868:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800586c:	400b      	ands	r3, r1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <HAL_I2C_Init+0x138>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	1e59      	subs	r1, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005880:	3301      	adds	r3, #1
 8005882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005886:	e051      	b.n	800592c <HAL_I2C_Init+0x1dc>
 8005888:	2304      	movs	r3, #4
 800588a:	e04f      	b.n	800592c <HAL_I2C_Init+0x1dc>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d111      	bne.n	80058b8 <HAL_I2C_Init+0x168>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	1e58      	subs	r0, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	005b      	lsls	r3, r3, #1
 80058a0:	440b      	add	r3, r1
 80058a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058a6:	3301      	adds	r3, #1
 80058a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e012      	b.n	80058de <HAL_I2C_Init+0x18e>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1e58      	subs	r0, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	0099      	lsls	r1, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Init+0x196>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e022      	b.n	800592c <HAL_I2C_Init+0x1dc>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_I2C_Init+0x1bc>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1e58      	subs	r0, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	440b      	add	r3, r1
 80058fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005900:	3301      	adds	r3, #1
 8005902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590a:	e00f      	b.n	800592c <HAL_I2C_Init+0x1dc>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1e58      	subs	r0, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	0099      	lsls	r1, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	6809      	ldr	r1, [r1, #0]
 8005930:	4313      	orrs	r3, r2
 8005932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69da      	ldr	r2, [r3, #28]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800595a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6911      	ldr	r1, [r2, #16]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	68d2      	ldr	r2, [r2, #12]
 8005966:	4311      	orrs	r1, r2
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	430b      	orrs	r3, r1
 800596e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	000186a0 	.word	0x000186a0
 80059c8:	001e847f 	.word	0x001e847f
 80059cc:	003d08ff 	.word	0x003d08ff
 80059d0:	431bde83 	.word	0x431bde83
 80059d4:	10624dd3 	.word	0x10624dd3

080059d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e128      	b.n	8005c3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a90      	ldr	r2, [pc, #576]	@ (8005c44 <HAL_I2S_Init+0x26c>)
 8005a02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fc fe4b 	bl	80026a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a20:	f023 030f 	bic.w	r3, r3, #15
 8005a24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d060      	beq.n	8005af8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005a3e:	2310      	movs	r3, #16
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e001      	b.n	8005a48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005a44:	2320      	movs	r3, #32
 8005a46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d802      	bhi.n	8005a56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005a56:	2001      	movs	r0, #1
 8005a58:	f001 fa0a 	bl	8006e70 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a66:	d125      	bne.n	8005ab4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	3305      	adds	r3, #5
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	e01f      	b.n	8005ad2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aae:	3305      	adds	r3, #5
 8005ab0:	613b      	str	r3, [r7, #16]
 8005ab2:	e00e      	b.n	8005ad2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ace:	3305      	adds	r3, #5
 8005ad0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4a5c      	ldr	r2, [pc, #368]	@ (8005c48 <HAL_I2S_Init+0x270>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	61bb      	str	r3, [r7, #24]
 8005af6:	e003      	b.n	8005b00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005af8:	2302      	movs	r3, #2
 8005afa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d902      	bls.n	8005b0c <HAL_I2S_Init+0x134>
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	2bff      	cmp	r3, #255	@ 0xff
 8005b0a:	d907      	bls.n	8005b1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	f043 0210 	orr.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e08f      	b.n	8005c3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	ea42 0103 	orr.w	r1, r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6851      	ldr	r1, [r2, #4]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	6892      	ldr	r2, [r2, #8]
 8005b46:	4311      	orrs	r1, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	4311      	orrs	r1, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6992      	ldr	r2, [r2, #24]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d161      	bne.n	8005c2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a38      	ldr	r2, [pc, #224]	@ (8005c4c <HAL_I2S_Init+0x274>)
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a37      	ldr	r2, [pc, #220]	@ (8005c50 <HAL_I2S_Init+0x278>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <HAL_I2S_Init+0x1a4>
 8005b78:	4b36      	ldr	r3, [pc, #216]	@ (8005c54 <HAL_I2S_Init+0x27c>)
 8005b7a:	e001      	b.n	8005b80 <HAL_I2S_Init+0x1a8>
 8005b7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	4932      	ldr	r1, [pc, #200]	@ (8005c50 <HAL_I2S_Init+0x278>)
 8005b88:	428a      	cmp	r2, r1
 8005b8a:	d101      	bne.n	8005b90 <HAL_I2S_Init+0x1b8>
 8005b8c:	4a31      	ldr	r2, [pc, #196]	@ (8005c54 <HAL_I2S_Init+0x27c>)
 8005b8e:	e001      	b.n	8005b94 <HAL_I2S_Init+0x1bc>
 8005b90:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005b94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b98:	f023 030f 	bic.w	r3, r3, #15
 8005b9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c50 <HAL_I2S_Init+0x278>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d101      	bne.n	8005bac <HAL_I2S_Init+0x1d4>
 8005ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c54 <HAL_I2S_Init+0x27c>)
 8005baa:	e001      	b.n	8005bb0 <HAL_I2S_Init+0x1d8>
 8005bac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a25      	ldr	r2, [pc, #148]	@ (8005c50 <HAL_I2S_Init+0x278>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2S_Init+0x1ea>
 8005bbe:	4b25      	ldr	r3, [pc, #148]	@ (8005c54 <HAL_I2S_Init+0x27c>)
 8005bc0:	e001      	b.n	8005bc6 <HAL_I2S_Init+0x1ee>
 8005bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd2:	d003      	beq.n	8005bdc <HAL_I2S_Init+0x204>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d103      	bne.n	8005be4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e001      	b.n	8005be8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005c06:	4313      	orrs	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	897b      	ldrh	r3, [r7, #10]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005c50 <HAL_I2S_Init+0x278>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d101      	bne.n	8005c24 <HAL_I2S_Init+0x24c>
 8005c20:	4b0c      	ldr	r3, [pc, #48]	@ (8005c54 <HAL_I2S_Init+0x27c>)
 8005c22:	e001      	b.n	8005c28 <HAL_I2S_Init+0x250>
 8005c24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c28:	897a      	ldrh	r2, [r7, #10]
 8005c2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	08005d4f 	.word	0x08005d4f
 8005c48:	cccccccd 	.word	0xcccccccd
 8005c4c:	08005e65 	.word	0x08005e65
 8005c50:	40003800 	.word	0x40003800
 8005c54:	40003400 	.word	0x40003400

08005c58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	881a      	ldrh	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10e      	bne.n	8005ce8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ffb8 	bl	8005c58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d02:	b292      	uxth	r2, r2
 8005d04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10e      	bne.n	8005d46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff93 	bl	8005c6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d13a      	bne.n	8005de0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d109      	bne.n	8005d88 <I2S_IRQHandler+0x3a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d7e:	2b40      	cmp	r3, #64	@ 0x40
 8005d80:	d102      	bne.n	8005d88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff ffb4 	bl	8005cf0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8e:	2b40      	cmp	r3, #64	@ 0x40
 8005d90:	d126      	bne.n	8005de0 <I2S_IRQHandler+0x92>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d11f      	bne.n	8005de0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005dae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0202 	orr.w	r2, r3, #2
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ff50 	bl	8005c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d136      	bne.n	8005e5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d109      	bne.n	8005e0a <I2S_IRQHandler+0xbc>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e00:	2b80      	cmp	r3, #128	@ 0x80
 8005e02:	d102      	bne.n	8005e0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f7ff ff45 	bl	8005c94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d122      	bne.n	8005e5a <I2S_IRQHandler+0x10c>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d11b      	bne.n	8005e5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e4c:	f043 0204 	orr.w	r2, r3, #4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff13 	bl	8005c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a92      	ldr	r2, [pc, #584]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005e7e:	4b92      	ldr	r3, [pc, #584]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e80:	e001      	b.n	8005e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005e82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a8b      	ldr	r2, [pc, #556]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d101      	bne.n	8005ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e9c:	4b8a      	ldr	r3, [pc, #552]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e9e:	e001      	b.n	8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005ea0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb0:	d004      	beq.n	8005ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f040 8099 	bne.w	8005fee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d107      	bne.n	8005ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f925 	bl	8006120 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d107      	bne.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9c8 	bl	8006280 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b40      	cmp	r3, #64	@ 0x40
 8005ef8:	d13a      	bne.n	8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d035      	beq.n	8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6e      	ldr	r2, [pc, #440]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f10:	e001      	b.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005f12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4969      	ldr	r1, [pc, #420]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f1e:	428b      	cmp	r3, r1
 8005f20:	d101      	bne.n	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005f22:	4b69      	ldr	r3, [pc, #420]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f24:	e001      	b.n	8005f2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005f26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f043 0202 	orr.w	r2, r3, #2
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff fe88 	bl	8005c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b08      	cmp	r3, #8
 8005f78:	f040 80c3 	bne.w	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 80bd 	beq.w	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a49      	ldr	r2, [pc, #292]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005fa2:	4b49      	ldr	r3, [pc, #292]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fa4:	e001      	b.n	8005faa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005fa6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4944      	ldr	r1, [pc, #272]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fb2:	428b      	cmp	r3, r1
 8005fb4:	d101      	bne.n	8005fba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005fb6:	4b44      	ldr	r3, [pc, #272]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb8:	e001      	b.n	8005fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005fba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fc2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	f043 0204 	orr.w	r2, r3, #4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fe4a 	bl	8005c80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fec:	e089      	b.n	8006102 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d107      	bne.n	8006008 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f8be 	bl	8006184 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b01      	cmp	r3, #1
 8006010:	d107      	bne.n	8006022 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f8fd 	bl	800621c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006028:	2b40      	cmp	r3, #64	@ 0x40
 800602a:	d12f      	bne.n	800608c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02a      	beq.n	800608c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006044:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1e      	ldr	r2, [pc, #120]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d101      	bne.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006050:	4b1d      	ldr	r3, [pc, #116]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006052:	e001      	b.n	8006058 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006054:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4919      	ldr	r1, [pc, #100]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006060:	428b      	cmp	r3, r1
 8006062:	d101      	bne.n	8006068 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006064:	4b18      	ldr	r3, [pc, #96]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006066:	e001      	b.n	800606c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006068:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800606c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006070:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fdfa 	bl	8005c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b08      	cmp	r3, #8
 8006094:	d136      	bne.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b00      	cmp	r3, #0
 800609e:	d031      	beq.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a07      	ldr	r2, [pc, #28]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d101      	bne.n	80060ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80060aa:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060ac:	e001      	b.n	80060b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80060ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4902      	ldr	r1, [pc, #8]	@ (80060c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80060ba:	428b      	cmp	r3, r1
 80060bc:	d106      	bne.n	80060cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80060be:	4b02      	ldr	r3, [pc, #8]	@ (80060c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80060c0:	e006      	b.n	80060d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80060c2:	bf00      	nop
 80060c4:	40003800 	.word	0x40003800
 80060c8:	40003400 	.word	0x40003400
 80060cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80060e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fdc0 	bl	8005c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006100:	e000      	b.n	8006104 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006102:	bf00      	nop
}
 8006104:	bf00      	nop
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	1c99      	adds	r1, r3, #2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6251      	str	r1, [r2, #36]	@ 0x24
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d113      	bne.n	800617a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006160:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ffc9 	bl	800610c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	1c99      	adds	r1, r3, #2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6251      	str	r1, [r2, #36]	@ 0x24
 8006196:	8819      	ldrh	r1, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1d      	ldr	r2, [pc, #116]	@ (8006214 <I2SEx_TxISR_I2SExt+0x90>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d101      	bne.n	80061a6 <I2SEx_TxISR_I2SExt+0x22>
 80061a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006218 <I2SEx_TxISR_I2SExt+0x94>)
 80061a4:	e001      	b.n	80061aa <I2SEx_TxISR_I2SExt+0x26>
 80061a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061aa:	460a      	mov	r2, r1
 80061ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	3b01      	subs	r3, #1
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d121      	bne.n	800620a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a12      	ldr	r2, [pc, #72]	@ (8006214 <I2SEx_TxISR_I2SExt+0x90>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d101      	bne.n	80061d4 <I2SEx_TxISR_I2SExt+0x50>
 80061d0:	4b11      	ldr	r3, [pc, #68]	@ (8006218 <I2SEx_TxISR_I2SExt+0x94>)
 80061d2:	e001      	b.n	80061d8 <I2SEx_TxISR_I2SExt+0x54>
 80061d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	490d      	ldr	r1, [pc, #52]	@ (8006214 <I2SEx_TxISR_I2SExt+0x90>)
 80061e0:	428b      	cmp	r3, r1
 80061e2:	d101      	bne.n	80061e8 <I2SEx_TxISR_I2SExt+0x64>
 80061e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006218 <I2SEx_TxISR_I2SExt+0x94>)
 80061e6:	e001      	b.n	80061ec <I2SEx_TxISR_I2SExt+0x68>
 80061e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80061f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d106      	bne.n	800620a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff81 	bl	800610c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	40003800 	.word	0x40003800
 8006218:	40003400 	.word	0x40003400

0800621c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68d8      	ldr	r0, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622e:	1c99      	adds	r1, r3, #2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006234:	b282      	uxth	r2, r0
 8006236:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d113      	bne.n	8006278 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800625e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff ff4a 	bl	800610c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a20      	ldr	r2, [pc, #128]	@ (8006310 <I2SEx_RxISR_I2SExt+0x90>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <I2SEx_RxISR_I2SExt+0x16>
 8006292:	4b20      	ldr	r3, [pc, #128]	@ (8006314 <I2SEx_RxISR_I2SExt+0x94>)
 8006294:	e001      	b.n	800629a <I2SEx_RxISR_I2SExt+0x1a>
 8006296:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800629a:	68d8      	ldr	r0, [r3, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	1c99      	adds	r1, r3, #2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80062a6:	b282      	uxth	r2, r0
 80062a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d121      	bne.n	8006306 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a12      	ldr	r2, [pc, #72]	@ (8006310 <I2SEx_RxISR_I2SExt+0x90>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d101      	bne.n	80062d0 <I2SEx_RxISR_I2SExt+0x50>
 80062cc:	4b11      	ldr	r3, [pc, #68]	@ (8006314 <I2SEx_RxISR_I2SExt+0x94>)
 80062ce:	e001      	b.n	80062d4 <I2SEx_RxISR_I2SExt+0x54>
 80062d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	490d      	ldr	r1, [pc, #52]	@ (8006310 <I2SEx_RxISR_I2SExt+0x90>)
 80062dc:	428b      	cmp	r3, r1
 80062de:	d101      	bne.n	80062e4 <I2SEx_RxISR_I2SExt+0x64>
 80062e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006314 <I2SEx_RxISR_I2SExt+0x94>)
 80062e2:	e001      	b.n	80062e8 <I2SEx_RxISR_I2SExt+0x68>
 80062e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80062e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80062ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff03 	bl	800610c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40003800 	.word	0x40003800
 8006314:	40003400 	.word	0x40003400

08006318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e267      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d075      	beq.n	8006422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006336:	4b88      	ldr	r3, [pc, #544]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 030c 	and.w	r3, r3, #12
 800633e:	2b04      	cmp	r3, #4
 8006340:	d00c      	beq.n	800635c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006342:	4b85      	ldr	r3, [pc, #532]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800634a:	2b08      	cmp	r3, #8
 800634c:	d112      	bne.n	8006374 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800634e:	4b82      	ldr	r3, [pc, #520]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800635a:	d10b      	bne.n	8006374 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800635c:	4b7e      	ldr	r3, [pc, #504]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d05b      	beq.n	8006420 <HAL_RCC_OscConfig+0x108>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d157      	bne.n	8006420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e242      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800637c:	d106      	bne.n	800638c <HAL_RCC_OscConfig+0x74>
 800637e:	4b76      	ldr	r3, [pc, #472]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a75      	ldr	r2, [pc, #468]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e01d      	b.n	80063c8 <HAL_RCC_OscConfig+0xb0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006394:	d10c      	bne.n	80063b0 <HAL_RCC_OscConfig+0x98>
 8006396:	4b70      	ldr	r3, [pc, #448]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a6f      	ldr	r2, [pc, #444]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 800639c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	4b6d      	ldr	r3, [pc, #436]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a6c      	ldr	r2, [pc, #432]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	e00b      	b.n	80063c8 <HAL_RCC_OscConfig+0xb0>
 80063b0:	4b69      	ldr	r3, [pc, #420]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a68      	ldr	r2, [pc, #416]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	4b66      	ldr	r3, [pc, #408]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a65      	ldr	r2, [pc, #404]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d013      	beq.n	80063f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d0:	f7fc fcda 	bl	8002d88 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d8:	f7fc fcd6 	bl	8002d88 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b64      	cmp	r3, #100	@ 0x64
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e207      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0f0      	beq.n	80063d8 <HAL_RCC_OscConfig+0xc0>
 80063f6:	e014      	b.n	8006422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fc fcc6 	bl	8002d88 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006400:	f7fc fcc2 	bl	8002d88 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	@ 0x64
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e1f3      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006412:	4b51      	ldr	r3, [pc, #324]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0xe8>
 800641e:	e000      	b.n	8006422 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d063      	beq.n	80064f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800642e:	4b4a      	ldr	r3, [pc, #296]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643a:	4b47      	ldr	r3, [pc, #284]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006442:	2b08      	cmp	r3, #8
 8006444:	d11c      	bne.n	8006480 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006446:	4b44      	ldr	r3, [pc, #272]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d116      	bne.n	8006480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006452:	4b41      	ldr	r3, [pc, #260]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d005      	beq.n	800646a <HAL_RCC_OscConfig+0x152>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d001      	beq.n	800646a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e1c7      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800646a:	4b3b      	ldr	r3, [pc, #236]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	4937      	ldr	r1, [pc, #220]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 800647a:	4313      	orrs	r3, r2
 800647c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800647e:	e03a      	b.n	80064f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d020      	beq.n	80064ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006488:	4b34      	ldr	r3, [pc, #208]	@ (800655c <HAL_RCC_OscConfig+0x244>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fc fc7b 	bl	8002d88 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006496:	f7fc fc77 	bl	8002d88 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e1a8      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0f0      	beq.n	8006496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b4:	4b28      	ldr	r3, [pc, #160]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	00db      	lsls	r3, r3, #3
 80064c2:	4925      	ldr	r1, [pc, #148]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	600b      	str	r3, [r1, #0]
 80064c8:	e015      	b.n	80064f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064ca:	4b24      	ldr	r3, [pc, #144]	@ (800655c <HAL_RCC_OscConfig+0x244>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fc fc5a 	bl	8002d88 <HAL_GetTick>
 80064d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d8:	f7fc fc56 	bl	8002d88 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e187      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f0      	bne.n	80064d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d036      	beq.n	8006570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800650a:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <HAL_RCC_OscConfig+0x248>)
 800650c:	2201      	movs	r2, #1
 800650e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006510:	f7fc fc3a 	bl	8002d88 <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006518:	f7fc fc36 	bl	8002d88 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e167      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652a:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <HAL_RCC_OscConfig+0x240>)
 800652c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x200>
 8006536:	e01b      	b.n	8006570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <HAL_RCC_OscConfig+0x248>)
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800653e:	f7fc fc23 	bl	8002d88 <HAL_GetTick>
 8006542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006544:	e00e      	b.n	8006564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006546:	f7fc fc1f 	bl	8002d88 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	2b02      	cmp	r3, #2
 8006552:	d907      	bls.n	8006564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e150      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
 8006558:	40023800 	.word	0x40023800
 800655c:	42470000 	.word	0x42470000
 8006560:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006564:	4b88      	ldr	r3, [pc, #544]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1ea      	bne.n	8006546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 8097 	beq.w	80066ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800657e:	2300      	movs	r3, #0
 8006580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006582:	4b81      	ldr	r3, [pc, #516]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10f      	bne.n	80065ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800658e:	2300      	movs	r3, #0
 8006590:	60bb      	str	r3, [r7, #8]
 8006592:	4b7d      	ldr	r3, [pc, #500]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006596:	4a7c      	ldr	r2, [pc, #496]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800659c:	6413      	str	r3, [r2, #64]	@ 0x40
 800659e:	4b7a      	ldr	r3, [pc, #488]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a6:	60bb      	str	r3, [r7, #8]
 80065a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ae:	4b77      	ldr	r3, [pc, #476]	@ (800678c <HAL_RCC_OscConfig+0x474>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d118      	bne.n	80065ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065ba:	4b74      	ldr	r3, [pc, #464]	@ (800678c <HAL_RCC_OscConfig+0x474>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a73      	ldr	r2, [pc, #460]	@ (800678c <HAL_RCC_OscConfig+0x474>)
 80065c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065c6:	f7fc fbdf 	bl	8002d88 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ce:	f7fc fbdb 	bl	8002d88 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e10c      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e0:	4b6a      	ldr	r3, [pc, #424]	@ (800678c <HAL_RCC_OscConfig+0x474>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x2ea>
 80065f4:	4b64      	ldr	r3, [pc, #400]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f8:	4a63      	ldr	r2, [pc, #396]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80065fa:	f043 0301 	orr.w	r3, r3, #1
 80065fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006600:	e01c      	b.n	800663c <HAL_RCC_OscConfig+0x324>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	2b05      	cmp	r3, #5
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x30c>
 800660a:	4b5f      	ldr	r3, [pc, #380]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660e:	4a5e      	ldr	r2, [pc, #376]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006610:	f043 0304 	orr.w	r3, r3, #4
 8006614:	6713      	str	r3, [r2, #112]	@ 0x70
 8006616:	4b5c      	ldr	r3, [pc, #368]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661a:	4a5b      	ldr	r2, [pc, #364]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	6713      	str	r3, [r2, #112]	@ 0x70
 8006622:	e00b      	b.n	800663c <HAL_RCC_OscConfig+0x324>
 8006624:	4b58      	ldr	r3, [pc, #352]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	4a57      	ldr	r2, [pc, #348]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006630:	4b55      	ldr	r3, [pc, #340]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006634:	4a54      	ldr	r2, [pc, #336]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006636:	f023 0304 	bic.w	r3, r3, #4
 800663a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d015      	beq.n	8006670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006644:	f7fc fba0 	bl	8002d88 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800664a:	e00a      	b.n	8006662 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664c:	f7fc fb9c 	bl	8002d88 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800665a:	4293      	cmp	r3, r2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e0cb      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006662:	4b49      	ldr	r3, [pc, #292]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ee      	beq.n	800664c <HAL_RCC_OscConfig+0x334>
 800666e:	e014      	b.n	800669a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006670:	f7fc fb8a 	bl	8002d88 <HAL_GetTick>
 8006674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006676:	e00a      	b.n	800668e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006678:	f7fc fb86 	bl	8002d88 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e0b5      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668e:	4b3e      	ldr	r3, [pc, #248]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1ee      	bne.n	8006678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800669a:	7dfb      	ldrb	r3, [r7, #23]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d105      	bne.n	80066ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066a0:	4b39      	ldr	r3, [pc, #228]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	4a38      	ldr	r2, [pc, #224]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80066a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80a1 	beq.w	80067f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066b6:	4b34      	ldr	r3, [pc, #208]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d05c      	beq.n	800677c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d141      	bne.n	800674e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066ca:	4b31      	ldr	r3, [pc, #196]	@ (8006790 <HAL_RCC_OscConfig+0x478>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d0:	f7fc fb5a 	bl	8002d88 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d8:	f7fc fb56 	bl	8002d88 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e087      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ea:	4b27      	ldr	r3, [pc, #156]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1f0      	bne.n	80066d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69da      	ldr	r2, [r3, #28]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	019b      	lsls	r3, r3, #6
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	3b01      	subs	r3, #1
 8006710:	041b      	lsls	r3, r3, #16
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006718:	061b      	lsls	r3, r3, #24
 800671a:	491b      	ldr	r1, [pc, #108]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 800671c:	4313      	orrs	r3, r2
 800671e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006720:	4b1b      	ldr	r3, [pc, #108]	@ (8006790 <HAL_RCC_OscConfig+0x478>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006726:	f7fc fb2f 	bl	8002d88 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672e:	f7fc fb2b 	bl	8002d88 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e05c      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006740:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f0      	beq.n	800672e <HAL_RCC_OscConfig+0x416>
 800674c:	e054      	b.n	80067f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674e:	4b10      	ldr	r3, [pc, #64]	@ (8006790 <HAL_RCC_OscConfig+0x478>)
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006754:	f7fc fb18 	bl	8002d88 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675c:	f7fc fb14 	bl	8002d88 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e045      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676e:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <HAL_RCC_OscConfig+0x470>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0x444>
 800677a:	e03d      	b.n	80067f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d107      	bne.n	8006794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e038      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
 8006788:	40023800 	.word	0x40023800
 800678c:	40007000 	.word	0x40007000
 8006790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006794:	4b1b      	ldr	r3, [pc, #108]	@ (8006804 <HAL_RCC_OscConfig+0x4ec>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d028      	beq.n	80067f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d121      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d11a      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d111      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	3b01      	subs	r3, #1
 80067de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d107      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40023800 	.word	0x40023800

08006808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e0cc      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800681c:	4b68      	ldr	r3, [pc, #416]	@ (80069c0 <HAL_RCC_ClockConfig+0x1b8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d90c      	bls.n	8006844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800682a:	4b65      	ldr	r3, [pc, #404]	@ (80069c0 <HAL_RCC_ClockConfig+0x1b8>)
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006832:	4b63      	ldr	r3, [pc, #396]	@ (80069c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0b8      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d020      	beq.n	8006892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800685c:	4b59      	ldr	r3, [pc, #356]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4a58      	ldr	r2, [pc, #352]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006866:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006874:	4b53      	ldr	r3, [pc, #332]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4a52      	ldr	r2, [pc, #328]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800687e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006880:	4b50      	ldr	r3, [pc, #320]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	494d      	ldr	r1, [pc, #308]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d044      	beq.n	8006928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d107      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a6:	4b47      	ldr	r3, [pc, #284]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d119      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e07f      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d003      	beq.n	80068c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	d107      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068c6:	4b3f      	ldr	r3, [pc, #252]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d109      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e06f      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068d6:	4b3b      	ldr	r3, [pc, #236]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e067      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068e6:	4b37      	ldr	r3, [pc, #220]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f023 0203 	bic.w	r2, r3, #3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	4934      	ldr	r1, [pc, #208]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068f8:	f7fc fa46 	bl	8002d88 <HAL_GetTick>
 80068fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fe:	e00a      	b.n	8006916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006900:	f7fc fa42 	bl	8002d88 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e04f      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006916:	4b2b      	ldr	r3, [pc, #172]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 020c 	and.w	r2, r3, #12
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	429a      	cmp	r2, r3
 8006926:	d1eb      	bne.n	8006900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006928:	4b25      	ldr	r3, [pc, #148]	@ (80069c0 <HAL_RCC_ClockConfig+0x1b8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d20c      	bcs.n	8006950 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006936:	4b22      	ldr	r3, [pc, #136]	@ (80069c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800693e:	4b20      	ldr	r3, [pc, #128]	@ (80069c0 <HAL_RCC_ClockConfig+0x1b8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d001      	beq.n	8006950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e032      	b.n	80069b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d008      	beq.n	800696e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800695c:	4b19      	ldr	r3, [pc, #100]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4916      	ldr	r1, [pc, #88]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	4313      	orrs	r3, r2
 800696c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0308 	and.w	r3, r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800697a:	4b12      	ldr	r3, [pc, #72]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	490e      	ldr	r1, [pc, #56]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	4313      	orrs	r3, r2
 800698c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800698e:	f000 f821 	bl	80069d4 <HAL_RCC_GetSysClockFreq>
 8006992:	4602      	mov	r2, r0
 8006994:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <HAL_RCC_ClockConfig+0x1bc>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	490a      	ldr	r1, [pc, #40]	@ (80069c8 <HAL_RCC_ClockConfig+0x1c0>)
 80069a0:	5ccb      	ldrb	r3, [r1, r3]
 80069a2:	fa22 f303 	lsr.w	r3, r2, r3
 80069a6:	4a09      	ldr	r2, [pc, #36]	@ (80069cc <HAL_RCC_ClockConfig+0x1c4>)
 80069a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069aa:	4b09      	ldr	r3, [pc, #36]	@ (80069d0 <HAL_RCC_ClockConfig+0x1c8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fb ffca 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40023c00 	.word	0x40023c00
 80069c4:	40023800 	.word	0x40023800
 80069c8:	08012940 	.word	0x08012940
 80069cc:	2000022c 	.word	0x2000022c
 80069d0:	20000230 	.word	0x20000230

080069d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d8:	b094      	sub	sp, #80	@ 0x50
 80069da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ec:	4b79      	ldr	r3, [pc, #484]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 030c 	and.w	r3, r3, #12
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d00d      	beq.n	8006a14 <HAL_RCC_GetSysClockFreq+0x40>
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	f200 80e1 	bhi.w	8006bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <HAL_RCC_GetSysClockFreq+0x34>
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d003      	beq.n	8006a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a06:	e0db      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a08:	4b73      	ldr	r3, [pc, #460]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a0c:	e0db      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a0e:	4b73      	ldr	r3, [pc, #460]	@ (8006bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8006a10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a12:	e0d8      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a14:	4b6f      	ldr	r3, [pc, #444]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d063      	beq.n	8006af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	099b      	lsrs	r3, r3, #6
 8006a30:	2200      	movs	r2, #0
 8006a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a3e:	2300      	movs	r3, #0
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a46:	4622      	mov	r2, r4
 8006a48:	462b      	mov	r3, r5
 8006a4a:	f04f 0000 	mov.w	r0, #0
 8006a4e:	f04f 0100 	mov.w	r1, #0
 8006a52:	0159      	lsls	r1, r3, #5
 8006a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a58:	0150      	lsls	r0, r2, #5
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4621      	mov	r1, r4
 8006a60:	1a51      	subs	r1, r2, r1
 8006a62:	6139      	str	r1, [r7, #16]
 8006a64:	4629      	mov	r1, r5
 8006a66:	eb63 0301 	sbc.w	r3, r3, r1
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a78:	4659      	mov	r1, fp
 8006a7a:	018b      	lsls	r3, r1, #6
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a82:	4651      	mov	r1, sl
 8006a84:	018a      	lsls	r2, r1, #6
 8006a86:	4651      	mov	r1, sl
 8006a88:	ebb2 0801 	subs.w	r8, r2, r1
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	f04f 0300 	mov.w	r3, #0
 8006a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006aa6:	4690      	mov	r8, r2
 8006aa8:	4699      	mov	r9, r3
 8006aaa:	4623      	mov	r3, r4
 8006aac:	eb18 0303 	adds.w	r3, r8, r3
 8006ab0:	60bb      	str	r3, [r7, #8]
 8006ab2:	462b      	mov	r3, r5
 8006ab4:	eb49 0303 	adc.w	r3, r9, r3
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	024b      	lsls	r3, r1, #9
 8006aca:	4621      	mov	r1, r4
 8006acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	024a      	lsls	r2, r1, #9
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ada:	2200      	movs	r2, #0
 8006adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ae4:	f7f9 fbcc 	bl	8000280 <__aeabi_uldivmod>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4613      	mov	r3, r2
 8006aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af0:	e058      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006af2:	4b38      	ldr	r3, [pc, #224]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	2200      	movs	r2, #0
 8006afa:	4618      	mov	r0, r3
 8006afc:	4611      	mov	r1, r2
 8006afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b02:	623b      	str	r3, [r7, #32]
 8006b04:	2300      	movs	r3, #0
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	f04f 0000 	mov.w	r0, #0
 8006b14:	f04f 0100 	mov.w	r1, #0
 8006b18:	0159      	lsls	r1, r3, #5
 8006b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b1e:	0150      	lsls	r0, r2, #5
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4641      	mov	r1, r8
 8006b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b44:	ebb2 040a 	subs.w	r4, r2, sl
 8006b48:	eb63 050b 	sbc.w	r5, r3, fp
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	00eb      	lsls	r3, r5, #3
 8006b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b5a:	00e2      	lsls	r2, r4, #3
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	461d      	mov	r5, r3
 8006b60:	4643      	mov	r3, r8
 8006b62:	18e3      	adds	r3, r4, r3
 8006b64:	603b      	str	r3, [r7, #0]
 8006b66:	464b      	mov	r3, r9
 8006b68:	eb45 0303 	adc.w	r3, r5, r3
 8006b6c:	607b      	str	r3, [r7, #4]
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	028b      	lsls	r3, r1, #10
 8006b7e:	4621      	mov	r1, r4
 8006b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b84:	4621      	mov	r1, r4
 8006b86:	028a      	lsls	r2, r1, #10
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8e:	2200      	movs	r2, #0
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	61fa      	str	r2, [r7, #28]
 8006b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b98:	f7f9 fb72 	bl	8000280 <__aeabi_uldivmod>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	0c1b      	lsrs	r3, r3, #16
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	3301      	adds	r3, #1
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bc0:	4b05      	ldr	r3, [pc, #20]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3750      	adds	r7, #80	@ 0x50
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	00f42400 	.word	0x00f42400
 8006bdc:	007a1200 	.word	0x007a1200

08006be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006be4:	4b03      	ldr	r3, [pc, #12]	@ (8006bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006be6:	681b      	ldr	r3, [r3, #0]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000022c 	.word	0x2000022c

08006bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bfc:	f7ff fff0 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 8006c00:	4602      	mov	r2, r0
 8006c02:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	0a9b      	lsrs	r3, r3, #10
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	4903      	ldr	r1, [pc, #12]	@ (8006c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c0e:	5ccb      	ldrb	r3, [r1, r3]
 8006c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	08012950 	.word	0x08012950

08006c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c24:	f7ff ffdc 	bl	8006be0 <HAL_RCC_GetHCLKFreq>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	4b05      	ldr	r3, [pc, #20]	@ (8006c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	0b5b      	lsrs	r3, r3, #13
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	4903      	ldr	r1, [pc, #12]	@ (8006c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c36:	5ccb      	ldrb	r3, [r1, r3]
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40023800 	.word	0x40023800
 8006c44:	08012950 	.word	0x08012950

08006c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	220f      	movs	r2, #15
 8006c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c58:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 0203 	and.w	r2, r3, #3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c70:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006c7c:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	08db      	lsrs	r3, r3, #3
 8006c82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <HAL_RCC_GetClockConfig+0x60>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0207 	and.w	r2, r3, #7
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	601a      	str	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40023c00 	.word	0x40023c00

08006cac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d035      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cd4:	4b62      	ldr	r3, [pc, #392]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cda:	f7fc f855 	bl	8002d88 <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ce2:	f7fc f851 	bl	8002d88 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e0b0      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cf4:	4b5b      	ldr	r3, [pc, #364]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	019a      	lsls	r2, r3, #6
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	071b      	lsls	r3, r3, #28
 8006d0c:	4955      	ldr	r1, [pc, #340]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d14:	4b52      	ldr	r3, [pc, #328]	@ (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d1a:	f7fc f835 	bl	8002d88 <HAL_GetTick>
 8006d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d20:	e008      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006d22:	f7fc f831 	bl	8002d88 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e090      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d34:	4b4b      	ldr	r3, [pc, #300]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8083 	beq.w	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]
 8006d52:	4b44      	ldr	r3, [pc, #272]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	4a43      	ldr	r2, [pc, #268]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d5e:	4b41      	ldr	r3, [pc, #260]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d76:	f7fc f807 	bl	8002d88 <HAL_GetTick>
 8006d7a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d7c:	e008      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d7e:	f7fc f803 	bl	8002d88 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e062      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d90:	4b35      	ldr	r3, [pc, #212]	@ (8006e68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d0f0      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d9c:	4b31      	ldr	r3, [pc, #196]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d02f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d028      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dba:	4b2a      	ldr	r3, [pc, #168]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dc4:	4b29      	ldr	r3, [pc, #164]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dca:	4b28      	ldr	r3, [pc, #160]	@ (8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006dd0:	4a24      	ldr	r2, [pc, #144]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dd6:	4b23      	ldr	r3, [pc, #140]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d114      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006de2:	f7fb ffd1 	bl	8002d88 <HAL_GetTick>
 8006de6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de8:	e00a      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dea:	f7fb ffcd 	bl	8002d88 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d901      	bls.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e02a      	b.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e00:	4b18      	ldr	r3, [pc, #96]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0ee      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e18:	d10d      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e1a:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2e:	490d      	ldr	r1, [pc, #52]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	608b      	str	r3, [r1, #8]
 8006e34:	e005      	b.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e36:	4b0b      	ldr	r3, [pc, #44]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e3c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e40:	6093      	str	r3, [r2, #8]
 8006e42:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e4e:	4905      	ldr	r1, [pc, #20]	@ (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3718      	adds	r7, #24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	42470068 	.word	0x42470068
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	42470e40 	.word	0x42470e40

08006e70 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d13f      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006e8e:	4b24      	ldr	r3, [pc, #144]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e96:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ea4:	d12f      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ea8:	617b      	str	r3, [r7, #20]
          break;
 8006eaa:	e02f      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006eac:	4b1c      	ldr	r3, [pc, #112]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eb8:	d108      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006eba:	4b19      	ldr	r3, [pc, #100]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ec2:	4a19      	ldr	r2, [pc, #100]	@ (8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	e007      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ecc:	4b14      	ldr	r3, [pc, #80]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ed4:	4a15      	ldr	r2, [pc, #84]	@ (8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eda:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006edc:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ee2:	099b      	lsrs	r3, r3, #6
 8006ee4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ef6:	0f1b      	lsrs	r3, r3, #28
 8006ef8:	f003 0307 	and.w	r3, r3, #7
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f02:	617b      	str	r3, [r7, #20]
          break;
 8006f04:	e002      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
          break;
 8006f0a:	bf00      	nop
        }
      }
      break;
 8006f0c:	e000      	b.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006f0e:	bf00      	nop
    }
  }
  return frequency;
 8006f10:	697b      	ldr	r3, [r7, #20]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	40023800 	.word	0x40023800
 8006f24:	00bb8000 	.word	0x00bb8000
 8006f28:	007a1200 	.word	0x007a1200
 8006f2c:	00f42400 	.word	0x00f42400

08006f30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e07b      	b.n	800703a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d108      	bne.n	8006f5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f52:	d009      	beq.n	8006f68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	61da      	str	r2, [r3, #28]
 8006f5a:	e005      	b.n	8006f68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d106      	bne.n	8006f88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fb fc0c 	bl	80027a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fec:	ea42 0103 	orr.w	r1, r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	0c1b      	lsrs	r3, r3, #16
 8007006:	f003 0104 	and.w	r1, r3, #4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	f003 0210 	and.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	69da      	ldr	r2, [r3, #28]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007028:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e041      	b.n	80070d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f839 	bl	80070e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3304      	adds	r3, #4
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f000 f9bf 	bl	8007404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007102:	b2db      	uxtb	r3, r3
 8007104:	2b01      	cmp	r3, #1
 8007106:	d001      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e04e      	b.n	80071aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 0201 	orr.w	r2, r2, #1
 8007122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a23      	ldr	r2, [pc, #140]	@ (80071b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d022      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007136:	d01d      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1f      	ldr	r2, [pc, #124]	@ (80071bc <HAL_TIM_Base_Start_IT+0xc8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d018      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a1e      	ldr	r2, [pc, #120]	@ (80071c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a1c      	ldr	r2, [pc, #112]	@ (80071c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00e      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d009      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a19      	ldr	r2, [pc, #100]	@ (80071cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d004      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x80>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a18      	ldr	r2, [pc, #96]	@ (80071d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d111      	bne.n	8007198 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b06      	cmp	r3, #6
 8007184:	d010      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0201 	orr.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007196:	e007      	b.n	80071a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40000400 	.word	0x40000400
 80071c0:	40000800 	.word	0x40000800
 80071c4:	40000c00 	.word	0x40000c00
 80071c8:	40010400 	.word	0x40010400
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40001800 	.word	0x40001800

080071d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d020      	beq.n	8007238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01b      	beq.n	8007238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f06f 0202 	mvn.w	r2, #2
 8007208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8d2 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 8007224:	e005      	b.n	8007232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8c4 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8d5 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d020      	beq.n	8007284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01b      	beq.n	8007284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f06f 0204 	mvn.w	r2, #4
 8007254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8ac 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 8007270:	e005      	b.n	800727e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f89e 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8af 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d020      	beq.n	80072d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01b      	beq.n	80072d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0208 	mvn.w	r2, #8
 80072a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2204      	movs	r2, #4
 80072a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f886 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 80072bc:	e005      	b.n	80072ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f878 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f889 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0210 	mvn.w	r2, #16
 80072ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2208      	movs	r2, #8
 80072f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f860 	bl	80073c8 <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f852 	bl	80073b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f863 	bl	80073dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0201 	mvn.w	r2, #1
 8007338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fb f924 	bl	8002588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00c      	beq.n	8007364 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f900 	bl	8007564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00c      	beq.n	8007388 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007374:	2b00      	cmp	r3, #0
 8007376:	d007      	beq.n	8007388 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f834 	bl	80073f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f003 0320 	and.w	r3, r3, #32
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f003 0320 	and.w	r3, r3, #32
 8007398:	2b00      	cmp	r3, #0
 800739a:	d007      	beq.n	80073ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f06f 0220 	mvn.w	r2, #32
 80073a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f8d2 	bl	8007550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a43      	ldr	r2, [pc, #268]	@ (8007524 <TIM_Base_SetConfig+0x120>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007422:	d00f      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a40      	ldr	r2, [pc, #256]	@ (8007528 <TIM_Base_SetConfig+0x124>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00b      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a3f      	ldr	r2, [pc, #252]	@ (800752c <TIM_Base_SetConfig+0x128>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d007      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a3e      	ldr	r2, [pc, #248]	@ (8007530 <TIM_Base_SetConfig+0x12c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a3d      	ldr	r2, [pc, #244]	@ (8007534 <TIM_Base_SetConfig+0x130>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a32      	ldr	r2, [pc, #200]	@ (8007524 <TIM_Base_SetConfig+0x120>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d02b      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007464:	d027      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2f      	ldr	r2, [pc, #188]	@ (8007528 <TIM_Base_SetConfig+0x124>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d023      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a2e      	ldr	r2, [pc, #184]	@ (800752c <TIM_Base_SetConfig+0x128>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d01f      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a2d      	ldr	r2, [pc, #180]	@ (8007530 <TIM_Base_SetConfig+0x12c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01b      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2c      	ldr	r2, [pc, #176]	@ (8007534 <TIM_Base_SetConfig+0x130>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d017      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2b      	ldr	r2, [pc, #172]	@ (8007538 <TIM_Base_SetConfig+0x134>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2a      	ldr	r2, [pc, #168]	@ (800753c <TIM_Base_SetConfig+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00f      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a29      	ldr	r2, [pc, #164]	@ (8007540 <TIM_Base_SetConfig+0x13c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00b      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a28      	ldr	r2, [pc, #160]	@ (8007544 <TIM_Base_SetConfig+0x140>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d007      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a27      	ldr	r2, [pc, #156]	@ (8007548 <TIM_Base_SetConfig+0x144>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d003      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a26      	ldr	r2, [pc, #152]	@ (800754c <TIM_Base_SetConfig+0x148>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d108      	bne.n	80074c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a0e      	ldr	r2, [pc, #56]	@ (8007524 <TIM_Base_SetConfig+0x120>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d003      	beq.n	80074f6 <TIM_Base_SetConfig+0xf2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a10      	ldr	r2, [pc, #64]	@ (8007534 <TIM_Base_SetConfig+0x130>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d103      	bne.n	80074fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f043 0204 	orr.w	r2, r3, #4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	601a      	str	r2, [r3, #0]
}
 8007516:	bf00      	nop
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40010000 	.word	0x40010000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40010400 	.word	0x40010400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	40001800 	.word	0x40001800
 8007548:	40001c00 	.word	0x40001c00
 800754c:	40002000 	.word	0x40002000

08007550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d101      	bne.n	800758a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e042      	b.n	8007610 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fb f946 	bl	8002830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2224      	movs	r2, #36	@ 0x24
 80075a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fdd3 	bl	8008168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	695a      	ldr	r2, [r3, #20]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2220      	movs	r2, #32
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	@ 0x28
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b20      	cmp	r3, #32
 8007636:	d175      	bne.n	8007724 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_UART_Transmit+0x2c>
 800763e:	88fb      	ldrh	r3, [r7, #6]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e06e      	b.n	8007726 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2221      	movs	r2, #33	@ 0x21
 8007652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007656:	f7fb fb97 	bl	8002d88 <HAL_GetTick>
 800765a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	88fa      	ldrh	r2, [r7, #6]
 8007660:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	88fa      	ldrh	r2, [r7, #6]
 8007666:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007670:	d108      	bne.n	8007684 <HAL_UART_Transmit+0x6c>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	e003      	b.n	800768c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800768c:	e02e      	b.n	80076ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	2180      	movs	r1, #128	@ 0x80
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fb37 	bl	8007d0c <UART_WaitOnFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e03a      	b.n	8007726 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	881b      	ldrh	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	3302      	adds	r3, #2
 80076ca:	61bb      	str	r3, [r7, #24]
 80076cc:	e007      	b.n	80076de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	3301      	adds	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1cb      	bne.n	800768e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	2200      	movs	r2, #0
 80076fe:	2140      	movs	r1, #64	@ 0x40
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 fb03 	bl	8007d0c <UART_WaitOnFlagUntilTimeout>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e006      	b.n	8007726 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b20      	cmp	r3, #32
 8007746:	d112      	bne.n	800776e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_UART_Receive_IT+0x26>
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e00b      	b.n	8007770 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	461a      	mov	r2, r3
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fb2a 	bl	8007dbe <UART_Start_Receive_IT>
 800776a:	4603      	mov	r3, r0
 800776c:	e000      	b.n	8007770 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800776e:	2302      	movs	r3, #2
  }
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b0ba      	sub	sp, #232	@ 0xe8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800779e:	2300      	movs	r3, #0
 80077a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80077b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10f      	bne.n	80077de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_UART_IRQHandler+0x66>
 80077ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fc07 	bl	8007fea <UART_Receive_IT>
      return;
 80077dc:	e273      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80de 	beq.w	80079a4 <HAL_UART_IRQHandler+0x22c>
 80077e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80d1 	beq.w	80079a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007806:	f003 0301 	and.w	r3, r3, #1
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <HAL_UART_IRQHandler+0xae>
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782a:	f003 0304 	and.w	r3, r3, #4
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <HAL_UART_IRQHandler+0xd2>
 8007832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d005      	beq.n	800784a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007842:	f043 0202 	orr.w	r2, r3, #2
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800784a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <HAL_UART_IRQHandler+0xf6>
 8007856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007866:	f043 0204 	orr.w	r2, r3, #4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <HAL_UART_IRQHandler+0x126>
 800787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f043 0208 	orr.w	r2, r3, #8
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 820a 	beq.w	8007cbc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <HAL_UART_IRQHandler+0x14e>
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb92 	bl	8007fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d0:	2b40      	cmp	r3, #64	@ 0x40
 80078d2:	bf0c      	ite	eq
 80078d4:	2301      	moveq	r3, #1
 80078d6:	2300      	movne	r3, #0
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <HAL_UART_IRQHandler+0x17a>
 80078ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d04f      	beq.n	8007992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa9d 	bl	8007e32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d141      	bne.n	800798a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3314      	adds	r3, #20
 800790c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800791c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3314      	adds	r3, #20
 800792e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007932:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800793e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800794a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1d9      	bne.n	8007906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007956:	2b00      	cmp	r3, #0
 8007958:	d013      	beq.n	8007982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800795e:	4a8a      	ldr	r2, [pc, #552]	@ (8007b88 <HAL_UART_IRQHandler+0x410>)
 8007960:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007966:	4618      	mov	r0, r3
 8007968:	f7fb fb90 	bl	800308c <HAL_DMA_Abort_IT>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800797c:	4610      	mov	r0, r2
 800797e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	e00e      	b.n	80079a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9ac 	bl	8007ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	e00a      	b.n	80079a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9a8 	bl	8007ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	e006      	b.n	80079a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9a4 	bl	8007ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800799e:	e18d      	b.n	8007cbc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	bf00      	nop
    return;
 80079a2:	e18b      	b.n	8007cbc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	f040 8167 	bne.w	8007c7c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8160 	beq.w	8007c7c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8159 	beq.w	8007c7c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079ca:	2300      	movs	r3, #0
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60bb      	str	r3, [r7, #8]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ea:	2b40      	cmp	r3, #64	@ 0x40
 80079ec:	f040 80ce 	bne.w	8007b8c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 80a9 	beq.w	8007b58 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	f080 80a2 	bcs.w	8007b58 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a26:	f000 8088 	beq.w	8007b3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	330c      	adds	r3, #12
 8007a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1d9      	bne.n	8007a2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007aac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e1      	bne.n	8007a76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3314      	adds	r3, #20
 8007ab8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3314      	adds	r3, #20
 8007ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ad6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ad8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007adc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ae4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e3      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b02:	e853 3f00 	ldrex	r3, [r3]
 8007b06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b0a:	f023 0310 	bic.w	r3, r3, #16
 8007b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	330c      	adds	r3, #12
 8007b18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007b1c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007b1e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e3      	bne.n	8007af8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fb fa39 	bl	8002fac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f8cf 	bl	8007cf4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007b56:	e0b3      	b.n	8007cc0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b60:	429a      	cmp	r2, r3
 8007b62:	f040 80ad 	bne.w	8007cc0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b70:	f040 80a6 	bne.w	8007cc0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f8b7 	bl	8007cf4 <HAL_UARTEx_RxEventCallback>
      return;
 8007b86:	e09b      	b.n	8007cc0 <HAL_UART_IRQHandler+0x548>
 8007b88:	08007ef9 	.word	0x08007ef9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 808e 	beq.w	8007cc4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 8089 	beq.w	8007cc4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007bd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007bd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e3      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3314      	adds	r3, #20
 8007c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e3      	bne.n	8007bea <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	330c      	adds	r3, #12
 8007c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	e853 3f00 	ldrex	r3, [r3]
 8007c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0310 	bic.w	r3, r3, #16
 8007c46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	330c      	adds	r3, #12
 8007c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c54:	61fa      	str	r2, [r7, #28]
 8007c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	69b9      	ldr	r1, [r7, #24]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	617b      	str	r3, [r7, #20]
   return(result);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e3      	bne.n	8007c30 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f83d 	bl	8007cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c7a:	e023      	b.n	8007cc4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d009      	beq.n	8007c9c <HAL_UART_IRQHandler+0x524>
 8007c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f940 	bl	8007f1a <UART_Transmit_IT>
    return;
 8007c9a:	e014      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00e      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
 8007ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d008      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f980 	bl	8007fba <UART_EndTransmit_IT>
    return;
 8007cba:	e004      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
    return;
 8007cbc:	bf00      	nop
 8007cbe:	e002      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007cc0:	bf00      	nop
 8007cc2:	e000      	b.n	8007cc6 <HAL_UART_IRQHandler+0x54e>
      return;
 8007cc4:	bf00      	nop
  }
}
 8007cc6:	37e8      	adds	r7, #232	@ 0xe8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d1c:	e03b      	b.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d037      	beq.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d26:	f7fb f82f 	bl	8002d88 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	6a3a      	ldr	r2, [r7, #32]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e03a      	b.n	8007db6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	f003 0304 	and.w	r3, r3, #4
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d023      	beq.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b80      	cmp	r3, #128	@ 0x80
 8007d52:	d020      	beq.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b40      	cmp	r3, #64	@ 0x40
 8007d58:	d01d      	beq.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d116      	bne.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	617b      	str	r3, [r7, #20]
 8007d7c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 f857 	bl	8007e32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2208      	movs	r2, #8
 8007d88:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e00f      	b.n	8007db6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	bf0c      	ite	eq
 8007da6:	2301      	moveq	r3, #1
 8007da8:	2300      	movne	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d0b4      	beq.n	8007d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3718      	adds	r7, #24
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	88fa      	ldrh	r2, [r7, #6]
 8007dd6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2222      	movs	r2, #34	@ 0x22
 8007de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d007      	beq.n	8007e04 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e02:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	695a      	ldr	r2, [r3, #20]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0201 	orr.w	r2, r2, #1
 8007e12:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0220 	orr.w	r2, r2, #32
 8007e22:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b095      	sub	sp, #84	@ 0x54
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	330c      	adds	r3, #12
 8007e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e5      	bne.n	8007e3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3314      	adds	r3, #20
 8007e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3314      	adds	r3, #20
 8007e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d119      	bne.n	8007ede <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	330c      	adds	r3, #12
 8007eb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	e853 3f00 	ldrex	r3, [r3]
 8007eb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f023 0310 	bic.w	r3, r3, #16
 8007ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eca:	61ba      	str	r2, [r7, #24]
 8007ecc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ece:	6979      	ldr	r1, [r7, #20]
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1e5      	bne.n	8007eaa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007eec:	bf00      	nop
 8007eee:	3754      	adds	r7, #84	@ 0x54
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff fee7 	bl	8007ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b21      	cmp	r3, #33	@ 0x21
 8007f2c:	d13e      	bne.n	8007fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	d114      	bne.n	8007f62 <UART_Transmit_IT+0x48>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d110      	bne.n	8007f62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	1c9a      	adds	r2, r3, #2
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	621a      	str	r2, [r3, #32]
 8007f60:	e008      	b.n	8007f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	1c59      	adds	r1, r3, #1
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6211      	str	r1, [r2, #32]
 8007f6c:	781a      	ldrb	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4619      	mov	r1, r3
 8007f82:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10f      	bne.n	8007fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff fe76 	bl	8007ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b08c      	sub	sp, #48	@ 0x30
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b22      	cmp	r3, #34	@ 0x22
 8008004:	f040 80aa 	bne.w	800815c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008010:	d115      	bne.n	800803e <UART_Receive_IT+0x54>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d111      	bne.n	800803e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800802c:	b29a      	uxth	r2, r3
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008036:	1c9a      	adds	r2, r3, #2
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	629a      	str	r2, [r3, #40]	@ 0x28
 800803c:	e024      	b.n	8008088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008042:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804c:	d007      	beq.n	800805e <UART_Receive_IT+0x74>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <UART_Receive_IT+0x82>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e008      	b.n	800807e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008078:	b2da      	uxtb	r2, r3
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008098:	2b00      	cmp	r3, #0
 800809a:	d15d      	bne.n	8008158 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0220 	bic.w	r2, r2, #32
 80080aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695a      	ldr	r2, [r3, #20]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d135      	bne.n	800814e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	613b      	str	r3, [r7, #16]
   return(result);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f023 0310 	bic.w	r3, r3, #16
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008108:	623a      	str	r2, [r7, #32]
 800810a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	69f9      	ldr	r1, [r7, #28]
 800810e:	6a3a      	ldr	r2, [r7, #32]
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	61bb      	str	r3, [r7, #24]
   return(result);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e5      	bne.n	80080e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b10      	cmp	r3, #16
 8008128:	d10a      	bne.n	8008140 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fdd4 	bl	8007cf4 <HAL_UARTEx_RxEventCallback>
 800814c:	e002      	b.n	8008154 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7fa f98a 	bl	8002468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	e002      	b.n	800815e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	e000      	b.n	800815e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800815c:	2302      	movs	r3, #2
  }
}
 800815e:	4618      	mov	r0, r3
 8008160:	3730      	adds	r7, #48	@ 0x30
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800816c:	b0c0      	sub	sp, #256	@ 0x100
 800816e:	af00      	add	r7, sp, #0
 8008170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008184:	68d9      	ldr	r1, [r3, #12]
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	ea40 0301 	orr.w	r3, r0, r1
 8008190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	431a      	orrs	r2, r3
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80081c0:	f021 010c 	bic.w	r1, r1, #12
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081ce:	430b      	orrs	r3, r1
 80081d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e2:	6999      	ldr	r1, [r3, #24]
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	ea40 0301 	orr.w	r3, r0, r1
 80081ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b8f      	ldr	r3, [pc, #572]	@ (8008434 <UART_SetConfig+0x2cc>)
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d005      	beq.n	8008208 <UART_SetConfig+0xa0>
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b8d      	ldr	r3, [pc, #564]	@ (8008438 <UART_SetConfig+0x2d0>)
 8008204:	429a      	cmp	r2, r3
 8008206:	d104      	bne.n	8008212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008208:	f7fe fd0a 	bl	8006c20 <HAL_RCC_GetPCLK2Freq>
 800820c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008210:	e003      	b.n	800821a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008212:	f7fe fcf1 	bl	8006bf8 <HAL_RCC_GetPCLK1Freq>
 8008216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008224:	f040 810c 	bne.w	8008440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822c:	2200      	movs	r2, #0
 800822e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800823a:	4622      	mov	r2, r4
 800823c:	462b      	mov	r3, r5
 800823e:	1891      	adds	r1, r2, r2
 8008240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008242:	415b      	adcs	r3, r3
 8008244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800824a:	4621      	mov	r1, r4
 800824c:	eb12 0801 	adds.w	r8, r2, r1
 8008250:	4629      	mov	r1, r5
 8008252:	eb43 0901 	adc.w	r9, r3, r1
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800826a:	4690      	mov	r8, r2
 800826c:	4699      	mov	r9, r3
 800826e:	4623      	mov	r3, r4
 8008270:	eb18 0303 	adds.w	r3, r8, r3
 8008274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008278:	462b      	mov	r3, r5
 800827a:	eb49 0303 	adc.w	r3, r9, r3
 800827e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800828e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008296:	460b      	mov	r3, r1
 8008298:	18db      	adds	r3, r3, r3
 800829a:	653b      	str	r3, [r7, #80]	@ 0x50
 800829c:	4613      	mov	r3, r2
 800829e:	eb42 0303 	adc.w	r3, r2, r3
 80082a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80082a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082ac:	f7f7 ffe8 	bl	8000280 <__aeabi_uldivmod>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4b61      	ldr	r3, [pc, #388]	@ (800843c <UART_SetConfig+0x2d4>)
 80082b6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	011c      	lsls	r4, r3, #4
 80082be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80082cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80082d0:	4642      	mov	r2, r8
 80082d2:	464b      	mov	r3, r9
 80082d4:	1891      	adds	r1, r2, r2
 80082d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80082d8:	415b      	adcs	r3, r3
 80082da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80082e0:	4641      	mov	r1, r8
 80082e2:	eb12 0a01 	adds.w	sl, r2, r1
 80082e6:	4649      	mov	r1, r9
 80082e8:	eb43 0b01 	adc.w	fp, r3, r1
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008300:	4692      	mov	sl, r2
 8008302:	469b      	mov	fp, r3
 8008304:	4643      	mov	r3, r8
 8008306:	eb1a 0303 	adds.w	r3, sl, r3
 800830a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800830e:	464b      	mov	r3, r9
 8008310:	eb4b 0303 	adc.w	r3, fp, r3
 8008314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800832c:	460b      	mov	r3, r1
 800832e:	18db      	adds	r3, r3, r3
 8008330:	643b      	str	r3, [r7, #64]	@ 0x40
 8008332:	4613      	mov	r3, r2
 8008334:	eb42 0303 	adc.w	r3, r2, r3
 8008338:	647b      	str	r3, [r7, #68]	@ 0x44
 800833a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800833e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008342:	f7f7 ff9d 	bl	8000280 <__aeabi_uldivmod>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4611      	mov	r1, r2
 800834c:	4b3b      	ldr	r3, [pc, #236]	@ (800843c <UART_SetConfig+0x2d4>)
 800834e:	fba3 2301 	umull	r2, r3, r3, r1
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	2264      	movs	r2, #100	@ 0x64
 8008356:	fb02 f303 	mul.w	r3, r2, r3
 800835a:	1acb      	subs	r3, r1, r3
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008362:	4b36      	ldr	r3, [pc, #216]	@ (800843c <UART_SetConfig+0x2d4>)
 8008364:	fba3 2302 	umull	r2, r3, r3, r2
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008370:	441c      	add	r4, r3
 8008372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800837c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	1891      	adds	r1, r2, r2
 800838a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800838c:	415b      	adcs	r3, r3
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008394:	4641      	mov	r1, r8
 8008396:	1851      	adds	r1, r2, r1
 8008398:	6339      	str	r1, [r7, #48]	@ 0x30
 800839a:	4649      	mov	r1, r9
 800839c:	414b      	adcs	r3, r1
 800839e:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083ac:	4659      	mov	r1, fp
 80083ae:	00cb      	lsls	r3, r1, #3
 80083b0:	4651      	mov	r1, sl
 80083b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083b6:	4651      	mov	r1, sl
 80083b8:	00ca      	lsls	r2, r1, #3
 80083ba:	4610      	mov	r0, r2
 80083bc:	4619      	mov	r1, r3
 80083be:	4603      	mov	r3, r0
 80083c0:	4642      	mov	r2, r8
 80083c2:	189b      	adds	r3, r3, r2
 80083c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083c8:	464b      	mov	r3, r9
 80083ca:	460a      	mov	r2, r1
 80083cc:	eb42 0303 	adc.w	r3, r2, r3
 80083d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80083e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083e8:	460b      	mov	r3, r1
 80083ea:	18db      	adds	r3, r3, r3
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083ee:	4613      	mov	r3, r2
 80083f0:	eb42 0303 	adc.w	r3, r2, r3
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083fe:	f7f7 ff3f 	bl	8000280 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <UART_SetConfig+0x2d4>)
 8008408:	fba3 1302 	umull	r1, r3, r3, r2
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	2164      	movs	r1, #100	@ 0x64
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	3332      	adds	r3, #50	@ 0x32
 800841a:	4a08      	ldr	r2, [pc, #32]	@ (800843c <UART_SetConfig+0x2d4>)
 800841c:	fba2 2303 	umull	r2, r3, r2, r3
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	f003 0207 	and.w	r2, r3, #7
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4422      	add	r2, r4
 800842e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008430:	e106      	b.n	8008640 <UART_SetConfig+0x4d8>
 8008432:	bf00      	nop
 8008434:	40011000 	.word	0x40011000
 8008438:	40011400 	.word	0x40011400
 800843c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008444:	2200      	movs	r2, #0
 8008446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800844a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800844e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008452:	4642      	mov	r2, r8
 8008454:	464b      	mov	r3, r9
 8008456:	1891      	adds	r1, r2, r2
 8008458:	6239      	str	r1, [r7, #32]
 800845a:	415b      	adcs	r3, r3
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
 800845e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008462:	4641      	mov	r1, r8
 8008464:	1854      	adds	r4, r2, r1
 8008466:	4649      	mov	r1, r9
 8008468:	eb43 0501 	adc.w	r5, r3, r1
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	f04f 0300 	mov.w	r3, #0
 8008474:	00eb      	lsls	r3, r5, #3
 8008476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800847a:	00e2      	lsls	r2, r4, #3
 800847c:	4614      	mov	r4, r2
 800847e:	461d      	mov	r5, r3
 8008480:	4643      	mov	r3, r8
 8008482:	18e3      	adds	r3, r4, r3
 8008484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008488:	464b      	mov	r3, r9
 800848a:	eb45 0303 	adc.w	r3, r5, r3
 800848e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800849e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084ae:	4629      	mov	r1, r5
 80084b0:	008b      	lsls	r3, r1, #2
 80084b2:	4621      	mov	r1, r4
 80084b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b8:	4621      	mov	r1, r4
 80084ba:	008a      	lsls	r2, r1, #2
 80084bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80084c0:	f7f7 fede 	bl	8000280 <__aeabi_uldivmod>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4b60      	ldr	r3, [pc, #384]	@ (800864c <UART_SetConfig+0x4e4>)
 80084ca:	fba3 2302 	umull	r2, r3, r3, r2
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	011c      	lsls	r4, r3, #4
 80084d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80084e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	1891      	adds	r1, r2, r2
 80084ea:	61b9      	str	r1, [r7, #24]
 80084ec:	415b      	adcs	r3, r3
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084f4:	4641      	mov	r1, r8
 80084f6:	1851      	adds	r1, r2, r1
 80084f8:	6139      	str	r1, [r7, #16]
 80084fa:	4649      	mov	r1, r9
 80084fc:	414b      	adcs	r3, r1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800850c:	4659      	mov	r1, fp
 800850e:	00cb      	lsls	r3, r1, #3
 8008510:	4651      	mov	r1, sl
 8008512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008516:	4651      	mov	r1, sl
 8008518:	00ca      	lsls	r2, r1, #3
 800851a:	4610      	mov	r0, r2
 800851c:	4619      	mov	r1, r3
 800851e:	4603      	mov	r3, r0
 8008520:	4642      	mov	r2, r8
 8008522:	189b      	adds	r3, r3, r2
 8008524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008528:	464b      	mov	r3, r9
 800852a:	460a      	mov	r2, r1
 800852c:	eb42 0303 	adc.w	r3, r2, r3
 8008530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800853e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800854c:	4649      	mov	r1, r9
 800854e:	008b      	lsls	r3, r1, #2
 8008550:	4641      	mov	r1, r8
 8008552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008556:	4641      	mov	r1, r8
 8008558:	008a      	lsls	r2, r1, #2
 800855a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800855e:	f7f7 fe8f 	bl	8000280 <__aeabi_uldivmod>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4611      	mov	r1, r2
 8008568:	4b38      	ldr	r3, [pc, #224]	@ (800864c <UART_SetConfig+0x4e4>)
 800856a:	fba3 2301 	umull	r2, r3, r3, r1
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	2264      	movs	r2, #100	@ 0x64
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	1acb      	subs	r3, r1, r3
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	3332      	adds	r3, #50	@ 0x32
 800857c:	4a33      	ldr	r2, [pc, #204]	@ (800864c <UART_SetConfig+0x4e4>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008588:	441c      	add	r4, r3
 800858a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800858e:	2200      	movs	r2, #0
 8008590:	673b      	str	r3, [r7, #112]	@ 0x70
 8008592:	677a      	str	r2, [r7, #116]	@ 0x74
 8008594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	1891      	adds	r1, r2, r2
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	415b      	adcs	r3, r3
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085a8:	4641      	mov	r1, r8
 80085aa:	1851      	adds	r1, r2, r1
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	4649      	mov	r1, r9
 80085b0:	414b      	adcs	r3, r1
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085c0:	4659      	mov	r1, fp
 80085c2:	00cb      	lsls	r3, r1, #3
 80085c4:	4651      	mov	r1, sl
 80085c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ca:	4651      	mov	r1, sl
 80085cc:	00ca      	lsls	r2, r1, #3
 80085ce:	4610      	mov	r0, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	4642      	mov	r2, r8
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085da:	464b      	mov	r3, r9
 80085dc:	460a      	mov	r2, r1
 80085de:	eb42 0303 	adc.w	r3, r2, r3
 80085e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80085ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085fc:	4649      	mov	r1, r9
 80085fe:	008b      	lsls	r3, r1, #2
 8008600:	4641      	mov	r1, r8
 8008602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008606:	4641      	mov	r1, r8
 8008608:	008a      	lsls	r2, r1, #2
 800860a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800860e:	f7f7 fe37 	bl	8000280 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <UART_SetConfig+0x4e4>)
 8008618:	fba3 1302 	umull	r1, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	2164      	movs	r1, #100	@ 0x64
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	3332      	adds	r3, #50	@ 0x32
 800862a:	4a08      	ldr	r2, [pc, #32]	@ (800864c <UART_SetConfig+0x4e4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f003 020f 	and.w	r2, r3, #15
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4422      	add	r2, r4
 800863e:	609a      	str	r2, [r3, #8]
}
 8008640:	bf00      	nop
 8008642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008646:	46bd      	mov	sp, r7
 8008648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800864c:	51eb851f 	.word	0x51eb851f

08008650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008650:	b084      	sub	sp, #16
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	f107 001c 	add.w	r0, r7, #28
 800865e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008662:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008666:	2b01      	cmp	r3, #1
 8008668:	d123      	bne.n	80086b2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800867e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008692:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008696:	2b01      	cmp	r3, #1
 8008698:	d105      	bne.n	80086a6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9dc 	bl	8008a64 <USB_CoreReset>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
 80086b0:	e01b      	b.n	80086ea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9d0 	bl	8008a64 <USB_CoreReset>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	639a      	str	r2, [r3, #56]	@ 0x38
 80086dc:	e005      	b.n	80086ea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086ea:	7fbb      	ldrb	r3, [r7, #30]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10b      	bne.n	8008708 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f043 0206 	orr.w	r2, r3, #6
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f043 0220 	orr.w	r2, r3, #32
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008714:	b004      	add	sp, #16
 8008716:	4770      	bx	lr

08008718 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f043 0201 	orr.w	r2, r3, #1
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f023 0201 	bic.w	r2, r3, #1
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d115      	bne.n	80087aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800878a:	200a      	movs	r0, #10
 800878c:	f7fa fb08 	bl	8002da0 <HAL_Delay>
      ms += 10U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	330a      	adds	r3, #10
 8008794:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f956 	bl	8008a48 <USB_GetMode>
 800879c:	4603      	mov	r3, r0
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d01e      	beq.n	80087e0 <USB_SetCurrentMode+0x84>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80087a6:	d9f0      	bls.n	800878a <USB_SetCurrentMode+0x2e>
 80087a8:	e01a      	b.n	80087e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d115      	bne.n	80087dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80087bc:	200a      	movs	r0, #10
 80087be:	f7fa faef 	bl	8002da0 <HAL_Delay>
      ms += 10U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	330a      	adds	r3, #10
 80087c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f93d 	bl	8008a48 <USB_GetMode>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <USB_SetCurrentMode+0x84>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2bc7      	cmp	r3, #199	@ 0xc7
 80087d8:	d9f0      	bls.n	80087bc <USB_SetCurrentMode+0x60>
 80087da:	e001      	b.n	80087e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e005      	b.n	80087ec <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2bc8      	cmp	r3, #200	@ 0xc8
 80087e4:	d101      	bne.n	80087ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3301      	adds	r3, #1
 8008806:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800880e:	d901      	bls.n	8008814 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e01b      	b.n	800884c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	daf2      	bge.n	8008802 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	019b      	lsls	r3, r3, #6
 8008824:	f043 0220 	orr.w	r2, r3, #32
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008838:	d901      	bls.n	800883e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e006      	b.n	800884c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0320 	and.w	r3, r3, #32
 8008846:	2b20      	cmp	r3, #32
 8008848:	d0f0      	beq.n	800882c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800884a:	2300      	movs	r3, #0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3714      	adds	r7, #20
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008870:	d901      	bls.n	8008876 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e018      	b.n	80088a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	2b00      	cmp	r3, #0
 800887c:	daf2      	bge.n	8008864 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2210      	movs	r2, #16
 8008886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008894:	d901      	bls.n	800889a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e006      	b.n	80088a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d0f0      	beq.n	8008888 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3714      	adds	r7, #20
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	@ 0x24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4611      	mov	r1, r2
 80088c0:	461a      	mov	r2, r3
 80088c2:	460b      	mov	r3, r1
 80088c4:	71fb      	strb	r3, [r7, #7]
 80088c6:	4613      	mov	r3, r2
 80088c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80088d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d123      	bne.n	8008922 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80088da:	88bb      	ldrh	r3, [r7, #4]
 80088dc:	3303      	adds	r3, #3
 80088de:	089b      	lsrs	r3, r3, #2
 80088e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088e2:	2300      	movs	r3, #0
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	e018      	b.n	800891a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	031a      	lsls	r2, r3, #12
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f4:	461a      	mov	r2, r3
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	3301      	adds	r3, #1
 8008906:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	3301      	adds	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	3301      	adds	r3, #1
 8008912:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	3301      	adds	r3, #1
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	429a      	cmp	r2, r3
 8008920:	d3e2      	bcc.n	80088e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3724      	adds	r7, #36	@ 0x24
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008930:	b480      	push	{r7}
 8008932:	b08b      	sub	sp, #44	@ 0x2c
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	089b      	lsrs	r3, r3, #2
 800894a:	b29b      	uxth	r3, r3
 800894c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800894e:	88fb      	ldrh	r3, [r7, #6]
 8008950:	f003 0303 	and.w	r3, r3, #3
 8008954:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008956:	2300      	movs	r3, #0
 8008958:	623b      	str	r3, [r7, #32]
 800895a:	e014      	b.n	8008986 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	601a      	str	r2, [r3, #0]
    pDest++;
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	3301      	adds	r3, #1
 800896c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	3301      	adds	r3, #1
 8008972:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	3301      	adds	r3, #1
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	3301      	adds	r3, #1
 800897e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	3301      	adds	r3, #1
 8008984:	623b      	str	r3, [r7, #32]
 8008986:	6a3a      	ldr	r2, [r7, #32]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	429a      	cmp	r2, r3
 800898c:	d3e6      	bcc.n	800895c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800898e:	8bfb      	ldrh	r3, [r7, #30]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01e      	beq.n	80089d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899e:	461a      	mov	r2, r3
 80089a0:	f107 0310 	add.w	r3, r7, #16
 80089a4:	6812      	ldr	r2, [r2, #0]
 80089a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	fa22 f303 	lsr.w	r3, r2, r3
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	701a      	strb	r2, [r3, #0]
      i++;
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	3301      	adds	r3, #1
 80089be:	623b      	str	r3, [r7, #32]
      pDest++;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	3301      	adds	r3, #1
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80089c6:	8bfb      	ldrh	r3, [r7, #30]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80089cc:	8bfb      	ldrh	r3, [r7, #30]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1ea      	bne.n	80089a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	372c      	adds	r7, #44	@ 0x2c
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4013      	ands	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089f8:	68fb      	ldr	r3, [r7, #12]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	015a      	lsls	r2, r3, #5
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	4013      	ands	r3, r2
 8008a38:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	f003 0301 	and.w	r3, r3, #1
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a7c:	d901      	bls.n	8008a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e022      	b.n	8008ac8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	691b      	ldr	r3, [r3, #16]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	daf2      	bge.n	8008a70 <USB_CoreReset+0xc>

  count = 10U;
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8008a8e:	e002      	b.n	8008a96 <USB_CoreReset+0x32>
  {
    count--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1f9      	bne.n	8008a90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f043 0201 	orr.w	r2, r3, #1
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ab4:	d901      	bls.n	8008aba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e006      	b.n	8008ac8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d0f0      	beq.n	8008aa8 <USB_CoreReset+0x44>

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b086      	sub	sp, #24
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008af4:	461a      	mov	r2, r3
 8008af6:	2300      	movs	r3, #0
 8008af8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d119      	bne.n	8008b5e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d10a      	bne.n	8008b48 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b40:	f043 0304 	orr.w	r3, r3, #4
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	e014      	b.n	8008b72 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b56:	f023 0304 	bic.w	r3, r3, #4
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	e009      	b.n	8008b72 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008b6c:	f023 0304 	bic.w	r3, r3, #4
 8008b70:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b72:	2110      	movs	r1, #16
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff fe3d 	bl	80087f4 <USB_FlushTxFifo>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7ff fe67 	bl	8008858 <USB_FlushRxFifo>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008b94:	2300      	movs	r3, #0
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	e015      	b.n	8008bc6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	613b      	str	r3, [r7, #16]
 8008bc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008bca:	461a      	mov	r2, r3
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d3e3      	bcc.n	8008b9a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a18      	ldr	r2, [pc, #96]	@ (8008c44 <USB_HostInit+0x170>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d10b      	bne.n	8008c00 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008bee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	@ (8008c48 <USB_HostInit+0x174>)
 8008bf4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a14      	ldr	r2, [pc, #80]	@ (8008c4c <USB_HostInit+0x178>)
 8008bfa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008bfe:	e009      	b.n	8008c14 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2280      	movs	r2, #128	@ 0x80
 8008c04:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a11      	ldr	r2, [pc, #68]	@ (8008c50 <USB_HostInit+0x17c>)
 8008c0a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a11      	ldr	r2, [pc, #68]	@ (8008c54 <USB_HostInit+0x180>)
 8008c10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	f043 0210 	orr.w	r2, r3, #16
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c58 <USB_HostInit+0x184>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c40:	b004      	add	sp, #16
 8008c42:	4770      	bx	lr
 8008c44:	40040000 	.word	0x40040000
 8008c48:	01000200 	.word	0x01000200
 8008c4c:	00e00300 	.word	0x00e00300
 8008c50:	00600080 	.word	0x00600080
 8008c54:	004000e0 	.word	0x004000e0
 8008c58:	a3200008 	.word	0xa3200008

08008c5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	460b      	mov	r3, r1
 8008c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c7a:	f023 0303 	bic.w	r3, r3, #3
 8008c7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	68f9      	ldr	r1, [r7, #12]
 8008c90:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008c94:	4313      	orrs	r3, r2
 8008c96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d107      	bne.n	8008cae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008caa:	6053      	str	r3, [r2, #4]
 8008cac:	e00c      	b.n	8008cc8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d107      	bne.n	8008cc4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008cc0:	6053      	str	r3, [r2, #4]
 8008cc2:	e001      	b.n	8008cc8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e000      	b.n	8008cca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008cf6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d04:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d06:	2064      	movs	r0, #100	@ 0x64
 8008d08:	f7fa f84a 	bl	8002da0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d18:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008d1a:	200a      	movs	r0, #10
 8008d1c:	f7fa f840 	bl	8002da0 <HAL_Delay>

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d4e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <USB_DriveVbus+0x44>
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d106      	bne.n	8008d6e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008d6c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d78:	d109      	bne.n	8008d8e <USB_DriveVbus+0x64>
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008d88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d8c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	0c5b      	lsrs	r3, r3, #17
 8008dba:	f003 0303 	and.w	r3, r3, #3
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	b29b      	uxth	r3, r3
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b088      	sub	sp, #32
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	70fb      	strb	r3, [r7, #3]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	70bb      	strb	r3, [r7, #2]
 8008e02:	4613      	mov	r3, r2
 8008e04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008e0e:	78fb      	ldrb	r3, [r7, #3]
 8008e10:	015a      	lsls	r2, r3, #5
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	4413      	add	r3, r2
 8008e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008e22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d87c      	bhi.n	8008f24 <USB_HC_Init+0x138>
 8008e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e30 <USB_HC_Init+0x44>)
 8008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e30:	08008e41 	.word	0x08008e41
 8008e34:	08008ee7 	.word	0x08008ee7
 8008e38:	08008e41 	.word	0x08008e41
 8008e3c:	08008ea9 	.word	0x08008ea9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008e52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008e54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	da10      	bge.n	8008e7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e7a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008e7c:	e055      	b.n	8008f2a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a6f      	ldr	r2, [pc, #444]	@ (8009040 <USB_HC_Init+0x254>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d151      	bne.n	8008f2a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	015a      	lsls	r2, r3, #5
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	78fa      	ldrb	r2, [r7, #3]
 8008e96:	0151      	lsls	r1, r2, #5
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ea0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008ea4:	60d3      	str	r3, [r2, #12]
      break;
 8008ea6:	e040      	b.n	8008f2a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008eba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ebc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	da34      	bge.n	8008f2e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	78fa      	ldrb	r2, [r7, #3]
 8008ed4:	0151      	lsls	r1, r2, #5
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	440a      	add	r2, r1
 8008eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ee2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008ee4:	e023      	b.n	8008f2e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	015a      	lsls	r2, r3, #5
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	4413      	add	r3, r2
 8008eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f240 2325 	movw	r3, #549	@ 0x225
 8008ef8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008efa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da17      	bge.n	8008f32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	78fa      	ldrb	r2, [r7, #3]
 8008f12:	0151      	lsls	r1, r2, #5
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	440a      	add	r2, r1
 8008f18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008f20:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008f22:	e006      	b.n	8008f32 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	77fb      	strb	r3, [r7, #31]
      break;
 8008f28:	e004      	b.n	8008f34 <USB_HC_Init+0x148>
      break;
 8008f2a:	bf00      	nop
 8008f2c:	e002      	b.n	8008f34 <USB_HC_Init+0x148>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <USB_HC_Init+0x148>
      break;
 8008f32:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f40:	461a      	mov	r2, r3
 8008f42:	2300      	movs	r3, #0
 8008f44:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	78fb      	ldrb	r3, [r7, #3]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	2101      	movs	r1, #1
 8008f76:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7a:	6939      	ldr	r1, [r7, #16]
 8008f7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008f80:	4313      	orrs	r3, r2
 8008f82:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008f90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	da03      	bge.n	8008fa0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008f98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f9c:	61bb      	str	r3, [r7, #24]
 8008f9e:	e001      	b.n	8008fa4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fef9 	bl	8008d9c <USB_GetHostSpeed>
 8008faa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008fac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d106      	bne.n	8008fc2 <USB_HC_Init+0x1d6>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d003      	beq.n	8008fc2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008fba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e001      	b.n	8008fc6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fc6:	787b      	ldrb	r3, [r7, #1]
 8008fc8:	059b      	lsls	r3, r3, #22
 8008fca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fce:	78bb      	ldrb	r3, [r7, #2]
 8008fd0:	02db      	lsls	r3, r3, #11
 8008fd2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008fd6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008fdc:	049b      	lsls	r3, r3, #18
 8008fde:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008fe2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008fe4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008fea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009004:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009006:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800900a:	2b03      	cmp	r3, #3
 800900c:	d003      	beq.n	8009016 <USB_HC_Init+0x22a>
 800900e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009012:	2b01      	cmp	r3, #1
 8009014:	d10f      	bne.n	8009036 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4413      	add	r3, r2
 800901e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	0151      	lsls	r1, r2, #5
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	440a      	add	r2, r1
 800902c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009030:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009034:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009036:	7ffb      	ldrb	r3, [r7, #31]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3720      	adds	r7, #32
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	40040000 	.word	0x40040000

08009044 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08c      	sub	sp, #48	@ 0x30
 8009048:	af02      	add	r7, sp, #8
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800905c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009060:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a5d      	ldr	r2, [pc, #372]	@ (80091dc <USB_HC_StartXfer+0x198>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d12f      	bne.n	80090ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d11c      	bne.n	80090aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	7c9b      	ldrb	r3, [r3, #18]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <USB_HC_StartXfer+0x3c>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	7c9b      	ldrb	r3, [r3, #18]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d124      	bne.n	80090ca <USB_HC_StartXfer+0x86>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	799b      	ldrb	r3, [r3, #6]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d120      	bne.n	80090ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	4413      	add	r3, r2
 8009090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	6a3a      	ldr	r2, [r7, #32]
 800909c:	440a      	add	r2, r1
 800909e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a6:	60d3      	str	r3, [r2, #12]
 80090a8:	e00f      	b.n	80090ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10b      	bne.n	80090ca <USB_HC_StartXfer+0x86>
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	795b      	ldrb	r3, [r3, #5]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d107      	bne.n	80090ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	4619      	mov	r1, r3
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fb6b 	bl	800979c <USB_DoPing>
        return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e232      	b.n	8009530 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	799b      	ldrb	r3, [r3, #6]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d158      	bne.n	8009184 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80090d2:	2301      	movs	r3, #1
 80090d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	78db      	ldrb	r3, [r3, #3]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80090de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	8a92      	ldrh	r2, [r2, #20]
 80090e4:	fb03 f202 	mul.w	r2, r3, r2
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	61da      	str	r2, [r3, #28]
 80090ec:	e07c      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	7c9b      	ldrb	r3, [r3, #18]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d130      	bne.n	8009158 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80090fc:	d918      	bls.n	8009130 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	8a9b      	ldrh	r3, [r3, #20]
 8009102:	461a      	mov	r2, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d003      	beq.n	8009120 <USB_HC_StartXfer+0xdc>
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	2b02      	cmp	r3, #2
 800911e:	d103      	bne.n	8009128 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2202      	movs	r2, #2
 8009124:	60da      	str	r2, [r3, #12]
 8009126:	e05f      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2201      	movs	r2, #1
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	e05b      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6a1a      	ldr	r2, [r3, #32]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d007      	beq.n	8009150 <USB_HC_StartXfer+0x10c>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d003      	beq.n	8009150 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2204      	movs	r2, #4
 800914c:	60da      	str	r2, [r3, #12]
 800914e:	e04b      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2203      	movs	r2, #3
 8009154:	60da      	str	r2, [r3, #12]
 8009156:	e047      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d10d      	bne.n	800917a <USB_HC_StartXfer+0x136>
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	8a92      	ldrh	r2, [r2, #20]
 8009166:	4293      	cmp	r3, r2
 8009168:	d907      	bls.n	800917a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800916a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	8a92      	ldrh	r2, [r2, #20]
 8009170:	fb03 f202 	mul.w	r2, r3, r2
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	61da      	str	r2, [r3, #28]
 8009178:	e036      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	6a1a      	ldr	r2, [r3, #32]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	61da      	str	r2, [r3, #28]
 8009182:	e031      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d018      	beq.n	80091be <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	8a92      	ldrh	r2, [r2, #20]
 8009194:	4413      	add	r3, r2
 8009196:	3b01      	subs	r3, #1
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	8a92      	ldrh	r2, [r2, #20]
 800919c:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80091a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80091a4:	8b7b      	ldrh	r3, [r7, #26]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d90b      	bls.n	80091c2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80091aa:	8b7b      	ldrh	r3, [r7, #26]
 80091ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	8a92      	ldrh	r2, [r2, #20]
 80091b4:	fb03 f202 	mul.w	r2, r3, r2
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	61da      	str	r2, [r3, #28]
 80091bc:	e001      	b.n	80091c2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80091be:	2301      	movs	r3, #1
 80091c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	78db      	ldrb	r3, [r3, #3]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80091ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	8a92      	ldrh	r2, [r2, #20]
 80091d0:	fb03 f202 	mul.w	r2, r3, r2
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	61da      	str	r2, [r3, #28]
 80091d8:	e006      	b.n	80091e8 <USB_HC_StartXfer+0x1a4>
 80091da:	bf00      	nop
 80091dc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	6a1a      	ldr	r2, [r3, #32]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091f2:	04d9      	lsls	r1, r3, #19
 80091f4:	4ba3      	ldr	r3, [pc, #652]	@ (8009484 <USB_HC_StartXfer+0x440>)
 80091f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	7d9b      	ldrb	r3, [r3, #22]
 80091fe:	075b      	lsls	r3, r3, #29
 8009200:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009204:	69f9      	ldr	r1, [r7, #28]
 8009206:	0148      	lsls	r0, r1, #5
 8009208:	6a39      	ldr	r1, [r7, #32]
 800920a:	4401      	add	r1, r0
 800920c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009210:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009212:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d009      	beq.n	800922e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6999      	ldr	r1, [r3, #24]
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	4413      	add	r3, r2
 8009226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800922a:	460a      	mov	r2, r1
 800922c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	bf0c      	ite	eq
 800923e:	2301      	moveq	r3, #1
 8009240:	2300      	movne	r3, #0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	4413      	add	r3, r2
 800924e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69fa      	ldr	r2, [r7, #28]
 8009256:	0151      	lsls	r1, r2, #5
 8009258:	6a3a      	ldr	r2, [r7, #32]
 800925a:	440a      	add	r2, r1
 800925c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009260:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009264:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	7e7b      	ldrb	r3, [r7, #25]
 8009276:	075b      	lsls	r3, r3, #29
 8009278:	69f9      	ldr	r1, [r7, #28]
 800927a:	0148      	lsls	r0, r1, #5
 800927c:	6a39      	ldr	r1, [r7, #32]
 800927e:	4401      	add	r1, r0
 8009280:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8009284:	4313      	orrs	r3, r2
 8009286:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	799b      	ldrb	r3, [r3, #6]
 800928c:	2b01      	cmp	r3, #1
 800928e:	f040 80c3 	bne.w	8009418 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	7c5b      	ldrb	r3, [r3, #17]
 8009296:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800929c:	4313      	orrs	r3, r2
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	6a3a      	ldr	r2, [r7, #32]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80092aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80092ae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	6a3b      	ldr	r3, [r7, #32]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	69fa      	ldr	r2, [r7, #28]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	6a3a      	ldr	r2, [r7, #32]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80092ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	79db      	ldrb	r3, [r3, #7]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d123      	bne.n	8009320 <USB_HC_StartXfer+0x2dc>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	78db      	ldrb	r3, [r3, #3]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d11f      	bne.n	8009320 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	69fa      	ldr	r2, [r7, #28]
 80092f0:	0151      	lsls	r1, r2, #5
 80092f2:	6a3a      	ldr	r2, [r7, #32]
 80092f4:	440a      	add	r2, r1
 80092f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092fe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	4413      	add	r3, r2
 8009308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	69fa      	ldr	r2, [r7, #28]
 8009310:	0151      	lsls	r1, r2, #5
 8009312:	6a3a      	ldr	r2, [r7, #32]
 8009314:	440a      	add	r2, r1
 8009316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800931a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	7c9b      	ldrb	r3, [r3, #18]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d003      	beq.n	8009330 <USB_HC_StartXfer+0x2ec>
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	7c9b      	ldrb	r3, [r3, #18]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d117      	bne.n	8009360 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009334:	2b01      	cmp	r3, #1
 8009336:	d113      	bne.n	8009360 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	78db      	ldrb	r3, [r3, #3]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10f      	bne.n	8009360 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	4413      	add	r3, r2
 8009348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	440a      	add	r2, r1
 8009356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800935a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800935e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	7c9b      	ldrb	r3, [r3, #18]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d162      	bne.n	800942e <USB_HC_StartXfer+0x3ea>
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	78db      	ldrb	r3, [r3, #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d15e      	bne.n	800942e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	3b01      	subs	r3, #1
 8009376:	2b03      	cmp	r3, #3
 8009378:	d858      	bhi.n	800942c <USB_HC_StartXfer+0x3e8>
 800937a:	a201      	add	r2, pc, #4	@ (adr r2, 8009380 <USB_HC_StartXfer+0x33c>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	08009391 	.word	0x08009391
 8009384:	080093b3 	.word	0x080093b3
 8009388:	080093d5 	.word	0x080093d5
 800938c:	080093f7 	.word	0x080093f7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	015a      	lsls	r2, r3, #5
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	4413      	add	r3, r2
 8009398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	0151      	lsls	r1, r2, #5
 80093a2:	6a3a      	ldr	r2, [r7, #32]
 80093a4:	440a      	add	r2, r1
 80093a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093ae:	6053      	str	r3, [r2, #4]
          break;
 80093b0:	e03d      	b.n	800942e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	015a      	lsls	r2, r3, #5
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	4413      	add	r3, r2
 80093ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	0151      	lsls	r1, r2, #5
 80093c4:	6a3a      	ldr	r2, [r7, #32]
 80093c6:	440a      	add	r2, r1
 80093c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093cc:	f043 030e 	orr.w	r3, r3, #14
 80093d0:	6053      	str	r3, [r2, #4]
          break;
 80093d2:	e02c      	b.n	800942e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	69fa      	ldr	r2, [r7, #28]
 80093e4:	0151      	lsls	r1, r2, #5
 80093e6:	6a3a      	ldr	r2, [r7, #32]
 80093e8:	440a      	add	r2, r1
 80093ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093f2:	6053      	str	r3, [r2, #4]
          break;
 80093f4:	e01b      	b.n	800942e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	015a      	lsls	r2, r3, #5
 80093fa:	6a3b      	ldr	r3, [r7, #32]
 80093fc:	4413      	add	r3, r2
 80093fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	69fa      	ldr	r2, [r7, #28]
 8009406:	0151      	lsls	r1, r2, #5
 8009408:	6a3a      	ldr	r2, [r7, #32]
 800940a:	440a      	add	r2, r1
 800940c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009410:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009414:	6053      	str	r3, [r2, #4]
          break;
 8009416:	e00a      	b.n	800942e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	4413      	add	r3, r2
 8009420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009424:	461a      	mov	r2, r3
 8009426:	2300      	movs	r3, #0
 8009428:	6053      	str	r3, [r2, #4]
 800942a:	e000      	b.n	800942e <USB_HC_StartXfer+0x3ea>
          break;
 800942c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	015a      	lsls	r2, r3, #5
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	4413      	add	r3, r2
 8009436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009444:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	78db      	ldrb	r3, [r3, #3]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d004      	beq.n	8009458 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	e003      	b.n	8009460 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800945e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009466:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	4413      	add	r3, r2
 8009470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009474:	461a      	mov	r2, r3
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800947a:	79fb      	ldrb	r3, [r7, #7]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	e055      	b.n	8009530 <USB_HC_StartXfer+0x4ec>
 8009484:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	78db      	ldrb	r3, [r3, #3]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d14e      	bne.n	800952e <USB_HC_StartXfer+0x4ea>
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d04a      	beq.n	800952e <USB_HC_StartXfer+0x4ea>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	79db      	ldrb	r3, [r3, #7]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d146      	bne.n	800952e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	7c9b      	ldrb	r3, [r3, #18]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d831      	bhi.n	800950c <USB_HC_StartXfer+0x4c8>
 80094a8:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <USB_HC_StartXfer+0x46c>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094e5 	.word	0x080094e5
 80094b8:	080094c1 	.word	0x080094c1
 80094bc:	080094e5 	.word	0x080094e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	6a1b      	ldr	r3, [r3, #32]
 80094c4:	3303      	adds	r3, #3
 80094c6:	089b      	lsrs	r3, r3, #2
 80094c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80094ca:	8afa      	ldrh	r2, [r7, #22]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d91c      	bls.n	8009510 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80094e2:	e015      	b.n	8009510 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	3303      	adds	r3, #3
 80094ea:	089b      	lsrs	r3, r3, #2
 80094ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80094ee:	8afa      	ldrh	r2, [r7, #22]
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d90a      	bls.n	8009514 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	619a      	str	r2, [r3, #24]
        }
        break;
 800950a:	e003      	b.n	8009514 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800950c:	bf00      	nop
 800950e:	e002      	b.n	8009516 <USB_HC_StartXfer+0x4d2>
        break;
 8009510:	bf00      	nop
 8009512:	e000      	b.n	8009516 <USB_HC_StartXfer+0x4d2>
        break;
 8009514:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6999      	ldr	r1, [r3, #24]
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	785a      	ldrb	r2, [r3, #1]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	b29b      	uxth	r3, r3
 8009524:	2000      	movs	r0, #0
 8009526:	9000      	str	r0, [sp, #0]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff f9c3 	bl	80088b4 <USB_WritePacket>
  }

  return HAL_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3728      	adds	r7, #40	@ 0x28
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	b29b      	uxth	r3, r3
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800955a:	b480      	push	{r7}
 800955c:	b089      	sub	sp, #36	@ 0x24
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	0c9b      	lsrs	r3, r3, #18
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	4413      	add	r3, r2
 8009590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	0fdb      	lsrs	r3, r3, #31
 8009598:	f003 0301 	and.w	r3, r3, #1
 800959c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	0fdb      	lsrs	r3, r3, #31
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 0320 	and.w	r3, r3, #32
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d10d      	bne.n	80095dc <USB_HC_Halt+0x82>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10a      	bne.n	80095dc <USB_HC_Halt+0x82>
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d002      	beq.n	80095d8 <USB_HC_Halt+0x7e>
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d101      	bne.n	80095dc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	e0d8      	b.n	800978e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <USB_HC_Halt+0x8e>
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d173      	bne.n	80096d0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	0151      	lsls	r1, r2, #5
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	440a      	add	r2, r1
 80095fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009606:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	d14a      	bne.n	80096aa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009618:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d133      	bne.n	8009688 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	015a      	lsls	r2, r3, #5
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	4413      	add	r3, r2
 8009628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	0151      	lsls	r1, r2, #5
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	440a      	add	r2, r1
 8009636:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800963a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800963e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	015a      	lsls	r2, r3, #5
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	4413      	add	r3, r2
 8009648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	0151      	lsls	r1, r2, #5
 8009652:	69fa      	ldr	r2, [r7, #28]
 8009654:	440a      	add	r2, r1
 8009656:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800965a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800965e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	3301      	adds	r3, #1
 8009664:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800966c:	d82e      	bhi.n	80096cc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009684:	d0ec      	beq.n	8009660 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009686:	e081      	b.n	800978c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	4413      	add	r3, r2
 8009690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69ba      	ldr	r2, [r7, #24]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	440a      	add	r2, r1
 800969e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096a8:	e070      	b.n	800978c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	0151      	lsls	r1, r2, #5
 80096bc:	69fa      	ldr	r2, [r7, #28]
 80096be:	440a      	add	r2, r1
 80096c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80096c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096ca:	e05f      	b.n	800978c <USB_HC_Halt+0x232>
            break;
 80096cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096ce:	e05d      	b.n	800978c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	69fa      	ldr	r2, [r7, #28]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d133      	bne.n	8009768 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4413      	add	r3, r2
 8009708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	0151      	lsls	r1, r2, #5
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	440a      	add	r2, r1
 8009716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800971a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800971e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	0151      	lsls	r1, r2, #5
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	440a      	add	r2, r1
 8009736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800973a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800973e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	3301      	adds	r3, #1
 8009744:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800974c:	d81d      	bhi.n	800978a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009764:	d0ec      	beq.n	8009740 <USB_HC_Halt+0x1e6>
 8009766:	e011      	b.n	800978c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	0151      	lsls	r1, r2, #5
 800977a:	69fa      	ldr	r2, [r7, #28]
 800977c:	440a      	add	r2, r1
 800977e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009782:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	e000      	b.n	800978c <USB_HC_Halt+0x232>
          break;
 800978a:	bf00      	nop
    }
  }

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3724      	adds	r7, #36	@ 0x24
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
	...

0800979c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80097b0:	2301      	movs	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	04da      	lsls	r2, r3, #19
 80097b8:	4b15      	ldr	r3, [pc, #84]	@ (8009810 <USB_DoPing+0x74>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	0151      	lsls	r1, r2, #5
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	440a      	add	r2, r1
 80097c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80097e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	015a      	lsls	r2, r3, #5
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097fa:	461a      	mov	r2, r3
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	1ff80000 	.word	0x1ff80000

08009814 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7fe ff86 	bl	800873a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800982e:	2110      	movs	r1, #16
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7fe ffdf 	bl	80087f4 <USB_FlushTxFifo>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d001      	beq.n	8009840 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff f809 	bl	8008858 <USB_FlushRxFifo>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
 8009854:	e01f      	b.n	8009896 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	4413      	add	r3, r2
 800985e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800986c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009874:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800987c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800988a:	461a      	mov	r2, r3
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	3301      	adds	r3, #1
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b0f      	cmp	r3, #15
 800989a:	d9dc      	bls.n	8009856 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800989c:	2300      	movs	r3, #0
 800989e:	61bb      	str	r3, [r7, #24]
 80098a0:	e034      	b.n	800990c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80098c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098d6:	461a      	mov	r2, r3
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3301      	adds	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098e8:	d80c      	bhi.n	8009904 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	015a      	lsls	r2, r3, #5
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	4413      	add	r3, r2
 80098f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009900:	d0ec      	beq.n	80098dc <USB_StopHost+0xc8>
 8009902:	e000      	b.n	8009906 <USB_StopHost+0xf2>
        break;
 8009904:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	3301      	adds	r3, #1
 800990a:	61bb      	str	r3, [r7, #24]
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b0f      	cmp	r3, #15
 8009910:	d9c7      	bls.n	80098a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009918:	461a      	mov	r2, r3
 800991a:	f04f 33ff 	mov.w	r3, #4294967295
 800991e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f04f 32ff 	mov.w	r2, #4294967295
 8009926:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7fe fef5 	bl	8008718 <USB_EnableGlobalInt>

  return ret;
 800992e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3720      	adds	r7, #32
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b089      	sub	sp, #36	@ 0x24
 800993c:	af04      	add	r7, sp, #16
 800993e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009940:	2301      	movs	r3, #1
 8009942:	2202      	movs	r2, #2
 8009944:	2102      	movs	r1, #2
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fcb7 	bl	800a2ba <USBH_FindInterface>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	2bff      	cmp	r3, #255	@ 0xff
 8009954:	d002      	beq.n	800995c <USBH_CDC_InterfaceInit+0x24>
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d901      	bls.n	8009960 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800995c:	2302      	movs	r3, #2
 800995e:	e13d      	b.n	8009bdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	4619      	mov	r1, r3
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc8c 	bl	800a282 <USBH_SelectInterface>
 800996a:	4603      	mov	r3, r0
 800996c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009974:	2302      	movs	r3, #2
 8009976:	e131      	b.n	8009bdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800997e:	2050      	movs	r0, #80	@ 0x50
 8009980:	f006 ffd2 	bl	8010928 <malloc>
 8009984:	4603      	mov	r3, r0
 8009986:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d101      	bne.n	800999c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009998:	2302      	movs	r3, #2
 800999a:	e11f      	b.n	8009bdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800999c:	2250      	movs	r2, #80	@ 0x50
 800999e:	2100      	movs	r1, #0
 80099a0:	68b8      	ldr	r0, [r7, #8]
 80099a2:	f007 fa2a 	bl	8010dfa <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	211a      	movs	r1, #26
 80099ac:	fb01 f303 	mul.w	r3, r1, r3
 80099b0:	4413      	add	r3, r2
 80099b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	b25b      	sxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	da15      	bge.n	80099ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	211a      	movs	r1, #26
 80099c4:	fb01 f303 	mul.w	r3, r1, r3
 80099c8:	4413      	add	r3, r2
 80099ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80099ce:	781a      	ldrb	r2, [r3, #0]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	211a      	movs	r1, #26
 80099da:	fb01 f303 	mul.w	r3, r1, r3
 80099de:	4413      	add	r3, r2
 80099e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80099e4:	881a      	ldrh	r2, [r3, #0]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	785b      	ldrb	r3, [r3, #1]
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f002 f904 	bl	800bbfe <USBH_AllocPipe>
 80099f6:	4603      	mov	r3, r0
 80099f8:	461a      	mov	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	7819      	ldrb	r1, [r3, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	7858      	ldrb	r0, [r3, #1]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	8952      	ldrh	r2, [r2, #10]
 8009a16:	9202      	str	r2, [sp, #8]
 8009a18:	2203      	movs	r2, #3
 8009a1a:	9201      	str	r2, [sp, #4]
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4623      	mov	r3, r4
 8009a20:	4602      	mov	r2, r0
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f002 f8bc 	bl	800bba0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f006 feef 	bl	8010814 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009a36:	2300      	movs	r3, #0
 8009a38:	2200      	movs	r2, #0
 8009a3a:	210a      	movs	r1, #10
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fc3c 	bl	800a2ba <USBH_FindInterface>
 8009a42:	4603      	mov	r3, r0
 8009a44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
 8009a48:	2bff      	cmp	r3, #255	@ 0xff
 8009a4a:	d002      	beq.n	8009a52 <USBH_CDC_InterfaceInit+0x11a>
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d901      	bls.n	8009a56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a52:	2302      	movs	r3, #2
 8009a54:	e0c2      	b.n	8009bdc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	211a      	movs	r1, #26
 8009a5c:	fb01 f303 	mul.w	r3, r1, r3
 8009a60:	4413      	add	r3, r2
 8009a62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	b25b      	sxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	da16      	bge.n	8009a9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	211a      	movs	r1, #26
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	4413      	add	r3, r2
 8009a7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	211a      	movs	r1, #26
 8009a8a:	fb01 f303 	mul.w	r3, r1, r3
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a94:	881a      	ldrh	r2, [r3, #0]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	835a      	strh	r2, [r3, #26]
 8009a9a:	e015      	b.n	8009ac8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	211a      	movs	r1, #26
 8009aa2:	fb01 f303 	mul.w	r3, r1, r3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009aac:	781a      	ldrb	r2, [r3, #0]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	211a      	movs	r1, #26
 8009ab8:	fb01 f303 	mul.w	r3, r1, r3
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009ac2:	881a      	ldrh	r2, [r3, #0]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	211a      	movs	r1, #26
 8009ace:	fb01 f303 	mul.w	r3, r1, r3
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	b25b      	sxtb	r3, r3
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	da16      	bge.n	8009b0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	211a      	movs	r1, #26
 8009ae6:	fb01 f303 	mul.w	r3, r1, r3
 8009aea:	4413      	add	r3, r2
 8009aec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009af0:	781a      	ldrb	r2, [r3, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	211a      	movs	r1, #26
 8009afc:	fb01 f303 	mul.w	r3, r1, r3
 8009b00:	4413      	add	r3, r2
 8009b02:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b06:	881a      	ldrh	r2, [r3, #0]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	835a      	strh	r2, [r3, #26]
 8009b0c:	e015      	b.n	8009b3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b0e:	7bfb      	ldrb	r3, [r7, #15]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	211a      	movs	r1, #26
 8009b14:	fb01 f303 	mul.w	r3, r1, r3
 8009b18:	4413      	add	r3, r2
 8009b1a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b1e:	781a      	ldrb	r2, [r3, #0]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	211a      	movs	r1, #26
 8009b2a:	fb01 f303 	mul.w	r3, r1, r3
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009b34:	881a      	ldrh	r2, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	7b9b      	ldrb	r3, [r3, #14]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f002 f85c 	bl	800bbfe <USBH_AllocPipe>
 8009b46:	4603      	mov	r3, r0
 8009b48:	461a      	mov	r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	7bdb      	ldrb	r3, [r3, #15]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f002 f852 	bl	800bbfe <USBH_AllocPipe>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	7b59      	ldrb	r1, [r3, #13]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	7b98      	ldrb	r0, [r3, #14]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	8b12      	ldrh	r2, [r2, #24]
 8009b7a:	9202      	str	r2, [sp, #8]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	9201      	str	r2, [sp, #4]
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	4623      	mov	r3, r4
 8009b84:	4602      	mov	r2, r0
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f002 f80a 	bl	800bba0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	7b19      	ldrb	r1, [r3, #12]
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	7bd8      	ldrb	r0, [r3, #15]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	8b52      	ldrh	r2, [r2, #26]
 8009ba4:	9202      	str	r2, [sp, #8]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	9201      	str	r2, [sp, #4]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4623      	mov	r3, r4
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 fff5 	bl	800bba0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	7b5b      	ldrb	r3, [r3, #13]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f006 fe24 	bl	8010814 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	7b1b      	ldrb	r3, [r3, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f006 fe1d 	bl	8010814 <USBH_LL_SetToggle>

  return USBH_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd90      	pop	{r4, r7, pc}

08009be4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bf2:	69db      	ldr	r3, [r3, #28]
 8009bf4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00e      	beq.n	8009c1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 ffea 	bl	800bbde <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f002 f815 	bl	800bc40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	7b1b      	ldrb	r3, [r3, #12]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00e      	beq.n	8009c42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	7b1b      	ldrb	r3, [r3, #12]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f001 ffd7 	bl	800bbde <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	7b1b      	ldrb	r3, [r3, #12]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f002 f802 	bl	800bc40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	7b5b      	ldrb	r3, [r3, #13]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00e      	beq.n	8009c68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	7b5b      	ldrb	r3, [r3, #13]
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 ffc4 	bl	800bbde <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	7b5b      	ldrb	r3, [r3, #13]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 ffef 	bl	800bc40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f006 fe5b 	bl	8010938 <free>
    phost->pActiveClass->pData = 0U;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c88:	2200      	movs	r2, #0
 8009c8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3340      	adds	r3, #64	@ 0x40
 8009cac:	4619      	mov	r1, r3
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f8b1 	bl	8009e16 <GetLineCoding>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009cb8:	7afb      	ldrb	r3, [r7, #11]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009cca:	7afb      	ldrb	r3, [r7, #11]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d877      	bhi.n	8009de8 <USBH_CDC_Process+0x114>
 8009cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8009d00 <USBH_CDC_Process+0x2c>)
 8009cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009d15 	.word	0x08009d15
 8009d04:	08009d1b 	.word	0x08009d1b
 8009d08:	08009d4b 	.word	0x08009d4b
 8009d0c:	08009dbf 	.word	0x08009dbf
 8009d10:	08009dcd 	.word	0x08009dcd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
      break;
 8009d18:	e06d      	b.n	8009df6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f897 	bl	8009e54 <SetLineCoding>
 8009d26:	4603      	mov	r3, r0
 8009d28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d104      	bne.n	8009d3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009d38:	e058      	b.n	8009dec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009d3a:	7bbb      	ldrb	r3, [r7, #14]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d055      	beq.n	8009dec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2204      	movs	r2, #4
 8009d44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009d48:	e050      	b.n	8009dec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	3340      	adds	r3, #64	@ 0x40
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f860 	bl	8009e16 <GetLineCoding>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d126      	bne.n	8009dae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d72:	791b      	ldrb	r3, [r3, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d13b      	bne.n	8009df0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d133      	bne.n	8009df0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d12b      	bne.n	8009df0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009da0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d124      	bne.n	8009df0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f96a 	bl	800a080 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009dac:	e020      	b.n	8009df0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d01d      	beq.n	8009df0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2204      	movs	r2, #4
 8009db8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009dbc:	e018      	b.n	8009df0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f867 	bl	8009e92 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f8e6 	bl	8009f96 <CDC_ProcessReception>
      break;
 8009dca:	e014      	b.n	8009df6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009dcc:	2100      	movs	r1, #0
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f001 f8f8 	bl	800afc4 <USBH_ClrFeature>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009de6:	e005      	b.n	8009df4 <USBH_CDC_Process+0x120>

    default:
      break;
 8009de8:	bf00      	nop
 8009dea:	e004      	b.n	8009df6 <USBH_CDC_Process+0x122>
      break;
 8009dec:	bf00      	nop
 8009dee:	e002      	b.n	8009df6 <USBH_CDC_Process+0x122>
      break;
 8009df0:	bf00      	nop
 8009df2:	e000      	b.n	8009df6 <USBH_CDC_Process+0x122>
      break;
 8009df4:	bf00      	nop

  }

  return status;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	370c      	adds	r7, #12
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b082      	sub	sp, #8
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	22a1      	movs	r2, #161	@ 0xa1
 8009e24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2221      	movs	r2, #33	@ 0x21
 8009e2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2207      	movs	r2, #7
 8009e3c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2207      	movs	r2, #7
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f001 fbf1 	bl	800b62c <USBH_CtlReq>
 8009e4a:	4603      	mov	r3, r0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2221      	movs	r2, #33	@ 0x21
 8009e62:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2207      	movs	r2, #7
 8009e7a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2207      	movs	r2, #7
 8009e80:	4619      	mov	r1, r3
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f001 fbd2 	bl	800b62c <USBH_CtlReq>
 8009e88:	4603      	mov	r3, r0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b086      	sub	sp, #24
 8009e96:	af02      	add	r7, sp, #8
 8009e98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ea0:	69db      	ldr	r3, [r3, #28]
 8009ea2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d002      	beq.n	8009eb8 <CDC_ProcessTransmission+0x26>
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d023      	beq.n	8009efe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009eb6:	e06a      	b.n	8009f8e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	8b12      	ldrh	r2, [r2, #24]
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d90b      	bls.n	8009edc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	69d9      	ldr	r1, [r3, #28]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8b1a      	ldrh	r2, [r3, #24]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	7b5b      	ldrb	r3, [r3, #13]
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	9000      	str	r0, [sp, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 fe20 	bl	800bb1a <USBH_BulkSendData>
 8009eda:	e00b      	b.n	8009ef4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	7b5b      	ldrb	r3, [r3, #13]
 8009eea:	2001      	movs	r0, #1
 8009eec:	9000      	str	r0, [sp, #0]
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f001 fe13 	bl	800bb1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009efc:	e047      	b.n	8009f8e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	7b5b      	ldrb	r3, [r3, #13]
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f006 fc5b 	bl	80107c0 <USBH_LL_GetURBState>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d12e      	bne.n	8009f72 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	8b12      	ldrh	r2, [r2, #24]
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d90e      	bls.n	8009f3e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	8b12      	ldrh	r2, [r2, #24]
 8009f28:	1a9a      	subs	r2, r3, r2
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	69db      	ldr	r3, [r3, #28]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	8b12      	ldrh	r2, [r2, #24]
 8009f36:	441a      	add	r2, r3
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	61da      	str	r2, [r3, #28]
 8009f3c:	e002      	b.n	8009f44 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8009f54:	e006      	b.n	8009f64 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f87a 	bl	800a058 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009f64:	2300      	movs	r3, #0
 8009f66:	2200      	movs	r2, #0
 8009f68:	2104      	movs	r1, #4
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 feb6 	bl	800acdc <USBH_OS_PutMessage>
      break;
 8009f70:	e00c      	b.n	8009f8c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d109      	bne.n	8009f8c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8009f80:	2300      	movs	r3, #0
 8009f82:	2200      	movs	r2, #0
 8009f84:	2104      	movs	r1, #4
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fea8 	bl	800acdc <USBH_OS_PutMessage>
      break;
 8009f8c:	bf00      	nop
  }
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b086      	sub	sp, #24
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d002      	beq.n	8009fbc <CDC_ProcessReception+0x26>
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d00e      	beq.n	8009fd8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8009fba:	e049      	b.n	800a050 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	6a19      	ldr	r1, [r3, #32]
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	8b5a      	ldrh	r2, [r3, #26]
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	7b1b      	ldrb	r3, [r3, #12]
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 fdcb 	bl	800bb64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	2204      	movs	r2, #4
 8009fd2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009fd6:	e03b      	b.n	800a050 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	7b1b      	ldrb	r3, [r3, #12]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f006 fbee 	bl	80107c0 <USBH_LL_GetURBState>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009fe8:	7cfb      	ldrb	r3, [r7, #19]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d12f      	bne.n	800a04e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	7b1b      	ldrb	r3, [r3, #12]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f006 fb51 	bl	801069c <USBH_LL_GetLastXferSize>
 8009ffa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	429a      	cmp	r2, r3
 800a004:	d016      	beq.n	800a034 <CDC_ProcessReception+0x9e>
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	8b5b      	ldrh	r3, [r3, #26]
 800a00a:	461a      	mov	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4293      	cmp	r3, r2
 800a010:	d110      	bne.n	800a034 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	1ad2      	subs	r2, r2, r3
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	6a1a      	ldr	r2, [r3, #32]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	441a      	add	r2, r3
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	2203      	movs	r2, #3
 800a02e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800a032:	e006      	b.n	800a042 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f815 	bl	800a06c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800a042:	2300      	movs	r3, #0
 800a044:	2200      	movs	r2, #0
 800a046:	2104      	movs	r1, #4
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fe47 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800a04e:	bf00      	nop
  }
}
 800a050:	bf00      	nop
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e044      	b.n	800a136 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	79fa      	ldrb	r2, [r7, #7]
 800a0b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f841 	bl	800a14c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2104      	movs	r1, #4
 800a0fc:	2010      	movs	r0, #16
 800a0fe:	f001 ff5a 	bl	800bfb6 <osMessageQueueNew>
 800a102:	4602      	mov	r2, r0
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800a10a:	4b0d      	ldr	r3, [pc, #52]	@ (800a140 <USBH_Init+0xac>)
 800a10c:	4a0d      	ldr	r2, [pc, #52]	@ (800a144 <USBH_Init+0xb0>)
 800a10e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800a110:	4b0b      	ldr	r3, [pc, #44]	@ (800a140 <USBH_Init+0xac>)
 800a112:	2280      	movs	r2, #128	@ 0x80
 800a114:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800a116:	4b0a      	ldr	r3, [pc, #40]	@ (800a140 <USBH_Init+0xac>)
 800a118:	2218      	movs	r2, #24
 800a11a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800a11c:	4a08      	ldr	r2, [pc, #32]	@ (800a140 <USBH_Init+0xac>)
 800a11e:	68f9      	ldr	r1, [r7, #12]
 800a120:	4809      	ldr	r0, [pc, #36]	@ (800a148 <USBH_Init+0xb4>)
 800a122:	f001 fe9b 	bl	800be5c <osThreadNew>
 800a126:	4602      	mov	r2, r0
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f006 fa00 	bl	8010534 <USBH_LL_Init>

  return USBH_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	2000050c 	.word	0x2000050c
 800a144:	0801286c 	.word	0x0801286c
 800a148:	0800ad25 	.word	0x0800ad25

0800a14c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e009      	b.n	800a16e <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	33e0      	adds	r3, #224	@ 0xe0
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	2200      	movs	r2, #0
 800a166:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3301      	adds	r3, #1
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2b0f      	cmp	r3, #15
 800a172:	d9f2      	bls.n	800a15a <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]
 800a178:	e009      	b.n	800a18e <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a184:	2200      	movs	r2, #0
 800a186:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a194:	d3f1      	bcc.n	800a17a <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2240      	movs	r2, #64	@ 0x40
 800a1ba:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	331c      	adds	r3, #28
 800a1e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f006 fe04 	bl	8010dfa <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	4618      	mov	r0, r3
 800a200:	f006 fdfb 	bl	8010dfa <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a20a:	2212      	movs	r2, #18
 800a20c:	2100      	movs	r1, #0
 800a20e:	4618      	mov	r0, r3
 800a210:	f006 fdf3 	bl	8010dfa <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a21a:	223e      	movs	r2, #62	@ 0x3e
 800a21c:	2100      	movs	r1, #0
 800a21e:	4618      	mov	r0, r3
 800a220:	f006 fdeb 	bl	8010dfa <memset>

  return USBH_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a238:	2300      	movs	r3, #0
 800a23a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d016      	beq.n	800a270 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10e      	bne.n	800a26a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a252:	1c59      	adds	r1, r3, #1
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	33de      	adds	r3, #222	@ 0xde
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]
 800a268:	e004      	b.n	800a274 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a26a:	2302      	movs	r3, #2
 800a26c:	73fb      	strb	r3, [r7, #15]
 800a26e:	e001      	b.n	800a274 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a270:	2302      	movs	r3, #2
 800a272:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a282:	b480      	push	{r7}
 800a284:	b085      	sub	sp, #20
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	460b      	mov	r3, r1
 800a28c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a298:	78fa      	ldrb	r2, [r7, #3]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d204      	bcs.n	800a2a8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	78fa      	ldrb	r2, [r7, #3]
 800a2a2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a2a6:	e001      	b.n	800a2ac <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b087      	sub	sp, #28
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	4608      	mov	r0, r1
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	70fb      	strb	r3, [r7, #3]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70bb      	strb	r3, [r7, #2]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a2e2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a2e4:	e025      	b.n	800a332 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	221a      	movs	r2, #26
 800a2ea:	fb02 f303 	mul.w	r3, r2, r3
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	3302      	adds	r3, #2
 800a2f6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	795b      	ldrb	r3, [r3, #5]
 800a2fc:	78fa      	ldrb	r2, [r7, #3]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d002      	beq.n	800a308 <USBH_FindInterface+0x4e>
 800a302:	78fb      	ldrb	r3, [r7, #3]
 800a304:	2bff      	cmp	r3, #255	@ 0xff
 800a306:	d111      	bne.n	800a32c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a30c:	78ba      	ldrb	r2, [r7, #2]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d002      	beq.n	800a318 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a312:	78bb      	ldrb	r3, [r7, #2]
 800a314:	2bff      	cmp	r3, #255	@ 0xff
 800a316:	d109      	bne.n	800a32c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a31c:	787a      	ldrb	r2, [r7, #1]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d002      	beq.n	800a328 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a322:	787b      	ldrb	r3, [r7, #1]
 800a324:	2bff      	cmp	r3, #255	@ 0xff
 800a326:	d101      	bne.n	800a32c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	e006      	b.n	800a33a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a32c:	7dfb      	ldrb	r3, [r7, #23]
 800a32e:	3301      	adds	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a332:	7dfb      	ldrb	r3, [r7, #23]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d9d6      	bls.n	800a2e6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a338:	23ff      	movs	r3, #255	@ 0xff
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f006 f92c 	bl	80105ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a354:	2101      	movs	r1, #1
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f006 fa45 	bl	80107e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af04      	add	r7, sp, #16
 800a36e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a370:	2302      	movs	r3, #2
 800a372:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b01      	cmp	r3, #1
 800a382:	d102      	bne.n	800a38a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2203      	movs	r2, #3
 800a388:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	2b0b      	cmp	r3, #11
 800a392:	f200 81f5 	bhi.w	800a780 <USBH_Process+0x418>
 800a396:	a201      	add	r2, pc, #4	@ (adr r2, 800a39c <USBH_Process+0x34>)
 800a398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39c:	0800a3cd 	.word	0x0800a3cd
 800a3a0:	0800a40b 	.word	0x0800a40b
 800a3a4:	0800a481 	.word	0x0800a481
 800a3a8:	0800a70f 	.word	0x0800a70f
 800a3ac:	0800a781 	.word	0x0800a781
 800a3b0:	0800a52d 	.word	0x0800a52d
 800a3b4:	0800a6a9 	.word	0x0800a6a9
 800a3b8:	0800a56f 	.word	0x0800a56f
 800a3bc:	0800a59b 	.word	0x0800a59b
 800a3c0:	0800a5c3 	.word	0x0800a5c3
 800a3c4:	0800a611 	.word	0x0800a611
 800a3c8:	0800a6f7 	.word	0x0800a6f7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 81d5 	beq.w	800a784 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a3e0:	20c8      	movs	r0, #200	@ 0xc8
 800a3e2:	f006 fa4a 	bl	801087a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f006 f93d 	bl	8010666 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2200      	movs	r2, #0
 800a400:	2101      	movs	r1, #1
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 fc6a 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a408:	e1bc      	b.n	800a784 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b01      	cmp	r3, #1
 800a414:	d107      	bne.n	800a426 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2202      	movs	r2, #2
 800a422:	701a      	strb	r2, [r3, #0]
 800a424:	e025      	b.n	800a472 <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a42c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a430:	d914      	bls.n	800a45c <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a438:	3301      	adds	r3, #1
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d903      	bls.n	800a454 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	220d      	movs	r2, #13
 800a450:	701a      	strb	r2, [r3, #0]
 800a452:	e00e      	b.n	800a472 <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	e00a      	b.n	800a472 <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a462:	f103 020a 	add.w	r2, r3, #10
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a46c:	200a      	movs	r0, #10
 800a46e:	f006 fa04 	bl	801087a <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a472:	2300      	movs	r3, #0
 800a474:	2200      	movs	r2, #0
 800a476:	2101      	movs	r1, #1
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fc2f 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a47e:	e188      	b.n	800a792 <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a490:	2104      	movs	r1, #4
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a496:	2064      	movs	r0, #100	@ 0x64
 800a498:	f006 f9ef 	bl	801087a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f006 f8bb 	bl	8010618 <USBH_LL_GetSpeed>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2205      	movs	r2, #5
 800a4b0:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 fba2 	bl	800bbfe <USBH_AllocPipe>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	461a      	mov	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4c2:	2180      	movs	r1, #128	@ 0x80
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f001 fb9a 	bl	800bbfe <USBH_AllocPipe>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	7919      	ldrb	r1, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4e6:	9202      	str	r2, [sp, #8]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	9201      	str	r2, [sp, #4]
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2280      	movs	r2, #128	@ 0x80
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 fb54 	bl	800bba0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7959      	ldrb	r1, [r3, #5]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a50c:	9202      	str	r2, [sp, #8]
 800a50e:	2200      	movs	r2, #0
 800a510:	9201      	str	r2, [sp, #4]
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	4603      	mov	r3, r0
 800a516:	2200      	movs	r2, #0
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 fb41 	bl	800bba0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a51e:	2300      	movs	r3, #0
 800a520:	2200      	movs	r2, #0
 800a522:	2101      	movs	r1, #1
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fbd9 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a52a:	e132      	b.n	800a792 <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f935 	bl	800a79c <USBH_HandleEnum>
 800a532:	4603      	mov	r3, r0
 800a534:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f040 8124 	bne.w	800a788 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d103      	bne.n	800a55a <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2208      	movs	r2, #8
 800a556:	701a      	strb	r2, [r3, #0]
 800a558:	e002      	b.n	800a560 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2207      	movs	r2, #7
 800a55e:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a560:	2300      	movs	r3, #0
 800a562:	2200      	movs	r2, #0
 800a564:	2105      	movs	r1, #5
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fbb8 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800a56c:	e10c      	b.n	800a788 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 8109 	beq.w	800a78c <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a580:	2101      	movs	r1, #1
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2208      	movs	r2, #8
 800a58a:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a58c:	2300      	movs	r3, #0
 800a58e:	2200      	movs	r2, #0
 800a590:	2105      	movs	r1, #5
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fba2 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800a598:	e0f8      	b.n	800a78c <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fcc7 	bl	800af36 <USBH_SetCfg>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2209      	movs	r2, #9
 800a5b2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fb8e 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a5c0:	e0e7      	b.n	800a792 <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d015      	beq.n	800a5fc <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a5d0:	2101      	movs	r1, #1
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fcd2 	bl	800af7c <USBH_SetFeature>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	220a      	movs	r2, #10
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	e00a      	b.n	800a602 <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a5ec:	7bbb      	ldrb	r3, [r7, #14]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d106      	bne.n	800a602 <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	220a      	movs	r2, #10
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	e002      	b.n	800a602 <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	220a      	movs	r2, #10
 800a600:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a602:	2300      	movs	r3, #0
 800a604:	2200      	movs	r2, #0
 800a606:	2101      	movs	r1, #1
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f000 fb67 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a60e:	e0c0      	b.n	800a792 <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a616:	2b00      	cmp	r3, #0
 800a618:	d03f      	beq.n	800a69a <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
 800a626:	e016      	b.n	800a656 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a628:	7bfa      	ldrb	r2, [r7, #15]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32de      	adds	r2, #222	@ 0xde
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	791a      	ldrb	r2, [r3, #4]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d108      	bne.n	800a650 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a63e:	7bfa      	ldrb	r2, [r7, #15]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	32de      	adds	r2, #222	@ 0xde
 800a644:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a64e:	e005      	b.n	800a65c <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a650:	7bfb      	ldrb	r3, [r7, #15]
 800a652:	3301      	adds	r3, #1
 800a654:	73fb      	strb	r3, [r7, #15]
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0e5      	beq.n	800a628 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a662:	2b00      	cmp	r3, #0
 800a664:	d016      	beq.n	800a694 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	4798      	blx	r3
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2206      	movs	r2, #6
 800a67c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a684:	2103      	movs	r1, #3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	4798      	blx	r3
 800a68a:	e006      	b.n	800a69a <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	220d      	movs	r2, #13
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	e002      	b.n	800a69a <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	220d      	movs	r2, #13
 800a698:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a69a:	2300      	movs	r3, #0
 800a69c:	2200      	movs	r2, #0
 800a69e:	2105      	movs	r1, #5
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fb1b 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6a6:	e074      	b.n	800a792 <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d017      	beq.n	800a6e2 <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	4798      	blx	r3
 800a6be:	4603      	mov	r3, r0
 800a6c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6c2:	7bbb      	ldrb	r3, [r7, #14]
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	220b      	movs	r2, #11
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	e00a      	b.n	800a6e8 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800a6d2:	7bbb      	ldrb	r3, [r7, #14]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d106      	bne.n	800a6e8 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	220d      	movs	r2, #13
 800a6de:	701a      	strb	r2, [r3, #0]
 800a6e0:	e002      	b.n	800a6e8 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	220d      	movs	r2, #13
 800a6e6:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	2105      	movs	r1, #5
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 faf4 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a6f4:	e04d      	b.n	800a792 <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d047      	beq.n	800a790 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
      }
      break;
 800a70c:	e040      	b.n	800a790 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff fd18 	bl	800a14c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d005      	beq.n	800a750 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a74a:	2105      	movs	r1, #5
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a756:	b2db      	uxtb	r3, r3
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d107      	bne.n	800a76c <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fdee 	bl	800a346 <USBH_Start>
 800a76a:	e002      	b.n	800a772 <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f005 ff1d 	bl	80105ac <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800a772:	2300      	movs	r3, #0
 800a774:	2200      	movs	r2, #0
 800a776:	2101      	movs	r1, #1
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f000 faaf 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800a77e:	e008      	b.n	800a792 <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800a780:	bf00      	nop
 800a782:	e006      	b.n	800a792 <USBH_Process+0x42a>
      break;
 800a784:	bf00      	nop
 800a786:	e004      	b.n	800a792 <USBH_Process+0x42a>
      break;
 800a788:	bf00      	nop
 800a78a:	e002      	b.n	800a792 <USBH_Process+0x42a>
    break;
 800a78c:	bf00      	nop
 800a78e:	e000      	b.n	800a792 <USBH_Process+0x42a>
      break;
 800a790:	bf00      	nop
  }
  return USBH_OK;
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af04      	add	r7, sp, #16
 800a7a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	2b07      	cmp	r3, #7
 800a7b2:	f200 81db 	bhi.w	800ab6c <USBH_HandleEnum+0x3d0>
 800a7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <USBH_HandleEnum+0x20>)
 800a7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7bc:	0800a7dd 	.word	0x0800a7dd
 800a7c0:	0800a897 	.word	0x0800a897
 800a7c4:	0800a901 	.word	0x0800a901
 800a7c8:	0800a98b 	.word	0x0800a98b
 800a7cc:	0800a9f5 	.word	0x0800a9f5
 800a7d0:	0800aa65 	.word	0x0800aa65
 800a7d4:	0800aacf 	.word	0x0800aacf
 800a7d8:	0800ab2d 	.word	0x0800ab2d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a7dc:	2108      	movs	r1, #8
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fac6 	bl	800ad70 <USBH_Get_DevDesc>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d12e      	bne.n	800a84c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	7919      	ldrb	r1, [r3, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a812:	9202      	str	r2, [sp, #8]
 800a814:	2200      	movs	r2, #0
 800a816:	9201      	str	r2, [sp, #4]
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	4603      	mov	r3, r0
 800a81c:	2280      	movs	r2, #128	@ 0x80
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f9be 	bl	800bba0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	7959      	ldrb	r1, [r3, #5]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a838:	9202      	str	r2, [sp, #8]
 800a83a:	2200      	movs	r2, #0
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	4603      	mov	r3, r0
 800a842:	2200      	movs	r2, #0
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f9ab 	bl	800bba0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a84a:	e191      	b.n	800ab70 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2b03      	cmp	r3, #3
 800a850:	f040 818e 	bne.w	800ab70 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a85a:	3301      	adds	r3, #1
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d903      	bls.n	800a876 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	220d      	movs	r2, #13
 800a872:	701a      	strb	r2, [r3, #0]
      break;
 800a874:	e17c      	b.n	800ab70 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	795b      	ldrb	r3, [r3, #5]
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f001 f9df 	bl	800bc40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	791b      	ldrb	r3, [r3, #4]
 800a886:	4619      	mov	r1, r3
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f001 f9d9 	bl	800bc40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	701a      	strb	r2, [r3, #0]
      break;
 800a894:	e16c      	b.n	800ab70 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a896:	2112      	movs	r1, #18
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fa69 	bl	800ad70 <USBH_Get_DevDesc>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d103      	bne.n	800a8b0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a8ae:	e161      	b.n	800ab74 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	f040 815e 	bne.w	800ab74 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8be:	3301      	adds	r3, #1
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8ce:	2b03      	cmp	r3, #3
 800a8d0:	d903      	bls.n	800a8da <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	220d      	movs	r2, #13
 800a8d6:	701a      	strb	r2, [r3, #0]
      break;
 800a8d8:	e14c      	b.n	800ab74 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	795b      	ldrb	r3, [r3, #5]
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 f9ad 	bl	800bc40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	791b      	ldrb	r3, [r3, #4]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f001 f9a7 	bl	800bc40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	701a      	strb	r2, [r3, #0]
      break;
 800a8fe:	e139      	b.n	800ab74 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a900:	2101      	movs	r1, #1
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 faf3 	bl	800aeee <USBH_SetAddress>
 800a908:	4603      	mov	r3, r0
 800a90a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d130      	bne.n	800a974 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a912:	2002      	movs	r0, #2
 800a914:	f005 ffb1 	bl	801087a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2203      	movs	r2, #3
 800a924:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	7919      	ldrb	r1, [r3, #4]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a93a:	9202      	str	r2, [sp, #8]
 800a93c:	2200      	movs	r2, #0
 800a93e:	9201      	str	r2, [sp, #4]
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	4603      	mov	r3, r0
 800a944:	2280      	movs	r2, #128	@ 0x80
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f001 f92a 	bl	800bba0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	7959      	ldrb	r1, [r3, #5]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a960:	9202      	str	r2, [sp, #8]
 800a962:	2200      	movs	r2, #0
 800a964:	9201      	str	r2, [sp, #4]
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	4603      	mov	r3, r0
 800a96a:	2200      	movs	r2, #0
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f001 f917 	bl	800bba0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a972:	e101      	b.n	800ab78 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	2b03      	cmp	r3, #3
 800a978:	f040 80fe 	bne.w	800ab78 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	220d      	movs	r2, #13
 800a980:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	705a      	strb	r2, [r3, #1]
      break;
 800a988:	e0f6      	b.n	800ab78 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a98a:	2109      	movs	r1, #9
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fa1b 	bl	800adc8 <USBH_Get_CfgDesc>
 800a992:	4603      	mov	r3, r0
 800a994:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d103      	bne.n	800a9a4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2204      	movs	r2, #4
 800a9a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9a2:	e0eb      	b.n	800ab7c <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9a4:	7bbb      	ldrb	r3, [r7, #14]
 800a9a6:	2b03      	cmp	r3, #3
 800a9a8:	f040 80e8 	bne.w	800ab7c <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	d903      	bls.n	800a9ce <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	220d      	movs	r2, #13
 800a9ca:	701a      	strb	r2, [r3, #0]
      break;
 800a9cc:	e0d6      	b.n	800ab7c <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	795b      	ldrb	r3, [r3, #5]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 f933 	bl	800bc40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	791b      	ldrb	r3, [r3, #4]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 f92d 	bl	800bc40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
      break;
 800a9f2:	e0c3      	b.n	800ab7c <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f9e3 	bl	800adc8 <USBH_Get_CfgDesc>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2205      	movs	r2, #5
 800aa10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa12:	e0b5      	b.n	800ab80 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa14:	7bbb      	ldrb	r3, [r7, #14]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	f040 80b2 	bne.w	800ab80 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa22:	3301      	adds	r3, #1
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d903      	bls.n	800aa3e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	220d      	movs	r2, #13
 800aa3a:	701a      	strb	r2, [r3, #0]
      break;
 800aa3c:	e0a0      	b.n	800ab80 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	795b      	ldrb	r3, [r3, #5]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f001 f8fb 	bl	800bc40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	791b      	ldrb	r3, [r3, #4]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 f8f5 	bl	800bc40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	701a      	strb	r2, [r3, #0]
      break;
 800aa62:	e08d      	b.n	800ab80 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d025      	beq.n	800aaba <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa7a:	23ff      	movs	r3, #255	@ 0xff
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f9cd 	bl	800ae1c <USBH_Get_StringDesc>
 800aa82:	4603      	mov	r3, r0
 800aa84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d109      	bne.n	800aaa0 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2206      	movs	r2, #6
 800aa90:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800aa92:	2300      	movs	r3, #0
 800aa94:	2200      	movs	r2, #0
 800aa96:	2105      	movs	r1, #5
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f91f 	bl	800acdc <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aa9e:	e071      	b.n	800ab84 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaa0:	7bbb      	ldrb	r3, [r7, #14]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d16e      	bne.n	800ab84 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2206      	movs	r2, #6
 800aaaa:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800aaac:	2300      	movs	r3, #0
 800aaae:	2200      	movs	r2, #0
 800aab0:	2105      	movs	r1, #5
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f912 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800aab8:	e064      	b.n	800ab84 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2206      	movs	r2, #6
 800aabe:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800aac0:	2300      	movs	r3, #0
 800aac2:	2200      	movs	r2, #0
 800aac4:	2105      	movs	r1, #5
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 f908 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800aacc:	e05a      	b.n	800ab84 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d01f      	beq.n	800ab18 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aae4:	23ff      	movs	r3, #255	@ 0xff
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f998 	bl	800ae1c <USBH_Get_StringDesc>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d103      	bne.n	800aafe <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2207      	movs	r2, #7
 800aafa:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800aafc:	e044      	b.n	800ab88 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d141      	bne.n	800ab88 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2207      	movs	r2, #7
 800ab08:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2105      	movs	r1, #5
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 f8e3 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800ab16:	e037      	b.n	800ab88 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2207      	movs	r2, #7
 800ab1c:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2200      	movs	r2, #0
 800ab22:	2105      	movs	r1, #5
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f8d9 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800ab2a:	e02d      	b.n	800ab88 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d017      	beq.n	800ab66 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ab42:	23ff      	movs	r3, #255	@ 0xff
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f969 	bl	800ae1c <USBH_Get_StringDesc>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d102      	bne.n	800ab5a <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ab58:	e018      	b.n	800ab8c <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d115      	bne.n	800ab8c <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73fb      	strb	r3, [r7, #15]
      break;
 800ab64:	e012      	b.n	800ab8c <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6a:	e00f      	b.n	800ab8c <USBH_HandleEnum+0x3f0>

    default:
      break;
 800ab6c:	bf00      	nop
 800ab6e:	e00e      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab70:	bf00      	nop
 800ab72:	e00c      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab74:	bf00      	nop
 800ab76:	e00a      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab78:	bf00      	nop
 800ab7a:	e008      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab7c:	bf00      	nop
 800ab7e:	e006      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab80:	bf00      	nop
 800ab82:	e004      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab84:	bf00      	nop
 800ab86:	e002      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab88:	bf00      	nop
 800ab8a:	e000      	b.n	800ab8e <USBH_HandleEnum+0x3f2>
      break;
 800ab8c:	bf00      	nop
  }
  return Status;
 800ab8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3710      	adds	r7, #16
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800abaa:	bf00      	nop
 800abac:	370c      	adds	r7, #12
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f804 	bl	800abda <USBH_HandleSof>
}
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b0b      	cmp	r3, #11
 800abea:	d10a      	bne.n	800ac02 <USBH_HandleSof+0x28>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d005      	beq.n	800ac02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	4798      	blx	r3
  }
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2101      	movs	r1, #1
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f85b 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ac26:	bf00      	nop
}
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2201      	movs	r2, #1
 800ac42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ac46:	bf00      	nop
}
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ac72:	2300      	movs	r3, #0
 800ac74:	2200      	movs	r2, #0
 800ac76:	2101      	movs	r1, #1
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f82f 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f005 fc9a 	bl	80105e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	791b      	ldrb	r3, [r3, #4]
 800acb2:	4619      	mov	r1, r3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 ffc3 	bl	800bc40 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	795b      	ldrb	r3, [r3, #5]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 ffbd 	bl	800bc40 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800acc6:	2300      	movs	r3, #0
 800acc8:	2200      	movs	r2, #0
 800acca:	2101      	movs	r1, #1
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f805 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	607a      	str	r2, [r7, #4]
 800ace6:	603b      	str	r3, [r7, #0]
 800ace8:	460b      	mov	r3, r1
 800acea:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800acec:	7afa      	ldrb	r2, [r7, #11]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800acfa:	4618      	mov	r0, r3
 800acfc:	f001 fa8c 	bl	800c218 <osMessageQueueGetSpace>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f001 f9c0 	bl	800c09c <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800ad1c:	bf00      	nop
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ad38:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f001 fa0d 	bl	800c15c <osMessageQueueGet>
 800ad42:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1f0      	bne.n	800ad2c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f7ff fb0c 	bl	800a368 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800ad50:	e7ec      	b.n	800ad2c <USBH_Process_OS+0x8>

0800ad52 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b082      	sub	sp, #8
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2101      	movs	r1, #1
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f7ff ffbb 	bl	800acdc <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af02      	add	r7, sp, #8
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ad7c:	887b      	ldrh	r3, [r7, #2]
 800ad7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad82:	d901      	bls.n	800ad88 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e01b      	b.n	800adc0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad8e:	887b      	ldrh	r3, [r7, #2]
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	4613      	mov	r3, r2
 800ad94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ad98:	2100      	movs	r1, #0
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f872 	bl	800ae84 <USBH_GetDescriptor>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d109      	bne.n	800adbe <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800adb0:	887a      	ldrh	r2, [r7, #2]
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f929 	bl	800b00c <USBH_ParseDevDesc>
 800adba:	4603      	mov	r3, r0
 800adbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b086      	sub	sp, #24
 800adcc:	af02      	add	r7, sp, #8
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	460b      	mov	r3, r1
 800add2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	331c      	adds	r3, #28
 800add8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800adda:	887b      	ldrh	r3, [r7, #2]
 800addc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade0:	d901      	bls.n	800ade6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e016      	b.n	800ae14 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ade6:	887b      	ldrh	r3, [r7, #2]
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adf0:	2100      	movs	r1, #0
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f846 	bl	800ae84 <USBH_GetDescriptor>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d107      	bne.n	800ae12 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ae02:	887b      	ldrh	r3, [r7, #2]
 800ae04:	461a      	mov	r2, r3
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f9af 	bl	800b16c <USBH_ParseCfgDesc>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3710      	adds	r7, #16
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	607a      	str	r2, [r7, #4]
 800ae26:	461a      	mov	r2, r3
 800ae28:	460b      	mov	r3, r1
 800ae2a:	72fb      	strb	r3, [r7, #11]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ae30:	893b      	ldrh	r3, [r7, #8]
 800ae32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae36:	d802      	bhi.n	800ae3e <USBH_Get_StringDesc+0x22>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e01c      	b.n	800ae7c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ae4a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ae52:	893b      	ldrh	r3, [r7, #8]
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	460b      	mov	r3, r1
 800ae58:	2100      	movs	r1, #0
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f000 f812 	bl	800ae84 <USBH_GetDescriptor>
 800ae60:	4603      	mov	r3, r0
 800ae62:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ae64:	7dfb      	ldrb	r3, [r7, #23]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d107      	bne.n	800ae7a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ae70:	893a      	ldrh	r2, [r7, #8]
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f000 fb8c 	bl	800b592 <USBH_ParseStringDesc>
  }

  return status;
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	72fb      	strb	r3, [r7, #11]
 800ae92:	4613      	mov	r3, r2
 800ae94:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	789b      	ldrb	r3, [r3, #2]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d11c      	bne.n	800aed8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aea4:	b2da      	uxtb	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2206      	movs	r2, #6
 800aeae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	893a      	ldrh	r2, [r7, #8]
 800aeb4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aeb6:	893b      	ldrh	r3, [r7, #8]
 800aeb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aec0:	d104      	bne.n	800aecc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f240 4209 	movw	r2, #1033	@ 0x409
 800aec8:	829a      	strh	r2, [r3, #20]
 800aeca:	e002      	b.n	800aed2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8b3a      	ldrh	r2, [r7, #24]
 800aed6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aed8:	8b3b      	ldrh	r3, [r7, #24]
 800aeda:	461a      	mov	r2, r3
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f000 fba4 	bl	800b62c <USBH_CtlReq>
 800aee4:	4603      	mov	r3, r0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b082      	sub	sp, #8
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	789b      	ldrb	r3, [r3, #2]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d10f      	bne.n	800af22 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2205      	movs	r2, #5
 800af0c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800af0e:	78fb      	ldrb	r3, [r7, #3]
 800af10:	b29a      	uxth	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af22:	2200      	movs	r2, #0
 800af24:	2100      	movs	r1, #0
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fb80 	bl	800b62c <USBH_CtlReq>
 800af2c:	4603      	mov	r3, r0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b082      	sub	sp, #8
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	789b      	ldrb	r3, [r3, #2]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d10e      	bne.n	800af68 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2209      	movs	r2, #9
 800af54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	887a      	ldrh	r2, [r7, #2]
 800af5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800af68:	2200      	movs	r2, #0
 800af6a:	2100      	movs	r1, #0
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fb5d 	bl	800b62c <USBH_CtlReq>
 800af72:	4603      	mov	r3, r0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	789b      	ldrb	r3, [r3, #2]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d10f      	bne.n	800afb0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2203      	movs	r2, #3
 800af9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800afb0:	2200      	movs	r2, #0
 800afb2:	2100      	movs	r1, #0
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fb39 	bl	800b62c <USBH_CtlReq>
 800afba:	4603      	mov	r3, r0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	789b      	ldrb	r3, [r3, #2]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d10f      	bne.n	800aff8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2202      	movs	r2, #2
 800afdc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	b29a      	uxth	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb15 	bl	800b62c <USBH_CtlReq>
 800b002:	4603      	mov	r3, r0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b020:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800b022:	2300      	movs	r3, #0
 800b024:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d101      	bne.n	800b030 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800b02c:	2302      	movs	r3, #2
 800b02e:	e094      	b.n	800b15a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	781a      	ldrb	r2, [r3, #0]
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	785a      	ldrb	r2, [r3, #1]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	3302      	adds	r3, #2
 800b044:	781b      	ldrb	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3303      	adds	r3, #3
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	021b      	lsls	r3, r3, #8
 800b050:	b29b      	uxth	r3, r3
 800b052:	4313      	orrs	r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	791a      	ldrb	r2, [r3, #4]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	795a      	ldrb	r2, [r3, #5]
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	799a      	ldrb	r2, [r3, #6]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	79da      	ldrb	r2, [r3, #7]
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b080:	2b00      	cmp	r3, #0
 800b082:	d004      	beq.n	800b08e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d11b      	bne.n	800b0c6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	79db      	ldrb	r3, [r3, #7]
 800b092:	2b20      	cmp	r3, #32
 800b094:	dc0f      	bgt.n	800b0b6 <USBH_ParseDevDesc+0xaa>
 800b096:	2b08      	cmp	r3, #8
 800b098:	db0f      	blt.n	800b0ba <USBH_ParseDevDesc+0xae>
 800b09a:	3b08      	subs	r3, #8
 800b09c:	4a32      	ldr	r2, [pc, #200]	@ (800b168 <USBH_ParseDevDesc+0x15c>)
 800b09e:	fa22 f303 	lsr.w	r3, r2, r3
 800b0a2:	f003 0301 	and.w	r3, r3, #1
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bf14      	ite	ne
 800b0aa:	2301      	movne	r3, #1
 800b0ac:	2300      	moveq	r3, #0
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d106      	bne.n	800b0c2 <USBH_ParseDevDesc+0xb6>
 800b0b4:	e001      	b.n	800b0ba <USBH_ParseDevDesc+0xae>
 800b0b6:	2b40      	cmp	r3, #64	@ 0x40
 800b0b8:	d003      	beq.n	800b0c2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	2208      	movs	r2, #8
 800b0be:	71da      	strb	r2, [r3, #7]
        break;
 800b0c0:	e000      	b.n	800b0c4 <USBH_ParseDevDesc+0xb8>
        break;
 800b0c2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800b0c4:	e00e      	b.n	800b0e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d107      	bne.n	800b0e0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	79db      	ldrb	r3, [r3, #7]
 800b0d4:	2b08      	cmp	r3, #8
 800b0d6:	d005      	beq.n	800b0e4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	2208      	movs	r2, #8
 800b0dc:	71da      	strb	r2, [r3, #7]
 800b0de:	e001      	b.n	800b0e4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800b0e4:	88fb      	ldrh	r3, [r7, #6]
 800b0e6:	2b08      	cmp	r3, #8
 800b0e8:	d936      	bls.n	800b158 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	3309      	adds	r3, #9
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	021b      	lsls	r3, r3, #8
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	330a      	adds	r3, #10
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	330b      	adds	r3, #11
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	b29b      	uxth	r3, r3
 800b116:	4313      	orrs	r3, r2
 800b118:	b29a      	uxth	r2, r3
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	330c      	adds	r3, #12
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	461a      	mov	r2, r3
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	330d      	adds	r3, #13
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	b29b      	uxth	r3, r3
 800b130:	4313      	orrs	r3, r2
 800b132:	b29a      	uxth	r2, r3
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	7b9a      	ldrb	r2, [r3, #14]
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	7bda      	ldrb	r2, [r3, #15]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	7c1a      	ldrb	r2, [r3, #16]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	7c5a      	ldrb	r2, [r3, #17]
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b158:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	371c      	adds	r7, #28
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	01000101 	.word	0x01000101

0800b16c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08c      	sub	sp, #48	@ 0x30
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	4613      	mov	r3, r2
 800b178:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b180:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b19a:	2302      	movs	r3, #2
 800b19c:	e0de      	b.n	800b35c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	2b09      	cmp	r3, #9
 800b1a8:	d002      	beq.n	800b1b0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ac:	2209      	movs	r2, #9
 800b1ae:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	781a      	ldrb	r2, [r3, #0]
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	785a      	ldrb	r2, [r3, #1]
 800b1bc:	6a3b      	ldr	r3, [r7, #32]
 800b1be:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	3303      	adds	r3, #3
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1da:	bf28      	it	cs
 800b1dc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	791a      	ldrb	r2, [r3, #4]
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	795a      	ldrb	r2, [r3, #5]
 800b1f2:	6a3b      	ldr	r3, [r7, #32]
 800b1f4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	799a      	ldrb	r2, [r3, #6]
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	79da      	ldrb	r2, [r3, #7]
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	7a1a      	ldrb	r2, [r3, #8]
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b20e:	88fb      	ldrh	r3, [r7, #6]
 800b210:	2b09      	cmp	r3, #9
 800b212:	f240 80a1 	bls.w	800b358 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800b216:	2309      	movs	r3, #9
 800b218:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b21e:	e085      	b.n	800b32c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b220:	f107 0316 	add.w	r3, r7, #22
 800b224:	4619      	mov	r1, r3
 800b226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b228:	f000 f9e6 	bl	800b5f8 <USBH_GetNextDesc>
 800b22c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	785b      	ldrb	r3, [r3, #1]
 800b232:	2b04      	cmp	r3, #4
 800b234:	d17a      	bne.n	800b32c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	2b09      	cmp	r3, #9
 800b23c:	d002      	beq.n	800b244 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b240:	2209      	movs	r2, #9
 800b242:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b248:	221a      	movs	r2, #26
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
 800b24e:	3308      	adds	r3, #8
 800b250:	6a3a      	ldr	r2, [r7, #32]
 800b252:	4413      	add	r3, r2
 800b254:	3302      	adds	r3, #2
 800b256:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b25a:	69f8      	ldr	r0, [r7, #28]
 800b25c:	f000 f882 	bl	800b364 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b26a:	e043      	b.n	800b2f4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b26c:	f107 0316 	add.w	r3, r7, #22
 800b270:	4619      	mov	r1, r3
 800b272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b274:	f000 f9c0 	bl	800b5f8 <USBH_GetNextDesc>
 800b278:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	785b      	ldrb	r3, [r3, #1]
 800b27e:	2b05      	cmp	r3, #5
 800b280:	d138      	bne.n	800b2f4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	795b      	ldrb	r3, [r3, #5]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d113      	bne.n	800b2b2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d003      	beq.n	800b29a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	799b      	ldrb	r3, [r3, #6]
 800b296:	2b03      	cmp	r3, #3
 800b298:	d10b      	bne.n	800b2b2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	79db      	ldrb	r3, [r3, #7]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <USBH_ParseCfgDesc+0x14e>
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2b09      	cmp	r3, #9
 800b2a8:	d007      	beq.n	800b2ba <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ac:	2209      	movs	r2, #9
 800b2ae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2b0:	e003      	b.n	800b2ba <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b4:	2207      	movs	r2, #7
 800b2b6:	701a      	strb	r2, [r3, #0]
 800b2b8:	e000      	b.n	800b2bc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b2ba:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b2c4:	3201      	adds	r2, #1
 800b2c6:	00d2      	lsls	r2, r2, #3
 800b2c8:	211a      	movs	r1, #26
 800b2ca:	fb01 f303 	mul.w	r3, r1, r3
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	6a3a      	ldr	r2, [r7, #32]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b2da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2dc:	69b9      	ldr	r1, [r7, #24]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f000 f86f 	bl	800b3c2 <USBH_ParseEPDesc>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b2ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d80a      	bhi.n	800b312 <USBH_ParseCfgDesc+0x1a6>
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	791b      	ldrb	r3, [r3, #4]
 800b300:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b304:	429a      	cmp	r2, r3
 800b306:	d204      	bcs.n	800b312 <USBH_ParseCfgDesc+0x1a6>
 800b308:	6a3b      	ldr	r3, [r7, #32]
 800b30a:	885a      	ldrh	r2, [r3, #2]
 800b30c:	8afb      	ldrh	r3, [r7, #22]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d8ac      	bhi.n	800b26c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	791b      	ldrb	r3, [r3, #4]
 800b316:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d201      	bcs.n	800b322 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800b31e:	2303      	movs	r3, #3
 800b320:	e01c      	b.n	800b35c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800b322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b326:	3301      	adds	r3, #1
 800b328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b32c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b330:	2b01      	cmp	r3, #1
 800b332:	d805      	bhi.n	800b340 <USBH_ParseCfgDesc+0x1d4>
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	885a      	ldrh	r2, [r3, #2]
 800b338:	8afb      	ldrh	r3, [r7, #22]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	f63f af70 	bhi.w	800b220 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	791b      	ldrb	r3, [r3, #4]
 800b344:	2b02      	cmp	r3, #2
 800b346:	bf28      	it	cs
 800b348:	2302      	movcs	r3, #2
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b350:	429a      	cmp	r2, r3
 800b352:	d201      	bcs.n	800b358 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800b354:	2303      	movs	r3, #3
 800b356:	e001      	b.n	800b35c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800b358:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3730      	adds	r7, #48	@ 0x30
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	785a      	ldrb	r2, [r3, #1]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	789a      	ldrb	r2, [r3, #2]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	78da      	ldrb	r2, [r3, #3]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	791a      	ldrb	r2, [r3, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	795a      	ldrb	r2, [r3, #5]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	799a      	ldrb	r2, [r3, #6]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	79da      	ldrb	r2, [r3, #7]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	7a1a      	ldrb	r2, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	721a      	strb	r2, [r3, #8]
}
 800b3b6:	bf00      	nop
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b3c2:	b480      	push	{r7}
 800b3c4:	b087      	sub	sp, #28
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	781a      	ldrb	r2, [r3, #0]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	785a      	ldrb	r2, [r3, #1]
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	789a      	ldrb	r2, [r3, #2]
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	78da      	ldrb	r2, [r3, #3]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	3305      	adds	r3, #5
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	021b      	lsls	r3, r3, #8
 800b402:	b29b      	uxth	r3, r3
 800b404:	4313      	orrs	r3, r2
 800b406:	b29a      	uxth	r2, r3
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	799a      	ldrb	r2, [r3, #6]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	889b      	ldrh	r3, [r3, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d009      	beq.n	800b430 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b424:	d804      	bhi.n	800b430 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b42a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b42e:	d901      	bls.n	800b434 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b430:	2303      	movs	r3, #3
 800b432:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d136      	bne.n	800b4ac <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	78db      	ldrb	r3, [r3, #3]
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d108      	bne.n	800b45c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	889b      	ldrh	r3, [r3, #4]
 800b44e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b452:	f240 8097 	bls.w	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b456:	2303      	movs	r3, #3
 800b458:	75fb      	strb	r3, [r7, #23]
 800b45a:	e093      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	78db      	ldrb	r3, [r3, #3]
 800b460:	f003 0303 	and.w	r3, r3, #3
 800b464:	2b00      	cmp	r3, #0
 800b466:	d107      	bne.n	800b478 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	889b      	ldrh	r3, [r3, #4]
 800b46c:	2b40      	cmp	r3, #64	@ 0x40
 800b46e:	f240 8089 	bls.w	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b472:	2303      	movs	r3, #3
 800b474:	75fb      	strb	r3, [r7, #23]
 800b476:	e085      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	78db      	ldrb	r3, [r3, #3]
 800b47c:	f003 0303 	and.w	r3, r3, #3
 800b480:	2b01      	cmp	r3, #1
 800b482:	d005      	beq.n	800b490 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	78db      	ldrb	r3, [r3, #3]
 800b488:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d10a      	bne.n	800b4a6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	799b      	ldrb	r3, [r3, #6]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <USBH_ParseEPDesc+0xde>
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	799b      	ldrb	r3, [r3, #6]
 800b49c:	2b10      	cmp	r3, #16
 800b49e:	d970      	bls.n	800b582 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b4a4:	e06d      	b.n	800b582 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	75fb      	strb	r3, [r7, #23]
 800b4aa:	e06b      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d13c      	bne.n	800b530 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	78db      	ldrb	r3, [r3, #3]
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d005      	beq.n	800b4ce <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	78db      	ldrb	r3, [r3, #3]
 800b4c6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	889b      	ldrh	r3, [r3, #4]
 800b4d2:	2b40      	cmp	r3, #64	@ 0x40
 800b4d4:	d956      	bls.n	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b4da:	e053      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	78db      	ldrb	r3, [r3, #3]
 800b4e0:	f003 0303 	and.w	r3, r3, #3
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d10e      	bne.n	800b506 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	799b      	ldrb	r3, [r3, #6]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d007      	beq.n	800b500 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b4f4:	2b10      	cmp	r3, #16
 800b4f6:	d803      	bhi.n	800b500 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b4fc:	2b40      	cmp	r3, #64	@ 0x40
 800b4fe:	d941      	bls.n	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b500:	2303      	movs	r3, #3
 800b502:	75fb      	strb	r3, [r7, #23]
 800b504:	e03e      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	78db      	ldrb	r3, [r3, #3]
 800b50a:	f003 0303 	and.w	r3, r3, #3
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d10b      	bne.n	800b52a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	799b      	ldrb	r3, [r3, #6]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <USBH_ParseEPDesc+0x162>
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	889b      	ldrh	r3, [r3, #4]
 800b51e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b522:	d32f      	bcc.n	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b524:	2303      	movs	r3, #3
 800b526:	75fb      	strb	r3, [r7, #23]
 800b528:	e02c      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b52a:	2303      	movs	r3, #3
 800b52c:	75fb      	strb	r3, [r7, #23]
 800b52e:	e029      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b536:	2b02      	cmp	r3, #2
 800b538:	d120      	bne.n	800b57c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	78db      	ldrb	r3, [r3, #3]
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	889b      	ldrh	r3, [r3, #4]
 800b54a:	2b08      	cmp	r3, #8
 800b54c:	d01a      	beq.n	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b54e:	2303      	movs	r3, #3
 800b550:	75fb      	strb	r3, [r7, #23]
 800b552:	e017      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	78db      	ldrb	r3, [r3, #3]
 800b558:	f003 0303 	and.w	r3, r3, #3
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d10a      	bne.n	800b576 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	799b      	ldrb	r3, [r3, #6]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <USBH_ParseEPDesc+0x1ae>
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	889b      	ldrh	r3, [r3, #4]
 800b56c:	2b08      	cmp	r3, #8
 800b56e:	d909      	bls.n	800b584 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b570:	2303      	movs	r3, #3
 800b572:	75fb      	strb	r3, [r7, #23]
 800b574:	e006      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b576:	2303      	movs	r3, #3
 800b578:	75fb      	strb	r3, [r7, #23]
 800b57a:	e003      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b57c:	2303      	movs	r3, #3
 800b57e:	75fb      	strb	r3, [r7, #23]
 800b580:	e000      	b.n	800b584 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b582:	bf00      	nop
  }

  return status;
 800b584:	7dfb      	ldrb	r3, [r7, #23]
}
 800b586:	4618      	mov	r0, r3
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b592:	b480      	push	{r7}
 800b594:	b087      	sub	sp, #28
 800b596:	af00      	add	r7, sp, #0
 800b598:	60f8      	str	r0, [r7, #12]
 800b59a:	60b9      	str	r1, [r7, #8]
 800b59c:	4613      	mov	r3, r2
 800b59e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d120      	bne.n	800b5ec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	1e9a      	subs	r2, r3, #2
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	bf28      	it	cs
 800b5b6:	4613      	movcs	r3, r2
 800b5b8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	3302      	adds	r3, #2
 800b5be:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	82fb      	strh	r3, [r7, #22]
 800b5c4:	e00b      	b.n	800b5de <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b5c6:	8afb      	ldrh	r3, [r7, #22]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	781a      	ldrb	r2, [r3, #0]
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b5d8:	8afb      	ldrh	r3, [r7, #22]
 800b5da:	3302      	adds	r3, #2
 800b5dc:	82fb      	strh	r3, [r7, #22]
 800b5de:	8afa      	ldrh	r2, [r7, #22]
 800b5e0:	8abb      	ldrh	r3, [r7, #20]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d3ef      	bcc.n	800b5c6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	701a      	strb	r2, [r3, #0]
  }
}
 800b5ec:	bf00      	nop
 800b5ee:	371c      	adds	r7, #28
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	7812      	ldrb	r2, [r2, #0]
 800b60a:	4413      	add	r3, r2
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4413      	add	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b61e:	68fb      	ldr	r3, [r7, #12]
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	60f8      	str	r0, [r7, #12]
 800b634:	60b9      	str	r1, [r7, #8]
 800b636:	4613      	mov	r3, r2
 800b638:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b63a:	2301      	movs	r3, #1
 800b63c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	789b      	ldrb	r3, [r3, #2]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d002      	beq.n	800b64c <USBH_CtlReq+0x20>
 800b646:	2b02      	cmp	r3, #2
 800b648:	d015      	beq.n	800b676 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800b64a:	e033      	b.n	800b6b4 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	88fa      	ldrh	r2, [r7, #6]
 800b656:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2201      	movs	r2, #1
 800b65c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2202      	movs	r2, #2
 800b662:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b664:	2301      	movs	r3, #1
 800b666:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b668:	2300      	movs	r3, #0
 800b66a:	2200      	movs	r2, #0
 800b66c:	2103      	movs	r1, #3
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f7ff fb34 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b674:	e01e      	b.n	800b6b4 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f000 f822 	bl	800b6c0 <USBH_HandleControl>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <USBH_CtlReq+0x60>
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d106      	bne.n	800b69a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2201      	movs	r2, #1
 800b690:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	761a      	strb	r2, [r3, #24]
 800b698:	e005      	b.n	800b6a6 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d102      	bne.n	800b6a6 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2103      	movs	r1, #3
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7ff fb15 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b6b2:	bf00      	nop
  }
  return status;
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
	...

0800b6c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af02      	add	r7, sp, #8
 800b6c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7e1b      	ldrb	r3, [r3, #24]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	2b0a      	cmp	r3, #10
 800b6d8:	f200 81b2 	bhi.w	800ba40 <USBH_HandleControl+0x380>
 800b6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b6e4 <USBH_HandleControl+0x24>)
 800b6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e2:	bf00      	nop
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	0800b72b 	.word	0x0800b72b
 800b6ec:	0800b7ad 	.word	0x0800b7ad
 800b6f0:	0800b7d3 	.word	0x0800b7d3
 800b6f4:	0800b831 	.word	0x0800b831
 800b6f8:	0800b85b 	.word	0x0800b85b
 800b6fc:	0800b8dd 	.word	0x0800b8dd
 800b700:	0800b8ff 	.word	0x0800b8ff
 800b704:	0800b961 	.word	0x0800b961
 800b708:	0800b987 	.word	0x0800b987
 800b70c:	0800b9e9 	.word	0x0800b9e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f103 0110 	add.w	r1, r3, #16
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	795b      	ldrb	r3, [r3, #5]
 800b71a:	461a      	mov	r2, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 f99f 	bl	800ba60 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2202      	movs	r2, #2
 800b726:	761a      	strb	r2, [r3, #24]
      break;
 800b728:	e195      	b.n	800ba56 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	795b      	ldrb	r3, [r3, #5]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f005 f845 	bl	80107c0 <USBH_LL_GetURBState>
 800b736:	4603      	mov	r3, r0
 800b738:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	d124      	bne.n	800b78a <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	7c1b      	ldrb	r3, [r3, #16]
 800b744:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b748:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	8adb      	ldrh	r3, [r3, #22]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b752:	7b7b      	ldrb	r3, [r7, #13]
 800b754:	2b80      	cmp	r3, #128	@ 0x80
 800b756:	d103      	bne.n	800b760 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2203      	movs	r2, #3
 800b75c:	761a      	strb	r2, [r3, #24]
 800b75e:	e00d      	b.n	800b77c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2205      	movs	r2, #5
 800b764:	761a      	strb	r2, [r3, #24]
 800b766:	e009      	b.n	800b77c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b768:	7b7b      	ldrb	r3, [r7, #13]
 800b76a:	2b80      	cmp	r3, #128	@ 0x80
 800b76c:	d103      	bne.n	800b776 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2209      	movs	r2, #9
 800b772:	761a      	strb	r2, [r3, #24]
 800b774:	e002      	b.n	800b77c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2207      	movs	r2, #7
 800b77a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b77c:	2300      	movs	r3, #0
 800b77e:	2200      	movs	r2, #0
 800b780:	2103      	movs	r1, #3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7ff faaa 	bl	800acdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b788:	e15c      	b.n	800ba44 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	2b04      	cmp	r3, #4
 800b78e:	d003      	beq.n	800b798 <USBH_HandleControl+0xd8>
 800b790:	7bbb      	ldrb	r3, [r7, #14]
 800b792:	2b02      	cmp	r3, #2
 800b794:	f040 8156 	bne.w	800ba44 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	220b      	movs	r2, #11
 800b79c:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2103      	movs	r1, #3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff fa99 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b7aa:	e14b      	b.n	800ba44 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6899      	ldr	r1, [r3, #8]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	899a      	ldrh	r2, [r3, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	791b      	ldrb	r3, [r3, #4]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f98a 	bl	800bade <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2204      	movs	r2, #4
 800b7ce:	761a      	strb	r2, [r3, #24]
      break;
 800b7d0:	e141      	b.n	800ba56 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	791b      	ldrb	r3, [r3, #4]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f004 fff1 	bl	80107c0 <USBH_LL_GetURBState>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d109      	bne.n	800b7fc <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2209      	movs	r2, #9
 800b7ec:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	2103      	movs	r1, #3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff fa71 	bl	800acdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b7fa:	e125      	b.n	800ba48 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	2b05      	cmp	r3, #5
 800b800:	d108      	bne.n	800b814 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800b802:	2303      	movs	r3, #3
 800b804:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b806:	2300      	movs	r3, #0
 800b808:	2200      	movs	r2, #0
 800b80a:	2103      	movs	r1, #3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff fa65 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b812:	e119      	b.n	800ba48 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b04      	cmp	r3, #4
 800b818:	f040 8116 	bne.w	800ba48 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	220b      	movs	r2, #11
 800b820:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b822:	2300      	movs	r3, #0
 800b824:	2200      	movs	r2, #0
 800b826:	2103      	movs	r1, #3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff fa57 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b82e:	e10b      	b.n	800ba48 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6899      	ldr	r1, [r3, #8]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	899a      	ldrh	r2, [r3, #12]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	795b      	ldrb	r3, [r3, #5]
 800b83c:	2001      	movs	r0, #1
 800b83e:	9000      	str	r0, [sp, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f927 	bl	800ba94 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2206      	movs	r2, #6
 800b856:	761a      	strb	r2, [r3, #24]
      break;
 800b858:	e0fd      	b.n	800ba56 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	795b      	ldrb	r3, [r3, #5]
 800b85e:	4619      	mov	r1, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f004 ffad 	bl	80107c0 <USBH_LL_GetURBState>
 800b866:	4603      	mov	r3, r0
 800b868:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b86a:	7bbb      	ldrb	r3, [r7, #14]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d109      	bne.n	800b884 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2207      	movs	r2, #7
 800b874:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b876:	2300      	movs	r3, #0
 800b878:	2200      	movs	r2, #0
 800b87a:	2103      	movs	r1, #3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff fa2d 	bl	800acdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b882:	e0e3      	b.n	800ba4c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b05      	cmp	r3, #5
 800b888:	d10b      	bne.n	800b8a2 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	220c      	movs	r2, #12
 800b88e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b890:	2303      	movs	r3, #3
 800b892:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b894:	2300      	movs	r3, #0
 800b896:	2200      	movs	r2, #0
 800b898:	2103      	movs	r1, #3
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f7ff fa1e 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b8a0:	e0d4      	b.n	800ba4c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d109      	bne.n	800b8bc <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2205      	movs	r2, #5
 800b8ac:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2103      	movs	r1, #3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f7ff fa11 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b8ba:	e0c7      	b.n	800ba4c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	f040 80c4 	bne.w	800ba4c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	220b      	movs	r2, #11
 800b8c8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b8ca:	2302      	movs	r3, #2
 800b8cc:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2103      	movs	r1, #3
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7ff fa01 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b8da:	e0b7      	b.n	800ba4c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	791b      	ldrb	r3, [r3, #4]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f000 f8fa 	bl	800bade <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b8f0:	b29a      	uxth	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2208      	movs	r2, #8
 800b8fa:	761a      	strb	r2, [r3, #24]

      break;
 800b8fc:	e0ab      	b.n	800ba56 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	791b      	ldrb	r3, [r3, #4]
 800b902:	4619      	mov	r1, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f004 ff5b 	bl	80107c0 <USBH_LL_GetURBState>
 800b90a:	4603      	mov	r3, r0
 800b90c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b90e:	7bbb      	ldrb	r3, [r7, #14]
 800b910:	2b01      	cmp	r3, #1
 800b912:	d10b      	bne.n	800b92c <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	220d      	movs	r2, #13
 800b918:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b91a:	2300      	movs	r3, #0
 800b91c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b91e:	2300      	movs	r3, #0
 800b920:	2200      	movs	r2, #0
 800b922:	2103      	movs	r1, #3
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7ff f9d9 	bl	800acdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b92a:	e091      	b.n	800ba50 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d109      	bne.n	800b946 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	220b      	movs	r2, #11
 800b936:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b938:	2300      	movs	r3, #0
 800b93a:	2200      	movs	r2, #0
 800b93c:	2103      	movs	r1, #3
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f7ff f9cc 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b944:	e084      	b.n	800ba50 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800b946:	7bbb      	ldrb	r3, [r7, #14]
 800b948:	2b05      	cmp	r3, #5
 800b94a:	f040 8081 	bne.w	800ba50 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800b94e:	2303      	movs	r3, #3
 800b950:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b952:	2300      	movs	r3, #0
 800b954:	2200      	movs	r2, #0
 800b956:	2103      	movs	r1, #3
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f7ff f9bf 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b95e:	e077      	b.n	800ba50 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	795b      	ldrb	r3, [r3, #5]
 800b964:	2201      	movs	r2, #1
 800b966:	9200      	str	r2, [sp, #0]
 800b968:	2200      	movs	r2, #0
 800b96a:	2100      	movs	r1, #0
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f891 	bl	800ba94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b978:	b29a      	uxth	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	220a      	movs	r2, #10
 800b982:	761a      	strb	r2, [r3, #24]
      break;
 800b984:	e067      	b.n	800ba56 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	795b      	ldrb	r3, [r3, #5]
 800b98a:	4619      	mov	r1, r3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f004 ff17 	bl	80107c0 <USBH_LL_GetURBState>
 800b992:	4603      	mov	r3, r0
 800b994:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d10b      	bne.n	800b9b4 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800b99c:	2300      	movs	r3, #0
 800b99e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	220d      	movs	r2, #13
 800b9a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2103      	movs	r1, #3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff f995 	bl	800acdc <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800b9b2:	e04f      	b.n	800ba54 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b9b4:	7bbb      	ldrb	r3, [r7, #14]
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d109      	bne.n	800b9ce <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2209      	movs	r2, #9
 800b9be:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	2103      	movs	r1, #3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff f988 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b9cc:	e042      	b.n	800ba54 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	2b04      	cmp	r3, #4
 800b9d2:	d13f      	bne.n	800ba54 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	220b      	movs	r2, #11
 800b9d8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800b9da:	2300      	movs	r3, #0
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2103      	movs	r1, #3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff f97b 	bl	800acdc <USBH_OS_PutMessage>
      break;
 800b9e6:	e035      	b.n	800ba54 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	7e5b      	ldrb	r3, [r3, #25]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	765a      	strb	r2, [r3, #25]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7e5b      	ldrb	r3, [r3, #25]
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d806      	bhi.n	800ba0a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ba08:	e025      	b.n	800ba56 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ba10:	2106      	movs	r1, #6
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	795b      	ldrb	r3, [r3, #5]
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f90c 	bl	800bc40 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	791b      	ldrb	r3, [r3, #4]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 f906 	bl	800bc40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ba3a:	2302      	movs	r3, #2
 800ba3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3e:	e00a      	b.n	800ba56 <USBH_HandleControl+0x396>

    default:
      break;
 800ba40:	bf00      	nop
 800ba42:	e008      	b.n	800ba56 <USBH_HandleControl+0x396>
      break;
 800ba44:	bf00      	nop
 800ba46:	e006      	b.n	800ba56 <USBH_HandleControl+0x396>
      break;
 800ba48:	bf00      	nop
 800ba4a:	e004      	b.n	800ba56 <USBH_HandleControl+0x396>
      break;
 800ba4c:	bf00      	nop
 800ba4e:	e002      	b.n	800ba56 <USBH_HandleControl+0x396>
      break;
 800ba50:	bf00      	nop
 800ba52:	e000      	b.n	800ba56 <USBH_HandleControl+0x396>
      break;
 800ba54:	bf00      	nop
  }

  return status;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af04      	add	r7, sp, #16
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ba6e:	79f9      	ldrb	r1, [r7, #7]
 800ba70:	2300      	movs	r3, #0
 800ba72:	9303      	str	r3, [sp, #12]
 800ba74:	2308      	movs	r3, #8
 800ba76:	9302      	str	r3, [sp, #8]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	2300      	movs	r3, #0
 800ba82:	2200      	movs	r2, #0
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f004 fe6a 	bl	801075e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b088      	sub	sp, #32
 800ba98:	af04      	add	r7, sp, #16
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	4611      	mov	r1, r2
 800baa0:	461a      	mov	r2, r3
 800baa2:	460b      	mov	r3, r1
 800baa4:	80fb      	strh	r3, [r7, #6]
 800baa6:	4613      	mov	r3, r2
 800baa8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bab4:	2300      	movs	r3, #0
 800bab6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bab8:	7979      	ldrb	r1, [r7, #5]
 800baba:	7e3b      	ldrb	r3, [r7, #24]
 800babc:	9303      	str	r3, [sp, #12]
 800babe:	88fb      	ldrh	r3, [r7, #6]
 800bac0:	9302      	str	r3, [sp, #8]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	2301      	movs	r3, #1
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	2300      	movs	r3, #0
 800bacc:	2200      	movs	r2, #0
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f004 fe45 	bl	801075e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b088      	sub	sp, #32
 800bae2:	af04      	add	r7, sp, #16
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	4611      	mov	r1, r2
 800baea:	461a      	mov	r2, r3
 800baec:	460b      	mov	r3, r1
 800baee:	80fb      	strh	r3, [r7, #6]
 800baf0:	4613      	mov	r3, r2
 800baf2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800baf4:	7979      	ldrb	r1, [r7, #5]
 800baf6:	2300      	movs	r3, #0
 800baf8:	9303      	str	r3, [sp, #12]
 800bafa:	88fb      	ldrh	r3, [r7, #6]
 800bafc:	9302      	str	r3, [sp, #8]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	9301      	str	r3, [sp, #4]
 800bb02:	2301      	movs	r3, #1
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	2300      	movs	r3, #0
 800bb08:	2201      	movs	r2, #1
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f004 fe27 	bl	801075e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bb10:	2300      	movs	r3, #0

}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b088      	sub	sp, #32
 800bb1e:	af04      	add	r7, sp, #16
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4611      	mov	r1, r2
 800bb26:	461a      	mov	r2, r3
 800bb28:	460b      	mov	r3, r1
 800bb2a:	80fb      	strh	r3, [r7, #6]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb3e:	7979      	ldrb	r1, [r7, #5]
 800bb40:	7e3b      	ldrb	r3, [r7, #24]
 800bb42:	9303      	str	r3, [sp, #12]
 800bb44:	88fb      	ldrh	r3, [r7, #6]
 800bb46:	9302      	str	r3, [sp, #8]
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	9301      	str	r3, [sp, #4]
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	2302      	movs	r3, #2
 800bb52:	2200      	movs	r2, #0
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f004 fe02 	bl	801075e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af04      	add	r7, sp, #16
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	4611      	mov	r1, r2
 800bb70:	461a      	mov	r2, r3
 800bb72:	460b      	mov	r3, r1
 800bb74:	80fb      	strh	r3, [r7, #6]
 800bb76:	4613      	mov	r3, r2
 800bb78:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bb7a:	7979      	ldrb	r1, [r7, #5]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	9303      	str	r3, [sp, #12]
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	9302      	str	r3, [sp, #8]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	9301      	str	r3, [sp, #4]
 800bb88:	2301      	movs	r3, #1
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	2201      	movs	r2, #1
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f004 fde4 	bl	801075e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bb96:	2300      	movs	r3, #0
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af04      	add	r7, sp, #16
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	70fb      	strb	r3, [r7, #3]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70bb      	strb	r3, [r7, #2]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bbba:	7878      	ldrb	r0, [r7, #1]
 800bbbc:	78ba      	ldrb	r2, [r7, #2]
 800bbbe:	78f9      	ldrb	r1, [r7, #3]
 800bbc0:	8b3b      	ldrh	r3, [r7, #24]
 800bbc2:	9302      	str	r3, [sp, #8]
 800bbc4:	7d3b      	ldrb	r3, [r7, #20]
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	7c3b      	ldrb	r3, [r7, #16]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	4603      	mov	r3, r0
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f004 fd77 	bl	80106c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	4619      	mov	r1, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f004 fd96 	bl	8010720 <USBH_LL_ClosePipe>

  return USBH_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}

0800bbfe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f836 	bl	800bc7c <USBH_GetFreePipe>
 800bc10:	4603      	mov	r3, r0
 800bc12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800bc14:	89fb      	ldrh	r3, [r7, #14]
 800bc16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d00a      	beq.n	800bc34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	89fb      	ldrh	r3, [r7, #14]
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	33e0      	adds	r3, #224	@ 0xe0
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	440b      	add	r3, r1
 800bc32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800bc34:	89fb      	ldrh	r3, [r7, #14]
 800bc36:	b2db      	uxtb	r3, r3
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	2b0f      	cmp	r3, #15
 800bc50:	d80d      	bhi.n	800bc6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800bc52:	78fb      	ldrb	r3, [r7, #3]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	33e0      	adds	r3, #224	@ 0xe0
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	33e0      	adds	r3, #224	@ 0xe0
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	440b      	add	r3, r1
 800bc6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]
 800bc8c:	e00f      	b.n	800bcae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bc8e:	7bfb      	ldrb	r3, [r7, #15]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	33e0      	adds	r3, #224	@ 0xe0
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	e007      	b.n	800bcb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
 800bcaa:	3301      	adds	r3, #1
 800bcac:	73fb      	strb	r3, [r7, #15]
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	2b0f      	cmp	r3, #15
 800bcb2:	d9ec      	bls.n	800bc8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bcb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <__NVIC_SetPriority>:
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	6039      	str	r1, [r7, #0]
 800bcce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	db0a      	blt.n	800bcee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	490c      	ldr	r1, [pc, #48]	@ (800bd10 <__NVIC_SetPriority+0x4c>)
 800bcde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce2:	0112      	lsls	r2, r2, #4
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	440b      	add	r3, r1
 800bce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bcec:	e00a      	b.n	800bd04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	4908      	ldr	r1, [pc, #32]	@ (800bd14 <__NVIC_SetPriority+0x50>)
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	3b04      	subs	r3, #4
 800bcfc:	0112      	lsls	r2, r2, #4
 800bcfe:	b2d2      	uxtb	r2, r2
 800bd00:	440b      	add	r3, r1
 800bd02:	761a      	strb	r2, [r3, #24]
}
 800bd04:	bf00      	nop
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	e000e100 	.word	0xe000e100
 800bd14:	e000ed00 	.word	0xe000ed00

0800bd18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bd1c:	4b05      	ldr	r3, [pc, #20]	@ (800bd34 <SysTick_Handler+0x1c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bd20:	f002 ff78 	bl	800ec14 <xTaskGetSchedulerState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d001      	beq.n	800bd2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bd2a:	f004 f875 	bl	800fe18 <xPortSysTickHandler>
  }
}
 800bd2e:	bf00      	nop
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	e000e010 	.word	0xe000e010

0800bd38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	f06f 0004 	mvn.w	r0, #4
 800bd42:	f7ff ffbf 	bl	800bcc4 <__NVIC_SetPriority>
#endif
}
 800bd46:	bf00      	nop
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd52:	f3ef 8305 	mrs	r3, IPSR
 800bd56:	603b      	str	r3, [r7, #0]
  return(result);
 800bd58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d003      	beq.n	800bd66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd5e:	f06f 0305 	mvn.w	r3, #5
 800bd62:	607b      	str	r3, [r7, #4]
 800bd64:	e00c      	b.n	800bd80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd66:	4b0a      	ldr	r3, [pc, #40]	@ (800bd90 <osKernelInitialize+0x44>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d105      	bne.n	800bd7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd6e:	4b08      	ldr	r3, [pc, #32]	@ (800bd90 <osKernelInitialize+0x44>)
 800bd70:	2201      	movs	r2, #1
 800bd72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	607b      	str	r3, [r7, #4]
 800bd78:	e002      	b.n	800bd80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd80:	687b      	ldr	r3, [r7, #4]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	20000530 	.word	0x20000530

0800bd94 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d005      	beq.n	800bdb2 <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	4a0c      	ldr	r2, [pc, #48]	@ (800bddc <osKernelGetInfo+0x48>)
 800bdaa:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a0b      	ldr	r2, [pc, #44]	@ (800bddc <osKernelGetInfo+0x48>)
 800bdb0:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00c      	beq.n	800bdd2 <osKernelGetInfo+0x3e>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d009      	beq.n	800bdd2 <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2b11      	cmp	r3, #17
 800bdc2:	d901      	bls.n	800bdc8 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800bdc4:	2311      	movs	r3, #17
 800bdc6:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	4905      	ldr	r1, [pc, #20]	@ (800bde0 <osKernelGetInfo+0x4c>)
 800bdcc:	68b8      	ldr	r0, [r7, #8]
 800bdce:	f005 f980 	bl	80110d2 <memcpy>
  }

  return (osOK);
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	05f5f531 	.word	0x05f5f531
 800bde0:	08012878 	.word	0x08012878

0800bde4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdea:	f3ef 8305 	mrs	r3, IPSR
 800bdee:	603b      	str	r3, [r7, #0]
  return(result);
 800bdf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <osKernelStart+0x1a>
    stat = osErrorISR;
 800bdf6:	f06f 0305 	mvn.w	r3, #5
 800bdfa:	607b      	str	r3, [r7, #4]
 800bdfc:	e010      	b.n	800be20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bdfe:	4b0b      	ldr	r3, [pc, #44]	@ (800be2c <osKernelStart+0x48>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d109      	bne.n	800be1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800be06:	f7ff ff97 	bl	800bd38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800be0a:	4b08      	ldr	r3, [pc, #32]	@ (800be2c <osKernelStart+0x48>)
 800be0c:	2202      	movs	r2, #2
 800be0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800be10:	f002 f888 	bl	800df24 <vTaskStartScheduler>
      stat = osOK;
 800be14:	2300      	movs	r3, #0
 800be16:	607b      	str	r3, [r7, #4]
 800be18:	e002      	b.n	800be20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800be1a:	f04f 33ff 	mov.w	r3, #4294967295
 800be1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800be20:	687b      	ldr	r3, [r7, #4]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3708      	adds	r7, #8
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20000530 	.word	0x20000530

0800be30 <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800be30:	b480      	push	{r7}
 800be32:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800be34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800be38:	4618      	mov	r0, r3
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800be48:	4b03      	ldr	r3, [pc, #12]	@ (800be58 <osKernelGetSysTimerFreq+0x14>)
 800be4a:	681b      	ldr	r3, [r3, #0]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	2000022c 	.word	0x2000022c

0800be5c <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08e      	sub	sp, #56	@ 0x38
 800be60:	af04      	add	r7, sp, #16
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be6c:	f3ef 8305 	mrs	r3, IPSR
 800be70:	617b      	str	r3, [r7, #20]
  return(result);
 800be72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800be74:	2b00      	cmp	r3, #0
 800be76:	d17e      	bne.n	800bf76 <osThreadNew+0x11a>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d07b      	beq.n	800bf76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800be7e:	2380      	movs	r3, #128	@ 0x80
 800be80:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800be82:	2318      	movs	r3, #24
 800be84:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800be86:	2300      	movs	r3, #0
 800be88:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800be8a:	f04f 33ff 	mov.w	r3, #4294967295
 800be8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d045      	beq.n	800bf22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <osThreadNew+0x48>
        name = attr->name;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d008      	beq.n	800beca <osThreadNew+0x6e>
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	2b38      	cmp	r3, #56	@ 0x38
 800bebc:	d805      	bhi.n	800beca <osThreadNew+0x6e>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <osThreadNew+0x72>
        return (NULL);
 800beca:	2300      	movs	r3, #0
 800becc:	e054      	b.n	800bf78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	089b      	lsrs	r3, r3, #2
 800bedc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00e      	beq.n	800bf04 <osThreadNew+0xa8>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	2ba7      	cmp	r3, #167	@ 0xa7
 800beec:	d90a      	bls.n	800bf04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d006      	beq.n	800bf04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <osThreadNew+0xa8>
        mem = 1;
 800befe:	2301      	movs	r3, #1
 800bf00:	61bb      	str	r3, [r7, #24]
 800bf02:	e010      	b.n	800bf26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10c      	bne.n	800bf26 <osThreadNew+0xca>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d108      	bne.n	800bf26 <osThreadNew+0xca>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	691b      	ldr	r3, [r3, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d104      	bne.n	800bf26 <osThreadNew+0xca>
          mem = 0;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	61bb      	str	r3, [r7, #24]
 800bf20:	e001      	b.n	800bf26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bf22:	2300      	movs	r3, #0
 800bf24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d110      	bne.n	800bf4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bf34:	9202      	str	r2, [sp, #8]
 800bf36:	9301      	str	r3, [sp, #4]
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	6a3a      	ldr	r2, [r7, #32]
 800bf40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f001 fb78 	bl	800d638 <xTaskCreateStatic>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	e013      	b.n	800bf76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d110      	bne.n	800bf76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	f107 0310 	add.w	r3, r7, #16
 800bf5c:	9301      	str	r3, [sp, #4]
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	9300      	str	r3, [sp, #0]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f001 fbc6 	bl	800d6f8 <xTaskCreate>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d001      	beq.n	800bf76 <osThreadNew+0x11a>
            hTask = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bf76:	693b      	ldr	r3, [r7, #16]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3728      	adds	r7, #40	@ 0x28
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf88:	f3ef 8305 	mrs	r3, IPSR
 800bf8c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bf8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d003      	beq.n	800bf9c <osDelay+0x1c>
    stat = osErrorISR;
 800bf94:	f06f 0305 	mvn.w	r3, #5
 800bf98:	60fb      	str	r3, [r7, #12]
 800bf9a:	e007      	b.n	800bfac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <osDelay+0x2c>
      vTaskDelay(ticks);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 fd78 	bl	800da9c <vTaskDelay>
    }
  }

  return (stat);
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b08a      	sub	sp, #40	@ 0x28
 800bfba:	af02      	add	r7, sp, #8
 800bfbc:	60f8      	str	r0, [r7, #12]
 800bfbe:	60b9      	str	r1, [r7, #8]
 800bfc0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfc6:	f3ef 8305 	mrs	r3, IPSR
 800bfca:	613b      	str	r3, [r7, #16]
  return(result);
 800bfcc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d15f      	bne.n	800c092 <osMessageQueueNew+0xdc>
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d05c      	beq.n	800c092 <osMessageQueueNew+0xdc>
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d059      	beq.n	800c092 <osMessageQueueNew+0xdc>
    mem = -1;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d029      	beq.n	800c03e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d012      	beq.n	800c018 <osMessageQueueNew+0x62>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	2b4f      	cmp	r3, #79	@ 0x4f
 800bff8:	d90e      	bls.n	800c018 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00a      	beq.n	800c018 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	695a      	ldr	r2, [r3, #20]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	fb01 f303 	mul.w	r3, r1, r3
 800c00e:	429a      	cmp	r2, r3
 800c010:	d302      	bcc.n	800c018 <osMessageQueueNew+0x62>
        mem = 1;
 800c012:	2301      	movs	r3, #1
 800c014:	61bb      	str	r3, [r7, #24]
 800c016:	e014      	b.n	800c042 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d110      	bne.n	800c042 <osMessageQueueNew+0x8c>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d10c      	bne.n	800c042 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d108      	bne.n	800c042 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d104      	bne.n	800c042 <osMessageQueueNew+0x8c>
          mem = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	61bb      	str	r3, [r7, #24]
 800c03c:	e001      	b.n	800c042 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c03e:	2300      	movs	r3, #0
 800c040:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d10b      	bne.n	800c060 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	2100      	movs	r1, #0
 800c052:	9100      	str	r1, [sp, #0]
 800c054:	68b9      	ldr	r1, [r7, #8]
 800c056:	68f8      	ldr	r0, [r7, #12]
 800c058:	f000 fc22 	bl	800c8a0 <xQueueGenericCreateStatic>
 800c05c:	61f8      	str	r0, [r7, #28]
 800c05e:	e008      	b.n	800c072 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d105      	bne.n	800c072 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c066:	2200      	movs	r2, #0
 800c068:	68b9      	ldr	r1, [r7, #8]
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 fc95 	bl	800c99a <xQueueGenericCreate>
 800c070:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00c      	beq.n	800c092 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	617b      	str	r3, [r7, #20]
 800c084:	e001      	b.n	800c08a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c08a:	6979      	ldr	r1, [r7, #20]
 800c08c:	69f8      	ldr	r0, [r7, #28]
 800c08e:	f001 fa75 	bl	800d57c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c092:	69fb      	ldr	r3, [r7, #28]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3720      	adds	r7, #32
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0b4:	f3ef 8305 	mrs	r3, IPSR
 800c0b8:	617b      	str	r3, [r7, #20]
  return(result);
 800c0ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d028      	beq.n	800c112 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d005      	beq.n	800c0d2 <osMessageQueuePut+0x36>
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <osMessageQueuePut+0x36>
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d003      	beq.n	800c0da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c0d2:	f06f 0303 	mvn.w	r3, #3
 800c0d6:	61fb      	str	r3, [r7, #28]
 800c0d8:	e038      	b.n	800c14c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c0de:	f107 0210 	add.w	r2, r7, #16
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	69b8      	ldr	r0, [r7, #24]
 800c0e8:	f000 fdea 	bl	800ccc0 <xQueueGenericSendFromISR>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d003      	beq.n	800c0fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c0f2:	f06f 0302 	mvn.w	r3, #2
 800c0f6:	61fb      	str	r3, [r7, #28]
 800c0f8:	e028      	b.n	800c14c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d025      	beq.n	800c14c <osMessageQueuePut+0xb0>
 800c100:	4b15      	ldr	r3, [pc, #84]	@ (800c158 <osMessageQueuePut+0xbc>)
 800c102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	e01c      	b.n	800c14c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <osMessageQueuePut+0x82>
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c11e:	f06f 0303 	mvn.w	r3, #3
 800c122:	61fb      	str	r3, [r7, #28]
 800c124:	e012      	b.n	800c14c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c126:	2300      	movs	r3, #0
 800c128:	683a      	ldr	r2, [r7, #0]
 800c12a:	68b9      	ldr	r1, [r7, #8]
 800c12c:	69b8      	ldr	r0, [r7, #24]
 800c12e:	f000 fcc5 	bl	800cabc <xQueueGenericSend>
 800c132:	4603      	mov	r3, r0
 800c134:	2b01      	cmp	r3, #1
 800c136:	d009      	beq.n	800c14c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c13e:	f06f 0301 	mvn.w	r3, #1
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	e002      	b.n	800c14c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c146:	f06f 0302 	mvn.w	r3, #2
 800c14a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c14c:	69fb      	ldr	r3, [r7, #28]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3720      	adds	r7, #32
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	e000ed04 	.word	0xe000ed04

0800c15c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b088      	sub	sp, #32
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c16e:	2300      	movs	r3, #0
 800c170:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c172:	f3ef 8305 	mrs	r3, IPSR
 800c176:	617b      	str	r3, [r7, #20]
  return(result);
 800c178:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d028      	beq.n	800c1d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <osMessageQueueGet+0x34>
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <osMessageQueueGet+0x34>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c190:	f06f 0303 	mvn.w	r3, #3
 800c194:	61fb      	str	r3, [r7, #28]
 800c196:	e037      	b.n	800c208 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c198:	2300      	movs	r3, #0
 800c19a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c19c:	f107 0310 	add.w	r3, r7, #16
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	69b8      	ldr	r0, [r7, #24]
 800c1a6:	f001 f81b 	bl	800d1e0 <xQueueReceiveFromISR>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d003      	beq.n	800c1b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c1b0:	f06f 0302 	mvn.w	r3, #2
 800c1b4:	61fb      	str	r3, [r7, #28]
 800c1b6:	e027      	b.n	800c208 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d024      	beq.n	800c208 <osMessageQueueGet+0xac>
 800c1be:	4b15      	ldr	r3, [pc, #84]	@ (800c214 <osMessageQueueGet+0xb8>)
 800c1c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c4:	601a      	str	r2, [r3, #0]
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	e01b      	b.n	800c208 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <osMessageQueueGet+0x80>
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d103      	bne.n	800c1e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c1dc:	f06f 0303 	mvn.w	r3, #3
 800c1e0:	61fb      	str	r3, [r7, #28]
 800c1e2:	e011      	b.n	800c208 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	68b9      	ldr	r1, [r7, #8]
 800c1e8:	69b8      	ldr	r0, [r7, #24]
 800c1ea:	f000 fe07 	bl	800cdfc <xQueueReceive>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d009      	beq.n	800c208 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c1fa:	f06f 0301 	mvn.w	r3, #1
 800c1fe:	61fb      	str	r3, [r7, #28]
 800c200:	e002      	b.n	800c208 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c202:	f06f 0302 	mvn.w	r3, #2
 800c206:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c208:	69fb      	ldr	r3, [r7, #28]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3720      	adds	r7, #32
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	e000ed04 	.word	0xe000ed04

0800c218 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08a      	sub	sp, #40	@ 0x28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800c224:	6a3b      	ldr	r3, [r7, #32]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d102      	bne.n	800c230 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800c22a:	2300      	movs	r3, #0
 800c22c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c22e:	e023      	b.n	800c278 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c230:	f3ef 8305 	mrs	r3, IPSR
 800c234:	61bb      	str	r3, [r7, #24]
  return(result);
 800c236:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d019      	beq.n	800c270 <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c23c:	f3ef 8211 	mrs	r2, BASEPRI
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	613a      	str	r2, [r7, #16]
 800c252:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c254:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800c256:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	627b      	str	r3, [r7, #36]	@ 0x24
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c26e:	e003      	b.n	800c278 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800c270:	6a38      	ldr	r0, [r7, #32]
 800c272:	f001 f837 	bl	800d2e4 <uxQueueSpacesAvailable>
 800c276:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800c278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3728      	adds	r7, #40	@ 0x28
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4a07      	ldr	r2, [pc, #28]	@ (800c2b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c294:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	4a06      	ldr	r2, [pc, #24]	@ (800c2b4 <vApplicationGetIdleTaskMemory+0x30>)
 800c29a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2280      	movs	r2, #128	@ 0x80
 800c2a0:	601a      	str	r2, [r3, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr
 800c2ae:	bf00      	nop
 800c2b0:	20000534 	.word	0x20000534
 800c2b4:	200005dc 	.word	0x200005dc

0800c2b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4a07      	ldr	r2, [pc, #28]	@ (800c2e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c2c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	4a06      	ldr	r2, [pc, #24]	@ (800c2e8 <vApplicationGetTimerTaskMemory+0x30>)
 800c2ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2d6:	601a      	str	r2, [r3, #0]
}
 800c2d8:	bf00      	nop
 800c2da:	3714      	adds	r7, #20
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr
 800c2e4:	200007dc 	.word	0x200007dc
 800c2e8:	20000884 	.word	0x20000884

0800c2ec <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c2f2:	2020      	movs	r0, #32
 800c2f4:	f003 fe22 	bl	800ff3c <pvPortMalloc>
 800c2f8:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00a      	beq.n	800c316 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3304      	adds	r3, #4
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 f9aa 	bl	800c664 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c316:	687b      	ldr	r3, [r7, #4]
	}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b090      	sub	sp, #64	@ 0x40
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
 800c32c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c336:	2300      	movs	r3, #0
 800c338:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10b      	bne.n	800c358 <xEventGroupWaitBits+0x38>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	623b      	str	r3, [r7, #32]
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	e7fd      	b.n	800c354 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c35e:	d30b      	bcc.n	800c378 <xEventGroupWaitBits+0x58>
	__asm volatile
 800c360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	61fb      	str	r3, [r7, #28]
}
 800c372:	bf00      	nop
 800c374:	bf00      	nop
 800c376:	e7fd      	b.n	800c374 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10b      	bne.n	800c396 <xEventGroupWaitBits+0x76>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	61bb      	str	r3, [r7, #24]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c396:	f002 fc3d 	bl	800ec14 <xTaskGetSchedulerState>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <xEventGroupWaitBits+0x86>
 800c3a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <xEventGroupWaitBits+0x8a>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xEventGroupWaitBits+0x8c>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10b      	bne.n	800c3c8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	617b      	str	r3, [r7, #20]
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	e7fd      	b.n	800c3c4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800c3c8:	f001 fe1c 	bl	800e004 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c3d8:	f000 f90d 	bl	800c5f6 <prvTestWaitCondition>
 800c3dc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800c3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00e      	beq.n	800c402 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d028      	beq.n	800c444 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	43db      	mvns	r3, r3
 800c3fa:	401a      	ands	r2, r3
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	e020      	b.n	800c444 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c404:	2b00      	cmp	r3, #0
 800c406:	d104      	bne.n	800c412 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800c40c:	2301      	movs	r3, #1
 800c40e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c410:	e018      	b.n	800c444 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c41a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c41e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c42c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c430:	1d18      	adds	r0, r3, #4
 800c432:	68ba      	ldr	r2, [r7, #8]
 800c434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c436:	4313      	orrs	r3, r2
 800c438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c43a:	4619      	mov	r1, r3
 800c43c:	f002 f8b8 	bl	800e5b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c444:	f001 fdec 	bl	800e020 <xTaskResumeAll>
 800c448:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d031      	beq.n	800c4b4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	2b00      	cmp	r3, #0
 800c454:	d107      	bne.n	800c466 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800c456:	4b1a      	ldr	r3, [pc, #104]	@ (800c4c0 <xEventGroupWaitBits+0x1a0>)
 800c458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c466:	f002 fd4f 	bl	800ef08 <uxTaskResetEventItemValue>
 800c46a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c46c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c46e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c472:	2b00      	cmp	r3, #0
 800c474:	d11a      	bne.n	800c4ac <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800c476:	f003 fc3f 	bl	800fcf8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c486:	f000 f8b6 	bl	800c5f6 <prvTestWaitCondition>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d009      	beq.n	800c4a4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d006      	beq.n	800c4a4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	43db      	mvns	r3, r3
 800c49e:	401a      	ands	r2, r3
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800c4a8:	f003 fc58 	bl	800fd5c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ae:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c4b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3740      	adds	r7, #64	@ 0x40
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	e000ed04 	.word	0xe000ed04

0800c4c4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08e      	sub	sp, #56	@ 0x38
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <xEventGroupSetBits+0x34>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	613b      	str	r3, [r7, #16]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4fe:	d30b      	bcc.n	800c518 <xEventGroupSetBits+0x54>
	__asm volatile
 800c500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c504:	f383 8811 	msr	BASEPRI, r3
 800c508:	f3bf 8f6f 	isb	sy
 800c50c:	f3bf 8f4f 	dsb	sy
 800c510:	60fb      	str	r3, [r7, #12]
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	e7fd      	b.n	800c514 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51a:	3304      	adds	r3, #4
 800c51c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c520:	3308      	adds	r3, #8
 800c522:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c524:	f001 fd6e 	bl	800e004 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	431a      	orrs	r2, r3
 800c536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c538:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c53a:	e03c      	b.n	800c5b6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c548:	2300      	movs	r3, #0
 800c54a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c552:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c55a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d108      	bne.n	800c578 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	69bb      	ldr	r3, [r7, #24]
 800c56c:	4013      	ands	r3, r2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00b      	beq.n	800c58a <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800c572:	2301      	movs	r3, #1
 800c574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c576:	e008      	b.n	800c58a <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800c578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	4013      	ands	r3, r2
 800c580:	69ba      	ldr	r2, [r7, #24]
 800c582:	429a      	cmp	r2, r3
 800c584:	d101      	bne.n	800c58a <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800c586:	2301      	movs	r3, #1
 800c588:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800c58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d010      	beq.n	800c5b2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c596:	2b00      	cmp	r3, #0
 800c598:	d003      	beq.n	800c5a2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800c59a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800c5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c5ae:	f002 f8cd 	bl	800e74c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800c5b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d1be      	bne.n	800c53c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800c5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c4:	43db      	mvns	r3, r3
 800c5c6:	401a      	ands	r2, r3
 800c5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ca:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800c5cc:	f001 fd28 	bl	800e020 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	681b      	ldr	r3, [r3, #0]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3738      	adds	r7, #56	@ 0x38
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff ff6b 	bl	800c4c4 <xEventGroupSetBits>
}
 800c5ee:	bf00      	nop
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b087      	sub	sp, #28
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d107      	bne.n	800c61c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	4013      	ands	r3, r2
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c616:	2301      	movs	r3, #1
 800c618:	617b      	str	r3, [r7, #20]
 800c61a:	e007      	b.n	800c62c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	4013      	ands	r3, r2
 800c622:	68ba      	ldr	r2, [r7, #8]
 800c624:	429a      	cmp	r2, r3
 800c626:	d101      	bne.n	800c62c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800c62c:	697b      	ldr	r3, [r7, #20]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	371c      	adds	r7, #28
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
	...

0800c63c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	4804      	ldr	r0, [pc, #16]	@ (800c660 <xEventGroupSetBitsFromISR+0x24>)
 800c650:	f003 fa00 	bl	800fa54 <xTimerPendFunctionCallFromISR>
 800c654:	6178      	str	r0, [r7, #20]

		return xReturn;
 800c656:	697b      	ldr	r3, [r7, #20]
	}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	0800c5dd 	.word	0x0800c5dd

0800c664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f103 0208 	add.w	r2, r3, #8
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f04f 32ff 	mov.w	r2, #4294967295
 800c67c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f103 0208 	add.w	r2, r3, #8
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f103 0208 	add.w	r2, r3, #8
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b083      	sub	sp, #12
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6b2:	bf00      	nop
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6be:	b480      	push	{r7}
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
 800c6c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	601a      	str	r2, [r3, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c706:	b480      	push	{r7}
 800c708:	b085      	sub	sp, #20
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71c:	d103      	bne.n	800c726 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	691b      	ldr	r3, [r3, #16]
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	e00c      	b.n	800c740 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3308      	adds	r3, #8
 800c72a:	60fb      	str	r3, [r7, #12]
 800c72c:	e002      	b.n	800c734 <vListInsert+0x2e>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d2f6      	bcs.n	800c72e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	685a      	ldr	r2, [r3, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	683a      	ldr	r2, [r7, #0]
 800c74e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	683a      	ldr	r2, [r7, #0]
 800c75a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	601a      	str	r2, [r3, #0]
}
 800c76c:	bf00      	nop
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6892      	ldr	r2, [r2, #8]
 800c78e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6852      	ldr	r2, [r2, #4]
 800c798:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d103      	bne.n	800c7ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	689a      	ldr	r2, [r3, #8]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	1e5a      	subs	r2, r3, #1
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3714      	adds	r7, #20
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10b      	bne.n	800c7f8 <xQueueGenericReset+0x2c>
	__asm volatile
 800c7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e4:	f383 8811 	msr	BASEPRI, r3
 800c7e8:	f3bf 8f6f 	isb	sy
 800c7ec:	f3bf 8f4f 	dsb	sy
 800c7f0:	60bb      	str	r3, [r7, #8]
}
 800c7f2:	bf00      	nop
 800c7f4:	bf00      	nop
 800c7f6:	e7fd      	b.n	800c7f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c7f8:	f003 fa7e 	bl	800fcf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c804:	68f9      	ldr	r1, [r7, #12]
 800c806:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c808:	fb01 f303 	mul.w	r3, r1, r3
 800c80c:	441a      	add	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2200      	movs	r2, #0
 800c816:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c828:	3b01      	subs	r3, #1
 800c82a:	68f9      	ldr	r1, [r7, #12]
 800c82c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c82e:	fb01 f303 	mul.w	r3, r1, r3
 800c832:	441a      	add	r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	22ff      	movs	r2, #255	@ 0xff
 800c83c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	22ff      	movs	r2, #255	@ 0xff
 800c844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d114      	bne.n	800c878 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01a      	beq.n	800c88c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3310      	adds	r3, #16
 800c85a:	4618      	mov	r0, r3
 800c85c:	f001 ff12 	bl	800e684 <xTaskRemoveFromEventList>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d012      	beq.n	800c88c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c866:	4b0d      	ldr	r3, [pc, #52]	@ (800c89c <xQueueGenericReset+0xd0>)
 800c868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c86c:	601a      	str	r2, [r3, #0]
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	e009      	b.n	800c88c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3310      	adds	r3, #16
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff fef1 	bl	800c664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3324      	adds	r3, #36	@ 0x24
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff feec 	bl	800c664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c88c:	f003 fa66 	bl	800fd5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c890:	2301      	movs	r3, #1
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	e000ed04 	.word	0xe000ed04

0800c8a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08e      	sub	sp, #56	@ 0x38
 800c8a4:	af02      	add	r7, sp, #8
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10b      	bne.n	800c8cc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c8c6:	bf00      	nop
 800c8c8:	bf00      	nop
 800c8ca:	e7fd      	b.n	800c8c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10b      	bne.n	800c8ea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop
 800c8e8:	e7fd      	b.n	800c8e6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <xQueueGenericCreateStatic+0x56>
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <xQueueGenericCreateStatic+0x5a>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <xQueueGenericCreateStatic+0x5c>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10b      	bne.n	800c918 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c904:	f383 8811 	msr	BASEPRI, r3
 800c908:	f3bf 8f6f 	isb	sy
 800c90c:	f3bf 8f4f 	dsb	sy
 800c910:	623b      	str	r3, [r7, #32]
}
 800c912:	bf00      	nop
 800c914:	bf00      	nop
 800c916:	e7fd      	b.n	800c914 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d102      	bne.n	800c924 <xQueueGenericCreateStatic+0x84>
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <xQueueGenericCreateStatic+0x88>
 800c924:	2301      	movs	r3, #1
 800c926:	e000      	b.n	800c92a <xQueueGenericCreateStatic+0x8a>
 800c928:	2300      	movs	r3, #0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10b      	bne.n	800c946 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	61fb      	str	r3, [r7, #28]
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	e7fd      	b.n	800c942 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c946:	2350      	movs	r3, #80	@ 0x50
 800c948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b50      	cmp	r3, #80	@ 0x50
 800c94e:	d00b      	beq.n	800c968 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	61bb      	str	r3, [r7, #24]
}
 800c962:	bf00      	nop
 800c964:	bf00      	nop
 800c966:	e7fd      	b.n	800c964 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c968:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00d      	beq.n	800c990 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c976:	2201      	movs	r2, #1
 800c978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c97c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c982:	9300      	str	r3, [sp, #0]
 800c984:	4613      	mov	r3, r2
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	68b9      	ldr	r1, [r7, #8]
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f000 f840 	bl	800ca10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c992:	4618      	mov	r0, r3
 800c994:	3730      	adds	r7, #48	@ 0x30
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b08a      	sub	sp, #40	@ 0x28
 800c99e:	af02      	add	r7, sp, #8
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10b      	bne.n	800c9c6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	613b      	str	r3, [r7, #16]
}
 800c9c0:	bf00      	nop
 800c9c2:	bf00      	nop
 800c9c4:	e7fd      	b.n	800c9c2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	fb02 f303 	mul.w	r3, r2, r3
 800c9ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	3350      	adds	r3, #80	@ 0x50
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f003 fab1 	bl	800ff3c <pvPortMalloc>
 800c9da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d011      	beq.n	800ca06 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	3350      	adds	r3, #80	@ 0x50
 800c9ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9f4:	79fa      	ldrb	r2, [r7, #7]
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	4613      	mov	r3, r2
 800c9fc:	697a      	ldr	r2, [r7, #20]
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	68f8      	ldr	r0, [r7, #12]
 800ca02:	f000 f805 	bl	800ca10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca06:	69bb      	ldr	r3, [r7, #24]
	}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3720      	adds	r7, #32
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	60b9      	str	r1, [r7, #8]
 800ca1a:	607a      	str	r2, [r7, #4]
 800ca1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d103      	bne.n	800ca2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	69ba      	ldr	r2, [r7, #24]
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	e002      	b.n	800ca32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca32:	69bb      	ldr	r3, [r7, #24]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca38:	69bb      	ldr	r3, [r7, #24]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca3e:	2101      	movs	r1, #1
 800ca40:	69b8      	ldr	r0, [r7, #24]
 800ca42:	f7ff fec3 	bl	800c7cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	78fa      	ldrb	r2, [r7, #3]
 800ca4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00e      	beq.n	800ca82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ca76:	2300      	movs	r3, #0
 800ca78:	2200      	movs	r2, #0
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f81d 	bl	800cabc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b086      	sub	sp, #24
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	4603      	mov	r3, r0
 800ca92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ca94:	2301      	movs	r3, #1
 800ca96:	617b      	str	r3, [r7, #20]
 800ca98:	2300      	movs	r3, #0
 800ca9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ca9c:	79fb      	ldrb	r3, [r7, #7]
 800ca9e:	461a      	mov	r2, r3
 800caa0:	6939      	ldr	r1, [r7, #16]
 800caa2:	6978      	ldr	r0, [r7, #20]
 800caa4:	f7ff ff79 	bl	800c99a <xQueueGenericCreate>
 800caa8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f7ff ffd3 	bl	800ca56 <prvInitialiseMutex>

		return xNewQueue;
 800cab0:	68fb      	ldr	r3, [r7, #12]
	}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08e      	sub	sp, #56	@ 0x38
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800caca:	2300      	movs	r3, #0
 800cacc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800cad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d10b      	bne.n	800caf0 <xQueueGenericSend+0x34>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800caea:	bf00      	nop
 800caec:	bf00      	nop
 800caee:	e7fd      	b.n	800caec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d103      	bne.n	800cafe <xQueueGenericSend+0x42>
 800caf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <xQueueGenericSend+0x46>
 800cafe:	2301      	movs	r3, #1
 800cb00:	e000      	b.n	800cb04 <xQueueGenericSend+0x48>
 800cb02:	2300      	movs	r3, #0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10b      	bne.n	800cb20 <xQueueGenericSend+0x64>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	e7fd      	b.n	800cb1c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	2b02      	cmp	r3, #2
 800cb24:	d103      	bne.n	800cb2e <xQueueGenericSend+0x72>
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d101      	bne.n	800cb32 <xQueueGenericSend+0x76>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e000      	b.n	800cb34 <xQueueGenericSend+0x78>
 800cb32:	2300      	movs	r3, #0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10b      	bne.n	800cb50 <xQueueGenericSend+0x94>
	__asm volatile
 800cb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3c:	f383 8811 	msr	BASEPRI, r3
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	f3bf 8f4f 	dsb	sy
 800cb48:	623b      	str	r3, [r7, #32]
}
 800cb4a:	bf00      	nop
 800cb4c:	bf00      	nop
 800cb4e:	e7fd      	b.n	800cb4c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb50:	f002 f860 	bl	800ec14 <xTaskGetSchedulerState>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d102      	bne.n	800cb60 <xQueueGenericSend+0xa4>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d101      	bne.n	800cb64 <xQueueGenericSend+0xa8>
 800cb60:	2301      	movs	r3, #1
 800cb62:	e000      	b.n	800cb66 <xQueueGenericSend+0xaa>
 800cb64:	2300      	movs	r3, #0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10b      	bne.n	800cb82 <xQueueGenericSend+0xc6>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	61fb      	str	r3, [r7, #28]
}
 800cb7c:	bf00      	nop
 800cb7e:	bf00      	nop
 800cb80:	e7fd      	b.n	800cb7e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb82:	f003 f8b9 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d302      	bcc.n	800cb98 <xQueueGenericSend+0xdc>
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d129      	bne.n	800cbec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cb98:	683a      	ldr	r2, [r7, #0]
 800cb9a:	68b9      	ldr	r1, [r7, #8]
 800cb9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cb9e:	f000 fbdd 	bl	800d35c <prvCopyDataToQueue>
 800cba2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d010      	beq.n	800cbce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbae:	3324      	adds	r3, #36	@ 0x24
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f001 fd67 	bl	800e684 <xTaskRemoveFromEventList>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d013      	beq.n	800cbe4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cbbc:	4b3f      	ldr	r3, [pc, #252]	@ (800ccbc <xQueueGenericSend+0x200>)
 800cbbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbc2:	601a      	str	r2, [r3, #0]
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	e00a      	b.n	800cbe4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d007      	beq.n	800cbe4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cbd4:	4b39      	ldr	r3, [pc, #228]	@ (800ccbc <xQueueGenericSend+0x200>)
 800cbd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cbe4:	f003 f8ba 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	e063      	b.n	800ccb4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d103      	bne.n	800cbfa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cbf2:	f003 f8b3 	bl	800fd5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e05c      	b.n	800ccb4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d106      	bne.n	800cc0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc00:	f107 0314 	add.w	r3, r7, #20
 800cc04:	4618      	mov	r0, r3
 800cc06:	f001 fe05 	bl	800e814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc0e:	f003 f8a5 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc12:	f001 f9f7 	bl	800e004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc16:	f003 f86f 	bl	800fcf8 <vPortEnterCritical>
 800cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc20:	b25b      	sxtb	r3, r3
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d103      	bne.n	800cc30 <xQueueGenericSend+0x174>
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc36:	b25b      	sxtb	r3, r3
 800cc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc3c:	d103      	bne.n	800cc46 <xQueueGenericSend+0x18a>
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc40:	2200      	movs	r2, #0
 800cc42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc46:	f003 f889 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc4a:	1d3a      	adds	r2, r7, #4
 800cc4c:	f107 0314 	add.w	r3, r7, #20
 800cc50:	4611      	mov	r1, r2
 800cc52:	4618      	mov	r0, r3
 800cc54:	f001 fdf4 	bl	800e840 <xTaskCheckForTimeOut>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d124      	bne.n	800cca8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cc5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc60:	f000 fc74 	bl	800d54c <prvIsQueueFull>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d018      	beq.n	800cc9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6c:	3310      	adds	r3, #16
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	4611      	mov	r1, r2
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 fc76 	bl	800e564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cc78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc7a:	f000 fbff 	bl	800d47c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cc7e:	f001 f9cf 	bl	800e020 <xTaskResumeAll>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f47f af7c 	bne.w	800cb82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800cc8a:	4b0c      	ldr	r3, [pc, #48]	@ (800ccbc <xQueueGenericSend+0x200>)
 800cc8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	f3bf 8f6f 	isb	sy
 800cc9a:	e772      	b.n	800cb82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cc9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cc9e:	f000 fbed 	bl	800d47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cca2:	f001 f9bd 	bl	800e020 <xTaskResumeAll>
 800cca6:	e76c      	b.n	800cb82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ccaa:	f000 fbe7 	bl	800d47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ccae:	f001 f9b7 	bl	800e020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ccb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3738      	adds	r7, #56	@ 0x38
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	e000ed04 	.word	0xe000ed04

0800ccc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b090      	sub	sp, #64	@ 0x40
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10b      	bne.n	800ccf0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ccea:	bf00      	nop
 800ccec:	bf00      	nop
 800ccee:	e7fd      	b.n	800ccec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <xQueueGenericSendFromISR+0x3e>
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <xQueueGenericSendFromISR+0x42>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e000      	b.n	800cd04 <xQueueGenericSendFromISR+0x44>
 800cd02:	2300      	movs	r3, #0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d10b      	bne.n	800cd20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800cd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0c:	f383 8811 	msr	BASEPRI, r3
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	f3bf 8f4f 	dsb	sy
 800cd18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800cd1a:	bf00      	nop
 800cd1c:	bf00      	nop
 800cd1e:	e7fd      	b.n	800cd1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d103      	bne.n	800cd2e <xQueueGenericSendFromISR+0x6e>
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d101      	bne.n	800cd32 <xQueueGenericSendFromISR+0x72>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <xQueueGenericSendFromISR+0x74>
 800cd32:	2300      	movs	r3, #0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10b      	bne.n	800cd50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	623b      	str	r3, [r7, #32]
}
 800cd4a:	bf00      	nop
 800cd4c:	bf00      	nop
 800cd4e:	e7fd      	b.n	800cd4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd50:	f003 f8b2 	bl	800feb8 <vPortValidateInterruptPriority>
	__asm volatile
 800cd54:	f3ef 8211 	mrs	r2, BASEPRI
 800cd58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5c:	f383 8811 	msr	BASEPRI, r3
 800cd60:	f3bf 8f6f 	isb	sy
 800cd64:	f3bf 8f4f 	dsb	sy
 800cd68:	61fa      	str	r2, [r7, #28]
 800cd6a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d302      	bcc.n	800cd82 <xQueueGenericSendFromISR+0xc2>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d12f      	bne.n	800cde2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cd88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	68b9      	ldr	r1, [r7, #8]
 800cd96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd98:	f000 fae0 	bl	800d35c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800cda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda4:	d112      	bne.n	800cdcc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d016      	beq.n	800cddc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb0:	3324      	adds	r3, #36	@ 0x24
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f001 fc66 	bl	800e684 <xTaskRemoveFromEventList>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00e      	beq.n	800cddc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00b      	beq.n	800cddc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	601a      	str	r2, [r3, #0]
 800cdca:	e007      	b.n	800cddc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	b25a      	sxtb	r2, r3
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cddc:	2301      	movs	r3, #1
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cde0:	e001      	b.n	800cde6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde8:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f383 8811 	msr	BASEPRI, r3
}
 800cdf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3740      	adds	r7, #64	@ 0x40
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08c      	sub	sp, #48	@ 0x30
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10b      	bne.n	800ce2e <xQueueReceive+0x32>
	__asm volatile
 800ce16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce1a:	f383 8811 	msr	BASEPRI, r3
 800ce1e:	f3bf 8f6f 	isb	sy
 800ce22:	f3bf 8f4f 	dsb	sy
 800ce26:	623b      	str	r3, [r7, #32]
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	e7fd      	b.n	800ce2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d103      	bne.n	800ce3c <xQueueReceive+0x40>
 800ce34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <xQueueReceive+0x44>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	e000      	b.n	800ce42 <xQueueReceive+0x46>
 800ce40:	2300      	movs	r3, #0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10b      	bne.n	800ce5e <xQueueReceive+0x62>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	61fb      	str	r3, [r7, #28]
}
 800ce58:	bf00      	nop
 800ce5a:	bf00      	nop
 800ce5c:	e7fd      	b.n	800ce5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce5e:	f001 fed9 	bl	800ec14 <xTaskGetSchedulerState>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <xQueueReceive+0x72>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <xQueueReceive+0x76>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <xQueueReceive+0x78>
 800ce72:	2300      	movs	r3, #0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d10b      	bne.n	800ce90 <xQueueReceive+0x94>
	__asm volatile
 800ce78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7c:	f383 8811 	msr	BASEPRI, r3
 800ce80:	f3bf 8f6f 	isb	sy
 800ce84:	f3bf 8f4f 	dsb	sy
 800ce88:	61bb      	str	r3, [r7, #24]
}
 800ce8a:	bf00      	nop
 800ce8c:	bf00      	nop
 800ce8e:	e7fd      	b.n	800ce8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce90:	f002 ff32 	bl	800fcf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d01f      	beq.n	800cee0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cea0:	68b9      	ldr	r1, [r7, #8]
 800cea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cea4:	f000 fac4 	bl	800d430 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceaa:	1e5a      	subs	r2, r3, #1
 800ceac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ceb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00f      	beq.n	800ced8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceba:	3310      	adds	r3, #16
 800cebc:	4618      	mov	r0, r3
 800cebe:	f001 fbe1 	bl	800e684 <xTaskRemoveFromEventList>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d007      	beq.n	800ced8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cec8:	4b3c      	ldr	r3, [pc, #240]	@ (800cfbc <xQueueReceive+0x1c0>)
 800ceca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cece:	601a      	str	r2, [r3, #0]
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ced8:	f002 ff40 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800cedc:	2301      	movs	r3, #1
 800cede:	e069      	b.n	800cfb4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d103      	bne.n	800ceee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cee6:	f002 ff39 	bl	800fd5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ceea:	2300      	movs	r3, #0
 800ceec:	e062      	b.n	800cfb4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ceee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d106      	bne.n	800cf02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cef4:	f107 0310 	add.w	r3, r7, #16
 800cef8:	4618      	mov	r0, r3
 800cefa:	f001 fc8b 	bl	800e814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cefe:	2301      	movs	r3, #1
 800cf00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf02:	f002 ff2b 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf06:	f001 f87d 	bl	800e004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf0a:	f002 fef5 	bl	800fcf8 <vPortEnterCritical>
 800cf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cf14:	b25b      	sxtb	r3, r3
 800cf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1a:	d103      	bne.n	800cf24 <xQueueReceive+0x128>
 800cf1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cf2a:	b25b      	sxtb	r3, r3
 800cf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf30:	d103      	bne.n	800cf3a <xQueueReceive+0x13e>
 800cf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf3a:	f002 ff0f 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf3e:	1d3a      	adds	r2, r7, #4
 800cf40:	f107 0310 	add.w	r3, r7, #16
 800cf44:	4611      	mov	r1, r2
 800cf46:	4618      	mov	r0, r3
 800cf48:	f001 fc7a 	bl	800e840 <xTaskCheckForTimeOut>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d123      	bne.n	800cf9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf54:	f000 fae4 	bl	800d520 <prvIsQueueEmpty>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d017      	beq.n	800cf8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf60:	3324      	adds	r3, #36	@ 0x24
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f001 fafc 	bl	800e564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf6e:	f000 fa85 	bl	800d47c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf72:	f001 f855 	bl	800e020 <xTaskResumeAll>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d189      	bne.n	800ce90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cf7c:	4b0f      	ldr	r3, [pc, #60]	@ (800cfbc <xQueueReceive+0x1c0>)
 800cf7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	f3bf 8f6f 	isb	sy
 800cf8c:	e780      	b.n	800ce90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cf8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf90:	f000 fa74 	bl	800d47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf94:	f001 f844 	bl	800e020 <xTaskResumeAll>
 800cf98:	e77a      	b.n	800ce90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cf9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf9c:	f000 fa6e 	bl	800d47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfa0:	f001 f83e 	bl	800e020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cfa6:	f000 fabb 	bl	800d520 <prvIsQueueEmpty>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f43f af6f 	beq.w	800ce90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3730      	adds	r7, #48	@ 0x30
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	e000ed04 	.word	0xe000ed04

0800cfc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b08e      	sub	sp, #56	@ 0x38
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe0:	f383 8811 	msr	BASEPRI, r3
 800cfe4:	f3bf 8f6f 	isb	sy
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	623b      	str	r3, [r7, #32]
}
 800cfee:	bf00      	nop
 800cff0:	bf00      	nop
 800cff2:	e7fd      	b.n	800cff0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00b      	beq.n	800d014 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	61fb      	str	r3, [r7, #28]
}
 800d00e:	bf00      	nop
 800d010:	bf00      	nop
 800d012:	e7fd      	b.n	800d010 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d014:	f001 fdfe 	bl	800ec14 <xTaskGetSchedulerState>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d102      	bne.n	800d024 <xQueueSemaphoreTake+0x64>
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d101      	bne.n	800d028 <xQueueSemaphoreTake+0x68>
 800d024:	2301      	movs	r3, #1
 800d026:	e000      	b.n	800d02a <xQueueSemaphoreTake+0x6a>
 800d028:	2300      	movs	r3, #0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10b      	bne.n	800d046 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	61bb      	str	r3, [r7, #24]
}
 800d040:	bf00      	nop
 800d042:	bf00      	nop
 800d044:	e7fd      	b.n	800d042 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d046:	f002 fe57 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d04e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d052:	2b00      	cmp	r3, #0
 800d054:	d024      	beq.n	800d0a0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	1e5a      	subs	r2, r3, #1
 800d05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d104      	bne.n	800d070 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d066:	f001 ff67 	bl	800ef38 <pvTaskIncrementMutexHeldCount>
 800d06a:	4602      	mov	r2, r0
 800d06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00f      	beq.n	800d098 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07a:	3310      	adds	r3, #16
 800d07c:	4618      	mov	r0, r3
 800d07e:	f001 fb01 	bl	800e684 <xTaskRemoveFromEventList>
 800d082:	4603      	mov	r3, r0
 800d084:	2b00      	cmp	r3, #0
 800d086:	d007      	beq.n	800d098 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d088:	4b54      	ldr	r3, [pc, #336]	@ (800d1dc <xQueueSemaphoreTake+0x21c>)
 800d08a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d08e:	601a      	str	r2, [r3, #0]
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d098:	f002 fe60 	bl	800fd5c <vPortExitCritical>
				return pdPASS;
 800d09c:	2301      	movs	r3, #1
 800d09e:	e098      	b.n	800d1d2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d112      	bne.n	800d0cc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00b      	beq.n	800d0c4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800d0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
 800d0bc:	617b      	str	r3, [r7, #20]
}
 800d0be:	bf00      	nop
 800d0c0:	bf00      	nop
 800d0c2:	e7fd      	b.n	800d0c0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d0c4:	f002 fe4a 	bl	800fd5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	e082      	b.n	800d1d2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d106      	bne.n	800d0e0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0d2:	f107 030c 	add.w	r3, r7, #12
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f001 fb9c 	bl	800e814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0e0:	f002 fe3c 	bl	800fd5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0e4:	f000 ff8e 	bl	800e004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0e8:	f002 fe06 	bl	800fcf8 <vPortEnterCritical>
 800d0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d0f2:	b25b      	sxtb	r3, r3
 800d0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f8:	d103      	bne.n	800d102 <xQueueSemaphoreTake+0x142>
 800d0fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d108:	b25b      	sxtb	r3, r3
 800d10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10e:	d103      	bne.n	800d118 <xQueueSemaphoreTake+0x158>
 800d110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d112:	2200      	movs	r2, #0
 800d114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d118:	f002 fe20 	bl	800fd5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d11c:	463a      	mov	r2, r7
 800d11e:	f107 030c 	add.w	r3, r7, #12
 800d122:	4611      	mov	r1, r2
 800d124:	4618      	mov	r0, r3
 800d126:	f001 fb8b 	bl	800e840 <xTaskCheckForTimeOut>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d132      	bne.n	800d196 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d130:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d132:	f000 f9f5 	bl	800d520 <prvIsQueueEmpty>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d026      	beq.n	800d18a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d109      	bne.n	800d158 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800d144:	f002 fdd8 	bl	800fcf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f001 fd7f 	bl	800ec50 <xTaskPriorityInherit>
 800d152:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800d154:	f002 fe02 	bl	800fd5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15a:	3324      	adds	r3, #36	@ 0x24
 800d15c:	683a      	ldr	r2, [r7, #0]
 800d15e:	4611      	mov	r1, r2
 800d160:	4618      	mov	r0, r3
 800d162:	f001 f9ff 	bl	800e564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d166:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d168:	f000 f988 	bl	800d47c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d16c:	f000 ff58 	bl	800e020 <xTaskResumeAll>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	f47f af67 	bne.w	800d046 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800d178:	4b18      	ldr	r3, [pc, #96]	@ (800d1dc <xQueueSemaphoreTake+0x21c>)
 800d17a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d17e:	601a      	str	r2, [r3, #0]
 800d180:	f3bf 8f4f 	dsb	sy
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	e75d      	b.n	800d046 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d18a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d18c:	f000 f976 	bl	800d47c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d190:	f000 ff46 	bl	800e020 <xTaskResumeAll>
 800d194:	e757      	b.n	800d046 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d196:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d198:	f000 f970 	bl	800d47c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d19c:	f000 ff40 	bl	800e020 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1a2:	f000 f9bd 	bl	800d520 <prvIsQueueEmpty>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f43f af4c 	beq.w	800d046 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00d      	beq.n	800d1d0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800d1b4:	f002 fda0 	bl	800fcf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d1b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1ba:	f000 f8b7 	bl	800d32c <prvGetDisinheritPriorityAfterTimeout>
 800d1be:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f001 fe1a 	bl	800ee00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d1cc:	f002 fdc6 	bl	800fd5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3738      	adds	r7, #56	@ 0x38
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	e000ed04 	.word	0xe000ed04

0800d1e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08e      	sub	sp, #56	@ 0x38
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	60f8      	str	r0, [r7, #12]
 800d1e8:	60b9      	str	r1, [r7, #8]
 800d1ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d10b      	bne.n	800d20e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800d1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	623b      	str	r3, [r7, #32]
}
 800d208:	bf00      	nop
 800d20a:	bf00      	nop
 800d20c:	e7fd      	b.n	800d20a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d103      	bne.n	800d21c <xQueueReceiveFromISR+0x3c>
 800d214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d101      	bne.n	800d220 <xQueueReceiveFromISR+0x40>
 800d21c:	2301      	movs	r3, #1
 800d21e:	e000      	b.n	800d222 <xQueueReceiveFromISR+0x42>
 800d220:	2300      	movs	r3, #0
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10b      	bne.n	800d23e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	61fb      	str	r3, [r7, #28]
}
 800d238:	bf00      	nop
 800d23a:	bf00      	nop
 800d23c:	e7fd      	b.n	800d23a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d23e:	f002 fe3b 	bl	800feb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d242:	f3ef 8211 	mrs	r2, BASEPRI
 800d246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	61ba      	str	r2, [r7, #24]
 800d258:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d25a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d262:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d02f      	beq.n	800d2ca <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d278:	f000 f8da 	bl	800d430 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	1e5a      	subs	r2, r3, #1
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d284:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28c:	d112      	bne.n	800d2b4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d016      	beq.n	800d2c4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d298:	3310      	adds	r3, #16
 800d29a:	4618      	mov	r0, r3
 800d29c:	f001 f9f2 	bl	800e684 <xTaskRemoveFromEventList>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d00e      	beq.n	800d2c4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00b      	beq.n	800d2c4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	e007      	b.n	800d2c4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d2b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	b25a      	sxtb	r2, r3
 800d2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c8:	e001      	b.n	800d2ce <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	f383 8811 	msr	BASEPRI, r3
}
 800d2d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3738      	adds	r7, #56	@ 0x38
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10b      	bne.n	800d30e <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	60fb      	str	r3, [r7, #12]
}
 800d308:	bf00      	nop
 800d30a:	bf00      	nop
 800d30c:	e7fd      	b.n	800d30a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800d30e:	f002 fcf3 	bl	800fcf8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d31e:	f002 fd1d 	bl	800fd5c <vPortExitCritical>

	return uxReturn;
 800d322:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d006      	beq.n	800d34a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800d346:	60fb      	str	r3, [r7, #12]
 800d348:	e001      	b.n	800d34e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d34a:	2300      	movs	r3, #0
 800d34c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d34e:	68fb      	ldr	r3, [r7, #12]
	}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d370:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10d      	bne.n	800d396 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d14d      	bne.n	800d41e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	689b      	ldr	r3, [r3, #8]
 800d386:	4618      	mov	r0, r3
 800d388:	f001 fcca 	bl	800ed20 <xTaskPriorityDisinherit>
 800d38c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	609a      	str	r2, [r3, #8]
 800d394:	e043      	b.n	800d41e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d119      	bne.n	800d3d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6858      	ldr	r0, [r3, #4]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	f003 fe93 	bl	80110d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	685a      	ldr	r2, [r3, #4]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	689b      	ldr	r3, [r3, #8]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d32b      	bcc.n	800d41e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	605a      	str	r2, [r3, #4]
 800d3ce:	e026      	b.n	800d41e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	68d8      	ldr	r0, [r3, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d8:	461a      	mov	r2, r3
 800d3da:	68b9      	ldr	r1, [r7, #8]
 800d3dc:	f003 fe79 	bl	80110d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3e8:	425b      	negs	r3, r3
 800d3ea:	441a      	add	r2, r3
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	68da      	ldr	r2, [r3, #12]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d207      	bcs.n	800d40c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	689a      	ldr	r2, [r3, #8]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d404:	425b      	negs	r3, r3
 800d406:	441a      	add	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d105      	bne.n	800d41e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800d426:	697b      	ldr	r3, [r7, #20]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3718      	adds	r7, #24
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d018      	beq.n	800d474 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	68da      	ldr	r2, [r3, #12]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d44a:	441a      	add	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68da      	ldr	r2, [r3, #12]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	689b      	ldr	r3, [r3, #8]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d303      	bcc.n	800d464 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	68d9      	ldr	r1, [r3, #12]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d46c:	461a      	mov	r2, r3
 800d46e:	6838      	ldr	r0, [r7, #0]
 800d470:	f003 fe2f 	bl	80110d2 <memcpy>
	}
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d484:	f002 fc38 	bl	800fcf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d48e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d490:	e011      	b.n	800d4b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d496:	2b00      	cmp	r3, #0
 800d498:	d012      	beq.n	800d4c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3324      	adds	r3, #36	@ 0x24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 f8f0 	bl	800e684 <xTaskRemoveFromEventList>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d4aa:	f001 fa2d 	bl	800e908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d4ae:	7bfb      	ldrb	r3, [r7, #15]
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d4b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	dce9      	bgt.n	800d492 <prvUnlockQueue+0x16>
 800d4be:	e000      	b.n	800d4c2 <prvUnlockQueue+0x46>
					break;
 800d4c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	22ff      	movs	r2, #255	@ 0xff
 800d4c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d4ca:	f002 fc47 	bl	800fd5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4ce:	f002 fc13 	bl	800fcf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d4d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4da:	e011      	b.n	800d500 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	691b      	ldr	r3, [r3, #16]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d012      	beq.n	800d50a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	3310      	adds	r3, #16
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f001 f8cb 	bl	800e684 <xTaskRemoveFromEventList>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d001      	beq.n	800d4f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4f4:	f001 fa08 	bl	800e908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4f8:	7bbb      	ldrb	r3, [r7, #14]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d504:	2b00      	cmp	r3, #0
 800d506:	dce9      	bgt.n	800d4dc <prvUnlockQueue+0x60>
 800d508:	e000      	b.n	800d50c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d50a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	22ff      	movs	r2, #255	@ 0xff
 800d510:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d514:	f002 fc22 	bl	800fd5c <vPortExitCritical>
}
 800d518:	bf00      	nop
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d528:	f002 fbe6 	bl	800fcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d530:	2b00      	cmp	r3, #0
 800d532:	d102      	bne.n	800d53a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d534:	2301      	movs	r3, #1
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	e001      	b.n	800d53e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d53e:	f002 fc0d 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800d542:	68fb      	ldr	r3, [r7, #12]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d554:	f002 fbd0 	bl	800fcf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d560:	429a      	cmp	r2, r3
 800d562:	d102      	bne.n	800d56a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d564:	2301      	movs	r3, #1
 800d566:	60fb      	str	r3, [r7, #12]
 800d568:	e001      	b.n	800d56e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d56a:	2300      	movs	r3, #0
 800d56c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d56e:	f002 fbf5 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800d572:	68fb      	ldr	r3, [r7, #12]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d586:	2300      	movs	r3, #0
 800d588:	60fb      	str	r3, [r7, #12]
 800d58a:	e014      	b.n	800d5b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d58c:	4a0f      	ldr	r2, [pc, #60]	@ (800d5cc <vQueueAddToRegistry+0x50>)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d10b      	bne.n	800d5b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d598:	490c      	ldr	r1, [pc, #48]	@ (800d5cc <vQueueAddToRegistry+0x50>)
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d5a2:	4a0a      	ldr	r2, [pc, #40]	@ (800d5cc <vQueueAddToRegistry+0x50>)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	00db      	lsls	r3, r3, #3
 800d5a8:	4413      	add	r3, r2
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d5ae:	e006      	b.n	800d5be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b07      	cmp	r3, #7
 800d5ba:	d9e7      	bls.n	800d58c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	20000c84 	.word	0x20000c84

0800d5d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d5e0:	f002 fb8a 	bl	800fcf8 <vPortEnterCritical>
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d5ea:	b25b      	sxtb	r3, r3
 800d5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f0:	d103      	bne.n	800d5fa <vQueueWaitForMessageRestricted+0x2a>
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d600:	b25b      	sxtb	r3, r3
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d606:	d103      	bne.n	800d610 <vQueueWaitForMessageRestricted+0x40>
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d610:	f002 fba4 	bl	800fd5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d106      	bne.n	800d62a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	3324      	adds	r3, #36	@ 0x24
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	68b9      	ldr	r1, [r7, #8]
 800d624:	4618      	mov	r0, r3
 800d626:	f001 f801 	bl	800e62c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d62a:	6978      	ldr	r0, [r7, #20]
 800d62c:	f7ff ff26 	bl	800d47c <prvUnlockQueue>
	}
 800d630:	bf00      	nop
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08e      	sub	sp, #56	@ 0x38
 800d63c:	af04      	add	r7, sp, #16
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10b      	bne.n	800d664 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	623b      	str	r3, [r7, #32]
}
 800d65e:	bf00      	nop
 800d660:	bf00      	nop
 800d662:	e7fd      	b.n	800d660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	2b00      	cmp	r3, #0
 800d668:	d10b      	bne.n	800d682 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d66e:	f383 8811 	msr	BASEPRI, r3
 800d672:	f3bf 8f6f 	isb	sy
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	61fb      	str	r3, [r7, #28]
}
 800d67c:	bf00      	nop
 800d67e:	bf00      	nop
 800d680:	e7fd      	b.n	800d67e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d682:	23a8      	movs	r3, #168	@ 0xa8
 800d684:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	2ba8      	cmp	r3, #168	@ 0xa8
 800d68a:	d00b      	beq.n	800d6a4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d690:	f383 8811 	msr	BASEPRI, r3
 800d694:	f3bf 8f6f 	isb	sy
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	61bb      	str	r3, [r7, #24]
}
 800d69e:	bf00      	nop
 800d6a0:	bf00      	nop
 800d6a2:	e7fd      	b.n	800d6a0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01e      	beq.n	800d6ea <xTaskCreateStatic+0xb2>
 800d6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d01b      	beq.n	800d6ea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6ba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6be:	2202      	movs	r2, #2
 800d6c0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9303      	str	r3, [sp, #12]
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ca:	9302      	str	r3, [sp, #8]
 800d6cc:	f107 0314 	add.w	r3, r7, #20
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 f851 	bl	800d784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6e4:	f000 f8f6 	bl	800d8d4 <prvAddNewTaskToReadyList>
 800d6e8:	e001      	b.n	800d6ee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6ee:	697b      	ldr	r3, [r7, #20]
	}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3728      	adds	r7, #40	@ 0x28
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08c      	sub	sp, #48	@ 0x30
 800d6fc:	af04      	add	r7, sp, #16
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	603b      	str	r3, [r7, #0]
 800d704:	4613      	mov	r3, r2
 800d706:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d708:	88fb      	ldrh	r3, [r7, #6]
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4618      	mov	r0, r3
 800d70e:	f002 fc15 	bl	800ff3c <pvPortMalloc>
 800d712:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d00e      	beq.n	800d738 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d71a:	20a8      	movs	r0, #168	@ 0xa8
 800d71c:	f002 fc0e 	bl	800ff3c <pvPortMalloc>
 800d720:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d003      	beq.n	800d730 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	697a      	ldr	r2, [r7, #20]
 800d72c:	631a      	str	r2, [r3, #48]	@ 0x30
 800d72e:	e005      	b.n	800d73c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d730:	6978      	ldr	r0, [r7, #20]
 800d732:	f002 fcd1 	bl	80100d8 <vPortFree>
 800d736:	e001      	b.n	800d73c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d738:	2300      	movs	r3, #0
 800d73a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d017      	beq.n	800d772 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d74a:	88fa      	ldrh	r2, [r7, #6]
 800d74c:	2300      	movs	r3, #0
 800d74e:	9303      	str	r3, [sp, #12]
 800d750:	69fb      	ldr	r3, [r7, #28]
 800d752:	9302      	str	r3, [sp, #8]
 800d754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	68b9      	ldr	r1, [r7, #8]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f80f 	bl	800d784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d766:	69f8      	ldr	r0, [r7, #28]
 800d768:	f000 f8b4 	bl	800d8d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d76c:	2301      	movs	r3, #1
 800d76e:	61bb      	str	r3, [r7, #24]
 800d770:	e002      	b.n	800d778 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d772:	f04f 33ff 	mov.w	r3, #4294967295
 800d776:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d778:	69bb      	ldr	r3, [r7, #24]
	}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3720      	adds	r7, #32
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
	...

0800d784 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b088      	sub	sp, #32
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d794:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	461a      	mov	r2, r3
 800d79c:	21a5      	movs	r1, #165	@ 0xa5
 800d79e:	f003 fb2c 	bl	8010dfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	f023 0307 	bic.w	r3, r3, #7
 800d7ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d00b      	beq.n	800d7de <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ca:	f383 8811 	msr	BASEPRI, r3
 800d7ce:	f3bf 8f6f 	isb	sy
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	617b      	str	r3, [r7, #20]
}
 800d7d8:	bf00      	nop
 800d7da:	bf00      	nop
 800d7dc:	e7fd      	b.n	800d7da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d01f      	beq.n	800d824 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	61fb      	str	r3, [r7, #28]
 800d7e8:	e012      	b.n	800d810 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7ea:	68ba      	ldr	r2, [r7, #8]
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	7819      	ldrb	r1, [r3, #0]
 800d7f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	3334      	adds	r3, #52	@ 0x34
 800d7fa:	460a      	mov	r2, r1
 800d7fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	4413      	add	r3, r2
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d006      	beq.n	800d818 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	3301      	adds	r3, #1
 800d80e:	61fb      	str	r3, [r7, #28]
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	2b0f      	cmp	r3, #15
 800d814:	d9e9      	bls.n	800d7ea <prvInitialiseNewTask+0x66>
 800d816:	e000      	b.n	800d81a <prvInitialiseNewTask+0x96>
			{
				break;
 800d818:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81c:	2200      	movs	r2, #0
 800d81e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d822:	e003      	b.n	800d82c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d826:	2200      	movs	r2, #0
 800d828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82e:	2b37      	cmp	r3, #55	@ 0x37
 800d830:	d901      	bls.n	800d836 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d832:	2337      	movs	r3, #55	@ 0x37
 800d834:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d83a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d840:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d844:	2200      	movs	r2, #0
 800d846:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d84a:	3304      	adds	r3, #4
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fe ff29 	bl	800c6a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d854:	3318      	adds	r3, #24
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe ff24 	bl	800c6a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d860:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d864:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d86e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d870:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d874:	2200      	movs	r2, #0
 800d876:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d884:	3354      	adds	r3, #84	@ 0x54
 800d886:	224c      	movs	r2, #76	@ 0x4c
 800d888:	2100      	movs	r1, #0
 800d88a:	4618      	mov	r0, r3
 800d88c:	f003 fab5 	bl	8010dfa <memset>
 800d890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d892:	4a0d      	ldr	r2, [pc, #52]	@ (800d8c8 <prvInitialiseNewTask+0x144>)
 800d894:	659a      	str	r2, [r3, #88]	@ 0x58
 800d896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d898:	4a0c      	ldr	r2, [pc, #48]	@ (800d8cc <prvInitialiseNewTask+0x148>)
 800d89a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d89e:	4a0c      	ldr	r2, [pc, #48]	@ (800d8d0 <prvInitialiseNewTask+0x14c>)
 800d8a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	68f9      	ldr	r1, [r7, #12]
 800d8a6:	69b8      	ldr	r0, [r7, #24]
 800d8a8:	f002 f8f4 	bl	800fa94 <pxPortInitialiseStack>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8be:	bf00      	nop
 800d8c0:	3720      	adds	r7, #32
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	200114e8 	.word	0x200114e8
 800d8cc:	20011550 	.word	0x20011550
 800d8d0:	200115b8 	.word	0x200115b8

0800d8d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8dc:	f002 fa0c 	bl	800fcf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8e0:	4b2d      	ldr	r3, [pc, #180]	@ (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	4a2c      	ldr	r2, [pc, #176]	@ (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8ea:	4b2c      	ldr	r3, [pc, #176]	@ (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d109      	bne.n	800d906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8f2:	4a2a      	ldr	r2, [pc, #168]	@ (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8f8:	4b27      	ldr	r3, [pc, #156]	@ (800d998 <prvAddNewTaskToReadyList+0xc4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d110      	bne.n	800d922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d900:	f001 f826 	bl	800e950 <prvInitialiseTaskLists>
 800d904:	e00d      	b.n	800d922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d906:	4b26      	ldr	r3, [pc, #152]	@ (800d9a0 <prvAddNewTaskToReadyList+0xcc>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d109      	bne.n	800d922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d90e:	4b23      	ldr	r3, [pc, #140]	@ (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d918:	429a      	cmp	r2, r3
 800d91a:	d802      	bhi.n	800d922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d91c:	4a1f      	ldr	r2, [pc, #124]	@ (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d922:	4b20      	ldr	r3, [pc, #128]	@ (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	3301      	adds	r3, #1
 800d928:	4a1e      	ldr	r2, [pc, #120]	@ (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d92a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d92c:	4b1d      	ldr	r3, [pc, #116]	@ (800d9a4 <prvAddNewTaskToReadyList+0xd0>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d938:	4b1b      	ldr	r3, [pc, #108]	@ (800d9a8 <prvAddNewTaskToReadyList+0xd4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d903      	bls.n	800d948 <prvAddNewTaskToReadyList+0x74>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d944:	4a18      	ldr	r2, [pc, #96]	@ (800d9a8 <prvAddNewTaskToReadyList+0xd4>)
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4a15      	ldr	r2, [pc, #84]	@ (800d9ac <prvAddNewTaskToReadyList+0xd8>)
 800d956:	441a      	add	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7fe fead 	bl	800c6be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d964:	f002 f9fa 	bl	800fd5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d968:	4b0d      	ldr	r3, [pc, #52]	@ (800d9a0 <prvAddNewTaskToReadyList+0xcc>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00e      	beq.n	800d98e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d970:	4b0a      	ldr	r3, [pc, #40]	@ (800d99c <prvAddNewTaskToReadyList+0xc8>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d207      	bcs.n	800d98e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d97e:	4b0c      	ldr	r3, [pc, #48]	@ (800d9b0 <prvAddNewTaskToReadyList+0xdc>)
 800d980:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20001198 	.word	0x20001198
 800d99c:	20000cc4 	.word	0x20000cc4
 800d9a0:	200011a4 	.word	0x200011a4
 800d9a4:	200011b4 	.word	0x200011b4
 800d9a8:	200011a0 	.word	0x200011a0
 800d9ac:	20000cc8 	.word	0x20000cc8
 800d9b0:	e000ed04 	.word	0xe000ed04

0800d9b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d9bc:	f002 f99c 	bl	800fcf8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <vTaskDelete+0x18>
 800d9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800da7c <vTaskDelete+0xc8>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	e000      	b.n	800d9ce <vTaskDelete+0x1a>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7fe fecf 	bl	800c778 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d004      	beq.n	800d9ec <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	3318      	adds	r3, #24
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe fec6 	bl	800c778 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d9ec:	4b24      	ldr	r3, [pc, #144]	@ (800da80 <vTaskDelete+0xcc>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	4a23      	ldr	r2, [pc, #140]	@ (800da80 <vTaskDelete+0xcc>)
 800d9f4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d9f6:	4b21      	ldr	r3, [pc, #132]	@ (800da7c <vTaskDelete+0xc8>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d10b      	bne.n	800da18 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3304      	adds	r3, #4
 800da04:	4619      	mov	r1, r3
 800da06:	481f      	ldr	r0, [pc, #124]	@ (800da84 <vTaskDelete+0xd0>)
 800da08:	f7fe fe59 	bl	800c6be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800da0c:	4b1e      	ldr	r3, [pc, #120]	@ (800da88 <vTaskDelete+0xd4>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3301      	adds	r3, #1
 800da12:	4a1d      	ldr	r2, [pc, #116]	@ (800da88 <vTaskDelete+0xd4>)
 800da14:	6013      	str	r3, [r2, #0]
 800da16:	e009      	b.n	800da2c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800da18:	4b1c      	ldr	r3, [pc, #112]	@ (800da8c <vTaskDelete+0xd8>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3b01      	subs	r3, #1
 800da1e:	4a1b      	ldr	r2, [pc, #108]	@ (800da8c <vTaskDelete+0xd8>)
 800da20:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f001 f8a0 	bl	800eb68 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800da28:	f001 f8d4 	bl	800ebd4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800da2c:	f002 f996 	bl	800fd5c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800da30:	4b17      	ldr	r3, [pc, #92]	@ (800da90 <vTaskDelete+0xdc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d01c      	beq.n	800da72 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800da38:	4b10      	ldr	r3, [pc, #64]	@ (800da7c <vTaskDelete+0xc8>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d117      	bne.n	800da72 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800da42:	4b14      	ldr	r3, [pc, #80]	@ (800da94 <vTaskDelete+0xe0>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00b      	beq.n	800da62 <vTaskDelete+0xae>
	__asm volatile
 800da4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da4e:	f383 8811 	msr	BASEPRI, r3
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	f3bf 8f4f 	dsb	sy
 800da5a:	60bb      	str	r3, [r7, #8]
}
 800da5c:	bf00      	nop
 800da5e:	bf00      	nop
 800da60:	e7fd      	b.n	800da5e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800da62:	4b0d      	ldr	r3, [pc, #52]	@ (800da98 <vTaskDelete+0xe4>)
 800da64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da72:	bf00      	nop
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	20000cc4 	.word	0x20000cc4
 800da80:	200011b4 	.word	0x200011b4
 800da84:	2000116c 	.word	0x2000116c
 800da88:	20001180 	.word	0x20001180
 800da8c:	20001198 	.word	0x20001198
 800da90:	200011a4 	.word	0x200011a4
 800da94:	200011c0 	.word	0x200011c0
 800da98:	e000ed04 	.word	0xe000ed04

0800da9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800daa4:	2300      	movs	r3, #0
 800daa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d018      	beq.n	800dae0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800daae:	4b14      	ldr	r3, [pc, #80]	@ (800db00 <vTaskDelay+0x64>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00b      	beq.n	800dace <vTaskDelay+0x32>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	60bb      	str	r3, [r7, #8]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dace:	f000 fa99 	bl	800e004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dad2:	2100      	movs	r1, #0
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f001 fbb1 	bl	800f23c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dada:	f000 faa1 	bl	800e020 <xTaskResumeAll>
 800dade:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d107      	bne.n	800daf6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800dae6:	4b07      	ldr	r3, [pc, #28]	@ (800db04 <vTaskDelay+0x68>)
 800dae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800daf6:	bf00      	nop
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	200011c0 	.word	0x200011c0
 800db04:	e000ed04 	.word	0xe000ed04

0800db08 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b088      	sub	sp, #32
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10b      	bne.n	800db32 <eTaskGetState+0x2a>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	60bb      	str	r3, [r7, #8]
}
 800db2c:	bf00      	nop
 800db2e:	bf00      	nop
 800db30:	e7fd      	b.n	800db2e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800db32:	4b24      	ldr	r3, [pc, #144]	@ (800dbc4 <eTaskGetState+0xbc>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	69ba      	ldr	r2, [r7, #24]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d102      	bne.n	800db42 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800db3c:	2300      	movs	r3, #0
 800db3e:	77fb      	strb	r3, [r7, #31]
 800db40:	e03a      	b.n	800dbb8 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800db42:	f002 f8d9 	bl	800fcf8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800db4c:	4b1e      	ldr	r3, [pc, #120]	@ (800dbc8 <eTaskGetState+0xc0>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800db52:	4b1e      	ldr	r3, [pc, #120]	@ (800dbcc <eTaskGetState+0xc4>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800db58:	f002 f900 	bl	800fd5c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800db5c:	697a      	ldr	r2, [r7, #20]
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	429a      	cmp	r2, r3
 800db62:	d003      	beq.n	800db6c <eTaskGetState+0x64>
 800db64:	697a      	ldr	r2, [r7, #20]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d102      	bne.n	800db72 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800db6c:	2302      	movs	r3, #2
 800db6e:	77fb      	strb	r3, [r7, #31]
 800db70:	e022      	b.n	800dbb8 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	4a16      	ldr	r2, [pc, #88]	@ (800dbd0 <eTaskGetState+0xc8>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d112      	bne.n	800dba0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d10b      	bne.n	800db9a <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d102      	bne.n	800db94 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800db8e:	2302      	movs	r3, #2
 800db90:	77fb      	strb	r3, [r7, #31]
 800db92:	e011      	b.n	800dbb8 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800db94:	2303      	movs	r3, #3
 800db96:	77fb      	strb	r3, [r7, #31]
 800db98:	e00e      	b.n	800dbb8 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800db9a:	2302      	movs	r3, #2
 800db9c:	77fb      	strb	r3, [r7, #31]
 800db9e:	e00b      	b.n	800dbb8 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	4a0c      	ldr	r2, [pc, #48]	@ (800dbd4 <eTaskGetState+0xcc>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d002      	beq.n	800dbae <eTaskGetState+0xa6>
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d102      	bne.n	800dbb4 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800dbae:	2304      	movs	r3, #4
 800dbb0:	77fb      	strb	r3, [r7, #31]
 800dbb2:	e001      	b.n	800dbb8 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800dbb8:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3720      	adds	r7, #32
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	20000cc4 	.word	0x20000cc4
 800dbc8:	20001150 	.word	0x20001150
 800dbcc:	20001154 	.word	0x20001154
 800dbd0:	20001184 	.word	0x20001184
 800dbd4:	2000116c 	.word	0x2000116c

0800dbd8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b088      	sub	sp, #32
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	2b37      	cmp	r3, #55	@ 0x37
 800dbea:	d90b      	bls.n	800dc04 <vTaskPrioritySet+0x2c>
	__asm volatile
 800dbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf0:	f383 8811 	msr	BASEPRI, r3
 800dbf4:	f3bf 8f6f 	isb	sy
 800dbf8:	f3bf 8f4f 	dsb	sy
 800dbfc:	60fb      	str	r3, [r7, #12]
}
 800dbfe:	bf00      	nop
 800dc00:	bf00      	nop
 800dc02:	e7fd      	b.n	800dc00 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	2b37      	cmp	r3, #55	@ 0x37
 800dc08:	d901      	bls.n	800dc0e <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dc0a:	2337      	movs	r3, #55	@ 0x37
 800dc0c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800dc0e:	f002 f873 	bl	800fcf8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <vTaskPrioritySet+0x46>
 800dc18:	4b3a      	ldr	r3, [pc, #232]	@ (800dd04 <vTaskPrioritySet+0x12c>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	e000      	b.n	800dc20 <vTaskPrioritySet+0x48>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc26:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d063      	beq.n	800dcf8 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d90d      	bls.n	800dc54 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800dc38:	4b32      	ldr	r3, [pc, #200]	@ (800dd04 <vTaskPrioritySet+0x12c>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	69ba      	ldr	r2, [r7, #24]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d00f      	beq.n	800dc62 <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800dc42:	4b30      	ldr	r3, [pc, #192]	@ (800dd04 <vTaskPrioritySet+0x12c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d309      	bcc.n	800dc62 <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	61fb      	str	r3, [r7, #28]
 800dc52:	e006      	b.n	800dc62 <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800dc54:	4b2b      	ldr	r3, [pc, #172]	@ (800dd04 <vTaskPrioritySet+0x12c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	69ba      	ldr	r2, [r7, #24]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d101      	bne.n	800dc62 <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dc62:	69bb      	ldr	r3, [r7, #24]
 800dc64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc66:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d102      	bne.n	800dc7a <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	db04      	blt.n	800dc92 <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	6959      	ldr	r1, [r3, #20]
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4a19      	ldr	r2, [pc, #100]	@ (800dd08 <vTaskPrioritySet+0x130>)
 800dca2:	4413      	add	r3, r2
 800dca4:	4299      	cmp	r1, r3
 800dca6:	d11c      	bne.n	800dce2 <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fe fd63 	bl	800c778 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb6:	4b15      	ldr	r3, [pc, #84]	@ (800dd0c <vTaskPrioritySet+0x134>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d903      	bls.n	800dcc6 <vTaskPrioritySet+0xee>
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc2:	4a12      	ldr	r2, [pc, #72]	@ (800dd0c <vTaskPrioritySet+0x134>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcca:	4613      	mov	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	4413      	add	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4a0d      	ldr	r2, [pc, #52]	@ (800dd08 <vTaskPrioritySet+0x130>)
 800dcd4:	441a      	add	r2, r3
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	f7fe fcee 	bl	800c6be <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d007      	beq.n	800dcf8 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800dce8:	4b09      	ldr	r3, [pc, #36]	@ (800dd10 <vTaskPrioritySet+0x138>)
 800dcea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcee:	601a      	str	r2, [r3, #0]
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800dcf8:	f002 f830 	bl	800fd5c <vPortExitCritical>
	}
 800dcfc:	bf00      	nop
 800dcfe:	3720      	adds	r7, #32
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	20000cc4 	.word	0x20000cc4
 800dd08:	20000cc8 	.word	0x20000cc8
 800dd0c:	200011a0 	.word	0x200011a0
 800dd10:	e000ed04 	.word	0xe000ed04

0800dd14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800dd1c:	f001 ffec 	bl	800fcf8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d102      	bne.n	800dd2c <vTaskSuspend+0x18>
 800dd26:	4b30      	ldr	r3, [pc, #192]	@ (800dde8 <vTaskSuspend+0xd4>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	e000      	b.n	800dd2e <vTaskSuspend+0x1a>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	3304      	adds	r3, #4
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fe fd1f 	bl	800c778 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d004      	beq.n	800dd4c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3318      	adds	r3, #24
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fd16 	bl	800c778 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3304      	adds	r3, #4
 800dd50:	4619      	mov	r1, r3
 800dd52:	4826      	ldr	r0, [pc, #152]	@ (800ddec <vTaskSuspend+0xd8>)
 800dd54:	f7fe fcb3 	bl	800c6be <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d103      	bne.n	800dd6c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800dd6c:	f001 fff6 	bl	800fd5c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800dd70:	4b1f      	ldr	r3, [pc, #124]	@ (800ddf0 <vTaskSuspend+0xdc>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d005      	beq.n	800dd84 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800dd78:	f001 ffbe 	bl	800fcf8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800dd7c:	f000 ff2a 	bl	800ebd4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800dd80:	f001 ffec 	bl	800fd5c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800dd84:	4b18      	ldr	r3, [pc, #96]	@ (800dde8 <vTaskSuspend+0xd4>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d128      	bne.n	800dde0 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800dd8e:	4b18      	ldr	r3, [pc, #96]	@ (800ddf0 <vTaskSuspend+0xdc>)
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d018      	beq.n	800ddc8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800dd96:	4b17      	ldr	r3, [pc, #92]	@ (800ddf4 <vTaskSuspend+0xe0>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00b      	beq.n	800ddb6 <vTaskSuspend+0xa2>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	60bb      	str	r3, [r7, #8]
}
 800ddb0:	bf00      	nop
 800ddb2:	bf00      	nop
 800ddb4:	e7fd      	b.n	800ddb2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800ddb6:	4b10      	ldr	r3, [pc, #64]	@ (800ddf8 <vTaskSuspend+0xe4>)
 800ddb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddc6:	e00b      	b.n	800dde0 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ddc8:	4b08      	ldr	r3, [pc, #32]	@ (800ddec <vTaskSuspend+0xd8>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	4b0b      	ldr	r3, [pc, #44]	@ (800ddfc <vTaskSuspend+0xe8>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d103      	bne.n	800dddc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800ddd4:	4b04      	ldr	r3, [pc, #16]	@ (800dde8 <vTaskSuspend+0xd4>)
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	601a      	str	r2, [r3, #0]
	}
 800ddda:	e001      	b.n	800dde0 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800dddc:	f000 fb5c 	bl	800e498 <vTaskSwitchContext>
	}
 800dde0:	bf00      	nop
 800dde2:	3710      	adds	r7, #16
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	20000cc4 	.word	0x20000cc4
 800ddec:	20001184 	.word	0x20001184
 800ddf0:	200011a4 	.word	0x200011a4
 800ddf4:	200011c0 	.word	0x200011c0
 800ddf8:	e000ed04 	.word	0xe000ed04
 800ddfc:	20001198 	.word	0x20001198

0800de00 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800de00:	b480      	push	{r7}
 800de02:	b087      	sub	sp, #28
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800de08:	2300      	movs	r3, #0
 800de0a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10b      	bne.n	800de2e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800de16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de1a:	f383 8811 	msr	BASEPRI, r3
 800de1e:	f3bf 8f6f 	isb	sy
 800de22:	f3bf 8f4f 	dsb	sy
 800de26:	60fb      	str	r3, [r7, #12]
}
 800de28:	bf00      	nop
 800de2a:	bf00      	nop
 800de2c:	e7fd      	b.n	800de2a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	4a0a      	ldr	r2, [pc, #40]	@ (800de5c <prvTaskIsTaskSuspended+0x5c>)
 800de34:	4293      	cmp	r3, r2
 800de36:	d10a      	bne.n	800de4e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de3c:	4a08      	ldr	r2, [pc, #32]	@ (800de60 <prvTaskIsTaskSuspended+0x60>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d005      	beq.n	800de4e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800de4a:	2301      	movs	r3, #1
 800de4c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800de4e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800de50:	4618      	mov	r0, r3
 800de52:	371c      	adds	r7, #28
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	20001184 	.word	0x20001184
 800de60:	20001158 	.word	0x20001158

0800de64 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10b      	bne.n	800de8e <vTaskResume+0x2a>
	__asm volatile
 800de76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7a:	f383 8811 	msr	BASEPRI, r3
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f3bf 8f4f 	dsb	sy
 800de86:	60bb      	str	r3, [r7, #8]
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	e7fd      	b.n	800de8a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800de8e:	4b21      	ldr	r3, [pc, #132]	@ (800df14 <vTaskResume+0xb0>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	429a      	cmp	r2, r3
 800de96:	d038      	beq.n	800df0a <vTaskResume+0xa6>
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d035      	beq.n	800df0a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800de9e:	f001 ff2b 	bl	800fcf8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f7ff ffac 	bl	800de00 <prvTaskIsTaskSuspended>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d02b      	beq.n	800df06 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	3304      	adds	r3, #4
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fc60 	bl	800c778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800debc:	4b16      	ldr	r3, [pc, #88]	@ (800df18 <vTaskResume+0xb4>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d903      	bls.n	800decc <vTaskResume+0x68>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dec8:	4a13      	ldr	r2, [pc, #76]	@ (800df18 <vTaskResume+0xb4>)
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	4a10      	ldr	r2, [pc, #64]	@ (800df1c <vTaskResume+0xb8>)
 800deda:	441a      	add	r2, r3
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3304      	adds	r3, #4
 800dee0:	4619      	mov	r1, r3
 800dee2:	4610      	mov	r0, r2
 800dee4:	f7fe fbeb 	bl	800c6be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deec:	4b09      	ldr	r3, [pc, #36]	@ (800df14 <vTaskResume+0xb0>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def2:	429a      	cmp	r2, r3
 800def4:	d307      	bcc.n	800df06 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800def6:	4b0a      	ldr	r3, [pc, #40]	@ (800df20 <vTaskResume+0xbc>)
 800def8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800df06:	f001 ff29 	bl	800fd5c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df0a:	bf00      	nop
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	20000cc4 	.word	0x20000cc4
 800df18:	200011a0 	.word	0x200011a0
 800df1c:	20000cc8 	.word	0x20000cc8
 800df20:	e000ed04 	.word	0xe000ed04

0800df24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	@ 0x28
 800df28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df32:	463a      	mov	r2, r7
 800df34:	1d39      	adds	r1, r7, #4
 800df36:	f107 0308 	add.w	r3, r7, #8
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fe f9a2 	bl	800c284 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df40:	6839      	ldr	r1, [r7, #0]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	9202      	str	r2, [sp, #8]
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	2300      	movs	r3, #0
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	2300      	movs	r3, #0
 800df50:	460a      	mov	r2, r1
 800df52:	4924      	ldr	r1, [pc, #144]	@ (800dfe4 <vTaskStartScheduler+0xc0>)
 800df54:	4824      	ldr	r0, [pc, #144]	@ (800dfe8 <vTaskStartScheduler+0xc4>)
 800df56:	f7ff fb6f 	bl	800d638 <xTaskCreateStatic>
 800df5a:	4603      	mov	r3, r0
 800df5c:	4a23      	ldr	r2, [pc, #140]	@ (800dfec <vTaskStartScheduler+0xc8>)
 800df5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df60:	4b22      	ldr	r3, [pc, #136]	@ (800dfec <vTaskStartScheduler+0xc8>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df68:	2301      	movs	r3, #1
 800df6a:	617b      	str	r3, [r7, #20]
 800df6c:	e001      	b.n	800df72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df6e:	2300      	movs	r3, #0
 800df70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b01      	cmp	r3, #1
 800df76:	d102      	bne.n	800df7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800df78:	f001 f9b4 	bl	800f2e4 <xTimerCreateTimerTask>
 800df7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d11b      	bne.n	800dfbc <vTaskStartScheduler+0x98>
	__asm volatile
 800df84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df88:	f383 8811 	msr	BASEPRI, r3
 800df8c:	f3bf 8f6f 	isb	sy
 800df90:	f3bf 8f4f 	dsb	sy
 800df94:	613b      	str	r3, [r7, #16]
}
 800df96:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df98:	4b15      	ldr	r3, [pc, #84]	@ (800dff0 <vTaskStartScheduler+0xcc>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3354      	adds	r3, #84	@ 0x54
 800df9e:	4a15      	ldr	r2, [pc, #84]	@ (800dff4 <vTaskStartScheduler+0xd0>)
 800dfa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfa2:	4b15      	ldr	r3, [pc, #84]	@ (800dff8 <vTaskStartScheduler+0xd4>)
 800dfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfaa:	4b14      	ldr	r3, [pc, #80]	@ (800dffc <vTaskStartScheduler+0xd8>)
 800dfac:	2201      	movs	r2, #1
 800dfae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfb0:	4b13      	ldr	r3, [pc, #76]	@ (800e000 <vTaskStartScheduler+0xdc>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfb6:	f001 fdfb 	bl	800fbb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfba:	e00f      	b.n	800dfdc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc2:	d10b      	bne.n	800dfdc <vTaskStartScheduler+0xb8>
	__asm volatile
 800dfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc8:	f383 8811 	msr	BASEPRI, r3
 800dfcc:	f3bf 8f6f 	isb	sy
 800dfd0:	f3bf 8f4f 	dsb	sy
 800dfd4:	60fb      	str	r3, [r7, #12]
}
 800dfd6:	bf00      	nop
 800dfd8:	bf00      	nop
 800dfda:	e7fd      	b.n	800dfd8 <vTaskStartScheduler+0xb4>
}
 800dfdc:	bf00      	nop
 800dfde:	3718      	adds	r7, #24
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	0801288c 	.word	0x0801288c
 800dfe8:	0800e921 	.word	0x0800e921
 800dfec:	200011bc 	.word	0x200011bc
 800dff0:	20000cc4 	.word	0x20000cc4
 800dff4:	20000268 	.word	0x20000268
 800dff8:	200011b8 	.word	0x200011b8
 800dffc:	200011a4 	.word	0x200011a4
 800e000:	2000119c 	.word	0x2000119c

0800e004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e004:	b480      	push	{r7}
 800e006:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e008:	4b04      	ldr	r3, [pc, #16]	@ (800e01c <vTaskSuspendAll+0x18>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3301      	adds	r3, #1
 800e00e:	4a03      	ldr	r2, [pc, #12]	@ (800e01c <vTaskSuspendAll+0x18>)
 800e010:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e012:	bf00      	nop
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	200011c0 	.word	0x200011c0

0800e020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e026:	2300      	movs	r3, #0
 800e028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e02a:	2300      	movs	r3, #0
 800e02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e02e:	4b42      	ldr	r3, [pc, #264]	@ (800e138 <xTaskResumeAll+0x118>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10b      	bne.n	800e04e <xTaskResumeAll+0x2e>
	__asm volatile
 800e036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e03a:	f383 8811 	msr	BASEPRI, r3
 800e03e:	f3bf 8f6f 	isb	sy
 800e042:	f3bf 8f4f 	dsb	sy
 800e046:	603b      	str	r3, [r7, #0]
}
 800e048:	bf00      	nop
 800e04a:	bf00      	nop
 800e04c:	e7fd      	b.n	800e04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e04e:	f001 fe53 	bl	800fcf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e052:	4b39      	ldr	r3, [pc, #228]	@ (800e138 <xTaskResumeAll+0x118>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	3b01      	subs	r3, #1
 800e058:	4a37      	ldr	r2, [pc, #220]	@ (800e138 <xTaskResumeAll+0x118>)
 800e05a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e05c:	4b36      	ldr	r3, [pc, #216]	@ (800e138 <xTaskResumeAll+0x118>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d162      	bne.n	800e12a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e064:	4b35      	ldr	r3, [pc, #212]	@ (800e13c <xTaskResumeAll+0x11c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d05e      	beq.n	800e12a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e06c:	e02f      	b.n	800e0ce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e06e:	4b34      	ldr	r3, [pc, #208]	@ (800e140 <xTaskResumeAll+0x120>)
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	3318      	adds	r3, #24
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fb7c 	bl	800c778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	3304      	adds	r3, #4
 800e084:	4618      	mov	r0, r3
 800e086:	f7fe fb77 	bl	800c778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e08e:	4b2d      	ldr	r3, [pc, #180]	@ (800e144 <xTaskResumeAll+0x124>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	429a      	cmp	r2, r3
 800e094:	d903      	bls.n	800e09e <xTaskResumeAll+0x7e>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09a:	4a2a      	ldr	r2, [pc, #168]	@ (800e144 <xTaskResumeAll+0x124>)
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4a27      	ldr	r2, [pc, #156]	@ (800e148 <xTaskResumeAll+0x128>)
 800e0ac:	441a      	add	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	f7fe fb02 	bl	800c6be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0be:	4b23      	ldr	r3, [pc, #140]	@ (800e14c <xTaskResumeAll+0x12c>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d302      	bcc.n	800e0ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e0c8:	4b21      	ldr	r3, [pc, #132]	@ (800e150 <xTaskResumeAll+0x130>)
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e140 <xTaskResumeAll+0x120>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1cb      	bne.n	800e06e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d001      	beq.n	800e0e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0dc:	f000 fd7a 	bl	800ebd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e154 <xTaskResumeAll+0x134>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d010      	beq.n	800e10e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e0ec:	f000 f91a 	bl	800e324 <xTaskIncrementTick>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d002      	beq.n	800e0fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e0f6:	4b16      	ldr	r3, [pc, #88]	@ (800e150 <xTaskResumeAll+0x130>)
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1f1      	bne.n	800e0ec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e108:	4b12      	ldr	r3, [pc, #72]	@ (800e154 <xTaskResumeAll+0x134>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e10e:	4b10      	ldr	r3, [pc, #64]	@ (800e150 <xTaskResumeAll+0x130>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d009      	beq.n	800e12a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e116:	2301      	movs	r3, #1
 800e118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e11a:	4b0f      	ldr	r3, [pc, #60]	@ (800e158 <xTaskResumeAll+0x138>)
 800e11c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e120:	601a      	str	r2, [r3, #0]
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e12a:	f001 fe17 	bl	800fd5c <vPortExitCritical>

	return xAlreadyYielded;
 800e12e:	68bb      	ldr	r3, [r7, #8]
}
 800e130:	4618      	mov	r0, r3
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}
 800e138:	200011c0 	.word	0x200011c0
 800e13c:	20001198 	.word	0x20001198
 800e140:	20001158 	.word	0x20001158
 800e144:	200011a0 	.word	0x200011a0
 800e148:	20000cc8 	.word	0x20000cc8
 800e14c:	20000cc4 	.word	0x20000cc4
 800e150:	200011ac 	.word	0x200011ac
 800e154:	200011a8 	.word	0x200011a8
 800e158:	e000ed04 	.word	0xe000ed04

0800e15c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e15c:	b480      	push	{r7}
 800e15e:	b083      	sub	sp, #12
 800e160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e162:	4b05      	ldr	r3, [pc, #20]	@ (800e178 <xTaskGetTickCount+0x1c>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e168:	687b      	ldr	r3, [r7, #4]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	370c      	adds	r7, #12
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	2000119c 	.word	0x2000119c

0800e17c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e17c:	b480      	push	{r7}
 800e17e:	b08b      	sub	sp, #44	@ 0x2c
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e186:	2300      	movs	r3, #0
 800e188:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d05b      	beq.n	800e24a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	61bb      	str	r3, [r7, #24]
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	685a      	ldr	r2, [r3, #4]
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	605a      	str	r2, [r3, #4]
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	3308      	adds	r3, #8
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d104      	bne.n	800e1b6 <prvSearchForNameWithinSingleList+0x3a>
 800e1ac:	69bb      	ldr	r3, [r7, #24]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	685a      	ldr	r2, [r3, #4]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	605a      	str	r2, [r3, #4]
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	613b      	str	r3, [r7, #16]
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	685a      	ldr	r2, [r3, #4]
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	605a      	str	r2, [r3, #4]
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	685a      	ldr	r2, [r3, #4]
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	3308      	adds	r3, #8
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d104      	bne.n	800e1e2 <prvSearchForNameWithinSingleList+0x66>
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	605a      	str	r2, [r3, #4]
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	623b      	str	r3, [r7, #32]
 800e1f2:	e01c      	b.n	800e22e <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	4413      	add	r3, r2
 800e1fa:	3334      	adds	r3, #52	@ 0x34
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	6a3b      	ldr	r3, [r7, #32]
 800e204:	4413      	add	r3, r2
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	7afa      	ldrb	r2, [r7, #11]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d002      	beq.n	800e214 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e20e:	2301      	movs	r3, #1
 800e210:	61fb      	str	r3, [r7, #28]
 800e212:	e006      	b.n	800e222 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e214:	7afb      	ldrb	r3, [r7, #11]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d103      	bne.n	800e222 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e21e:	2301      	movs	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d106      	bne.n	800e236 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e228:	6a3b      	ldr	r3, [r7, #32]
 800e22a:	3301      	adds	r3, #1
 800e22c:	623b      	str	r3, [r7, #32]
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	2b0f      	cmp	r3, #15
 800e232:	d9df      	bls.n	800e1f4 <prvSearchForNameWithinSingleList+0x78>
 800e234:	e000      	b.n	800e238 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e236:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d104      	bne.n	800e248 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	429a      	cmp	r2, r3
 800e244:	d1bb      	bne.n	800e1be <prvSearchForNameWithinSingleList+0x42>
 800e246:	e000      	b.n	800e24a <prvSearchForNameWithinSingleList+0xce>
					break;
 800e248:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e24c:	4618      	mov	r0, r3
 800e24e:	372c      	adds	r7, #44	@ 0x2c
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e260:	2338      	movs	r3, #56	@ 0x38
 800e262:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7f1 ffb3 	bl	80001d0 <strlen>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b0f      	cmp	r3, #15
 800e26e:	d90b      	bls.n	800e288 <xTaskGetHandle+0x30>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	60fb      	str	r3, [r7, #12]
}
 800e282:	bf00      	nop
 800e284:	bf00      	nop
 800e286:	e7fd      	b.n	800e284 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e288:	f7ff febc 	bl	800e004 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	3b01      	subs	r3, #1
 800e290:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e292:	697a      	ldr	r2, [r7, #20]
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	009b      	lsls	r3, r3, #2
 800e29c:	4a1c      	ldr	r2, [pc, #112]	@ (800e310 <xTaskGetHandle+0xb8>)
 800e29e:	4413      	add	r3, r2
 800e2a0:	6879      	ldr	r1, [r7, #4]
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff ff6a 	bl	800e17c <prvSearchForNameWithinSingleList>
 800e2a8:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d103      	bne.n	800e2b8 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d1ea      	bne.n	800e28c <xTaskGetHandle+0x34>
 800e2b6:	e000      	b.n	800e2ba <xTaskGetHandle+0x62>
					break;
 800e2b8:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d106      	bne.n	800e2ce <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e2c0:	4b14      	ldr	r3, [pc, #80]	@ (800e314 <xTaskGetHandle+0xbc>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6879      	ldr	r1, [r7, #4]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff ff58 	bl	800e17c <prvSearchForNameWithinSingleList>
 800e2cc:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d106      	bne.n	800e2e2 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e2d4:	4b10      	ldr	r3, [pc, #64]	@ (800e318 <xTaskGetHandle+0xc0>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	6879      	ldr	r1, [r7, #4]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7ff ff4e 	bl	800e17c <prvSearchForNameWithinSingleList>
 800e2e0:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d104      	bne.n	800e2f2 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	480c      	ldr	r0, [pc, #48]	@ (800e31c <xTaskGetHandle+0xc4>)
 800e2ec:	f7ff ff46 	bl	800e17c <prvSearchForNameWithinSingleList>
 800e2f0:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d104      	bne.n	800e302 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e2f8:	6879      	ldr	r1, [r7, #4]
 800e2fa:	4809      	ldr	r0, [pc, #36]	@ (800e320 <xTaskGetHandle+0xc8>)
 800e2fc:	f7ff ff3e 	bl	800e17c <prvSearchForNameWithinSingleList>
 800e300:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e302:	f7ff fe8d 	bl	800e020 <xTaskResumeAll>

		return pxTCB;
 800e306:	693b      	ldr	r3, [r7, #16]
	}
 800e308:	4618      	mov	r0, r3
 800e30a:	3718      	adds	r7, #24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	20000cc8 	.word	0x20000cc8
 800e314:	20001150 	.word	0x20001150
 800e318:	20001154 	.word	0x20001154
 800e31c:	20001184 	.word	0x20001184
 800e320:	2000116c 	.word	0x2000116c

0800e324 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e32a:	2300      	movs	r3, #0
 800e32c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e32e:	4b4f      	ldr	r3, [pc, #316]	@ (800e46c <xTaskIncrementTick+0x148>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	f040 8090 	bne.w	800e458 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e338:	4b4d      	ldr	r3, [pc, #308]	@ (800e470 <xTaskIncrementTick+0x14c>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	3301      	adds	r3, #1
 800e33e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e340:	4a4b      	ldr	r2, [pc, #300]	@ (800e470 <xTaskIncrementTick+0x14c>)
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d121      	bne.n	800e390 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e34c:	4b49      	ldr	r3, [pc, #292]	@ (800e474 <xTaskIncrementTick+0x150>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00b      	beq.n	800e36e <xTaskIncrementTick+0x4a>
	__asm volatile
 800e356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	603b      	str	r3, [r7, #0]
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	e7fd      	b.n	800e36a <xTaskIncrementTick+0x46>
 800e36e:	4b41      	ldr	r3, [pc, #260]	@ (800e474 <xTaskIncrementTick+0x150>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	60fb      	str	r3, [r7, #12]
 800e374:	4b40      	ldr	r3, [pc, #256]	@ (800e478 <xTaskIncrementTick+0x154>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a3e      	ldr	r2, [pc, #248]	@ (800e474 <xTaskIncrementTick+0x150>)
 800e37a:	6013      	str	r3, [r2, #0]
 800e37c:	4a3e      	ldr	r2, [pc, #248]	@ (800e478 <xTaskIncrementTick+0x154>)
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	4b3e      	ldr	r3, [pc, #248]	@ (800e47c <xTaskIncrementTick+0x158>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3301      	adds	r3, #1
 800e388:	4a3c      	ldr	r2, [pc, #240]	@ (800e47c <xTaskIncrementTick+0x158>)
 800e38a:	6013      	str	r3, [r2, #0]
 800e38c:	f000 fc22 	bl	800ebd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e390:	4b3b      	ldr	r3, [pc, #236]	@ (800e480 <xTaskIncrementTick+0x15c>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	693a      	ldr	r2, [r7, #16]
 800e396:	429a      	cmp	r2, r3
 800e398:	d349      	bcc.n	800e42e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e39a:	4b36      	ldr	r3, [pc, #216]	@ (800e474 <xTaskIncrementTick+0x150>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d104      	bne.n	800e3ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3a4:	4b36      	ldr	r3, [pc, #216]	@ (800e480 <xTaskIncrementTick+0x15c>)
 800e3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3aa:	601a      	str	r2, [r3, #0]
					break;
 800e3ac:	e03f      	b.n	800e42e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ae:	4b31      	ldr	r3, [pc, #196]	@ (800e474 <xTaskIncrementTick+0x150>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e3be:	693a      	ldr	r2, [r7, #16]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d203      	bcs.n	800e3ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e3c6:	4a2e      	ldr	r2, [pc, #184]	@ (800e480 <xTaskIncrementTick+0x15c>)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e3cc:	e02f      	b.n	800e42e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fe f9d0 	bl	800c778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	3318      	adds	r3, #24
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe f9c7 	bl	800c778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ee:	4b25      	ldr	r3, [pc, #148]	@ (800e484 <xTaskIncrementTick+0x160>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d903      	bls.n	800e3fe <xTaskIncrementTick+0xda>
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3fa:	4a22      	ldr	r2, [pc, #136]	@ (800e484 <xTaskIncrementTick+0x160>)
 800e3fc:	6013      	str	r3, [r2, #0]
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	4a1f      	ldr	r2, [pc, #124]	@ (800e488 <xTaskIncrementTick+0x164>)
 800e40c:	441a      	add	r2, r3
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	3304      	adds	r3, #4
 800e412:	4619      	mov	r1, r3
 800e414:	4610      	mov	r0, r2
 800e416:	f7fe f952 	bl	800c6be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41e:	4b1b      	ldr	r3, [pc, #108]	@ (800e48c <xTaskIncrementTick+0x168>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e424:	429a      	cmp	r2, r3
 800e426:	d3b8      	bcc.n	800e39a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e428:	2301      	movs	r3, #1
 800e42a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e42c:	e7b5      	b.n	800e39a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e42e:	4b17      	ldr	r3, [pc, #92]	@ (800e48c <xTaskIncrementTick+0x168>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e434:	4914      	ldr	r1, [pc, #80]	@ (800e488 <xTaskIncrementTick+0x164>)
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	440b      	add	r3, r1
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	2b01      	cmp	r3, #1
 800e444:	d901      	bls.n	800e44a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e446:	2301      	movs	r3, #1
 800e448:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e44a:	4b11      	ldr	r3, [pc, #68]	@ (800e490 <xTaskIncrementTick+0x16c>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d007      	beq.n	800e462 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e452:	2301      	movs	r3, #1
 800e454:	617b      	str	r3, [r7, #20]
 800e456:	e004      	b.n	800e462 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e458:	4b0e      	ldr	r3, [pc, #56]	@ (800e494 <xTaskIncrementTick+0x170>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3301      	adds	r3, #1
 800e45e:	4a0d      	ldr	r2, [pc, #52]	@ (800e494 <xTaskIncrementTick+0x170>)
 800e460:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e462:	697b      	ldr	r3, [r7, #20]
}
 800e464:	4618      	mov	r0, r3
 800e466:	3718      	adds	r7, #24
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}
 800e46c:	200011c0 	.word	0x200011c0
 800e470:	2000119c 	.word	0x2000119c
 800e474:	20001150 	.word	0x20001150
 800e478:	20001154 	.word	0x20001154
 800e47c:	200011b0 	.word	0x200011b0
 800e480:	200011b8 	.word	0x200011b8
 800e484:	200011a0 	.word	0x200011a0
 800e488:	20000cc8 	.word	0x20000cc8
 800e48c:	20000cc4 	.word	0x20000cc4
 800e490:	200011ac 	.word	0x200011ac
 800e494:	200011a8 	.word	0x200011a8

0800e498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e498:	b480      	push	{r7}
 800e49a:	b085      	sub	sp, #20
 800e49c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e49e:	4b2b      	ldr	r3, [pc, #172]	@ (800e54c <vTaskSwitchContext+0xb4>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e4a6:	4b2a      	ldr	r3, [pc, #168]	@ (800e550 <vTaskSwitchContext+0xb8>)
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e4ac:	e047      	b.n	800e53e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e4ae:	4b28      	ldr	r3, [pc, #160]	@ (800e550 <vTaskSwitchContext+0xb8>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b4:	4b27      	ldr	r3, [pc, #156]	@ (800e554 <vTaskSwitchContext+0xbc>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	60fb      	str	r3, [r7, #12]
 800e4ba:	e011      	b.n	800e4e0 <vTaskSwitchContext+0x48>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10b      	bne.n	800e4da <vTaskSwitchContext+0x42>
	__asm volatile
 800e4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	607b      	str	r3, [r7, #4]
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop
 800e4d8:	e7fd      	b.n	800e4d6 <vTaskSwitchContext+0x3e>
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	491d      	ldr	r1, [pc, #116]	@ (800e558 <vTaskSwitchContext+0xc0>)
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4413      	add	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	440b      	add	r3, r1
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d0e3      	beq.n	800e4bc <vTaskSwitchContext+0x24>
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	4613      	mov	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4a16      	ldr	r2, [pc, #88]	@ (800e558 <vTaskSwitchContext+0xc0>)
 800e500:	4413      	add	r3, r2
 800e502:	60bb      	str	r3, [r7, #8]
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	685a      	ldr	r2, [r3, #4]
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	605a      	str	r2, [r3, #4]
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	3308      	adds	r3, #8
 800e516:	429a      	cmp	r2, r3
 800e518:	d104      	bne.n	800e524 <vTaskSwitchContext+0x8c>
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	605a      	str	r2, [r3, #4]
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	4a0c      	ldr	r2, [pc, #48]	@ (800e55c <vTaskSwitchContext+0xc4>)
 800e52c:	6013      	str	r3, [r2, #0]
 800e52e:	4a09      	ldr	r2, [pc, #36]	@ (800e554 <vTaskSwitchContext+0xbc>)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e534:	4b09      	ldr	r3, [pc, #36]	@ (800e55c <vTaskSwitchContext+0xc4>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3354      	adds	r3, #84	@ 0x54
 800e53a:	4a09      	ldr	r2, [pc, #36]	@ (800e560 <vTaskSwitchContext+0xc8>)
 800e53c:	6013      	str	r3, [r2, #0]
}
 800e53e:	bf00      	nop
 800e540:	3714      	adds	r7, #20
 800e542:	46bd      	mov	sp, r7
 800e544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	200011c0 	.word	0x200011c0
 800e550:	200011ac 	.word	0x200011ac
 800e554:	200011a0 	.word	0x200011a0
 800e558:	20000cc8 	.word	0x20000cc8
 800e55c:	20000cc4 	.word	0x20000cc4
 800e560:	20000268 	.word	0x20000268

0800e564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10b      	bne.n	800e58c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e578:	f383 8811 	msr	BASEPRI, r3
 800e57c:	f3bf 8f6f 	isb	sy
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	60fb      	str	r3, [r7, #12]
}
 800e586:	bf00      	nop
 800e588:	bf00      	nop
 800e58a:	e7fd      	b.n	800e588 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e58c:	4b07      	ldr	r3, [pc, #28]	@ (800e5ac <vTaskPlaceOnEventList+0x48>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3318      	adds	r3, #24
 800e592:	4619      	mov	r1, r3
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f7fe f8b6 	bl	800c706 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e59a:	2101      	movs	r1, #1
 800e59c:	6838      	ldr	r0, [r7, #0]
 800e59e:	f000 fe4d 	bl	800f23c <prvAddCurrentTaskToDelayedList>
}
 800e5a2:	bf00      	nop
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	20000cc4 	.word	0x20000cc4

0800e5b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d10b      	bne.n	800e5da <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800e5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5c6:	f383 8811 	msr	BASEPRI, r3
 800e5ca:	f3bf 8f6f 	isb	sy
 800e5ce:	f3bf 8f4f 	dsb	sy
 800e5d2:	617b      	str	r3, [r7, #20]
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop
 800e5d8:	e7fd      	b.n	800e5d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e5da:	4b12      	ldr	r3, [pc, #72]	@ (800e624 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d10b      	bne.n	800e5fa <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800e5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e6:	f383 8811 	msr	BASEPRI, r3
 800e5ea:	f3bf 8f6f 	isb	sy
 800e5ee:	f3bf 8f4f 	dsb	sy
 800e5f2:	613b      	str	r3, [r7, #16]
}
 800e5f4:	bf00      	nop
 800e5f6:	bf00      	nop
 800e5f8:	e7fd      	b.n	800e5f6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e5fa:	4b0b      	ldr	r3, [pc, #44]	@ (800e628 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e604:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e606:	4b08      	ldr	r3, [pc, #32]	@ (800e628 <vTaskPlaceOnUnorderedEventList+0x78>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	3318      	adds	r3, #24
 800e60c:	4619      	mov	r1, r3
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f7fe f855 	bl	800c6be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e614:	2101      	movs	r1, #1
 800e616:	6878      	ldr	r0, [r7, #4]
 800e618:	f000 fe10 	bl	800f23c <prvAddCurrentTaskToDelayedList>
}
 800e61c:	bf00      	nop
 800e61e:	3718      	adds	r7, #24
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	200011c0 	.word	0x200011c0
 800e628:	20000cc4 	.word	0x20000cc4

0800e62c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10b      	bne.n	800e656 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	617b      	str	r3, [r7, #20]
}
 800e650:	bf00      	nop
 800e652:	bf00      	nop
 800e654:	e7fd      	b.n	800e652 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e656:	4b0a      	ldr	r3, [pc, #40]	@ (800e680 <vTaskPlaceOnEventListRestricted+0x54>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3318      	adds	r3, #24
 800e65c:	4619      	mov	r1, r3
 800e65e:	68f8      	ldr	r0, [r7, #12]
 800e660:	f7fe f82d 	bl	800c6be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d002      	beq.n	800e670 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
 800e66e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e670:	6879      	ldr	r1, [r7, #4]
 800e672:	68b8      	ldr	r0, [r7, #8]
 800e674:	f000 fde2 	bl	800f23c <prvAddCurrentTaskToDelayedList>
	}
 800e678:	bf00      	nop
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20000cc4 	.word	0x20000cc4

0800e684 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10b      	bne.n	800e6b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69e:	f383 8811 	msr	BASEPRI, r3
 800e6a2:	f3bf 8f6f 	isb	sy
 800e6a6:	f3bf 8f4f 	dsb	sy
 800e6aa:	60fb      	str	r3, [r7, #12]
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	e7fd      	b.n	800e6ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	3318      	adds	r3, #24
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe f85e 	bl	800c778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6bc:	4b1d      	ldr	r3, [pc, #116]	@ (800e734 <xTaskRemoveFromEventList+0xb0>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d11d      	bne.n	800e700 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	3304      	adds	r3, #4
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fe f855 	bl	800c778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6d2:	4b19      	ldr	r3, [pc, #100]	@ (800e738 <xTaskRemoveFromEventList+0xb4>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d903      	bls.n	800e6e2 <xTaskRemoveFromEventList+0x5e>
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6de:	4a16      	ldr	r2, [pc, #88]	@ (800e738 <xTaskRemoveFromEventList+0xb4>)
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4a13      	ldr	r2, [pc, #76]	@ (800e73c <xTaskRemoveFromEventList+0xb8>)
 800e6f0:	441a      	add	r2, r3
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	3304      	adds	r3, #4
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	f7fd ffe0 	bl	800c6be <vListInsertEnd>
 800e6fe:	e005      	b.n	800e70c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	3318      	adds	r3, #24
 800e704:	4619      	mov	r1, r3
 800e706:	480e      	ldr	r0, [pc, #56]	@ (800e740 <xTaskRemoveFromEventList+0xbc>)
 800e708:	f7fd ffd9 	bl	800c6be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e710:	4b0c      	ldr	r3, [pc, #48]	@ (800e744 <xTaskRemoveFromEventList+0xc0>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e716:	429a      	cmp	r2, r3
 800e718:	d905      	bls.n	800e726 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e71a:	2301      	movs	r3, #1
 800e71c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e71e:	4b0a      	ldr	r3, [pc, #40]	@ (800e748 <xTaskRemoveFromEventList+0xc4>)
 800e720:	2201      	movs	r2, #1
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	e001      	b.n	800e72a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e726:	2300      	movs	r3, #0
 800e728:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e72a:	697b      	ldr	r3, [r7, #20]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3718      	adds	r7, #24
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	200011c0 	.word	0x200011c0
 800e738:	200011a0 	.word	0x200011a0
 800e73c:	20000cc8 	.word	0x20000cc8
 800e740:	20001158 	.word	0x20001158
 800e744:	20000cc4 	.word	0x20000cc4
 800e748:	200011ac 	.word	0x200011ac

0800e74c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e756:	4b2a      	ldr	r3, [pc, #168]	@ (800e800 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d10b      	bne.n	800e776 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800e75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e762:	f383 8811 	msr	BASEPRI, r3
 800e766:	f3bf 8f6f 	isb	sy
 800e76a:	f3bf 8f4f 	dsb	sy
 800e76e:	613b      	str	r3, [r7, #16]
}
 800e770:	bf00      	nop
 800e772:	bf00      	nop
 800e774:	e7fd      	b.n	800e772 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10b      	bne.n	800e7a4 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800e78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e790:	f383 8811 	msr	BASEPRI, r3
 800e794:	f3bf 8f6f 	isb	sy
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	60fb      	str	r3, [r7, #12]
}
 800e79e:	bf00      	nop
 800e7a0:	bf00      	nop
 800e7a2:	e7fd      	b.n	800e7a0 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7fd ffe7 	bl	800c778 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	3304      	adds	r3, #4
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fd ffe2 	bl	800c778 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7b8:	4b12      	ldr	r3, [pc, #72]	@ (800e804 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d903      	bls.n	800e7c8 <vTaskRemoveFromUnorderedEventList+0x7c>
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c4:	4a0f      	ldr	r2, [pc, #60]	@ (800e804 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e7c6:	6013      	str	r3, [r2, #0]
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	4413      	add	r3, r2
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	4a0c      	ldr	r2, [pc, #48]	@ (800e808 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e7d6:	441a      	add	r2, r3
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	3304      	adds	r3, #4
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4610      	mov	r0, r2
 800e7e0:	f7fd ff6d 	bl	800c6be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7e8:	4b08      	ldr	r3, [pc, #32]	@ (800e80c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d902      	bls.n	800e7f8 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e7f2:	4b07      	ldr	r3, [pc, #28]	@ (800e810 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800e7f4:	2201      	movs	r2, #1
 800e7f6:	601a      	str	r2, [r3, #0]
	}
}
 800e7f8:	bf00      	nop
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	200011c0 	.word	0x200011c0
 800e804:	200011a0 	.word	0x200011a0
 800e808:	20000cc8 	.word	0x20000cc8
 800e80c:	20000cc4 	.word	0x20000cc4
 800e810:	200011ac 	.word	0x200011ac

0800e814 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e814:	b480      	push	{r7}
 800e816:	b083      	sub	sp, #12
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e81c:	4b06      	ldr	r3, [pc, #24]	@ (800e838 <vTaskInternalSetTimeOutState+0x24>)
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e824:	4b05      	ldr	r3, [pc, #20]	@ (800e83c <vTaskInternalSetTimeOutState+0x28>)
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	605a      	str	r2, [r3, #4]
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	200011b0 	.word	0x200011b0
 800e83c:	2000119c 	.word	0x2000119c

0800e840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b088      	sub	sp, #32
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10b      	bne.n	800e868 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	613b      	str	r3, [r7, #16]
}
 800e862:	bf00      	nop
 800e864:	bf00      	nop
 800e866:	e7fd      	b.n	800e864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10b      	bne.n	800e886 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	60fb      	str	r3, [r7, #12]
}
 800e880:	bf00      	nop
 800e882:	bf00      	nop
 800e884:	e7fd      	b.n	800e882 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e886:	f001 fa37 	bl	800fcf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e88a:	4b1d      	ldr	r3, [pc, #116]	@ (800e900 <xTaskCheckForTimeOut+0xc0>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	69ba      	ldr	r2, [r7, #24]
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a2:	d102      	bne.n	800e8aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	61fb      	str	r3, [r7, #28]
 800e8a8:	e023      	b.n	800e8f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	4b15      	ldr	r3, [pc, #84]	@ (800e904 <xTaskCheckForTimeOut+0xc4>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d007      	beq.n	800e8c6 <xTaskCheckForTimeOut+0x86>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	69ba      	ldr	r2, [r7, #24]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d302      	bcc.n	800e8c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	61fb      	str	r3, [r7, #28]
 800e8c4:	e015      	b.n	800e8f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	697a      	ldr	r2, [r7, #20]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d20b      	bcs.n	800e8e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	1ad2      	subs	r2, r2, r3
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff ff99 	bl	800e814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	61fb      	str	r3, [r7, #28]
 800e8e6:	e004      	b.n	800e8f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e8f2:	f001 fa33 	bl	800fd5c <vPortExitCritical>

	return xReturn;
 800e8f6:	69fb      	ldr	r3, [r7, #28]
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3720      	adds	r7, #32
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	2000119c 	.word	0x2000119c
 800e904:	200011b0 	.word	0x200011b0

0800e908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e908:	b480      	push	{r7}
 800e90a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e90c:	4b03      	ldr	r3, [pc, #12]	@ (800e91c <vTaskMissedYield+0x14>)
 800e90e:	2201      	movs	r2, #1
 800e910:	601a      	str	r2, [r3, #0]
}
 800e912:	bf00      	nop
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr
 800e91c:	200011ac 	.word	0x200011ac

0800e920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b082      	sub	sp, #8
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e928:	f000 f852 	bl	800e9d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e92c:	4b06      	ldr	r3, [pc, #24]	@ (800e948 <prvIdleTask+0x28>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d9f9      	bls.n	800e928 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e934:	4b05      	ldr	r3, [pc, #20]	@ (800e94c <prvIdleTask+0x2c>)
 800e936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e93a:	601a      	str	r2, [r3, #0]
 800e93c:	f3bf 8f4f 	dsb	sy
 800e940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e944:	e7f0      	b.n	800e928 <prvIdleTask+0x8>
 800e946:	bf00      	nop
 800e948:	20000cc8 	.word	0x20000cc8
 800e94c:	e000ed04 	.word	0xe000ed04

0800e950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e956:	2300      	movs	r3, #0
 800e958:	607b      	str	r3, [r7, #4]
 800e95a:	e00c      	b.n	800e976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e95c:	687a      	ldr	r2, [r7, #4]
 800e95e:	4613      	mov	r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	4413      	add	r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	4a12      	ldr	r2, [pc, #72]	@ (800e9b0 <prvInitialiseTaskLists+0x60>)
 800e968:	4413      	add	r3, r2
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fd fe7a 	bl	800c664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	3301      	adds	r3, #1
 800e974:	607b      	str	r3, [r7, #4]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2b37      	cmp	r3, #55	@ 0x37
 800e97a:	d9ef      	bls.n	800e95c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e97c:	480d      	ldr	r0, [pc, #52]	@ (800e9b4 <prvInitialiseTaskLists+0x64>)
 800e97e:	f7fd fe71 	bl	800c664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e982:	480d      	ldr	r0, [pc, #52]	@ (800e9b8 <prvInitialiseTaskLists+0x68>)
 800e984:	f7fd fe6e 	bl	800c664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e988:	480c      	ldr	r0, [pc, #48]	@ (800e9bc <prvInitialiseTaskLists+0x6c>)
 800e98a:	f7fd fe6b 	bl	800c664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e98e:	480c      	ldr	r0, [pc, #48]	@ (800e9c0 <prvInitialiseTaskLists+0x70>)
 800e990:	f7fd fe68 	bl	800c664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e994:	480b      	ldr	r0, [pc, #44]	@ (800e9c4 <prvInitialiseTaskLists+0x74>)
 800e996:	f7fd fe65 	bl	800c664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e99a:	4b0b      	ldr	r3, [pc, #44]	@ (800e9c8 <prvInitialiseTaskLists+0x78>)
 800e99c:	4a05      	ldr	r2, [pc, #20]	@ (800e9b4 <prvInitialiseTaskLists+0x64>)
 800e99e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e9cc <prvInitialiseTaskLists+0x7c>)
 800e9a2:	4a05      	ldr	r2, [pc, #20]	@ (800e9b8 <prvInitialiseTaskLists+0x68>)
 800e9a4:	601a      	str	r2, [r3, #0]
}
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000cc8 	.word	0x20000cc8
 800e9b4:	20001128 	.word	0x20001128
 800e9b8:	2000113c 	.word	0x2000113c
 800e9bc:	20001158 	.word	0x20001158
 800e9c0:	2000116c 	.word	0x2000116c
 800e9c4:	20001184 	.word	0x20001184
 800e9c8:	20001150 	.word	0x20001150
 800e9cc:	20001154 	.word	0x20001154

0800e9d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9d6:	e019      	b.n	800ea0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9d8:	f001 f98e 	bl	800fcf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9dc:	4b10      	ldr	r3, [pc, #64]	@ (800ea20 <prvCheckTasksWaitingTermination+0x50>)
 800e9de:	68db      	ldr	r3, [r3, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3304      	adds	r3, #4
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fd fec5 	bl	800c778 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e9ee:	4b0d      	ldr	r3, [pc, #52]	@ (800ea24 <prvCheckTasksWaitingTermination+0x54>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	4a0b      	ldr	r2, [pc, #44]	@ (800ea24 <prvCheckTasksWaitingTermination+0x54>)
 800e9f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e9f8:	4b0b      	ldr	r3, [pc, #44]	@ (800ea28 <prvCheckTasksWaitingTermination+0x58>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	3b01      	subs	r3, #1
 800e9fe:	4a0a      	ldr	r2, [pc, #40]	@ (800ea28 <prvCheckTasksWaitingTermination+0x58>)
 800ea00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea02:	f001 f9ab 	bl	800fd5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f000 f8ae 	bl	800eb68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea0c:	4b06      	ldr	r3, [pc, #24]	@ (800ea28 <prvCheckTasksWaitingTermination+0x58>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e1      	bne.n	800e9d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop
 800ea18:	3708      	adds	r7, #8
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	2000116c 	.word	0x2000116c
 800ea24:	20001198 	.word	0x20001198
 800ea28:	20001180 	.word	0x20001180

0800ea2c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d102      	bne.n	800ea46 <vTaskGetInfo+0x1a>
 800ea40:	4b2c      	ldr	r3, [pc, #176]	@ (800eaf4 <vTaskGetInfo+0xc8>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	e000      	b.n	800ea48 <vTaskGetInfo+0x1c>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	697a      	ldr	r2, [r7, #20]
 800ea4e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800ea80:	78fb      	ldrb	r3, [r7, #3]
 800ea82:	2b05      	cmp	r3, #5
 800ea84:	d01a      	beq.n	800eabc <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800ea86:	4b1b      	ldr	r3, [pc, #108]	@ (800eaf4 <vTaskGetInfo+0xc8>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d103      	bne.n	800ea98 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2200      	movs	r2, #0
 800ea94:	731a      	strb	r2, [r3, #12]
 800ea96:	e018      	b.n	800eaca <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	78fa      	ldrb	r2, [r7, #3]
 800ea9c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800ea9e:	78fb      	ldrb	r3, [r7, #3]
 800eaa0:	2b03      	cmp	r3, #3
 800eaa2:	d112      	bne.n	800eaca <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800eaa4:	f7ff faae 	bl	800e004 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d002      	beq.n	800eab6 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	2202      	movs	r2, #2
 800eab4:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800eab6:	f7ff fab3 	bl	800e020 <xTaskResumeAll>
 800eaba:	e006      	b.n	800eaca <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	f7ff f823 	bl	800db08 <eTaskGetState>
 800eac2:	4603      	mov	r3, r0
 800eac4:	461a      	mov	r2, r3
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d009      	beq.n	800eae4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ead4:	4618      	mov	r0, r3
 800ead6:	f000 f80f 	bl	800eaf8 <prvTaskCheckFreeStackSpace>
 800eada:	4603      	mov	r3, r0
 800eadc:	461a      	mov	r2, r3
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800eae2:	e002      	b.n	800eaea <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	2200      	movs	r2, #0
 800eae8:	841a      	strh	r2, [r3, #32]
	}
 800eaea:	bf00      	nop
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	20000cc4 	.word	0x20000cc4

0800eaf8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800eb00:	2300      	movs	r3, #0
 800eb02:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb04:	e005      	b.n	800eb12 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2ba5      	cmp	r3, #165	@ 0xa5
 800eb18:	d0f5      	beq.n	800eb06 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	089b      	lsrs	r3, r3, #2
 800eb1e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	b29b      	uxth	r3, r3
	}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3714      	adds	r7, #20
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d102      	bne.n	800eb44 <uxTaskGetStackHighWaterMark+0x14>
 800eb3e:	4b09      	ldr	r3, [pc, #36]	@ (800eb64 <uxTaskGetStackHighWaterMark+0x34>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	e000      	b.n	800eb46 <uxTaskGetStackHighWaterMark+0x16>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb4c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800eb4e:	6938      	ldr	r0, [r7, #16]
 800eb50:	f7ff ffd2 	bl	800eaf8 <prvTaskCheckFreeStackSpace>
 800eb54:	4603      	mov	r3, r0
 800eb56:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800eb58:	68fb      	ldr	r3, [r7, #12]
	}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3718      	adds	r7, #24
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20000cc4 	.word	0x20000cc4

0800eb68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	3354      	adds	r3, #84	@ 0x54
 800eb74:	4618      	mov	r0, r3
 800eb76:	f002 f9d3 	bl	8010f20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d108      	bne.n	800eb96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f001 faa5 	bl	80100d8 <vPortFree>
				vPortFree( pxTCB );
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f001 faa2 	bl	80100d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb94:	e019      	b.n	800ebca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d103      	bne.n	800eba8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f001 fa99 	bl	80100d8 <vPortFree>
	}
 800eba6:	e010      	b.n	800ebca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	d00b      	beq.n	800ebca <prvDeleteTCB+0x62>
	__asm volatile
 800ebb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb6:	f383 8811 	msr	BASEPRI, r3
 800ebba:	f3bf 8f6f 	isb	sy
 800ebbe:	f3bf 8f4f 	dsb	sy
 800ebc2:	60fb      	str	r3, [r7, #12]
}
 800ebc4:	bf00      	nop
 800ebc6:	bf00      	nop
 800ebc8:	e7fd      	b.n	800ebc6 <prvDeleteTCB+0x5e>
	}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
	...

0800ebd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ebda:	4b0c      	ldr	r3, [pc, #48]	@ (800ec0c <prvResetNextTaskUnblockTime+0x38>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d104      	bne.n	800ebee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ebe4:	4b0a      	ldr	r3, [pc, #40]	@ (800ec10 <prvResetNextTaskUnblockTime+0x3c>)
 800ebe6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ebec:	e008      	b.n	800ec00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebee:	4b07      	ldr	r3, [pc, #28]	@ (800ec0c <prvResetNextTaskUnblockTime+0x38>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4a04      	ldr	r2, [pc, #16]	@ (800ec10 <prvResetNextTaskUnblockTime+0x3c>)
 800ebfe:	6013      	str	r3, [r2, #0]
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr
 800ec0c:	20001150 	.word	0x20001150
 800ec10:	200011b8 	.word	0x200011b8

0800ec14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec48 <xTaskGetSchedulerState+0x34>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d102      	bne.n	800ec28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec22:	2301      	movs	r3, #1
 800ec24:	607b      	str	r3, [r7, #4]
 800ec26:	e008      	b.n	800ec3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec28:	4b08      	ldr	r3, [pc, #32]	@ (800ec4c <xTaskGetSchedulerState+0x38>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec30:	2302      	movs	r3, #2
 800ec32:	607b      	str	r3, [r7, #4]
 800ec34:	e001      	b.n	800ec3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec36:	2300      	movs	r3, #0
 800ec38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec3a:	687b      	ldr	r3, [r7, #4]
	}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr
 800ec48:	200011a4 	.word	0x200011a4
 800ec4c:	200011c0 	.word	0x200011c0

0800ec50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d051      	beq.n	800ed0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec6a:	4b2a      	ldr	r3, [pc, #168]	@ (800ed14 <xTaskPriorityInherit+0xc4>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d241      	bcs.n	800ecf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	db06      	blt.n	800ec8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7c:	4b25      	ldr	r3, [pc, #148]	@ (800ed14 <xTaskPriorityInherit+0xc4>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	6959      	ldr	r1, [r3, #20]
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec92:	4613      	mov	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	009b      	lsls	r3, r3, #2
 800ec9a:	4a1f      	ldr	r2, [pc, #124]	@ (800ed18 <xTaskPriorityInherit+0xc8>)
 800ec9c:	4413      	add	r3, r2
 800ec9e:	4299      	cmp	r1, r3
 800eca0:	d122      	bne.n	800ece8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fd fd66 	bl	800c778 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecac:	4b19      	ldr	r3, [pc, #100]	@ (800ed14 <xTaskPriorityInherit+0xc4>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecba:	4b18      	ldr	r3, [pc, #96]	@ (800ed1c <xTaskPriorityInherit+0xcc>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d903      	bls.n	800ecca <xTaskPriorityInherit+0x7a>
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc6:	4a15      	ldr	r2, [pc, #84]	@ (800ed1c <xTaskPriorityInherit+0xcc>)
 800ecc8:	6013      	str	r3, [r2, #0]
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecce:	4613      	mov	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4413      	add	r3, r2
 800ecd4:	009b      	lsls	r3, r3, #2
 800ecd6:	4a10      	ldr	r2, [pc, #64]	@ (800ed18 <xTaskPriorityInherit+0xc8>)
 800ecd8:	441a      	add	r2, r3
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	3304      	adds	r3, #4
 800ecde:	4619      	mov	r1, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	f7fd fcec 	bl	800c6be <vListInsertEnd>
 800ece6:	e004      	b.n	800ecf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ece8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <xTaskPriorityInherit+0xc4>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	e008      	b.n	800ed0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ecfc:	4b05      	ldr	r3, [pc, #20]	@ (800ed14 <xTaskPriorityInherit+0xc4>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d201      	bcs.n	800ed0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ed06:	2301      	movs	r3, #1
 800ed08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
	}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3710      	adds	r7, #16
 800ed10:	46bd      	mov	sp, r7
 800ed12:	bd80      	pop	{r7, pc}
 800ed14:	20000cc4 	.word	0x20000cc4
 800ed18:	20000cc8 	.word	0x20000cc8
 800ed1c:	200011a0 	.word	0x200011a0

0800ed20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b086      	sub	sp, #24
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d058      	beq.n	800ede8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed36:	4b2f      	ldr	r3, [pc, #188]	@ (800edf4 <xTaskPriorityDisinherit+0xd4>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	693a      	ldr	r2, [r7, #16]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d00b      	beq.n	800ed58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed44:	f383 8811 	msr	BASEPRI, r3
 800ed48:	f3bf 8f6f 	isb	sy
 800ed4c:	f3bf 8f4f 	dsb	sy
 800ed50:	60fb      	str	r3, [r7, #12]
}
 800ed52:	bf00      	nop
 800ed54:	bf00      	nop
 800ed56:	e7fd      	b.n	800ed54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d10b      	bne.n	800ed78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	60bb      	str	r3, [r7, #8]
}
 800ed72:	bf00      	nop
 800ed74:	bf00      	nop
 800ed76:	e7fd      	b.n	800ed74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed7c:	1e5a      	subs	r2, r3, #1
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d02c      	beq.n	800ede8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d128      	bne.n	800ede8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fd fcec 	bl	800c778 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edb8:	4b0f      	ldr	r3, [pc, #60]	@ (800edf8 <xTaskPriorityDisinherit+0xd8>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d903      	bls.n	800edc8 <xTaskPriorityDisinherit+0xa8>
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc4:	4a0c      	ldr	r2, [pc, #48]	@ (800edf8 <xTaskPriorityDisinherit+0xd8>)
 800edc6:	6013      	str	r3, [r2, #0]
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edcc:	4613      	mov	r3, r2
 800edce:	009b      	lsls	r3, r3, #2
 800edd0:	4413      	add	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	4a09      	ldr	r2, [pc, #36]	@ (800edfc <xTaskPriorityDisinherit+0xdc>)
 800edd6:	441a      	add	r2, r3
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	3304      	adds	r3, #4
 800eddc:	4619      	mov	r1, r3
 800edde:	4610      	mov	r0, r2
 800ede0:	f7fd fc6d 	bl	800c6be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ede4:	2301      	movs	r3, #1
 800ede6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ede8:	697b      	ldr	r3, [r7, #20]
	}
 800edea:	4618      	mov	r0, r3
 800edec:	3718      	adds	r7, #24
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	20000cc4 	.word	0x20000cc4
 800edf8:	200011a0 	.word	0x200011a0
 800edfc:	20000cc8 	.word	0x20000cc8

0800ee00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b088      	sub	sp, #32
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d06c      	beq.n	800eef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10b      	bne.n	800ee38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	60fb      	str	r3, [r7, #12]
}
 800ee32:	bf00      	nop
 800ee34:	bf00      	nop
 800ee36:	e7fd      	b.n	800ee34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee3c:	683a      	ldr	r2, [r7, #0]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d902      	bls.n	800ee48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	61fb      	str	r3, [r7, #28]
 800ee46:	e002      	b.n	800ee4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee52:	69fa      	ldr	r2, [r7, #28]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d04c      	beq.n	800eef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee5c:	697a      	ldr	r2, [r7, #20]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d147      	bne.n	800eef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee62:	4b26      	ldr	r3, [pc, #152]	@ (800eefc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	69ba      	ldr	r2, [r7, #24]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d10b      	bne.n	800ee84 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee70:	f383 8811 	msr	BASEPRI, r3
 800ee74:	f3bf 8f6f 	isb	sy
 800ee78:	f3bf 8f4f 	dsb	sy
 800ee7c:	60bb      	str	r3, [r7, #8]
}
 800ee7e:	bf00      	nop
 800ee80:	bf00      	nop
 800ee82:	e7fd      	b.n	800ee80 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	69fa      	ldr	r2, [r7, #28]
 800ee8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	db04      	blt.n	800eea2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	6959      	ldr	r1, [r3, #20]
 800eea6:	693a      	ldr	r2, [r7, #16]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4a13      	ldr	r2, [pc, #76]	@ (800ef00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eeb2:	4413      	add	r3, r2
 800eeb4:	4299      	cmp	r1, r3
 800eeb6:	d11c      	bne.n	800eef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eeb8:	69bb      	ldr	r3, [r7, #24]
 800eeba:	3304      	adds	r3, #4
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fd fc5b 	bl	800c778 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec6:	4b0f      	ldr	r3, [pc, #60]	@ (800ef04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d903      	bls.n	800eed6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed2:	4a0c      	ldr	r2, [pc, #48]	@ (800ef04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eed4:	6013      	str	r3, [r2, #0]
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeda:	4613      	mov	r3, r2
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	4413      	add	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4a07      	ldr	r2, [pc, #28]	@ (800ef00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eee4:	441a      	add	r2, r3
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	3304      	adds	r3, #4
 800eeea:	4619      	mov	r1, r3
 800eeec:	4610      	mov	r0, r2
 800eeee:	f7fd fbe6 	bl	800c6be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eef2:	bf00      	nop
 800eef4:	3720      	adds	r7, #32
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop
 800eefc:	20000cc4 	.word	0x20000cc4
 800ef00:	20000cc8 	.word	0x20000cc8
 800ef04:	200011a0 	.word	0x200011a0

0800ef08 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800ef0e:	4b09      	ldr	r3, [pc, #36]	@ (800ef34 <uxTaskResetEventItemValue+0x2c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef16:	4b07      	ldr	r3, [pc, #28]	@ (800ef34 <uxTaskResetEventItemValue+0x2c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef1c:	4b05      	ldr	r3, [pc, #20]	@ (800ef34 <uxTaskResetEventItemValue+0x2c>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800ef24:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800ef26:	687b      	ldr	r3, [r7, #4]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	370c      	adds	r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	20000cc4 	.word	0x20000cc4

0800ef38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ef38:	b480      	push	{r7}
 800ef3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ef3c:	4b07      	ldr	r3, [pc, #28]	@ (800ef5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d004      	beq.n	800ef4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ef44:	4b05      	ldr	r3, [pc, #20]	@ (800ef5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef4a:	3201      	adds	r2, #1
 800ef4c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ef4e:	4b03      	ldr	r3, [pc, #12]	@ (800ef5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ef50:	681b      	ldr	r3, [r3, #0]
	}
 800ef52:	4618      	mov	r0, r3
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr
 800ef5c:	20000cc4 	.word	0x20000cc4

0800ef60 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ef6a:	f000 fec5 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ef6e:	4b20      	ldr	r3, [pc, #128]	@ (800eff0 <ulTaskNotifyTake+0x90>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d113      	bne.n	800efa2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ef7a:	4b1d      	ldr	r3, [pc, #116]	@ (800eff0 <ulTaskNotifyTake+0x90>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00b      	beq.n	800efa2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	6838      	ldr	r0, [r7, #0]
 800ef8e:	f000 f955 	bl	800f23c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ef92:	4b18      	ldr	r3, [pc, #96]	@ (800eff4 <ulTaskNotifyTake+0x94>)
 800ef94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800efa2:	f000 fedb 	bl	800fd5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800efa6:	f000 fea7 	bl	800fcf8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800efaa:	4b11      	ldr	r3, [pc, #68]	@ (800eff0 <ulTaskNotifyTake+0x90>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efb2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00e      	beq.n	800efd8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d005      	beq.n	800efcc <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800efc0:	4b0b      	ldr	r3, [pc, #44]	@ (800eff0 <ulTaskNotifyTake+0x90>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	2200      	movs	r2, #0
 800efc6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800efca:	e005      	b.n	800efd8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800efcc:	4b08      	ldr	r3, [pc, #32]	@ (800eff0 <ulTaskNotifyTake+0x90>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	3a01      	subs	r2, #1
 800efd4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efd8:	4b05      	ldr	r3, [pc, #20]	@ (800eff0 <ulTaskNotifyTake+0x90>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800efe2:	f000 febb 	bl	800fd5c <vPortExitCritical>

		return ulReturn;
 800efe6:	68fb      	ldr	r3, [r7, #12]
	}
 800efe8:	4618      	mov	r0, r3
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20000cc4 	.word	0x20000cc4
 800eff4:	e000ed04 	.word	0xe000ed04

0800eff8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
 800f004:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800f006:	f000 fe77 	bl	800fcf8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f00a:	4b29      	ldr	r3, [pc, #164]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f012:	b2db      	uxtb	r3, r3
 800f014:	2b02      	cmp	r3, #2
 800f016:	d01c      	beq.n	800f052 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800f018:	4b25      	ldr	r3, [pc, #148]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	43d2      	mvns	r2, r2
 800f024:	400a      	ands	r2, r1
 800f026:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f02a:	4b21      	ldr	r3, [pc, #132]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00b      	beq.n	800f052 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f03a:	2101      	movs	r1, #1
 800f03c:	6838      	ldr	r0, [r7, #0]
 800f03e:	f000 f8fd 	bl	800f23c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f042:	4b1c      	ldr	r3, [pc, #112]	@ (800f0b4 <xTaskNotifyWait+0xbc>)
 800f044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f052:	f000 fe83 	bl	800fd5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f056:	f000 fe4f 	bl	800fcf8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d005      	beq.n	800f06c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800f060:	4b13      	ldr	r3, [pc, #76]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800f06c:	4b10      	ldr	r3, [pc, #64]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b02      	cmp	r3, #2
 800f078:	d002      	beq.n	800f080 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800f07a:	2300      	movs	r3, #0
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	e00a      	b.n	800f096 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800f080:	4b0b      	ldr	r3, [pc, #44]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	43d2      	mvns	r2, r2
 800f08c:	400a      	ands	r2, r1
 800f08e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800f092:	2301      	movs	r3, #1
 800f094:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f096:	4b06      	ldr	r3, [pc, #24]	@ (800f0b0 <xTaskNotifyWait+0xb8>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800f0a0:	f000 fe5c 	bl	800fd5c <vPortExitCritical>

		return xReturn;
 800f0a4:	697b      	ldr	r3, [r7, #20]
	}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	3718      	adds	r7, #24
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	20000cc4 	.word	0x20000cc4
 800f0b4:	e000ed04 	.word	0xe000ed04

0800f0b8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08a      	sub	sp, #40	@ 0x28
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	603b      	str	r3, [r7, #0]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f0c8:	2301      	movs	r3, #1
 800f0ca:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d10b      	bne.n	800f0ea <xTaskGenericNotify+0x32>
	__asm volatile
 800f0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0d6:	f383 8811 	msr	BASEPRI, r3
 800f0da:	f3bf 8f6f 	isb	sy
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	61bb      	str	r3, [r7, #24]
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop
 800f0e8:	e7fd      	b.n	800f0e6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f0ee:	f000 fe03 	bl	800fcf8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d004      	beq.n	800f102 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f0f8:	6a3b      	ldr	r3, [r7, #32]
 800f0fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f108:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	2202      	movs	r2, #2
 800f10e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	2b04      	cmp	r3, #4
 800f116:	d82e      	bhi.n	800f176 <xTaskGenericNotify+0xbe>
 800f118:	a201      	add	r2, pc, #4	@ (adr r2, 800f120 <xTaskGenericNotify+0x68>)
 800f11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f11e:	bf00      	nop
 800f120:	0800f19b 	.word	0x0800f19b
 800f124:	0800f135 	.word	0x0800f135
 800f128:	0800f147 	.word	0x0800f147
 800f12c:	0800f157 	.word	0x0800f157
 800f130:	0800f161 	.word	0x0800f161
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	431a      	orrs	r2, r3
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f144:	e02c      	b.n	800f1a0 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f14c:	1c5a      	adds	r2, r3, #1
 800f14e:	6a3b      	ldr	r3, [r7, #32]
 800f150:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f154:	e024      	b.n	800f1a0 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f156:	6a3b      	ldr	r3, [r7, #32]
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800f15e:	e01f      	b.n	800f1a0 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f160:	7ffb      	ldrb	r3, [r7, #31]
 800f162:	2b02      	cmp	r3, #2
 800f164:	d004      	beq.n	800f170 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f16e:	e017      	b.n	800f1a0 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f170:	2300      	movs	r3, #0
 800f172:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f174:	e014      	b.n	800f1a0 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f180:	d00d      	beq.n	800f19e <xTaskGenericNotify+0xe6>
	__asm volatile
 800f182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f186:	f383 8811 	msr	BASEPRI, r3
 800f18a:	f3bf 8f6f 	isb	sy
 800f18e:	f3bf 8f4f 	dsb	sy
 800f192:	617b      	str	r3, [r7, #20]
}
 800f194:	bf00      	nop
 800f196:	bf00      	nop
 800f198:	e7fd      	b.n	800f196 <xTaskGenericNotify+0xde>
					break;
 800f19a:	bf00      	nop
 800f19c:	e000      	b.n	800f1a0 <xTaskGenericNotify+0xe8>

					break;
 800f19e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f1a0:	7ffb      	ldrb	r3, [r7, #31]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d13b      	bne.n	800f21e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fd fae4 	bl	800c778 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f1b0:	6a3b      	ldr	r3, [r7, #32]
 800f1b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1b4:	4b1d      	ldr	r3, [pc, #116]	@ (800f22c <xTaskGenericNotify+0x174>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d903      	bls.n	800f1c4 <xTaskGenericNotify+0x10c>
 800f1bc:	6a3b      	ldr	r3, [r7, #32]
 800f1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c0:	4a1a      	ldr	r2, [pc, #104]	@ (800f22c <xTaskGenericNotify+0x174>)
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	6a3b      	ldr	r3, [r7, #32]
 800f1c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1c8:	4613      	mov	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	4413      	add	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4a17      	ldr	r2, [pc, #92]	@ (800f230 <xTaskGenericNotify+0x178>)
 800f1d2:	441a      	add	r2, r3
 800f1d4:	6a3b      	ldr	r3, [r7, #32]
 800f1d6:	3304      	adds	r3, #4
 800f1d8:	4619      	mov	r1, r3
 800f1da:	4610      	mov	r0, r2
 800f1dc:	f7fd fa6f 	bl	800c6be <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f1e0:	6a3b      	ldr	r3, [r7, #32]
 800f1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00b      	beq.n	800f200 <xTaskGenericNotify+0x148>
	__asm volatile
 800f1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1ec:	f383 8811 	msr	BASEPRI, r3
 800f1f0:	f3bf 8f6f 	isb	sy
 800f1f4:	f3bf 8f4f 	dsb	sy
 800f1f8:	613b      	str	r3, [r7, #16]
}
 800f1fa:	bf00      	nop
 800f1fc:	bf00      	nop
 800f1fe:	e7fd      	b.n	800f1fc <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f200:	6a3b      	ldr	r3, [r7, #32]
 800f202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f204:	4b0b      	ldr	r3, [pc, #44]	@ (800f234 <xTaskGenericNotify+0x17c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d907      	bls.n	800f21e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f20e:	4b0a      	ldr	r3, [pc, #40]	@ (800f238 <xTaskGenericNotify+0x180>)
 800f210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f214:	601a      	str	r2, [r3, #0]
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f21e:	f000 fd9d 	bl	800fd5c <vPortExitCritical>

		return xReturn;
 800f222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f224:	4618      	mov	r0, r3
 800f226:	3728      	adds	r7, #40	@ 0x28
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}
 800f22c:	200011a0 	.word	0x200011a0
 800f230:	20000cc8 	.word	0x20000cc8
 800f234:	20000cc4 	.word	0x20000cc4
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f246:	4b21      	ldr	r3, [pc, #132]	@ (800f2cc <prvAddCurrentTaskToDelayedList+0x90>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f24c:	4b20      	ldr	r3, [pc, #128]	@ (800f2d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	3304      	adds	r3, #4
 800f252:	4618      	mov	r0, r3
 800f254:	f7fd fa90 	bl	800c778 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25e:	d10a      	bne.n	800f276 <prvAddCurrentTaskToDelayedList+0x3a>
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d007      	beq.n	800f276 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f266:	4b1a      	ldr	r3, [pc, #104]	@ (800f2d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	3304      	adds	r3, #4
 800f26c:	4619      	mov	r1, r3
 800f26e:	4819      	ldr	r0, [pc, #100]	@ (800f2d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f270:	f7fd fa25 	bl	800c6be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f274:	e026      	b.n	800f2c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4413      	add	r3, r2
 800f27c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f27e:	4b14      	ldr	r3, [pc, #80]	@ (800f2d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f286:	68ba      	ldr	r2, [r7, #8]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d209      	bcs.n	800f2a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f28e:	4b12      	ldr	r3, [pc, #72]	@ (800f2d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	4b0f      	ldr	r3, [pc, #60]	@ (800f2d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	3304      	adds	r3, #4
 800f298:	4619      	mov	r1, r3
 800f29a:	4610      	mov	r0, r2
 800f29c:	f7fd fa33 	bl	800c706 <vListInsert>
}
 800f2a0:	e010      	b.n	800f2c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f2dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f2d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	4610      	mov	r0, r2
 800f2b0:	f7fd fa29 	bl	800c706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f2e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	68ba      	ldr	r2, [r7, #8]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d202      	bcs.n	800f2c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2be:	4a08      	ldr	r2, [pc, #32]	@ (800f2e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	6013      	str	r3, [r2, #0]
}
 800f2c4:	bf00      	nop
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	2000119c 	.word	0x2000119c
 800f2d0:	20000cc4 	.word	0x20000cc4
 800f2d4:	20001184 	.word	0x20001184
 800f2d8:	20001154 	.word	0x20001154
 800f2dc:	20001150 	.word	0x20001150
 800f2e0:	200011b8 	.word	0x200011b8

0800f2e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b08a      	sub	sp, #40	@ 0x28
 800f2e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2ee:	f000 fb71 	bl	800f9d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2f2:	4b1d      	ldr	r3, [pc, #116]	@ (800f368 <xTimerCreateTimerTask+0x84>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d021      	beq.n	800f33e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2fe:	2300      	movs	r3, #0
 800f300:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f302:	1d3a      	adds	r2, r7, #4
 800f304:	f107 0108 	add.w	r1, r7, #8
 800f308:	f107 030c 	add.w	r3, r7, #12
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7fc ffd3 	bl	800c2b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f312:	6879      	ldr	r1, [r7, #4]
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	9202      	str	r2, [sp, #8]
 800f31a:	9301      	str	r3, [sp, #4]
 800f31c:	2302      	movs	r3, #2
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	2300      	movs	r3, #0
 800f322:	460a      	mov	r2, r1
 800f324:	4911      	ldr	r1, [pc, #68]	@ (800f36c <xTimerCreateTimerTask+0x88>)
 800f326:	4812      	ldr	r0, [pc, #72]	@ (800f370 <xTimerCreateTimerTask+0x8c>)
 800f328:	f7fe f986 	bl	800d638 <xTaskCreateStatic>
 800f32c:	4603      	mov	r3, r0
 800f32e:	4a11      	ldr	r2, [pc, #68]	@ (800f374 <xTimerCreateTimerTask+0x90>)
 800f330:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f332:	4b10      	ldr	r3, [pc, #64]	@ (800f374 <xTimerCreateTimerTask+0x90>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f33a:	2301      	movs	r3, #1
 800f33c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d10b      	bne.n	800f35c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f348:	f383 8811 	msr	BASEPRI, r3
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	613b      	str	r3, [r7, #16]
}
 800f356:	bf00      	nop
 800f358:	bf00      	nop
 800f35a:	e7fd      	b.n	800f358 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f35c:	697b      	ldr	r3, [r7, #20]
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3718      	adds	r7, #24
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	200011f4 	.word	0x200011f4
 800f36c:	08012894 	.word	0x08012894
 800f370:	0800f56d 	.word	0x0800f56d
 800f374:	200011f8 	.word	0x200011f8

0800f378 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af02      	add	r7, sp, #8
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f386:	202c      	movs	r0, #44	@ 0x2c
 800f388:	f000 fdd8 	bl	800ff3c <pvPortMalloc>
 800f38c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00d      	beq.n	800f3b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	2200      	movs	r2, #0
 800f398:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	9301      	str	r3, [sp, #4]
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	9300      	str	r3, [sp, #0]
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	68b9      	ldr	r1, [r7, #8]
 800f3aa:	68f8      	ldr	r0, [r7, #12]
 800f3ac:	f000 f805 	bl	800f3ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f3b0:	697b      	ldr	r3, [r7, #20]
	}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3718      	adds	r7, #24
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b086      	sub	sp, #24
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	60f8      	str	r0, [r7, #12]
 800f3c2:	60b9      	str	r1, [r7, #8]
 800f3c4:	607a      	str	r2, [r7, #4]
 800f3c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10b      	bne.n	800f3e6 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800f3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3d2:	f383 8811 	msr	BASEPRI, r3
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	f3bf 8f4f 	dsb	sy
 800f3de:	617b      	str	r3, [r7, #20]
}
 800f3e0:	bf00      	nop
 800f3e2:	bf00      	nop
 800f3e4:	e7fd      	b.n	800f3e2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800f3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d01e      	beq.n	800f42a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800f3ec:	f000 faf2 	bl	800f9d4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800f3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f2:	68fa      	ldr	r2, [r7, #12]
 800f3f4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800f3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3f8:	68ba      	ldr	r2, [r7, #8]
 800f3fa:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800f3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800f402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f404:	6a3a      	ldr	r2, [r7, #32]
 800f406:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800f408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f40a:	3304      	adds	r3, #4
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fd f949 	bl	800c6a4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d008      	beq.n	800f42a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800f418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f41a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f41e:	f043 0304 	orr.w	r3, r3, #4
 800f422:	b2da      	uxtb	r2, r3
 800f424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f426:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800f42a:	bf00      	nop
 800f42c:	3718      	adds	r7, #24
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
	...

0800f434 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b08a      	sub	sp, #40	@ 0x28
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f442:	2300      	movs	r3, #0
 800f444:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10b      	bne.n	800f464 <xTimerGenericCommand+0x30>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	623b      	str	r3, [r7, #32]
}
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	e7fd      	b.n	800f460 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f464:	4b19      	ldr	r3, [pc, #100]	@ (800f4cc <xTimerGenericCommand+0x98>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d02a      	beq.n	800f4c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	2b05      	cmp	r3, #5
 800f47c:	dc18      	bgt.n	800f4b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f47e:	f7ff fbc9 	bl	800ec14 <xTaskGetSchedulerState>
 800f482:	4603      	mov	r3, r0
 800f484:	2b02      	cmp	r3, #2
 800f486:	d109      	bne.n	800f49c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f488:	4b10      	ldr	r3, [pc, #64]	@ (800f4cc <xTimerGenericCommand+0x98>)
 800f48a:	6818      	ldr	r0, [r3, #0]
 800f48c:	f107 0110 	add.w	r1, r7, #16
 800f490:	2300      	movs	r3, #0
 800f492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f494:	f7fd fb12 	bl	800cabc <xQueueGenericSend>
 800f498:	6278      	str	r0, [r7, #36]	@ 0x24
 800f49a:	e012      	b.n	800f4c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f49c:	4b0b      	ldr	r3, [pc, #44]	@ (800f4cc <xTimerGenericCommand+0x98>)
 800f49e:	6818      	ldr	r0, [r3, #0]
 800f4a0:	f107 0110 	add.w	r1, r7, #16
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f7fd fb08 	bl	800cabc <xQueueGenericSend>
 800f4ac:	6278      	str	r0, [r7, #36]	@ 0x24
 800f4ae:	e008      	b.n	800f4c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f4b0:	4b06      	ldr	r3, [pc, #24]	@ (800f4cc <xTimerGenericCommand+0x98>)
 800f4b2:	6818      	ldr	r0, [r3, #0]
 800f4b4:	f107 0110 	add.w	r1, r7, #16
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	f7fd fc00 	bl	800ccc0 <xQueueGenericSendFromISR>
 800f4c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3728      	adds	r7, #40	@ 0x28
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	200011f4 	.word	0x200011f4

0800f4d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b088      	sub	sp, #32
 800f4d4:	af02      	add	r7, sp, #8
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4da:	4b23      	ldr	r3, [pc, #140]	@ (800f568 <prvProcessExpiredTimer+0x98>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fd f945 	bl	800c778 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4f4:	f003 0304 	and.w	r3, r3, #4
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d023      	beq.n	800f544 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	699a      	ldr	r2, [r3, #24]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	18d1      	adds	r1, r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	6978      	ldr	r0, [r7, #20]
 800f50a:	f000 f8d5 	bl	800f6b8 <prvInsertTimerInActiveList>
 800f50e:	4603      	mov	r3, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	d020      	beq.n	800f556 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f514:	2300      	movs	r3, #0
 800f516:	9300      	str	r3, [sp, #0]
 800f518:	2300      	movs	r3, #0
 800f51a:	687a      	ldr	r2, [r7, #4]
 800f51c:	2100      	movs	r1, #0
 800f51e:	6978      	ldr	r0, [r7, #20]
 800f520:	f7ff ff88 	bl	800f434 <xTimerGenericCommand>
 800f524:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d114      	bne.n	800f556 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f530:	f383 8811 	msr	BASEPRI, r3
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	60fb      	str	r3, [r7, #12]
}
 800f53e:	bf00      	nop
 800f540:	bf00      	nop
 800f542:	e7fd      	b.n	800f540 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f54a:	f023 0301 	bic.w	r3, r3, #1
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	6a1b      	ldr	r3, [r3, #32]
 800f55a:	6978      	ldr	r0, [r7, #20]
 800f55c:	4798      	blx	r3
}
 800f55e:	bf00      	nop
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	200011ec 	.word	0x200011ec

0800f56c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f574:	f107 0308 	add.w	r3, r7, #8
 800f578:	4618      	mov	r0, r3
 800f57a:	f000 f859 	bl	800f630 <prvGetNextExpireTime>
 800f57e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	4619      	mov	r1, r3
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 f805 	bl	800f594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f58a:	f000 f8d7 	bl	800f73c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f58e:	bf00      	nop
 800f590:	e7f0      	b.n	800f574 <prvTimerTask+0x8>
	...

0800f594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f59e:	f7fe fd31 	bl	800e004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5a2:	f107 0308 	add.w	r3, r7, #8
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f000 f866 	bl	800f678 <prvSampleTimeNow>
 800f5ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d130      	bne.n	800f616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10a      	bne.n	800f5d0 <prvProcessTimerOrBlockTask+0x3c>
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d806      	bhi.n	800f5d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f5c2:	f7fe fd2d 	bl	800e020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f5c6:	68f9      	ldr	r1, [r7, #12]
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f7ff ff81 	bl	800f4d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f5ce:	e024      	b.n	800f61a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d008      	beq.n	800f5e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f5d6:	4b13      	ldr	r3, [pc, #76]	@ (800f624 <prvProcessTimerOrBlockTask+0x90>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d101      	bne.n	800f5e4 <prvProcessTimerOrBlockTask+0x50>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e000      	b.n	800f5e6 <prvProcessTimerOrBlockTask+0x52>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800f628 <prvProcessTimerOrBlockTask+0x94>)
 800f5ea:	6818      	ldr	r0, [r3, #0]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	1ad3      	subs	r3, r2, r3
 800f5f2:	683a      	ldr	r2, [r7, #0]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	f7fd ffeb 	bl	800d5d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f5fa:	f7fe fd11 	bl	800e020 <xTaskResumeAll>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10a      	bne.n	800f61a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f604:	4b09      	ldr	r3, [pc, #36]	@ (800f62c <prvProcessTimerOrBlockTask+0x98>)
 800f606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	f3bf 8f6f 	isb	sy
}
 800f614:	e001      	b.n	800f61a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f616:	f7fe fd03 	bl	800e020 <xTaskResumeAll>
}
 800f61a:	bf00      	nop
 800f61c:	3710      	adds	r7, #16
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	200011f0 	.word	0x200011f0
 800f628:	200011f4 	.word	0x200011f4
 800f62c:	e000ed04 	.word	0xe000ed04

0800f630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f638:	4b0e      	ldr	r3, [pc, #56]	@ (800f674 <prvGetNextExpireTime+0x44>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d101      	bne.n	800f646 <prvGetNextExpireTime+0x16>
 800f642:	2201      	movs	r2, #1
 800f644:	e000      	b.n	800f648 <prvGetNextExpireTime+0x18>
 800f646:	2200      	movs	r2, #0
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d105      	bne.n	800f660 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f654:	4b07      	ldr	r3, [pc, #28]	@ (800f674 <prvGetNextExpireTime+0x44>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	60fb      	str	r3, [r7, #12]
 800f65e:	e001      	b.n	800f664 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f660:	2300      	movs	r3, #0
 800f662:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f664:	68fb      	ldr	r3, [r7, #12]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3714      	adds	r7, #20
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	200011ec 	.word	0x200011ec

0800f678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b084      	sub	sp, #16
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f680:	f7fe fd6c 	bl	800e15c <xTaskGetTickCount>
 800f684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f686:	4b0b      	ldr	r3, [pc, #44]	@ (800f6b4 <prvSampleTimeNow+0x3c>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d205      	bcs.n	800f69c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f690:	f000 f93a 	bl	800f908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2201      	movs	r2, #1
 800f698:	601a      	str	r2, [r3, #0]
 800f69a:	e002      	b.n	800f6a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f6a2:	4a04      	ldr	r2, [pc, #16]	@ (800f6b4 <prvSampleTimeNow+0x3c>)
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f6a8:	68fb      	ldr	r3, [r7, #12]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	bf00      	nop
 800f6b4:	200011fc 	.word	0x200011fc

0800f6b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b086      	sub	sp, #24
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
 800f6c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d812      	bhi.n	800f704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	1ad2      	subs	r2, r2, r3
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	699b      	ldr	r3, [r3, #24]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d302      	bcc.n	800f6f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	617b      	str	r3, [r7, #20]
 800f6f0:	e01b      	b.n	800f72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f6f2:	4b10      	ldr	r3, [pc, #64]	@ (800f734 <prvInsertTimerInActiveList+0x7c>)
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	3304      	adds	r3, #4
 800f6fa:	4619      	mov	r1, r3
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	f7fd f802 	bl	800c706 <vListInsert>
 800f702:	e012      	b.n	800f72a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d206      	bcs.n	800f71a <prvInsertTimerInActiveList+0x62>
 800f70c:	68ba      	ldr	r2, [r7, #8]
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	429a      	cmp	r2, r3
 800f712:	d302      	bcc.n	800f71a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f714:	2301      	movs	r3, #1
 800f716:	617b      	str	r3, [r7, #20]
 800f718:	e007      	b.n	800f72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f71a:	4b07      	ldr	r3, [pc, #28]	@ (800f738 <prvInsertTimerInActiveList+0x80>)
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3304      	adds	r3, #4
 800f722:	4619      	mov	r1, r3
 800f724:	4610      	mov	r0, r2
 800f726:	f7fc ffee 	bl	800c706 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f72a:	697b      	ldr	r3, [r7, #20]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	200011f0 	.word	0x200011f0
 800f738:	200011ec 	.word	0x200011ec

0800f73c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08e      	sub	sp, #56	@ 0x38
 800f740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f742:	e0ce      	b.n	800f8e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	da19      	bge.n	800f77e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f74a:	1d3b      	adds	r3, r7, #4
 800f74c:	3304      	adds	r3, #4
 800f74e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10b      	bne.n	800f76e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	61fb      	str	r3, [r7, #28]
}
 800f768:	bf00      	nop
 800f76a:	bf00      	nop
 800f76c:	e7fd      	b.n	800f76a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f774:	6850      	ldr	r0, [r2, #4]
 800f776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f778:	6892      	ldr	r2, [r2, #8]
 800f77a:	4611      	mov	r1, r2
 800f77c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2b00      	cmp	r3, #0
 800f782:	f2c0 80ae 	blt.w	800f8e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78c:	695b      	ldr	r3, [r3, #20]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d004      	beq.n	800f79c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f794:	3304      	adds	r3, #4
 800f796:	4618      	mov	r0, r3
 800f798:	f7fc ffee 	bl	800c778 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f79c:	463b      	mov	r3, r7
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7ff ff6a 	bl	800f678 <prvSampleTimeNow>
 800f7a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b09      	cmp	r3, #9
 800f7aa:	f200 8097 	bhi.w	800f8dc <prvProcessReceivedCommands+0x1a0>
 800f7ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f7b4 <prvProcessReceivedCommands+0x78>)
 800f7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b4:	0800f7dd 	.word	0x0800f7dd
 800f7b8:	0800f7dd 	.word	0x0800f7dd
 800f7bc:	0800f7dd 	.word	0x0800f7dd
 800f7c0:	0800f853 	.word	0x0800f853
 800f7c4:	0800f867 	.word	0x0800f867
 800f7c8:	0800f8b3 	.word	0x0800f8b3
 800f7cc:	0800f7dd 	.word	0x0800f7dd
 800f7d0:	0800f7dd 	.word	0x0800f7dd
 800f7d4:	0800f853 	.word	0x0800f853
 800f7d8:	0800f867 	.word	0x0800f867
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7e2:	f043 0301 	orr.w	r3, r3, #1
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7f2:	699b      	ldr	r3, [r3, #24]
 800f7f4:	18d1      	adds	r1, r2, r3
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7fc:	f7ff ff5c 	bl	800f6b8 <prvInsertTimerInActiveList>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d06c      	beq.n	800f8e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f808:	6a1b      	ldr	r3, [r3, #32]
 800f80a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f80c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f810:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f814:	f003 0304 	and.w	r3, r3, #4
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d061      	beq.n	800f8e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f81c:	68ba      	ldr	r2, [r7, #8]
 800f81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	441a      	add	r2, r3
 800f824:	2300      	movs	r3, #0
 800f826:	9300      	str	r3, [sp, #0]
 800f828:	2300      	movs	r3, #0
 800f82a:	2100      	movs	r1, #0
 800f82c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f82e:	f7ff fe01 	bl	800f434 <xTimerGenericCommand>
 800f832:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d152      	bne.n	800f8e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	61bb      	str	r3, [r7, #24]
}
 800f84c:	bf00      	nop
 800f84e:	bf00      	nop
 800f850:	e7fd      	b.n	800f84e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f858:	f023 0301 	bic.w	r3, r3, #1
 800f85c:	b2da      	uxtb	r2, r3
 800f85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f864:	e03d      	b.n	800f8e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f86c:	f043 0301 	orr.w	r3, r3, #1
 800f870:	b2da      	uxtb	r2, r3
 800f872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f878:	68ba      	ldr	r2, [r7, #8]
 800f87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f880:	699b      	ldr	r3, [r3, #24]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10b      	bne.n	800f89e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f88a:	f383 8811 	msr	BASEPRI, r3
 800f88e:	f3bf 8f6f 	isb	sy
 800f892:	f3bf 8f4f 	dsb	sy
 800f896:	617b      	str	r3, [r7, #20]
}
 800f898:	bf00      	nop
 800f89a:	bf00      	nop
 800f89c:	e7fd      	b.n	800f89a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8a0:	699a      	ldr	r2, [r3, #24]
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a4:	18d1      	adds	r1, r2, r3
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8ac:	f7ff ff04 	bl	800f6b8 <prvInsertTimerInActiveList>
					break;
 800f8b0:	e017      	b.n	800f8e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8b8:	f003 0302 	and.w	r3, r3, #2
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d103      	bne.n	800f8c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f8c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f8c2:	f000 fc09 	bl	80100d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f8c6:	e00c      	b.n	800f8e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f8ce:	f023 0301 	bic.w	r3, r3, #1
 800f8d2:	b2da      	uxtb	r2, r3
 800f8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f8da:	e002      	b.n	800f8e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f8dc:	bf00      	nop
 800f8de:	e000      	b.n	800f8e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800f8e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f8e2:	4b08      	ldr	r3, [pc, #32]	@ (800f904 <prvProcessReceivedCommands+0x1c8>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	1d39      	adds	r1, r7, #4
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fd fa86 	bl	800cdfc <xQueueReceive>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	f47f af26 	bne.w	800f744 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f8f8:	bf00      	nop
 800f8fa:	bf00      	nop
 800f8fc:	3730      	adds	r7, #48	@ 0x30
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bd80      	pop	{r7, pc}
 800f902:	bf00      	nop
 800f904:	200011f4 	.word	0x200011f4

0800f908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f90e:	e049      	b.n	800f9a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f910:	4b2e      	ldr	r3, [pc, #184]	@ (800f9cc <prvSwitchTimerLists+0xc4>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f91a:	4b2c      	ldr	r3, [pc, #176]	@ (800f9cc <prvSwitchTimerLists+0xc4>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	3304      	adds	r3, #4
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fc ff25 	bl	800c778 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	68f8      	ldr	r0, [r7, #12]
 800f934:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f93c:	f003 0304 	and.w	r3, r3, #4
 800f940:	2b00      	cmp	r3, #0
 800f942:	d02f      	beq.n	800f9a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	693a      	ldr	r2, [r7, #16]
 800f94a:	4413      	add	r3, r2
 800f94c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	429a      	cmp	r2, r3
 800f954:	d90e      	bls.n	800f974 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	68fa      	ldr	r2, [r7, #12]
 800f960:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f962:	4b1a      	ldr	r3, [pc, #104]	@ (800f9cc <prvSwitchTimerLists+0xc4>)
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	3304      	adds	r3, #4
 800f96a:	4619      	mov	r1, r3
 800f96c:	4610      	mov	r0, r2
 800f96e:	f7fc feca 	bl	800c706 <vListInsert>
 800f972:	e017      	b.n	800f9a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f974:	2300      	movs	r3, #0
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	2300      	movs	r3, #0
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	2100      	movs	r1, #0
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f7ff fd58 	bl	800f434 <xTimerGenericCommand>
 800f984:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d10b      	bne.n	800f9a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f990:	f383 8811 	msr	BASEPRI, r3
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	f3bf 8f4f 	dsb	sy
 800f99c:	603b      	str	r3, [r7, #0]
}
 800f99e:	bf00      	nop
 800f9a0:	bf00      	nop
 800f9a2:	e7fd      	b.n	800f9a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f9a4:	4b09      	ldr	r3, [pc, #36]	@ (800f9cc <prvSwitchTimerLists+0xc4>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1b0      	bne.n	800f910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f9ae:	4b07      	ldr	r3, [pc, #28]	@ (800f9cc <prvSwitchTimerLists+0xc4>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f9b4:	4b06      	ldr	r3, [pc, #24]	@ (800f9d0 <prvSwitchTimerLists+0xc8>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a04      	ldr	r2, [pc, #16]	@ (800f9cc <prvSwitchTimerLists+0xc4>)
 800f9ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f9bc:	4a04      	ldr	r2, [pc, #16]	@ (800f9d0 <prvSwitchTimerLists+0xc8>)
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	6013      	str	r3, [r2, #0]
}
 800f9c2:	bf00      	nop
 800f9c4:	3718      	adds	r7, #24
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	200011ec 	.word	0x200011ec
 800f9d0:	200011f0 	.word	0x200011f0

0800f9d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f9da:	f000 f98d 	bl	800fcf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f9de:	4b15      	ldr	r3, [pc, #84]	@ (800fa34 <prvCheckForValidListAndQueue+0x60>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d120      	bne.n	800fa28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f9e6:	4814      	ldr	r0, [pc, #80]	@ (800fa38 <prvCheckForValidListAndQueue+0x64>)
 800f9e8:	f7fc fe3c 	bl	800c664 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f9ec:	4813      	ldr	r0, [pc, #76]	@ (800fa3c <prvCheckForValidListAndQueue+0x68>)
 800f9ee:	f7fc fe39 	bl	800c664 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f9f2:	4b13      	ldr	r3, [pc, #76]	@ (800fa40 <prvCheckForValidListAndQueue+0x6c>)
 800f9f4:	4a10      	ldr	r2, [pc, #64]	@ (800fa38 <prvCheckForValidListAndQueue+0x64>)
 800f9f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f9f8:	4b12      	ldr	r3, [pc, #72]	@ (800fa44 <prvCheckForValidListAndQueue+0x70>)
 800f9fa:	4a10      	ldr	r2, [pc, #64]	@ (800fa3c <prvCheckForValidListAndQueue+0x68>)
 800f9fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f9fe:	2300      	movs	r3, #0
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	4b11      	ldr	r3, [pc, #68]	@ (800fa48 <prvCheckForValidListAndQueue+0x74>)
 800fa04:	4a11      	ldr	r2, [pc, #68]	@ (800fa4c <prvCheckForValidListAndQueue+0x78>)
 800fa06:	2110      	movs	r1, #16
 800fa08:	200a      	movs	r0, #10
 800fa0a:	f7fc ff49 	bl	800c8a0 <xQueueGenericCreateStatic>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	4a08      	ldr	r2, [pc, #32]	@ (800fa34 <prvCheckForValidListAndQueue+0x60>)
 800fa12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fa14:	4b07      	ldr	r3, [pc, #28]	@ (800fa34 <prvCheckForValidListAndQueue+0x60>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d005      	beq.n	800fa28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fa1c:	4b05      	ldr	r3, [pc, #20]	@ (800fa34 <prvCheckForValidListAndQueue+0x60>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	490b      	ldr	r1, [pc, #44]	@ (800fa50 <prvCheckForValidListAndQueue+0x7c>)
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fd fdaa 	bl	800d57c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa28:	f000 f998 	bl	800fd5c <vPortExitCritical>
}
 800fa2c:	bf00      	nop
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	bf00      	nop
 800fa34:	200011f4 	.word	0x200011f4
 800fa38:	200011c4 	.word	0x200011c4
 800fa3c:	200011d8 	.word	0x200011d8
 800fa40:	200011ec 	.word	0x200011ec
 800fa44:	200011f0 	.word	0x200011f0
 800fa48:	200012a0 	.word	0x200012a0
 800fa4c:	20001200 	.word	0x20001200
 800fa50:	0801289c 	.word	0x0801289c

0800fa54 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08a      	sub	sp, #40	@ 0x28
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
 800fa60:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800fa62:	f06f 0301 	mvn.w	r3, #1
 800fa66:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fa74:	4b06      	ldr	r3, [pc, #24]	@ (800fa90 <xTimerPendFunctionCallFromISR+0x3c>)
 800fa76:	6818      	ldr	r0, [r3, #0]
 800fa78:	f107 0114 	add.w	r1, r7, #20
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	683a      	ldr	r2, [r7, #0]
 800fa80:	f7fd f91e 	bl	800ccc0 <xQueueGenericSendFromISR>
 800fa84:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800fa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3728      	adds	r7, #40	@ 0x28
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	200011f4 	.word	0x200011f4

0800fa94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fa94:	b480      	push	{r7}
 800fa96:	b085      	sub	sp, #20
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	3b04      	subs	r3, #4
 800faa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800faac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	3b04      	subs	r3, #4
 800fab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	f023 0201 	bic.w	r2, r3, #1
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	3b04      	subs	r3, #4
 800fac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fac4:	4a0c      	ldr	r2, [pc, #48]	@ (800faf8 <pxPortInitialiseStack+0x64>)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	3b14      	subs	r3, #20
 800face:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3b04      	subs	r3, #4
 800fada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	f06f 0202 	mvn.w	r2, #2
 800fae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	3b20      	subs	r3, #32
 800fae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800faea:	68fb      	ldr	r3, [r7, #12]
}
 800faec:	4618      	mov	r0, r3
 800faee:	3714      	adds	r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr
 800faf8:	0800fafd 	.word	0x0800fafd

0800fafc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fafc:	b480      	push	{r7}
 800fafe:	b085      	sub	sp, #20
 800fb00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fb06:	4b13      	ldr	r3, [pc, #76]	@ (800fb54 <prvTaskExitError+0x58>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0e:	d00b      	beq.n	800fb28 <prvTaskExitError+0x2c>
	__asm volatile
 800fb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	60fb      	str	r3, [r7, #12]
}
 800fb22:	bf00      	nop
 800fb24:	bf00      	nop
 800fb26:	e7fd      	b.n	800fb24 <prvTaskExitError+0x28>
	__asm volatile
 800fb28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb2c:	f383 8811 	msr	BASEPRI, r3
 800fb30:	f3bf 8f6f 	isb	sy
 800fb34:	f3bf 8f4f 	dsb	sy
 800fb38:	60bb      	str	r3, [r7, #8]
}
 800fb3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fb3c:	bf00      	nop
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d0fc      	beq.n	800fb3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fb44:	bf00      	nop
 800fb46:	bf00      	nop
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	20000258 	.word	0x20000258
	...

0800fb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fb60:	4b07      	ldr	r3, [pc, #28]	@ (800fb80 <pxCurrentTCBConst2>)
 800fb62:	6819      	ldr	r1, [r3, #0]
 800fb64:	6808      	ldr	r0, [r1, #0]
 800fb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6a:	f380 8809 	msr	PSP, r0
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f04f 0000 	mov.w	r0, #0
 800fb76:	f380 8811 	msr	BASEPRI, r0
 800fb7a:	4770      	bx	lr
 800fb7c:	f3af 8000 	nop.w

0800fb80 <pxCurrentTCBConst2>:
 800fb80:	20000cc4 	.word	0x20000cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop

0800fb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fb88:	4808      	ldr	r0, [pc, #32]	@ (800fbac <prvPortStartFirstTask+0x24>)
 800fb8a:	6800      	ldr	r0, [r0, #0]
 800fb8c:	6800      	ldr	r0, [r0, #0]
 800fb8e:	f380 8808 	msr	MSP, r0
 800fb92:	f04f 0000 	mov.w	r0, #0
 800fb96:	f380 8814 	msr	CONTROL, r0
 800fb9a:	b662      	cpsie	i
 800fb9c:	b661      	cpsie	f
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	f3bf 8f6f 	isb	sy
 800fba6:	df00      	svc	0
 800fba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fbaa:	bf00      	nop
 800fbac:	e000ed08 	.word	0xe000ed08

0800fbb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fbb6:	4b47      	ldr	r3, [pc, #284]	@ (800fcd4 <xPortStartScheduler+0x124>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a47      	ldr	r2, [pc, #284]	@ (800fcd8 <xPortStartScheduler+0x128>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d10b      	bne.n	800fbd8 <xPortStartScheduler+0x28>
	__asm volatile
 800fbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc4:	f383 8811 	msr	BASEPRI, r3
 800fbc8:	f3bf 8f6f 	isb	sy
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	60fb      	str	r3, [r7, #12]
}
 800fbd2:	bf00      	nop
 800fbd4:	bf00      	nop
 800fbd6:	e7fd      	b.n	800fbd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fbd8:	4b3e      	ldr	r3, [pc, #248]	@ (800fcd4 <xPortStartScheduler+0x124>)
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a3f      	ldr	r2, [pc, #252]	@ (800fcdc <xPortStartScheduler+0x12c>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d10b      	bne.n	800fbfa <xPortStartScheduler+0x4a>
	__asm volatile
 800fbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbe6:	f383 8811 	msr	BASEPRI, r3
 800fbea:	f3bf 8f6f 	isb	sy
 800fbee:	f3bf 8f4f 	dsb	sy
 800fbf2:	613b      	str	r3, [r7, #16]
}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop
 800fbf8:	e7fd      	b.n	800fbf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fbfa:	4b39      	ldr	r3, [pc, #228]	@ (800fce0 <xPortStartScheduler+0x130>)
 800fbfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	22ff      	movs	r2, #255	@ 0xff
 800fc0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fc14:	78fb      	ldrb	r3, [r7, #3]
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	4b31      	ldr	r3, [pc, #196]	@ (800fce4 <xPortStartScheduler+0x134>)
 800fc20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fc22:	4b31      	ldr	r3, [pc, #196]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc24:	2207      	movs	r2, #7
 800fc26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc28:	e009      	b.n	800fc3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fc2a:	4b2f      	ldr	r3, [pc, #188]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	4a2d      	ldr	r2, [pc, #180]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fc34:	78fb      	ldrb	r3, [r7, #3]
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	005b      	lsls	r3, r3, #1
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fc3e:	78fb      	ldrb	r3, [r7, #3]
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc46:	2b80      	cmp	r3, #128	@ 0x80
 800fc48:	d0ef      	beq.n	800fc2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fc4a:	4b27      	ldr	r3, [pc, #156]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f1c3 0307 	rsb	r3, r3, #7
 800fc52:	2b04      	cmp	r3, #4
 800fc54:	d00b      	beq.n	800fc6e <xPortStartScheduler+0xbe>
	__asm volatile
 800fc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5a:	f383 8811 	msr	BASEPRI, r3
 800fc5e:	f3bf 8f6f 	isb	sy
 800fc62:	f3bf 8f4f 	dsb	sy
 800fc66:	60bb      	str	r3, [r7, #8]
}
 800fc68:	bf00      	nop
 800fc6a:	bf00      	nop
 800fc6c:	e7fd      	b.n	800fc6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fc6e:	4b1e      	ldr	r3, [pc, #120]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	021b      	lsls	r3, r3, #8
 800fc74:	4a1c      	ldr	r2, [pc, #112]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fc78:	4b1b      	ldr	r3, [pc, #108]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fc80:	4a19      	ldr	r2, [pc, #100]	@ (800fce8 <xPortStartScheduler+0x138>)
 800fc82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fc8c:	4b17      	ldr	r3, [pc, #92]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4a16      	ldr	r2, [pc, #88]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fc96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fc98:	4b14      	ldr	r3, [pc, #80]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a13      	ldr	r2, [pc, #76]	@ (800fcec <xPortStartScheduler+0x13c>)
 800fc9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fca4:	f000 f8da 	bl	800fe5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fca8:	4b11      	ldr	r3, [pc, #68]	@ (800fcf0 <xPortStartScheduler+0x140>)
 800fcaa:	2200      	movs	r2, #0
 800fcac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fcae:	f000 f8f9 	bl	800fea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fcb2:	4b10      	ldr	r3, [pc, #64]	@ (800fcf4 <xPortStartScheduler+0x144>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a0f      	ldr	r2, [pc, #60]	@ (800fcf4 <xPortStartScheduler+0x144>)
 800fcb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fcbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fcbe:	f7ff ff63 	bl	800fb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fcc2:	f7fe fbe9 	bl	800e498 <vTaskSwitchContext>
	prvTaskExitError();
 800fcc6:	f7ff ff19 	bl	800fafc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fcca:	2300      	movs	r3, #0
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	e000ed00 	.word	0xe000ed00
 800fcd8:	410fc271 	.word	0x410fc271
 800fcdc:	410fc270 	.word	0x410fc270
 800fce0:	e000e400 	.word	0xe000e400
 800fce4:	200012f0 	.word	0x200012f0
 800fce8:	200012f4 	.word	0x200012f4
 800fcec:	e000ed20 	.word	0xe000ed20
 800fcf0:	20000258 	.word	0x20000258
 800fcf4:	e000ef34 	.word	0xe000ef34

0800fcf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	607b      	str	r3, [r7, #4]
}
 800fd10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fd12:	4b10      	ldr	r3, [pc, #64]	@ (800fd54 <vPortEnterCritical+0x5c>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	3301      	adds	r3, #1
 800fd18:	4a0e      	ldr	r2, [pc, #56]	@ (800fd54 <vPortEnterCritical+0x5c>)
 800fd1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fd1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <vPortEnterCritical+0x5c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d110      	bne.n	800fd46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fd24:	4b0c      	ldr	r3, [pc, #48]	@ (800fd58 <vPortEnterCritical+0x60>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00b      	beq.n	800fd46 <vPortEnterCritical+0x4e>
	__asm volatile
 800fd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd32:	f383 8811 	msr	BASEPRI, r3
 800fd36:	f3bf 8f6f 	isb	sy
 800fd3a:	f3bf 8f4f 	dsb	sy
 800fd3e:	603b      	str	r3, [r7, #0]
}
 800fd40:	bf00      	nop
 800fd42:	bf00      	nop
 800fd44:	e7fd      	b.n	800fd42 <vPortEnterCritical+0x4a>
	}
}
 800fd46:	bf00      	nop
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	20000258 	.word	0x20000258
 800fd58:	e000ed04 	.word	0xe000ed04

0800fd5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fd62:	4b12      	ldr	r3, [pc, #72]	@ (800fdac <vPortExitCritical+0x50>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10b      	bne.n	800fd82 <vPortExitCritical+0x26>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	607b      	str	r3, [r7, #4]
}
 800fd7c:	bf00      	nop
 800fd7e:	bf00      	nop
 800fd80:	e7fd      	b.n	800fd7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fd82:	4b0a      	ldr	r3, [pc, #40]	@ (800fdac <vPortExitCritical+0x50>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	3b01      	subs	r3, #1
 800fd88:	4a08      	ldr	r2, [pc, #32]	@ (800fdac <vPortExitCritical+0x50>)
 800fd8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fd8c:	4b07      	ldr	r3, [pc, #28]	@ (800fdac <vPortExitCritical+0x50>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d105      	bne.n	800fda0 <vPortExitCritical+0x44>
 800fd94:	2300      	movs	r3, #0
 800fd96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	f383 8811 	msr	BASEPRI, r3
}
 800fd9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr
 800fdac:	20000258 	.word	0x20000258

0800fdb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fdb0:	f3ef 8009 	mrs	r0, PSP
 800fdb4:	f3bf 8f6f 	isb	sy
 800fdb8:	4b15      	ldr	r3, [pc, #84]	@ (800fe10 <pxCurrentTCBConst>)
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	f01e 0f10 	tst.w	lr, #16
 800fdc0:	bf08      	it	eq
 800fdc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fdc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdca:	6010      	str	r0, [r2, #0]
 800fdcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fdd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fdd4:	f380 8811 	msr	BASEPRI, r0
 800fdd8:	f3bf 8f4f 	dsb	sy
 800fddc:	f3bf 8f6f 	isb	sy
 800fde0:	f7fe fb5a 	bl	800e498 <vTaskSwitchContext>
 800fde4:	f04f 0000 	mov.w	r0, #0
 800fde8:	f380 8811 	msr	BASEPRI, r0
 800fdec:	bc09      	pop	{r0, r3}
 800fdee:	6819      	ldr	r1, [r3, #0]
 800fdf0:	6808      	ldr	r0, [r1, #0]
 800fdf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf6:	f01e 0f10 	tst.w	lr, #16
 800fdfa:	bf08      	it	eq
 800fdfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fe00:	f380 8809 	msr	PSP, r0
 800fe04:	f3bf 8f6f 	isb	sy
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	f3af 8000 	nop.w

0800fe10 <pxCurrentTCBConst>:
 800fe10:	20000cc4 	.word	0x20000cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop

0800fe18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe22:	f383 8811 	msr	BASEPRI, r3
 800fe26:	f3bf 8f6f 	isb	sy
 800fe2a:	f3bf 8f4f 	dsb	sy
 800fe2e:	607b      	str	r3, [r7, #4]
}
 800fe30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fe32:	f7fe fa77 	bl	800e324 <xTaskIncrementTick>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d003      	beq.n	800fe44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fe3c:	4b06      	ldr	r3, [pc, #24]	@ (800fe58 <xPortSysTickHandler+0x40>)
 800fe3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	2300      	movs	r3, #0
 800fe46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	f383 8811 	msr	BASEPRI, r3
}
 800fe4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	e000ed04 	.word	0xe000ed04

0800fe5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fe60:	4b0b      	ldr	r3, [pc, #44]	@ (800fe90 <vPortSetupTimerInterrupt+0x34>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fe66:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <vPortSetupTimerInterrupt+0x38>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe98 <vPortSetupTimerInterrupt+0x3c>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a0a      	ldr	r2, [pc, #40]	@ (800fe9c <vPortSetupTimerInterrupt+0x40>)
 800fe72:	fba2 2303 	umull	r2, r3, r2, r3
 800fe76:	099b      	lsrs	r3, r3, #6
 800fe78:	4a09      	ldr	r2, [pc, #36]	@ (800fea0 <vPortSetupTimerInterrupt+0x44>)
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fe7e:	4b04      	ldr	r3, [pc, #16]	@ (800fe90 <vPortSetupTimerInterrupt+0x34>)
 800fe80:	2207      	movs	r2, #7
 800fe82:	601a      	str	r2, [r3, #0]
}
 800fe84:	bf00      	nop
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	e000e010 	.word	0xe000e010
 800fe94:	e000e018 	.word	0xe000e018
 800fe98:	2000022c 	.word	0x2000022c
 800fe9c:	10624dd3 	.word	0x10624dd3
 800fea0:	e000e014 	.word	0xe000e014

0800fea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800feb4 <vPortEnableVFP+0x10>
 800fea8:	6801      	ldr	r1, [r0, #0]
 800feaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800feae:	6001      	str	r1, [r0, #0]
 800feb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800feb2:	bf00      	nop
 800feb4:	e000ed88 	.word	0xe000ed88

0800feb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800febe:	f3ef 8305 	mrs	r3, IPSR
 800fec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b0f      	cmp	r3, #15
 800fec8:	d915      	bls.n	800fef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800feca:	4a18      	ldr	r2, [pc, #96]	@ (800ff2c <vPortValidateInterruptPriority+0x74>)
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	4413      	add	r3, r2
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fed4:	4b16      	ldr	r3, [pc, #88]	@ (800ff30 <vPortValidateInterruptPriority+0x78>)
 800fed6:	781b      	ldrb	r3, [r3, #0]
 800fed8:	7afa      	ldrb	r2, [r7, #11]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d20b      	bcs.n	800fef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	607b      	str	r3, [r7, #4]
}
 800fef0:	bf00      	nop
 800fef2:	bf00      	nop
 800fef4:	e7fd      	b.n	800fef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fef6:	4b0f      	ldr	r3, [pc, #60]	@ (800ff34 <vPortValidateInterruptPriority+0x7c>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fefe:	4b0e      	ldr	r3, [pc, #56]	@ (800ff38 <vPortValidateInterruptPriority+0x80>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	429a      	cmp	r2, r3
 800ff04:	d90b      	bls.n	800ff1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ff06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff0a:	f383 8811 	msr	BASEPRI, r3
 800ff0e:	f3bf 8f6f 	isb	sy
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	603b      	str	r3, [r7, #0]
}
 800ff18:	bf00      	nop
 800ff1a:	bf00      	nop
 800ff1c:	e7fd      	b.n	800ff1a <vPortValidateInterruptPriority+0x62>
	}
 800ff1e:	bf00      	nop
 800ff20:	3714      	adds	r7, #20
 800ff22:	46bd      	mov	sp, r7
 800ff24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop
 800ff2c:	e000e3f0 	.word	0xe000e3f0
 800ff30:	200012f0 	.word	0x200012f0
 800ff34:	e000ed0c 	.word	0xe000ed0c
 800ff38:	200012f4 	.word	0x200012f4

0800ff3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b08a      	sub	sp, #40	@ 0x28
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ff48:	f7fe f85c 	bl	800e004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ff4c:	4b5c      	ldr	r3, [pc, #368]	@ (80100c0 <pvPortMalloc+0x184>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d101      	bne.n	800ff58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ff54:	f000 f924 	bl	80101a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ff58:	4b5a      	ldr	r3, [pc, #360]	@ (80100c4 <pvPortMalloc+0x188>)
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4013      	ands	r3, r2
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f040 8095 	bne.w	8010090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d01e      	beq.n	800ffaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ff6c:	2208      	movs	r2, #8
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4413      	add	r3, r2
 800ff72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f003 0307 	and.w	r3, r3, #7
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d015      	beq.n	800ffaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f023 0307 	bic.w	r3, r3, #7
 800ff84:	3308      	adds	r3, #8
 800ff86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f003 0307 	and.w	r3, r3, #7
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d00b      	beq.n	800ffaa <pvPortMalloc+0x6e>
	__asm volatile
 800ff92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	617b      	str	r3, [r7, #20]
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop
 800ffa8:	e7fd      	b.n	800ffa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d06f      	beq.n	8010090 <pvPortMalloc+0x154>
 800ffb0:	4b45      	ldr	r3, [pc, #276]	@ (80100c8 <pvPortMalloc+0x18c>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	687a      	ldr	r2, [r7, #4]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d86a      	bhi.n	8010090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ffba:	4b44      	ldr	r3, [pc, #272]	@ (80100cc <pvPortMalloc+0x190>)
 800ffbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ffbe:	4b43      	ldr	r3, [pc, #268]	@ (80100cc <pvPortMalloc+0x190>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffc4:	e004      	b.n	800ffd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ffca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d903      	bls.n	800ffe2 <pvPortMalloc+0xa6>
 800ffda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d1f1      	bne.n	800ffc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ffe2:	4b37      	ldr	r3, [pc, #220]	@ (80100c0 <pvPortMalloc+0x184>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	d051      	beq.n	8010090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2208      	movs	r2, #8
 800fff2:	4413      	add	r3, r2
 800fff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	6a3b      	ldr	r3, [r7, #32]
 800fffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	1ad2      	subs	r2, r2, r3
 8010006:	2308      	movs	r3, #8
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	429a      	cmp	r2, r3
 801000c:	d920      	bls.n	8010050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801000e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	4413      	add	r3, r2
 8010014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010016:	69bb      	ldr	r3, [r7, #24]
 8010018:	f003 0307 	and.w	r3, r3, #7
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00b      	beq.n	8010038 <pvPortMalloc+0xfc>
	__asm volatile
 8010020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	613b      	str	r3, [r7, #16]
}
 8010032:	bf00      	nop
 8010034:	bf00      	nop
 8010036:	e7fd      	b.n	8010034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003a:	685a      	ldr	r2, [r3, #4]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	1ad2      	subs	r2, r2, r3
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801004a:	69b8      	ldr	r0, [r7, #24]
 801004c:	f000 f90a 	bl	8010264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010050:	4b1d      	ldr	r3, [pc, #116]	@ (80100c8 <pvPortMalloc+0x18c>)
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	4a1b      	ldr	r2, [pc, #108]	@ (80100c8 <pvPortMalloc+0x18c>)
 801005c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801005e:	4b1a      	ldr	r3, [pc, #104]	@ (80100c8 <pvPortMalloc+0x18c>)
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	4b1b      	ldr	r3, [pc, #108]	@ (80100d0 <pvPortMalloc+0x194>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	429a      	cmp	r2, r3
 8010068:	d203      	bcs.n	8010072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801006a:	4b17      	ldr	r3, [pc, #92]	@ (80100c8 <pvPortMalloc+0x18c>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	4a18      	ldr	r2, [pc, #96]	@ (80100d0 <pvPortMalloc+0x194>)
 8010070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010074:	685a      	ldr	r2, [r3, #4]
 8010076:	4b13      	ldr	r3, [pc, #76]	@ (80100c4 <pvPortMalloc+0x188>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	431a      	orrs	r2, r3
 801007c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801007e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010082:	2200      	movs	r2, #0
 8010084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010086:	4b13      	ldr	r3, [pc, #76]	@ (80100d4 <pvPortMalloc+0x198>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	3301      	adds	r3, #1
 801008c:	4a11      	ldr	r2, [pc, #68]	@ (80100d4 <pvPortMalloc+0x198>)
 801008e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010090:	f7fd ffc6 	bl	800e020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	f003 0307 	and.w	r3, r3, #7
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00b      	beq.n	80100b6 <pvPortMalloc+0x17a>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	60fb      	str	r3, [r7, #12]
}
 80100b0:	bf00      	nop
 80100b2:	bf00      	nop
 80100b4:	e7fd      	b.n	80100b2 <pvPortMalloc+0x176>
	return pvReturn;
 80100b6:	69fb      	ldr	r3, [r7, #28]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3728      	adds	r7, #40	@ 0x28
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	20010d00 	.word	0x20010d00
 80100c4:	20010d14 	.word	0x20010d14
 80100c8:	20010d04 	.word	0x20010d04
 80100cc:	20010cf8 	.word	0x20010cf8
 80100d0:	20010d08 	.word	0x20010d08
 80100d4:	20010d0c 	.word	0x20010d0c

080100d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d04f      	beq.n	801018a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80100ea:	2308      	movs	r3, #8
 80100ec:	425b      	negs	r3, r3
 80100ee:	697a      	ldr	r2, [r7, #20]
 80100f0:	4413      	add	r3, r2
 80100f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	685a      	ldr	r2, [r3, #4]
 80100fc:	4b25      	ldr	r3, [pc, #148]	@ (8010194 <vPortFree+0xbc>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4013      	ands	r3, r2
 8010102:	2b00      	cmp	r3, #0
 8010104:	d10b      	bne.n	801011e <vPortFree+0x46>
	__asm volatile
 8010106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	60fb      	str	r3, [r7, #12]
}
 8010118:	bf00      	nop
 801011a:	bf00      	nop
 801011c:	e7fd      	b.n	801011a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00b      	beq.n	801013e <vPortFree+0x66>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	60bb      	str	r3, [r7, #8]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	685a      	ldr	r2, [r3, #4]
 8010142:	4b14      	ldr	r3, [pc, #80]	@ (8010194 <vPortFree+0xbc>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4013      	ands	r3, r2
 8010148:	2b00      	cmp	r3, #0
 801014a:	d01e      	beq.n	801018a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d11a      	bne.n	801018a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	4b0e      	ldr	r3, [pc, #56]	@ (8010194 <vPortFree+0xbc>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	43db      	mvns	r3, r3
 801015e:	401a      	ands	r2, r3
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010164:	f7fd ff4e 	bl	800e004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	4b0a      	ldr	r3, [pc, #40]	@ (8010198 <vPortFree+0xc0>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4413      	add	r3, r2
 8010172:	4a09      	ldr	r2, [pc, #36]	@ (8010198 <vPortFree+0xc0>)
 8010174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010176:	6938      	ldr	r0, [r7, #16]
 8010178:	f000 f874 	bl	8010264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801017c:	4b07      	ldr	r3, [pc, #28]	@ (801019c <vPortFree+0xc4>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	3301      	adds	r3, #1
 8010182:	4a06      	ldr	r2, [pc, #24]	@ (801019c <vPortFree+0xc4>)
 8010184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010186:	f7fd ff4b 	bl	800e020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801018a:	bf00      	nop
 801018c:	3718      	adds	r7, #24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	20010d14 	.word	0x20010d14
 8010198:	20010d04 	.word	0x20010d04
 801019c:	20010d10 	.word	0x20010d10

080101a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80101a6:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 80101aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80101ac:	4b27      	ldr	r3, [pc, #156]	@ (801024c <prvHeapInit+0xac>)
 80101ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f003 0307 	and.w	r3, r3, #7
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d00c      	beq.n	80101d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	3307      	adds	r3, #7
 80101be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f023 0307 	bic.w	r3, r3, #7
 80101c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	4a1f      	ldr	r2, [pc, #124]	@ (801024c <prvHeapInit+0xac>)
 80101d0:	4413      	add	r3, r2
 80101d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80101d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010250 <prvHeapInit+0xb0>)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80101de:	4b1c      	ldr	r3, [pc, #112]	@ (8010250 <prvHeapInit+0xb0>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	4413      	add	r3, r2
 80101ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80101ec:	2208      	movs	r2, #8
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	f023 0307 	bic.w	r3, r3, #7
 80101fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	4a15      	ldr	r2, [pc, #84]	@ (8010254 <prvHeapInit+0xb4>)
 8010200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010202:	4b14      	ldr	r3, [pc, #80]	@ (8010254 <prvHeapInit+0xb4>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2200      	movs	r2, #0
 8010208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801020a:	4b12      	ldr	r3, [pc, #72]	@ (8010254 <prvHeapInit+0xb4>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	2200      	movs	r2, #0
 8010210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	1ad2      	subs	r2, r2, r3
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010220:	4b0c      	ldr	r3, [pc, #48]	@ (8010254 <prvHeapInit+0xb4>)
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	4a0a      	ldr	r2, [pc, #40]	@ (8010258 <prvHeapInit+0xb8>)
 801022e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	685b      	ldr	r3, [r3, #4]
 8010234:	4a09      	ldr	r2, [pc, #36]	@ (801025c <prvHeapInit+0xbc>)
 8010236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010238:	4b09      	ldr	r3, [pc, #36]	@ (8010260 <prvHeapInit+0xc0>)
 801023a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801023e:	601a      	str	r2, [r3, #0]
}
 8010240:	bf00      	nop
 8010242:	3714      	adds	r7, #20
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr
 801024c:	200012f8 	.word	0x200012f8
 8010250:	20010cf8 	.word	0x20010cf8
 8010254:	20010d00 	.word	0x20010d00
 8010258:	20010d08 	.word	0x20010d08
 801025c:	20010d04 	.word	0x20010d04
 8010260:	20010d14 	.word	0x20010d14

08010264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801026c:	4b28      	ldr	r3, [pc, #160]	@ (8010310 <prvInsertBlockIntoFreeList+0xac>)
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	e002      	b.n	8010278 <prvInsertBlockIntoFreeList+0x14>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	429a      	cmp	r2, r3
 8010280:	d8f7      	bhi.n	8010272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	68ba      	ldr	r2, [r7, #8]
 801028c:	4413      	add	r3, r2
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	429a      	cmp	r2, r3
 8010292:	d108      	bne.n	80102a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	685a      	ldr	r2, [r3, #4]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	441a      	add	r2, r3
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	441a      	add	r2, r3
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d118      	bne.n	80102ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681a      	ldr	r2, [r3, #0]
 80102be:	4b15      	ldr	r3, [pc, #84]	@ (8010314 <prvInsertBlockIntoFreeList+0xb0>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d00d      	beq.n	80102e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	685a      	ldr	r2, [r3, #4]
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	441a      	add	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	e008      	b.n	80102f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80102e2:	4b0c      	ldr	r3, [pc, #48]	@ (8010314 <prvInsertBlockIntoFreeList+0xb0>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	e003      	b.n	80102f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80102f4:	68fa      	ldr	r2, [r7, #12]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d002      	beq.n	8010302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010302:	bf00      	nop
 8010304:	3714      	adds	r7, #20
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	20010cf8 	.word	0x20010cf8
 8010314:	20010d00 	.word	0x20010d00

08010318 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801031c:	2201      	movs	r2, #1
 801031e:	490e      	ldr	r1, [pc, #56]	@ (8010358 <MX_USB_HOST_Init+0x40>)
 8010320:	480e      	ldr	r0, [pc, #56]	@ (801035c <MX_USB_HOST_Init+0x44>)
 8010322:	f7f9 feb7 	bl	800a094 <USBH_Init>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d001      	beq.n	8010330 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801032c:	f7f2 f93e 	bl	80025ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010330:	490b      	ldr	r1, [pc, #44]	@ (8010360 <MX_USB_HOST_Init+0x48>)
 8010332:	480a      	ldr	r0, [pc, #40]	@ (801035c <MX_USB_HOST_Init+0x44>)
 8010334:	f7f9 ff7b 	bl	800a22e <USBH_RegisterClass>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801033e:	f7f2 f935 	bl	80025ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8010342:	4806      	ldr	r0, [pc, #24]	@ (801035c <MX_USB_HOST_Init+0x44>)
 8010344:	f7f9 ffff 	bl	800a346 <USBH_Start>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d001      	beq.n	8010352 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801034e:	f7f2 f92d 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010352:	bf00      	nop
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	08010365 	.word	0x08010365
 801035c:	20010d18 	.word	0x20010d18
 8010360:	20000238 	.word	0x20000238

08010364 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	460b      	mov	r3, r1
 801036e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010370:	78fb      	ldrb	r3, [r7, #3]
 8010372:	3b01      	subs	r3, #1
 8010374:	2b04      	cmp	r3, #4
 8010376:	d819      	bhi.n	80103ac <USBH_UserProcess+0x48>
 8010378:	a201      	add	r2, pc, #4	@ (adr r2, 8010380 <USBH_UserProcess+0x1c>)
 801037a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801037e:	bf00      	nop
 8010380:	080103ad 	.word	0x080103ad
 8010384:	0801039d 	.word	0x0801039d
 8010388:	080103ad 	.word	0x080103ad
 801038c:	080103a5 	.word	0x080103a5
 8010390:	08010395 	.word	0x08010395
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010394:	4b09      	ldr	r3, [pc, #36]	@ (80103bc <USBH_UserProcess+0x58>)
 8010396:	2203      	movs	r2, #3
 8010398:	701a      	strb	r2, [r3, #0]
  break;
 801039a:	e008      	b.n	80103ae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801039c:	4b07      	ldr	r3, [pc, #28]	@ (80103bc <USBH_UserProcess+0x58>)
 801039e:	2202      	movs	r2, #2
 80103a0:	701a      	strb	r2, [r3, #0]
  break;
 80103a2:	e004      	b.n	80103ae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80103a4:	4b05      	ldr	r3, [pc, #20]	@ (80103bc <USBH_UserProcess+0x58>)
 80103a6:	2201      	movs	r2, #1
 80103a8:	701a      	strb	r2, [r3, #0]
  break;
 80103aa:	e000      	b.n	80103ae <USBH_UserProcess+0x4a>

  default:
  break;
 80103ac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80103ae:	bf00      	nop
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	200110fc 	.word	0x200110fc

080103c0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b08a      	sub	sp, #40	@ 0x28
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80103c8:	f107 0314 	add.w	r3, r7, #20
 80103cc:	2200      	movs	r2, #0
 80103ce:	601a      	str	r2, [r3, #0]
 80103d0:	605a      	str	r2, [r3, #4]
 80103d2:	609a      	str	r2, [r3, #8]
 80103d4:	60da      	str	r2, [r3, #12]
 80103d6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80103e0:	d147      	bne.n	8010472 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80103e2:	2300      	movs	r3, #0
 80103e4:	613b      	str	r3, [r7, #16]
 80103e6:	4b25      	ldr	r3, [pc, #148]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 80103e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103ea:	4a24      	ldr	r2, [pc, #144]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 80103ec:	f043 0301 	orr.w	r3, r3, #1
 80103f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80103f2:	4b22      	ldr	r3, [pc, #136]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 80103f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f6:	f003 0301 	and.w	r3, r3, #1
 80103fa:	613b      	str	r3, [r7, #16]
 80103fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80103fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010404:	2300      	movs	r3, #0
 8010406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010408:	2300      	movs	r3, #0
 801040a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801040c:	f107 0314 	add.w	r3, r7, #20
 8010410:	4619      	mov	r1, r3
 8010412:	481b      	ldr	r0, [pc, #108]	@ (8010480 <HAL_HCD_MspInit+0xc0>)
 8010414:	f7f2 fe5c 	bl	80030d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010418:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801041c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801041e:	2302      	movs	r3, #2
 8010420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010422:	2300      	movs	r3, #0
 8010424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010426:	2300      	movs	r3, #0
 8010428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801042a:	230a      	movs	r3, #10
 801042c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801042e:	f107 0314 	add.w	r3, r7, #20
 8010432:	4619      	mov	r1, r3
 8010434:	4812      	ldr	r0, [pc, #72]	@ (8010480 <HAL_HCD_MspInit+0xc0>)
 8010436:	f7f2 fe4b 	bl	80030d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801043a:	4b10      	ldr	r3, [pc, #64]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 801043c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801043e:	4a0f      	ldr	r2, [pc, #60]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 8010440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010444:	6353      	str	r3, [r2, #52]	@ 0x34
 8010446:	2300      	movs	r3, #0
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	4b0c      	ldr	r3, [pc, #48]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 801044c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801044e:	4a0b      	ldr	r2, [pc, #44]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 8010450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010454:	6453      	str	r3, [r2, #68]	@ 0x44
 8010456:	4b09      	ldr	r3, [pc, #36]	@ (801047c <HAL_HCD_MspInit+0xbc>)
 8010458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801045a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010462:	2200      	movs	r2, #0
 8010464:	2105      	movs	r1, #5
 8010466:	2043      	movs	r0, #67	@ 0x43
 8010468:	f7f2 fd76 	bl	8002f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801046c:	2043      	movs	r0, #67	@ 0x43
 801046e:	f7f2 fd8f 	bl	8002f90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010472:	bf00      	nop
 8010474:	3728      	adds	r7, #40	@ 0x28
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	40023800 	.word	0x40023800
 8010480:	40020000 	.word	0x40020000

08010484 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010492:	4618      	mov	r0, r3
 8010494:	f7fa fb8f 	bl	800abb6 <USBH_LL_IncTimer>
}
 8010498:	bf00      	nop
 801049a:	3708      	adds	r7, #8
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fa fbcf 	bl	800ac52 <USBH_LL_Connect>
}
 80104b4:	bf00      	nop
 80104b6:	3708      	adds	r7, #8
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fa fbdc 	bl	800ac88 <USBH_LL_Disconnect>
}
 80104d0:	bf00      	nop
 80104d2:	3708      	adds	r7, #8
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b082      	sub	sp, #8
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	460b      	mov	r3, r1
 80104e2:	70fb      	strb	r3, [r7, #3]
 80104e4:	4613      	mov	r3, r2
 80104e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80104ee:	4618      	mov	r0, r3
 80104f0:	f7fa fc2f 	bl	800ad52 <USBH_LL_NotifyURBChange>
#endif
}
 80104f4:	bf00      	nop
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801050a:	4618      	mov	r0, r3
 801050c:	f7fa fb7d 	bl	800ac0a <USBH_LL_PortEnabled>
}
 8010510:	bf00      	nop
 8010512:	3708      	adds	r7, #8
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010526:	4618      	mov	r0, r3
 8010528:	f7fa fb81 	bl	800ac2e <USBH_LL_PortDisabled>
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010542:	2b01      	cmp	r3, #1
 8010544:	d12a      	bne.n	801059c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010546:	4a18      	ldr	r2, [pc, #96]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4a15      	ldr	r2, [pc, #84]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010552:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010556:	4b14      	ldr	r3, [pc, #80]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010558:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801055c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801055e:	4b12      	ldr	r3, [pc, #72]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010560:	2208      	movs	r2, #8
 8010562:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010564:	4b10      	ldr	r3, [pc, #64]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010566:	2201      	movs	r2, #1
 8010568:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801056a:	4b0f      	ldr	r3, [pc, #60]	@ (80105a8 <USBH_LL_Init+0x74>)
 801056c:	2200      	movs	r2, #0
 801056e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010570:	4b0d      	ldr	r3, [pc, #52]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010572:	2202      	movs	r2, #2
 8010574:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010576:	4b0c      	ldr	r3, [pc, #48]	@ (80105a8 <USBH_LL_Init+0x74>)
 8010578:	2200      	movs	r2, #0
 801057a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801057c:	480a      	ldr	r0, [pc, #40]	@ (80105a8 <USBH_LL_Init+0x74>)
 801057e:	f7f2 ffb2 	bl	80034e6 <HAL_HCD_Init>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010588:	f7f2 f810 	bl	80025ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801058c:	4806      	ldr	r0, [pc, #24]	@ (80105a8 <USBH_LL_Init+0x74>)
 801058e:	f7f3 fc13 	bl	8003db8 <HAL_HCD_GetCurrentFrame>
 8010592:	4603      	mov	r3, r0
 8010594:	4619      	mov	r1, r3
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7fa fafe 	bl	800ab98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801059c:	2300      	movs	r3, #0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3708      	adds	r7, #8
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	20011100 	.word	0x20011100

080105ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b4:	2300      	movs	r3, #0
 80105b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7f3 fb80 	bl	8003cc8 <HAL_HCD_Start>
 80105c8:	4603      	mov	r3, r0
 80105ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80105cc:	7bfb      	ldrb	r3, [r7, #15]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f000 f95e 	bl	8010890 <USBH_Get_USB_Status>
 80105d4:	4603      	mov	r3, r0
 80105d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b084      	sub	sp, #16
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80105ee:	2300      	movs	r3, #0
 80105f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7f3 fb88 	bl	8003d0e <HAL_HCD_Stop>
 80105fe:	4603      	mov	r3, r0
 8010600:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010602:	7bfb      	ldrb	r3, [r7, #15]
 8010604:	4618      	mov	r0, r3
 8010606:	f000 f943 	bl	8010890 <USBH_Get_USB_Status>
 801060a:	4603      	mov	r3, r0
 801060c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801060e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010620:	2301      	movs	r3, #1
 8010622:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801062a:	4618      	mov	r0, r3
 801062c:	f7f3 fbd2 	bl	8003dd4 <HAL_HCD_GetCurrentSpeed>
 8010630:	4603      	mov	r3, r0
 8010632:	2b02      	cmp	r3, #2
 8010634:	d00c      	beq.n	8010650 <USBH_LL_GetSpeed+0x38>
 8010636:	2b02      	cmp	r3, #2
 8010638:	d80d      	bhi.n	8010656 <USBH_LL_GetSpeed+0x3e>
 801063a:	2b00      	cmp	r3, #0
 801063c:	d002      	beq.n	8010644 <USBH_LL_GetSpeed+0x2c>
 801063e:	2b01      	cmp	r3, #1
 8010640:	d003      	beq.n	801064a <USBH_LL_GetSpeed+0x32>
 8010642:	e008      	b.n	8010656 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
    break;
 8010648:	e008      	b.n	801065c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801064a:	2301      	movs	r3, #1
 801064c:	73fb      	strb	r3, [r7, #15]
    break;
 801064e:	e005      	b.n	801065c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010650:	2302      	movs	r3, #2
 8010652:	73fb      	strb	r3, [r7, #15]
    break;
 8010654:	e002      	b.n	801065c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010656:	2301      	movs	r3, #1
 8010658:	73fb      	strb	r3, [r7, #15]
    break;
 801065a:	bf00      	nop
  }
  return  speed;
 801065c:	7bfb      	ldrb	r3, [r7, #15]
}
 801065e:	4618      	mov	r0, r3
 8010660:	3710      	adds	r7, #16
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	b084      	sub	sp, #16
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801066e:	2300      	movs	r3, #0
 8010670:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010672:	2300      	movs	r3, #0
 8010674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801067c:	4618      	mov	r0, r3
 801067e:	f7f3 fb63 	bl	8003d48 <HAL_HCD_ResetPort>
 8010682:	4603      	mov	r3, r0
 8010684:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010686:	7bfb      	ldrb	r3, [r7, #15]
 8010688:	4618      	mov	r0, r3
 801068a:	f000 f901 	bl	8010890 <USBH_Get_USB_Status>
 801068e:	4603      	mov	r3, r0
 8010690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010692:	7bbb      	ldrb	r3, [r7, #14]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80106ae:	78fa      	ldrb	r2, [r7, #3]
 80106b0:	4611      	mov	r1, r2
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f3 fb6b 	bl	8003d8e <HAL_HCD_HC_GetXferCount>
 80106b8:	4603      	mov	r3, r0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80106c2:	b590      	push	{r4, r7, lr}
 80106c4:	b089      	sub	sp, #36	@ 0x24
 80106c6:	af04      	add	r7, sp, #16
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	4608      	mov	r0, r1
 80106cc:	4611      	mov	r1, r2
 80106ce:	461a      	mov	r2, r3
 80106d0:	4603      	mov	r3, r0
 80106d2:	70fb      	strb	r3, [r7, #3]
 80106d4:	460b      	mov	r3, r1
 80106d6:	70bb      	strb	r3, [r7, #2]
 80106d8:	4613      	mov	r3, r2
 80106da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106dc:	2300      	movs	r3, #0
 80106de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80106e0:	2300      	movs	r3, #0
 80106e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80106ea:	787c      	ldrb	r4, [r7, #1]
 80106ec:	78ba      	ldrb	r2, [r7, #2]
 80106ee:	78f9      	ldrb	r1, [r7, #3]
 80106f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80106f2:	9302      	str	r3, [sp, #8]
 80106f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80106f8:	9301      	str	r3, [sp, #4]
 80106fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	4623      	mov	r3, r4
 8010702:	f7f2 ff57 	bl	80035b4 <HAL_HCD_HC_Init>
 8010706:	4603      	mov	r3, r0
 8010708:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801070a:	7bfb      	ldrb	r3, [r7, #15]
 801070c:	4618      	mov	r0, r3
 801070e:	f000 f8bf 	bl	8010890 <USBH_Get_USB_Status>
 8010712:	4603      	mov	r3, r0
 8010714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010716:	7bbb      	ldrb	r3, [r7, #14]
}
 8010718:	4618      	mov	r0, r3
 801071a:	3714      	adds	r7, #20
 801071c:	46bd      	mov	sp, r7
 801071e:	bd90      	pop	{r4, r7, pc}

08010720 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
 8010728:	460b      	mov	r3, r1
 801072a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010730:	2300      	movs	r3, #0
 8010732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801073a:	78fa      	ldrb	r2, [r7, #3]
 801073c:	4611      	mov	r1, r2
 801073e:	4618      	mov	r0, r3
 8010740:	f7f2 fff0 	bl	8003724 <HAL_HCD_HC_Halt>
 8010744:	4603      	mov	r3, r0
 8010746:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010748:	7bfb      	ldrb	r3, [r7, #15]
 801074a:	4618      	mov	r0, r3
 801074c:	f000 f8a0 	bl	8010890 <USBH_Get_USB_Status>
 8010750:	4603      	mov	r3, r0
 8010752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010754:	7bbb      	ldrb	r3, [r7, #14]
}
 8010756:	4618      	mov	r0, r3
 8010758:	3710      	adds	r7, #16
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801075e:	b590      	push	{r4, r7, lr}
 8010760:	b089      	sub	sp, #36	@ 0x24
 8010762:	af04      	add	r7, sp, #16
 8010764:	6078      	str	r0, [r7, #4]
 8010766:	4608      	mov	r0, r1
 8010768:	4611      	mov	r1, r2
 801076a:	461a      	mov	r2, r3
 801076c:	4603      	mov	r3, r0
 801076e:	70fb      	strb	r3, [r7, #3]
 8010770:	460b      	mov	r3, r1
 8010772:	70bb      	strb	r3, [r7, #2]
 8010774:	4613      	mov	r3, r2
 8010776:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010778:	2300      	movs	r3, #0
 801077a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801077c:	2300      	movs	r3, #0
 801077e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010786:	787c      	ldrb	r4, [r7, #1]
 8010788:	78ba      	ldrb	r2, [r7, #2]
 801078a:	78f9      	ldrb	r1, [r7, #3]
 801078c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010790:	9303      	str	r3, [sp, #12]
 8010792:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010794:	9302      	str	r3, [sp, #8]
 8010796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010798:	9301      	str	r3, [sp, #4]
 801079a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	4623      	mov	r3, r4
 80107a2:	f7f2 ffe3 	bl	800376c <HAL_HCD_HC_SubmitRequest>
 80107a6:	4603      	mov	r3, r0
 80107a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80107aa:	7bfb      	ldrb	r3, [r7, #15]
 80107ac:	4618      	mov	r0, r3
 80107ae:	f000 f86f 	bl	8010890 <USBH_Get_USB_Status>
 80107b2:	4603      	mov	r3, r0
 80107b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd90      	pop	{r4, r7, pc}

080107c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b082      	sub	sp, #8
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
 80107c8:	460b      	mov	r3, r1
 80107ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80107d2:	78fa      	ldrb	r2, [r7, #3]
 80107d4:	4611      	mov	r1, r2
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7f3 fac4 	bl	8003d64 <HAL_HCD_HC_GetURBState>
 80107dc:	4603      	mov	r3, r0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80107e6:	b580      	push	{r7, lr}
 80107e8:	b082      	sub	sp, #8
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	460b      	mov	r3, r1
 80107f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d103      	bne.n	8010804 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80107fc:	78fb      	ldrb	r3, [r7, #3]
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 f872 	bl	80108e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010804:	20c8      	movs	r0, #200	@ 0xc8
 8010806:	f7f2 facb 	bl	8002da0 <HAL_Delay>
  return USBH_OK;
 801080a:	2300      	movs	r3, #0
}
 801080c:	4618      	mov	r0, r3
 801080e:	3708      	adds	r7, #8
 8010810:	46bd      	mov	sp, r7
 8010812:	bd80      	pop	{r7, pc}

08010814 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010814:	b480      	push	{r7}
 8010816:	b085      	sub	sp, #20
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
 801081c:	460b      	mov	r3, r1
 801081e:	70fb      	strb	r3, [r7, #3]
 8010820:	4613      	mov	r3, r2
 8010822:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801082a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801082c:	78fa      	ldrb	r2, [r7, #3]
 801082e:	68f9      	ldr	r1, [r7, #12]
 8010830:	4613      	mov	r3, r2
 8010832:	011b      	lsls	r3, r3, #4
 8010834:	1a9b      	subs	r3, r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	440b      	add	r3, r1
 801083a:	3317      	adds	r3, #23
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d00a      	beq.n	8010858 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010842:	78fa      	ldrb	r2, [r7, #3]
 8010844:	68f9      	ldr	r1, [r7, #12]
 8010846:	4613      	mov	r3, r2
 8010848:	011b      	lsls	r3, r3, #4
 801084a:	1a9b      	subs	r3, r3, r2
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	440b      	add	r3, r1
 8010850:	333c      	adds	r3, #60	@ 0x3c
 8010852:	78ba      	ldrb	r2, [r7, #2]
 8010854:	701a      	strb	r2, [r3, #0]
 8010856:	e009      	b.n	801086c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010858:	78fa      	ldrb	r2, [r7, #3]
 801085a:	68f9      	ldr	r1, [r7, #12]
 801085c:	4613      	mov	r3, r2
 801085e:	011b      	lsls	r3, r3, #4
 8010860:	1a9b      	subs	r3, r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	440b      	add	r3, r1
 8010866:	333d      	adds	r3, #61	@ 0x3d
 8010868:	78ba      	ldrb	r2, [r7, #2]
 801086a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801086c:	2300      	movs	r3, #0
}
 801086e:	4618      	mov	r0, r3
 8010870:	3714      	adds	r7, #20
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr

0801087a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801087a:	b580      	push	{r7, lr}
 801087c:	b082      	sub	sp, #8
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7f2 fa8c 	bl	8002da0 <HAL_Delay>
}
 8010888:	bf00      	nop
 801088a:	3708      	adds	r7, #8
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010890:	b480      	push	{r7}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	4603      	mov	r3, r0
 8010898:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801089e:	79fb      	ldrb	r3, [r7, #7]
 80108a0:	2b03      	cmp	r3, #3
 80108a2:	d817      	bhi.n	80108d4 <USBH_Get_USB_Status+0x44>
 80108a4:	a201      	add	r2, pc, #4	@ (adr r2, 80108ac <USBH_Get_USB_Status+0x1c>)
 80108a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108aa:	bf00      	nop
 80108ac:	080108bd 	.word	0x080108bd
 80108b0:	080108c3 	.word	0x080108c3
 80108b4:	080108c9 	.word	0x080108c9
 80108b8:	080108cf 	.word	0x080108cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80108bc:	2300      	movs	r3, #0
 80108be:	73fb      	strb	r3, [r7, #15]
    break;
 80108c0:	e00b      	b.n	80108da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80108c2:	2302      	movs	r3, #2
 80108c4:	73fb      	strb	r3, [r7, #15]
    break;
 80108c6:	e008      	b.n	80108da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80108c8:	2301      	movs	r3, #1
 80108ca:	73fb      	strb	r3, [r7, #15]
    break;
 80108cc:	e005      	b.n	80108da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80108ce:	2302      	movs	r3, #2
 80108d0:	73fb      	strb	r3, [r7, #15]
    break;
 80108d2:	e002      	b.n	80108da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80108d4:	2302      	movs	r3, #2
 80108d6:	73fb      	strb	r3, [r7, #15]
    break;
 80108d8:	bf00      	nop
  }
  return usb_status;
 80108da:	7bfb      	ldrb	r3, [r7, #15]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3714      	adds	r7, #20
 80108e0:	46bd      	mov	sp, r7
 80108e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e6:	4770      	bx	lr

080108e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80108f2:	79fb      	ldrb	r3, [r7, #7]
 80108f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80108f6:	79fb      	ldrb	r3, [r7, #7]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d102      	bne.n	8010902 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80108fc:	2301      	movs	r3, #1
 80108fe:	73fb      	strb	r3, [r7, #15]
 8010900:	e001      	b.n	8010906 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010902:	2300      	movs	r3, #0
 8010904:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010906:	7bfb      	ldrb	r3, [r7, #15]
 8010908:	461a      	mov	r2, r3
 801090a:	2101      	movs	r1, #1
 801090c:	4803      	ldr	r0, [pc, #12]	@ (801091c <MX_DriverVbusFS+0x34>)
 801090e:	f7f2 fd93 	bl	8003438 <HAL_GPIO_WritePin>
}
 8010912:	bf00      	nop
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	40020800 	.word	0x40020800

08010920 <atoi>:
 8010920:	220a      	movs	r2, #10
 8010922:	2100      	movs	r1, #0
 8010924:	f000 b938 	b.w	8010b98 <strtol>

08010928 <malloc>:
 8010928:	4b02      	ldr	r3, [pc, #8]	@ (8010934 <malloc+0xc>)
 801092a:	4601      	mov	r1, r0
 801092c:	6818      	ldr	r0, [r3, #0]
 801092e:	f000 b82d 	b.w	801098c <_malloc_r>
 8010932:	bf00      	nop
 8010934:	20000268 	.word	0x20000268

08010938 <free>:
 8010938:	4b02      	ldr	r3, [pc, #8]	@ (8010944 <free+0xc>)
 801093a:	4601      	mov	r1, r0
 801093c:	6818      	ldr	r0, [r3, #0]
 801093e:	f000 bbf5 	b.w	801112c <_free_r>
 8010942:	bf00      	nop
 8010944:	20000268 	.word	0x20000268

08010948 <sbrk_aligned>:
 8010948:	b570      	push	{r4, r5, r6, lr}
 801094a:	4e0f      	ldr	r6, [pc, #60]	@ (8010988 <sbrk_aligned+0x40>)
 801094c:	460c      	mov	r4, r1
 801094e:	6831      	ldr	r1, [r6, #0]
 8010950:	4605      	mov	r5, r0
 8010952:	b911      	cbnz	r1, 801095a <sbrk_aligned+0x12>
 8010954:	f000 fb66 	bl	8011024 <_sbrk_r>
 8010958:	6030      	str	r0, [r6, #0]
 801095a:	4621      	mov	r1, r4
 801095c:	4628      	mov	r0, r5
 801095e:	f000 fb61 	bl	8011024 <_sbrk_r>
 8010962:	1c43      	adds	r3, r0, #1
 8010964:	d103      	bne.n	801096e <sbrk_aligned+0x26>
 8010966:	f04f 34ff 	mov.w	r4, #4294967295
 801096a:	4620      	mov	r0, r4
 801096c:	bd70      	pop	{r4, r5, r6, pc}
 801096e:	1cc4      	adds	r4, r0, #3
 8010970:	f024 0403 	bic.w	r4, r4, #3
 8010974:	42a0      	cmp	r0, r4
 8010976:	d0f8      	beq.n	801096a <sbrk_aligned+0x22>
 8010978:	1a21      	subs	r1, r4, r0
 801097a:	4628      	mov	r0, r5
 801097c:	f000 fb52 	bl	8011024 <_sbrk_r>
 8010980:	3001      	adds	r0, #1
 8010982:	d1f2      	bne.n	801096a <sbrk_aligned+0x22>
 8010984:	e7ef      	b.n	8010966 <sbrk_aligned+0x1e>
 8010986:	bf00      	nop
 8010988:	200114e0 	.word	0x200114e0

0801098c <_malloc_r>:
 801098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010990:	1ccd      	adds	r5, r1, #3
 8010992:	f025 0503 	bic.w	r5, r5, #3
 8010996:	3508      	adds	r5, #8
 8010998:	2d0c      	cmp	r5, #12
 801099a:	bf38      	it	cc
 801099c:	250c      	movcc	r5, #12
 801099e:	2d00      	cmp	r5, #0
 80109a0:	4606      	mov	r6, r0
 80109a2:	db01      	blt.n	80109a8 <_malloc_r+0x1c>
 80109a4:	42a9      	cmp	r1, r5
 80109a6:	d904      	bls.n	80109b2 <_malloc_r+0x26>
 80109a8:	230c      	movs	r3, #12
 80109aa:	6033      	str	r3, [r6, #0]
 80109ac:	2000      	movs	r0, #0
 80109ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a88 <_malloc_r+0xfc>
 80109b6:	f000 f869 	bl	8010a8c <__malloc_lock>
 80109ba:	f8d8 3000 	ldr.w	r3, [r8]
 80109be:	461c      	mov	r4, r3
 80109c0:	bb44      	cbnz	r4, 8010a14 <_malloc_r+0x88>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff ffbf 	bl	8010948 <sbrk_aligned>
 80109ca:	1c43      	adds	r3, r0, #1
 80109cc:	4604      	mov	r4, r0
 80109ce:	d158      	bne.n	8010a82 <_malloc_r+0xf6>
 80109d0:	f8d8 4000 	ldr.w	r4, [r8]
 80109d4:	4627      	mov	r7, r4
 80109d6:	2f00      	cmp	r7, #0
 80109d8:	d143      	bne.n	8010a62 <_malloc_r+0xd6>
 80109da:	2c00      	cmp	r4, #0
 80109dc:	d04b      	beq.n	8010a76 <_malloc_r+0xea>
 80109de:	6823      	ldr	r3, [r4, #0]
 80109e0:	4639      	mov	r1, r7
 80109e2:	4630      	mov	r0, r6
 80109e4:	eb04 0903 	add.w	r9, r4, r3
 80109e8:	f000 fb1c 	bl	8011024 <_sbrk_r>
 80109ec:	4581      	cmp	r9, r0
 80109ee:	d142      	bne.n	8010a76 <_malloc_r+0xea>
 80109f0:	6821      	ldr	r1, [r4, #0]
 80109f2:	1a6d      	subs	r5, r5, r1
 80109f4:	4629      	mov	r1, r5
 80109f6:	4630      	mov	r0, r6
 80109f8:	f7ff ffa6 	bl	8010948 <sbrk_aligned>
 80109fc:	3001      	adds	r0, #1
 80109fe:	d03a      	beq.n	8010a76 <_malloc_r+0xea>
 8010a00:	6823      	ldr	r3, [r4, #0]
 8010a02:	442b      	add	r3, r5
 8010a04:	6023      	str	r3, [r4, #0]
 8010a06:	f8d8 3000 	ldr.w	r3, [r8]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	bb62      	cbnz	r2, 8010a68 <_malloc_r+0xdc>
 8010a0e:	f8c8 7000 	str.w	r7, [r8]
 8010a12:	e00f      	b.n	8010a34 <_malloc_r+0xa8>
 8010a14:	6822      	ldr	r2, [r4, #0]
 8010a16:	1b52      	subs	r2, r2, r5
 8010a18:	d420      	bmi.n	8010a5c <_malloc_r+0xd0>
 8010a1a:	2a0b      	cmp	r2, #11
 8010a1c:	d917      	bls.n	8010a4e <_malloc_r+0xc2>
 8010a1e:	1961      	adds	r1, r4, r5
 8010a20:	42a3      	cmp	r3, r4
 8010a22:	6025      	str	r5, [r4, #0]
 8010a24:	bf18      	it	ne
 8010a26:	6059      	strne	r1, [r3, #4]
 8010a28:	6863      	ldr	r3, [r4, #4]
 8010a2a:	bf08      	it	eq
 8010a2c:	f8c8 1000 	streq.w	r1, [r8]
 8010a30:	5162      	str	r2, [r4, r5]
 8010a32:	604b      	str	r3, [r1, #4]
 8010a34:	4630      	mov	r0, r6
 8010a36:	f000 f82f 	bl	8010a98 <__malloc_unlock>
 8010a3a:	f104 000b 	add.w	r0, r4, #11
 8010a3e:	1d23      	adds	r3, r4, #4
 8010a40:	f020 0007 	bic.w	r0, r0, #7
 8010a44:	1ac2      	subs	r2, r0, r3
 8010a46:	bf1c      	itt	ne
 8010a48:	1a1b      	subne	r3, r3, r0
 8010a4a:	50a3      	strne	r3, [r4, r2]
 8010a4c:	e7af      	b.n	80109ae <_malloc_r+0x22>
 8010a4e:	6862      	ldr	r2, [r4, #4]
 8010a50:	42a3      	cmp	r3, r4
 8010a52:	bf0c      	ite	eq
 8010a54:	f8c8 2000 	streq.w	r2, [r8]
 8010a58:	605a      	strne	r2, [r3, #4]
 8010a5a:	e7eb      	b.n	8010a34 <_malloc_r+0xa8>
 8010a5c:	4623      	mov	r3, r4
 8010a5e:	6864      	ldr	r4, [r4, #4]
 8010a60:	e7ae      	b.n	80109c0 <_malloc_r+0x34>
 8010a62:	463c      	mov	r4, r7
 8010a64:	687f      	ldr	r7, [r7, #4]
 8010a66:	e7b6      	b.n	80109d6 <_malloc_r+0x4a>
 8010a68:	461a      	mov	r2, r3
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	d1fb      	bne.n	8010a68 <_malloc_r+0xdc>
 8010a70:	2300      	movs	r3, #0
 8010a72:	6053      	str	r3, [r2, #4]
 8010a74:	e7de      	b.n	8010a34 <_malloc_r+0xa8>
 8010a76:	230c      	movs	r3, #12
 8010a78:	6033      	str	r3, [r6, #0]
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	f000 f80c 	bl	8010a98 <__malloc_unlock>
 8010a80:	e794      	b.n	80109ac <_malloc_r+0x20>
 8010a82:	6005      	str	r5, [r0, #0]
 8010a84:	e7d6      	b.n	8010a34 <_malloc_r+0xa8>
 8010a86:	bf00      	nop
 8010a88:	200114e4 	.word	0x200114e4

08010a8c <__malloc_lock>:
 8010a8c:	4801      	ldr	r0, [pc, #4]	@ (8010a94 <__malloc_lock+0x8>)
 8010a8e:	f000 bb16 	b.w	80110be <__retarget_lock_acquire_recursive>
 8010a92:	bf00      	nop
 8010a94:	20011628 	.word	0x20011628

08010a98 <__malloc_unlock>:
 8010a98:	4801      	ldr	r0, [pc, #4]	@ (8010aa0 <__malloc_unlock+0x8>)
 8010a9a:	f000 bb11 	b.w	80110c0 <__retarget_lock_release_recursive>
 8010a9e:	bf00      	nop
 8010aa0:	20011628 	.word	0x20011628

08010aa4 <_strtol_l.isra.0>:
 8010aa4:	2b24      	cmp	r3, #36	@ 0x24
 8010aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010aaa:	4686      	mov	lr, r0
 8010aac:	4690      	mov	r8, r2
 8010aae:	d801      	bhi.n	8010ab4 <_strtol_l.isra.0+0x10>
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d106      	bne.n	8010ac2 <_strtol_l.isra.0+0x1e>
 8010ab4:	f000 fad8 	bl	8011068 <__errno>
 8010ab8:	2316      	movs	r3, #22
 8010aba:	6003      	str	r3, [r0, #0]
 8010abc:	2000      	movs	r0, #0
 8010abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac2:	4834      	ldr	r0, [pc, #208]	@ (8010b94 <_strtol_l.isra.0+0xf0>)
 8010ac4:	460d      	mov	r5, r1
 8010ac6:	462a      	mov	r2, r5
 8010ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010acc:	5d06      	ldrb	r6, [r0, r4]
 8010ace:	f016 0608 	ands.w	r6, r6, #8
 8010ad2:	d1f8      	bne.n	8010ac6 <_strtol_l.isra.0+0x22>
 8010ad4:	2c2d      	cmp	r4, #45	@ 0x2d
 8010ad6:	d110      	bne.n	8010afa <_strtol_l.isra.0+0x56>
 8010ad8:	782c      	ldrb	r4, [r5, #0]
 8010ada:	2601      	movs	r6, #1
 8010adc:	1c95      	adds	r5, r2, #2
 8010ade:	f033 0210 	bics.w	r2, r3, #16
 8010ae2:	d115      	bne.n	8010b10 <_strtol_l.isra.0+0x6c>
 8010ae4:	2c30      	cmp	r4, #48	@ 0x30
 8010ae6:	d10d      	bne.n	8010b04 <_strtol_l.isra.0+0x60>
 8010ae8:	782a      	ldrb	r2, [r5, #0]
 8010aea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010aee:	2a58      	cmp	r2, #88	@ 0x58
 8010af0:	d108      	bne.n	8010b04 <_strtol_l.isra.0+0x60>
 8010af2:	786c      	ldrb	r4, [r5, #1]
 8010af4:	3502      	adds	r5, #2
 8010af6:	2310      	movs	r3, #16
 8010af8:	e00a      	b.n	8010b10 <_strtol_l.isra.0+0x6c>
 8010afa:	2c2b      	cmp	r4, #43	@ 0x2b
 8010afc:	bf04      	itt	eq
 8010afe:	782c      	ldrbeq	r4, [r5, #0]
 8010b00:	1c95      	addeq	r5, r2, #2
 8010b02:	e7ec      	b.n	8010ade <_strtol_l.isra.0+0x3a>
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1f6      	bne.n	8010af6 <_strtol_l.isra.0+0x52>
 8010b08:	2c30      	cmp	r4, #48	@ 0x30
 8010b0a:	bf14      	ite	ne
 8010b0c:	230a      	movne	r3, #10
 8010b0e:	2308      	moveq	r3, #8
 8010b10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b18:	2200      	movs	r2, #0
 8010b1a:	fbbc f9f3 	udiv	r9, ip, r3
 8010b1e:	4610      	mov	r0, r2
 8010b20:	fb03 ca19 	mls	sl, r3, r9, ip
 8010b24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010b28:	2f09      	cmp	r7, #9
 8010b2a:	d80f      	bhi.n	8010b4c <_strtol_l.isra.0+0xa8>
 8010b2c:	463c      	mov	r4, r7
 8010b2e:	42a3      	cmp	r3, r4
 8010b30:	dd1b      	ble.n	8010b6a <_strtol_l.isra.0+0xc6>
 8010b32:	1c57      	adds	r7, r2, #1
 8010b34:	d007      	beq.n	8010b46 <_strtol_l.isra.0+0xa2>
 8010b36:	4581      	cmp	r9, r0
 8010b38:	d314      	bcc.n	8010b64 <_strtol_l.isra.0+0xc0>
 8010b3a:	d101      	bne.n	8010b40 <_strtol_l.isra.0+0x9c>
 8010b3c:	45a2      	cmp	sl, r4
 8010b3e:	db11      	blt.n	8010b64 <_strtol_l.isra.0+0xc0>
 8010b40:	fb00 4003 	mla	r0, r0, r3, r4
 8010b44:	2201      	movs	r2, #1
 8010b46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b4a:	e7eb      	b.n	8010b24 <_strtol_l.isra.0+0x80>
 8010b4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010b50:	2f19      	cmp	r7, #25
 8010b52:	d801      	bhi.n	8010b58 <_strtol_l.isra.0+0xb4>
 8010b54:	3c37      	subs	r4, #55	@ 0x37
 8010b56:	e7ea      	b.n	8010b2e <_strtol_l.isra.0+0x8a>
 8010b58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010b5c:	2f19      	cmp	r7, #25
 8010b5e:	d804      	bhi.n	8010b6a <_strtol_l.isra.0+0xc6>
 8010b60:	3c57      	subs	r4, #87	@ 0x57
 8010b62:	e7e4      	b.n	8010b2e <_strtol_l.isra.0+0x8a>
 8010b64:	f04f 32ff 	mov.w	r2, #4294967295
 8010b68:	e7ed      	b.n	8010b46 <_strtol_l.isra.0+0xa2>
 8010b6a:	1c53      	adds	r3, r2, #1
 8010b6c:	d108      	bne.n	8010b80 <_strtol_l.isra.0+0xdc>
 8010b6e:	2322      	movs	r3, #34	@ 0x22
 8010b70:	f8ce 3000 	str.w	r3, [lr]
 8010b74:	4660      	mov	r0, ip
 8010b76:	f1b8 0f00 	cmp.w	r8, #0
 8010b7a:	d0a0      	beq.n	8010abe <_strtol_l.isra.0+0x1a>
 8010b7c:	1e69      	subs	r1, r5, #1
 8010b7e:	e006      	b.n	8010b8e <_strtol_l.isra.0+0xea>
 8010b80:	b106      	cbz	r6, 8010b84 <_strtol_l.isra.0+0xe0>
 8010b82:	4240      	negs	r0, r0
 8010b84:	f1b8 0f00 	cmp.w	r8, #0
 8010b88:	d099      	beq.n	8010abe <_strtol_l.isra.0+0x1a>
 8010b8a:	2a00      	cmp	r2, #0
 8010b8c:	d1f6      	bne.n	8010b7c <_strtol_l.isra.0+0xd8>
 8010b8e:	f8c8 1000 	str.w	r1, [r8]
 8010b92:	e794      	b.n	8010abe <_strtol_l.isra.0+0x1a>
 8010b94:	08012959 	.word	0x08012959

08010b98 <strtol>:
 8010b98:	4613      	mov	r3, r2
 8010b9a:	460a      	mov	r2, r1
 8010b9c:	4601      	mov	r1, r0
 8010b9e:	4802      	ldr	r0, [pc, #8]	@ (8010ba8 <strtol+0x10>)
 8010ba0:	6800      	ldr	r0, [r0, #0]
 8010ba2:	f7ff bf7f 	b.w	8010aa4 <_strtol_l.isra.0>
 8010ba6:	bf00      	nop
 8010ba8:	20000268 	.word	0x20000268

08010bac <std>:
 8010bac:	2300      	movs	r3, #0
 8010bae:	b510      	push	{r4, lr}
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8010bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010bba:	6083      	str	r3, [r0, #8]
 8010bbc:	8181      	strh	r1, [r0, #12]
 8010bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010bc0:	81c2      	strh	r2, [r0, #14]
 8010bc2:	6183      	str	r3, [r0, #24]
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	2208      	movs	r2, #8
 8010bc8:	305c      	adds	r0, #92	@ 0x5c
 8010bca:	f000 f916 	bl	8010dfa <memset>
 8010bce:	4b0d      	ldr	r3, [pc, #52]	@ (8010c04 <std+0x58>)
 8010bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8010bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8010c08 <std+0x5c>)
 8010bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8010c0c <std+0x60>)
 8010bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010bda:	4b0d      	ldr	r3, [pc, #52]	@ (8010c10 <std+0x64>)
 8010bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8010bde:	4b0d      	ldr	r3, [pc, #52]	@ (8010c14 <std+0x68>)
 8010be0:	6224      	str	r4, [r4, #32]
 8010be2:	429c      	cmp	r4, r3
 8010be4:	d006      	beq.n	8010bf4 <std+0x48>
 8010be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010bea:	4294      	cmp	r4, r2
 8010bec:	d002      	beq.n	8010bf4 <std+0x48>
 8010bee:	33d0      	adds	r3, #208	@ 0xd0
 8010bf0:	429c      	cmp	r4, r3
 8010bf2:	d105      	bne.n	8010c00 <std+0x54>
 8010bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bfc:	f000 ba5e 	b.w	80110bc <__retarget_lock_init_recursive>
 8010c00:	bd10      	pop	{r4, pc}
 8010c02:	bf00      	nop
 8010c04:	08010d75 	.word	0x08010d75
 8010c08:	08010d97 	.word	0x08010d97
 8010c0c:	08010dcf 	.word	0x08010dcf
 8010c10:	08010df3 	.word	0x08010df3
 8010c14:	200114e8 	.word	0x200114e8

08010c18 <stdio_exit_handler>:
 8010c18:	4a02      	ldr	r2, [pc, #8]	@ (8010c24 <stdio_exit_handler+0xc>)
 8010c1a:	4903      	ldr	r1, [pc, #12]	@ (8010c28 <stdio_exit_handler+0x10>)
 8010c1c:	4803      	ldr	r0, [pc, #12]	@ (8010c2c <stdio_exit_handler+0x14>)
 8010c1e:	f000 b869 	b.w	8010cf4 <_fwalk_sglue>
 8010c22:	bf00      	nop
 8010c24:	2000025c 	.word	0x2000025c
 8010c28:	08011891 	.word	0x08011891
 8010c2c:	2000026c 	.word	0x2000026c

08010c30 <cleanup_stdio>:
 8010c30:	6841      	ldr	r1, [r0, #4]
 8010c32:	4b0c      	ldr	r3, [pc, #48]	@ (8010c64 <cleanup_stdio+0x34>)
 8010c34:	4299      	cmp	r1, r3
 8010c36:	b510      	push	{r4, lr}
 8010c38:	4604      	mov	r4, r0
 8010c3a:	d001      	beq.n	8010c40 <cleanup_stdio+0x10>
 8010c3c:	f000 fe28 	bl	8011890 <_fflush_r>
 8010c40:	68a1      	ldr	r1, [r4, #8]
 8010c42:	4b09      	ldr	r3, [pc, #36]	@ (8010c68 <cleanup_stdio+0x38>)
 8010c44:	4299      	cmp	r1, r3
 8010c46:	d002      	beq.n	8010c4e <cleanup_stdio+0x1e>
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f000 fe21 	bl	8011890 <_fflush_r>
 8010c4e:	68e1      	ldr	r1, [r4, #12]
 8010c50:	4b06      	ldr	r3, [pc, #24]	@ (8010c6c <cleanup_stdio+0x3c>)
 8010c52:	4299      	cmp	r1, r3
 8010c54:	d004      	beq.n	8010c60 <cleanup_stdio+0x30>
 8010c56:	4620      	mov	r0, r4
 8010c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c5c:	f000 be18 	b.w	8011890 <_fflush_r>
 8010c60:	bd10      	pop	{r4, pc}
 8010c62:	bf00      	nop
 8010c64:	200114e8 	.word	0x200114e8
 8010c68:	20011550 	.word	0x20011550
 8010c6c:	200115b8 	.word	0x200115b8

08010c70 <global_stdio_init.part.0>:
 8010c70:	b510      	push	{r4, lr}
 8010c72:	4b0b      	ldr	r3, [pc, #44]	@ (8010ca0 <global_stdio_init.part.0+0x30>)
 8010c74:	4c0b      	ldr	r4, [pc, #44]	@ (8010ca4 <global_stdio_init.part.0+0x34>)
 8010c76:	4a0c      	ldr	r2, [pc, #48]	@ (8010ca8 <global_stdio_init.part.0+0x38>)
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	4620      	mov	r0, r4
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	2104      	movs	r1, #4
 8010c80:	f7ff ff94 	bl	8010bac <std>
 8010c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c88:	2201      	movs	r2, #1
 8010c8a:	2109      	movs	r1, #9
 8010c8c:	f7ff ff8e 	bl	8010bac <std>
 8010c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c94:	2202      	movs	r2, #2
 8010c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c9a:	2112      	movs	r1, #18
 8010c9c:	f7ff bf86 	b.w	8010bac <std>
 8010ca0:	20011620 	.word	0x20011620
 8010ca4:	200114e8 	.word	0x200114e8
 8010ca8:	08010c19 	.word	0x08010c19

08010cac <__sfp_lock_acquire>:
 8010cac:	4801      	ldr	r0, [pc, #4]	@ (8010cb4 <__sfp_lock_acquire+0x8>)
 8010cae:	f000 ba06 	b.w	80110be <__retarget_lock_acquire_recursive>
 8010cb2:	bf00      	nop
 8010cb4:	20011629 	.word	0x20011629

08010cb8 <__sfp_lock_release>:
 8010cb8:	4801      	ldr	r0, [pc, #4]	@ (8010cc0 <__sfp_lock_release+0x8>)
 8010cba:	f000 ba01 	b.w	80110c0 <__retarget_lock_release_recursive>
 8010cbe:	bf00      	nop
 8010cc0:	20011629 	.word	0x20011629

08010cc4 <__sinit>:
 8010cc4:	b510      	push	{r4, lr}
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	f7ff fff0 	bl	8010cac <__sfp_lock_acquire>
 8010ccc:	6a23      	ldr	r3, [r4, #32]
 8010cce:	b11b      	cbz	r3, 8010cd8 <__sinit+0x14>
 8010cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cd4:	f7ff bff0 	b.w	8010cb8 <__sfp_lock_release>
 8010cd8:	4b04      	ldr	r3, [pc, #16]	@ (8010cec <__sinit+0x28>)
 8010cda:	6223      	str	r3, [r4, #32]
 8010cdc:	4b04      	ldr	r3, [pc, #16]	@ (8010cf0 <__sinit+0x2c>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1f5      	bne.n	8010cd0 <__sinit+0xc>
 8010ce4:	f7ff ffc4 	bl	8010c70 <global_stdio_init.part.0>
 8010ce8:	e7f2      	b.n	8010cd0 <__sinit+0xc>
 8010cea:	bf00      	nop
 8010cec:	08010c31 	.word	0x08010c31
 8010cf0:	20011620 	.word	0x20011620

08010cf4 <_fwalk_sglue>:
 8010cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cf8:	4607      	mov	r7, r0
 8010cfa:	4688      	mov	r8, r1
 8010cfc:	4614      	mov	r4, r2
 8010cfe:	2600      	movs	r6, #0
 8010d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d04:	f1b9 0901 	subs.w	r9, r9, #1
 8010d08:	d505      	bpl.n	8010d16 <_fwalk_sglue+0x22>
 8010d0a:	6824      	ldr	r4, [r4, #0]
 8010d0c:	2c00      	cmp	r4, #0
 8010d0e:	d1f7      	bne.n	8010d00 <_fwalk_sglue+0xc>
 8010d10:	4630      	mov	r0, r6
 8010d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d16:	89ab      	ldrh	r3, [r5, #12]
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d907      	bls.n	8010d2c <_fwalk_sglue+0x38>
 8010d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d20:	3301      	adds	r3, #1
 8010d22:	d003      	beq.n	8010d2c <_fwalk_sglue+0x38>
 8010d24:	4629      	mov	r1, r5
 8010d26:	4638      	mov	r0, r7
 8010d28:	47c0      	blx	r8
 8010d2a:	4306      	orrs	r6, r0
 8010d2c:	3568      	adds	r5, #104	@ 0x68
 8010d2e:	e7e9      	b.n	8010d04 <_fwalk_sglue+0x10>

08010d30 <siprintf>:
 8010d30:	b40e      	push	{r1, r2, r3}
 8010d32:	b510      	push	{r4, lr}
 8010d34:	b09d      	sub	sp, #116	@ 0x74
 8010d36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010d38:	9002      	str	r0, [sp, #8]
 8010d3a:	9006      	str	r0, [sp, #24]
 8010d3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010d40:	480a      	ldr	r0, [pc, #40]	@ (8010d6c <siprintf+0x3c>)
 8010d42:	9107      	str	r1, [sp, #28]
 8010d44:	9104      	str	r1, [sp, #16]
 8010d46:	490a      	ldr	r1, [pc, #40]	@ (8010d70 <siprintf+0x40>)
 8010d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d4c:	9105      	str	r1, [sp, #20]
 8010d4e:	2400      	movs	r4, #0
 8010d50:	a902      	add	r1, sp, #8
 8010d52:	6800      	ldr	r0, [r0, #0]
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010d58:	f000 fa8e 	bl	8011278 <_svfiprintf_r>
 8010d5c:	9b02      	ldr	r3, [sp, #8]
 8010d5e:	701c      	strb	r4, [r3, #0]
 8010d60:	b01d      	add	sp, #116	@ 0x74
 8010d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d66:	b003      	add	sp, #12
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	20000268 	.word	0x20000268
 8010d70:	ffff0208 	.word	0xffff0208

08010d74 <__sread>:
 8010d74:	b510      	push	{r4, lr}
 8010d76:	460c      	mov	r4, r1
 8010d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d7c:	f000 f940 	bl	8011000 <_read_r>
 8010d80:	2800      	cmp	r0, #0
 8010d82:	bfab      	itete	ge
 8010d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010d86:	89a3      	ldrhlt	r3, [r4, #12]
 8010d88:	181b      	addge	r3, r3, r0
 8010d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010d8e:	bfac      	ite	ge
 8010d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010d92:	81a3      	strhlt	r3, [r4, #12]
 8010d94:	bd10      	pop	{r4, pc}

08010d96 <__swrite>:
 8010d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9a:	461f      	mov	r7, r3
 8010d9c:	898b      	ldrh	r3, [r1, #12]
 8010d9e:	05db      	lsls	r3, r3, #23
 8010da0:	4605      	mov	r5, r0
 8010da2:	460c      	mov	r4, r1
 8010da4:	4616      	mov	r6, r2
 8010da6:	d505      	bpl.n	8010db4 <__swrite+0x1e>
 8010da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dac:	2302      	movs	r3, #2
 8010dae:	2200      	movs	r2, #0
 8010db0:	f000 f914 	bl	8010fdc <_lseek_r>
 8010db4:	89a3      	ldrh	r3, [r4, #12]
 8010db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010dbe:	81a3      	strh	r3, [r4, #12]
 8010dc0:	4632      	mov	r2, r6
 8010dc2:	463b      	mov	r3, r7
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dca:	f000 b93b 	b.w	8011044 <_write_r>

08010dce <__sseek>:
 8010dce:	b510      	push	{r4, lr}
 8010dd0:	460c      	mov	r4, r1
 8010dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd6:	f000 f901 	bl	8010fdc <_lseek_r>
 8010dda:	1c43      	adds	r3, r0, #1
 8010ddc:	89a3      	ldrh	r3, [r4, #12]
 8010dde:	bf15      	itete	ne
 8010de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010dea:	81a3      	strheq	r3, [r4, #12]
 8010dec:	bf18      	it	ne
 8010dee:	81a3      	strhne	r3, [r4, #12]
 8010df0:	bd10      	pop	{r4, pc}

08010df2 <__sclose>:
 8010df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df6:	f000 b883 	b.w	8010f00 <_close_r>

08010dfa <memset>:
 8010dfa:	4402      	add	r2, r0
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d100      	bne.n	8010e04 <memset+0xa>
 8010e02:	4770      	bx	lr
 8010e04:	f803 1b01 	strb.w	r1, [r3], #1
 8010e08:	e7f9      	b.n	8010dfe <memset+0x4>

08010e0a <strchr>:
 8010e0a:	b2c9      	uxtb	r1, r1
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e14:	b112      	cbz	r2, 8010e1c <strchr+0x12>
 8010e16:	428a      	cmp	r2, r1
 8010e18:	d1f9      	bne.n	8010e0e <strchr+0x4>
 8010e1a:	4770      	bx	lr
 8010e1c:	2900      	cmp	r1, #0
 8010e1e:	bf18      	it	ne
 8010e20:	2000      	movne	r0, #0
 8010e22:	4770      	bx	lr

08010e24 <strncmp>:
 8010e24:	b510      	push	{r4, lr}
 8010e26:	b16a      	cbz	r2, 8010e44 <strncmp+0x20>
 8010e28:	3901      	subs	r1, #1
 8010e2a:	1884      	adds	r4, r0, r2
 8010e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e30:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d103      	bne.n	8010e40 <strncmp+0x1c>
 8010e38:	42a0      	cmp	r0, r4
 8010e3a:	d001      	beq.n	8010e40 <strncmp+0x1c>
 8010e3c:	2a00      	cmp	r2, #0
 8010e3e:	d1f5      	bne.n	8010e2c <strncmp+0x8>
 8010e40:	1ad0      	subs	r0, r2, r3
 8010e42:	bd10      	pop	{r4, pc}
 8010e44:	4610      	mov	r0, r2
 8010e46:	e7fc      	b.n	8010e42 <strncmp+0x1e>

08010e48 <strtok>:
 8010e48:	4b16      	ldr	r3, [pc, #88]	@ (8010ea4 <strtok+0x5c>)
 8010e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4e:	681f      	ldr	r7, [r3, #0]
 8010e50:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8010e52:	4605      	mov	r5, r0
 8010e54:	460e      	mov	r6, r1
 8010e56:	b9ec      	cbnz	r4, 8010e94 <strtok+0x4c>
 8010e58:	2050      	movs	r0, #80	@ 0x50
 8010e5a:	f7ff fd65 	bl	8010928 <malloc>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	6478      	str	r0, [r7, #68]	@ 0x44
 8010e62:	b920      	cbnz	r0, 8010e6e <strtok+0x26>
 8010e64:	4b10      	ldr	r3, [pc, #64]	@ (8010ea8 <strtok+0x60>)
 8010e66:	4811      	ldr	r0, [pc, #68]	@ (8010eac <strtok+0x64>)
 8010e68:	215b      	movs	r1, #91	@ 0x5b
 8010e6a:	f000 f941 	bl	80110f0 <__assert_func>
 8010e6e:	e9c0 4400 	strd	r4, r4, [r0]
 8010e72:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010e76:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010e7a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010e7e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8010e82:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8010e86:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010e8a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010e8e:	6184      	str	r4, [r0, #24]
 8010e90:	7704      	strb	r4, [r0, #28]
 8010e92:	6244      	str	r4, [r0, #36]	@ 0x24
 8010e94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e96:	4631      	mov	r1, r6
 8010e98:	4628      	mov	r0, r5
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea0:	f000 b806 	b.w	8010eb0 <__strtok_r>
 8010ea4:	20000268 	.word	0x20000268
 8010ea8:	08012a59 	.word	0x08012a59
 8010eac:	08012a70 	.word	0x08012a70

08010eb0 <__strtok_r>:
 8010eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	b908      	cbnz	r0, 8010eba <__strtok_r+0xa>
 8010eb6:	6814      	ldr	r4, [r2, #0]
 8010eb8:	b144      	cbz	r4, 8010ecc <__strtok_r+0x1c>
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010ec0:	460f      	mov	r7, r1
 8010ec2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010ec6:	b91e      	cbnz	r6, 8010ed0 <__strtok_r+0x20>
 8010ec8:	b965      	cbnz	r5, 8010ee4 <__strtok_r+0x34>
 8010eca:	6015      	str	r5, [r2, #0]
 8010ecc:	2000      	movs	r0, #0
 8010ece:	e005      	b.n	8010edc <__strtok_r+0x2c>
 8010ed0:	42b5      	cmp	r5, r6
 8010ed2:	d1f6      	bne.n	8010ec2 <__strtok_r+0x12>
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d1f0      	bne.n	8010eba <__strtok_r+0xa>
 8010ed8:	6014      	str	r4, [r2, #0]
 8010eda:	7003      	strb	r3, [r0, #0]
 8010edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ede:	461c      	mov	r4, r3
 8010ee0:	e00c      	b.n	8010efc <__strtok_r+0x4c>
 8010ee2:	b91d      	cbnz	r5, 8010eec <__strtok_r+0x3c>
 8010ee4:	4627      	mov	r7, r4
 8010ee6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010eea:	460e      	mov	r6, r1
 8010eec:	f816 5b01 	ldrb.w	r5, [r6], #1
 8010ef0:	42ab      	cmp	r3, r5
 8010ef2:	d1f6      	bne.n	8010ee2 <__strtok_r+0x32>
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d0f2      	beq.n	8010ede <__strtok_r+0x2e>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	703b      	strb	r3, [r7, #0]
 8010efc:	6014      	str	r4, [r2, #0]
 8010efe:	e7ed      	b.n	8010edc <__strtok_r+0x2c>

08010f00 <_close_r>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	4d06      	ldr	r5, [pc, #24]	@ (8010f1c <_close_r+0x1c>)
 8010f04:	2300      	movs	r3, #0
 8010f06:	4604      	mov	r4, r0
 8010f08:	4608      	mov	r0, r1
 8010f0a:	602b      	str	r3, [r5, #0]
 8010f0c:	f7f1 fe60 	bl	8002bd0 <_close>
 8010f10:	1c43      	adds	r3, r0, #1
 8010f12:	d102      	bne.n	8010f1a <_close_r+0x1a>
 8010f14:	682b      	ldr	r3, [r5, #0]
 8010f16:	b103      	cbz	r3, 8010f1a <_close_r+0x1a>
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	20011624 	.word	0x20011624

08010f20 <_reclaim_reent>:
 8010f20:	4b2d      	ldr	r3, [pc, #180]	@ (8010fd8 <_reclaim_reent+0xb8>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	4283      	cmp	r3, r0
 8010f26:	b570      	push	{r4, r5, r6, lr}
 8010f28:	4604      	mov	r4, r0
 8010f2a:	d053      	beq.n	8010fd4 <_reclaim_reent+0xb4>
 8010f2c:	69c3      	ldr	r3, [r0, #28]
 8010f2e:	b31b      	cbz	r3, 8010f78 <_reclaim_reent+0x58>
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	b163      	cbz	r3, 8010f4e <_reclaim_reent+0x2e>
 8010f34:	2500      	movs	r5, #0
 8010f36:	69e3      	ldr	r3, [r4, #28]
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	5959      	ldr	r1, [r3, r5]
 8010f3c:	b9b1      	cbnz	r1, 8010f6c <_reclaim_reent+0x4c>
 8010f3e:	3504      	adds	r5, #4
 8010f40:	2d80      	cmp	r5, #128	@ 0x80
 8010f42:	d1f8      	bne.n	8010f36 <_reclaim_reent+0x16>
 8010f44:	69e3      	ldr	r3, [r4, #28]
 8010f46:	4620      	mov	r0, r4
 8010f48:	68d9      	ldr	r1, [r3, #12]
 8010f4a:	f000 f8ef 	bl	801112c <_free_r>
 8010f4e:	69e3      	ldr	r3, [r4, #28]
 8010f50:	6819      	ldr	r1, [r3, #0]
 8010f52:	b111      	cbz	r1, 8010f5a <_reclaim_reent+0x3a>
 8010f54:	4620      	mov	r0, r4
 8010f56:	f000 f8e9 	bl	801112c <_free_r>
 8010f5a:	69e3      	ldr	r3, [r4, #28]
 8010f5c:	689d      	ldr	r5, [r3, #8]
 8010f5e:	b15d      	cbz	r5, 8010f78 <_reclaim_reent+0x58>
 8010f60:	4629      	mov	r1, r5
 8010f62:	4620      	mov	r0, r4
 8010f64:	682d      	ldr	r5, [r5, #0]
 8010f66:	f000 f8e1 	bl	801112c <_free_r>
 8010f6a:	e7f8      	b.n	8010f5e <_reclaim_reent+0x3e>
 8010f6c:	680e      	ldr	r6, [r1, #0]
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f000 f8dc 	bl	801112c <_free_r>
 8010f74:	4631      	mov	r1, r6
 8010f76:	e7e1      	b.n	8010f3c <_reclaim_reent+0x1c>
 8010f78:	6961      	ldr	r1, [r4, #20]
 8010f7a:	b111      	cbz	r1, 8010f82 <_reclaim_reent+0x62>
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 f8d5 	bl	801112c <_free_r>
 8010f82:	69e1      	ldr	r1, [r4, #28]
 8010f84:	b111      	cbz	r1, 8010f8c <_reclaim_reent+0x6c>
 8010f86:	4620      	mov	r0, r4
 8010f88:	f000 f8d0 	bl	801112c <_free_r>
 8010f8c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010f8e:	b111      	cbz	r1, 8010f96 <_reclaim_reent+0x76>
 8010f90:	4620      	mov	r0, r4
 8010f92:	f000 f8cb 	bl	801112c <_free_r>
 8010f96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f98:	b111      	cbz	r1, 8010fa0 <_reclaim_reent+0x80>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f000 f8c6 	bl	801112c <_free_r>
 8010fa0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8010fa2:	b111      	cbz	r1, 8010faa <_reclaim_reent+0x8a>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f000 f8c1 	bl	801112c <_free_r>
 8010faa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010fac:	b111      	cbz	r1, 8010fb4 <_reclaim_reent+0x94>
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 f8bc 	bl	801112c <_free_r>
 8010fb4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8010fb6:	b111      	cbz	r1, 8010fbe <_reclaim_reent+0x9e>
 8010fb8:	4620      	mov	r0, r4
 8010fba:	f000 f8b7 	bl	801112c <_free_r>
 8010fbe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010fc0:	b111      	cbz	r1, 8010fc8 <_reclaim_reent+0xa8>
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 f8b2 	bl	801112c <_free_r>
 8010fc8:	6a23      	ldr	r3, [r4, #32]
 8010fca:	b11b      	cbz	r3, 8010fd4 <_reclaim_reent+0xb4>
 8010fcc:	4620      	mov	r0, r4
 8010fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fd2:	4718      	bx	r3
 8010fd4:	bd70      	pop	{r4, r5, r6, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20000268 	.word	0x20000268

08010fdc <_lseek_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	4d07      	ldr	r5, [pc, #28]	@ (8010ffc <_lseek_r+0x20>)
 8010fe0:	4604      	mov	r4, r0
 8010fe2:	4608      	mov	r0, r1
 8010fe4:	4611      	mov	r1, r2
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	602a      	str	r2, [r5, #0]
 8010fea:	461a      	mov	r2, r3
 8010fec:	f7f1 fe17 	bl	8002c1e <_lseek>
 8010ff0:	1c43      	adds	r3, r0, #1
 8010ff2:	d102      	bne.n	8010ffa <_lseek_r+0x1e>
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	b103      	cbz	r3, 8010ffa <_lseek_r+0x1e>
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	bd38      	pop	{r3, r4, r5, pc}
 8010ffc:	20011624 	.word	0x20011624

08011000 <_read_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d07      	ldr	r5, [pc, #28]	@ (8011020 <_read_r+0x20>)
 8011004:	4604      	mov	r4, r0
 8011006:	4608      	mov	r0, r1
 8011008:	4611      	mov	r1, r2
 801100a:	2200      	movs	r2, #0
 801100c:	602a      	str	r2, [r5, #0]
 801100e:	461a      	mov	r2, r3
 8011010:	f7f1 fda5 	bl	8002b5e <_read>
 8011014:	1c43      	adds	r3, r0, #1
 8011016:	d102      	bne.n	801101e <_read_r+0x1e>
 8011018:	682b      	ldr	r3, [r5, #0]
 801101a:	b103      	cbz	r3, 801101e <_read_r+0x1e>
 801101c:	6023      	str	r3, [r4, #0]
 801101e:	bd38      	pop	{r3, r4, r5, pc}
 8011020:	20011624 	.word	0x20011624

08011024 <_sbrk_r>:
 8011024:	b538      	push	{r3, r4, r5, lr}
 8011026:	4d06      	ldr	r5, [pc, #24]	@ (8011040 <_sbrk_r+0x1c>)
 8011028:	2300      	movs	r3, #0
 801102a:	4604      	mov	r4, r0
 801102c:	4608      	mov	r0, r1
 801102e:	602b      	str	r3, [r5, #0]
 8011030:	f7f1 fe02 	bl	8002c38 <_sbrk>
 8011034:	1c43      	adds	r3, r0, #1
 8011036:	d102      	bne.n	801103e <_sbrk_r+0x1a>
 8011038:	682b      	ldr	r3, [r5, #0]
 801103a:	b103      	cbz	r3, 801103e <_sbrk_r+0x1a>
 801103c:	6023      	str	r3, [r4, #0]
 801103e:	bd38      	pop	{r3, r4, r5, pc}
 8011040:	20011624 	.word	0x20011624

08011044 <_write_r>:
 8011044:	b538      	push	{r3, r4, r5, lr}
 8011046:	4d07      	ldr	r5, [pc, #28]	@ (8011064 <_write_r+0x20>)
 8011048:	4604      	mov	r4, r0
 801104a:	4608      	mov	r0, r1
 801104c:	4611      	mov	r1, r2
 801104e:	2200      	movs	r2, #0
 8011050:	602a      	str	r2, [r5, #0]
 8011052:	461a      	mov	r2, r3
 8011054:	f7f1 fda0 	bl	8002b98 <_write>
 8011058:	1c43      	adds	r3, r0, #1
 801105a:	d102      	bne.n	8011062 <_write_r+0x1e>
 801105c:	682b      	ldr	r3, [r5, #0]
 801105e:	b103      	cbz	r3, 8011062 <_write_r+0x1e>
 8011060:	6023      	str	r3, [r4, #0]
 8011062:	bd38      	pop	{r3, r4, r5, pc}
 8011064:	20011624 	.word	0x20011624

08011068 <__errno>:
 8011068:	4b01      	ldr	r3, [pc, #4]	@ (8011070 <__errno+0x8>)
 801106a:	6818      	ldr	r0, [r3, #0]
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	20000268 	.word	0x20000268

08011074 <__libc_init_array>:
 8011074:	b570      	push	{r4, r5, r6, lr}
 8011076:	4d0d      	ldr	r5, [pc, #52]	@ (80110ac <__libc_init_array+0x38>)
 8011078:	4c0d      	ldr	r4, [pc, #52]	@ (80110b0 <__libc_init_array+0x3c>)
 801107a:	1b64      	subs	r4, r4, r5
 801107c:	10a4      	asrs	r4, r4, #2
 801107e:	2600      	movs	r6, #0
 8011080:	42a6      	cmp	r6, r4
 8011082:	d109      	bne.n	8011098 <__libc_init_array+0x24>
 8011084:	4d0b      	ldr	r5, [pc, #44]	@ (80110b4 <__libc_init_array+0x40>)
 8011086:	4c0c      	ldr	r4, [pc, #48]	@ (80110b8 <__libc_init_array+0x44>)
 8011088:	f000 ff30 	bl	8011eec <_init>
 801108c:	1b64      	subs	r4, r4, r5
 801108e:	10a4      	asrs	r4, r4, #2
 8011090:	2600      	movs	r6, #0
 8011092:	42a6      	cmp	r6, r4
 8011094:	d105      	bne.n	80110a2 <__libc_init_array+0x2e>
 8011096:	bd70      	pop	{r4, r5, r6, pc}
 8011098:	f855 3b04 	ldr.w	r3, [r5], #4
 801109c:	4798      	blx	r3
 801109e:	3601      	adds	r6, #1
 80110a0:	e7ee      	b.n	8011080 <__libc_init_array+0xc>
 80110a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80110a6:	4798      	blx	r3
 80110a8:	3601      	adds	r6, #1
 80110aa:	e7f2      	b.n	8011092 <__libc_init_array+0x1e>
 80110ac:	08012b44 	.word	0x08012b44
 80110b0:	08012b44 	.word	0x08012b44
 80110b4:	08012b44 	.word	0x08012b44
 80110b8:	08012b48 	.word	0x08012b48

080110bc <__retarget_lock_init_recursive>:
 80110bc:	4770      	bx	lr

080110be <__retarget_lock_acquire_recursive>:
 80110be:	4770      	bx	lr

080110c0 <__retarget_lock_release_recursive>:
 80110c0:	4770      	bx	lr

080110c2 <strcpy>:
 80110c2:	4603      	mov	r3, r0
 80110c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110c8:	f803 2b01 	strb.w	r2, [r3], #1
 80110cc:	2a00      	cmp	r2, #0
 80110ce:	d1f9      	bne.n	80110c4 <strcpy+0x2>
 80110d0:	4770      	bx	lr

080110d2 <memcpy>:
 80110d2:	440a      	add	r2, r1
 80110d4:	4291      	cmp	r1, r2
 80110d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80110da:	d100      	bne.n	80110de <memcpy+0xc>
 80110dc:	4770      	bx	lr
 80110de:	b510      	push	{r4, lr}
 80110e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110e8:	4291      	cmp	r1, r2
 80110ea:	d1f9      	bne.n	80110e0 <memcpy+0xe>
 80110ec:	bd10      	pop	{r4, pc}
	...

080110f0 <__assert_func>:
 80110f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110f2:	4614      	mov	r4, r2
 80110f4:	461a      	mov	r2, r3
 80110f6:	4b09      	ldr	r3, [pc, #36]	@ (801111c <__assert_func+0x2c>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	4605      	mov	r5, r0
 80110fc:	68d8      	ldr	r0, [r3, #12]
 80110fe:	b14c      	cbz	r4, 8011114 <__assert_func+0x24>
 8011100:	4b07      	ldr	r3, [pc, #28]	@ (8011120 <__assert_func+0x30>)
 8011102:	9100      	str	r1, [sp, #0]
 8011104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011108:	4906      	ldr	r1, [pc, #24]	@ (8011124 <__assert_func+0x34>)
 801110a:	462b      	mov	r3, r5
 801110c:	f000 fbe8 	bl	80118e0 <fiprintf>
 8011110:	f000 fc12 	bl	8011938 <abort>
 8011114:	4b04      	ldr	r3, [pc, #16]	@ (8011128 <__assert_func+0x38>)
 8011116:	461c      	mov	r4, r3
 8011118:	e7f3      	b.n	8011102 <__assert_func+0x12>
 801111a:	bf00      	nop
 801111c:	20000268 	.word	0x20000268
 8011120:	08012aca 	.word	0x08012aca
 8011124:	08012ad7 	.word	0x08012ad7
 8011128:	08012b05 	.word	0x08012b05

0801112c <_free_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4605      	mov	r5, r0
 8011130:	2900      	cmp	r1, #0
 8011132:	d041      	beq.n	80111b8 <_free_r+0x8c>
 8011134:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011138:	1f0c      	subs	r4, r1, #4
 801113a:	2b00      	cmp	r3, #0
 801113c:	bfb8      	it	lt
 801113e:	18e4      	addlt	r4, r4, r3
 8011140:	f7ff fca4 	bl	8010a8c <__malloc_lock>
 8011144:	4a1d      	ldr	r2, [pc, #116]	@ (80111bc <_free_r+0x90>)
 8011146:	6813      	ldr	r3, [r2, #0]
 8011148:	b933      	cbnz	r3, 8011158 <_free_r+0x2c>
 801114a:	6063      	str	r3, [r4, #4]
 801114c:	6014      	str	r4, [r2, #0]
 801114e:	4628      	mov	r0, r5
 8011150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011154:	f7ff bca0 	b.w	8010a98 <__malloc_unlock>
 8011158:	42a3      	cmp	r3, r4
 801115a:	d908      	bls.n	801116e <_free_r+0x42>
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	1821      	adds	r1, r4, r0
 8011160:	428b      	cmp	r3, r1
 8011162:	bf01      	itttt	eq
 8011164:	6819      	ldreq	r1, [r3, #0]
 8011166:	685b      	ldreq	r3, [r3, #4]
 8011168:	1809      	addeq	r1, r1, r0
 801116a:	6021      	streq	r1, [r4, #0]
 801116c:	e7ed      	b.n	801114a <_free_r+0x1e>
 801116e:	461a      	mov	r2, r3
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	b10b      	cbz	r3, 8011178 <_free_r+0x4c>
 8011174:	42a3      	cmp	r3, r4
 8011176:	d9fa      	bls.n	801116e <_free_r+0x42>
 8011178:	6811      	ldr	r1, [r2, #0]
 801117a:	1850      	adds	r0, r2, r1
 801117c:	42a0      	cmp	r0, r4
 801117e:	d10b      	bne.n	8011198 <_free_r+0x6c>
 8011180:	6820      	ldr	r0, [r4, #0]
 8011182:	4401      	add	r1, r0
 8011184:	1850      	adds	r0, r2, r1
 8011186:	4283      	cmp	r3, r0
 8011188:	6011      	str	r1, [r2, #0]
 801118a:	d1e0      	bne.n	801114e <_free_r+0x22>
 801118c:	6818      	ldr	r0, [r3, #0]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	6053      	str	r3, [r2, #4]
 8011192:	4408      	add	r0, r1
 8011194:	6010      	str	r0, [r2, #0]
 8011196:	e7da      	b.n	801114e <_free_r+0x22>
 8011198:	d902      	bls.n	80111a0 <_free_r+0x74>
 801119a:	230c      	movs	r3, #12
 801119c:	602b      	str	r3, [r5, #0]
 801119e:	e7d6      	b.n	801114e <_free_r+0x22>
 80111a0:	6820      	ldr	r0, [r4, #0]
 80111a2:	1821      	adds	r1, r4, r0
 80111a4:	428b      	cmp	r3, r1
 80111a6:	bf04      	itt	eq
 80111a8:	6819      	ldreq	r1, [r3, #0]
 80111aa:	685b      	ldreq	r3, [r3, #4]
 80111ac:	6063      	str	r3, [r4, #4]
 80111ae:	bf04      	itt	eq
 80111b0:	1809      	addeq	r1, r1, r0
 80111b2:	6021      	streq	r1, [r4, #0]
 80111b4:	6054      	str	r4, [r2, #4]
 80111b6:	e7ca      	b.n	801114e <_free_r+0x22>
 80111b8:	bd38      	pop	{r3, r4, r5, pc}
 80111ba:	bf00      	nop
 80111bc:	200114e4 	.word	0x200114e4

080111c0 <__ssputs_r>:
 80111c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c4:	688e      	ldr	r6, [r1, #8]
 80111c6:	461f      	mov	r7, r3
 80111c8:	42be      	cmp	r6, r7
 80111ca:	680b      	ldr	r3, [r1, #0]
 80111cc:	4682      	mov	sl, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	4690      	mov	r8, r2
 80111d2:	d82d      	bhi.n	8011230 <__ssputs_r+0x70>
 80111d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80111dc:	d026      	beq.n	801122c <__ssputs_r+0x6c>
 80111de:	6965      	ldr	r5, [r4, #20]
 80111e0:	6909      	ldr	r1, [r1, #16]
 80111e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111e6:	eba3 0901 	sub.w	r9, r3, r1
 80111ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111ee:	1c7b      	adds	r3, r7, #1
 80111f0:	444b      	add	r3, r9
 80111f2:	106d      	asrs	r5, r5, #1
 80111f4:	429d      	cmp	r5, r3
 80111f6:	bf38      	it	cc
 80111f8:	461d      	movcc	r5, r3
 80111fa:	0553      	lsls	r3, r2, #21
 80111fc:	d527      	bpl.n	801124e <__ssputs_r+0x8e>
 80111fe:	4629      	mov	r1, r5
 8011200:	f7ff fbc4 	bl	801098c <_malloc_r>
 8011204:	4606      	mov	r6, r0
 8011206:	b360      	cbz	r0, 8011262 <__ssputs_r+0xa2>
 8011208:	6921      	ldr	r1, [r4, #16]
 801120a:	464a      	mov	r2, r9
 801120c:	f7ff ff61 	bl	80110d2 <memcpy>
 8011210:	89a3      	ldrh	r3, [r4, #12]
 8011212:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801121a:	81a3      	strh	r3, [r4, #12]
 801121c:	6126      	str	r6, [r4, #16]
 801121e:	6165      	str	r5, [r4, #20]
 8011220:	444e      	add	r6, r9
 8011222:	eba5 0509 	sub.w	r5, r5, r9
 8011226:	6026      	str	r6, [r4, #0]
 8011228:	60a5      	str	r5, [r4, #8]
 801122a:	463e      	mov	r6, r7
 801122c:	42be      	cmp	r6, r7
 801122e:	d900      	bls.n	8011232 <__ssputs_r+0x72>
 8011230:	463e      	mov	r6, r7
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	4632      	mov	r2, r6
 8011236:	4641      	mov	r1, r8
 8011238:	f000 fb64 	bl	8011904 <memmove>
 801123c:	68a3      	ldr	r3, [r4, #8]
 801123e:	1b9b      	subs	r3, r3, r6
 8011240:	60a3      	str	r3, [r4, #8]
 8011242:	6823      	ldr	r3, [r4, #0]
 8011244:	4433      	add	r3, r6
 8011246:	6023      	str	r3, [r4, #0]
 8011248:	2000      	movs	r0, #0
 801124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801124e:	462a      	mov	r2, r5
 8011250:	f000 fb79 	bl	8011946 <_realloc_r>
 8011254:	4606      	mov	r6, r0
 8011256:	2800      	cmp	r0, #0
 8011258:	d1e0      	bne.n	801121c <__ssputs_r+0x5c>
 801125a:	6921      	ldr	r1, [r4, #16]
 801125c:	4650      	mov	r0, sl
 801125e:	f7ff ff65 	bl	801112c <_free_r>
 8011262:	230c      	movs	r3, #12
 8011264:	f8ca 3000 	str.w	r3, [sl]
 8011268:	89a3      	ldrh	r3, [r4, #12]
 801126a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801126e:	81a3      	strh	r3, [r4, #12]
 8011270:	f04f 30ff 	mov.w	r0, #4294967295
 8011274:	e7e9      	b.n	801124a <__ssputs_r+0x8a>
	...

08011278 <_svfiprintf_r>:
 8011278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127c:	4698      	mov	r8, r3
 801127e:	898b      	ldrh	r3, [r1, #12]
 8011280:	061b      	lsls	r3, r3, #24
 8011282:	b09d      	sub	sp, #116	@ 0x74
 8011284:	4607      	mov	r7, r0
 8011286:	460d      	mov	r5, r1
 8011288:	4614      	mov	r4, r2
 801128a:	d510      	bpl.n	80112ae <_svfiprintf_r+0x36>
 801128c:	690b      	ldr	r3, [r1, #16]
 801128e:	b973      	cbnz	r3, 80112ae <_svfiprintf_r+0x36>
 8011290:	2140      	movs	r1, #64	@ 0x40
 8011292:	f7ff fb7b 	bl	801098c <_malloc_r>
 8011296:	6028      	str	r0, [r5, #0]
 8011298:	6128      	str	r0, [r5, #16]
 801129a:	b930      	cbnz	r0, 80112aa <_svfiprintf_r+0x32>
 801129c:	230c      	movs	r3, #12
 801129e:	603b      	str	r3, [r7, #0]
 80112a0:	f04f 30ff 	mov.w	r0, #4294967295
 80112a4:	b01d      	add	sp, #116	@ 0x74
 80112a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112aa:	2340      	movs	r3, #64	@ 0x40
 80112ac:	616b      	str	r3, [r5, #20]
 80112ae:	2300      	movs	r3, #0
 80112b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80112b2:	2320      	movs	r3, #32
 80112b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80112b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80112bc:	2330      	movs	r3, #48	@ 0x30
 80112be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801145c <_svfiprintf_r+0x1e4>
 80112c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80112c6:	f04f 0901 	mov.w	r9, #1
 80112ca:	4623      	mov	r3, r4
 80112cc:	469a      	mov	sl, r3
 80112ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112d2:	b10a      	cbz	r2, 80112d8 <_svfiprintf_r+0x60>
 80112d4:	2a25      	cmp	r2, #37	@ 0x25
 80112d6:	d1f9      	bne.n	80112cc <_svfiprintf_r+0x54>
 80112d8:	ebba 0b04 	subs.w	fp, sl, r4
 80112dc:	d00b      	beq.n	80112f6 <_svfiprintf_r+0x7e>
 80112de:	465b      	mov	r3, fp
 80112e0:	4622      	mov	r2, r4
 80112e2:	4629      	mov	r1, r5
 80112e4:	4638      	mov	r0, r7
 80112e6:	f7ff ff6b 	bl	80111c0 <__ssputs_r>
 80112ea:	3001      	adds	r0, #1
 80112ec:	f000 80a7 	beq.w	801143e <_svfiprintf_r+0x1c6>
 80112f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112f2:	445a      	add	r2, fp
 80112f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80112f6:	f89a 3000 	ldrb.w	r3, [sl]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f000 809f 	beq.w	801143e <_svfiprintf_r+0x1c6>
 8011300:	2300      	movs	r3, #0
 8011302:	f04f 32ff 	mov.w	r2, #4294967295
 8011306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801130a:	f10a 0a01 	add.w	sl, sl, #1
 801130e:	9304      	str	r3, [sp, #16]
 8011310:	9307      	str	r3, [sp, #28]
 8011312:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011316:	931a      	str	r3, [sp, #104]	@ 0x68
 8011318:	4654      	mov	r4, sl
 801131a:	2205      	movs	r2, #5
 801131c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011320:	484e      	ldr	r0, [pc, #312]	@ (801145c <_svfiprintf_r+0x1e4>)
 8011322:	f7ee ff5d 	bl	80001e0 <memchr>
 8011326:	9a04      	ldr	r2, [sp, #16]
 8011328:	b9d8      	cbnz	r0, 8011362 <_svfiprintf_r+0xea>
 801132a:	06d0      	lsls	r0, r2, #27
 801132c:	bf44      	itt	mi
 801132e:	2320      	movmi	r3, #32
 8011330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011334:	0711      	lsls	r1, r2, #28
 8011336:	bf44      	itt	mi
 8011338:	232b      	movmi	r3, #43	@ 0x2b
 801133a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801133e:	f89a 3000 	ldrb.w	r3, [sl]
 8011342:	2b2a      	cmp	r3, #42	@ 0x2a
 8011344:	d015      	beq.n	8011372 <_svfiprintf_r+0xfa>
 8011346:	9a07      	ldr	r2, [sp, #28]
 8011348:	4654      	mov	r4, sl
 801134a:	2000      	movs	r0, #0
 801134c:	f04f 0c0a 	mov.w	ip, #10
 8011350:	4621      	mov	r1, r4
 8011352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011356:	3b30      	subs	r3, #48	@ 0x30
 8011358:	2b09      	cmp	r3, #9
 801135a:	d94b      	bls.n	80113f4 <_svfiprintf_r+0x17c>
 801135c:	b1b0      	cbz	r0, 801138c <_svfiprintf_r+0x114>
 801135e:	9207      	str	r2, [sp, #28]
 8011360:	e014      	b.n	801138c <_svfiprintf_r+0x114>
 8011362:	eba0 0308 	sub.w	r3, r0, r8
 8011366:	fa09 f303 	lsl.w	r3, r9, r3
 801136a:	4313      	orrs	r3, r2
 801136c:	9304      	str	r3, [sp, #16]
 801136e:	46a2      	mov	sl, r4
 8011370:	e7d2      	b.n	8011318 <_svfiprintf_r+0xa0>
 8011372:	9b03      	ldr	r3, [sp, #12]
 8011374:	1d19      	adds	r1, r3, #4
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	9103      	str	r1, [sp, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	bfbb      	ittet	lt
 801137e:	425b      	neglt	r3, r3
 8011380:	f042 0202 	orrlt.w	r2, r2, #2
 8011384:	9307      	strge	r3, [sp, #28]
 8011386:	9307      	strlt	r3, [sp, #28]
 8011388:	bfb8      	it	lt
 801138a:	9204      	strlt	r2, [sp, #16]
 801138c:	7823      	ldrb	r3, [r4, #0]
 801138e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011390:	d10a      	bne.n	80113a8 <_svfiprintf_r+0x130>
 8011392:	7863      	ldrb	r3, [r4, #1]
 8011394:	2b2a      	cmp	r3, #42	@ 0x2a
 8011396:	d132      	bne.n	80113fe <_svfiprintf_r+0x186>
 8011398:	9b03      	ldr	r3, [sp, #12]
 801139a:	1d1a      	adds	r2, r3, #4
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	9203      	str	r2, [sp, #12]
 80113a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113a4:	3402      	adds	r4, #2
 80113a6:	9305      	str	r3, [sp, #20]
 80113a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801146c <_svfiprintf_r+0x1f4>
 80113ac:	7821      	ldrb	r1, [r4, #0]
 80113ae:	2203      	movs	r2, #3
 80113b0:	4650      	mov	r0, sl
 80113b2:	f7ee ff15 	bl	80001e0 <memchr>
 80113b6:	b138      	cbz	r0, 80113c8 <_svfiprintf_r+0x150>
 80113b8:	9b04      	ldr	r3, [sp, #16]
 80113ba:	eba0 000a 	sub.w	r0, r0, sl
 80113be:	2240      	movs	r2, #64	@ 0x40
 80113c0:	4082      	lsls	r2, r0
 80113c2:	4313      	orrs	r3, r2
 80113c4:	3401      	adds	r4, #1
 80113c6:	9304      	str	r3, [sp, #16]
 80113c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113cc:	4824      	ldr	r0, [pc, #144]	@ (8011460 <_svfiprintf_r+0x1e8>)
 80113ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80113d2:	2206      	movs	r2, #6
 80113d4:	f7ee ff04 	bl	80001e0 <memchr>
 80113d8:	2800      	cmp	r0, #0
 80113da:	d036      	beq.n	801144a <_svfiprintf_r+0x1d2>
 80113dc:	4b21      	ldr	r3, [pc, #132]	@ (8011464 <_svfiprintf_r+0x1ec>)
 80113de:	bb1b      	cbnz	r3, 8011428 <_svfiprintf_r+0x1b0>
 80113e0:	9b03      	ldr	r3, [sp, #12]
 80113e2:	3307      	adds	r3, #7
 80113e4:	f023 0307 	bic.w	r3, r3, #7
 80113e8:	3308      	adds	r3, #8
 80113ea:	9303      	str	r3, [sp, #12]
 80113ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113ee:	4433      	add	r3, r6
 80113f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80113f2:	e76a      	b.n	80112ca <_svfiprintf_r+0x52>
 80113f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80113f8:	460c      	mov	r4, r1
 80113fa:	2001      	movs	r0, #1
 80113fc:	e7a8      	b.n	8011350 <_svfiprintf_r+0xd8>
 80113fe:	2300      	movs	r3, #0
 8011400:	3401      	adds	r4, #1
 8011402:	9305      	str	r3, [sp, #20]
 8011404:	4619      	mov	r1, r3
 8011406:	f04f 0c0a 	mov.w	ip, #10
 801140a:	4620      	mov	r0, r4
 801140c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011410:	3a30      	subs	r2, #48	@ 0x30
 8011412:	2a09      	cmp	r2, #9
 8011414:	d903      	bls.n	801141e <_svfiprintf_r+0x1a6>
 8011416:	2b00      	cmp	r3, #0
 8011418:	d0c6      	beq.n	80113a8 <_svfiprintf_r+0x130>
 801141a:	9105      	str	r1, [sp, #20]
 801141c:	e7c4      	b.n	80113a8 <_svfiprintf_r+0x130>
 801141e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011422:	4604      	mov	r4, r0
 8011424:	2301      	movs	r3, #1
 8011426:	e7f0      	b.n	801140a <_svfiprintf_r+0x192>
 8011428:	ab03      	add	r3, sp, #12
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	462a      	mov	r2, r5
 801142e:	4b0e      	ldr	r3, [pc, #56]	@ (8011468 <_svfiprintf_r+0x1f0>)
 8011430:	a904      	add	r1, sp, #16
 8011432:	4638      	mov	r0, r7
 8011434:	f3af 8000 	nop.w
 8011438:	1c42      	adds	r2, r0, #1
 801143a:	4606      	mov	r6, r0
 801143c:	d1d6      	bne.n	80113ec <_svfiprintf_r+0x174>
 801143e:	89ab      	ldrh	r3, [r5, #12]
 8011440:	065b      	lsls	r3, r3, #25
 8011442:	f53f af2d 	bmi.w	80112a0 <_svfiprintf_r+0x28>
 8011446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011448:	e72c      	b.n	80112a4 <_svfiprintf_r+0x2c>
 801144a:	ab03      	add	r3, sp, #12
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	462a      	mov	r2, r5
 8011450:	4b05      	ldr	r3, [pc, #20]	@ (8011468 <_svfiprintf_r+0x1f0>)
 8011452:	a904      	add	r1, sp, #16
 8011454:	4638      	mov	r0, r7
 8011456:	f000 f879 	bl	801154c <_printf_i>
 801145a:	e7ed      	b.n	8011438 <_svfiprintf_r+0x1c0>
 801145c:	08012b06 	.word	0x08012b06
 8011460:	08012b10 	.word	0x08012b10
 8011464:	00000000 	.word	0x00000000
 8011468:	080111c1 	.word	0x080111c1
 801146c:	08012b0c 	.word	0x08012b0c

08011470 <_printf_common>:
 8011470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011474:	4616      	mov	r6, r2
 8011476:	4698      	mov	r8, r3
 8011478:	688a      	ldr	r2, [r1, #8]
 801147a:	690b      	ldr	r3, [r1, #16]
 801147c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011480:	4293      	cmp	r3, r2
 8011482:	bfb8      	it	lt
 8011484:	4613      	movlt	r3, r2
 8011486:	6033      	str	r3, [r6, #0]
 8011488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801148c:	4607      	mov	r7, r0
 801148e:	460c      	mov	r4, r1
 8011490:	b10a      	cbz	r2, 8011496 <_printf_common+0x26>
 8011492:	3301      	adds	r3, #1
 8011494:	6033      	str	r3, [r6, #0]
 8011496:	6823      	ldr	r3, [r4, #0]
 8011498:	0699      	lsls	r1, r3, #26
 801149a:	bf42      	ittt	mi
 801149c:	6833      	ldrmi	r3, [r6, #0]
 801149e:	3302      	addmi	r3, #2
 80114a0:	6033      	strmi	r3, [r6, #0]
 80114a2:	6825      	ldr	r5, [r4, #0]
 80114a4:	f015 0506 	ands.w	r5, r5, #6
 80114a8:	d106      	bne.n	80114b8 <_printf_common+0x48>
 80114aa:	f104 0a19 	add.w	sl, r4, #25
 80114ae:	68e3      	ldr	r3, [r4, #12]
 80114b0:	6832      	ldr	r2, [r6, #0]
 80114b2:	1a9b      	subs	r3, r3, r2
 80114b4:	42ab      	cmp	r3, r5
 80114b6:	dc26      	bgt.n	8011506 <_printf_common+0x96>
 80114b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80114bc:	6822      	ldr	r2, [r4, #0]
 80114be:	3b00      	subs	r3, #0
 80114c0:	bf18      	it	ne
 80114c2:	2301      	movne	r3, #1
 80114c4:	0692      	lsls	r2, r2, #26
 80114c6:	d42b      	bmi.n	8011520 <_printf_common+0xb0>
 80114c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114cc:	4641      	mov	r1, r8
 80114ce:	4638      	mov	r0, r7
 80114d0:	47c8      	blx	r9
 80114d2:	3001      	adds	r0, #1
 80114d4:	d01e      	beq.n	8011514 <_printf_common+0xa4>
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	6922      	ldr	r2, [r4, #16]
 80114da:	f003 0306 	and.w	r3, r3, #6
 80114de:	2b04      	cmp	r3, #4
 80114e0:	bf02      	ittt	eq
 80114e2:	68e5      	ldreq	r5, [r4, #12]
 80114e4:	6833      	ldreq	r3, [r6, #0]
 80114e6:	1aed      	subeq	r5, r5, r3
 80114e8:	68a3      	ldr	r3, [r4, #8]
 80114ea:	bf0c      	ite	eq
 80114ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114f0:	2500      	movne	r5, #0
 80114f2:	4293      	cmp	r3, r2
 80114f4:	bfc4      	itt	gt
 80114f6:	1a9b      	subgt	r3, r3, r2
 80114f8:	18ed      	addgt	r5, r5, r3
 80114fa:	2600      	movs	r6, #0
 80114fc:	341a      	adds	r4, #26
 80114fe:	42b5      	cmp	r5, r6
 8011500:	d11a      	bne.n	8011538 <_printf_common+0xc8>
 8011502:	2000      	movs	r0, #0
 8011504:	e008      	b.n	8011518 <_printf_common+0xa8>
 8011506:	2301      	movs	r3, #1
 8011508:	4652      	mov	r2, sl
 801150a:	4641      	mov	r1, r8
 801150c:	4638      	mov	r0, r7
 801150e:	47c8      	blx	r9
 8011510:	3001      	adds	r0, #1
 8011512:	d103      	bne.n	801151c <_printf_common+0xac>
 8011514:	f04f 30ff 	mov.w	r0, #4294967295
 8011518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801151c:	3501      	adds	r5, #1
 801151e:	e7c6      	b.n	80114ae <_printf_common+0x3e>
 8011520:	18e1      	adds	r1, r4, r3
 8011522:	1c5a      	adds	r2, r3, #1
 8011524:	2030      	movs	r0, #48	@ 0x30
 8011526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801152a:	4422      	add	r2, r4
 801152c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011534:	3302      	adds	r3, #2
 8011536:	e7c7      	b.n	80114c8 <_printf_common+0x58>
 8011538:	2301      	movs	r3, #1
 801153a:	4622      	mov	r2, r4
 801153c:	4641      	mov	r1, r8
 801153e:	4638      	mov	r0, r7
 8011540:	47c8      	blx	r9
 8011542:	3001      	adds	r0, #1
 8011544:	d0e6      	beq.n	8011514 <_printf_common+0xa4>
 8011546:	3601      	adds	r6, #1
 8011548:	e7d9      	b.n	80114fe <_printf_common+0x8e>
	...

0801154c <_printf_i>:
 801154c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011550:	7e0f      	ldrb	r7, [r1, #24]
 8011552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011554:	2f78      	cmp	r7, #120	@ 0x78
 8011556:	4691      	mov	r9, r2
 8011558:	4680      	mov	r8, r0
 801155a:	460c      	mov	r4, r1
 801155c:	469a      	mov	sl, r3
 801155e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011562:	d807      	bhi.n	8011574 <_printf_i+0x28>
 8011564:	2f62      	cmp	r7, #98	@ 0x62
 8011566:	d80a      	bhi.n	801157e <_printf_i+0x32>
 8011568:	2f00      	cmp	r7, #0
 801156a:	f000 80d1 	beq.w	8011710 <_printf_i+0x1c4>
 801156e:	2f58      	cmp	r7, #88	@ 0x58
 8011570:	f000 80b8 	beq.w	80116e4 <_printf_i+0x198>
 8011574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801157c:	e03a      	b.n	80115f4 <_printf_i+0xa8>
 801157e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011582:	2b15      	cmp	r3, #21
 8011584:	d8f6      	bhi.n	8011574 <_printf_i+0x28>
 8011586:	a101      	add	r1, pc, #4	@ (adr r1, 801158c <_printf_i+0x40>)
 8011588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801158c:	080115e5 	.word	0x080115e5
 8011590:	080115f9 	.word	0x080115f9
 8011594:	08011575 	.word	0x08011575
 8011598:	08011575 	.word	0x08011575
 801159c:	08011575 	.word	0x08011575
 80115a0:	08011575 	.word	0x08011575
 80115a4:	080115f9 	.word	0x080115f9
 80115a8:	08011575 	.word	0x08011575
 80115ac:	08011575 	.word	0x08011575
 80115b0:	08011575 	.word	0x08011575
 80115b4:	08011575 	.word	0x08011575
 80115b8:	080116f7 	.word	0x080116f7
 80115bc:	08011623 	.word	0x08011623
 80115c0:	080116b1 	.word	0x080116b1
 80115c4:	08011575 	.word	0x08011575
 80115c8:	08011575 	.word	0x08011575
 80115cc:	08011719 	.word	0x08011719
 80115d0:	08011575 	.word	0x08011575
 80115d4:	08011623 	.word	0x08011623
 80115d8:	08011575 	.word	0x08011575
 80115dc:	08011575 	.word	0x08011575
 80115e0:	080116b9 	.word	0x080116b9
 80115e4:	6833      	ldr	r3, [r6, #0]
 80115e6:	1d1a      	adds	r2, r3, #4
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6032      	str	r2, [r6, #0]
 80115ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80115f4:	2301      	movs	r3, #1
 80115f6:	e09c      	b.n	8011732 <_printf_i+0x1e6>
 80115f8:	6833      	ldr	r3, [r6, #0]
 80115fa:	6820      	ldr	r0, [r4, #0]
 80115fc:	1d19      	adds	r1, r3, #4
 80115fe:	6031      	str	r1, [r6, #0]
 8011600:	0606      	lsls	r6, r0, #24
 8011602:	d501      	bpl.n	8011608 <_printf_i+0xbc>
 8011604:	681d      	ldr	r5, [r3, #0]
 8011606:	e003      	b.n	8011610 <_printf_i+0xc4>
 8011608:	0645      	lsls	r5, r0, #25
 801160a:	d5fb      	bpl.n	8011604 <_printf_i+0xb8>
 801160c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011610:	2d00      	cmp	r5, #0
 8011612:	da03      	bge.n	801161c <_printf_i+0xd0>
 8011614:	232d      	movs	r3, #45	@ 0x2d
 8011616:	426d      	negs	r5, r5
 8011618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801161c:	4858      	ldr	r0, [pc, #352]	@ (8011780 <_printf_i+0x234>)
 801161e:	230a      	movs	r3, #10
 8011620:	e011      	b.n	8011646 <_printf_i+0xfa>
 8011622:	6821      	ldr	r1, [r4, #0]
 8011624:	6833      	ldr	r3, [r6, #0]
 8011626:	0608      	lsls	r0, r1, #24
 8011628:	f853 5b04 	ldr.w	r5, [r3], #4
 801162c:	d402      	bmi.n	8011634 <_printf_i+0xe8>
 801162e:	0649      	lsls	r1, r1, #25
 8011630:	bf48      	it	mi
 8011632:	b2ad      	uxthmi	r5, r5
 8011634:	2f6f      	cmp	r7, #111	@ 0x6f
 8011636:	4852      	ldr	r0, [pc, #328]	@ (8011780 <_printf_i+0x234>)
 8011638:	6033      	str	r3, [r6, #0]
 801163a:	bf14      	ite	ne
 801163c:	230a      	movne	r3, #10
 801163e:	2308      	moveq	r3, #8
 8011640:	2100      	movs	r1, #0
 8011642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011646:	6866      	ldr	r6, [r4, #4]
 8011648:	60a6      	str	r6, [r4, #8]
 801164a:	2e00      	cmp	r6, #0
 801164c:	db05      	blt.n	801165a <_printf_i+0x10e>
 801164e:	6821      	ldr	r1, [r4, #0]
 8011650:	432e      	orrs	r6, r5
 8011652:	f021 0104 	bic.w	r1, r1, #4
 8011656:	6021      	str	r1, [r4, #0]
 8011658:	d04b      	beq.n	80116f2 <_printf_i+0x1a6>
 801165a:	4616      	mov	r6, r2
 801165c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011660:	fb03 5711 	mls	r7, r3, r1, r5
 8011664:	5dc7      	ldrb	r7, [r0, r7]
 8011666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801166a:	462f      	mov	r7, r5
 801166c:	42bb      	cmp	r3, r7
 801166e:	460d      	mov	r5, r1
 8011670:	d9f4      	bls.n	801165c <_printf_i+0x110>
 8011672:	2b08      	cmp	r3, #8
 8011674:	d10b      	bne.n	801168e <_printf_i+0x142>
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	07df      	lsls	r7, r3, #31
 801167a:	d508      	bpl.n	801168e <_printf_i+0x142>
 801167c:	6923      	ldr	r3, [r4, #16]
 801167e:	6861      	ldr	r1, [r4, #4]
 8011680:	4299      	cmp	r1, r3
 8011682:	bfde      	ittt	le
 8011684:	2330      	movle	r3, #48	@ 0x30
 8011686:	f806 3c01 	strble.w	r3, [r6, #-1]
 801168a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801168e:	1b92      	subs	r2, r2, r6
 8011690:	6122      	str	r2, [r4, #16]
 8011692:	f8cd a000 	str.w	sl, [sp]
 8011696:	464b      	mov	r3, r9
 8011698:	aa03      	add	r2, sp, #12
 801169a:	4621      	mov	r1, r4
 801169c:	4640      	mov	r0, r8
 801169e:	f7ff fee7 	bl	8011470 <_printf_common>
 80116a2:	3001      	adds	r0, #1
 80116a4:	d14a      	bne.n	801173c <_printf_i+0x1f0>
 80116a6:	f04f 30ff 	mov.w	r0, #4294967295
 80116aa:	b004      	add	sp, #16
 80116ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b0:	6823      	ldr	r3, [r4, #0]
 80116b2:	f043 0320 	orr.w	r3, r3, #32
 80116b6:	6023      	str	r3, [r4, #0]
 80116b8:	4832      	ldr	r0, [pc, #200]	@ (8011784 <_printf_i+0x238>)
 80116ba:	2778      	movs	r7, #120	@ 0x78
 80116bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80116c0:	6823      	ldr	r3, [r4, #0]
 80116c2:	6831      	ldr	r1, [r6, #0]
 80116c4:	061f      	lsls	r7, r3, #24
 80116c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80116ca:	d402      	bmi.n	80116d2 <_printf_i+0x186>
 80116cc:	065f      	lsls	r7, r3, #25
 80116ce:	bf48      	it	mi
 80116d0:	b2ad      	uxthmi	r5, r5
 80116d2:	6031      	str	r1, [r6, #0]
 80116d4:	07d9      	lsls	r1, r3, #31
 80116d6:	bf44      	itt	mi
 80116d8:	f043 0320 	orrmi.w	r3, r3, #32
 80116dc:	6023      	strmi	r3, [r4, #0]
 80116de:	b11d      	cbz	r5, 80116e8 <_printf_i+0x19c>
 80116e0:	2310      	movs	r3, #16
 80116e2:	e7ad      	b.n	8011640 <_printf_i+0xf4>
 80116e4:	4826      	ldr	r0, [pc, #152]	@ (8011780 <_printf_i+0x234>)
 80116e6:	e7e9      	b.n	80116bc <_printf_i+0x170>
 80116e8:	6823      	ldr	r3, [r4, #0]
 80116ea:	f023 0320 	bic.w	r3, r3, #32
 80116ee:	6023      	str	r3, [r4, #0]
 80116f0:	e7f6      	b.n	80116e0 <_printf_i+0x194>
 80116f2:	4616      	mov	r6, r2
 80116f4:	e7bd      	b.n	8011672 <_printf_i+0x126>
 80116f6:	6833      	ldr	r3, [r6, #0]
 80116f8:	6825      	ldr	r5, [r4, #0]
 80116fa:	6961      	ldr	r1, [r4, #20]
 80116fc:	1d18      	adds	r0, r3, #4
 80116fe:	6030      	str	r0, [r6, #0]
 8011700:	062e      	lsls	r6, r5, #24
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	d501      	bpl.n	801170a <_printf_i+0x1be>
 8011706:	6019      	str	r1, [r3, #0]
 8011708:	e002      	b.n	8011710 <_printf_i+0x1c4>
 801170a:	0668      	lsls	r0, r5, #25
 801170c:	d5fb      	bpl.n	8011706 <_printf_i+0x1ba>
 801170e:	8019      	strh	r1, [r3, #0]
 8011710:	2300      	movs	r3, #0
 8011712:	6123      	str	r3, [r4, #16]
 8011714:	4616      	mov	r6, r2
 8011716:	e7bc      	b.n	8011692 <_printf_i+0x146>
 8011718:	6833      	ldr	r3, [r6, #0]
 801171a:	1d1a      	adds	r2, r3, #4
 801171c:	6032      	str	r2, [r6, #0]
 801171e:	681e      	ldr	r6, [r3, #0]
 8011720:	6862      	ldr	r2, [r4, #4]
 8011722:	2100      	movs	r1, #0
 8011724:	4630      	mov	r0, r6
 8011726:	f7ee fd5b 	bl	80001e0 <memchr>
 801172a:	b108      	cbz	r0, 8011730 <_printf_i+0x1e4>
 801172c:	1b80      	subs	r0, r0, r6
 801172e:	6060      	str	r0, [r4, #4]
 8011730:	6863      	ldr	r3, [r4, #4]
 8011732:	6123      	str	r3, [r4, #16]
 8011734:	2300      	movs	r3, #0
 8011736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801173a:	e7aa      	b.n	8011692 <_printf_i+0x146>
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	4632      	mov	r2, r6
 8011740:	4649      	mov	r1, r9
 8011742:	4640      	mov	r0, r8
 8011744:	47d0      	blx	sl
 8011746:	3001      	adds	r0, #1
 8011748:	d0ad      	beq.n	80116a6 <_printf_i+0x15a>
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	079b      	lsls	r3, r3, #30
 801174e:	d413      	bmi.n	8011778 <_printf_i+0x22c>
 8011750:	68e0      	ldr	r0, [r4, #12]
 8011752:	9b03      	ldr	r3, [sp, #12]
 8011754:	4298      	cmp	r0, r3
 8011756:	bfb8      	it	lt
 8011758:	4618      	movlt	r0, r3
 801175a:	e7a6      	b.n	80116aa <_printf_i+0x15e>
 801175c:	2301      	movs	r3, #1
 801175e:	4632      	mov	r2, r6
 8011760:	4649      	mov	r1, r9
 8011762:	4640      	mov	r0, r8
 8011764:	47d0      	blx	sl
 8011766:	3001      	adds	r0, #1
 8011768:	d09d      	beq.n	80116a6 <_printf_i+0x15a>
 801176a:	3501      	adds	r5, #1
 801176c:	68e3      	ldr	r3, [r4, #12]
 801176e:	9903      	ldr	r1, [sp, #12]
 8011770:	1a5b      	subs	r3, r3, r1
 8011772:	42ab      	cmp	r3, r5
 8011774:	dcf2      	bgt.n	801175c <_printf_i+0x210>
 8011776:	e7eb      	b.n	8011750 <_printf_i+0x204>
 8011778:	2500      	movs	r5, #0
 801177a:	f104 0619 	add.w	r6, r4, #25
 801177e:	e7f5      	b.n	801176c <_printf_i+0x220>
 8011780:	08012b17 	.word	0x08012b17
 8011784:	08012b28 	.word	0x08012b28

08011788 <__sflush_r>:
 8011788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801178c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011790:	0716      	lsls	r6, r2, #28
 8011792:	4605      	mov	r5, r0
 8011794:	460c      	mov	r4, r1
 8011796:	d454      	bmi.n	8011842 <__sflush_r+0xba>
 8011798:	684b      	ldr	r3, [r1, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	dc02      	bgt.n	80117a4 <__sflush_r+0x1c>
 801179e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	dd48      	ble.n	8011836 <__sflush_r+0xae>
 80117a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117a6:	2e00      	cmp	r6, #0
 80117a8:	d045      	beq.n	8011836 <__sflush_r+0xae>
 80117aa:	2300      	movs	r3, #0
 80117ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80117b0:	682f      	ldr	r7, [r5, #0]
 80117b2:	6a21      	ldr	r1, [r4, #32]
 80117b4:	602b      	str	r3, [r5, #0]
 80117b6:	d030      	beq.n	801181a <__sflush_r+0x92>
 80117b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117ba:	89a3      	ldrh	r3, [r4, #12]
 80117bc:	0759      	lsls	r1, r3, #29
 80117be:	d505      	bpl.n	80117cc <__sflush_r+0x44>
 80117c0:	6863      	ldr	r3, [r4, #4]
 80117c2:	1ad2      	subs	r2, r2, r3
 80117c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117c6:	b10b      	cbz	r3, 80117cc <__sflush_r+0x44>
 80117c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117ca:	1ad2      	subs	r2, r2, r3
 80117cc:	2300      	movs	r3, #0
 80117ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117d0:	6a21      	ldr	r1, [r4, #32]
 80117d2:	4628      	mov	r0, r5
 80117d4:	47b0      	blx	r6
 80117d6:	1c43      	adds	r3, r0, #1
 80117d8:	89a3      	ldrh	r3, [r4, #12]
 80117da:	d106      	bne.n	80117ea <__sflush_r+0x62>
 80117dc:	6829      	ldr	r1, [r5, #0]
 80117de:	291d      	cmp	r1, #29
 80117e0:	d82b      	bhi.n	801183a <__sflush_r+0xb2>
 80117e2:	4a2a      	ldr	r2, [pc, #168]	@ (801188c <__sflush_r+0x104>)
 80117e4:	40ca      	lsrs	r2, r1
 80117e6:	07d6      	lsls	r6, r2, #31
 80117e8:	d527      	bpl.n	801183a <__sflush_r+0xb2>
 80117ea:	2200      	movs	r2, #0
 80117ec:	6062      	str	r2, [r4, #4]
 80117ee:	04d9      	lsls	r1, r3, #19
 80117f0:	6922      	ldr	r2, [r4, #16]
 80117f2:	6022      	str	r2, [r4, #0]
 80117f4:	d504      	bpl.n	8011800 <__sflush_r+0x78>
 80117f6:	1c42      	adds	r2, r0, #1
 80117f8:	d101      	bne.n	80117fe <__sflush_r+0x76>
 80117fa:	682b      	ldr	r3, [r5, #0]
 80117fc:	b903      	cbnz	r3, 8011800 <__sflush_r+0x78>
 80117fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8011800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011802:	602f      	str	r7, [r5, #0]
 8011804:	b1b9      	cbz	r1, 8011836 <__sflush_r+0xae>
 8011806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801180a:	4299      	cmp	r1, r3
 801180c:	d002      	beq.n	8011814 <__sflush_r+0x8c>
 801180e:	4628      	mov	r0, r5
 8011810:	f7ff fc8c 	bl	801112c <_free_r>
 8011814:	2300      	movs	r3, #0
 8011816:	6363      	str	r3, [r4, #52]	@ 0x34
 8011818:	e00d      	b.n	8011836 <__sflush_r+0xae>
 801181a:	2301      	movs	r3, #1
 801181c:	4628      	mov	r0, r5
 801181e:	47b0      	blx	r6
 8011820:	4602      	mov	r2, r0
 8011822:	1c50      	adds	r0, r2, #1
 8011824:	d1c9      	bne.n	80117ba <__sflush_r+0x32>
 8011826:	682b      	ldr	r3, [r5, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d0c6      	beq.n	80117ba <__sflush_r+0x32>
 801182c:	2b1d      	cmp	r3, #29
 801182e:	d001      	beq.n	8011834 <__sflush_r+0xac>
 8011830:	2b16      	cmp	r3, #22
 8011832:	d11e      	bne.n	8011872 <__sflush_r+0xea>
 8011834:	602f      	str	r7, [r5, #0]
 8011836:	2000      	movs	r0, #0
 8011838:	e022      	b.n	8011880 <__sflush_r+0xf8>
 801183a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801183e:	b21b      	sxth	r3, r3
 8011840:	e01b      	b.n	801187a <__sflush_r+0xf2>
 8011842:	690f      	ldr	r7, [r1, #16]
 8011844:	2f00      	cmp	r7, #0
 8011846:	d0f6      	beq.n	8011836 <__sflush_r+0xae>
 8011848:	0793      	lsls	r3, r2, #30
 801184a:	680e      	ldr	r6, [r1, #0]
 801184c:	bf08      	it	eq
 801184e:	694b      	ldreq	r3, [r1, #20]
 8011850:	600f      	str	r7, [r1, #0]
 8011852:	bf18      	it	ne
 8011854:	2300      	movne	r3, #0
 8011856:	eba6 0807 	sub.w	r8, r6, r7
 801185a:	608b      	str	r3, [r1, #8]
 801185c:	f1b8 0f00 	cmp.w	r8, #0
 8011860:	dde9      	ble.n	8011836 <__sflush_r+0xae>
 8011862:	6a21      	ldr	r1, [r4, #32]
 8011864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011866:	4643      	mov	r3, r8
 8011868:	463a      	mov	r2, r7
 801186a:	4628      	mov	r0, r5
 801186c:	47b0      	blx	r6
 801186e:	2800      	cmp	r0, #0
 8011870:	dc08      	bgt.n	8011884 <__sflush_r+0xfc>
 8011872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801187a:	81a3      	strh	r3, [r4, #12]
 801187c:	f04f 30ff 	mov.w	r0, #4294967295
 8011880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011884:	4407      	add	r7, r0
 8011886:	eba8 0800 	sub.w	r8, r8, r0
 801188a:	e7e7      	b.n	801185c <__sflush_r+0xd4>
 801188c:	20400001 	.word	0x20400001

08011890 <_fflush_r>:
 8011890:	b538      	push	{r3, r4, r5, lr}
 8011892:	690b      	ldr	r3, [r1, #16]
 8011894:	4605      	mov	r5, r0
 8011896:	460c      	mov	r4, r1
 8011898:	b913      	cbnz	r3, 80118a0 <_fflush_r+0x10>
 801189a:	2500      	movs	r5, #0
 801189c:	4628      	mov	r0, r5
 801189e:	bd38      	pop	{r3, r4, r5, pc}
 80118a0:	b118      	cbz	r0, 80118aa <_fflush_r+0x1a>
 80118a2:	6a03      	ldr	r3, [r0, #32]
 80118a4:	b90b      	cbnz	r3, 80118aa <_fflush_r+0x1a>
 80118a6:	f7ff fa0d 	bl	8010cc4 <__sinit>
 80118aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d0f3      	beq.n	801189a <_fflush_r+0xa>
 80118b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80118b4:	07d0      	lsls	r0, r2, #31
 80118b6:	d404      	bmi.n	80118c2 <_fflush_r+0x32>
 80118b8:	0599      	lsls	r1, r3, #22
 80118ba:	d402      	bmi.n	80118c2 <_fflush_r+0x32>
 80118bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118be:	f7ff fbfe 	bl	80110be <__retarget_lock_acquire_recursive>
 80118c2:	4628      	mov	r0, r5
 80118c4:	4621      	mov	r1, r4
 80118c6:	f7ff ff5f 	bl	8011788 <__sflush_r>
 80118ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118cc:	07da      	lsls	r2, r3, #31
 80118ce:	4605      	mov	r5, r0
 80118d0:	d4e4      	bmi.n	801189c <_fflush_r+0xc>
 80118d2:	89a3      	ldrh	r3, [r4, #12]
 80118d4:	059b      	lsls	r3, r3, #22
 80118d6:	d4e1      	bmi.n	801189c <_fflush_r+0xc>
 80118d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118da:	f7ff fbf1 	bl	80110c0 <__retarget_lock_release_recursive>
 80118de:	e7dd      	b.n	801189c <_fflush_r+0xc>

080118e0 <fiprintf>:
 80118e0:	b40e      	push	{r1, r2, r3}
 80118e2:	b503      	push	{r0, r1, lr}
 80118e4:	4601      	mov	r1, r0
 80118e6:	ab03      	add	r3, sp, #12
 80118e8:	4805      	ldr	r0, [pc, #20]	@ (8011900 <fiprintf+0x20>)
 80118ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ee:	6800      	ldr	r0, [r0, #0]
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	f000 f87f 	bl	80119f4 <_vfiprintf_r>
 80118f6:	b002      	add	sp, #8
 80118f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118fc:	b003      	add	sp, #12
 80118fe:	4770      	bx	lr
 8011900:	20000268 	.word	0x20000268

08011904 <memmove>:
 8011904:	4288      	cmp	r0, r1
 8011906:	b510      	push	{r4, lr}
 8011908:	eb01 0402 	add.w	r4, r1, r2
 801190c:	d902      	bls.n	8011914 <memmove+0x10>
 801190e:	4284      	cmp	r4, r0
 8011910:	4623      	mov	r3, r4
 8011912:	d807      	bhi.n	8011924 <memmove+0x20>
 8011914:	1e43      	subs	r3, r0, #1
 8011916:	42a1      	cmp	r1, r4
 8011918:	d008      	beq.n	801192c <memmove+0x28>
 801191a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801191e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011922:	e7f8      	b.n	8011916 <memmove+0x12>
 8011924:	4402      	add	r2, r0
 8011926:	4601      	mov	r1, r0
 8011928:	428a      	cmp	r2, r1
 801192a:	d100      	bne.n	801192e <memmove+0x2a>
 801192c:	bd10      	pop	{r4, pc}
 801192e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011936:	e7f7      	b.n	8011928 <memmove+0x24>

08011938 <abort>:
 8011938:	b508      	push	{r3, lr}
 801193a:	2006      	movs	r0, #6
 801193c:	f000 fa2e 	bl	8011d9c <raise>
 8011940:	2001      	movs	r0, #1
 8011942:	f7f1 f901 	bl	8002b48 <_exit>

08011946 <_realloc_r>:
 8011946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801194a:	4607      	mov	r7, r0
 801194c:	4614      	mov	r4, r2
 801194e:	460d      	mov	r5, r1
 8011950:	b921      	cbnz	r1, 801195c <_realloc_r+0x16>
 8011952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011956:	4611      	mov	r1, r2
 8011958:	f7ff b818 	b.w	801098c <_malloc_r>
 801195c:	b92a      	cbnz	r2, 801196a <_realloc_r+0x24>
 801195e:	f7ff fbe5 	bl	801112c <_free_r>
 8011962:	4625      	mov	r5, r4
 8011964:	4628      	mov	r0, r5
 8011966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801196a:	f000 fa33 	bl	8011dd4 <_malloc_usable_size_r>
 801196e:	4284      	cmp	r4, r0
 8011970:	4606      	mov	r6, r0
 8011972:	d802      	bhi.n	801197a <_realloc_r+0x34>
 8011974:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011978:	d8f4      	bhi.n	8011964 <_realloc_r+0x1e>
 801197a:	4621      	mov	r1, r4
 801197c:	4638      	mov	r0, r7
 801197e:	f7ff f805 	bl	801098c <_malloc_r>
 8011982:	4680      	mov	r8, r0
 8011984:	b908      	cbnz	r0, 801198a <_realloc_r+0x44>
 8011986:	4645      	mov	r5, r8
 8011988:	e7ec      	b.n	8011964 <_realloc_r+0x1e>
 801198a:	42b4      	cmp	r4, r6
 801198c:	4622      	mov	r2, r4
 801198e:	4629      	mov	r1, r5
 8011990:	bf28      	it	cs
 8011992:	4632      	movcs	r2, r6
 8011994:	f7ff fb9d 	bl	80110d2 <memcpy>
 8011998:	4629      	mov	r1, r5
 801199a:	4638      	mov	r0, r7
 801199c:	f7ff fbc6 	bl	801112c <_free_r>
 80119a0:	e7f1      	b.n	8011986 <_realloc_r+0x40>

080119a2 <__sfputc_r>:
 80119a2:	6893      	ldr	r3, [r2, #8]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	b410      	push	{r4}
 80119aa:	6093      	str	r3, [r2, #8]
 80119ac:	da08      	bge.n	80119c0 <__sfputc_r+0x1e>
 80119ae:	6994      	ldr	r4, [r2, #24]
 80119b0:	42a3      	cmp	r3, r4
 80119b2:	db01      	blt.n	80119b8 <__sfputc_r+0x16>
 80119b4:	290a      	cmp	r1, #10
 80119b6:	d103      	bne.n	80119c0 <__sfputc_r+0x1e>
 80119b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119bc:	f000 b932 	b.w	8011c24 <__swbuf_r>
 80119c0:	6813      	ldr	r3, [r2, #0]
 80119c2:	1c58      	adds	r0, r3, #1
 80119c4:	6010      	str	r0, [r2, #0]
 80119c6:	7019      	strb	r1, [r3, #0]
 80119c8:	4608      	mov	r0, r1
 80119ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <__sfputs_r>:
 80119d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119d2:	4606      	mov	r6, r0
 80119d4:	460f      	mov	r7, r1
 80119d6:	4614      	mov	r4, r2
 80119d8:	18d5      	adds	r5, r2, r3
 80119da:	42ac      	cmp	r4, r5
 80119dc:	d101      	bne.n	80119e2 <__sfputs_r+0x12>
 80119de:	2000      	movs	r0, #0
 80119e0:	e007      	b.n	80119f2 <__sfputs_r+0x22>
 80119e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119e6:	463a      	mov	r2, r7
 80119e8:	4630      	mov	r0, r6
 80119ea:	f7ff ffda 	bl	80119a2 <__sfputc_r>
 80119ee:	1c43      	adds	r3, r0, #1
 80119f0:	d1f3      	bne.n	80119da <__sfputs_r+0xa>
 80119f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080119f4 <_vfiprintf_r>:
 80119f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f8:	460d      	mov	r5, r1
 80119fa:	b09d      	sub	sp, #116	@ 0x74
 80119fc:	4614      	mov	r4, r2
 80119fe:	4698      	mov	r8, r3
 8011a00:	4606      	mov	r6, r0
 8011a02:	b118      	cbz	r0, 8011a0c <_vfiprintf_r+0x18>
 8011a04:	6a03      	ldr	r3, [r0, #32]
 8011a06:	b90b      	cbnz	r3, 8011a0c <_vfiprintf_r+0x18>
 8011a08:	f7ff f95c 	bl	8010cc4 <__sinit>
 8011a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a0e:	07d9      	lsls	r1, r3, #31
 8011a10:	d405      	bmi.n	8011a1e <_vfiprintf_r+0x2a>
 8011a12:	89ab      	ldrh	r3, [r5, #12]
 8011a14:	059a      	lsls	r2, r3, #22
 8011a16:	d402      	bmi.n	8011a1e <_vfiprintf_r+0x2a>
 8011a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a1a:	f7ff fb50 	bl	80110be <__retarget_lock_acquire_recursive>
 8011a1e:	89ab      	ldrh	r3, [r5, #12]
 8011a20:	071b      	lsls	r3, r3, #28
 8011a22:	d501      	bpl.n	8011a28 <_vfiprintf_r+0x34>
 8011a24:	692b      	ldr	r3, [r5, #16]
 8011a26:	b99b      	cbnz	r3, 8011a50 <_vfiprintf_r+0x5c>
 8011a28:	4629      	mov	r1, r5
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f000 f938 	bl	8011ca0 <__swsetup_r>
 8011a30:	b170      	cbz	r0, 8011a50 <_vfiprintf_r+0x5c>
 8011a32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a34:	07dc      	lsls	r4, r3, #31
 8011a36:	d504      	bpl.n	8011a42 <_vfiprintf_r+0x4e>
 8011a38:	f04f 30ff 	mov.w	r0, #4294967295
 8011a3c:	b01d      	add	sp, #116	@ 0x74
 8011a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a42:	89ab      	ldrh	r3, [r5, #12]
 8011a44:	0598      	lsls	r0, r3, #22
 8011a46:	d4f7      	bmi.n	8011a38 <_vfiprintf_r+0x44>
 8011a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a4a:	f7ff fb39 	bl	80110c0 <__retarget_lock_release_recursive>
 8011a4e:	e7f3      	b.n	8011a38 <_vfiprintf_r+0x44>
 8011a50:	2300      	movs	r3, #0
 8011a52:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a54:	2320      	movs	r3, #32
 8011a56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a5e:	2330      	movs	r3, #48	@ 0x30
 8011a60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011c10 <_vfiprintf_r+0x21c>
 8011a64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a68:	f04f 0901 	mov.w	r9, #1
 8011a6c:	4623      	mov	r3, r4
 8011a6e:	469a      	mov	sl, r3
 8011a70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a74:	b10a      	cbz	r2, 8011a7a <_vfiprintf_r+0x86>
 8011a76:	2a25      	cmp	r2, #37	@ 0x25
 8011a78:	d1f9      	bne.n	8011a6e <_vfiprintf_r+0x7a>
 8011a7a:	ebba 0b04 	subs.w	fp, sl, r4
 8011a7e:	d00b      	beq.n	8011a98 <_vfiprintf_r+0xa4>
 8011a80:	465b      	mov	r3, fp
 8011a82:	4622      	mov	r2, r4
 8011a84:	4629      	mov	r1, r5
 8011a86:	4630      	mov	r0, r6
 8011a88:	f7ff ffa2 	bl	80119d0 <__sfputs_r>
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	f000 80a7 	beq.w	8011be0 <_vfiprintf_r+0x1ec>
 8011a92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a94:	445a      	add	r2, fp
 8011a96:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a98:	f89a 3000 	ldrb.w	r3, [sl]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f000 809f 	beq.w	8011be0 <_vfiprintf_r+0x1ec>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8011aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011aac:	f10a 0a01 	add.w	sl, sl, #1
 8011ab0:	9304      	str	r3, [sp, #16]
 8011ab2:	9307      	str	r3, [sp, #28]
 8011ab4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ab8:	931a      	str	r3, [sp, #104]	@ 0x68
 8011aba:	4654      	mov	r4, sl
 8011abc:	2205      	movs	r2, #5
 8011abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ac2:	4853      	ldr	r0, [pc, #332]	@ (8011c10 <_vfiprintf_r+0x21c>)
 8011ac4:	f7ee fb8c 	bl	80001e0 <memchr>
 8011ac8:	9a04      	ldr	r2, [sp, #16]
 8011aca:	b9d8      	cbnz	r0, 8011b04 <_vfiprintf_r+0x110>
 8011acc:	06d1      	lsls	r1, r2, #27
 8011ace:	bf44      	itt	mi
 8011ad0:	2320      	movmi	r3, #32
 8011ad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ad6:	0713      	lsls	r3, r2, #28
 8011ad8:	bf44      	itt	mi
 8011ada:	232b      	movmi	r3, #43	@ 0x2b
 8011adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ae4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ae6:	d015      	beq.n	8011b14 <_vfiprintf_r+0x120>
 8011ae8:	9a07      	ldr	r2, [sp, #28]
 8011aea:	4654      	mov	r4, sl
 8011aec:	2000      	movs	r0, #0
 8011aee:	f04f 0c0a 	mov.w	ip, #10
 8011af2:	4621      	mov	r1, r4
 8011af4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011af8:	3b30      	subs	r3, #48	@ 0x30
 8011afa:	2b09      	cmp	r3, #9
 8011afc:	d94b      	bls.n	8011b96 <_vfiprintf_r+0x1a2>
 8011afe:	b1b0      	cbz	r0, 8011b2e <_vfiprintf_r+0x13a>
 8011b00:	9207      	str	r2, [sp, #28]
 8011b02:	e014      	b.n	8011b2e <_vfiprintf_r+0x13a>
 8011b04:	eba0 0308 	sub.w	r3, r0, r8
 8011b08:	fa09 f303 	lsl.w	r3, r9, r3
 8011b0c:	4313      	orrs	r3, r2
 8011b0e:	9304      	str	r3, [sp, #16]
 8011b10:	46a2      	mov	sl, r4
 8011b12:	e7d2      	b.n	8011aba <_vfiprintf_r+0xc6>
 8011b14:	9b03      	ldr	r3, [sp, #12]
 8011b16:	1d19      	adds	r1, r3, #4
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	9103      	str	r1, [sp, #12]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	bfbb      	ittet	lt
 8011b20:	425b      	neglt	r3, r3
 8011b22:	f042 0202 	orrlt.w	r2, r2, #2
 8011b26:	9307      	strge	r3, [sp, #28]
 8011b28:	9307      	strlt	r3, [sp, #28]
 8011b2a:	bfb8      	it	lt
 8011b2c:	9204      	strlt	r2, [sp, #16]
 8011b2e:	7823      	ldrb	r3, [r4, #0]
 8011b30:	2b2e      	cmp	r3, #46	@ 0x2e
 8011b32:	d10a      	bne.n	8011b4a <_vfiprintf_r+0x156>
 8011b34:	7863      	ldrb	r3, [r4, #1]
 8011b36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011b38:	d132      	bne.n	8011ba0 <_vfiprintf_r+0x1ac>
 8011b3a:	9b03      	ldr	r3, [sp, #12]
 8011b3c:	1d1a      	adds	r2, r3, #4
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	9203      	str	r2, [sp, #12]
 8011b42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011b46:	3402      	adds	r4, #2
 8011b48:	9305      	str	r3, [sp, #20]
 8011b4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011c20 <_vfiprintf_r+0x22c>
 8011b4e:	7821      	ldrb	r1, [r4, #0]
 8011b50:	2203      	movs	r2, #3
 8011b52:	4650      	mov	r0, sl
 8011b54:	f7ee fb44 	bl	80001e0 <memchr>
 8011b58:	b138      	cbz	r0, 8011b6a <_vfiprintf_r+0x176>
 8011b5a:	9b04      	ldr	r3, [sp, #16]
 8011b5c:	eba0 000a 	sub.w	r0, r0, sl
 8011b60:	2240      	movs	r2, #64	@ 0x40
 8011b62:	4082      	lsls	r2, r0
 8011b64:	4313      	orrs	r3, r2
 8011b66:	3401      	adds	r4, #1
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b6e:	4829      	ldr	r0, [pc, #164]	@ (8011c14 <_vfiprintf_r+0x220>)
 8011b70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b74:	2206      	movs	r2, #6
 8011b76:	f7ee fb33 	bl	80001e0 <memchr>
 8011b7a:	2800      	cmp	r0, #0
 8011b7c:	d03f      	beq.n	8011bfe <_vfiprintf_r+0x20a>
 8011b7e:	4b26      	ldr	r3, [pc, #152]	@ (8011c18 <_vfiprintf_r+0x224>)
 8011b80:	bb1b      	cbnz	r3, 8011bca <_vfiprintf_r+0x1d6>
 8011b82:	9b03      	ldr	r3, [sp, #12]
 8011b84:	3307      	adds	r3, #7
 8011b86:	f023 0307 	bic.w	r3, r3, #7
 8011b8a:	3308      	adds	r3, #8
 8011b8c:	9303      	str	r3, [sp, #12]
 8011b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b90:	443b      	add	r3, r7
 8011b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b94:	e76a      	b.n	8011a6c <_vfiprintf_r+0x78>
 8011b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b9a:	460c      	mov	r4, r1
 8011b9c:	2001      	movs	r0, #1
 8011b9e:	e7a8      	b.n	8011af2 <_vfiprintf_r+0xfe>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	3401      	adds	r4, #1
 8011ba4:	9305      	str	r3, [sp, #20]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	f04f 0c0a 	mov.w	ip, #10
 8011bac:	4620      	mov	r0, r4
 8011bae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bb2:	3a30      	subs	r2, #48	@ 0x30
 8011bb4:	2a09      	cmp	r2, #9
 8011bb6:	d903      	bls.n	8011bc0 <_vfiprintf_r+0x1cc>
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d0c6      	beq.n	8011b4a <_vfiprintf_r+0x156>
 8011bbc:	9105      	str	r1, [sp, #20]
 8011bbe:	e7c4      	b.n	8011b4a <_vfiprintf_r+0x156>
 8011bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bc4:	4604      	mov	r4, r0
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	e7f0      	b.n	8011bac <_vfiprintf_r+0x1b8>
 8011bca:	ab03      	add	r3, sp, #12
 8011bcc:	9300      	str	r3, [sp, #0]
 8011bce:	462a      	mov	r2, r5
 8011bd0:	4b12      	ldr	r3, [pc, #72]	@ (8011c1c <_vfiprintf_r+0x228>)
 8011bd2:	a904      	add	r1, sp, #16
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f3af 8000 	nop.w
 8011bda:	4607      	mov	r7, r0
 8011bdc:	1c78      	adds	r0, r7, #1
 8011bde:	d1d6      	bne.n	8011b8e <_vfiprintf_r+0x19a>
 8011be0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011be2:	07d9      	lsls	r1, r3, #31
 8011be4:	d405      	bmi.n	8011bf2 <_vfiprintf_r+0x1fe>
 8011be6:	89ab      	ldrh	r3, [r5, #12]
 8011be8:	059a      	lsls	r2, r3, #22
 8011bea:	d402      	bmi.n	8011bf2 <_vfiprintf_r+0x1fe>
 8011bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bee:	f7ff fa67 	bl	80110c0 <__retarget_lock_release_recursive>
 8011bf2:	89ab      	ldrh	r3, [r5, #12]
 8011bf4:	065b      	lsls	r3, r3, #25
 8011bf6:	f53f af1f 	bmi.w	8011a38 <_vfiprintf_r+0x44>
 8011bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011bfc:	e71e      	b.n	8011a3c <_vfiprintf_r+0x48>
 8011bfe:	ab03      	add	r3, sp, #12
 8011c00:	9300      	str	r3, [sp, #0]
 8011c02:	462a      	mov	r2, r5
 8011c04:	4b05      	ldr	r3, [pc, #20]	@ (8011c1c <_vfiprintf_r+0x228>)
 8011c06:	a904      	add	r1, sp, #16
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f7ff fc9f 	bl	801154c <_printf_i>
 8011c0e:	e7e4      	b.n	8011bda <_vfiprintf_r+0x1e6>
 8011c10:	08012b06 	.word	0x08012b06
 8011c14:	08012b10 	.word	0x08012b10
 8011c18:	00000000 	.word	0x00000000
 8011c1c:	080119d1 	.word	0x080119d1
 8011c20:	08012b0c 	.word	0x08012b0c

08011c24 <__swbuf_r>:
 8011c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c26:	460e      	mov	r6, r1
 8011c28:	4614      	mov	r4, r2
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	b118      	cbz	r0, 8011c36 <__swbuf_r+0x12>
 8011c2e:	6a03      	ldr	r3, [r0, #32]
 8011c30:	b90b      	cbnz	r3, 8011c36 <__swbuf_r+0x12>
 8011c32:	f7ff f847 	bl	8010cc4 <__sinit>
 8011c36:	69a3      	ldr	r3, [r4, #24]
 8011c38:	60a3      	str	r3, [r4, #8]
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	071a      	lsls	r2, r3, #28
 8011c3e:	d501      	bpl.n	8011c44 <__swbuf_r+0x20>
 8011c40:	6923      	ldr	r3, [r4, #16]
 8011c42:	b943      	cbnz	r3, 8011c56 <__swbuf_r+0x32>
 8011c44:	4621      	mov	r1, r4
 8011c46:	4628      	mov	r0, r5
 8011c48:	f000 f82a 	bl	8011ca0 <__swsetup_r>
 8011c4c:	b118      	cbz	r0, 8011c56 <__swbuf_r+0x32>
 8011c4e:	f04f 37ff 	mov.w	r7, #4294967295
 8011c52:	4638      	mov	r0, r7
 8011c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c56:	6823      	ldr	r3, [r4, #0]
 8011c58:	6922      	ldr	r2, [r4, #16]
 8011c5a:	1a98      	subs	r0, r3, r2
 8011c5c:	6963      	ldr	r3, [r4, #20]
 8011c5e:	b2f6      	uxtb	r6, r6
 8011c60:	4283      	cmp	r3, r0
 8011c62:	4637      	mov	r7, r6
 8011c64:	dc05      	bgt.n	8011c72 <__swbuf_r+0x4e>
 8011c66:	4621      	mov	r1, r4
 8011c68:	4628      	mov	r0, r5
 8011c6a:	f7ff fe11 	bl	8011890 <_fflush_r>
 8011c6e:	2800      	cmp	r0, #0
 8011c70:	d1ed      	bne.n	8011c4e <__swbuf_r+0x2a>
 8011c72:	68a3      	ldr	r3, [r4, #8]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	60a3      	str	r3, [r4, #8]
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	6022      	str	r2, [r4, #0]
 8011c7e:	701e      	strb	r6, [r3, #0]
 8011c80:	6962      	ldr	r2, [r4, #20]
 8011c82:	1c43      	adds	r3, r0, #1
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d004      	beq.n	8011c92 <__swbuf_r+0x6e>
 8011c88:	89a3      	ldrh	r3, [r4, #12]
 8011c8a:	07db      	lsls	r3, r3, #31
 8011c8c:	d5e1      	bpl.n	8011c52 <__swbuf_r+0x2e>
 8011c8e:	2e0a      	cmp	r6, #10
 8011c90:	d1df      	bne.n	8011c52 <__swbuf_r+0x2e>
 8011c92:	4621      	mov	r1, r4
 8011c94:	4628      	mov	r0, r5
 8011c96:	f7ff fdfb 	bl	8011890 <_fflush_r>
 8011c9a:	2800      	cmp	r0, #0
 8011c9c:	d0d9      	beq.n	8011c52 <__swbuf_r+0x2e>
 8011c9e:	e7d6      	b.n	8011c4e <__swbuf_r+0x2a>

08011ca0 <__swsetup_r>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	4b29      	ldr	r3, [pc, #164]	@ (8011d48 <__swsetup_r+0xa8>)
 8011ca4:	4605      	mov	r5, r0
 8011ca6:	6818      	ldr	r0, [r3, #0]
 8011ca8:	460c      	mov	r4, r1
 8011caa:	b118      	cbz	r0, 8011cb4 <__swsetup_r+0x14>
 8011cac:	6a03      	ldr	r3, [r0, #32]
 8011cae:	b90b      	cbnz	r3, 8011cb4 <__swsetup_r+0x14>
 8011cb0:	f7ff f808 	bl	8010cc4 <__sinit>
 8011cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb8:	0719      	lsls	r1, r3, #28
 8011cba:	d422      	bmi.n	8011d02 <__swsetup_r+0x62>
 8011cbc:	06da      	lsls	r2, r3, #27
 8011cbe:	d407      	bmi.n	8011cd0 <__swsetup_r+0x30>
 8011cc0:	2209      	movs	r2, #9
 8011cc2:	602a      	str	r2, [r5, #0]
 8011cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cc8:	81a3      	strh	r3, [r4, #12]
 8011cca:	f04f 30ff 	mov.w	r0, #4294967295
 8011cce:	e033      	b.n	8011d38 <__swsetup_r+0x98>
 8011cd0:	0758      	lsls	r0, r3, #29
 8011cd2:	d512      	bpl.n	8011cfa <__swsetup_r+0x5a>
 8011cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cd6:	b141      	cbz	r1, 8011cea <__swsetup_r+0x4a>
 8011cd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cdc:	4299      	cmp	r1, r3
 8011cde:	d002      	beq.n	8011ce6 <__swsetup_r+0x46>
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	f7ff fa23 	bl	801112c <_free_r>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cea:	89a3      	ldrh	r3, [r4, #12]
 8011cec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011cf0:	81a3      	strh	r3, [r4, #12]
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	6063      	str	r3, [r4, #4]
 8011cf6:	6923      	ldr	r3, [r4, #16]
 8011cf8:	6023      	str	r3, [r4, #0]
 8011cfa:	89a3      	ldrh	r3, [r4, #12]
 8011cfc:	f043 0308 	orr.w	r3, r3, #8
 8011d00:	81a3      	strh	r3, [r4, #12]
 8011d02:	6923      	ldr	r3, [r4, #16]
 8011d04:	b94b      	cbnz	r3, 8011d1a <__swsetup_r+0x7a>
 8011d06:	89a3      	ldrh	r3, [r4, #12]
 8011d08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d10:	d003      	beq.n	8011d1a <__swsetup_r+0x7a>
 8011d12:	4621      	mov	r1, r4
 8011d14:	4628      	mov	r0, r5
 8011d16:	f000 f88b 	bl	8011e30 <__smakebuf_r>
 8011d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d1e:	f013 0201 	ands.w	r2, r3, #1
 8011d22:	d00a      	beq.n	8011d3a <__swsetup_r+0x9a>
 8011d24:	2200      	movs	r2, #0
 8011d26:	60a2      	str	r2, [r4, #8]
 8011d28:	6962      	ldr	r2, [r4, #20]
 8011d2a:	4252      	negs	r2, r2
 8011d2c:	61a2      	str	r2, [r4, #24]
 8011d2e:	6922      	ldr	r2, [r4, #16]
 8011d30:	b942      	cbnz	r2, 8011d44 <__swsetup_r+0xa4>
 8011d32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d36:	d1c5      	bne.n	8011cc4 <__swsetup_r+0x24>
 8011d38:	bd38      	pop	{r3, r4, r5, pc}
 8011d3a:	0799      	lsls	r1, r3, #30
 8011d3c:	bf58      	it	pl
 8011d3e:	6962      	ldrpl	r2, [r4, #20]
 8011d40:	60a2      	str	r2, [r4, #8]
 8011d42:	e7f4      	b.n	8011d2e <__swsetup_r+0x8e>
 8011d44:	2000      	movs	r0, #0
 8011d46:	e7f7      	b.n	8011d38 <__swsetup_r+0x98>
 8011d48:	20000268 	.word	0x20000268

08011d4c <_raise_r>:
 8011d4c:	291f      	cmp	r1, #31
 8011d4e:	b538      	push	{r3, r4, r5, lr}
 8011d50:	4605      	mov	r5, r0
 8011d52:	460c      	mov	r4, r1
 8011d54:	d904      	bls.n	8011d60 <_raise_r+0x14>
 8011d56:	2316      	movs	r3, #22
 8011d58:	6003      	str	r3, [r0, #0]
 8011d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d5e:	bd38      	pop	{r3, r4, r5, pc}
 8011d60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011d62:	b112      	cbz	r2, 8011d6a <_raise_r+0x1e>
 8011d64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011d68:	b94b      	cbnz	r3, 8011d7e <_raise_r+0x32>
 8011d6a:	4628      	mov	r0, r5
 8011d6c:	f000 f830 	bl	8011dd0 <_getpid_r>
 8011d70:	4622      	mov	r2, r4
 8011d72:	4601      	mov	r1, r0
 8011d74:	4628      	mov	r0, r5
 8011d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d7a:	f000 b817 	b.w	8011dac <_kill_r>
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d00a      	beq.n	8011d98 <_raise_r+0x4c>
 8011d82:	1c59      	adds	r1, r3, #1
 8011d84:	d103      	bne.n	8011d8e <_raise_r+0x42>
 8011d86:	2316      	movs	r3, #22
 8011d88:	6003      	str	r3, [r0, #0]
 8011d8a:	2001      	movs	r0, #1
 8011d8c:	e7e7      	b.n	8011d5e <_raise_r+0x12>
 8011d8e:	2100      	movs	r1, #0
 8011d90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011d94:	4620      	mov	r0, r4
 8011d96:	4798      	blx	r3
 8011d98:	2000      	movs	r0, #0
 8011d9a:	e7e0      	b.n	8011d5e <_raise_r+0x12>

08011d9c <raise>:
 8011d9c:	4b02      	ldr	r3, [pc, #8]	@ (8011da8 <raise+0xc>)
 8011d9e:	4601      	mov	r1, r0
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	f7ff bfd3 	b.w	8011d4c <_raise_r>
 8011da6:	bf00      	nop
 8011da8:	20000268 	.word	0x20000268

08011dac <_kill_r>:
 8011dac:	b538      	push	{r3, r4, r5, lr}
 8011dae:	4d07      	ldr	r5, [pc, #28]	@ (8011dcc <_kill_r+0x20>)
 8011db0:	2300      	movs	r3, #0
 8011db2:	4604      	mov	r4, r0
 8011db4:	4608      	mov	r0, r1
 8011db6:	4611      	mov	r1, r2
 8011db8:	602b      	str	r3, [r5, #0]
 8011dba:	f7f0 feb5 	bl	8002b28 <_kill>
 8011dbe:	1c43      	adds	r3, r0, #1
 8011dc0:	d102      	bne.n	8011dc8 <_kill_r+0x1c>
 8011dc2:	682b      	ldr	r3, [r5, #0]
 8011dc4:	b103      	cbz	r3, 8011dc8 <_kill_r+0x1c>
 8011dc6:	6023      	str	r3, [r4, #0]
 8011dc8:	bd38      	pop	{r3, r4, r5, pc}
 8011dca:	bf00      	nop
 8011dcc:	20011624 	.word	0x20011624

08011dd0 <_getpid_r>:
 8011dd0:	f7f0 bea2 	b.w	8002b18 <_getpid>

08011dd4 <_malloc_usable_size_r>:
 8011dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dd8:	1f18      	subs	r0, r3, #4
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	bfbc      	itt	lt
 8011dde:	580b      	ldrlt	r3, [r1, r0]
 8011de0:	18c0      	addlt	r0, r0, r3
 8011de2:	4770      	bx	lr

08011de4 <__swhatbuf_r>:
 8011de4:	b570      	push	{r4, r5, r6, lr}
 8011de6:	460c      	mov	r4, r1
 8011de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dec:	2900      	cmp	r1, #0
 8011dee:	b096      	sub	sp, #88	@ 0x58
 8011df0:	4615      	mov	r5, r2
 8011df2:	461e      	mov	r6, r3
 8011df4:	da0d      	bge.n	8011e12 <__swhatbuf_r+0x2e>
 8011df6:	89a3      	ldrh	r3, [r4, #12]
 8011df8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011dfc:	f04f 0100 	mov.w	r1, #0
 8011e00:	bf14      	ite	ne
 8011e02:	2340      	movne	r3, #64	@ 0x40
 8011e04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011e08:	2000      	movs	r0, #0
 8011e0a:	6031      	str	r1, [r6, #0]
 8011e0c:	602b      	str	r3, [r5, #0]
 8011e0e:	b016      	add	sp, #88	@ 0x58
 8011e10:	bd70      	pop	{r4, r5, r6, pc}
 8011e12:	466a      	mov	r2, sp
 8011e14:	f000 f848 	bl	8011ea8 <_fstat_r>
 8011e18:	2800      	cmp	r0, #0
 8011e1a:	dbec      	blt.n	8011df6 <__swhatbuf_r+0x12>
 8011e1c:	9901      	ldr	r1, [sp, #4]
 8011e1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011e22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011e26:	4259      	negs	r1, r3
 8011e28:	4159      	adcs	r1, r3
 8011e2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e2e:	e7eb      	b.n	8011e08 <__swhatbuf_r+0x24>

08011e30 <__smakebuf_r>:
 8011e30:	898b      	ldrh	r3, [r1, #12]
 8011e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e34:	079d      	lsls	r5, r3, #30
 8011e36:	4606      	mov	r6, r0
 8011e38:	460c      	mov	r4, r1
 8011e3a:	d507      	bpl.n	8011e4c <__smakebuf_r+0x1c>
 8011e3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011e40:	6023      	str	r3, [r4, #0]
 8011e42:	6123      	str	r3, [r4, #16]
 8011e44:	2301      	movs	r3, #1
 8011e46:	6163      	str	r3, [r4, #20]
 8011e48:	b003      	add	sp, #12
 8011e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e4c:	ab01      	add	r3, sp, #4
 8011e4e:	466a      	mov	r2, sp
 8011e50:	f7ff ffc8 	bl	8011de4 <__swhatbuf_r>
 8011e54:	9f00      	ldr	r7, [sp, #0]
 8011e56:	4605      	mov	r5, r0
 8011e58:	4639      	mov	r1, r7
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	f7fe fd96 	bl	801098c <_malloc_r>
 8011e60:	b948      	cbnz	r0, 8011e76 <__smakebuf_r+0x46>
 8011e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e66:	059a      	lsls	r2, r3, #22
 8011e68:	d4ee      	bmi.n	8011e48 <__smakebuf_r+0x18>
 8011e6a:	f023 0303 	bic.w	r3, r3, #3
 8011e6e:	f043 0302 	orr.w	r3, r3, #2
 8011e72:	81a3      	strh	r3, [r4, #12]
 8011e74:	e7e2      	b.n	8011e3c <__smakebuf_r+0xc>
 8011e76:	89a3      	ldrh	r3, [r4, #12]
 8011e78:	6020      	str	r0, [r4, #0]
 8011e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	9b01      	ldr	r3, [sp, #4]
 8011e82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011e86:	b15b      	cbz	r3, 8011ea0 <__smakebuf_r+0x70>
 8011e88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	f000 f81d 	bl	8011ecc <_isatty_r>
 8011e92:	b128      	cbz	r0, 8011ea0 <__smakebuf_r+0x70>
 8011e94:	89a3      	ldrh	r3, [r4, #12]
 8011e96:	f023 0303 	bic.w	r3, r3, #3
 8011e9a:	f043 0301 	orr.w	r3, r3, #1
 8011e9e:	81a3      	strh	r3, [r4, #12]
 8011ea0:	89a3      	ldrh	r3, [r4, #12]
 8011ea2:	431d      	orrs	r5, r3
 8011ea4:	81a5      	strh	r5, [r4, #12]
 8011ea6:	e7cf      	b.n	8011e48 <__smakebuf_r+0x18>

08011ea8 <_fstat_r>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	4d07      	ldr	r5, [pc, #28]	@ (8011ec8 <_fstat_r+0x20>)
 8011eac:	2300      	movs	r3, #0
 8011eae:	4604      	mov	r4, r0
 8011eb0:	4608      	mov	r0, r1
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	602b      	str	r3, [r5, #0]
 8011eb6:	f7f0 fe97 	bl	8002be8 <_fstat>
 8011eba:	1c43      	adds	r3, r0, #1
 8011ebc:	d102      	bne.n	8011ec4 <_fstat_r+0x1c>
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	b103      	cbz	r3, 8011ec4 <_fstat_r+0x1c>
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	bd38      	pop	{r3, r4, r5, pc}
 8011ec6:	bf00      	nop
 8011ec8:	20011624 	.word	0x20011624

08011ecc <_isatty_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	4d06      	ldr	r5, [pc, #24]	@ (8011ee8 <_isatty_r+0x1c>)
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	4608      	mov	r0, r1
 8011ed6:	602b      	str	r3, [r5, #0]
 8011ed8:	f7f0 fe96 	bl	8002c08 <_isatty>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d102      	bne.n	8011ee6 <_isatty_r+0x1a>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	b103      	cbz	r3, 8011ee6 <_isatty_r+0x1a>
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	20011624 	.word	0x20011624

08011eec <_init>:
 8011eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eee:	bf00      	nop
 8011ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011ef2:	bc08      	pop	{r3}
 8011ef4:	469e      	mov	lr, r3
 8011ef6:	4770      	bx	lr

08011ef8 <_fini>:
 8011ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011efa:	bf00      	nop
 8011efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011efe:	bc08      	pop	{r3}
 8011f00:	469e      	mov	lr, r3
 8011f02:	4770      	bx	lr
