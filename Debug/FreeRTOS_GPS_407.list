
FreeRTOS_GPS_407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f78  08015c00  08015c00  00016c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b78  08016b78  0001845c  2**0
                  CONTENTS
  4 .ARM          00000008  08016b78  08016b78  00017b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b80  08016b80  0001845c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b80  08016b80  00017b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b84  08016b84  00017b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000045c  20000000  08016b88  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000133d0  20000460  08016fe4  00018460  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20013830  08016fe4  00018830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001845c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee82  00000000  00000000  0001848c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000076e4  00000000  00000000  0004730e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  0004e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d3e  00000000  00000000  00050ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c953  00000000  00000000  00052d36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035bc7  00000000  00000000  0007f689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e55b8  00000000  00000000  000b5250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019a808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3c0  00000000  00000000  0019a84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a5c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015be8 	.word	0x08015be8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	08015be8 	.word	0x08015be8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b9be 	b.w	8000f7c <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f83c 	bl	8000c84 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2lz>:
 8000c18:	b538      	push	{r3, r4, r5, lr}
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	460d      	mov	r5, r1
 8000c22:	f7ff ff5b 	bl	8000adc <__aeabi_dcmplt>
 8000c26:	b928      	cbnz	r0, 8000c34 <__aeabi_d2lz+0x1c>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c30:	f000 b80a 	b.w	8000c48 <__aeabi_d2ulz>
 8000c34:	4620      	mov	r0, r4
 8000c36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c3a:	f000 f805 	bl	8000c48 <__aeabi_d2ulz>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	bd38      	pop	{r3, r4, r5, pc}
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2ulz>:
 8000c48:	b5d0      	push	{r4, r6, r7, lr}
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <__aeabi_d2ulz+0x34>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4606      	mov	r6, r0
 8000c50:	460f      	mov	r7, r1
 8000c52:	f7ff fcd1 	bl	80005f8 <__aeabi_dmul>
 8000c56:	f7ff ffa7 	bl	8000ba8 <__aeabi_d2uiz>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	f7ff fc52 	bl	8000504 <__aeabi_ui2d>
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <__aeabi_d2ulz+0x38>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f7ff fcc8 	bl	80005f8 <__aeabi_dmul>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	4639      	mov	r1, r7
 8000c70:	f7ff fb0a 	bl	8000288 <__aeabi_dsub>
 8000c74:	f7ff ff98 	bl	8000ba8 <__aeabi_d2uiz>
 8000c78:	4621      	mov	r1, r4
 8000c7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c7c:	3df00000 	.word	0x3df00000
 8000c80:	41f00000 	.word	0x41f00000

08000c84 <__udivmoddi4>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	9d08      	ldr	r5, [sp, #32]
 8000c8a:	468e      	mov	lr, r1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	4688      	mov	r8, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14a      	bne.n	8000d2a <__udivmoddi4+0xa6>
 8000c94:	428a      	cmp	r2, r1
 8000c96:	4617      	mov	r7, r2
 8000c98:	d962      	bls.n	8000d60 <__udivmoddi4+0xdc>
 8000c9a:	fab2 f682 	clz	r6, r2
 8000c9e:	b14e      	cbz	r6, 8000cb4 <__udivmoddi4+0x30>
 8000ca0:	f1c6 0320 	rsb	r3, r6, #32
 8000ca4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	40b7      	lsls	r7, r6
 8000cae:	ea43 0808 	orr.w	r8, r3, r8
 8000cb2:	40b4      	lsls	r4, r6
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	fa1f fc87 	uxth.w	ip, r7
 8000cbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc0:	0c23      	lsrs	r3, r4, #16
 8000cc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cca:	fb01 f20c 	mul.w	r2, r1, ip
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x62>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd8:	f080 80ea 	bcs.w	8000eb0 <__udivmoddi4+0x22c>
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f240 80e7 	bls.w	8000eb0 <__udivmoddi4+0x22c>
 8000ce2:	3902      	subs	r1, #2
 8000ce4:	443b      	add	r3, r7
 8000ce6:	1a9a      	subs	r2, r3, r2
 8000ce8:	b2a3      	uxth	r3, r4
 8000cea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfa:	459c      	cmp	ip, r3
 8000cfc:	d909      	bls.n	8000d12 <__udivmoddi4+0x8e>
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d04:	f080 80d6 	bcs.w	8000eb4 <__udivmoddi4+0x230>
 8000d08:	459c      	cmp	ip, r3
 8000d0a:	f240 80d3 	bls.w	8000eb4 <__udivmoddi4+0x230>
 8000d0e:	443b      	add	r3, r7
 8000d10:	3802      	subs	r0, #2
 8000d12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d16:	eba3 030c 	sub.w	r3, r3, ip
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	b11d      	cbz	r5, 8000d26 <__udivmoddi4+0xa2>
 8000d1e:	40f3      	lsrs	r3, r6
 8000d20:	2200      	movs	r2, #0
 8000d22:	e9c5 3200 	strd	r3, r2, [r5]
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d905      	bls.n	8000d3a <__udivmoddi4+0xb6>
 8000d2e:	b10d      	cbz	r5, 8000d34 <__udivmoddi4+0xb0>
 8000d30:	e9c5 0100 	strd	r0, r1, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4608      	mov	r0, r1
 8000d38:	e7f5      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d3a:	fab3 f183 	clz	r1, r3
 8000d3e:	2900      	cmp	r1, #0
 8000d40:	d146      	bne.n	8000dd0 <__udivmoddi4+0x14c>
 8000d42:	4573      	cmp	r3, lr
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xc8>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 8105 	bhi.w	8000f56 <__udivmoddi4+0x2d2>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4690      	mov	r8, r2
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e5      	beq.n	8000d26 <__udivmoddi4+0xa2>
 8000d5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d5e:	e7e2      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	f000 8090 	beq.w	8000e86 <__udivmoddi4+0x202>
 8000d66:	fab2 f682 	clz	r6, r2
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	f040 80a4 	bne.w	8000eb8 <__udivmoddi4+0x234>
 8000d70:	1a8a      	subs	r2, r1, r2
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	b2bc      	uxth	r4, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x11e>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x11c>
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	f200 80e0 	bhi.w	8000f60 <__udivmoddi4+0x2dc>
 8000da0:	46c4      	mov	ip, r8
 8000da2:	1a9b      	subs	r3, r3, r2
 8000da4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000da8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db0:	fb02 f404 	mul.w	r4, r2, r4
 8000db4:	429c      	cmp	r4, r3
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x144>
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x142>
 8000dc0:	429c      	cmp	r4, r3
 8000dc2:	f200 80ca 	bhi.w	8000f5a <__udivmoddi4+0x2d6>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0x98>
 8000dd0:	f1c1 0620 	rsb	r6, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000dda:	431f      	orrs	r7, r3
 8000ddc:	fa0e f401 	lsl.w	r4, lr, r1
 8000de0:	fa20 f306 	lsr.w	r3, r0, r6
 8000de4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000de8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fa00 f801 	lsl.w	r8, r0, r1
 8000df2:	fa1f fc87 	uxth.w	ip, r7
 8000df6:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x1a0>
 8000e10:	193c      	adds	r4, r7, r4
 8000e12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e16:	f080 809c 	bcs.w	8000f52 <__udivmoddi4+0x2ce>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	f240 8099 	bls.w	8000f52 <__udivmoddi4+0x2ce>
 8000e20:	3802      	subs	r0, #2
 8000e22:	443c      	add	r4, r7
 8000e24:	eba4 040e 	sub.w	r4, r4, lr
 8000e28:	fa1f fe83 	uxth.w	lr, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e3c:	45a4      	cmp	ip, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1ce>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e46:	f080 8082 	bcs.w	8000f4e <__udivmoddi4+0x2ca>
 8000e4a:	45a4      	cmp	ip, r4
 8000e4c:	d97f      	bls.n	8000f4e <__udivmoddi4+0x2ca>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	443c      	add	r4, r7
 8000e52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e56:	eba4 040c 	sub.w	r4, r4, ip
 8000e5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e5e:	4564      	cmp	r4, ip
 8000e60:	4673      	mov	r3, lr
 8000e62:	46e1      	mov	r9, ip
 8000e64:	d362      	bcc.n	8000f2c <__udivmoddi4+0x2a8>
 8000e66:	d05f      	beq.n	8000f28 <__udivmoddi4+0x2a4>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x1fe>
 8000e6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e72:	fa04 f606 	lsl.w	r6, r4, r6
 8000e76:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7a:	431e      	orrs	r6, r3
 8000e7c:	40cc      	lsrs	r4, r1
 8000e7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e82:	2100      	movs	r1, #0
 8000e84:	e74f      	b.n	8000d26 <__udivmoddi4+0xa2>
 8000e86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8a:	0c01      	lsrs	r1, r0, #16
 8000e8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e90:	b280      	uxth	r0, r0
 8000e92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e96:	463b      	mov	r3, r7
 8000e98:	4638      	mov	r0, r7
 8000e9a:	463c      	mov	r4, r7
 8000e9c:	46b8      	mov	r8, r7
 8000e9e:	46be      	mov	lr, r7
 8000ea0:	2620      	movs	r6, #32
 8000ea2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ea6:	eba2 0208 	sub.w	r2, r2, r8
 8000eaa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eae:	e766      	b.n	8000d7e <__udivmoddi4+0xfa>
 8000eb0:	4601      	mov	r1, r0
 8000eb2:	e718      	b.n	8000ce6 <__udivmoddi4+0x62>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e72c      	b.n	8000d12 <__udivmoddi4+0x8e>
 8000eb8:	f1c6 0220 	rsb	r2, r6, #32
 8000ebc:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec0:	40b7      	lsls	r7, r6
 8000ec2:	40b1      	lsls	r1, r6
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed2:	b2bc      	uxth	r4, r7
 8000ed4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed8:	0c11      	lsrs	r1, r2, #16
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb08 f904 	mul.w	r9, r8, r4
 8000ee2:	40b0      	lsls	r0, r6
 8000ee4:	4589      	cmp	r9, r1
 8000ee6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eea:	b280      	uxth	r0, r0
 8000eec:	d93e      	bls.n	8000f6c <__udivmoddi4+0x2e8>
 8000eee:	1879      	adds	r1, r7, r1
 8000ef0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef4:	d201      	bcs.n	8000efa <__udivmoddi4+0x276>
 8000ef6:	4589      	cmp	r9, r1
 8000ef8:	d81f      	bhi.n	8000f3a <__udivmoddi4+0x2b6>
 8000efa:	eba1 0109 	sub.w	r1, r1, r9
 8000efe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f02:	fb09 f804 	mul.w	r8, r9, r4
 8000f06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d229      	bcs.n	8000f68 <__udivmoddi4+0x2e4>
 8000f14:	18ba      	adds	r2, r7, r2
 8000f16:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1a:	d2c4      	bcs.n	8000ea6 <__udivmoddi4+0x222>
 8000f1c:	4542      	cmp	r2, r8
 8000f1e:	d2c2      	bcs.n	8000ea6 <__udivmoddi4+0x222>
 8000f20:	f1a9 0102 	sub.w	r1, r9, #2
 8000f24:	443a      	add	r2, r7
 8000f26:	e7be      	b.n	8000ea6 <__udivmoddi4+0x222>
 8000f28:	45f0      	cmp	r8, lr
 8000f2a:	d29d      	bcs.n	8000e68 <__udivmoddi4+0x1e4>
 8000f2c:	ebbe 0302 	subs.w	r3, lr, r2
 8000f30:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f34:	3801      	subs	r0, #1
 8000f36:	46e1      	mov	r9, ip
 8000f38:	e796      	b.n	8000e68 <__udivmoddi4+0x1e4>
 8000f3a:	eba7 0909 	sub.w	r9, r7, r9
 8000f3e:	4449      	add	r1, r9
 8000f40:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f44:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f48:	fb09 f804 	mul.w	r8, r9, r4
 8000f4c:	e7db      	b.n	8000f06 <__udivmoddi4+0x282>
 8000f4e:	4673      	mov	r3, lr
 8000f50:	e77f      	b.n	8000e52 <__udivmoddi4+0x1ce>
 8000f52:	4650      	mov	r0, sl
 8000f54:	e766      	b.n	8000e24 <__udivmoddi4+0x1a0>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e6fd      	b.n	8000d56 <__udivmoddi4+0xd2>
 8000f5a:	443b      	add	r3, r7
 8000f5c:	3a02      	subs	r2, #2
 8000f5e:	e733      	b.n	8000dc8 <__udivmoddi4+0x144>
 8000f60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f64:	443b      	add	r3, r7
 8000f66:	e71c      	b.n	8000da2 <__udivmoddi4+0x11e>
 8000f68:	4649      	mov	r1, r9
 8000f6a:	e79c      	b.n	8000ea6 <__udivmoddi4+0x222>
 8000f6c:	eba1 0109 	sub.w	r1, r1, r9
 8000f70:	46c4      	mov	ip, r8
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fb09 f804 	mul.w	r8, r9, r4
 8000f7a:	e7c4      	b.n	8000f06 <__udivmoddi4+0x282>

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <toggle_led>:
* @brief Zet een kleurenledje aan en uit.
* @param color De kleur.
* @return void.
*/
void toggle_led (uint32_t color)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <toggle_led+0x30>)
 8000f90:	f003 f959 	bl	8004246 <HAL_GPIO_TogglePin>
	osDelay(20);
 8000f94:	2014      	movs	r0, #20
 8000f96:	f00b fee1 	bl	800cd5c <osDelay>
	HAL_GPIO_TogglePin(GPIOD, color);   // turns led on or off
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <toggle_led+0x30>)
 8000fa2:	f003 f950 	bl	8004246 <HAL_GPIO_TogglePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <ARM_keys_IRQ>:
* @brief Deze task handelt de ARM-toets af, die ontvangen is van de ISR-handler (zie: stm32f4xx_it.c).
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void.
*/
void ARM_keys_IRQ (void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	6078      	str	r0, [r7, #4]
	unsigned int key;
	osThreadId_t hTask;

	UART_puts("\r\n"); UART_puts((char *)__func__); UART_puts(" started");
 8000fbc:	4813      	ldr	r0, [pc, #76]	@ (800100c <ARM_keys_IRQ+0x58>)
 8000fbe:	f001 fe0b 	bl	8002bd8 <UART_puts>
 8000fc2:	4813      	ldr	r0, [pc, #76]	@ (8001010 <ARM_keys_IRQ+0x5c>)
 8000fc4:	f001 fe08 	bl	8002bd8 <UART_puts>
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <ARM_keys_IRQ+0x60>)
 8000fca:	f001 fe05 	bl	8002bd8 <UART_puts>

	if (!(hTask = xTaskGetHandle("ARM_keys_task")))
 8000fce:	4812      	ldr	r0, [pc, #72]	@ (8001018 <ARM_keys_IRQ+0x64>)
 8000fd0:	f00e f830 	bl	800f034 <xTaskGetHandle>
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d102      	bne.n	8000fe2 <ARM_keys_IRQ+0x2e>
		error_HaltOS("Err:ARM_hndle");
 8000fdc:	480f      	ldr	r0, [pc, #60]	@ (800101c <ARM_keys_IRQ+0x68>)
 8000fde:	f000 fccb 	bl	8001978 <error_HaltOS>

    while (1)
	{
		// wait for ISR (EXTI0_IRQHandler()) to signal that a key is pressed
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <ARM_keys_IRQ+0x6c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ff4:	f00c f882 	bl	800d0fc <xEventGroupWaitBits>
 8000ff8:	60b8      	str	r0, [r7, #8]

		xTaskNotify(hTask, key, eSetValueWithOverwrite); // notify task2 with value
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f00e ff47 	bl	800fe94 <xTaskGenericNotify>
		key = xEventGroupWaitBits(hKEY_Event, 0xffff, pdTRUE, pdFALSE, portMAX_DELAY );
 8001006:	bf00      	nop
 8001008:	e7eb      	b.n	8000fe2 <ARM_keys_IRQ+0x2e>
 800100a:	bf00      	nop
 800100c:	08015c00 	.word	0x08015c00
 8001010:	0801663c 	.word	0x0801663c
 8001014:	08015c04 	.word	0x08015c04
 8001018:	08015c10 	.word	0x08015c10
 800101c:	08015c20 	.word	0x08015c20
 8001020:	20002454 	.word	0x20002454

08001024 <ARM_keys_task>:
* een schwung...
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen.
* @return void.
*/
void ARM_keys_task (void *argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	int			 i, led;

	while(TRUE)
	{
		// WAITING FOR users key
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 800102c:	f107 020c 	add.w	r2, r7, #12
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	2000      	movs	r0, #0
 800103a:	f00e fecb 	bl	800fdd4 <xTaskNotifyWait>
        		 	 	 0xffffffff, 		// ULONG_MAX, reset the notification value to 0 on exit.
    	                 &key, 				// Notified value.
    	                 portMAX_DELAY);  	// Block indefinitely.

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // krijg toegang (mutex) tot leds
 800103e:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <ARM_keys_task+0xc4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 31ff 	mov.w	r1, #4294967295
 8001046:	4618      	mov	r0, r3
 8001048:	f00c fea8 	bl	800dd9c <xQueueSemaphoreTake>

    	LED_put((unsigned char)key); // set 8 leds-byte to key-value
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fd75 	bl	8002b40 <LED_put>
	    BUZZER_put (500);
 8001056:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800105a:	f001 fa91 	bl	8002580 <BUZZER_put>
		osDelay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001062:	f00b fe7b 	bl	800cd5c <osDelay>

		UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001066:	4821      	ldr	r0, [pc, #132]	@ (80010ec <ARM_keys_task+0xc8>)
 8001068:	f001 fdb6 	bl	8002bd8 <UART_puts>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fdce 	bl	8002c10 <UART_putint>

		if (Uart_debug_out & ARMKEYS_DEBUG_OUT)
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <ARM_keys_task+0xcc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <ARM_keys_task+0x6a>
		{
			UART_puts("\r\n\tARM_key pressed to leds: "); UART_putint(key);
 8001080:	481a      	ldr	r0, [pc, #104]	@ (80010ec <ARM_keys_task+0xc8>)
 8001082:	f001 fda9 	bl	8002bd8 <UART_puts>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fdc1 	bl	8002c10 <UART_putint>
		}

	    xSemaphoreGive(hLED_Sem); // geef toegang (mutex) vrij
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <ARM_keys_task+0xc4>)
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	f00c fbfe 	bl	800d898 <xQueueGenericSend>

	    // tot slot, laat de gekleurde ledjes meedoen
	    // maar niet blauw, want die is ingezet voor de timer
	    // kijk naar de manier waarop de if-elses er uitzien
		for (i=0; i<3; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e015      	b.n	80010ce <ARM_keys_task+0xaa>
		{
			led = (i==0 ? LEDRED : (i==1 ? LEDORANGE : LEDGREEN));
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d008      	beq.n	80010ba <ARM_keys_task+0x96>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <ARM_keys_task+0x90>
 80010ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010b2:	e004      	b.n	80010be <ARM_keys_task+0x9a>
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	e001      	b.n	80010be <ARM_keys_task+0x9a>
 80010ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010be:	613b      	str	r3, [r7, #16]
			toggle_led(led);
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff5c 	bl	8000f80 <toggle_led>
		for (i=0; i<3; i++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	dde6      	ble.n	80010a2 <ARM_keys_task+0x7e>
	  	}
     	taskYIELD(); // done, force context switch
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <ARM_keys_task+0xd0>)
 80010d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	f3bf 8f6f 	isb	sy
        xTaskNotifyWait (0x00,      		// Don't clear any notification bits on entry.
 80010e4:	e7a2      	b.n	800102c <ARM_keys_task+0x8>
 80010e6:	bf00      	nop
 80010e8:	20002450 	.word	0x20002450
 80010ec:	08015c30 	.word	0x08015c30
 80010f0:	20002444 	.word	0x20002444
 80010f4:	e000ed04 	.word	0xe000ed04

080010f8 <GPS_parser>:

double convert_decimal_degrees(char *nmea_coordinate, char* ns);
double calc_average(GPS_decimal_degrees_t *samples, int count, char coord);

void GPS_parser(void *argument)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	osDelay(100);
 8001100:	2064      	movs	r0, #100	@ 0x64
 8001102:	f00b fe2b 	bl	800cd5c <osDelay>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8001106:	4867      	ldr	r0, [pc, #412]	@ (80012a4 <GPS_parser+0x1ac>)
 8001108:	f001 fd66 	bl	8002bd8 <UART_puts>
 800110c:	4866      	ldr	r0, [pc, #408]	@ (80012a8 <GPS_parser+0x1b0>)
 800110e:	f001 fd63 	bl	8002bd8 <UART_puts>

	while (TRUE)
	{
		// Check if GPSdata mutex is available
		if(xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001112:	4b66      	ldr	r3, [pc, #408]	@ (80012ac <GPS_parser+0x1b4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4618      	mov	r0, r3
 800111c:	f00c fe3e 	bl	800dd9c <xQueueSemaphoreTake>
 8001120:	4603      	mov	r3, r0
 8001122:	2b01      	cmp	r3, #1
 8001124:	f040 80b8 	bne.w	8001298 <GPS_parser+0x1a0>
		{
			memcpy(&gnrmc_readercopy, (const void*)readerBuffer, sizeof(GNRMC)); // copy data from readerBuffer to local gnrmc_readercopy
 8001128:	4b61      	ldr	r3, [pc, #388]	@ (80012b0 <GPS_parser+0x1b8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a61      	ldr	r2, [pc, #388]	@ (80012b4 <GPS_parser+0x1bc>)
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	2347      	movs	r3, #71	@ 0x47
 8001134:	461a      	mov	r2, r3
 8001136:	f012 f978 	bl	801342a <memcpy>

			if(samplecount < samples_size && gnrmc_readercopy.status == 'A') // Check if we have space for more samples
 800113a:	4b5f      	ldr	r3, [pc, #380]	@ (80012b8 <GPS_parser+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001142:	da5b      	bge.n	80011fc <GPS_parser+0x104>
 8001144:	4b5b      	ldr	r3, [pc, #364]	@ (80012b4 <GPS_parser+0x1bc>)
 8001146:	7c5b      	ldrb	r3, [r3, #17]
 8001148:	2b41      	cmp	r3, #65	@ 0x41
 800114a:	d157      	bne.n	80011fc <GPS_parser+0x104>
			{
				GPS_samples[samplecount].latitude = convert_decimal_degrees(gnrmc_readercopy.latitude, &gnrmc_readercopy.NS_ind);
 800114c:	4b5a      	ldr	r3, [pc, #360]	@ (80012b8 <GPS_parser+0x1c0>)
 800114e:	681c      	ldr	r4, [r3, #0]
 8001150:	495a      	ldr	r1, [pc, #360]	@ (80012bc <GPS_parser+0x1c4>)
 8001152:	485b      	ldr	r0, [pc, #364]	@ (80012c0 <GPS_parser+0x1c8>)
 8001154:	f000 f8ce 	bl	80012f4 <convert_decimal_degrees>
 8001158:	eeb0 7a40 	vmov.f32	s14, s0
 800115c:	eef0 7a60 	vmov.f32	s15, s1
 8001160:	4a58      	ldr	r2, [pc, #352]	@ (80012c4 <GPS_parser+0x1cc>)
 8001162:	0123      	lsls	r3, r4, #4
 8001164:	4413      	add	r3, r2
 8001166:	ed83 7b00 	vstr	d7, [r3]
				GPS_samples[samplecount].longitude = convert_decimal_degrees(gnrmc_readercopy.longitude, &gnrmc_readercopy.EW_ind);
 800116a:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <GPS_parser+0x1c0>)
 800116c:	681c      	ldr	r4, [r3, #0]
 800116e:	4956      	ldr	r1, [pc, #344]	@ (80012c8 <GPS_parser+0x1d0>)
 8001170:	4856      	ldr	r0, [pc, #344]	@ (80012cc <GPS_parser+0x1d4>)
 8001172:	f000 f8bf 	bl	80012f4 <convert_decimal_degrees>
 8001176:	eeb0 7a40 	vmov.f32	s14, s0
 800117a:	eef0 7a60 	vmov.f32	s15, s1
 800117e:	4a51      	ldr	r2, [pc, #324]	@ (80012c4 <GPS_parser+0x1cc>)
 8001180:	0123      	lsls	r3, r4, #4
 8001182:	4413      	add	r3, r2
 8001184:	3308      	adds	r3, #8
 8001186:	ed83 7b00 	vstr	d7, [r3]


				// Print the saved GPS sample to UART
				UART_puts("\r\nGPS sample added: ");
 800118a:	4851      	ldr	r0, [pc, #324]	@ (80012d0 <GPS_parser+0x1d8>)
 800118c:	f001 fd24 	bl	8002bd8 <UART_puts>
				UART_putint(samplecount);
 8001190:	4b49      	ldr	r3, [pc, #292]	@ (80012b8 <GPS_parser+0x1c0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f001 fd3b 	bl	8002c10 <UART_putint>
				UART_puts("	Lat: ");
 800119a:	484e      	ldr	r0, [pc, #312]	@ (80012d4 <GPS_parser+0x1dc>)
 800119c:	f001 fd1c 	bl	8002bd8 <UART_puts>
				snprintf(savedLatitude, sizeof(savedLatitude),"%.6f", GPS_samples[samplecount].latitude);
 80011a0:	4b45      	ldr	r3, [pc, #276]	@ (80012b8 <GPS_parser+0x1c0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a47      	ldr	r2, [pc, #284]	@ (80012c4 <GPS_parser+0x1cc>)
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	e9cd 2300 	strd	r2, r3, [sp]
 80011b2:	4a49      	ldr	r2, [pc, #292]	@ (80012d8 <GPS_parser+0x1e0>)
 80011b4:	2114      	movs	r1, #20
 80011b6:	4849      	ldr	r0, [pc, #292]	@ (80012dc <GPS_parser+0x1e4>)
 80011b8:	f011 ff12 	bl	8012fe0 <sniprintf>
				UART_puts(savedLatitude);
 80011bc:	4847      	ldr	r0, [pc, #284]	@ (80012dc <GPS_parser+0x1e4>)
 80011be:	f001 fd0b 	bl	8002bd8 <UART_puts>

				UART_puts(" Long: ");
 80011c2:	4847      	ldr	r0, [pc, #284]	@ (80012e0 <GPS_parser+0x1e8>)
 80011c4:	f001 fd08 	bl	8002bd8 <UART_puts>
				snprintf(savedLongitude, sizeof(savedLongitude),"%.6f", GPS_samples[samplecount].longitude);
 80011c8:	4b3b      	ldr	r3, [pc, #236]	@ (80012b8 <GPS_parser+0x1c0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <GPS_parser+0x1cc>)
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	3308      	adds	r3, #8
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	e9cd 2300 	strd	r2, r3, [sp]
 80011dc:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <GPS_parser+0x1e0>)
 80011de:	2114      	movs	r1, #20
 80011e0:	4840      	ldr	r0, [pc, #256]	@ (80012e4 <GPS_parser+0x1ec>)
 80011e2:	f011 fefd 	bl	8012fe0 <sniprintf>
				UART_puts(savedLongitude);
 80011e6:	483f      	ldr	r0, [pc, #252]	@ (80012e4 <GPS_parser+0x1ec>)
 80011e8:	f001 fcf6 	bl	8002bd8 <UART_puts>

				DisplayTaskData();
 80011ec:	f000 fd34 	bl	8001c58 <DisplayTaskData>

				samplecount++;
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <GPS_parser+0x1c0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	4a30      	ldr	r2, [pc, #192]	@ (80012b8 <GPS_parser+0x1c0>)
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e046      	b.n	800128a <GPS_parser+0x192>
			}
			else if (samplecount >= samples_size) // If we have enough samples, calculate the average
 80011fc:	4b2e      	ldr	r3, [pc, #184]	@ (80012b8 <GPS_parser+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001204:	db41      	blt.n	800128a <GPS_parser+0x192>
			{
				GPS_average_pos.latitude = calc_average(GPS_samples, samplecount, 'L');
 8001206:	4b2c      	ldr	r3, [pc, #176]	@ (80012b8 <GPS_parser+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	224c      	movs	r2, #76	@ 0x4c
 800120c:	4619      	mov	r1, r3
 800120e:	482d      	ldr	r0, [pc, #180]	@ (80012c4 <GPS_parser+0x1cc>)
 8001210:	f000 f8d0 	bl	80013b4 <calc_average>
 8001214:	eeb0 7a40 	vmov.f32	s14, s0
 8001218:	eef0 7a60 	vmov.f32	s15, s1
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <GPS_parser+0x1f0>)
 800121e:	ed83 7b00 	vstr	d7, [r3]
				GPS_average_pos.longitude = calc_average(GPS_samples, samplecount, 'G');
 8001222:	4b25      	ldr	r3, [pc, #148]	@ (80012b8 <GPS_parser+0x1c0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2247      	movs	r2, #71	@ 0x47
 8001228:	4619      	mov	r1, r3
 800122a:	4826      	ldr	r0, [pc, #152]	@ (80012c4 <GPS_parser+0x1cc>)
 800122c:	f000 f8c2 	bl	80013b4 <calc_average>
 8001230:	eeb0 7a40 	vmov.f32	s14, s0
 8001234:	eef0 7a60 	vmov.f32	s15, s1
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <GPS_parser+0x1f0>)
 800123a:	ed83 7b02 	vstr	d7, [r3, #8]

				// Print the average GPS position to UART
				UART_puts("\r\nAverage GPS position: ");
 800123e:	482b      	ldr	r0, [pc, #172]	@ (80012ec <GPS_parser+0x1f4>)
 8001240:	f001 fcca 	bl	8002bd8 <UART_puts>
				UART_puts("Lat: ");
 8001244:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <GPS_parser+0x1f8>)
 8001246:	f001 fcc7 	bl	8002bd8 <UART_puts>
				snprintf(savedLatitude, sizeof(savedLatitude),"%.6f", GPS_average_pos.latitude);
 800124a:	4b27      	ldr	r3, [pc, #156]	@ (80012e8 <GPS_parser+0x1f0>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	e9cd 2300 	strd	r2, r3, [sp]
 8001254:	4a20      	ldr	r2, [pc, #128]	@ (80012d8 <GPS_parser+0x1e0>)
 8001256:	2114      	movs	r1, #20
 8001258:	4820      	ldr	r0, [pc, #128]	@ (80012dc <GPS_parser+0x1e4>)
 800125a:	f011 fec1 	bl	8012fe0 <sniprintf>
				UART_puts(savedLatitude);
 800125e:	481f      	ldr	r0, [pc, #124]	@ (80012dc <GPS_parser+0x1e4>)
 8001260:	f001 fcba 	bl	8002bd8 <UART_puts>

				UART_puts(" Long: ");
 8001264:	481e      	ldr	r0, [pc, #120]	@ (80012e0 <GPS_parser+0x1e8>)
 8001266:	f001 fcb7 	bl	8002bd8 <UART_puts>
				snprintf(savedLongitude, sizeof(savedLongitude),"%.6f", GPS_average_pos.longitude);
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <GPS_parser+0x1f0>)
 800126c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001270:	e9cd 2300 	strd	r2, r3, [sp]
 8001274:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <GPS_parser+0x1e0>)
 8001276:	2114      	movs	r1, #20
 8001278:	481a      	ldr	r0, [pc, #104]	@ (80012e4 <GPS_parser+0x1ec>)
 800127a:	f011 feb1 	bl	8012fe0 <sniprintf>
				UART_puts(savedLongitude);
 800127e:	4819      	ldr	r0, [pc, #100]	@ (80012e4 <GPS_parser+0x1ec>)
 8001280:	f001 fcaa 	bl	8002bd8 <UART_puts>

				// Reset sample count for next averaging
				samplecount = 0;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <GPS_parser+0x1c0>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
			}



			xSemaphoreGive(hGPS_Mutex); // Release the mutex
 800128a:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <GPS_parser+0x1b4>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	f00c fb00 	bl	800d898 <xQueueGenericSend>
		}

		osDelay(1000);
 8001298:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800129c:	f00b fd5e 	bl	800cd5c <osDelay>
		if(xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 80012a0:	e737      	b.n	8001112 <GPS_parser+0x1a>
 80012a2:	bf00      	nop
 80012a4:	0801664c 	.word	0x0801664c
 80012a8:	08015c50 	.word	0x08015c50
 80012ac:	2000245c 	.word	0x2000245c
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	2000047c 	.word	0x2000047c
 80012b8:	20002418 	.word	0x20002418
 80012bc:	20000498 	.word	0x20000498
 80012c0:	2000048e 	.word	0x2000048e
 80012c4:	200004c8 	.word	0x200004c8
 80012c8:	200004a3 	.word	0x200004a3
 80012cc:	20000499 	.word	0x20000499
 80012d0:	08015c5c 	.word	0x08015c5c
 80012d4:	08015c74 	.word	0x08015c74
 80012d8:	08015c7c 	.word	0x08015c7c
 80012dc:	2000241c 	.word	0x2000241c
 80012e0:	08015c84 	.word	0x08015c84
 80012e4:	20002430 	.word	0x20002430
 80012e8:	20002408 	.word	0x20002408
 80012ec:	08015c8c 	.word	0x08015c8c
 80012f0:	08015ca8 	.word	0x08015ca8

080012f4 <convert_decimal_degrees>:
		}
	}
}

double convert_decimal_degrees(char *nmea_coordinate, char* ns)
{
 80012f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012f8:	b08a      	sub	sp, #40	@ 0x28
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
	double raw = atof(nmea_coordinate); // Convert string to double
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f010 f9fd 	bl	8011700 <atof>
 8001306:	ed87 0b06 	vstr	d0, [r7, #24]

	int degrees = (int)(raw / 100); // Get the degrees part
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <convert_decimal_degrees+0xb8>)
 8001310:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001314:	f7ff fa9a 	bl	800084c <__aeabi_ddiv>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fc1a 	bl	8000b58 <__aeabi_d2iz>
 8001324:	4603      	mov	r3, r0
 8001326:	617b      	str	r3, [r7, #20]
	double minutes = raw - (degrees * 100); // Get the minutes part
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2264      	movs	r2, #100	@ 0x64
 800132c:	fb02 f303 	mul.w	r3, r2, r3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f8f7 	bl	8000524 <__aeabi_i2d>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800133e:	f7fe ffa3 	bl	8000288 <__aeabi_dsub>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double decimal_degrees = degrees + (minutes / 60.0); // Convert to decimal degrees
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff f8ea 	bl	8000524 <__aeabi_i2d>
 8001350:	4680      	mov	r8, r0
 8001352:	4689      	mov	r9, r1
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <convert_decimal_degrees+0xbc>)
 800135a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800135e:	f7ff fa75 	bl	800084c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4640      	mov	r0, r8
 8001368:	4649      	mov	r1, r9
 800136a:	f7fe ff8f 	bl	800028c <__adddf3>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (ns[0] == 'S' || ns[0] == 'W') // Check if the coordinate is South or West
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b53      	cmp	r3, #83	@ 0x53
 800137c:	d003      	beq.n	8001386 <convert_decimal_degrees+0x92>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b57      	cmp	r3, #87	@ 0x57
 8001384:	d105      	bne.n	8001392 <convert_decimal_degrees+0x9e>
	{
		decimal_degrees = -decimal_degrees; // Make it negative
 8001386:	6a3c      	ldr	r4, [r7, #32]
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800138e:	e9c7 4508 	strd	r4, r5, [r7, #32]
	}

	return decimal_degrees; // Return the converted value
 8001392:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001396:	ec43 2b17 	vmov	d7, r2, r3

}
 800139a:	eeb0 0a47 	vmov.f32	s0, s14
 800139e:	eef0 0a67 	vmov.f32	s1, s15
 80013a2:	3728      	adds	r7, #40	@ 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013aa:	bf00      	nop
 80013ac:	40590000 	.word	0x40590000
 80013b0:	404e0000 	.word	0x404e0000

080013b4 <calc_average>:

double calc_average(GPS_decimal_degrees_t *samples, int count, char coord)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	4613      	mov	r3, r2
 80013c0:	71fb      	strb	r3, [r7, #7]
	double sum = 0.0;
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for (int i = 0; i < count; i++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e025      	b.n	8001420 <calc_average+0x6c>
	{
		if (coord == 'L') // Latitude
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b4c      	cmp	r3, #76	@ 0x4c
 80013d8:	d10e      	bne.n	80013f8 <calc_average+0x44>
		{
			sum += samples[i].latitude;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4413      	add	r3, r2
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013ea:	f7fe ff4f 	bl	800028c <__adddf3>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013f6:	e010      	b.n	800141a <calc_average+0x66>
		}
		else if (coord == 'G') // Longitude
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b47      	cmp	r3, #71	@ 0x47
 80013fc:	d10d      	bne.n	800141a <calc_average+0x66>
		{
			sum += samples[i].longitude;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800140a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800140e:	f7fe ff3d 	bl	800028c <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (int i = 0; i < count; i++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbd5      	blt.n	80013d4 <calc_average+0x20>
		}
	}

	return sum / count; // Return the average
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff f87b 	bl	8000524 <__aeabi_i2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001436:	f7ff fa09 	bl	800084c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001442:	eeb0 0a47 	vmov.f32	s0, s14
 8001446:	eef0 0a67 	vmov.f32	s1, s15
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <UART_keys_IRQ>:
* 2. notifies/stuurt command-string naar andere task
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_keys_IRQ (void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    char  		    buffer[QSIZE_UART];
    char		    buffer_copy[QSIZE_UART];
	int 			pos = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int             finish = FALSE;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
	osThreadId_t    hTask;

	UART_puts((char *)__func__); UART_puts("started, enter key on terminal...\r\n");
 8001460:	4847      	ldr	r0, [pc, #284]	@ (8001580 <UART_keys_IRQ+0x130>)
 8001462:	f001 fbb9 	bl	8002bd8 <UART_puts>
 8001466:	4847      	ldr	r0, [pc, #284]	@ (8001584 <UART_keys_IRQ+0x134>)
 8001468:	f001 fbb6 	bl	8002bd8 <UART_puts>

	if (!(hTask = xTaskGetHandle("UART_menu")))
 800146c:	4846      	ldr	r0, [pc, #280]	@ (8001588 <UART_keys_IRQ+0x138>)
 800146e:	f00d fde1 	bl	800f034 <xTaskGetHandle>
 8001472:	6278      	str	r0, [r7, #36]	@ 0x24
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <UART_keys_IRQ+0x30>
		error_HaltOS("Err:UART_hndl 0");
 800147a:	4844      	ldr	r0, [pc, #272]	@ (800158c <UART_keys_IRQ+0x13c>)
 800147c:	f000 fa7c 	bl	8001978 <error_HaltOS>
    {
		// laat de VIC de q vullen, die per char in onze eigen string geplaatst wordt
		// tot LFEED gedrukt is of qsize-1 bereikt is.
		// nb: argument 2 is het adres waar ik het q-char in zet
		// nb: q-receive haalt gelijk de buffer leeg (q-peek niet).
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 8001480:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <UART_keys_IRQ+0x140>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f107 0218 	add.w	r2, r7, #24
 8001488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800148a:	4413      	add	r3, r2
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	4619      	mov	r1, r3
 8001492:	f00c fba1 	bl	800dbd8 <xQueueReceive>

		// negeer dit char bij geen data: -1, 255, of CR of spatie
		if (buffer[pos] == 0 || buffer[pos] == -1 || buffer[pos] == 255 || buffer[pos] == CRETURN || buffer[pos] == 32)
 8001496:	f107 0218 	add.w	r2, r7, #24
 800149a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d06b      	beq.n	800157c <UART_keys_IRQ+0x12c>
 80014a4:	f107 0218 	add.w	r2, r7, #24
 80014a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2bff      	cmp	r3, #255	@ 0xff
 80014b0:	d064      	beq.n	800157c <UART_keys_IRQ+0x12c>
 80014b2:	f107 0218 	add.w	r2, r7, #24
 80014b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b8:	4413      	add	r3, r2
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b0d      	cmp	r3, #13
 80014be:	d05d      	beq.n	800157c <UART_keys_IRQ+0x12c>
 80014c0:	f107 0218 	add.w	r2, r7, #24
 80014c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d056      	beq.n	800157c <UART_keys_IRQ+0x12c>
			continue;

		//UART_putchar(buffer[pos]);  // echo

		// check of de string gesloten was of gesloten moet worden...
		if (buffer[pos] == LFEED)     // close als LF gedrukt
 80014ce:	f107 0218 	add.w	r2, r7, #24
 80014d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b0a      	cmp	r3, #10
 80014da:	d108      	bne.n	80014ee <UART_keys_IRQ+0x9e>
		{
			buffer[pos] = '\0';
 80014dc:	f107 0218 	add.w	r2, r7, #24
 80014e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e2:	4413      	add	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ec:	e00d      	b.n	800150a <UART_keys_IRQ+0xba>

		}
		else if (pos == QSIZE_UART - 2) // close if end of buf
 80014ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d10a      	bne.n	800150a <UART_keys_IRQ+0xba>
		{
			buffer[++pos] = '\0';       // first, skip to last position, then close string
 80014f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f6:	3301      	adds	r3, #1
 80014f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014fa:	f107 0218 	add.w	r2, r7, #24
 80014fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001500:	4413      	add	r3, r2
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
			finish = TRUE;
 8001506:	2301      	movs	r3, #1
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		if (finish)
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	2b00      	cmp	r3, #0
 800150e:	d031      	beq.n	8001574 <UART_keys_IRQ+0x124>
		{
			// de volgende taak krijgt een copy van de string
			// mijn eigen buffer kan zo gelijk weer gevuld worden door de ISR
			strcpy(buffer_copy, buffer);
 8001510:	f107 0218 	add.w	r2, r7, #24
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f011 ff7d 	bl	801341a <strcpy>
			memset(buffer, 0, QSIZE_UART); // clear original buffer
 8001520:	f107 0318 	add.w	r3, r7, #24
 8001524:	220a      	movs	r2, #10
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f011 fe0e 	bl	801314a <memset>
			finish = FALSE;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
			pos = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c

			xTaskNotify(hTask, buffer_copy, eSetValueWithOverwrite); // notify task2 with copy
 8001536:	f107 010c 	add.w	r1, r7, #12
 800153a:	2300      	movs	r3, #0
 800153c:	2203      	movs	r2, #3
 800153e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001540:	f00e fca8 	bl	800fe94 <xTaskGenericNotify>
			//hello test

			if (Uart_debug_out & UART_DEBUG_OUT)
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <UART_keys_IRQ+0x144>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d097      	beq.n	8001480 <UART_keys_IRQ+0x30>
			{
				UART_puts("\n\r"); UART_puts((char *)__func__);
 8001550:	4811      	ldr	r0, [pc, #68]	@ (8001598 <UART_keys_IRQ+0x148>)
 8001552:	f001 fb41 	bl	8002bd8 <UART_puts>
 8001556:	480a      	ldr	r0, [pc, #40]	@ (8001580 <UART_keys_IRQ+0x130>)
 8001558:	f001 fb3e 	bl	8002bd8 <UART_puts>
				UART_puts(": UART_menu notified with "); UART_puts(buffer_copy);
 800155c:	480f      	ldr	r0, [pc, #60]	@ (800159c <UART_keys_IRQ+0x14c>)
 800155e:	f001 fb3b 	bl	8002bd8 <UART_puts>
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fb36 	bl	8002bd8 <UART_puts>
				UART_puts("\r\n");
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <UART_keys_IRQ+0x150>)
 800156e:	f001 fb33 	bl	8002bd8 <UART_puts>
 8001572:	e785      	b.n	8001480 <UART_keys_IRQ+0x30>
			}
		}
		else
			pos++;
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	3301      	adds	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800157a:	e781      	b.n	8001480 <UART_keys_IRQ+0x30>
			continue;
 800157c:	bf00      	nop
		xQueueReceive(hUART_Queue, &buffer[pos], portMAX_DELAY);
 800157e:	e77f      	b.n	8001480 <UART_keys_IRQ+0x30>
 8001580:	08016658 	.word	0x08016658
 8001584:	08015cfc 	.word	0x08015cfc
 8001588:	08015cb0 	.word	0x08015cb0
 800158c:	08015d20 	.word	0x08015d20
 8001590:	20002448 	.word	0x20002448
 8001594:	20002444 	.word	0x20002444
 8001598:	08015ce0 	.word	0x08015ce0
 800159c:	08015d30 	.word	0x08015d30
 80015a0:	08015cf8 	.word	0x08015cf8

080015a4 <UART_menu>:
* geinterpreteerd.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void UART_menu (void *argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	char   *s;
	char   *tok = ",";  // token if command is more than 1 char
 80015ac:	4bab      	ldr	r3, [pc, #684]	@ (800185c <UART_menu+0x2b8>)
 80015ae:	61fb      	str	r3, [r7, #28]
	int     val1, val2;

	UART_puts((char *)__func__); UART_puts("started\n\r");
 80015b0:	48ab      	ldr	r0, [pc, #684]	@ (8001860 <UART_menu+0x2bc>)
 80015b2:	f001 fb11 	bl	8002bd8 <UART_puts>
 80015b6:	48ab      	ldr	r0, [pc, #684]	@ (8001864 <UART_menu+0x2c0>)
 80015b8:	f001 fb0e 	bl	8002bd8 <UART_puts>

	while (TRUE)
	{
		// wacht op de string; let op de cast van (unsigned long) naar (char *)!
		// want de waarde die ik terug krijg is een pointer.
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	2001      	movs	r0, #1
 80015c2:	f00e fbbb 	bl	800fd3c <ulTaskNotifyTake>
 80015c6:	4603      	mov	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]

		// check het eerste (en vaak enige) karakter van de inkomende command-string
		// toupper() zorgt ervoor dat het eerste karakter hoofdletter wordt, zo hoef ik niet op kleine
		// letters te checken.
		switch (toupper((unsigned char)s[0]))
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	75fb      	strb	r3, [r7, #23]
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4aa4      	ldr	r2, [pc, #656]	@ (8001868 <UART_menu+0x2c4>)
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d102      	bne.n	80015e8 <UART_menu+0x44>
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	3b20      	subs	r3, #32
 80015e6:	e000      	b.n	80015ea <UART_menu+0x46>
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	3b30      	subs	r3, #48	@ 0x30
 80015ec:	2b24      	cmp	r3, #36	@ 0x24
 80015ee:	d84d      	bhi.n	800168c <UART_menu+0xe8>
 80015f0:	a201      	add	r2, pc, #4	@ (adr r2, 80015f8 <UART_menu+0x54>)
 80015f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f6:	bf00      	nop
 80015f8:	0800169b 	.word	0x0800169b
 80015fc:	080016d7 	.word	0x080016d7
 8001600:	08001703 	.word	0x08001703
 8001604:	0800172f 	.word	0x0800172f
 8001608:	0800175b 	.word	0x0800175b
 800160c:	08001787 	.word	0x08001787
 8001610:	0800168d 	.word	0x0800168d
 8001614:	0800168d 	.word	0x0800168d
 8001618:	0800168d 	.word	0x0800168d
 800161c:	0800168d 	.word	0x0800168d
 8001620:	0800168d 	.word	0x0800168d
 8001624:	0800168d 	.word	0x0800168d
 8001628:	0800168d 	.word	0x0800168d
 800162c:	0800168d 	.word	0x0800168d
 8001630:	0800168d 	.word	0x0800168d
 8001634:	0800168d 	.word	0x0800168d
 8001638:	0800168d 	.word	0x0800168d
 800163c:	0800168d 	.word	0x0800168d
 8001640:	0800168d 	.word	0x0800168d
 8001644:	0800168d 	.word	0x0800168d
 8001648:	080017b3 	.word	0x080017b3
 800164c:	0800168d 	.word	0x0800168d
 8001650:	0800168d 	.word	0x0800168d
 8001654:	0800168d 	.word	0x0800168d
 8001658:	0800168d 	.word	0x0800168d
 800165c:	0800168d 	.word	0x0800168d
 8001660:	0800168d 	.word	0x0800168d
 8001664:	0800168d 	.word	0x0800168d
 8001668:	0800168d 	.word	0x0800168d
 800166c:	080017d7 	.word	0x080017d7
 8001670:	0800168d 	.word	0x0800168d
 8001674:	0800168d 	.word	0x0800168d
 8001678:	080017e3 	.word	0x080017e3
 800167c:	0800168d 	.word	0x0800168d
 8001680:	0800168d 	.word	0x0800168d
 8001684:	08001827 	.word	0x08001827
 8001688:	080017dd 	.word	0x080017dd
		{
		default:  UART_puts(s);
 800168c:	69b8      	ldr	r0, [r7, #24]
 800168e:	f001 faa3 	bl	8002bd8 <UART_puts>
				  UART_puts(" (unkown command)\r\n");
 8001692:	4876      	ldr	r0, [pc, #472]	@ (800186c <UART_menu+0x2c8>)
 8001694:	f001 faa0 	bl	8002bd8 <UART_puts>
				  break;
 8001698:	e0df      	b.n	800185a <UART_menu+0x2b6>

		/// <b>0 - 5</b>: Togglet verschillende debug-outputs naar UART
		case '0': Uart_debug_out = (Uart_debug_out ? DEBUG_OUT_NONE : DEBUG_OUT_ALL);
 800169a:	4b75      	ldr	r3, [pc, #468]	@ (8001870 <UART_menu+0x2cc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <UART_menu+0x102>
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <UART_menu+0x104>
 80016a6:	23ff      	movs	r3, #255	@ 0xff
 80016a8:	4a71      	ldr	r2, [pc, #452]	@ (8001870 <UART_menu+0x2cc>)
 80016aa:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nall debug output = ");
 80016ac:	4871      	ldr	r0, [pc, #452]	@ (8001874 <UART_menu+0x2d0>)
 80016ae:	f001 fa93 	bl	8002bd8 <UART_puts>
		  	  	  UART_puts(Uart_debug_out == DEBUG_OUT_ALL ? "ON\r\n" : "OFF\r\n");
 80016b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001870 <UART_menu+0x2cc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2bff      	cmp	r3, #255	@ 0xff
 80016b8:	d101      	bne.n	80016be <UART_menu+0x11a>
 80016ba:	4b6f      	ldr	r3, [pc, #444]	@ (8001878 <UART_menu+0x2d4>)
 80016bc:	e000      	b.n	80016c0 <UART_menu+0x11c>
 80016be:	4b6f      	ldr	r3, [pc, #444]	@ (800187c <UART_menu+0x2d8>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fa89 	bl	8002bd8 <UART_puts>

		  	  	  // als alle output uitgezet wordt, is het handig om gelijk het menu te laten zien.
		  	  	  if (Uart_debug_out == DEBUG_OUT_NONE)
 80016c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <UART_menu+0x2cc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 80c0 	bne.w	8001850 <UART_menu+0x2ac>
		  	  		  DisplayMenu();
 80016d0:	f000 f944 	bl	800195c <DisplayMenu>
				  break;
 80016d4:	e0bc      	b.n	8001850 <UART_menu+0x2ac>

		case '1': Uart_debug_out ^= LEDS_DEBUG_OUT; // toggle output on/off
 80016d6:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <UART_menu+0x2cc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f083 0301 	eor.w	r3, r3, #1
 80016de:	4a64      	ldr	r2, [pc, #400]	@ (8001870 <UART_menu+0x2cc>)
 80016e0:	6013      	str	r3, [r2, #0]
				  UART_puts("\r\nleds output = ");
 80016e2:	4867      	ldr	r0, [pc, #412]	@ (8001880 <UART_menu+0x2dc>)
 80016e4:	f001 fa78 	bl	8002bd8 <UART_puts>
				  UART_puts(Uart_debug_out & LEDS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 80016e8:	4b61      	ldr	r3, [pc, #388]	@ (8001870 <UART_menu+0x2cc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <UART_menu+0x154>
 80016f4:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <UART_menu+0x2d4>)
 80016f6:	e000      	b.n	80016fa <UART_menu+0x156>
 80016f8:	4b60      	ldr	r3, [pc, #384]	@ (800187c <UART_menu+0x2d8>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fa6c 	bl	8002bd8 <UART_puts>
				  break;
 8001700:	e0ab      	b.n	800185a <UART_menu+0x2b6>

		case '2': Uart_debug_out ^= ARMKEYS_DEBUG_OUT; // toggle output on/off
 8001702:	4b5b      	ldr	r3, [pc, #364]	@ (8001870 <UART_menu+0x2cc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f083 0302 	eor.w	r3, r3, #2
 800170a:	4a59      	ldr	r2, [pc, #356]	@ (8001870 <UART_menu+0x2cc>)
 800170c:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\narmkeys output = ");
 800170e:	485d      	ldr	r0, [pc, #372]	@ (8001884 <UART_menu+0x2e0>)
 8001710:	f001 fa62 	bl	8002bd8 <UART_puts>
		  	      UART_puts(Uart_debug_out & ARMKEYS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001714:	4b56      	ldr	r3, [pc, #344]	@ (8001870 <UART_menu+0x2cc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <UART_menu+0x180>
 8001720:	4b55      	ldr	r3, [pc, #340]	@ (8001878 <UART_menu+0x2d4>)
 8001722:	e000      	b.n	8001726 <UART_menu+0x182>
 8001724:	4b55      	ldr	r3, [pc, #340]	@ (800187c <UART_menu+0x2d8>)
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fa56 	bl	8002bd8 <UART_puts>
				  break;
 800172c:	e095      	b.n	800185a <UART_menu+0x2b6>

		case '3': Uart_debug_out ^= UART_DEBUG_OUT; // toggle output on/off
 800172e:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <UART_menu+0x2cc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f083 0304 	eor.w	r3, r3, #4
 8001736:	4a4e      	ldr	r2, [pc, #312]	@ (8001870 <UART_menu+0x2cc>)
 8001738:	6013      	str	r3, [r2, #0]
		  	      UART_puts("\r\nuart output = ");
 800173a:	4853      	ldr	r0, [pc, #332]	@ (8001888 <UART_menu+0x2e4>)
 800173c:	f001 fa4c 	bl	8002bd8 <UART_puts>
		  	      UART_puts(Uart_debug_out & UART_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001740:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <UART_menu+0x2cc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <UART_menu+0x1ac>
 800174c:	4b4a      	ldr	r3, [pc, #296]	@ (8001878 <UART_menu+0x2d4>)
 800174e:	e000      	b.n	8001752 <UART_menu+0x1ae>
 8001750:	4b4a      	ldr	r3, [pc, #296]	@ (800187c <UART_menu+0x2d8>)
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fa40 	bl	8002bd8 <UART_puts>
				  break;
 8001758:	e07f      	b.n	800185a <UART_menu+0x2b6>

		case '4': Uart_debug_out ^= STUDENT_DEBUG_OUT; // toggle output on/off
 800175a:	4b45      	ldr	r3, [pc, #276]	@ (8001870 <UART_menu+0x2cc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f083 0308 	eor.w	r3, r3, #8
 8001762:	4a43      	ldr	r2, [pc, #268]	@ (8001870 <UART_menu+0x2cc>)
 8001764:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nstudent output = ");
 8001766:	4849      	ldr	r0, [pc, #292]	@ (800188c <UART_menu+0x2e8>)
 8001768:	f001 fa36 	bl	8002bd8 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & STUDENT_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 800176c:	4b40      	ldr	r3, [pc, #256]	@ (8001870 <UART_menu+0x2cc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <UART_menu+0x1d8>
 8001778:	4b3f      	ldr	r3, [pc, #252]	@ (8001878 <UART_menu+0x2d4>)
 800177a:	e000      	b.n	800177e <UART_menu+0x1da>
 800177c:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <UART_menu+0x2d8>)
 800177e:	4618      	mov	r0, r3
 8001780:	f001 fa2a 	bl	8002bd8 <UART_puts>
				  break;
 8001784:	e069      	b.n	800185a <UART_menu+0x2b6>

		case '5': Uart_debug_out ^= GPS_DEBUG_OUT; // toggle output on/off
 8001786:	4b3a      	ldr	r3, [pc, #232]	@ (8001870 <UART_menu+0x2cc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f083 0310 	eor.w	r3, r3, #16
 800178e:	4a38      	ldr	r2, [pc, #224]	@ (8001870 <UART_menu+0x2cc>)
 8001790:	6013      	str	r3, [r2, #0]
		  	  	  UART_puts("\r\nGPS output = ");
 8001792:	483f      	ldr	r0, [pc, #252]	@ (8001890 <UART_menu+0x2ec>)
 8001794:	f001 fa20 	bl	8002bd8 <UART_puts>
		  	  	  UART_puts(Uart_debug_out & GPS_DEBUG_OUT ? "ON\r\n" : "OFF\r\n");
 8001798:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <UART_menu+0x2cc>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <UART_menu+0x204>
 80017a4:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <UART_menu+0x2d4>)
 80017a6:	e000      	b.n	80017aa <UART_menu+0x206>
 80017a8:	4b34      	ldr	r3, [pc, #208]	@ (800187c <UART_menu+0x2d8>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 fa14 	bl	8002bd8 <UART_puts>
				  break;
 80017b0:	e053      	b.n	800185a <UART_menu+0x2b6>

		/// ... en reageert ook op een paar letters
		case 'D': /// D: Verandert de Default OSTIME-DELAY, die gebruikt wordt bij de LEDs.
				  /// commando: <b>"d,200"</b> betekent: set delay op 200, NB: spaties worden niet afgevangen...
				  os_delay = atoi(s+2); // skip first 2 characters
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	3302      	adds	r3, #2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00f ffa5 	bl	8011706 <atoi>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <UART_menu+0x2f0>)
 80017c2:	601a      	str	r2, [r3, #0]
				  UART_puts("\r\n os_delay set to: "); UART_putint(os_delay);
 80017c4:	4834      	ldr	r0, [pc, #208]	@ (8001898 <UART_menu+0x2f4>)
 80017c6:	f001 fa07 	bl	8002bd8 <UART_puts>
 80017ca:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <UART_menu+0x2f0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fa1e 	bl	8002c10 <UART_putint>
				  break;
 80017d4:	e041      	b.n	800185a <UART_menu+0x2b6>

		case 'M': DisplayMenu(); /// M: Displays het menu (zie my_app.c)
 80017d6:	f000 f8c1 	bl	800195c <DisplayMenu>
				  break;
 80017da:	e03e      	b.n	800185a <UART_menu+0x2b6>

		case 'T': DisplayTaskData(); /// T: Displays de stackdata van alle Tasks
 80017dc:	f000 fa3c 	bl	8001c58 <DisplayTaskData>
				  break;
 80017e0:	e03b      	b.n	800185a <UART_menu+0x2b6>
		case 'P': /// P: Verandert de Prioriteit van een taak
				  /// commando, als: <b>"t,9,20"</b> betekent: set Task 9 op priority 20
				  //  eerst: de 2 waarden worden uit de string gehaald met strtok()
			      //  dan: de strings worden naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 't,'
 80017e2:	69f9      	ldr	r1, [r7, #28]
 80017e4:	69b8      	ldr	r0, [r7, #24]
 80017e6:	f011 fcd7 	bl	8013198 <strtok>
 80017ea:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 80017ec:	69f9      	ldr	r1, [r7, #28]
 80017ee:	2000      	movs	r0, #0
 80017f0:	f011 fcd2 	bl	8013198 <strtok>
 80017f4:	61b8      	str	r0, [r7, #24]
 80017f6:	69b8      	ldr	r0, [r7, #24]
 80017f8:	f00f ff85 	bl	8011706 <atoi>
 80017fc:	6138      	str	r0, [r7, #16]
				  s = strtok(NULL, tok); val2 = atoi(s); // volgende = priority
 80017fe:	69f9      	ldr	r1, [r7, #28]
 8001800:	2000      	movs	r0, #0
 8001802:	f011 fcc9 	bl	8013198 <strtok>
 8001806:	61b8      	str	r0, [r7, #24]
 8001808:	69b8      	ldr	r0, [r7, #24]
 800180a:	f00f ff7c 	bl	8011706 <atoi>
 800180e:	60f8      	str	r0, [r7, #12]
				  if (val1 && val2)						 // kleine validiteitscontrole
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01e      	beq.n	8001854 <UART_menu+0x2b0>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <UART_menu+0x2b0>
					  SetTaskPriority(val1, val2);
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	6938      	ldr	r0, [r7, #16]
 8001820:	f000 f996 	bl	8001b50 <SetTaskPriority>
				  break;
 8001824:	e016      	b.n	8001854 <UART_menu+0x2b0>
		case 'S': /// S: Start/Stop task
				  /// commando, als: <b>"s,9"</b> betekent: start/stop Task 9
				  //  eerst: de waarde worden uit de string gehaald met strtok()
			      //  dan: de string wordt naar int geconverteerd
				  //  nb. dit is wel grof geprogrammeerd zo, in het echt maak je hier een mooie functie van.
			      s = strtok(s,    tok); 				 // naar start van string, negeer 's,'
 8001826:	69f9      	ldr	r1, [r7, #28]
 8001828:	69b8      	ldr	r0, [r7, #24]
 800182a:	f011 fcb5 	bl	8013198 <strtok>
 800182e:	61b8      	str	r0, [r7, #24]
				  s = strtok(NULL, tok); val1 = atoi(s); // volgende = task_id
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	2000      	movs	r0, #0
 8001834:	f011 fcb0 	bl	8013198 <strtok>
 8001838:	61b8      	str	r0, [r7, #24]
 800183a:	69b8      	ldr	r0, [r7, #24]
 800183c:	f00f ff63 	bl	8011706 <atoi>
 8001840:	6138      	str	r0, [r7, #16]
				  if (val1)						 // kleine validiteitscontrole
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <UART_menu+0x2b4>
					  StartStopTask(val1);
 8001848:	6938      	ldr	r0, [r7, #16]
 800184a:	f000 f9bd 	bl	8001bc8 <StartStopTask>
				  break;
 800184e:	e003      	b.n	8001858 <UART_menu+0x2b4>
				  break;
 8001850:	bf00      	nop
 8001852:	e6b3      	b.n	80015bc <UART_menu+0x18>
				  break;
 8001854:	bf00      	nop
 8001856:	e6b1      	b.n	80015bc <UART_menu+0x18>
				  break;
 8001858:	bf00      	nop
		s = (char *)ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800185a:	e6af      	b.n	80015bc <UART_menu+0x18>
 800185c:	08015d4c 	.word	0x08015d4c
 8001860:	08016668 	.word	0x08016668
 8001864:	08015d50 	.word	0x08015d50
 8001868:	08016978 	.word	0x08016978
 800186c:	08015d5c 	.word	0x08015d5c
 8001870:	20002444 	.word	0x20002444
 8001874:	08015d70 	.word	0x08015d70
 8001878:	08015d88 	.word	0x08015d88
 800187c:	08015d90 	.word	0x08015d90
 8001880:	08015d98 	.word	0x08015d98
 8001884:	08015dac 	.word	0x08015dac
 8001888:	08015dc0 	.word	0x08015dc0
 800188c:	08015dd4 	.word	0x08015dd4
 8001890:	08015de8 	.word	0x08015de8
 8001894:	20000250 	.word	0x20000250
 8001898:	08015df8 	.word	0x08015df8

0800189c <DisplayVersion>:
* Les: je ziet hoe je handig een lange string kunt opstellen met het '\'-karakter.
* @return void
* @author MSC
*/
void DisplayVersion(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09c      	sub	sp, #112	@ 0x70
 80018a0:	af00      	add	r7, sp, #0
	char infobuf[100];
    osVersion_t osv;

    char *functionality =
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <DisplayVersion+0x98>)
 80018a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
en hoe je makkelijk tasks aanmaakt (admin.c) en hoe je de bidirectionele omgang \r\n\
met de UART-comport gebruikt.\r\n\
Zie verder de Doxygen documentatie van de applicatie.\r\n\
Michiel Scager (update: april 2023)\r\n";

	LCD_clear();
 80018a6:	f000 ffad 	bl	8002804 <LCD_clear>
	LCD_puts(app_nameLCD);
 80018aa:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <DisplayVersion+0x9c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f001 f8a0 	bl	80029f4 <LCD_puts>

	UART_puts(app_name);
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <DisplayVersion+0xa0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 f98d 	bl	8002bd8 <UART_puts>
	UART_puts(functionality);
 80018be:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80018c0:	f001 f98a 	bl	8002bd8 <UART_puts>

 	osKernelGetInfo(&osv, infobuf, sizeof(infobuf));
 80018c4:	f107 0108 	add.w	r1, r7, #8
 80018c8:	463b      	mov	r3, r7
 80018ca:	2264      	movs	r2, #100	@ 0x64
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00b f94f 	bl	800cb70 <osKernelGetInfo>
	UART_puts("\t-----");
 80018d2:	481b      	ldr	r0, [pc, #108]	@ (8001940 <DisplayVersion+0xa4>)
 80018d4:	f001 f980 	bl	8002bd8 <UART_puts>
	UART_puts("\r\n\t");                       UART_puts(infobuf);
 80018d8:	481a      	ldr	r0, [pc, #104]	@ (8001944 <DisplayVersion+0xa8>)
 80018da:	f001 f97d 	bl	8002bd8 <UART_puts>
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 f978 	bl	8002bd8 <UART_puts>
	UART_puts("\r\n\tVersion: ");              UART_putint(osv.kernel);
 80018e8:	4817      	ldr	r0, [pc, #92]	@ (8001948 <DisplayVersion+0xac>)
 80018ea:	f001 f975 	bl	8002bd8 <UART_puts>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f001 f98d 	bl	8002c10 <UART_putint>
	UART_puts("\r\n\tOS Timer freq (MHz): " ); UART_putint(osKernelGetSysTimerFreq()/1000000);
 80018f6:	4815      	ldr	r0, [pc, #84]	@ (800194c <DisplayVersion+0xb0>)
 80018f8:	f001 f96e 	bl	8002bd8 <UART_puts>
 80018fc:	f00b f990 	bl	800cc20 <osKernelGetSysTimerFreq>
 8001900:	4603      	mov	r3, r0
 8001902:	4a13      	ldr	r2, [pc, #76]	@ (8001950 <DisplayVersion+0xb4>)
 8001904:	fba2 2303 	umull	r2, r3, r2, r3
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	4618      	mov	r0, r3
 800190c:	f001 f980 	bl	8002c10 <UART_putint>
	UART_puts("\r\n\tOS Tick freq (Hz): " );   UART_putint(osKernelGetTickFreq());
 8001910:	4810      	ldr	r0, [pc, #64]	@ (8001954 <DisplayVersion+0xb8>)
 8001912:	f001 f961 	bl	8002bd8 <UART_puts>
 8001916:	f00b f979 	bl	800cc0c <osKernelGetTickFreq>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	f001 f977 	bl	8002c10 <UART_putint>
	UART_puts("\r\n\t-----\r\n");
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <DisplayVersion+0xbc>)
 8001924:	f001 f958 	bl	8002bd8 <UART_puts>

    DisplayMenu();
 8001928:	f000 f818 	bl	800195c <DisplayMenu>
}
 800192c:	bf00      	nop
 800192e:	3770      	adds	r7, #112	@ 0x70
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	08015ed8 	.word	0x08015ed8
 8001938:	20000004 	.word	0x20000004
 800193c:	20000000 	.word	0x20000000
 8001940:	08016048 	.word	0x08016048
 8001944:	08016050 	.word	0x08016050
 8001948:	08016054 	.word	0x08016054
 800194c:	08016064 	.word	0x08016064
 8001950:	431bde83 	.word	0x431bde83
 8001954:	08016080 	.word	0x08016080
 8001958:	08016098 	.word	0x08016098

0800195c <DisplayMenu>:
* User Interface (menu) naar UART.
* @return void
* @author MSC
*/
void DisplayMenu(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
	char *menu =
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <DisplayMenu+0x18>)
 8001964:	607b      	str	r3, [r7, #4]
 p : change TASK PRIORITY, eg. 'p,7,20' sets priority of task 7 to 20\r\n\
 t : display TASK DATA (number, priority, stack usage, status)\r\n\
 s : start/stop TASK, eg. s,7 starts or stops task 7\r\n\
=====================================================================\r\n";

    UART_puts(menu);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f001 f936 	bl	8002bd8 <UART_puts>
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	080160a4 	.word	0x080160a4

08001978 <error_HaltOS>:
* dus op UART en LCD.
* @param msg Foutmelding
* @return void
*/
void error_HaltOS(char *msg)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	LCD_puts(msg);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f001 f837 	bl	80029f4 <LCD_puts>
	UART_puts(msg); UART_puts(". Application halted\r\n");
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f001 f926 	bl	8002bd8 <UART_puts>
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <error_HaltOS+0x2c>)
 800198e:	f001 f923 	bl	8002bd8 <UART_puts>

	BUZZER_put(1000);
 8001992:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001996:	f000 fdf3 	bl	8002580 <BUZZER_put>
	vTaskSuspendAll(); // stop alle tasks
 800199a:	f00d fa21 	bl	800ede0 <vTaskSuspendAll>

	while (TRUE)
 800199e:	bf00      	nop
 80019a0:	e7fd      	b.n	800199e <error_HaltOS+0x26>
 80019a2:	bf00      	nop
 80019a4:	080162e4 	.word	0x080162e4

080019a8 <CreateHandles>:
/**
* @brief Creates alle handles voor deze applicatie
* @return void
*/
void CreateHandles(void)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af02      	add	r7, sp, #8
	if (!(hLED_Sem = xSemaphoreCreateMutex()))
 80019ae:	2001      	movs	r0, #1
 80019b0:	f00b ff59 	bl	800d866 <xQueueCreateMutex>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a36      	ldr	r2, [pc, #216]	@ (8001a90 <CreateHandles+0xe8>)
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b35      	ldr	r3, [pc, #212]	@ (8001a90 <CreateHandles+0xe8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <CreateHandles+0x20>
		error_HaltOS("Error hLED_Sem");
 80019c2:	4834      	ldr	r0, [pc, #208]	@ (8001a94 <CreateHandles+0xec>)
 80019c4:	f7ff ffd8 	bl	8001978 <error_HaltOS>

	if (!(hUART_Queue = xQueueCreate(QSIZE_UART, sizeof(unsigned int))))
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	200a      	movs	r0, #10
 80019ce:	f00b fed2 	bl	800d776 <xQueueGenericCreate>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a30      	ldr	r2, [pc, #192]	@ (8001a98 <CreateHandles+0xf0>)
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <CreateHandles+0xf0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <CreateHandles+0x3e>
		error_HaltOS("Error hUART_Q");
 80019e0:	482e      	ldr	r0, [pc, #184]	@ (8001a9c <CreateHandles+0xf4>)
 80019e2:	f7ff ffc9 	bl	8001978 <error_HaltOS>

	if (!(hGPS_Queue = xQueueCreate(GPS_MAXLEN, sizeof(unsigned char))))
 80019e6:	2200      	movs	r2, #0
 80019e8:	2101      	movs	r1, #1
 80019ea:	2053      	movs	r0, #83	@ 0x53
 80019ec:	f00b fec3 	bl	800d776 <xQueueGenericCreate>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa0 <CreateHandles+0xf8>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa0 <CreateHandles+0xf8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <CreateHandles+0x5c>
		error_HaltOS("Error hGPS_Q");
 80019fe:	4829      	ldr	r0, [pc, #164]	@ (8001aa4 <CreateHandles+0xfc>)
 8001a00:	f7ff ffba 	bl	8001978 <error_HaltOS>

	if (!(hKEY_Event = xEventGroupCreate()))
 8001a04:	f00b fb60 	bl	800d0c8 <xEventGroupCreate>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a27      	ldr	r2, [pc, #156]	@ (8001aa8 <CreateHandles+0x100>)
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <CreateHandles+0x100>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <CreateHandles+0x74>
		error_HaltOS("Error hLCD_Event");
 8001a16:	4825      	ldr	r0, [pc, #148]	@ (8001aac <CreateHandles+0x104>)
 8001a18:	f7ff ffae 	bl	8001978 <error_HaltOS>

	if (!(hTimer1 = xTimerCreate("Timer_1", pdMS_TO_TICKS(TIMER1_DELAY), pdTRUE, 0, (TimerCallbackFunction_t)Timer1_Handler)))
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <CreateHandles+0x108>)
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001a28:	4822      	ldr	r0, [pc, #136]	@ (8001ab4 <CreateHandles+0x10c>)
 8001a2a:	f00e fb93 	bl	8010154 <xTimerCreate>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a21      	ldr	r2, [pc, #132]	@ (8001ab8 <CreateHandles+0x110>)
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <CreateHandles+0x110>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <CreateHandles+0x9a>
		error_HaltOS("Error hTimer1");
 8001a3c:	481f      	ldr	r0, [pc, #124]	@ (8001abc <CreateHandles+0x114>)
 8001a3e:	f7ff ff9b 	bl	8001978 <error_HaltOS>

	if (!(hGPS_Mutex = xSemaphoreCreateMutex()))
 8001a42:	2001      	movs	r0, #1
 8001a44:	f00b ff0f 	bl	800d866 <xQueueCreateMutex>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac0 <CreateHandles+0x118>)
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <CreateHandles+0x118>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d102      	bne.n	8001a5c <CreateHandles+0xb4>
		error_HaltOS("Error hGPS_Mutex");
 8001a56:	481b      	ldr	r0, [pc, #108]	@ (8001ac4 <CreateHandles+0x11c>)
 8001a58:	f7ff ff8e 	bl	8001978 <error_HaltOS>

	UART_puts("\n\rAll handles created successfully.");
 8001a5c:	481a      	ldr	r0, [pc, #104]	@ (8001ac8 <CreateHandles+0x120>)
 8001a5e:	f001 f8bb 	bl	8002bd8 <UART_puts>

	UART_puts("\n\rTimer set to: ");
 8001a62:	481a      	ldr	r0, [pc, #104]	@ (8001acc <CreateHandles+0x124>)
 8001a64:	f001 f8b8 	bl	8002bd8 <UART_puts>
	UART_putint((int)TIMER1_DELAY); // (int)-cast is nodig!
 8001a68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a6c:	f001 f8d0 	bl	8002c10 <UART_putint>
	xTimerStart(hTimer1, 0); // start de timer...
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <CreateHandles+0x110>)
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	f00d fa60 	bl	800ef38 <xTaskGetTickCount>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2101      	movs	r1, #1
 8001a82:	4620      	mov	r0, r4
 8001a84:	f00e fbc4 	bl	8010210 <xTimerGenericCommand>
}
 8001a88:	bf00      	nop
 8001a8a:	3704      	adds	r7, #4
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	20002450 	.word	0x20002450
 8001a94:	080162fc 	.word	0x080162fc
 8001a98:	20002448 	.word	0x20002448
 8001a9c:	0801630c 	.word	0x0801630c
 8001aa0:	2000244c 	.word	0x2000244c
 8001aa4:	0801631c 	.word	0x0801631c
 8001aa8:	20002454 	.word	0x20002454
 8001aac:	0801632c 	.word	0x0801632c
 8001ab0:	08001ad1 	.word	0x08001ad1
 8001ab4:	08016340 	.word	0x08016340
 8001ab8:	20002458 	.word	0x20002458
 8001abc:	08016348 	.word	0x08016348
 8001ac0:	2000245c 	.word	0x2000245c
 8001ac4:	08016358 	.word	0x08016358
 8001ac8:	0801636c 	.word	0x0801636c
 8001acc:	08016390 	.word	0x08016390

08001ad0 <Timer1_Handler>:
* @brief Vangt de FreeRTOS software-interrupt op en toggelt een ledje
* @param hTimer1 De handle van de timer
* @return void
*/
void Timer1_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, LEDBLUE);   // turns led on/off
 8001ad4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ad8:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <Timer1_Handler+0x14>)
 8001ada:	f002 fbb4 	bl	8004246 <HAL_GPIO_TogglePin>
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40020c00 	.word	0x40020c00

08001ae8 <CreateTasks>:
* Let op. Eerst wordt de scheduler gestopt, dan de taken gecreëerd, dan de scheduler gestopt.
* Waarom? Anders gaan taken gelijk beginnen en wachten op taken die nog niet bestaan, dat geeft een rommeltje.
* @return void
*/
void CreateTasks(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	PTASKDATA ptd = tasks; // tasks == &tasks[0]: both are addresses of first struct
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <CreateTasks+0x5c>)
 8001af0:	607b      	str	r3, [r7, #4]
	vTaskSuspendAll(); // zet de scheduler stil en dwing FreeRTOS om eerst alle taken te starten
 8001af2:	f00d f975 	bl	800ede0 <vTaskSuspendAll>

	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001af6:	e016      	b.n	8001b26 <CreateTasks+0x3e>
	{
		UART_puts("\r\nCreated: ");
 8001af8:	4813      	ldr	r0, [pc, #76]	@ (8001b48 <CreateTasks+0x60>)
 8001afa:	f001 f86d 	bl	8002bd8 <UART_puts>
		UART_puts((char *)ptd->attr.name);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 f868 	bl	8002bd8 <UART_puts>

		// nb. kijk naar de haakjes van argument 3: het gaat om het adres van (structure attr).
		ptd->hTask = osThreadNew(ptd->func, ptd->argument, &(ptd->attr));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6818      	ldr	r0, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3308      	adds	r3, #8
 8001b14:	461a      	mov	r2, r3
 8001b16:	f00b f88f 	bl	800cc38 <osThreadNew>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
	for (; ptd->func != NULL; ptd++) // loopje zonder teller; gewoon de pointer steeds ophogen...
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3330      	adds	r3, #48	@ 0x30
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e4      	bne.n	8001af8 <CreateTasks+0x10>
	}

	UART_puts("\r\n");
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <CreateTasks+0x64>)
 8001b30:	f001 f852 	bl	8002bd8 <UART_puts>
	xTaskResumeAll();   // start nu de scheduler: play ball
 8001b34:	f00d f962 	bl	800edfc <xTaskResumeAll>
	DisplayTaskData();  // display alle taskdata op UART
 8001b38:	f000 f88e 	bl	8001c58 <DisplayTaskData>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000008 	.word	0x20000008
 8001b48:	080163a4 	.word	0x080163a4
 8001b4c:	080163b0 	.word	0x080163b0

08001b50 <SetTaskPriority>:
* @param task_id Task identifier
* @param new_priority Nieuwe prioriteit
* @return void
*/
void SetTaskPriority(int task_id, int new_priority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	PTASKDATA ptd = tasks;
 8001b5a:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <SetTaskPriority+0x6c>)
 8001b5c:	60fb      	str	r3, [r7, #12]
	unsigned int 	task_nr;


	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	e023      	b.n	8001bac <SetTaskPriority+0x5c>
		if (task_nr == task_id) // hebbes
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d119      	bne.n	8001ba0 <SetTaskPriority+0x50>
		{
			ptd->attr.priority = new_priority;			// struct-member
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	621a      	str	r2, [r3, #32]
			vTaskPrioritySet(ptd->hTask, new_priority); // taskpriority
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00c ff1a 	bl	800e9b4 <vTaskPrioritySet>
			// of
			// osThreadSetPriority(ptd->hTask, new_priority);

			UART_puts("\r\nSet task "); UART_puts(ptd->attr.name);
 8001b80:	480f      	ldr	r0, [pc, #60]	@ (8001bc0 <SetTaskPriority+0x70>)
 8001b82:	f001 f829 	bl	8002bd8 <UART_puts>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 f824 	bl	8002bd8 <UART_puts>
			UART_puts("'s priority to: "); UART_putint(new_priority);
 8001b90:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <SetTaskPriority+0x74>)
 8001b92:	f001 f821 	bl	8002bd8 <UART_puts>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 f839 	bl	8002c10 <UART_putint>
			return;
 8001b9e:	e009      	b.n	8001bb4 <SetTaskPriority+0x64>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3330      	adds	r3, #48	@ 0x30
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1d7      	bne.n	8001b64 <SetTaskPriority+0x14>
		}
}
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	080163b4 	.word	0x080163b4
 8001bc4:	080163c0 	.word	0x080163c0

08001bc8 <StartStopTask>:
* je alle tasks die op die mutex wachten. En als je de task stopt die de UART leest,
* schiet je jezelf ook in de voet.
* @return void
*/
void StartStopTask(int task_id)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08e      	sub	sp, #56	@ 0x38
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	PTASKDATA ptd = tasks;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <StartStopTask+0x80>)
 8001bd2:	637b      	str	r3, [r7, #52]	@ 0x34
	unsigned int 	task_nr;
	TaskStatus_t    xTaskDetails;

	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bd8:	e02e      	b.n	8001c38 <StartStopTask+0x70>
		if (task_nr == task_id) // hebbes
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d124      	bne.n	8001c2c <StartStopTask+0x64>
		{
			vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid);
 8001be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001be6:	f107 010c 	add.w	r1, r7, #12
 8001bea:	2305      	movs	r3, #5
 8001bec:	2201      	movs	r2, #1
 8001bee:	f00d fe0b 	bl	800f808 <vTaskGetInfo>
			UART_puts("\r\n");
 8001bf2:	4816      	ldr	r0, [pc, #88]	@ (8001c4c <StartStopTask+0x84>)
 8001bf4:	f000 fff0 	bl	8002bd8 <UART_puts>
			UART_puts(ptd->attr.name);
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 ffeb 	bl	8002bd8 <UART_puts>

			// een task kan meerdere statussen hebben; het wordt simpeler
			// als je alleen de eSuspended checkt.
			if (xTaskDetails.eCurrentState == eSuspended)
 8001c02:	7e3b      	ldrb	r3, [r7, #24]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d108      	bne.n	8001c1a <StartStopTask+0x52>
			{
				vTaskResume(ptd->hTask);
 8001c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00d f817 	bl	800ec40 <vTaskResume>
				UART_puts(" resumed.");
 8001c12:	480f      	ldr	r0, [pc, #60]	@ (8001c50 <StartStopTask+0x88>)
 8001c14:	f000 ffe0 	bl	8002bd8 <UART_puts>
			else // bv. eBlocked, eRunning, eInvalid etc.
			{
				vTaskSuspend(ptd->hTask);
				UART_puts(" suspended.");
			}
			return;
 8001c18:	e012      	b.n	8001c40 <StartStopTask+0x78>
				vTaskSuspend(ptd->hTask);
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00c ff66 	bl	800eaf0 <vTaskSuspend>
				UART_puts(" suspended.");
 8001c24:	480b      	ldr	r0, [pc, #44]	@ (8001c54 <StartStopTask+0x8c>)
 8001c26:	f000 ffd7 	bl	8002bd8 <UART_puts>
 8001c2a:	e009      	b.n	8001c40 <StartStopTask+0x78>
	for (task_nr = 1; ptd->func != NULL; ptd++, task_nr++)
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c2e:	3330      	adds	r3, #48	@ 0x30
 8001c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c34:	3301      	adds	r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1cc      	bne.n	8001bda <StartStopTask+0x12>
		}
}
 8001c40:	3738      	adds	r7, #56	@ 0x38
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	080163b0 	.word	0x080163b0
 8001c50:	080163d4 	.word	0x080163d4
 8001c54:	080163e0 	.word	0x080163e0

08001c58 <DisplayTaskData>:
/**
* @brief Displays de stack-gegevens van alle taken op de UART
* @return void
*/
void DisplayTaskData(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	@ 0x38
 8001c5c:	af00      	add	r7, sp, #0
	PTASKDATA    ptd = tasks;
 8001c5e:	4b45      	ldr	r3, [pc, #276]	@ (8001d74 <DisplayTaskData+0x11c>)
 8001c60:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t  highwatermark;
	TaskStatus_t xTaskDetails;
	unsigned int free, totalalloc = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30

	unsigned int task_nr; // tasknr for changing priority

	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001c66:	2301      	movs	r3, #1
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c6a:	e05f      	b.n	8001d2c <DisplayTaskData+0xd4>
	{
		highwatermark = uxTaskGetStackHighWaterMark(ptd->hTask); 	// amount of free bytes
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00d fe4b 	bl	800f90c <uxTaskGetStackHighWaterMark>
 8001c76:	62b8      	str	r0, [r7, #40]	@ 0x28
		free = (highwatermark * 100) / ptd->attr.stack_size; 		// in percentage
 8001c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7a:	2264      	movs	r2, #100	@ 0x64
 8001c7c:	fb03 f202 	mul.w	r2, r3, r2
 8001c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
		totalalloc += ptd->attr.stack_size;
 8001c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c90:	4413      	add	r3, r2
 8001c92:	633b      	str	r3, [r7, #48]	@ 0x30

		vTaskGetInfo (ptd->hTask, &xTaskDetails, pdTRUE, eInvalid); // get task status
 8001c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c96:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001c98:	4639      	mov	r1, r7
 8001c9a:	2305      	movs	r3, #5
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f00d fdb3 	bl	800f808 <vTaskGetInfo>

		UART_puts("\r\n\t[");        UART_putint(task_nr); UART_puts("] ");
 8001ca2:	4835      	ldr	r0, [pc, #212]	@ (8001d78 <DisplayTaskData+0x120>)
 8001ca4:	f000 ff98 	bl	8002bd8 <UART_puts>
 8001ca8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001caa:	f000 ffb1 	bl	8002c10 <UART_putint>
 8001cae:	4833      	ldr	r0, [pc, #204]	@ (8001d7c <DisplayTaskData+0x124>)
 8001cb0:	f000 ff92 	bl	8002bd8 <UART_puts>
		UART_puts(ptd->attr.name);
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 ff8d 	bl	8002bd8 <UART_puts>
		UART_puts("\t priority: ");  UART_putint(ptd->attr.priority);
 8001cbe:	4830      	ldr	r0, [pc, #192]	@ (8001d80 <DisplayTaskData+0x128>)
 8001cc0:	f000 ff8a 	bl	8002bd8 <UART_puts>
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 ffa1 	bl	8002c10 <UART_putint>
		UART_puts("\t stacksize: "); UART_putint(ptd->attr.stack_size * 4);
 8001cce:	482d      	ldr	r0, [pc, #180]	@ (8001d84 <DisplayTaskData+0x12c>)
 8001cd0:	f000 ff82 	bl	8002bd8 <UART_puts>
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 ff98 	bl	8002c10 <UART_putint>
		UART_puts("\t free: ");  UART_putint(highwatermark*4);
 8001ce0:	4829      	ldr	r0, [pc, #164]	@ (8001d88 <DisplayTaskData+0x130>)
 8001ce2:	f000 ff79 	bl	8002bd8 <UART_puts>
 8001ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 ff90 	bl	8002c10 <UART_putint>
		UART_puts("\t used: ");      UART_putint(100 - free); UART_puts("%");
 8001cf0:	4826      	ldr	r0, [pc, #152]	@ (8001d8c <DisplayTaskData+0x134>)
 8001cf2:	f000 ff71 	bl	8002bd8 <UART_puts>
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 ff87 	bl	8002c10 <UART_putint>
 8001d02:	4823      	ldr	r0, [pc, #140]	@ (8001d90 <DisplayTaskData+0x138>)
 8001d04:	f000 ff68 	bl	8002bd8 <UART_puts>
		UART_puts("\t status: ");    UART_puts(xTaskDetails.eCurrentState == eSuspended ? "suspended": "running");
 8001d08:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <DisplayTaskData+0x13c>)
 8001d0a:	f000 ff65 	bl	8002bd8 <UART_puts>
 8001d0e:	7b3b      	ldrb	r3, [r7, #12]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d101      	bne.n	8001d18 <DisplayTaskData+0xc0>
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <DisplayTaskData+0x140>)
 8001d16:	e000      	b.n	8001d1a <DisplayTaskData+0xc2>
 8001d18:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <DisplayTaskData+0x144>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 ff5c 	bl	8002bd8 <UART_puts>
	for (task_nr=1; ptd->func != NULL; ptd++, task_nr++)
 8001d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d22:	3330      	adds	r3, #48	@ 0x30
 8001d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	3301      	adds	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d19b      	bne.n	8001c6c <DisplayTaskData+0x14>
	}
	UART_puts("\r\n\tTotal heap: "); UART_putint(configTOTAL_HEAP_SIZE);
 8001d34:	481a      	ldr	r0, [pc, #104]	@ (8001da0 <DisplayTaskData+0x148>)
 8001d36:	f000 ff4f 	bl	8002bd8 <UART_puts>
 8001d3a:	f44f 407a 	mov.w	r0, #64000	@ 0xfa00
 8001d3e:	f000 ff67 	bl	8002c10 <UART_putint>
	UART_puts("    Allocated task stack: "); UART_putint(totalalloc * 4);
 8001d42:	4818      	ldr	r0, [pc, #96]	@ (8001da4 <DisplayTaskData+0x14c>)
 8001d44:	f000 ff48 	bl	8002bd8 <UART_puts>
 8001d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 ff5f 	bl	8002c10 <UART_putint>
	UART_puts("    Free heap space: "); UART_putint(configTOTAL_HEAP_SIZE - (totalalloc * 4));
 8001d52:	4815      	ldr	r0, [pc, #84]	@ (8001da8 <DisplayTaskData+0x150>)
 8001d54:	f000 ff40 	bl	8002bd8 <UART_puts>
 8001d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5a:	f5c3 537a 	rsb	r3, r3, #16000	@ 0x3e80
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 ff55 	bl	8002c10 <UART_putint>
	UART_puts("\r\n");
 8001d66:	4811      	ldr	r0, [pc, #68]	@ (8001dac <DisplayTaskData+0x154>)
 8001d68:	f000 ff36 	bl	8002bd8 <UART_puts>
}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	@ 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000008 	.word	0x20000008
 8001d78:	080163ec 	.word	0x080163ec
 8001d7c:	080163f4 	.word	0x080163f4
 8001d80:	080163f8 	.word	0x080163f8
 8001d84:	08016408 	.word	0x08016408
 8001d88:	08016418 	.word	0x08016418
 8001d8c:	08016424 	.word	0x08016424
 8001d90:	08016430 	.word	0x08016430
 8001d94:	08016434 	.word	0x08016434
 8001d98:	08016440 	.word	0x08016440
 8001d9c:	0801644c 	.word	0x0801644c
 8001da0:	08016454 	.word	0x08016454
 8001da4:	08016464 	.word	0x08016464
 8001da8:	08016480 	.word	0x08016480
 8001dac:	080163b0 	.word	0x080163b0

08001db0 <fill_GNRMC>:
* GNRMC-struct, mbv strtok(); De struct bevat nu alleen chars - je kunt er ook voor kiezen
* om gelijk met doubles te werken, die je dan met atof(); omzet.
* @return void
*/
void fill_GNRMC(char *message)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	// example: $GNRMC,164435.000,A,5205.9505,N,00507.0873,E,0.49,21.70,140423,,,A
	//          id    , time     ,s,

	osThreadId_t hTask;

	if (!(hTask = xTaskGetHandle("GPS_parser")))
 8001db8:	485c      	ldr	r0, [pc, #368]	@ (8001f2c <fill_GNRMC+0x17c>)
 8001dba:	f00d f93b 	bl	800f034 <xTaskGetHandle>
 8001dbe:	6178      	str	r0, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <fill_GNRMC+0x1c>
				error_HaltOS("Err:ARM_hndle");
 8001dc6:	485a      	ldr	r0, [pc, #360]	@ (8001f30 <fill_GNRMC+0x180>)
 8001dc8:	f7ff fdd6 	bl	8001978 <error_HaltOS>

	char *tok = ",";
 8001dcc:	4b59      	ldr	r3, [pc, #356]	@ (8001f34 <fill_GNRMC+0x184>)
 8001dce:	613b      	str	r3, [r7, #16]
	char *s;

	memset(&gnrmc, 0, sizeof(GNRMC)); // clear the struct
 8001dd0:	2247      	movs	r2, #71	@ 0x47
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4858      	ldr	r0, [pc, #352]	@ (8001f38 <fill_GNRMC+0x188>)
 8001dd6:	f011 f9b8 	bl	801314a <memset>

	s = strtok(message, tok); // 0. header;
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f011 f9db 	bl	8013198 <strtok>
 8001de2:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.head, s);
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4854      	ldr	r0, [pc, #336]	@ (8001f38 <fill_GNRMC+0x188>)
 8001de8:	f011 fb17 	bl	801341a <strcpy>

	s = strtok(NULL, tok);    // 1. time; not used
 8001dec:	6939      	ldr	r1, [r7, #16]
 8001dee:	2000      	movs	r0, #0
 8001df0:	f011 f9d2 	bl	8013198 <strtok>
 8001df4:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 2. valid;
 8001df6:	6939      	ldr	r1, [r7, #16]
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f011 f9cd 	bl	8013198 <strtok>
 8001dfe:	60f8      	str	r0, [r7, #12]
	gnrmc.status = s[0];
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	4b4c      	ldr	r3, [pc, #304]	@ (8001f38 <fill_GNRMC+0x188>)
 8001e06:	745a      	strb	r2, [r3, #17]

	s = strtok(NULL, tok);    // 3. latitude;
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f011 f9c4 	bl	8013198 <strtok>
 8001e10:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.latitude, s);
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	4849      	ldr	r0, [pc, #292]	@ (8001f3c <fill_GNRMC+0x18c>)
 8001e16:	f011 fb00 	bl	801341a <strcpy>

	s = strtok(NULL, tok);    // 4. N/S; not used
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f011 f9bb 	bl	8013198 <strtok>
 8001e22:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 5. longitude;
 8001e24:	6939      	ldr	r1, [r7, #16]
 8001e26:	2000      	movs	r0, #0
 8001e28:	f011 f9b6 	bl	8013198 <strtok>
 8001e2c:	60f8      	str	r0, [r7, #12]
	if (s[0] == '0') // if leading '0' is present, remove it
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b30      	cmp	r3, #48	@ 0x30
 8001e34:	d10a      	bne.n	8001e4c <fill_GNRMC+0x9c>
		memmove(s, s + 1, strlen(s)); // remove leading '0' if present
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1c5c      	adds	r4, r3, #1
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7fe fa18 	bl	8000270 <strlen>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4621      	mov	r1, r4
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f011 f965 	bl	8013116 <memmove>
	strcpy(gnrmc.longitude, s);
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	483c      	ldr	r0, [pc, #240]	@ (8001f40 <fill_GNRMC+0x190>)
 8001e50:	f011 fae3 	bl	801341a <strcpy>

	s = strtok(NULL, tok);    // 6. E/W; not used
 8001e54:	6939      	ldr	r1, [r7, #16]
 8001e56:	2000      	movs	r0, #0
 8001e58:	f011 f99e 	bl	8013198 <strtok>
 8001e5c:	60f8      	str	r0, [r7, #12]

	s = strtok(NULL, tok);    // 7. speed;
 8001e5e:	6939      	ldr	r1, [r7, #16]
 8001e60:	2000      	movs	r0, #0
 8001e62:	f011 f999 	bl	8013198 <strtok>
 8001e66:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.speed, s);
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	4836      	ldr	r0, [pc, #216]	@ (8001f44 <fill_GNRMC+0x194>)
 8001e6c:	f011 fad5 	bl	801341a <strcpy>

	s = strtok(NULL, tok);    // 8. course;
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	2000      	movs	r0, #0
 8001e74:	f011 f990 	bl	8013198 <strtok>
 8001e78:	60f8      	str	r0, [r7, #12]
	strcpy(gnrmc.course, s);
 8001e7a:	68f9      	ldr	r1, [r7, #12]
 8001e7c:	4832      	ldr	r0, [pc, #200]	@ (8001f48 <fill_GNRMC+0x198>)
 8001e7e:	f011 facc 	bl	801341a <strcpy>

	if (Uart_debug_out & GPS_DEBUG_OUT)
 8001e82:	4b32      	ldr	r3, [pc, #200]	@ (8001f4c <fill_GNRMC+0x19c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d025      	beq.n	8001eda <fill_GNRMC+0x12a>
	{
		UART_puts("\r\n\t GPS type: \t");  UART_puts(gnrmc.head);
 8001e8e:	4830      	ldr	r0, [pc, #192]	@ (8001f50 <fill_GNRMC+0x1a0>)
 8001e90:	f000 fea2 	bl	8002bd8 <UART_puts>
 8001e94:	4828      	ldr	r0, [pc, #160]	@ (8001f38 <fill_GNRMC+0x188>)
 8001e96:	f000 fe9f 	bl	8002bd8 <UART_puts>
		UART_puts("\r\n\t status: \t\t");  UART_putchar(gnrmc.status);
 8001e9a:	482e      	ldr	r0, [pc, #184]	@ (8001f54 <fill_GNRMC+0x1a4>)
 8001e9c:	f000 fe9c 	bl	8002bd8 <UART_puts>
 8001ea0:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <fill_GNRMC+0x188>)
 8001ea2:	7c5b      	ldrb	r3, [r3, #17]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fe85 	bl	8002bb4 <UART_putchar>
		UART_puts("\r\n\t latitude:\t\t"); UART_puts(gnrmc.latitude);
 8001eaa:	482b      	ldr	r0, [pc, #172]	@ (8001f58 <fill_GNRMC+0x1a8>)
 8001eac:	f000 fe94 	bl	8002bd8 <UART_puts>
 8001eb0:	4822      	ldr	r0, [pc, #136]	@ (8001f3c <fill_GNRMC+0x18c>)
 8001eb2:	f000 fe91 	bl	8002bd8 <UART_puts>
		UART_puts("\r\n\t longitude:\t");  UART_puts(gnrmc.longitude);
 8001eb6:	4829      	ldr	r0, [pc, #164]	@ (8001f5c <fill_GNRMC+0x1ac>)
 8001eb8:	f000 fe8e 	bl	8002bd8 <UART_puts>
 8001ebc:	4820      	ldr	r0, [pc, #128]	@ (8001f40 <fill_GNRMC+0x190>)
 8001ebe:	f000 fe8b 	bl	8002bd8 <UART_puts>
		UART_puts("\r\n\t speed:    \t");  UART_puts(gnrmc.speed);
 8001ec2:	4827      	ldr	r0, [pc, #156]	@ (8001f60 <fill_GNRMC+0x1b0>)
 8001ec4:	f000 fe88 	bl	8002bd8 <UART_puts>
 8001ec8:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <fill_GNRMC+0x194>)
 8001eca:	f000 fe85 	bl	8002bd8 <UART_puts>
		UART_puts("\r\n\t course:   \t");  UART_puts(gnrmc.course);
 8001ece:	4825      	ldr	r0, [pc, #148]	@ (8001f64 <fill_GNRMC+0x1b4>)
 8001ed0:	f000 fe82 	bl	8002bd8 <UART_puts>
 8001ed4:	481c      	ldr	r0, [pc, #112]	@ (8001f48 <fill_GNRMC+0x198>)
 8001ed6:	f000 fe7f 	bl	8002bd8 <UART_puts>
	}

	// Filling, and swapping the GNRMC buffers, using a mutex so that the reader task does not read half filled buffers
	if (xSemaphoreTake(hGPS_Mutex, portMAX_DELAY) == pdTRUE)
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <fill_GNRMC+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00b ff5a 	bl	800dd9c <xQueueSemaphoreTake>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d119      	bne.n	8001f22 <fill_GNRMC+0x172>
	{
		memcpy((void*)writerBuffer, &gnrmc, sizeof(GNRMC)); // copy data to writerBuffer
 8001eee:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <fill_GNRMC+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <fill_GNRMC+0x188>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	2347      	movs	r3, #71	@ 0x47
 8001efa:	461a      	mov	r2, r3
 8001efc:	f011 fa95 	bl	801342a <memcpy>

		GNRMC *temp = writerBuffer; // swap buffers
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <fill_GNRMC+0x1bc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60bb      	str	r3, [r7, #8]
		writerBuffer = readerBuffer; // swap writer and reader buffers
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <fill_GNRMC+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <fill_GNRMC+0x1bc>)
 8001f0c:	6013      	str	r3, [r2, #0]
		readerBuffer = temp;
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <fill_GNRMC+0x1c0>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	6013      	str	r3, [r2, #0]

		xSemaphoreGive(hGPS_Mutex); // release mutex
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <fill_GNRMC+0x1b8>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	f00b fcbb 	bl	800d898 <xQueueGenericSend>
	}

}
 8001f22:	bf00      	nop
 8001f24:	371c      	adds	r7, #28
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd90      	pop	{r4, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	08016498 	.word	0x08016498
 8001f30:	080164a4 	.word	0x080164a4
 8001f34:	080164b4 	.word	0x080164b4
 8001f38:	20002460 	.word	0x20002460
 8001f3c:	20002472 	.word	0x20002472
 8001f40:	2000247d 	.word	0x2000247d
 8001f44:	20002488 	.word	0x20002488
 8001f48:	2000248e 	.word	0x2000248e
 8001f4c:	20002444 	.word	0x20002444
 8001f50:	080164b8 	.word	0x080164b8
 8001f54:	080164c8 	.word	0x080164c8
 8001f58:	080164d8 	.word	0x080164d8
 8001f5c:	080164e8 	.word	0x080164e8
 8001f60:	080164f8 	.word	0x080164f8
 8001f64:	08016508 	.word	0x08016508
 8001f68:	2000245c 	.word	0x2000245c
 8001f6c:	20000248 	.word	0x20000248
 8001f70:	2000024c 	.word	0x2000024c

08001f74 <GPS_getNMEA>:
* binnenkomen. * De handler zet elk inkomende character gelijk op een queue, die hier uitgelezen wordt.
* Vervolgens wordt hiervan een GPS-message opgebouwd en verwerkt.
* @return void
*/
void GPS_getNMEA (void *argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09c      	sub	sp, #112	@ 0x70
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    char  Q_char;   			// char to receive from queue
	char  MSG_buff[GPS_MAXLEN]; // buffer for GPS-string
	int   pos = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	int   cs;                   // checksum-flag
	int   new_msg = FALSE;      // do we encounter a '$'-char?
 8001f80:	2300      	movs	r3, #0
 8001f82:	66bb      	str	r3, [r7, #104]	@ 0x68
	int   msg_type = 0;         // do we want this message to be interpreted?
 8001f84:	2300      	movs	r3, #0
 8001f86:	667b      	str	r3, [r7, #100]	@ 0x64

	UART_puts((char *)__func__); UART_puts("started\n\r");
 8001f88:	4855      	ldr	r0, [pc, #340]	@ (80020e0 <GPS_getNMEA+0x16c>)
 8001f8a:	f000 fe25 	bl	8002bd8 <UART_puts>
 8001f8e:	4855      	ldr	r0, [pc, #340]	@ (80020e4 <GPS_getNMEA+0x170>)
 8001f90:	f000 fe22 	bl	8002bd8 <UART_puts>

	while (TRUE)
	{
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 8001f94:	4b54      	ldr	r3, [pc, #336]	@ (80020e8 <GPS_getNMEA+0x174>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f107 015f 	add.w	r1, r7, #95	@ 0x5f
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00b fe19 	bl	800dbd8 <xQueueReceive>

		//UART_putchar(Q_buff);  // echo, for testing

		if (Q_char == '$') // gotcha, new datastring started
 8001fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001faa:	2b24      	cmp	r3, #36	@ 0x24
 8001fac:	d10a      	bne.n	8001fc4 <GPS_getNMEA+0x50>
		{
			memset(MSG_buff, 0, sizeof(MSG_buff)); // clear buff
 8001fae:	f107 030c 	add.w	r3, r7, #12
 8001fb2:	2253      	movs	r2, #83	@ 0x53
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f011 f8c7 	bl	801314a <memset>
			pos = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
			new_msg = TRUE; // from now on, chars are valid to receive
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	66bb      	str	r3, [r7, #104]	@ 0x68
		}

		if (new_msg == FALSE) // char only valid if started by $
 8001fc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 8088 	beq.w	80020dc <GPS_getNMEA+0x168>
			continue;

		MSG_buff[pos] = Q_char; // copy char read from Q into the msg-buf
 8001fcc:	f897 105f 	ldrb.w	r1, [r7, #95]	@ 0x5f
 8001fd0:	f107 020c 	add.w	r2, r7, #12
 8001fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd6:	4413      	add	r3, r2
 8001fd8:	460a      	mov	r2, r1
 8001fda:	701a      	strb	r2, [r3, #0]

		// if pos==5, the message type (f.i. "$GPGSA) is complete, so we now we can determine
		// if we want the rest of the message... else we skip the rest characters
		if (pos == 5)
 8001fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d130      	bne.n	8002044 <GPS_getNMEA+0xd0>
		{
			msg_type = 0; // reset
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	667b      	str	r3, [r7, #100]	@ 0x64

			// next, we decide which message types we want to interpret
			// and we set the message-type for later use...
			if      (!strncmp(&MSG_buff[1], "GNRMC", 5)) msg_type = eGNRMC;
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	3301      	adds	r3, #1
 8001fec:	2205      	movs	r2, #5
 8001fee:	493f      	ldr	r1, [pc, #252]	@ (80020ec <GPS_getNMEA+0x178>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f011 f8bf 	bl	8013174 <strncmp>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <GPS_getNMEA+0x8e>
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002000:	e01a      	b.n	8002038 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GPGSA", 5)) msg_type = eGPGSA;
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	3301      	adds	r3, #1
 8002008:	2205      	movs	r2, #5
 800200a:	4939      	ldr	r1, [pc, #228]	@ (80020f0 <GPS_getNMEA+0x17c>)
 800200c:	4618      	mov	r0, r3
 800200e:	f011 f8b1 	bl	8013174 <strncmp>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <GPS_getNMEA+0xaa>
 8002018:	2302      	movs	r3, #2
 800201a:	667b      	str	r3, [r7, #100]	@ 0x64
 800201c:	e00c      	b.n	8002038 <GPS_getNMEA+0xc4>
			else if (!strncmp(&MSG_buff[1], "GNGGA", 5)) msg_type = eGNGGA;
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	3301      	adds	r3, #1
 8002024:	2205      	movs	r2, #5
 8002026:	4933      	ldr	r1, [pc, #204]	@ (80020f4 <GPS_getNMEA+0x180>)
 8002028:	4618      	mov	r0, r3
 800202a:	f011 f8a3 	bl	8013174 <strncmp>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <GPS_getNMEA+0xc4>
 8002034:	2303      	movs	r3, #3
 8002036:	667b      	str	r3, [r7, #100]	@ 0x64

			if (!msg_type) // not an interesting message type
 8002038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <GPS_getNMEA+0xd0>
			{
				new_msg = FALSE;
 800203e:	2300      	movs	r3, #0
 8002040:	66bb      	str	r3, [r7, #104]	@ 0x68
				continue;
 8002042:	e04c      	b.n	80020de <GPS_getNMEA+0x16a>
			}
		}

		// if we are here, we are reading the rest of the message into the msg_buff
		////////////////////////////////////////////////////////////////////////////
		if (pos >= GPS_MAXLEN - 1) // avoid overflow (should not happen, but still...)
 8002044:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002046:	2b51      	cmp	r3, #81	@ 0x51
 8002048:	dd02      	ble.n	8002050 <GPS_getNMEA+0xdc>
		{
			new_msg = FALSE; // ignore it
 800204a:	2300      	movs	r3, #0
 800204c:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 800204e:	e046      	b.n	80020de <GPS_getNMEA+0x16a>
		}

		if (MSG_buff[pos] == '\r') // end of message encountered - all messages end with <CR-13><LF-10>
 8002050:	f107 020c 	add.w	r2, r7, #12
 8002054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b0d      	cmp	r3, #13
 800205c:	d13a      	bne.n	80020d4 <GPS_getNMEA+0x160>
		{
			MSG_buff[pos] = '\0';          // close string
 800205e:	f107 020c 	add.w	r2, r7, #12
 8002062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002064:	4413      	add	r3, r2
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
			cs = checksum_valid(MSG_buff); // note, checksumchars (eg "*43") are removed from string
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f88e 	bl	8002190 <checksum_valid>
 8002074:	6638      	str	r0, [r7, #96]	@ 0x60

			if (Uart_debug_out & GPS_DEBUG_OUT) // output to uart if wanted
 8002076:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <GPS_getNMEA+0x184>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d010      	beq.n	80020a4 <GPS_getNMEA+0x130>
			{
				UART_puts("\r\nGPS (UART4): "); UART_puts(MSG_buff);
 8002082:	481e      	ldr	r0, [pc, #120]	@ (80020fc <GPS_getNMEA+0x188>)
 8002084:	f000 fda8 	bl	8002bd8 <UART_puts>
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fda3 	bl	8002bd8 <UART_puts>
				UART_puts( cs ? " [cs:OK]\r\n" : " [cs:ERR]\r\n");
 8002092:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <GPS_getNMEA+0x128>
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <GPS_getNMEA+0x18c>)
 800209a:	e000      	b.n	800209e <GPS_getNMEA+0x12a>
 800209c:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <GPS_getNMEA+0x190>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fd9a 	bl	8002bd8 <UART_puts>
			}

			if (cs) // checksum okay, so interpret the message
 80020a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d011      	beq.n	80020ce <GPS_getNMEA+0x15a>
			{
				switch(msg_type) // extract data from msg into right struct
 80020aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d007      	beq.n	80020c0 <GPS_getNMEA+0x14c>
 80020b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	dd0a      	ble.n	80020cc <GPS_getNMEA+0x158>
 80020b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b8:	3b02      	subs	r3, #2
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d806      	bhi.n	80020cc <GPS_getNMEA+0x158>
				{
				case eGNRMC: fill_GNRMC(MSG_buff);
						     // use the data...
						     break;
				case eGPGSA:
				case eGNGGA: break;
 80020be:	e006      	b.n	80020ce <GPS_getNMEA+0x15a>
				case eGNRMC: fill_GNRMC(MSG_buff);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fe73 	bl	8001db0 <fill_GNRMC>
						     break;
 80020ca:	e000      	b.n	80020ce <GPS_getNMEA+0x15a>
				default:     break;
 80020cc:	bf00      	nop
				}
			}

			new_msg = FALSE; // new message possible
 80020ce:	2300      	movs	r3, #0
 80020d0:	66bb      	str	r3, [r7, #104]	@ 0x68
			continue;
 80020d2:	e004      	b.n	80020de <GPS_getNMEA+0x16a>
		}
		pos++; // proceed reading next char from the queue
 80020d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020d6:	3301      	adds	r3, #1
 80020d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020da:	e75b      	b.n	8001f94 <GPS_getNMEA+0x20>
			continue;
 80020dc:	bf00      	nop
		xQueueReceive(hGPS_Queue, &Q_char, portMAX_DELAY); // get one char from the q
 80020de:	e759      	b.n	8001f94 <GPS_getNMEA+0x20>
 80020e0:	08016674 	.word	0x08016674
 80020e4:	08016518 	.word	0x08016518
 80020e8:	2000244c 	.word	0x2000244c
 80020ec:	08016524 	.word	0x08016524
 80020f0:	0801652c 	.word	0x0801652c
 80020f4:	08016534 	.word	0x08016534
 80020f8:	20002444 	.word	0x20002444
 80020fc:	0801653c 	.word	0x0801653c
 8002100:	0801654c 	.word	0x0801654c
 8002104:	08016558 	.word	0x08016558

08002108 <hex2int>:
}


// source: file:///C:/craigpeacock/NMEA-GPS
int hex2int(char *c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	int value;

	value = hexchar2int(c[0]);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f813 	bl	8002140 <hexchar2int>
 800211a:	60f8      	str	r0, [r7, #12]
	value = value << 4;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
	value += hexchar2int(c[1]);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3301      	adds	r3, #1
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f809 	bl	8002140 <hexchar2int>
 800212e:	4602      	mov	r2, r0
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

	return value;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <hexchar2int>:


int hexchar2int(char c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b2f      	cmp	r3, #47	@ 0x2f
 800214e:	d905      	bls.n	800215c <hexchar2int+0x1c>
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b39      	cmp	r3, #57	@ 0x39
 8002154:	d802      	bhi.n	800215c <hexchar2int+0x1c>
        return (c - '0');
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	3b30      	subs	r3, #48	@ 0x30
 800215a:	e013      	b.n	8002184 <hexchar2int+0x44>
    if (c >= 'A' && c <= 'F')
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	2b40      	cmp	r3, #64	@ 0x40
 8002160:	d905      	bls.n	800216e <hexchar2int+0x2e>
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b46      	cmp	r3, #70	@ 0x46
 8002166:	d802      	bhi.n	800216e <hexchar2int+0x2e>
        return (c - 'A' + 10);
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	3b37      	subs	r3, #55	@ 0x37
 800216c:	e00a      	b.n	8002184 <hexchar2int+0x44>
    if (c >= 'a' && c <= 'f')
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2b60      	cmp	r3, #96	@ 0x60
 8002172:	d905      	bls.n	8002180 <hexchar2int+0x40>
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	2b66      	cmp	r3, #102	@ 0x66
 8002178:	d802      	bhi.n	8002180 <hexchar2int+0x40>
        return (c - 'a' + 10);
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	3b57      	subs	r3, #87	@ 0x57
 800217e:	e001      	b.n	8002184 <hexchar2int+0x44>
    return (-1);
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <checksum_valid>:


// source: file:///C:/craigpeacock/NMEA-GPS
int checksum_valid(char *string)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	char *checksum_str;
	int checksum, i;
	unsigned char calculated_checksum = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]

	// Checksum is postcede by *
	if ((checksum_str = strchr(string, '*')))
 800219c:	212a      	movs	r1, #42	@ 0x2a
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f010 ffdb 	bl	801315a <strchr>
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d022      	beq.n	80021f2 <checksum_valid+0x62>
	{
		*checksum_str = '\0'; // Remove checksum from string
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
		// Calculate checksum, starting after $ (i = 1)
		for (i = 1; i < strlen(string); i++)
 80021b2:	2301      	movs	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e009      	b.n	80021cc <checksum_valid+0x3c>
			calculated_checksum = calculated_checksum ^ string[i];
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	4053      	eors	r3, r2
 80021c4:	74fb      	strb	r3, [r7, #19]
		for (i = 1; i < strlen(string); i++)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7fe f84f 	bl	8000270 <strlen>
 80021d2:	4602      	mov	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d8ee      	bhi.n	80021b8 <checksum_valid+0x28>

		checksum = hex2int((char *)checksum_str+1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3301      	adds	r3, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff92 	bl	8002108 <hex2int>
 80021e4:	60b8      	str	r0, [r7, #8]
		//printf("Checksum Str [%s], Checksum %02X, Calculated Checksum %02X\r\n",(char *)checksum_str+1, checksum, calculated_checksum);
		if (checksum == calculated_checksum)
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d101      	bne.n	80021f2 <checksum_valid+0x62>
			return (1);
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <checksum_valid+0x64>
	}

	return (0);
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <LED_Task1>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task1 (void *argument)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002204:	4820      	ldr	r0, [pc, #128]	@ (8002288 <LED_Task1+0x8c>)
 8002206:	f000 fce7 	bl	8002bd8 <UART_puts>
 800220a:	4820      	ldr	r0, [pc, #128]	@ (800228c <LED_Task1+0x90>)
 800220c:	f000 fce4 	bl	8002bd8 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8002210:	4b1f      	ldr	r3, [pc, #124]	@ (8002290 <LED_Task1+0x94>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	4618      	mov	r0, r3
 800221a:	f00b fdbf 	bl	800dd9c <xQueueSemaphoreTake>
	    * de code hieronder wordt alleen uitgevoerd nadat ik de mutex heb gekregen.
	    * andere tasks die op deze mutex wachten, kunnen pas door nadat ik de mutex
	    * heb vrijgegeven met Give.
	    */
		leds = 128; // start at led nr. 8
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds>>=1)
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	e01c      	b.n	8002262 <LED_Task1+0x66>
		{
        	LED_put(leds); // set leds
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	b29b      	uxth	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fc87 	bl	8002b40 <LED_put>
           	osDelay(os_delay);
 8002232:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <LED_Task1+0x98>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f00a fd90 	bl	800cd5c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 800223c:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <LED_Task1+0x9c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <LED_Task1+0x5a>
			{
	    		UART_puts("\r\nM1 led: "); UART_putint(leds);
 8002248:	4814      	ldr	r0, [pc, #80]	@ (800229c <LED_Task1+0xa0>)
 800224a:	f000 fcc5 	bl	8002bd8 <UART_puts>
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fcdd 	bl	8002c10 <UART_putint>
		for (i=0; i<8; i++, leds>>=1)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3301      	adds	r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	105b      	asrs	r3, r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b07      	cmp	r3, #7
 8002266:	dddf      	ble.n	8002228 <LED_Task1+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // geef de semaphore weer vrij voor een ander
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <LED_Task1+0x94>)
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	f00b fb11 	bl	800d898 <xQueueGenericSend>
    	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <LED_Task1+0xa4>)
 8002278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); /* wacht op toegang tot de semaphore;
 8002286:	e7c3      	b.n	8002210 <LED_Task1+0x14>
 8002288:	08016680 	.word	0x08016680
 800228c:	08016564 	.word	0x08016564
 8002290:	20002450 	.word	0x20002450
 8002294:	20000250 	.word	0x20000250
 8002298:	20002444 	.word	0x20002444
 800229c:	08016570 	.word	0x08016570
 80022a0:	e000ed04 	.word	0xe000ed04

080022a4 <LED_Task2>:
* @brief Tasks die ledjes manipuleren nadat ze eerst afgeschermd zijn met mutex semaphores.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task2 (void *argument)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 80022ac:	4820      	ldr	r0, [pc, #128]	@ (8002330 <LED_Task2+0x8c>)
 80022ae:	f000 fc93 	bl	8002bd8 <UART_puts>
 80022b2:	4820      	ldr	r0, [pc, #128]	@ (8002334 <LED_Task2+0x90>)
 80022b4:	f000 fc90 	bl	8002bd8 <UART_puts>
	int i, leds;

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 80022b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002338 <LED_Task2+0x94>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	4618      	mov	r0, r3
 80022c2:	f00b fd6b 	bl	800dd9c <xQueueSemaphoreTake>
		leds = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
		for (i=0; i<8; i++, leds<<=1)
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e01c      	b.n	800230a <LED_Task2+0x66>
		{
        	LED_put(leds); // set leds
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fc33 	bl	8002b40 <LED_put>
          	osDelay(os_delay);
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <LED_Task2+0x98>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f00a fd3c 	bl	800cd5c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80022e4:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <LED_Task2+0x9c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <LED_Task2+0x5a>
			{
	    		UART_puts("\r\n\tM2 led: "); UART_putint(leds);
 80022f0:	4814      	ldr	r0, [pc, #80]	@ (8002344 <LED_Task2+0xa0>)
 80022f2:	f000 fc71 	bl	8002bd8 <UART_puts>
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fc89 	bl	8002c10 <UART_putint>
		for (i=0; i<8; i++, leds<<=1)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3301      	adds	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b07      	cmp	r3, #7
 800230e:	dddf      	ble.n	80022d0 <LED_Task2+0x2c>
			}
   		}
     	xSemaphoreGive(hLED_Sem); // free mutex
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <LED_Task2+0x94>)
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	2300      	movs	r3, #0
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	f00b fabd 	bl	800d898 <xQueueGenericSend>
       	taskYIELD(); // done, force context switch, otherwise freeRTOS stays in this task
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <LED_Task2+0xa4>)
 8002320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	f3bf 8f6f 	isb	sy
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to enter
 800232e:	e7c3      	b.n	80022b8 <LED_Task2+0x14>
 8002330:	0801668c 	.word	0x0801668c
 8002334:	08016564 	.word	0x08016564
 8002338:	20002450 	.word	0x20002450
 800233c:	20000250 	.word	0x20000250
 8002340:	20002444 	.word	0x20002444
 8002344:	0801657c 	.word	0x0801657c
 8002348:	e000ed04 	.word	0xe000ed04

0800234c <LED_Task3>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task3 (void *argument)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask4;

	if (!(hTask4 = xTaskGetHandle("LED_Task4")))
 8002354:	4830      	ldr	r0, [pc, #192]	@ (8002418 <LED_Task3+0xcc>)
 8002356:	f00c fe6d 	bl	800f034 <xTaskGetHandle>
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d102      	bne.n	8002368 <LED_Task3+0x1c>
	   error_HaltOS("Err:hTask4");
 8002362:	482e      	ldr	r0, [pc, #184]	@ (800241c <LED_Task3+0xd0>)
 8002364:	f7ff fb08 	bl	8001978 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002368:	482d      	ldr	r0, [pc, #180]	@ (8002420 <LED_Task3+0xd4>)
 800236a:	f000 fc35 	bl	8002bd8 <UART_puts>
 800236e:	482d      	ldr	r0, [pc, #180]	@ (8002424 <LED_Task3+0xd8>)
 8002370:	f000 fc32 	bl	8002bd8 <UART_puts>

	while(TRUE)
	{
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002374:	4b2c      	ldr	r3, [pc, #176]	@ (8002428 <LED_Task3+0xdc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	4618      	mov	r0, r3
 800237e:	f00b fd0d 	bl	800dd9c <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	e02d      	b.n	80023e4 <LED_Task3+0x98>
	    {
	    	if 		(i==0)	leds = 8+16; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <LED_Task3+0x48>
 800238e:	2318      	movs	r3, #24
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e00d      	b.n	80023b0 <LED_Task3+0x64>
	    	else if (i==1)  leds = 4+32; // ... had ook met switch-case gekund
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <LED_Task3+0x54>
 800239a:	2324      	movs	r3, #36	@ 0x24
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e007      	b.n	80023b0 <LED_Task3+0x64>
	    	else if (i==2)  leds = 2+64;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d102      	bne.n	80023ac <LED_Task3+0x60>
 80023a6:	2342      	movs	r3, #66	@ 0x42
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e001      	b.n	80023b0 <LED_Task3+0x64>
	    	else 			leds = 1+128;
 80023ac:	2381      	movs	r3, #129	@ 0x81
 80023ae:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fbc3 	bl	8002b40 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, kan veranderd worden via user interface
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <LED_Task3+0xe0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f00a fccc 	bl	800cd5c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <LED_Task3+0xe4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <LED_Task3+0x92>
			{
				UART_puts("\r\n\t\tM3 led: "); UART_putint(leds);
 80023d0:	4818      	ldr	r0, [pc, #96]	@ (8002434 <LED_Task3+0xe8>)
 80023d2:	f000 fc01 	bl	8002bd8 <UART_puts>
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fc19 	bl	8002c10 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	ddce      	ble.n	8002388 <LED_Task3+0x3c>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <LED_Task3+0xdc>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	2300      	movs	r3, #0
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	f00b fa50 	bl	800d898 <xQueueGenericSend>

     	xTaskNotifyGive(hTask4); // give the ball to mutextask4
 80023f8:	2300      	movs	r3, #0
 80023fa:	2202      	movs	r2, #2
 80023fc:	2100      	movs	r1, #0
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f00d fd48 	bl	800fe94 <xTaskGenericNotify>
		osDelay(200);
 8002404:	20c8      	movs	r0, #200	@ 0xc8
 8002406:	f00a fca9 	bl	800cd5c <osDelay>

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for task 4
 800240a:	f04f 31ff 	mov.w	r1, #4294967295
 800240e:	2001      	movs	r0, #1
 8002410:	f00d fc94 	bl	800fd3c <ulTaskNotifyTake>
	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait to get in...
 8002414:	e7ae      	b.n	8002374 <LED_Task3+0x28>
 8002416:	bf00      	nop
 8002418:	08016588 	.word	0x08016588
 800241c:	08016594 	.word	0x08016594
 8002420:	08016698 	.word	0x08016698
 8002424:	08016564 	.word	0x08016564
 8002428:	20002450 	.word	0x20002450
 800242c:	20000250 	.word	0x20000250
 8002430:	20002444 	.word	0x20002444
 8002434:	080165a0 	.word	0x080165a0

08002438 <LED_Task4>:
* Task 3 en 4 werken daarnaast nog met tasknotification.
* @param *argument Niet gebruikt, eventueel een waarde of string om te testen
* @return void
*/
void LED_Task4 (void *argument)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	int          i, leds;
	osThreadId_t hTask3;

	if (!(hTask3 = xTaskGetHandle("LED_Task3")))
 8002440:	4830      	ldr	r0, [pc, #192]	@ (8002504 <LED_Task4+0xcc>)
 8002442:	f00c fdf7 	bl	800f034 <xTaskGetHandle>
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <LED_Task4+0x1c>
	   error_HaltOS("Err:hTask3");
 800244e:	482e      	ldr	r0, [pc, #184]	@ (8002508 <LED_Task4+0xd0>)
 8002450:	f7ff fa92 	bl	8001978 <error_HaltOS>

	UART_puts((char *)__func__); UART_puts(" started\r\n");
 8002454:	482d      	ldr	r0, [pc, #180]	@ (800250c <LED_Task4+0xd4>)
 8002456:	f000 fbbf 	bl	8002bd8 <UART_puts>
 800245a:	482d      	ldr	r0, [pc, #180]	@ (8002510 <LED_Task4+0xd8>)
 800245c:	f000 fbbc 	bl	8002bd8 <UART_puts>

	while(TRUE)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002460:	f04f 31ff 	mov.w	r1, #4294967295
 8002464:	2001      	movs	r0, #1
 8002466:	f00d fc69 	bl	800fd3c <ulTaskNotifyTake>

	    xSemaphoreTake(hLED_Sem, portMAX_DELAY); // wait for mutex
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <LED_Task4+0xdc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f04f 31ff 	mov.w	r1, #4294967295
 8002472:	4618      	mov	r0, r3
 8002474:	f00b fc92 	bl	800dd9c <xQueueSemaphoreTake>

	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e02d      	b.n	80024da <LED_Task4+0xa2>
	    {
	    	if 		(i==0)	leds = 1+128; // zichtbaar: 1. waarde i, 2. welke leds aan gaan
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <LED_Task4+0x52>
 8002484:	2381      	movs	r3, #129	@ 0x81
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	e00d      	b.n	80024a6 <LED_Task4+0x6e>
	    	else if (i==1)  leds = 2+64;  // had ook met switch-case gekund, maar dit is korter...
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d102      	bne.n	8002496 <LED_Task4+0x5e>
 8002490:	2342      	movs	r3, #66	@ 0x42
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	e007      	b.n	80024a6 <LED_Task4+0x6e>
	    	else if (i==2)  leds = 4+32;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d102      	bne.n	80024a2 <LED_Task4+0x6a>
 800249c:	2324      	movs	r3, #36	@ 0x24
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e001      	b.n	80024a6 <LED_Task4+0x6e>
	    	else 			leds = 8+16;
 80024a2:	2318      	movs	r3, #24
 80024a4:	613b      	str	r3, [r7, #16]

	    	LED_put(leds);     // set leds
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fb48 	bl	8002b40 <LED_put>
	    	osDelay(os_delay); // snelheid bepalen, waarde os_delay kan veranderd worden via user interface
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <LED_Task4+0xe0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f00a fc51 	bl	800cd5c <osDelay>

	    	if (Uart_debug_out & LEDS_DEBUG_OUT)
 80024ba:	4b18      	ldr	r3, [pc, #96]	@ (800251c <LED_Task4+0xe4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <LED_Task4+0x9c>
			{
				UART_puts("\r\n\t\t\tM4 led: "); UART_putint(leds);
 80024c6:	4816      	ldr	r0, [pc, #88]	@ (8002520 <LED_Task4+0xe8>)
 80024c8:	f000 fb86 	bl	8002bd8 <UART_puts>
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb9e 	bl	8002c10 <UART_putint>
	    for (i=0; i<4; i++) // voorbeeld hoe je je code zo overdraagbaar mogelijk maakt
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	3301      	adds	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	ddce      	ble.n	800247e <LED_Task4+0x46>
			}
	    }

     	xSemaphoreGive(hLED_Sem); // free mutex
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <LED_Task4+0xdc>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	f00b f9d5 	bl	800d898 <xQueueGenericSend>
		osDelay(200);
 80024ee:	20c8      	movs	r0, #200	@ 0xc8
 80024f0:	f00a fc34 	bl	800cd5c <osDelay>

    	xTaskNotifyGive(hTask3); // give the ball back to task 3
 80024f4:	2300      	movs	r3, #0
 80024f6:	2202      	movs	r2, #2
 80024f8:	2100      	movs	r1, #0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f00d fcca 	bl	800fe94 <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait for notification
 8002500:	e7ae      	b.n	8002460 <LED_Task4+0x28>
 8002502:	bf00      	nop
 8002504:	080165b0 	.word	0x080165b0
 8002508:	080165bc 	.word	0x080165bc
 800250c:	080166a4 	.word	0x080166a4
 8002510:	08016564 	.word	0x08016564
 8002514:	20002450 	.word	0x20002450
 8002518:	20000250 	.word	0x20000250
 800251c:	20002444 	.word	0x20002444
 8002520:	080165c8 	.word	0x080165c8

08002524 <Student_task1>:
* @brief Oefentask voor studenten
* @param argument, kan evt vanuit tasks gebruikt worden
* @return void
*/
void Student_task1 (void *argument)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b098      	sub	sp, #96	@ 0x60
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	UART_puts((char *)__func__); UART_puts(" started\r\n");
 800252c:	4810      	ldr	r0, [pc, #64]	@ (8002570 <Student_task1+0x4c>)
 800252e:	f000 fb53 	bl	8002bd8 <UART_puts>
 8002532:	4810      	ldr	r0, [pc, #64]	@ (8002574 <Student_task1+0x50>)
 8002534:	f000 fb50 	bl	8002bd8 <UART_puts>
	char buf[80];
	unsigned int i = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	65fb      	str	r3, [r7, #92]	@ 0x5c

	while(TRUE)
	{
       	osDelay(1000);
 800253c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002540:	f00a fc0c 	bl	800cd5c <osDelay>

		if (Uart_debug_out & STUDENT_DEBUG_OUT)
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <Student_task1+0x54>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f5      	beq.n	800253c <Student_task1+0x18>
		{
	       	sprintf(buf, "\r\n%s: %u", __func__, i++);
 8002550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002556:	f107 000c 	add.w	r0, r7, #12
 800255a:	4a05      	ldr	r2, [pc, #20]	@ (8002570 <Student_task1+0x4c>)
 800255c:	4907      	ldr	r1, [pc, #28]	@ (800257c <Student_task1+0x58>)
 800255e:	f010 fd75 	bl	801304c <siprintf>
			UART_puts(buf);
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fb36 	bl	8002bd8 <UART_puts>
       	osDelay(1000);
 800256c:	e7e6      	b.n	800253c <Student_task1+0x18>
 800256e:	bf00      	nop
 8002570:	080166b0 	.word	0x080166b0
 8002574:	080165d8 	.word	0x080165d8
 8002578:	20002444 	.word	0x20002444
 800257c:	080165e4 	.word	0x080165e4

08002580 <BUZZER_put>:
}

// Maak een piepje met meegegeven lengte
// toevoeging om compatibel te blijven met ARM v4.2
void BUZZER_put(unsigned int time)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;
    volatile unsigned int k=0;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]

	while (k++<100)
 800258c:	e023      	b.n	80025d6 <BUZZER_put+0x56>
    {
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 800258e:	2201      	movs	r2, #1
 8002590:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002594:	4815      	ldr	r0, [pc, #84]	@ (80025ec <BUZZER_put+0x6c>)
 8002596:	f001 fe3d 	bl	8004214 <HAL_GPIO_WritePin>
		for (i=0;i<(time+k);i++);
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e002      	b.n	80025a6 <BUZZER_put+0x26>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3301      	adds	r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	441a      	add	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d8f6      	bhi.n	80025a0 <BUZZER_put+0x20>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025b8:	480c      	ldr	r0, [pc, #48]	@ (80025ec <BUZZER_put+0x6c>)
 80025ba:	f001 fe2b 	bl	8004214 <HAL_GPIO_WritePin>
		for (i=0;(i<time+k);i++);
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e002      	b.n	80025ca <BUZZER_put+0x4a>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	3301      	adds	r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	441a      	add	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d8f6      	bhi.n	80025c4 <BUZZER_put+0x44>
	while (k++<100)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	60ba      	str	r2, [r7, #8]
 80025dc:	2b63      	cmp	r3, #99	@ 0x63
 80025de:	d9d6      	bls.n	800258e <BUZZER_put+0xe>
	}
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40020800 	.word	0x40020800

080025f0 <KEYS_init>:
void KEYS_init(void)
/* Keys initialize
 * In this function the ports are set for the keyboard.
 * The rows are outputs and the columns are input.
 */
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	4b18      	ldr	r3, [pc, #96]	@ (800265c <KEYS_init+0x6c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a17      	ldr	r2, [pc, #92]	@ (800265c <KEYS_init+0x6c>)
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <KEYS_init+0x6c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef gpio;
	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	613b      	str	r3, [r7, #16]

	gpio.Pin = KEY_ROW;
 800261e:	f640 030e 	movw	r3, #2062	@ 0x80e
 8002622:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(PKEY_ROW, &gpio);
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	480d      	ldr	r0, [pc, #52]	@ (8002660 <KEYS_init+0x70>)
 800262a:	f001 fc3f 	bl	8003eac <HAL_GPIO_Init>

	gpio.Pin = KEY_COL;
 800262e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002632:	607b      	str	r3, [r7, #4]
	gpio.Mode = GPIO_MODE_INPUT;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
	gpio.Pull = GPIO_PULLDOWN;
 8002638:	2302      	movs	r3, #2
 800263a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PKEY_COL, &gpio);
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4807      	ldr	r0, [pc, #28]	@ (8002660 <KEYS_init+0x70>)
 8002642:	f001 fc33 	bl	8003eac <HAL_GPIO_Init>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_ROW, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	f640 010e 	movw	r1, #2062	@ 0x80e
 800264c:	4804      	ldr	r0, [pc, #16]	@ (8002660 <KEYS_init+0x70>)
 800264e:	f001 fde1 	bl	8004214 <HAL_GPIO_WritePin>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40020c00 	.word	0x40020c00

08002664 <KEYS_initISR>:

void KEYS_initISR(int hilo)
/* Keys initialize for ISR
 * Set all lines high
 * */
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, hilo);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002676:	480e      	ldr	r0, [pc, #56]	@ (80026b0 <KEYS_initISR+0x4c>)
 8002678:	f001 fdcc 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, hilo);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	2102      	movs	r1, #2
 8002684:	480a      	ldr	r0, [pc, #40]	@ (80026b0 <KEYS_initISR+0x4c>)
 8002686:	f001 fdc5 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, hilo);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	2108      	movs	r1, #8
 8002692:	4807      	ldr	r0, [pc, #28]	@ (80026b0 <KEYS_initISR+0x4c>)
 8002694:	f001 fdbe 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, hilo);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	2104      	movs	r1, #4
 80026a0:	4803      	ldr	r0, [pc, #12]	@ (80026b0 <KEYS_initISR+0x4c>)
 80026a2:	f001 fdb7 	bl	8004214 <HAL_GPIO_WritePin>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40020c00 	.word	0x40020c00

080026b4 <KEYS_read>:
/* Keys read
 * This function reads which key is pressed.
 * It does so by making a row high and check if there is a connection with a column.
 * If there is a connection the value is returned.
 */
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	603b      	str	r3, [r7, #0]
	unsigned out = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026c8:	4827      	ldr	r0, [pc, #156]	@ (8002768 <KEYS_read+0xb4>)
 80026ca:	f001 fda3 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 1);
 80026ce:	2201      	movs	r2, #1
 80026d0:	2108      	movs	r1, #8
 80026d2:	4825      	ldr	r0, [pc, #148]	@ (8002768 <KEYS_read+0xb4>)
 80026d4:	f001 fd9e 	bl	8004214 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026d8:	f000 f848 	bl	800276c <KEYS_kolom>
 80026dc:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out= 12+key;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <KEYS_read+0x36>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R4, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2108      	movs	r1, #8
 80026ee:	481e      	ldr	r0, [pc, #120]	@ (8002768 <KEYS_read+0xb4>)
 80026f0:	f001 fd90 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 1);
 80026f4:	2201      	movs	r2, #1
 80026f6:	2104      	movs	r1, #4
 80026f8:	481b      	ldr	r0, [pc, #108]	@ (8002768 <KEYS_read+0xb4>)
 80026fa:	f001 fd8b 	bl	8004214 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 80026fe:	f000 f835 	bl	800276c <KEYS_kolom>
 8002702:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 8+key;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <KEYS_read+0x5c>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	3308      	adds	r3, #8
 800270e:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R3, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2104      	movs	r1, #4
 8002714:	4814      	ldr	r0, [pc, #80]	@ (8002768 <KEYS_read+0xb4>)
 8002716:	f001 fd7d 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 1);
 800271a:	2201      	movs	r2, #1
 800271c:	2102      	movs	r1, #2
 800271e:	4812      	ldr	r0, [pc, #72]	@ (8002768 <KEYS_read+0xb4>)
 8002720:	f001 fd78 	bl	8004214 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 8002724:	f000 f822 	bl	800276c <KEYS_kolom>
 8002728:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = 4+key;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <KEYS_read+0x82>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	3304      	adds	r3, #4
 8002734:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(PKEY_ROW, KEY_R2, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2102      	movs	r1, #2
 800273a:	480b      	ldr	r0, [pc, #44]	@ (8002768 <KEYS_read+0xb4>)
 800273c:	f001 fd6a 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PKEY_ROW, KEY_R1, 1);
 8002740:	2201      	movs	r2, #1
 8002742:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002746:	4808      	ldr	r0, [pc, #32]	@ (8002768 <KEYS_read+0xb4>)
 8002748:	f001 fd64 	bl	8004214 <HAL_GPIO_WritePin>
	key = KEYS_kolom();
 800274c:	f000 f80e 	bl	800276c <KEYS_kolom>
 8002750:	6038      	str	r0, [r7, #0]
	if( key != 0 ) out = key;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <KEYS_read+0xa8>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	607b      	str	r3, [r7, #4]

	return out;
 800275c:	687b      	ldr	r3, [r7, #4]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020c00 	.word	0x40020c00

0800276c <KEYS_kolom>:
unsigned int KEYS_kolom(void)
/* Keys Column
 * In this function the columns are checked if there is a connection.
 * If a column has a connection the return value is the column number.
 */
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
	unsigned int key = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K1) == 1) key = 1;
 8002776:	2140      	movs	r1, #64	@ 0x40
 8002778:	4814      	ldr	r0, [pc, #80]	@ (80027cc <KEYS_kolom+0x60>)
 800277a:	f001 fd33 	bl	80041e4 <HAL_GPIO_ReadPin>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <KEYS_kolom+0x1c>
 8002784:	2301      	movs	r3, #1
 8002786:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K2) == 1) key = 2;
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	4810      	ldr	r0, [pc, #64]	@ (80027cc <KEYS_kolom+0x60>)
 800278c:	f001 fd2a 	bl	80041e4 <HAL_GPIO_ReadPin>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <KEYS_kolom+0x2e>
 8002796:	2302      	movs	r3, #2
 8002798:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K3) == 1) key = 3;
 800279a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800279e:	480b      	ldr	r0, [pc, #44]	@ (80027cc <KEYS_kolom+0x60>)
 80027a0:	f001 fd20 	bl	80041e4 <HAL_GPIO_ReadPin>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <KEYS_kolom+0x42>
 80027aa:	2303      	movs	r3, #3
 80027ac:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(PKEY_COL, KEY_K4) == 1) key = 4;
 80027ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b2:	4806      	ldr	r0, [pc, #24]	@ (80027cc <KEYS_kolom+0x60>)
 80027b4:	f001 fd16 	bl	80041e4 <HAL_GPIO_ReadPin>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <KEYS_kolom+0x56>
 80027be:	2304      	movs	r3, #4
 80027c0:	607b      	str	r3, [r7, #4]
	return key;
 80027c2:	687b      	ldr	r3, [r7, #4]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40020c00 	.word	0x40020c00

080027d0 <ClearBits>:
static void LCD_writebyte(unsigned char data);

unsigned char curpos = 0; // remember cursorposition

void ClearBits(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2108      	movs	r1, #8
 80027d8:	4809      	ldr	r0, [pc, #36]	@ (8002800 <ClearBits+0x30>)
 80027da:	f001 fd1b 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_RESET);
 80027de:	2200      	movs	r2, #0
 80027e0:	2110      	movs	r1, #16
 80027e2:	4807      	ldr	r0, [pc, #28]	@ (8002800 <ClearBits+0x30>)
 80027e4:	f001 fd16 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	2120      	movs	r1, #32
 80027ec:	4804      	ldr	r0, [pc, #16]	@ (8002800 <ClearBits+0x30>)
 80027ee:	f001 fd11 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2140      	movs	r1, #64	@ 0x40
 80027f6:	4802      	ldr	r0, [pc, #8]	@ (8002800 <ClearBits+0x30>)
 80027f8:	f001 fd0c 	bl	8004214 <HAL_GPIO_WritePin>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <LCD_clear>:
   LCD_writecontrol(0x02); // cursur home
   curpos=0;               // reset position
}

void LCD_clear(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
   LCD_writecontrol(0x01); // clearscreen
 8002808:	2001      	movs	r0, #1
 800280a:	f000 f967 	bl	8002adc <LCD_writecontrol>
   curpos=0;               // reset position
 800280e:	4b04      	ldr	r3, [pc, #16]	@ (8002820 <LCD_clear+0x1c>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
   HAL_Delay(5);
 8002814:	2005      	movs	r0, #5
 8002816:	f001 f9b1 	bl	8003b7c <HAL_Delay>
//   busyflag();

}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20002537 	.word	0x20002537

08002824 <LCD_init>:


// init LCD
// Display wordt gebruikt in 4bits modus,2 regels, 5x7 dots font.
void LCD_init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;	// GPIO init structure
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	4b44      	ldr	r3, [pc, #272]	@ (8002940 <LCD_init+0x11c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a43      	ldr	r2, [pc, #268]	@ (8002940 <LCD_init+0x11c>)
 8002834:	f043 0310 	orr.w	r3, r3, #16
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b41      	ldr	r3, [pc, #260]	@ (8002940 <LCD_init+0x11c>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	4b3d      	ldr	r3, [pc, #244]	@ (8002940 <LCD_init+0x11c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a3c      	ldr	r2, [pc, #240]	@ (8002940 <LCD_init+0x11c>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <LCD_init+0x11c>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <LCD_init+0x11c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4a35      	ldr	r2, [pc, #212]	@ (8002940 <LCD_init+0x11c>)
 800286c:	f043 0308 	orr.w	r3, r3, #8
 8002870:	6313      	str	r3, [r2, #48]	@ 0x30
 8002872:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <LCD_init+0x11c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]

	gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	2301      	movs	r3, #1
 8002880:	613b      	str	r3, [r7, #16]
	gpio.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
	gpio.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	61bb      	str	r3, [r7, #24]
	gpio.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800288a:	2378      	movs	r3, #120	@ 0x78
 800288c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &gpio);
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	4619      	mov	r1, r3
 8002894:	482b      	ldr	r0, [pc, #172]	@ (8002944 <LCD_init+0x120>)
 8002896:	f001 fb09 	bl	8003eac <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 800289a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800289e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &gpio);
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	4828      	ldr	r0, [pc, #160]	@ (8002948 <LCD_init+0x124>)
 80028a8:	f001 fb00 	bl	8003eac <HAL_GPIO_Init>

	gpio.Pin = GPIO_PIN_0;
 80028ac:	2301      	movs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &gpio);
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4619      	mov	r1, r3
 80028b6:	4825      	ldr	r0, [pc, #148]	@ (800294c <LCD_init+0x128>)
 80028b8:	f001 faf8 	bl	8003eac <HAL_GPIO_Init>
//	GPIOE -> MODER |= ( 1 << 12 );
//	GPIOC -> MODER |= ( 1 << 26 );
//	GPIOC -> MODER |= ( 1 << 30 );
//	GPIOC -> MODER |= ( 1 << 28 );

	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80028bc:	2200      	movs	r2, #0
 80028be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028c2:	4821      	ldr	r0, [pc, #132]	@ (8002948 <LCD_init+0x124>)
 80028c4:	f001 fca6 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2101      	movs	r1, #1
 80028cc:	481f      	ldr	r0, [pc, #124]	@ (800294c <LCD_init+0x128>)
 80028ce:	f001 fca1 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW, GPIO_PIN_RESET);
 80028d2:	2200      	movs	r2, #0
 80028d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028d8:	481b      	ldr	r0, [pc, #108]	@ (8002948 <LCD_init+0x124>)
 80028da:	f001 fc9b 	bl	8004214 <HAL_GPIO_WritePin>

	HAL_Delay(15);//15
 80028de:	200f      	movs	r0, #15
 80028e0:	f001 f94c 	bl	8003b7c <HAL_Delay>

    LCD_writebyte(0x30); // function-set boot
 80028e4:	2030      	movs	r0, #48	@ 0x30
 80028e6:	f000 f8c7 	bl	8002a78 <LCD_writebyte>
    HAL_Delay(70);
 80028ea:	2046      	movs	r0, #70	@ 0x46
 80028ec:	f001 f946 	bl	8003b7c <HAL_Delay>
    LCD_writebyte(0x30);
 80028f0:	2030      	movs	r0, #48	@ 0x30
 80028f2:	f000 f8c1 	bl	8002a78 <LCD_writebyte>
    LCD_writebyte(0x30);
 80028f6:	2030      	movs	r0, #48	@ 0x30
 80028f8:	f000 f8be 	bl	8002a78 <LCD_writebyte>

     // interface op 4 bits
    LCD_writebyte(0x02);
 80028fc:	2002      	movs	r0, #2
 80028fe:	f000 f8bb 	bl	8002a78 <LCD_writebyte>
    HAL_Delay(5);
 8002902:	2005      	movs	r0, #5
 8002904:	f001 f93a 	bl	8003b7c <HAL_Delay>

    LCD_writebyte(0x2C);  // function set
 8002908:	202c      	movs	r0, #44	@ 0x2c
 800290a:	f000 f8b5 	bl	8002a78 <LCD_writebyte>
    HAL_Delay(15);
 800290e:	200f      	movs	r0, #15
 8002910:	f001 f934 	bl	8003b7c <HAL_Delay>
    LCD_writebyte(0x0C);  // lcd aan
 8002914:	200c      	movs	r0, #12
 8002916:	f000 f8af 	bl	8002a78 <LCD_writebyte>
    HAL_Delay(15);
 800291a:	200f      	movs	r0, #15
 800291c:	f001 f92e 	bl	8003b7c <HAL_Delay>
    LCD_writebyte(0x01);  // clear screen
 8002920:	2001      	movs	r0, #1
 8002922:	f000 f8a9 	bl	8002a78 <LCD_writebyte>
    HAL_Delay(15);
 8002926:	200f      	movs	r0, #15
 8002928:	f001 f928 	bl	8003b7c <HAL_Delay>
    LCD_writebyte(0x06);  // entry mode set
 800292c:	2006      	movs	r0, #6
 800292e:	f000 f8a3 	bl	8002a78 <LCD_writebyte>
    HAL_Delay(15);
 8002932:	200f      	movs	r0, #15
 8002934:	f001 f922 	bl	8003b7c <HAL_Delay>
}
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40023800 	.word	0x40023800
 8002944:	40021000 	.word	0x40021000
 8002948:	40020800 	.word	0x40020800
 800294c:	40020c00 	.word	0x40020c00

08002950 <LCD_putchar>:

// Zet meegegeven karakter op het scherm
void LCD_putchar(char c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET);
 800295a:	2201      	movs	r2, #1
 800295c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002960:	480b      	ldr	r0, [pc, #44]	@ (8002990 <LCD_putchar+0x40>)
 8002962:	f001 fc57 	bl	8004214 <HAL_GPIO_WritePin>
    LCD_writebyte(c);
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f885 	bl	8002a78 <LCD_writebyte>
    if (++curpos==32) // remember cursorpos
 800296e:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <LCD_putchar+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <LCD_putchar+0x44>)
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <LCD_putchar+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d102      	bne.n	8002988 <LCD_putchar+0x38>
    	curpos=0;
 8002982:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <LCD_putchar+0x44>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40020800 	.word	0x40020800
 8002994:	20002537 	.word	0x20002537

08002998 <LCD_put>:

// Zet meegegeven string op het scherm
void LCD_put(char *string)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
#ifdef eenregel
   	unsigned char j;
#endif
    unsigned char k;
	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    for (k=0; string[k]; k++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	73bb      	strb	r3, [r7, #14]
 80029a4:	e019      	b.n	80029da <LCD_put+0x42>
	{

#ifdef eenregel
    	// vaag display; teken 8 tot 31 is niet uitgevoerd op het scherm
    	if(curpos==8) // at 8, goto next valid lcd-position
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <LCD_put+0x58>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d10b      	bne.n	80029c6 <LCD_put+0x2e>
        for (j=0; j<32; j++) LCD_cursor_right();
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e005      	b.n	80029c0 <LCD_put+0x28>
 80029b4:	2014      	movs	r0, #20
 80029b6:	f000 f891 	bl	8002adc <LCD_writecontrol>
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	3301      	adds	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b1f      	cmp	r3, #31
 80029c4:	d9f6      	bls.n	80029b4 <LCD_put+0x1c>
#endif
        LCD_putchar(string[k]);
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4413      	add	r3, r2
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ffbe 	bl	8002950 <LCD_putchar>
    for (k=0; string[k]; k++)
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73bb      	strb	r3, [r7, #14]
 80029da:	7bbb      	ldrb	r3, [r7, #14]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1df      	bne.n	80029a6 <LCD_put+0xe>
    }
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	20002537 	.word	0x20002537

080029f4 <LCD_puts>:

void LCD_puts(char *c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    LCD_put(c);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ffcb 	bl	8002998 <LCD_put>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <LCD_writenibble>:
	LCD_put(&s[i+1]); // first, set i to starting pos, undo one i-- too much
}

// Stuurt een 4-bits commando naar het display
static void LCD_writenibble(unsigned char data)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
    ClearBits();
 8002a16:	f7ff fedb 	bl	80027d0 <ClearBits>

    if (data & 0x01)
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <LCD_writenibble+0x22>
		HAL_GPIO_WritePin(LCD_D7, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2140      	movs	r1, #64	@ 0x40
 8002a28:	4812      	ldr	r0, [pc, #72]	@ (8002a74 <LCD_writenibble+0x68>)
 8002a2a:	f001 fbf3 	bl	8004214 <HAL_GPIO_WritePin>

	if (data & 0x02)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <LCD_writenibble+0x36>
		HAL_GPIO_WritePin(LCD_D6, GPIO_PIN_SET);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	480d      	ldr	r0, [pc, #52]	@ (8002a74 <LCD_writenibble+0x68>)
 8002a3e:	f001 fbe9 	bl	8004214 <HAL_GPIO_WritePin>

	if (data & 0x04)
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <LCD_writenibble+0x4a>
		HAL_GPIO_WritePin(LCD_D5, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2110      	movs	r1, #16
 8002a50:	4808      	ldr	r0, [pc, #32]	@ (8002a74 <LCD_writenibble+0x68>)
 8002a52:	f001 fbdf 	bl	8004214 <HAL_GPIO_WritePin>

	if (data & 0x08)
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <LCD_writenibble+0x5e>
		HAL_GPIO_WritePin(LCD_D4, GPIO_PIN_SET);
 8002a60:	2201      	movs	r2, #1
 8002a62:	2108      	movs	r1, #8
 8002a64:	4803      	ldr	r0, [pc, #12]	@ (8002a74 <LCD_writenibble+0x68>)
 8002a66:	f001 fbd5 	bl	8004214 <HAL_GPIO_WritePin>

}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40021000 	.word	0x40021000

08002a78 <LCD_writebyte>:


// Stuurt een 8-bits commando naar het display
static void LCD_writebyte(unsigned char data)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
    /* hoogste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002a82:	2201      	movs	r2, #1
 8002a84:	2101      	movs	r1, #1
 8002a86:	4814      	ldr	r0, [pc, #80]	@ (8002ad8 <LCD_writebyte+0x60>)
 8002a88:	f001 fbc4 	bl	8004214 <HAL_GPIO_WritePin>
    LCD_writenibble((data>>4)&0x0F);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	091b      	lsrs	r3, r3, #4
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ffba 	bl	8002a0c <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	480e      	ldr	r0, [pc, #56]	@ (8002ad8 <LCD_writebyte+0x60>)
 8002a9e:	f001 fbb9 	bl	8004214 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f001 f86a 	bl	8003b7c <HAL_Delay>

    /* laagste 4 bits */
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_SET);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2101      	movs	r1, #1
 8002aac:	480a      	ldr	r0, [pc, #40]	@ (8002ad8 <LCD_writebyte+0x60>)
 8002aae:	f001 fbb1 	bl	8004214 <HAL_GPIO_WritePin>
    LCD_writenibble(data&0x0F);
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff ffa6 	bl	8002a0c <LCD_writenibble>
    HAL_GPIO_WritePin(LCD_EN, GPIO_PIN_RESET);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4804      	ldr	r0, [pc, #16]	@ (8002ad8 <LCD_writebyte+0x60>)
 8002ac6:	f001 fba5 	bl	8004214 <HAL_GPIO_WritePin>

    HAL_Delay(2);
 8002aca:	2002      	movs	r0, #2
 8002acc:	f001 f856 	bl	8003b7c <HAL_Delay>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40020c00 	.word	0x40020c00

08002adc <LCD_writecontrol>:

// Stuurt een commando naar het display
void LCD_writecontrol(unsigned char data)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002aec:	4805      	ldr	r0, [pc, #20]	@ (8002b04 <LCD_writecontrol+0x28>)
 8002aee:	f001 fb91 	bl	8004214 <HAL_GPIO_WritePin>
    LCD_writebyte(data);
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ffbf 	bl	8002a78 <LCD_writebyte>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40020800 	.word	0x40020800

08002b08 <LED_init>:

/* LED Initialize
 * This function initializes the pins reset state
 */
void LED_init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, GPIO_PIN_RESET);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b12:	4809      	ldr	r0, [pc, #36]	@ (8002b38 <LED_init+0x30>)
 8002b14:	f001 fb7e 	bl	8004214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b1e:	4807      	ldr	r0, [pc, #28]	@ (8002b3c <LED_init+0x34>)
 8002b20:	f001 fb78 	bl	8004214 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b24:	2201      	movs	r2, #1
 8002b26:	2102      	movs	r1, #2
 8002b28:	4804      	ldr	r0, [pc, #16]	@ (8002b3c <LED_init+0x34>)
 8002b2a:	f001 fb73 	bl	8004214 <HAL_GPIO_WritePin>
    LED_put(0);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f000 f806 	bl	8002b40 <LED_put>
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020400 	.word	0x40020400

08002b40 <LED_put>:

/* LED put
 * This function puts an 8 bit value to the LEDs, where left is the LSB
 */
void LED_put(unsigned short led_byte)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
     unsigned int i;

     for(i=128; i>=1; i>>=1)
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e01c      	b.n	8002b8a <LED_put+0x4a>
     {
       	  HAL_GPIO_WritePin(P_LED_SER, LED_SER_Pin, (led_byte & i) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	461a      	mov	r2, r3
 8002b62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b66:	4811      	ldr	r0, [pc, #68]	@ (8002bac <LED_put+0x6c>)
 8002b68:	f001 fb54 	bl	8004214 <HAL_GPIO_WritePin>

          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b72:	480f      	ldr	r0, [pc, #60]	@ (8002bb0 <LED_put+0x70>)
 8002b74:	f001 fb4e 	bl	8004214 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(P_LED_SCK, LED_SCK_Pin, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b7e:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <LED_put+0x70>)
 8002b80:	f001 fb48 	bl	8004214 <HAL_GPIO_WritePin>
     for(i=128; i>=1; i>>=1)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1df      	bne.n	8002b50 <LED_put+0x10>
     }

     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	2102      	movs	r1, #2
 8002b94:	4806      	ldr	r0, [pc, #24]	@ (8002bb0 <LED_put+0x70>)
 8002b96:	f001 fb3d 	bl	8004214 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(P_LED_RCK, LED_RCK_Pin, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4804      	ldr	r0, [pc, #16]	@ (8002bb0 <LED_put+0x70>)
 8002ba0:	f001 fb38 	bl	8004214 <HAL_GPIO_WritePin>
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400

08002bb4 <UART_putchar>:
 // done in CUBE

}

void UART_putchar(unsigned char c)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
	 HAL_UART_Transmit(&huart2, &c, 1, 100);
 8002bbe:	1df9      	adds	r1, r7, #7
 8002bc0:	2364      	movs	r3, #100	@ 0x64
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4803      	ldr	r0, [pc, #12]	@ (8002bd4 <UART_putchar+0x20>)
 8002bc6:	f005 fc15 	bl	80083f4 <HAL_UART_Transmit>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20002674 	.word	0x20002674

08002bd8 <UART_puts>:

void UART_puts(const char *s)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;

	for (i=0; s[i]; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e009      	b.n	8002bfa <UART_puts+0x22>
		UART_putchar(s[i]);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ffe0 	bl	8002bb4 <UART_putchar>
	for (i=0; s[i]; i++)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4413      	add	r3, r2
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1ef      	bne.n	8002be6 <UART_puts+0xe>
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_putint>:
    return rc;
}

// Stuurt meegegeven getal uit op de UART
void UART_putint(unsigned int num)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    UART_putnum(num, 10);
 8002c18:	210a      	movs	r1, #10
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f804 	bl	8002c28 <UART_putnum>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <UART_putnum>:

// Stuurt meegegeven getal uit op de UART in het aangegeven getallenstelsel
void UART_putnum(unsigned int num, unsigned char deel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
    static unsigned char chars[16] = "0123456789ABCDEF";
    unsigned int rest;
    signed char c[16];
    signed int i=15;
 8002c34:	230f      	movs	r3, #15
 8002c36:	61fb      	str	r3, [r7, #28]

    // Zet de integer om naar een string
    if(num==0)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d129      	bne.n	8002c92 <UART_putnum+0x6a>
    {
        c[i]='0';
 8002c3e:	f107 0208 	add.w	r2, r7, #8
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	2230      	movs	r2, #48	@ 0x30
 8002c48:	701a      	strb	r2, [r3, #0]
        i--;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	e030      	b.n	8002cb4 <UART_putnum+0x8c>
    }
    else
    {
        while(num>0)
        {
            rest=num%deel;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c5a:	fb01 f202 	mul.w	r2, r1, r2
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
            num/=deel;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	607b      	str	r3, [r7, #4]
            c[i]=chars[rest];
 8002c6c:	4a15      	ldr	r2, [pc, #84]	@ (8002cc4 <UART_putnum+0x9c>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	4413      	add	r3, r2
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b259      	sxtb	r1, r3
 8002c76:	f107 0208 	add.w	r2, r7, #8
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	460a      	mov	r2, r1
 8002c80:	701a      	strb	r2, [r3, #0]
            i--;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]

            if(i==0) // it ends here
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <UART_putnum+0x6a>
                num=0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	607b      	str	r3, [r7, #4]
        while(num>0)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1dc      	bne.n	8002c52 <UART_putnum+0x2a>
        }
    }

    // Stuur de string uit
    while(i<15)
 8002c98:	e00c      	b.n	8002cb4 <UART_putnum+0x8c>
    {
        i++;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
        UART_putchar(c[i]);
 8002ca0:	f107 0208 	add.w	r2, r7, #8
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff80 	bl	8002bb4 <UART_putchar>
    while(i<15)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b0e      	cmp	r3, #14
 8002cb8:	ddef      	ble.n	8002c9a <UART_putnum+0x72>
    }
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000254 	.word	0x20000254

08002cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ccc:	f000 ff14 	bl	8003af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cd0:	f000 f830 	bl	8002d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cd4:	f000 f980 	bl	8002fd8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002cd8:	f000 f896 	bl	8002e08 <MX_I2C1_Init>
  MX_I2S3_Init();
 8002cdc:	f000 f8c2 	bl	8002e64 <MX_I2S3_Init>
  MX_SPI1_Init();
 8002ce0:	f000 f8f0 	bl	8002ec4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002ce4:	f000 f94e 	bl	8002f84 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002ce8:	f000 f922 	bl	8002f30 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  LCD_init();
 8002cec:	f7ff fd9a 	bl	8002824 <LCD_init>
  KEYS_init();
 8002cf0:	f7ff fc7e 	bl	80025f0 <KEYS_init>
  KEYS_initISR(1); // set all lines high once
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7ff fcb5 	bl	8002664 <KEYS_initISR>
  LED_init();
 8002cfa:	f7ff ff05 	bl	8002b08 <LED_init>

  DisplayVersion();
 8002cfe:	f7fe fdcd 	bl	800189c <DisplayVersion>
  osDelay(500); // time to read version
 8002d02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d06:	f00a f829 	bl	800cd5c <osDelay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002d0a:	f009 ff0d 	bl	800cb28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d0e:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <main+0x60>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4806      	ldr	r0, [pc, #24]	@ (8002d2c <main+0x64>)
 8002d14:	f009 ff90 	bl	800cc38 <osThreadNew>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a05      	ldr	r2, [pc, #20]	@ (8002d30 <main+0x68>)
 8002d1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d1e:	f009 ff4f 	bl	800cbc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d22:	bf00      	nop
 8002d24:	e7fd      	b.n	8002d22 <main+0x5a>
 8002d26:	bf00      	nop
 8002d28:	080166c0 	.word	0x080166c0
 8002d2c:	08003301 	.word	0x08003301
 8002d30:	200026bc 	.word	0x200026bc

08002d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b094      	sub	sp, #80	@ 0x50
 8002d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3a:	f107 0320 	add.w	r3, r7, #32
 8002d3e:	2230      	movs	r2, #48	@ 0x30
 8002d40:	2100      	movs	r1, #0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f010 fa01 	bl	801314a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d48:	f107 030c 	add.w	r3, r7, #12
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	4b28      	ldr	r3, [pc, #160]	@ (8002e00 <SystemClock_Config+0xcc>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	4a27      	ldr	r2, [pc, #156]	@ (8002e00 <SystemClock_Config+0xcc>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d68:	4b25      	ldr	r3, [pc, #148]	@ (8002e00 <SystemClock_Config+0xcc>)
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d74:	2300      	movs	r3, #0
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <SystemClock_Config+0xd0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	@ (8002e04 <SystemClock_Config+0xd0>)
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <SystemClock_Config+0xd0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d90:	2301      	movs	r3, #1
 8002d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002da4:	2308      	movs	r3, #8
 8002da6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002da8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002dac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dae:	2302      	movs	r3, #2
 8002db0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002db2:	2307      	movs	r3, #7
 8002db4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002db6:	f107 0320 	add.w	r3, r7, #32
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f004 f99a 	bl	80070f4 <HAL_RCC_OscConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002dc6:	f000 fadf 	bl	8003388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dca:	230f      	movs	r3, #15
 8002dcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dd6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ddc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002de0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	2105      	movs	r1, #5
 8002de8:	4618      	mov	r0, r3
 8002dea:	f004 fbfb 	bl	80075e4 <HAL_RCC_ClockConfig>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002df4:	f000 fac8 	bl	8003388 <Error_Handler>
  }
}
 8002df8:	bf00      	nop
 8002dfa:	3750      	adds	r7, #80	@ 0x50
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000

08002e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e0c:	4b12      	ldr	r3, [pc, #72]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e0e:	4a13      	ldr	r2, [pc, #76]	@ (8002e5c <MX_I2C1_Init+0x54>)
 8002e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e12:	4b11      	ldr	r3, [pc, #68]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e14:	4a12      	ldr	r2, [pc, #72]	@ (8002e60 <MX_I2C1_Init+0x58>)
 8002e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e18:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e32:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e38:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e44:	4804      	ldr	r0, [pc, #16]	@ (8002e58 <MX_I2C1_Init+0x50>)
 8002e46:	f003 fb71 	bl	800652c <HAL_I2C_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e50:	f000 fa9a 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20002538 	.word	0x20002538
 8002e5c:	40005400 	.word	0x40005400
 8002e60:	000186a0 	.word	0x000186a0

08002e64 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e6a:	4a14      	ldr	r2, [pc, #80]	@ (8002ebc <MX_I2S3_Init+0x58>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e74:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e88:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ec0 <MX_I2S3_Init+0x5c>)
 8002e8e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	@ (8002eb8 <MX_I2S3_Init+0x54>)
 8002ea4:	f003 fc86 	bl	80067b4 <HAL_I2S_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8002eae:	f000 fa6b 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000258c 	.word	0x2000258c
 8002ebc:	40003c00 	.word	0x40003c00
 8002ec0:	00017700 	.word	0x00017700

08002ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ec8:	4b17      	ldr	r3, [pc, #92]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002eca:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <MX_SPI1_Init+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ece:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002ed0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ed6:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f02:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f08:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002f10:	220a      	movs	r2, #10
 8002f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f14:	4804      	ldr	r0, [pc, #16]	@ (8002f28 <MX_SPI1_Init+0x64>)
 8002f16:	f004 fef9 	bl	8007d0c <HAL_SPI_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f20:	f000 fa32 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200025d4 	.word	0x200025d4
 8002f2c:	40013000 	.word	0x40013000

08002f30 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	@ (8002f80 <MX_UART4_Init+0x50>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002f3a:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f3c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f40:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f66:	4805      	ldr	r0, [pc, #20]	@ (8002f7c <MX_UART4_Init+0x4c>)
 8002f68:	f005 f9f4 	bl	8008354 <HAL_UART_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f72:	f000 fa09 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2000262c 	.word	0x2000262c
 8002f80:	40004c00 	.word	0x40004c00

08002f84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f88:	4b11      	ldr	r3, [pc, #68]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	@ (8002fd4 <MX_USART2_UART_Init+0x50>)
 8002f8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f96:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002faa:	220c      	movs	r2, #12
 8002fac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb4:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fba:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <MX_USART2_UART_Init+0x4c>)
 8002fbc:	f005 f9ca 	bl	8008354 <HAL_UART_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fc6:	f000 f9df 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20002674 	.word	0x20002674
 8002fd4:	40004400 	.word	0x40004400

08002fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08c      	sub	sp, #48	@ 0x30
 8002fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	4b8e      	ldr	r3, [pc, #568]	@ (800322c <MX_GPIO_Init+0x254>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a8d      	ldr	r2, [pc, #564]	@ (800322c <MX_GPIO_Init+0x254>)
 8002ff8:	f043 0310 	orr.w	r3, r3, #16
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800322c <MX_GPIO_Init+0x254>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b87      	ldr	r3, [pc, #540]	@ (800322c <MX_GPIO_Init+0x254>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a86      	ldr	r2, [pc, #536]	@ (800322c <MX_GPIO_Init+0x254>)
 8003014:	f043 0304 	orr.w	r3, r3, #4
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b84      	ldr	r3, [pc, #528]	@ (800322c <MX_GPIO_Init+0x254>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	4b80      	ldr	r3, [pc, #512]	@ (800322c <MX_GPIO_Init+0x254>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	4a7f      	ldr	r2, [pc, #508]	@ (800322c <MX_GPIO_Init+0x254>)
 8003030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003034:	6313      	str	r3, [r2, #48]	@ 0x30
 8003036:	4b7d      	ldr	r3, [pc, #500]	@ (800322c <MX_GPIO_Init+0x254>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b79      	ldr	r3, [pc, #484]	@ (800322c <MX_GPIO_Init+0x254>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a78      	ldr	r2, [pc, #480]	@ (800322c <MX_GPIO_Init+0x254>)
 800304c:	f043 0301 	orr.w	r3, r3, #1
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b76      	ldr	r3, [pc, #472]	@ (800322c <MX_GPIO_Init+0x254>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	4b72      	ldr	r3, [pc, #456]	@ (800322c <MX_GPIO_Init+0x254>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a71      	ldr	r2, [pc, #452]	@ (800322c <MX_GPIO_Init+0x254>)
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
 800306e:	4b6f      	ldr	r3, [pc, #444]	@ (800322c <MX_GPIO_Init+0x254>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	4b6b      	ldr	r3, [pc, #428]	@ (800322c <MX_GPIO_Init+0x254>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	4a6a      	ldr	r2, [pc, #424]	@ (800322c <MX_GPIO_Init+0x254>)
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6313      	str	r3, [r2, #48]	@ 0x30
 800308a:	4b68      	ldr	r3, [pc, #416]	@ (800322c <MX_GPIO_Init+0x254>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003096:	2200      	movs	r2, #0
 8003098:	2108      	movs	r1, #8
 800309a:	4865      	ldr	r0, [pc, #404]	@ (8003230 <MX_GPIO_Init+0x258>)
 800309c:	f001 f8ba 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030a0:	2201      	movs	r2, #1
 80030a2:	2101      	movs	r1, #1
 80030a4:	4863      	ldr	r0, [pc, #396]	@ (8003234 <MX_GPIO_Init+0x25c>)
 80030a6:	f001 f8b5 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RCK_Pin|LED_SCK_Pin, GPIO_PIN_RESET);
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80030b0:	4861      	ldr	r0, [pc, #388]	@ (8003238 <MX_GPIO_Init+0x260>)
 80030b2:	f001 f8af 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80030b6:	2200      	movs	r2, #0
 80030b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80030bc:	485f      	ldr	r0, [pc, #380]	@ (800323c <MX_GPIO_Init+0x264>)
 80030be:	f001 f8a9 	bl	8004214 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030c8:	485a      	ldr	r0, [pc, #360]	@ (8003234 <MX_GPIO_Init+0x25c>)
 80030ca:	f001 f8a3 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SER_GPIO_Port, LED_SER_Pin, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030d4:	485a      	ldr	r0, [pc, #360]	@ (8003240 <MX_GPIO_Init+0x268>)
 80030d6:	f001 f89d 	bl	8004214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80030da:	2308      	movs	r3, #8
 80030dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030de:	2301      	movs	r3, #1
 80030e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	484f      	ldr	r0, [pc, #316]	@ (8003230 <MX_GPIO_Init+0x258>)
 80030f2:	f000 fedb 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Buzzer_Pin;
 80030f6:	f240 1301 	movw	r3, #257	@ 0x101
 80030fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fc:	2301      	movs	r3, #1
 80030fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003108:	f107 031c 	add.w	r3, r7, #28
 800310c:	4619      	mov	r1, r3
 800310e:	4849      	ldr	r0, [pc, #292]	@ (8003234 <MX_GPIO_Init+0x25c>)
 8003110:	f000 fecc 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003114:	2308      	movs	r3, #8
 8003116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003124:	2305      	movs	r3, #5
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	4619      	mov	r1, r3
 800312e:	4841      	ldr	r0, [pc, #260]	@ (8003234 <MX_GPIO_Init+0x25c>)
 8003130:	f000 febc 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : Key_int_Pin */
  GPIO_InitStruct.Pin = Key_int_Pin;
 8003134:	2301      	movs	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003138:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800313c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Key_int_GPIO_Port, &GPIO_InitStruct);
 8003142:	f107 031c 	add.w	r3, r7, #28
 8003146:	4619      	mov	r1, r3
 8003148:	483b      	ldr	r0, [pc, #236]	@ (8003238 <MX_GPIO_Init+0x260>)
 800314a:	f000 feaf 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RCK_Pin LED_SCK_Pin */
  GPIO_InitStruct.Pin = LED_RCK_Pin|LED_SCK_Pin;
 800314e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003154:	2301      	movs	r3, #1
 8003156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	4619      	mov	r1, r3
 8003166:	4834      	ldr	r0, [pc, #208]	@ (8003238 <MX_GPIO_Init+0x260>)
 8003168:	f000 fea0 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800316c:	2304      	movs	r3, #4
 800316e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	4619      	mov	r1, r3
 800317e:	482e      	ldr	r0, [pc, #184]	@ (8003238 <MX_GPIO_Init+0x260>)
 8003180:	f000 fe94 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318a:	2302      	movs	r3, #2
 800318c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318e:	2300      	movs	r3, #0
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003192:	2300      	movs	r3, #0
 8003194:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003196:	2305      	movs	r3, #5
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	4825      	ldr	r0, [pc, #148]	@ (8003238 <MX_GPIO_Init+0x260>)
 80031a2:	f000 fe83 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80031a6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80031aa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	4619      	mov	r1, r3
 80031be:	481f      	ldr	r0, [pc, #124]	@ (800323c <MX_GPIO_Init+0x264>)
 80031c0:	f000 fe74 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_SER_Pin */
  GPIO_InitStruct.Pin = LED_SER_Pin;
 80031c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_SER_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	4619      	mov	r1, r3
 80031dc:	4818      	ldr	r0, [pc, #96]	@ (8003240 <MX_GPIO_Init+0x268>)
 80031de:	f000 fe65 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80031e2:	2320      	movs	r3, #32
 80031e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e6:	2300      	movs	r3, #0
 80031e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	4619      	mov	r1, r3
 80031f4:	4811      	ldr	r0, [pc, #68]	@ (800323c <MX_GPIO_Init+0x264>)
 80031f6:	f000 fe59 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031fe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003202:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	4619      	mov	r1, r3
 800320e:	4808      	ldr	r0, [pc, #32]	@ (8003230 <MX_GPIO_Init+0x258>)
 8003210:	f000 fe4c 	bl	8003eac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8003214:	2200      	movs	r2, #0
 8003216:	2105      	movs	r1, #5
 8003218:	2006      	movs	r0, #6
 800321a:	f000 fd8b 	bl	8003d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800321e:	2006      	movs	r0, #6
 8003220:	f000 fda4 	bl	8003d6c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003224:	bf00      	nop
 8003226:	3730      	adds	r7, #48	@ 0x30
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	40021000 	.word	0x40021000
 8003234:	40020800 	.word	0x40020800
 8003238:	40020400 	.word	0x40020400
 800323c:	40020c00 	.word	0x40020c00
 8003240:	40020000 	.word	0x40020000

08003244 <HAL_UART_RxCpltCallback>:
  * <p>Demonstreert: xQueueSendFromISR(); portYIELD_FROM_ISR();</p>
  * @param huart
  * @return void.
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
	unsigned char       uart4_char, uart2_char;
	BaseType_t          xHigherPriorityTaskWoken = pdFALSE;
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]

	// receive terminal user commands
	if (huart->Instance == USART2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <HAL_UART_RxCpltCallback+0xa0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d11d      	bne.n	8003296 <HAL_UART_RxCpltCallback+0x52>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart2, &uart2_char, 1);
 800325a:	f107 030e 	add.w	r3, r7, #14
 800325e:	2201      	movs	r2, #1
 8003260:	4619      	mov	r1, r3
 8003262:	4821      	ldr	r0, [pc, #132]	@ (80032e8 <HAL_UART_RxCpltCallback+0xa4>)
 8003264:	f005 f951 	bl	800850a <HAL_UART_Receive_IT>

		/// Zet de byte op de UART_queue
		xQueueSendFromISR(hUART_Queue, &uart2_char, &xHigherPriorityTaskWoken);
 8003268:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_UART_RxCpltCallback+0xa8>)
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	f107 0208 	add.w	r2, r7, #8
 8003270:	f107 010e 	add.w	r1, r7, #14
 8003274:	2300      	movs	r3, #0
 8003276:	f00a fc11 	bl	800da9c <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_UART_RxCpltCallback+0x52>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_UART_RxCpltCallback+0x52>
 8003286:	4b1a      	ldr	r3, [pc, #104]	@ (80032f0 <HAL_UART_RxCpltCallback+0xac>)
 8003288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	f3bf 8f6f 	isb	sy
	}

	// receive GPS-data
	if (huart->Instance == UART4)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_UART_RxCpltCallback+0xb0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d11d      	bne.n	80032dc <HAL_UART_RxCpltCallback+0x98>
	{
		/// Receive one byte in interrupt mode
		HAL_UART_Receive_IT(&huart4, &uart4_char, 1);
 80032a0:	f107 030f 	add.w	r3, r7, #15
 80032a4:	2201      	movs	r2, #1
 80032a6:	4619      	mov	r1, r3
 80032a8:	4813      	ldr	r0, [pc, #76]	@ (80032f8 <HAL_UART_RxCpltCallback+0xb4>)
 80032aa:	f005 f92e 	bl	800850a <HAL_UART_Receive_IT>

		/// Zet de byte op de GPS_queue
		xQueueSendFromISR(hGPS_Queue, &uart4_char, &xHigherPriorityTaskWoken);
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <HAL_UART_RxCpltCallback+0xb8>)
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	f107 0208 	add.w	r2, r7, #8
 80032b6:	f107 010f 	add.w	r1, r7, #15
 80032ba:	2300      	movs	r3, #0
 80032bc:	f00a fbee 	bl	800da9c <xQueueGenericSendFromISR>
		if (xHigherPriorityTaskWoken != pdFALSE)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_UART_RxCpltCallback+0x98>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_UART_RxCpltCallback+0x98>
 80032cc:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_UART_RxCpltCallback+0xac>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
	}

}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40004400 	.word	0x40004400
 80032e8:	20002674 	.word	0x20002674
 80032ec:	20002448 	.word	0x20002448
 80032f0:	e000ed04 	.word	0xe000ed04
 80032f4:	40004c00 	.word	0x40004c00
 80032f8:	2000262c 	.word	0x2000262c
 80032fc:	2000244c 	.word	0x2000244c

08003300 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8003308:	f00d fef6 	bl	80110f8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  unsigned char byte1, byte2;

  CreateHandles();
 800330c:	f7fe fb4c 	bl	80019a8 <CreateHandles>
  CreateTasks();
 8003310:	f7fe fbea 	bl	8001ae8 <CreateTasks>

  // start the interrupt handlers after all handles are created
  HAL_UART_Receive_IT(&huart2, &byte2, 1); //start the UART2 interrupt engine for reading
 8003314:	f107 030e 	add.w	r3, r7, #14
 8003318:	2201      	movs	r2, #1
 800331a:	4619      	mov	r1, r3
 800331c:	480d      	ldr	r0, [pc, #52]	@ (8003354 <StartDefaultTask+0x54>)
 800331e:	f005 f8f4 	bl	800850a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &byte1, 1); //start the UART4 interrupt engine GPS
 8003322:	f107 030f 	add.w	r3, r7, #15
 8003326:	2201      	movs	r2, #1
 8003328:	4619      	mov	r1, r3
 800332a:	480b      	ldr	r0, [pc, #44]	@ (8003358 <StartDefaultTask+0x58>)
 800332c:	f005 f8ed 	bl	800850a <HAL_UART_Receive_IT>

  UART_putint(byte2); UART_puts("\r\n"); // deze byte (de eerste) is nog een irritante bug.
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fc6c 	bl	8002c10 <UART_putint>
 8003338:	4808      	ldr	r0, [pc, #32]	@ (800335c <StartDefaultTask+0x5c>)
 800333a:	f7ff fc4d 	bl	8002bd8 <UART_puts>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800333e:	2001      	movs	r0, #1
 8003340:	f009 fd0c 	bl	800cd5c <osDelay>
    vTaskDelete(defaultTaskHandle); // remove this default task
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <StartDefaultTask+0x60>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f00b fa21 	bl	800e790 <vTaskDelete>
    osDelay(1);
 800334e:	bf00      	nop
 8003350:	e7f5      	b.n	800333e <StartDefaultTask+0x3e>
 8003352:	bf00      	nop
 8003354:	20002674 	.word	0x20002674
 8003358:	2000262c 	.word	0x2000262c
 800335c:	080165fc 	.word	0x080165fc
 8003360:	200026bc 	.word	0x200026bc

08003364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003376:	f000 fbe1 	bl	8003b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000

08003388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800338c:	b672      	cpsid	i
}
 800338e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <Error_Handler+0x8>

08003394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	607b      	str	r3, [r7, #4]
 800339e:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <HAL_MspInit+0x54>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a2:	4a11      	ldr	r2, [pc, #68]	@ (80033e8 <HAL_MspInit+0x54>)
 80033a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033aa:	4b0f      	ldr	r3, [pc, #60]	@ (80033e8 <HAL_MspInit+0x54>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <HAL_MspInit+0x54>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <HAL_MspInit+0x54>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <HAL_MspInit+0x54>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	210f      	movs	r1, #15
 80033d6:	f06f 0001 	mvn.w	r0, #1
 80033da:	f000 fcab 	bl	8003d34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a19      	ldr	r2, [pc, #100]	@ (8003470 <HAL_I2C_MspInit+0x84>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d12c      	bne.n	8003468 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <HAL_I2C_MspInit+0x88>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	4a17      	ldr	r2, [pc, #92]	@ (8003474 <HAL_I2C_MspInit+0x88>)
 8003418:	f043 0302 	orr.w	r3, r3, #2
 800341c:	6313      	str	r3, [r2, #48]	@ 0x30
 800341e:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_I2C_MspInit+0x88>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800342a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800342e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003430:	2312      	movs	r3, #18
 8003432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003434:	2301      	movs	r3, #1
 8003436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003438:	2300      	movs	r3, #0
 800343a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800343c:	2304      	movs	r3, #4
 800343e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	480c      	ldr	r0, [pc, #48]	@ (8003478 <HAL_I2C_MspInit+0x8c>)
 8003448:	f000 fd30 	bl	8003eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	4b08      	ldr	r3, [pc, #32]	@ (8003474 <HAL_I2C_MspInit+0x88>)
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	4a07      	ldr	r2, [pc, #28]	@ (8003474 <HAL_I2C_MspInit+0x88>)
 8003456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800345a:	6413      	str	r3, [r2, #64]	@ 0x40
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <HAL_I2C_MspInit+0x88>)
 800345e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003468:	bf00      	nop
 800346a:	3728      	adds	r7, #40	@ 0x28
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40005400 	.word	0x40005400
 8003474:	40023800 	.word	0x40023800
 8003478:	40020400 	.word	0x40020400

0800347c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08e      	sub	sp, #56	@ 0x38
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a31      	ldr	r2, [pc, #196]	@ (800356c <HAL_I2S_MspInit+0xf0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d15a      	bne.n	8003562 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80034ac:	2301      	movs	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80034b0:	23c0      	movs	r3, #192	@ 0xc0
 80034b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80034b4:	2302      	movs	r3, #2
 80034b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fae3 	bl	8007a88 <HAL_RCCEx_PeriphCLKConfig>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80034c8:	f7ff ff5e 	bl	8003388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	4b27      	ldr	r3, [pc, #156]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 80034d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d4:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 80034d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034da:	6413      	str	r3, [r2, #64]	@ 0x40
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 80034ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	4a18      	ldr	r2, [pc, #96]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6313      	str	r3, [r2, #48]	@ 0x30
 8003514:	4b16      	ldr	r3, [pc, #88]	@ (8003570 <HAL_I2S_MspInit+0xf4>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003520:	2310      	movs	r3, #16
 8003522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003524:	2302      	movs	r3, #2
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352c:	2300      	movs	r3, #0
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003530:	2306      	movs	r3, #6
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	480e      	ldr	r0, [pc, #56]	@ (8003574 <HAL_I2S_MspInit+0xf8>)
 800353c:	f000 fcb6 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003540:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003546:	2302      	movs	r3, #2
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354e:	2300      	movs	r3, #0
 8003550:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003552:	2306      	movs	r3, #6
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800355a:	4619      	mov	r1, r3
 800355c:	4806      	ldr	r0, [pc, #24]	@ (8003578 <HAL_I2S_MspInit+0xfc>)
 800355e:	f000 fca5 	bl	8003eac <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003562:	bf00      	nop
 8003564:	3738      	adds	r7, #56	@ 0x38
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40003c00 	.word	0x40003c00
 8003570:	40023800 	.word	0x40023800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020800 	.word	0x40020800

0800357c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	@ 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <HAL_SPI_MspInit+0x84>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d12b      	bne.n	80035f6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <HAL_SPI_MspInit+0x88>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a6:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_SPI_MspInit+0x88>)
 80035a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ae:	4b15      	ldr	r3, [pc, #84]	@ (8003604 <HAL_SPI_MspInit+0x88>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <HAL_SPI_MspInit+0x88>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a10      	ldr	r2, [pc, #64]	@ (8003604 <HAL_SPI_MspInit+0x88>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_SPI_MspInit+0x88>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035d6:	23e0      	movs	r3, #224	@ 0xe0
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035e6:	2305      	movs	r3, #5
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	4805      	ldr	r0, [pc, #20]	@ (8003608 <HAL_SPI_MspInit+0x8c>)
 80035f2:	f000 fc5b 	bl	8003eac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80035f6:	bf00      	nop
 80035f8:	3728      	adds	r7, #40	@ 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40013000 	.word	0x40013000
 8003604:	40023800 	.word	0x40023800
 8003608:	40020000 	.word	0x40020000

0800360c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	@ 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3a      	ldr	r2, [pc, #232]	@ (8003714 <HAL_UART_MspInit+0x108>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d134      	bne.n	8003698 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	4a38      	ldr	r2, [pc, #224]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 8003638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800363c:	6413      	str	r3, [r2, #64]	@ 0x40
 800363e:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	4b32      	ldr	r3, [pc, #200]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6313      	str	r3, [r2, #48]	@ 0x30
 800365a:	4b2f      	ldr	r3, [pc, #188]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003666:	2303      	movs	r3, #3
 8003668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003672:	2303      	movs	r3, #3
 8003674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003676:	2308      	movs	r3, #8
 8003678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	4619      	mov	r1, r3
 8003680:	4826      	ldr	r0, [pc, #152]	@ (800371c <HAL_UART_MspInit+0x110>)
 8003682:	f000 fc13 	bl	8003eac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2105      	movs	r1, #5
 800368a:	2034      	movs	r0, #52	@ 0x34
 800368c:	f000 fb52 	bl	8003d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003690:	2034      	movs	r0, #52	@ 0x34
 8003692:	f000 fb6b 	bl	8003d6c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003696:	e038      	b.n	800370a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a20      	ldr	r2, [pc, #128]	@ (8003720 <HAL_UART_MspInit+0x114>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d133      	bne.n	800370a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 80036ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	4a14      	ldr	r2, [pc, #80]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ce:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_UART_MspInit+0x10c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036da:	230c      	movs	r3, #12
 80036dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	2302      	movs	r3, #2
 80036e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036ea:	2307      	movs	r3, #7
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 031c 	add.w	r3, r7, #28
 80036f2:	4619      	mov	r1, r3
 80036f4:	4809      	ldr	r0, [pc, #36]	@ (800371c <HAL_UART_MspInit+0x110>)
 80036f6:	f000 fbd9 	bl	8003eac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2105      	movs	r1, #5
 80036fe:	2026      	movs	r0, #38	@ 0x26
 8003700:	f000 fb18 	bl	8003d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003704:	2026      	movs	r0, #38	@ 0x26
 8003706:	f000 fb31 	bl	8003d6c <HAL_NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3730      	adds	r7, #48	@ 0x30
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40004c00 	.word	0x40004c00
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000
 8003720:	40004400 	.word	0x40004400

08003724 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08c      	sub	sp, #48	@ 0x30
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
 8003738:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <HAL_InitTick+0xd4>)
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	4a2e      	ldr	r2, [pc, #184]	@ (80037f8 <HAL_InitTick+0xd4>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6453      	str	r3, [r2, #68]	@ 0x44
 8003744:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <HAL_InitTick+0xd4>)
 8003746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
 800374e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003750:	f107 020c 	add.w	r2, r7, #12
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f962 	bl	8007a24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003760:	f004 f94c 	bl	80079fc <HAL_RCC_GetPCLK2Freq>
 8003764:	4603      	mov	r3, r0
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	4a23      	ldr	r2, [pc, #140]	@ (80037fc <HAL_InitTick+0xd8>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	3b01      	subs	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003778:	4b21      	ldr	r3, [pc, #132]	@ (8003800 <HAL_InitTick+0xdc>)
 800377a:	4a22      	ldr	r2, [pc, #136]	@ (8003804 <HAL_InitTick+0xe0>)
 800377c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <HAL_InitTick+0xdc>)
 8003780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003784:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003786:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <HAL_InitTick+0xdc>)
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800378c:	4b1c      	ldr	r3, [pc, #112]	@ (8003800 <HAL_InitTick+0xdc>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003792:	4b1b      	ldr	r3, [pc, #108]	@ (8003800 <HAL_InitTick+0xdc>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003798:	4b19      	ldr	r3, [pc, #100]	@ (8003800 <HAL_InitTick+0xdc>)
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800379e:	4818      	ldr	r0, [pc, #96]	@ (8003800 <HAL_InitTick+0xdc>)
 80037a0:	f004 fb3d 	bl	8007e1e <HAL_TIM_Base_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80037aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d11b      	bne.n	80037ea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037b2:	4813      	ldr	r0, [pc, #76]	@ (8003800 <HAL_InitTick+0xdc>)
 80037b4:	f004 fb8c 	bl	8007ed0 <HAL_TIM_Base_Start_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80037be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d111      	bne.n	80037ea <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037c6:	2019      	movs	r0, #25
 80037c8:	f000 fad0 	bl	8003d6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	d808      	bhi.n	80037e4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80037d2:	2200      	movs	r2, #0
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	2019      	movs	r0, #25
 80037d8:	f000 faac 	bl	8003d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003808 <HAL_InitTick+0xe4>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e002      	b.n	80037ea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80037ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3730      	adds	r7, #48	@ 0x30
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	431bde83 	.word	0x431bde83
 8003800:	200026c0 	.word	0x200026c0
 8003804:	40010000 	.word	0x40010000
 8003808:	20000268 	.word	0x20000268

0800380c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003810:	bf00      	nop
 8003812:	e7fd      	b.n	8003810 <NMI_Handler+0x4>

08003814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <HardFault_Handler+0x4>

0800381c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <MemManage_Handler+0x4>

08003824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003828:	bf00      	nop
 800382a:	e7fd      	b.n	8003828 <BusFault_Handler+0x4>

0800382c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <UsageFault_Handler+0x4>

08003834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
   * Vervolgens wordt de key meegestuurd met een FreeRTOS event, die opgevangen wordt
   * door de task ARM_keys_IRQ(). Daarna wordt, indien nodig, een context switch
   * afgedwongen door portYIELD_FROM_ISR().
   *
   */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
  int        key;

  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 800384e:	2001      	movs	r0, #1
 8003850:	f000 fd14 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>

  key = KEYS_read(); // determine which key is pressed...
 8003854:	f7fe ff2e 	bl	80026b4 <KEYS_read>
 8003858:	4603      	mov	r3, r0
 800385a:	607b      	str	r3, [r7, #4]
  xEventGroupSetBitsFromISR (hKEY_Event, key, &xHigherPriorityTaskWoken);
 800385c:	4b0f      	ldr	r3, [pc, #60]	@ (800389c <EXTI0_IRQHandler+0x58>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	463a      	mov	r2, r7
 8003864:	4618      	mov	r0, r3
 8003866:	f009 fdd7 	bl	800d418 <xEventGroupSetBitsFromISR>

  // KEYS_initISR(0); // set all lines lo if you want repeating keys
  KEYS_initISR(1);    // set all lines hi for reading all 16 keys
 800386a:	2001      	movs	r0, #1
 800386c:	f7fe fefa 	bl	8002664 <KEYS_initISR>
  if (xHigherPriorityTaskWoken != pdFALSE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <EXTI0_IRQHandler+0x48>
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // force context switch
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <EXTI0_IRQHandler+0x48>
 800387c:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <EXTI0_IRQHandler+0x5c>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Key_int_Pin);
 800388c:	2001      	movs	r0, #1
 800388e:	f000 fcf5 	bl	800427c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20002454 	.word	0x20002454
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038a8:	4802      	ldr	r0, [pc, #8]	@ (80038b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038aa:	f004 fb81 	bl	8007fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200026c0 	.word	0x200026c0

080038b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038bc:	4802      	ldr	r0, [pc, #8]	@ (80038c8 <USART2_IRQHandler+0x10>)
 80038be:	f004 fe49 	bl	8008554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20002674 	.word	0x20002674

080038cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80038d0:	4802      	ldr	r0, [pc, #8]	@ (80038dc <UART4_IRQHandler+0x10>)
 80038d2:	f004 fe3f 	bl	8008554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	2000262c 	.word	0x2000262c

080038e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80038e4:	4802      	ldr	r0, [pc, #8]	@ (80038f0 <OTG_FS_IRQHandler+0x10>)
 80038e6:	f000 ffcd 	bl	8004884 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80038ea:	bf00      	nop
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20013304 	.word	0x20013304

080038f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	return 1;
 80038f8:	2301      	movs	r3, #1
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <_kill>:

int _kill(int pid, int sig)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800390e:	f00f fd57 	bl	80133c0 <__errno>
 8003912:	4603      	mov	r3, r0
 8003914:	2216      	movs	r2, #22
 8003916:	601a      	str	r2, [r3, #0]
	return -1;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <_exit>:

void _exit (int status)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ffe7 	bl	8003904 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003936:	bf00      	nop
 8003938:	e7fd      	b.n	8003936 <_exit+0x12>

0800393a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e00a      	b.n	8003962 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800394c:	f3af 8000 	nop.w
 8003950:	4601      	mov	r1, r0
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	60ba      	str	r2, [r7, #8]
 8003958:	b2ca      	uxtb	r2, r1
 800395a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	3301      	adds	r3, #1
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	429a      	cmp	r2, r3
 8003968:	dbf0      	blt.n	800394c <_read+0x12>
	}

return len;
 800396a:	687b      	ldr	r3, [r7, #4]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e009      	b.n	800399a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	60ba      	str	r2, [r7, #8]
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	dbf1      	blt.n	8003986 <_write+0x12>
	}
	return len;
 80039a2:	687b      	ldr	r3, [r7, #4]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <_close>:

int _close(int file)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	return -1;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039d4:	605a      	str	r2, [r3, #4]
	return 0;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <_isatty>:

int _isatty(int file)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	return 1;
 80039ec:	2301      	movs	r3, #1
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b085      	sub	sp, #20
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
	return 0;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a1c:	4a14      	ldr	r2, [pc, #80]	@ (8003a70 <_sbrk+0x5c>)
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <_sbrk+0x60>)
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a28:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <_sbrk+0x64>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <_sbrk+0x64>)
 8003a32:	4a12      	ldr	r2, [pc, #72]	@ (8003a7c <_sbrk+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a36:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a44:	f00f fcbc 	bl	80133c0 <__errno>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e009      	b.n	8003a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a54:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5a:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <_sbrk+0x64>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	4a05      	ldr	r2, [pc, #20]	@ (8003a78 <_sbrk+0x64>)
 8003a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20020000 	.word	0x20020000
 8003a74:	00000400 	.word	0x00000400
 8003a78:	20002708 	.word	0x20002708
 8003a7c:	20013830 	.word	0x20013830

08003a80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <SystemInit+0x20>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <SystemInit+0x20>)
 8003a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003adc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003aa8:	480d      	ldr	r0, [pc, #52]	@ (8003ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003aaa:	490e      	ldr	r1, [pc, #56]	@ (8003ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003aac:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab0:	e002      	b.n	8003ab8 <LoopCopyDataInit>

08003ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ab6:	3304      	adds	r3, #4

08003ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003abc:	d3f9      	bcc.n	8003ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003abe:	4a0b      	ldr	r2, [pc, #44]	@ (8003aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ac0:	4c0b      	ldr	r4, [pc, #44]	@ (8003af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ac4:	e001      	b.n	8003aca <LoopFillZerobss>

08003ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ac8:	3204      	adds	r2, #4

08003aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003acc:	d3fb      	bcc.n	8003ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003ace:	f7ff ffd7 	bl	8003a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ad2:	f00f fc7b 	bl	80133cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ad6:	f7ff f8f7 	bl	8002cc8 <main>
  bx  lr    
 8003ada:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003adc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae4:	2000045c 	.word	0x2000045c
  ldr r2, =_sidata
 8003ae8:	08016b88 	.word	0x08016b88
  ldr r2, =_sbss
 8003aec:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8003af0:	20013830 	.word	0x20013830

08003af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af4:	e7fe      	b.n	8003af4 <ADC_IRQHandler>
	...

08003af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003afc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <HAL_Init+0x40>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a0d      	ldr	r2, [pc, #52]	@ (8003b38 <HAL_Init+0x40>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_Init+0x40>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <HAL_Init+0x40>)
 8003b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b14:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <HAL_Init+0x40>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a07      	ldr	r2, [pc, #28]	@ (8003b38 <HAL_Init+0x40>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b20:	2003      	movs	r0, #3
 8003b22:	f000 f8fc 	bl	8003d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b26:	2000      	movs	r0, #0
 8003b28:	f7ff fdfc 	bl	8003724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b2c:	f7ff fc32 	bl	8003394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023c00 	.word	0x40023c00

08003b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_IncTick+0x20>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_IncTick+0x24>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	4a04      	ldr	r2, [pc, #16]	@ (8003b60 <HAL_IncTick+0x24>)
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	2000026c 	.word	0x2000026c
 8003b60:	2000270c 	.word	0x2000270c

08003b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return uwTick;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_GetTick+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	2000270c 	.word	0x2000270c

08003b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff ffee 	bl	8003b64 <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b94:	d005      	beq.n	8003ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_Delay+0x44>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ba2:	bf00      	nop
 8003ba4:	f7ff ffde 	bl	8003b64 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d8f7      	bhi.n	8003ba4 <HAL_Delay+0x28>
  {
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000026c 	.word	0x2000026c

08003bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003be0:	4013      	ands	r3, r2
 8003be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bf6:	4a04      	ldr	r2, [pc, #16]	@ (8003c08 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	e000ed00 	.word	0xe000ed00

08003c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c10:	4b04      	ldr	r3, [pc, #16]	@ (8003c24 <__NVIC_GetPriorityGrouping+0x18>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	f003 0307 	and.w	r3, r3, #7
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db0b      	blt.n	8003c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	f003 021f 	and.w	r2, r3, #31
 8003c40:	4907      	ldr	r1, [pc, #28]	@ (8003c60 <__NVIC_EnableIRQ+0x38>)
 8003c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2001      	movs	r0, #1
 8003c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100

08003c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	db0a      	blt.n	8003c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	490c      	ldr	r1, [pc, #48]	@ (8003cb0 <__NVIC_SetPriority+0x4c>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	440b      	add	r3, r1
 8003c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c8c:	e00a      	b.n	8003ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	4908      	ldr	r1, [pc, #32]	@ (8003cb4 <__NVIC_SetPriority+0x50>)
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	3b04      	subs	r3, #4
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	761a      	strb	r2, [r3, #24]
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000e100 	.word	0xe000e100
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	@ 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f1c3 0307 	rsb	r3, r3, #7
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	bf28      	it	cs
 8003cd6:	2304      	movcs	r3, #4
 8003cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d902      	bls.n	8003ce8 <NVIC_EncodePriority+0x30>
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3b03      	subs	r3, #3
 8003ce6:	e000      	b.n	8003cea <NVIC_EncodePriority+0x32>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	401a      	ands	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	43d9      	mvns	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d10:	4313      	orrs	r3, r2
         );
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3724      	adds	r7, #36	@ 0x24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ff4c 	bl	8003bc4 <__NVIC_SetPriorityGrouping>
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d46:	f7ff ff61 	bl	8003c0c <__NVIC_GetPriorityGrouping>
 8003d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	6978      	ldr	r0, [r7, #20]
 8003d52:	f7ff ffb1 	bl	8003cb8 <NVIC_EncodePriority>
 8003d56:	4602      	mov	r2, r0
 8003d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ff80 	bl	8003c64 <__NVIC_SetPriority>
}
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff54 	bl	8003c28 <__NVIC_EnableIRQ>
}
 8003d80:	bf00      	nop
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d96:	f7ff fee5 	bl	8003b64 <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d008      	beq.n	8003dba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2280      	movs	r2, #128	@ 0x80
 8003dac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e052      	b.n	8003e60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0216 	bic.w	r2, r2, #22
 8003dc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <HAL_DMA_Abort+0x62>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0208 	bic.w	r2, r2, #8
 8003df8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e0a:	e013      	b.n	8003e34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e0c:	f7ff feaa 	bl	8003b64 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d90c      	bls.n	8003e34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2203      	movs	r2, #3
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e015      	b.n	8003e60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e4      	bne.n	8003e0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	223f      	movs	r2, #63	@ 0x3f
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d004      	beq.n	8003e86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2280      	movs	r2, #128	@ 0x80
 8003e80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e00c      	b.n	8003ea0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2205      	movs	r2, #5
 8003e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0201 	bic.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	@ 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e16b      	b.n	80041a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	f040 815a 	bne.w	800419a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d005      	beq.n	8003efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d130      	bne.n	8003f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f34:	2201      	movs	r2, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 0201 	and.w	r2, r3, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d017      	beq.n	8003f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d123      	bne.n	8003ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	69b9      	ldr	r1, [r7, #24]
 8003fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80b4 	beq.w	800419a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	4b60      	ldr	r3, [pc, #384]	@ (80041b8 <HAL_GPIO_Init+0x30c>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	4a5f      	ldr	r2, [pc, #380]	@ (80041b8 <HAL_GPIO_Init+0x30c>)
 800403c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004040:	6453      	str	r3, [r2, #68]	@ 0x44
 8004042:	4b5d      	ldr	r3, [pc, #372]	@ (80041b8 <HAL_GPIO_Init+0x30c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404e:	4a5b      	ldr	r2, [pc, #364]	@ (80041bc <HAL_GPIO_Init+0x310>)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	3302      	adds	r3, #2
 8004056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a52      	ldr	r2, [pc, #328]	@ (80041c0 <HAL_GPIO_Init+0x314>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02b      	beq.n	80040d2 <HAL_GPIO_Init+0x226>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a51      	ldr	r2, [pc, #324]	@ (80041c4 <HAL_GPIO_Init+0x318>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d025      	beq.n	80040ce <HAL_GPIO_Init+0x222>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a50      	ldr	r2, [pc, #320]	@ (80041c8 <HAL_GPIO_Init+0x31c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01f      	beq.n	80040ca <HAL_GPIO_Init+0x21e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4f      	ldr	r2, [pc, #316]	@ (80041cc <HAL_GPIO_Init+0x320>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d019      	beq.n	80040c6 <HAL_GPIO_Init+0x21a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4e      	ldr	r2, [pc, #312]	@ (80041d0 <HAL_GPIO_Init+0x324>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_GPIO_Init+0x216>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4d      	ldr	r2, [pc, #308]	@ (80041d4 <HAL_GPIO_Init+0x328>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00d      	beq.n	80040be <HAL_GPIO_Init+0x212>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4c      	ldr	r2, [pc, #304]	@ (80041d8 <HAL_GPIO_Init+0x32c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <HAL_GPIO_Init+0x20e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4b      	ldr	r2, [pc, #300]	@ (80041dc <HAL_GPIO_Init+0x330>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_GPIO_Init+0x20a>
 80040b2:	2307      	movs	r3, #7
 80040b4:	e00e      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040b6:	2308      	movs	r3, #8
 80040b8:	e00c      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e00a      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040be:	2305      	movs	r3, #5
 80040c0:	e008      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e006      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e004      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040d2:	2300      	movs	r3, #0
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	f002 0203 	and.w	r2, r2, #3
 80040da:	0092      	lsls	r2, r2, #2
 80040dc:	4093      	lsls	r3, r2
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e4:	4935      	ldr	r1, [pc, #212]	@ (80041bc <HAL_GPIO_Init+0x310>)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	3302      	adds	r3, #2
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040f2:	4b3b      	ldr	r3, [pc, #236]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004116:	4a32      	ldr	r2, [pc, #200]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800411c:	4b30      	ldr	r3, [pc, #192]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004140:	4a27      	ldr	r2, [pc, #156]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004146:	4b26      	ldr	r3, [pc, #152]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800416a:	4a1d      	ldr	r2, [pc, #116]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004170:	4b1b      	ldr	r3, [pc, #108]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004194:	4a12      	ldr	r2, [pc, #72]	@ (80041e0 <HAL_GPIO_Init+0x334>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3301      	adds	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	f67f ae90 	bls.w	8003ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3724      	adds	r7, #36	@ 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40020000 	.word	0x40020000
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40020800 	.word	0x40020800
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40021400 	.word	0x40021400
 80041d8:	40021800 	.word	0x40021800
 80041dc:	40021c00 	.word	0x40021c00
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
 8004200:	e001      	b.n	8004206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
 8004220:	4613      	mov	r3, r2
 8004222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004224:	787b      	ldrb	r3, [r7, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800422a:	887a      	ldrh	r2, [r7, #2]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004230:	e003      	b.n	800423a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004232:	887b      	ldrh	r3, [r7, #2]
 8004234:	041a      	lsls	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004246:	b480      	push	{r7}
 8004248:	b085      	sub	sp, #20
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4013      	ands	r3, r2
 800425e:	041a      	lsls	r2, r3, #16
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43d9      	mvns	r1, r3
 8004264:	887b      	ldrh	r3, [r7, #2]
 8004266:	400b      	ands	r3, r1
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004286:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004288:	695a      	ldr	r2, [r3, #20]
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	4013      	ands	r3, r2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d006      	beq.n	80042a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f806 	bl	80042ac <HAL_GPIO_EXTI_Callback>
  }
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40013c00 	.word	0x40013c00

080042ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af02      	add	r7, sp, #8
 80042c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e059      	b.n	8004388 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f00c ff56 	bl	80111a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2203      	movs	r2, #3
 80042f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004302:	d102      	bne.n	800430a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f005 f901 	bl	8009516 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	7c1a      	ldrb	r2, [r3, #16]
 800431c:	f88d 2000 	strb.w	r2, [sp]
 8004320:	3304      	adds	r3, #4
 8004322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004324:	f005 f882 	bl	800942c <USB_CoreInit>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e026      	b.n	8004388 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2101      	movs	r1, #1
 8004340:	4618      	mov	r0, r3
 8004342:	f005 f8f9 	bl	8009538 <USB_SetCurrentMode>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e017      	b.n	8004388 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7c1a      	ldrb	r2, [r3, #16]
 8004360:	f88d 2000 	strb.w	r2, [sp]
 8004364:	3304      	adds	r3, #4
 8004366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004368:	f005 faa2 	bl	80098b0 <USB_HostInit>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e004      	b.n	8004388 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b08b      	sub	sp, #44	@ 0x2c
 8004394:	af04      	add	r7, sp, #16
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	70fb      	strb	r3, [r7, #3]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70bb      	strb	r3, [r7, #2]
 80043a6:	4613      	mov	r3, r2
 80043a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80043aa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80043ac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_HCD_HC_Init+0x2c>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e09d      	b.n	80044f8 <HAL_HCD_HC_Init+0x168>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	3319      	adds	r3, #25
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3314      	adds	r3, #20
 80043e8:	787a      	ldrb	r2, [r7, #1]
 80043ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	3315      	adds	r3, #21
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	3326      	adds	r3, #38	@ 0x26
 8004410:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004414:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	78bb      	ldrb	r3, [r7, #2]
 800441a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800441e:	b2d8      	uxtb	r0, r3
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	440b      	add	r3, r1
 800442c:	3316      	adds	r3, #22
 800442e:	4602      	mov	r2, r0
 8004430:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fbc8 	bl	8004bcc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800443c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004440:	2b00      	cmp	r3, #0
 8004442:	da0a      	bge.n	800445a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3317      	adds	r3, #23
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e009      	b.n	800446e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3317      	adds	r3, #23
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f005 fb80 	bl	8009b78 <USB_GetHostSpeed>
 8004478:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800447a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800447e:	2b01      	cmp	r3, #1
 8004480:	d10b      	bne.n	800449a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004482:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_HCD_HC_Init+0x10a>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	2bbc      	cmp	r3, #188	@ 0xbc
 8004494:	d901      	bls.n	800449a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004496:	23bc      	movs	r3, #188	@ 0xbc
 8004498:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800449a:	78fa      	ldrb	r2, [r7, #3]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	3318      	adds	r3, #24
 80044aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80044ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	b298      	uxth	r0, r3
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	3328      	adds	r3, #40	@ 0x28
 80044c4:	4602      	mov	r2, r0
 80044c6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	787c      	ldrb	r4, [r7, #1]
 80044d2:	78ba      	ldrb	r2, [r7, #2]
 80044d4:	78f9      	ldrb	r1, [r7, #3]
 80044d6:	9302      	str	r3, [sp, #8]
 80044d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	4623      	mov	r3, r4
 80044e6:	f005 fb6f 	bl	8009bc8 <USB_HC_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}

08004500 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_HCD_HC_Halt+0x1e>
 800451a:	2302      	movs	r3, #2
 800451c:	e00f      	b.n	800453e <HAL_HCD_HC_Halt+0x3e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f005 ff01 	bl	800a336 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	461a      	mov	r2, r3
 8004556:	4603      	mov	r3, r0
 8004558:	70fb      	strb	r3, [r7, #3]
 800455a:	460b      	mov	r3, r1
 800455c:	70bb      	strb	r3, [r7, #2]
 800455e:	4613      	mov	r3, r2
 8004560:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004562:	78fa      	ldrb	r2, [r7, #3]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3317      	adds	r3, #23
 8004572:	78ba      	ldrb	r2, [r7, #2]
 8004574:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	3326      	adds	r3, #38	@ 0x26
 8004586:	787a      	ldrb	r2, [r7, #1]
 8004588:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800458a:	7c3b      	ldrb	r3, [r7, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d114      	bne.n	80045ba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	332a      	adds	r3, #42	@ 0x2a
 80045a0:	2203      	movs	r2, #3
 80045a2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	3319      	adds	r3, #25
 80045b4:	7f3a      	ldrb	r2, [r7, #28]
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e009      	b.n	80045ce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	332a      	adds	r3, #42	@ 0x2a
 80045ca:	2202      	movs	r2, #2
 80045cc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80045ce:	787b      	ldrb	r3, [r7, #1]
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	f200 8102 	bhi.w	80047da <HAL_HCD_HC_SubmitRequest+0x292>
 80045d6:	a201      	add	r2, pc, #4	@ (adr r2, 80045dc <HAL_HCD_HC_SubmitRequest+0x94>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	080047c5 	.word	0x080047c5
 80045e4:	080046b1 	.word	0x080046b1
 80045e8:	0800473b 	.word	0x0800473b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80045ec:	7c3b      	ldrb	r3, [r7, #16]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	f040 80f5 	bne.w	80047de <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80045f4:	78bb      	ldrb	r3, [r7, #2]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d12d      	bne.n	8004656 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80045fa:	8b3b      	ldrh	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d109      	bne.n	8004614 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	333d      	adds	r3, #61	@ 0x3d
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	333d      	adds	r3, #61	@ 0x3d
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	332a      	adds	r3, #42	@ 0x2a
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800463e:	e0ce      	b.n	80047de <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	332a      	adds	r3, #42	@ 0x2a
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
      break;
 8004654:	e0c3      	b.n	80047de <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	331a      	adds	r3, #26
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	f040 80b8 	bne.w	80047de <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	333c      	adds	r3, #60	@ 0x3c
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	332a      	adds	r3, #42	@ 0x2a
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
      break;
 8004698:	e0a1      	b.n	80047de <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	332a      	adds	r3, #42	@ 0x2a
 80046aa:	2202      	movs	r2, #2
 80046ac:	701a      	strb	r2, [r3, #0]
      break;
 80046ae:	e096      	b.n	80047de <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80046b0:	78bb      	ldrb	r3, [r7, #2]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d120      	bne.n	80046f8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	333d      	adds	r3, #61	@ 0x3d
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10a      	bne.n	80046e2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	332a      	adds	r3, #42	@ 0x2a
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80046e0:	e07e      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	332a      	adds	r3, #42	@ 0x2a
 80046f2:	2202      	movs	r2, #2
 80046f4:	701a      	strb	r2, [r3, #0]
      break;
 80046f6:	e073      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	333c      	adds	r3, #60	@ 0x3c
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10a      	bne.n	8004724 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	332a      	adds	r3, #42	@ 0x2a
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
      break;
 8004722:	e05d      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004724:	78fa      	ldrb	r2, [r7, #3]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	332a      	adds	r3, #42	@ 0x2a
 8004734:	2202      	movs	r2, #2
 8004736:	701a      	strb	r2, [r3, #0]
      break;
 8004738:	e052      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800473a:	78bb      	ldrb	r3, [r7, #2]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d120      	bne.n	8004782 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	333d      	adds	r3, #61	@ 0x3d
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	332a      	adds	r3, #42	@ 0x2a
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800476a:	e039      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	332a      	adds	r3, #42	@ 0x2a
 800477c:	2202      	movs	r2, #2
 800477e:	701a      	strb	r2, [r3, #0]
      break;
 8004780:	e02e      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	333c      	adds	r3, #60	@ 0x3c
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	332a      	adds	r3, #42	@ 0x2a
 80047a8:	2200      	movs	r2, #0
 80047aa:	701a      	strb	r2, [r3, #0]
      break;
 80047ac:	e018      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	332a      	adds	r3, #42	@ 0x2a
 80047be:	2202      	movs	r2, #2
 80047c0:	701a      	strb	r2, [r3, #0]
      break;
 80047c2:	e00d      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	332a      	adds	r3, #42	@ 0x2a
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
      break;
 80047d8:	e002      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80047de:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	332c      	adds	r3, #44	@ 0x2c
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	8b39      	ldrh	r1, [r7, #24]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4403      	add	r3, r0
 8004804:	3334      	adds	r3, #52	@ 0x34
 8004806:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	334c      	adds	r3, #76	@ 0x4c
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	3338      	adds	r3, #56	@ 0x38
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	3315      	adds	r3, #21
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	334d      	adds	r3, #77	@ 0x4d
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	3310      	adds	r3, #16
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	4413      	add	r3, r2
 800486c:	1d19      	adds	r1, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	799b      	ldrb	r3, [r3, #6]
 8004872:	461a      	mov	r2, r3
 8004874:	f005 fad4 	bl	8009e20 <USB_HC_StartXfer>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop

08004884 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f004 ffc2 	bl	8009824 <USB_GetMode>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f040 80fb 	bne.w	8004a9e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 ff85 	bl	80097bc <USB_ReadInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80f1 	beq.w	8004a9c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f004 ff7c 	bl	80097bc <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ce:	d104      	bne.n	80048da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80048d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f004 ff6c 	bl	80097bc <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d104      	bne.n	80048fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f004 ff5c 	bl	80097bc <USB_ReadInterrupts>
 8004904:	4603      	mov	r3, r0
 8004906:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800490a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800490e:	d104      	bne.n	800491a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004918:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f004 ff4c 	bl	80097bc <USB_ReadInterrupts>
 8004924:	4603      	mov	r3, r0
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d103      	bne.n	8004936 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2202      	movs	r2, #2
 8004934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f004 ff3e 	bl	80097bc <USB_ReadInterrupts>
 8004940:	4603      	mov	r3, r0
 8004942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800494a:	d120      	bne.n	800498e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004954:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d113      	bne.n	800498e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004966:	2110      	movs	r1, #16
 8004968:	6938      	ldr	r0, [r7, #16]
 800496a:	f004 fe31 	bl	80095d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800496e:	6938      	ldr	r0, [r7, #16]
 8004970:	f004 fe60 	bl	8009634 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7a5b      	ldrb	r3, [r3, #9]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d105      	bne.n	8004988 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	4618      	mov	r0, r3
 8004984:	f005 f858 	bl	8009a38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f00c fc87 	bl	801129c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f004 ff12 	bl	80097bc <USB_ReadInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800499e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049a2:	d102      	bne.n	80049aa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 fd4d 	bl	8006444 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 ff04 	bl	80097bc <USB_ReadInterrupts>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d106      	bne.n	80049cc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f00c fc50 	bl	8011264 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2208      	movs	r2, #8
 80049ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f004 fef3 	bl	80097bc <USB_ReadInterrupts>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049e0:	d139      	bne.n	8004a56 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f005 fc94 	bl	800a314 <USB_HC_ReadInterrupt>
 80049ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e025      	b.n	8004a40 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d018      	beq.n	8004a3a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a1e:	d106      	bne.n	8004a2e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4619      	mov	r1, r3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f905 	bl	8004c36 <HCD_HC_IN_IRQHandler>
 8004a2c:	e005      	b.n	8004a3a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 ff67 	bl	8005908 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	795b      	ldrb	r3, [r3, #5]
 8004a44:	461a      	mov	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d3d3      	bcc.n	80049f4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f004 feae 	bl	80097bc <USB_ReadInterrupts>
 8004a60:	4603      	mov	r3, r0
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d101      	bne.n	8004a6e <HAL_HCD_IRQHandler+0x1ea>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_HCD_IRQHandler+0x1ec>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d014      	beq.n	8004a9e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0210 	bic.w	r2, r2, #16
 8004a82:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f001 fbfe 	bl	8006286 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0210 	orr.w	r2, r2, #16
 8004a98:	619a      	str	r2, [r3, #24]
 8004a9a:	e000      	b.n	8004a9e <HAL_HCD_IRQHandler+0x21a>
      return;
 8004a9c:	bf00      	nop
    }
  }
}
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_HCD_Start+0x16>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e013      	b.n	8004ae2 <HAL_HCD_Start+0x3e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f005 f81c 	bl	8009b06 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f004 fd0e 	bl	80094f4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_HCD_Stop+0x16>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e00d      	b.n	8004b1c <HAL_HCD_Stop+0x32>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f005 fd6f 	bl	800a5f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 ffbe 	bl	8009ab2 <USB_ResetPort>
 8004b36:	4603      	mov	r3, r0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334c      	adds	r3, #76	@ 0x4c
 8004b5c:	781b      	ldrb	r3, [r3, #0]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	460b      	mov	r3, r1
 8004b74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3338      	adds	r3, #56	@ 0x38
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f005 f800 	bl	8009ba6 <USB_GetCurrentFrame>
 8004ba6:	4603      	mov	r3, r0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f004 ffdb 	bl	8009b78 <USB_GetHostSpeed>
 8004bc2:	4603      	mov	r3, r0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004bd8:	78fa      	ldrb	r2, [r7, #3]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	1a9b      	subs	r3, r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	331a      	adds	r3, #26
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	331b      	adds	r3, #27
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3325      	adds	r3, #37	@ 0x25
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3324      	adds	r3, #36	@ 0x24
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b086      	sub	sp, #24
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f004 fdc4 	bl	80097e2 <USB_ReadChInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d11a      	bne.n	8004c9a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c70:	461a      	mov	r2, r3
 8004c72:	2304      	movs	r3, #4
 8004c74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004c76:	78fa      	ldrb	r2, [r7, #3]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	334d      	adds	r3, #77	@ 0x4d
 8004c86:	2207      	movs	r2, #7
 8004c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	78fa      	ldrb	r2, [r7, #3]
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f005 fb4f 	bl	800a336 <USB_HC_Halt>
 8004c98:	e09e      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f004 fd9d 	bl	80097e2 <USB_ReadChInterrupts>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cb2:	d11b      	bne.n	8004cec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	334d      	adds	r3, #77	@ 0x4d
 8004cd8:	2208      	movs	r2, #8
 8004cda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f005 fb26 	bl	800a336 <USB_HC_Halt>
 8004cea:	e075      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f004 fd74 	bl	80097e2 <USB_ReadChInterrupts>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d11a      	bne.n	8004d3a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d10:	461a      	mov	r2, r3
 8004d12:	2308      	movs	r3, #8
 8004d14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	334d      	adds	r3, #77	@ 0x4d
 8004d26:	2206      	movs	r2, #6
 8004d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f005 faff 	bl	800a336 <USB_HC_Halt>
 8004d38:	e04e      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f004 fd4d 	bl	80097e2 <USB_ReadChInterrupts>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d52:	d11b      	bne.n	8004d8c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d60:	461a      	mov	r2, r3
 8004d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	334d      	adds	r3, #77	@ 0x4d
 8004d78:	2209      	movs	r2, #9
 8004d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f005 fad6 	bl	800a336 <USB_HC_Halt>
 8004d8a:	e025      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f004 fd24 	bl	80097e2 <USB_ReadChInterrupts>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da0:	2b80      	cmp	r3, #128	@ 0x80
 8004da2:	d119      	bne.n	8004dd8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004da4:	78fb      	ldrb	r3, [r7, #3]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db0:	461a      	mov	r2, r3
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	334d      	adds	r3, #77	@ 0x4d
 8004dc6:	2207      	movs	r2, #7
 8004dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f005 faaf 	bl	800a336 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	4611      	mov	r1, r2
 8004de0:	4618      	mov	r0, r3
 8004de2:	f004 fcfe 	bl	80097e2 <USB_ReadChInterrupts>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004df0:	d112      	bne.n	8004e18 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f005 fa9b 	bl	800a336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	f000 bd75 	b.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	78fa      	ldrb	r2, [r7, #3]
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f004 fcde 	bl	80097e2 <USB_ReadChInterrupts>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 8128 	bne.w	8005082 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2320      	movs	r3, #32
 8004e42:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	440b      	add	r3, r1
 8004e52:	331b      	adds	r3, #27
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d119      	bne.n	8004e8e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	331b      	adds	r3, #27
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e8c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	799b      	ldrb	r3, [r3, #6]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01b      	beq.n	8004ece <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e96:	78fa      	ldrb	r2, [r7, #3]
 8004e98:	6879      	ldr	r1, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	011b      	lsls	r3, r3, #4
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	440b      	add	r3, r1
 8004ea4:	3330      	adds	r3, #48	@ 0x30
 8004ea6:	6819      	ldr	r1, [r3, #0]
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	1ac9      	subs	r1, r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4403      	add	r3, r0
 8004eca:	3338      	adds	r3, #56	@ 0x38
 8004ecc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004ece:	78fa      	ldrb	r2, [r7, #3]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	1a9b      	subs	r3, r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	334d      	adds	r3, #77	@ 0x4d
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	3344      	adds	r3, #68	@ 0x44
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	2301      	movs	r3, #1
 8004f06:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f08:	78fa      	ldrb	r2, [r7, #3]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	1a9b      	subs	r3, r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3326      	adds	r3, #38	@ 0x26
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3326      	adds	r3, #38	@ 0x26
 8004f2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d110      	bne.n	8004f56 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f005 f9fa 	bl	800a336 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2310      	movs	r3, #16
 8004f52:	6093      	str	r3, [r2, #8]
 8004f54:	e03d      	b.n	8004fd2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3326      	adds	r3, #38	@ 0x26
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d00a      	beq.n	8004f82 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	6879      	ldr	r1, [r7, #4]
 8004f70:	4613      	mov	r3, r2
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	1a9b      	subs	r3, r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	3326      	adds	r3, #38	@ 0x26
 8004f7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d127      	bne.n	8004fd2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fa0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	334c      	adds	r3, #76	@ 0x4c
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	334c      	adds	r3, #76	@ 0x4c
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f00c f973 	bl	80112b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	799b      	ldrb	r3, [r3, #6]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d13b      	bne.n	8005052 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	3338      	adds	r3, #56	@ 0x38
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4403      	add	r3, r0
 8004ffa:	3328      	adds	r3, #40	@ 0x28
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	440b      	add	r3, r1
 8005000:	1e59      	subs	r1, r3, #1
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4403      	add	r3, r0
 8005010:	3328      	adds	r3, #40	@ 0x28
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	fbb1 f3f3 	udiv	r3, r1, r3
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 8470 	beq.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	333c      	adds	r3, #60	@ 0x3c
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2d8      	uxtb	r0, r3
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	333c      	adds	r3, #60	@ 0x3c
 800504a:	4602      	mov	r2, r0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	f000 bc58 	b.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	333c      	adds	r3, #60	@ 0x3c
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	f083 0301 	eor.w	r3, r3, #1
 800506a:	b2d8      	uxtb	r0, r3
 800506c:	6879      	ldr	r1, [r7, #4]
 800506e:	4613      	mov	r3, r2
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	333c      	adds	r3, #60	@ 0x3c
 800507a:	4602      	mov	r2, r0
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	f000 bc40 	b.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fba9 	bl	80097e2 <USB_ReadChInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b20      	cmp	r3, #32
 8005098:	d131      	bne.n	80050fe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a6:	461a      	mov	r2, r3
 80050a8:	2320      	movs	r3, #32
 80050aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	331a      	adds	r3, #26
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f040 841f 	bne.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	331b      	adds	r3, #27
 80050d4:	2201      	movs	r2, #1
 80050d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	1a9b      	subs	r3, r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	334d      	adds	r3, #77	@ 0x4d
 80050e8:	2203      	movs	r2, #3
 80050ea:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f005 f91e 	bl	800a336 <USB_HC_Halt>
 80050fa:	f000 bc02 	b.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f004 fb6b 	bl	80097e2 <USB_ReadChInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b02      	cmp	r3, #2
 8005114:	f040 8305 	bne.w	8005722 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005124:	461a      	mov	r2, r3
 8005126:	2302      	movs	r3, #2
 8005128:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800512a:	78fa      	ldrb	r2, [r7, #3]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	1a9b      	subs	r3, r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	334d      	adds	r3, #77	@ 0x4d
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d114      	bne.n	800516a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	334d      	adds	r3, #77	@ 0x4d
 8005150:	2202      	movs	r2, #2
 8005152:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	334c      	adds	r3, #76	@ 0x4c
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e2cc      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	334d      	adds	r3, #77	@ 0x4d
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b06      	cmp	r3, #6
 800517e:	d114      	bne.n	80051aa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	334d      	adds	r3, #77	@ 0x4d
 8005190:	2202      	movs	r2, #2
 8005192:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	6879      	ldr	r1, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	334c      	adds	r3, #76	@ 0x4c
 80051a4:	2205      	movs	r2, #5
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	e2ac      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	334d      	adds	r3, #77	@ 0x4d
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b07      	cmp	r3, #7
 80051be:	d00b      	beq.n	80051d8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	334d      	adds	r3, #77	@ 0x4d
 80051d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051d2:	2b09      	cmp	r3, #9
 80051d4:	f040 80a6 	bne.w	8005324 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	334d      	adds	r3, #77	@ 0x4d
 80051e8:	2202      	movs	r2, #2
 80051ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3344      	adds	r3, #68	@ 0x44
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1c59      	adds	r1, r3, #1
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4403      	add	r3, r0
 800520c:	3344      	adds	r3, #68	@ 0x44
 800520e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3344      	adds	r3, #68	@ 0x44
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d943      	bls.n	80052ae <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3344      	adds	r3, #68	@ 0x44
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	331a      	adds	r3, #26
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d123      	bne.n	8005298 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	331b      	adds	r3, #27
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	331c      	adds	r3, #28
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	440a      	add	r2, r1
 800528e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005296:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	334c      	adds	r3, #76	@ 0x4c
 80052a8:	2204      	movs	r2, #4
 80052aa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052ac:	e229      	b.n	8005702 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	334c      	adds	r3, #76	@ 0x4c
 80052be:	2202      	movs	r2, #2
 80052c0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3326      	adds	r3, #38	@ 0x26
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00b      	beq.n	80052f0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	3326      	adds	r3, #38	@ 0x26
 80052e8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	f040 8209 	bne.w	8005702 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005306:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800530e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531c:	461a      	mov	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005322:	e1ee      	b.n	8005702 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	334d      	adds	r3, #77	@ 0x4d
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b05      	cmp	r3, #5
 8005338:	f040 80c8 	bne.w	80054cc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	334d      	adds	r3, #77	@ 0x4d
 800534c:	2202      	movs	r2, #2
 800534e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	331b      	adds	r3, #27
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	f040 81ce 	bne.w	8005704 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	3326      	adds	r3, #38	@ 0x26
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b03      	cmp	r3, #3
 800537c:	d16b      	bne.n	8005456 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3348      	adds	r3, #72	@ 0x48
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	1c59      	adds	r1, r3, #1
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	1a9b      	subs	r3, r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4403      	add	r3, r0
 800539e:	3348      	adds	r3, #72	@ 0x48
 80053a0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80053a2:	78fa      	ldrb	r2, [r7, #3]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	3348      	adds	r3, #72	@ 0x48
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d943      	bls.n	8005440 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	3348      	adds	r3, #72	@ 0x48
 80053c8:	2200      	movs	r2, #0
 80053ca:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	331b      	adds	r3, #27
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	3344      	adds	r3, #68	@ 0x44
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d809      	bhi.n	800540a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	331c      	adds	r3, #28
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	440a      	add	r2, r1
 8005420:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005428:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	334c      	adds	r3, #76	@ 0x4c
 800543a:	2204      	movs	r2, #4
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e014      	b.n	800546a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	334c      	adds	r3, #76	@ 0x4c
 8005450:	2202      	movs	r2, #2
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e009      	b.n	800546a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	334c      	adds	r3, #76	@ 0x4c
 8005466:	2202      	movs	r2, #2
 8005468:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	3326      	adds	r3, #38	@ 0x26
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3326      	adds	r3, #38	@ 0x26
 8005490:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005492:	2b02      	cmp	r3, #2
 8005494:	f040 8136 	bne.w	8005704 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c4:	461a      	mov	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e11b      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054cc:	78fa      	ldrb	r2, [r7, #3]
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	334d      	adds	r3, #77	@ 0x4d
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	f040 8081 	bne.w	80055e6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	334d      	adds	r3, #77	@ 0x4d
 80054f4:	2202      	movs	r2, #2
 80054f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	331b      	adds	r3, #27
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	f040 80fa 	bne.w	8005704 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334c      	adds	r3, #76	@ 0x4c
 8005520:	2202      	movs	r2, #2
 8005522:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	440a      	add	r2, r1
 800553a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800553e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005542:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	0151      	lsls	r1, r2, #5
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	440a      	add	r2, r1
 800555a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800555e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005562:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	440a      	add	r2, r1
 800557a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800557e:	f023 0320 	bic.w	r3, r3, #32
 8005582:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005584:	78fa      	ldrb	r2, [r7, #3]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	3326      	adds	r3, #38	@ 0x26
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800559a:	78fa      	ldrb	r2, [r7, #3]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3326      	adds	r3, #38	@ 0x26
 80055aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f040 80a9 	bne.w	8005704 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055de:	461a      	mov	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e08e      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80055e6:	78fa      	ldrb	r2, [r7, #3]
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	334d      	adds	r3, #77	@ 0x4d
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b04      	cmp	r3, #4
 80055fa:	d143      	bne.n	8005684 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4613      	mov	r3, r2
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	334d      	adds	r3, #77	@ 0x4d
 800560c:	2202      	movs	r2, #2
 800560e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	440b      	add	r3, r1
 800561e:	334c      	adds	r3, #76	@ 0x4c
 8005620:	2202      	movs	r2, #2
 8005622:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	3326      	adds	r3, #38	@ 0x26
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800563a:	78fa      	ldrb	r2, [r7, #3]
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	4613      	mov	r3, r2
 8005640:	011b      	lsls	r3, r3, #4
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	440b      	add	r3, r1
 8005648:	3326      	adds	r3, #38	@ 0x26
 800564a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800564c:	2b02      	cmp	r3, #2
 800564e:	d159      	bne.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005666:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800566e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800567c:	461a      	mov	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e03f      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	334d      	adds	r3, #77	@ 0x4d
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b08      	cmp	r3, #8
 8005698:	d126      	bne.n	80056e8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334d      	adds	r3, #77	@ 0x4d
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	3344      	adds	r3, #68	@ 0x44
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4403      	add	r3, r0
 80056ce:	3344      	adds	r3, #68	@ 0x44
 80056d0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80056d2:	78fa      	ldrb	r2, [r7, #3]
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	4613      	mov	r3, r2
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	334c      	adds	r3, #76	@ 0x4c
 80056e2:	2204      	movs	r2, #4
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e00d      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	334d      	adds	r3, #77	@ 0x4d
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	f000 8100 	beq.w	8005900 <HCD_HC_IN_IRQHandler+0xcca>
 8005700:	e000      	b.n	8005704 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005702:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005704:	78fa      	ldrb	r2, [r7, #3]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	334c      	adds	r3, #76	@ 0x4c
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f00b fdcc 	bl	80112b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005720:	e0ef      	b.n	8005902 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	4611      	mov	r1, r2
 800572a:	4618      	mov	r0, r3
 800572c:	f004 f859 	bl	80097e2 <USB_ReadChInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005736:	2b40      	cmp	r3, #64	@ 0x40
 8005738:	d12f      	bne.n	800579a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4413      	add	r3, r2
 8005742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005746:	461a      	mov	r2, r3
 8005748:	2340      	movs	r3, #64	@ 0x40
 800574a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	334d      	adds	r3, #77	@ 0x4d
 800575c:	2205      	movs	r2, #5
 800575e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005760:	78fa      	ldrb	r2, [r7, #3]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	331a      	adds	r3, #26
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	3344      	adds	r3, #68	@ 0x44
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	4611      	mov	r1, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f004 fdcf 	bl	800a336 <USB_HC_Halt>
 8005798:	e0b3      	b.n	8005902 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f004 f81d 	bl	80097e2 <USB_ReadChInterrupts>
 80057a8:	4603      	mov	r3, r0
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b10      	cmp	r3, #16
 80057b0:	f040 80a7 	bne.w	8005902 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	3326      	adds	r3, #38	@ 0x26
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d11b      	bne.n	8005802 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3344      	adds	r3, #68	@ 0x44
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	4613      	mov	r3, r2
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	1a9b      	subs	r3, r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	334d      	adds	r3, #77	@ 0x4d
 80057ee:	2204      	movs	r2, #4
 80057f0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	78fa      	ldrb	r2, [r7, #3]
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f004 fd9b 	bl	800a336 <USB_HC_Halt>
 8005800:	e03f      	b.n	8005882 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	4613      	mov	r3, r2
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	3326      	adds	r3, #38	@ 0x26
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	3326      	adds	r3, #38	@ 0x26
 8005828:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800582a:	2b02      	cmp	r3, #2
 800582c:	d129      	bne.n	8005882 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	3344      	adds	r3, #68	@ 0x44
 800583e:	2200      	movs	r2, #0
 8005840:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	799b      	ldrb	r3, [r3, #6]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HCD_HC_IN_IRQHandler+0xc2a>
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	331b      	adds	r3, #27
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d110      	bne.n	8005882 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	334d      	adds	r3, #77	@ 0x4d
 8005870:	2204      	movs	r2, #4
 8005872:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f004 fd5a 	bl	800a336 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005882:	78fa      	ldrb	r2, [r7, #3]
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	4613      	mov	r3, r2
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	331b      	adds	r3, #27
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d129      	bne.n	80058ec <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	331b      	adds	r3, #27
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ca:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058e6:	f043 0320 	orr.w	r3, r3, #32
 80058ea:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f8:	461a      	mov	r2, r3
 80058fa:	2310      	movs	r3, #16
 80058fc:	6093      	str	r3, [r2, #8]
 80058fe:	e000      	b.n	8005902 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005900:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005902:	3718      	adds	r7, #24
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f003 ff5b 	bl	80097e2 <USB_ReadChInterrupts>
 800592c:	4603      	mov	r3, r0
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d11b      	bne.n	800596e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005942:	461a      	mov	r2, r3
 8005944:	2304      	movs	r3, #4
 8005946:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	334d      	adds	r3, #77	@ 0x4d
 8005958:	2207      	movs	r2, #7
 800595a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f004 fce6 	bl	800a336 <USB_HC_Halt>
 800596a:	f000 bc89 	b.w	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	4611      	mov	r1, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f003 ff33 	bl	80097e2 <USB_ReadChInterrupts>
 800597c:	4603      	mov	r3, r0
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b20      	cmp	r3, #32
 8005984:	f040 8082 	bne.w	8005a8c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005994:	461a      	mov	r2, r3
 8005996:	2320      	movs	r3, #32
 8005998:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800599a:	78fa      	ldrb	r2, [r7, #3]
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	3319      	adds	r3, #25
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d124      	bne.n	80059fa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	3319      	adds	r3, #25
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	334c      	adds	r3, #76	@ 0x4c
 80059d4:	2202      	movs	r2, #2
 80059d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	334d      	adds	r3, #77	@ 0x4d
 80059e8:	2203      	movs	r2, #3
 80059ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	78fa      	ldrb	r2, [r7, #3]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f004 fc9e 	bl	800a336 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	331a      	adds	r3, #26
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f040 8437 	bne.w	8006280 <HCD_HC_OUT_IRQHandler+0x978>
 8005a12:	78fa      	ldrb	r2, [r7, #3]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	331b      	adds	r3, #27
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f040 842b 	bne.w	8006280 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3326      	adds	r3, #38	@ 0x26
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d009      	beq.n	8005a54 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a40:	78fa      	ldrb	r2, [r7, #3]
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	4613      	mov	r3, r2
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	331b      	adds	r3, #27
 8005a50:	2201      	movs	r2, #1
 8005a52:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	334d      	adds	r3, #77	@ 0x4d
 8005a64:	2203      	movs	r2, #3
 8005a66:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	78fa      	ldrb	r2, [r7, #3]
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f004 fc60 	bl	800a336 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	3344      	adds	r3, #68	@ 0x44
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e3f9      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f003 fea4 	bl	80097e2 <USB_ReadChInterrupts>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa4:	d111      	bne.n	8005aca <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ab8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f004 fc37 	bl	800a336 <USB_HC_Halt>
 8005ac8:	e3da      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f003 fe85 	bl	80097e2 <USB_ReadChInterrupts>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d168      	bne.n	8005bb4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	3344      	adds	r3, #68	@ 0x44
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	78fa      	ldrb	r2, [r7, #3]
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f003 fe6f 	bl	80097e2 <USB_ReadChInterrupts>
 8005b04:	4603      	mov	r3, r0
 8005b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0a:	2b40      	cmp	r3, #64	@ 0x40
 8005b0c:	d112      	bne.n	8005b34 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	6879      	ldr	r1, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	3319      	adds	r3, #25
 8005b1e:	2201      	movs	r2, #1
 8005b20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005b22:	78fb      	ldrb	r3, [r7, #3]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2e:	461a      	mov	r2, r3
 8005b30:	2340      	movs	r3, #64	@ 0x40
 8005b32:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005b34:	78fa      	ldrb	r2, [r7, #3]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	331b      	adds	r3, #27
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d019      	beq.n	8005b7e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b4a:	78fa      	ldrb	r2, [r7, #3]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	331b      	adds	r3, #27
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	78fa      	ldrb	r2, [r7, #3]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b7c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005b90:	78fa      	ldrb	r2, [r7, #3]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	1a9b      	subs	r3, r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	334d      	adds	r3, #77	@ 0x4d
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	4611      	mov	r1, r2
 8005bac:	4618      	mov	r0, r3
 8005bae:	f004 fbc2 	bl	800a336 <USB_HC_Halt>
 8005bb2:	e365      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	78fa      	ldrb	r2, [r7, #3]
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f003 fe10 	bl	80097e2 <USB_ReadChInterrupts>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b40      	cmp	r3, #64	@ 0x40
 8005bca:	d139      	bne.n	8005c40 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005bcc:	78fa      	ldrb	r2, [r7, #3]
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	334d      	adds	r3, #77	@ 0x4d
 8005bdc:	2205      	movs	r2, #5
 8005bde:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005be0:	78fa      	ldrb	r2, [r7, #3]
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	331a      	adds	r3, #26
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3319      	adds	r3, #25
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	4613      	mov	r3, r2
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	440b      	add	r3, r1
 8005c18:	3344      	adds	r3, #68	@ 0x44
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f004 fb85 	bl	800a336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2340      	movs	r3, #64	@ 0x40
 8005c3c:	6093      	str	r3, [r2, #8]
 8005c3e:	e31f      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	4611      	mov	r1, r2
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f003 fdca 	bl	80097e2 <USB_ReadChInterrupts>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d11a      	bne.n	8005c8e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c64:	461a      	mov	r2, r3
 8005c66:	2308      	movs	r3, #8
 8005c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	334d      	adds	r3, #77	@ 0x4d
 8005c7a:	2206      	movs	r2, #6
 8005c7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f004 fb55 	bl	800a336 <USB_HC_Halt>
 8005c8c:	e2f8      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f003 fda3 	bl	80097e2 <USB_ReadChInterrupts>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d144      	bne.n	8005d30 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3344      	adds	r3, #68	@ 0x44
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	334d      	adds	r3, #77	@ 0x4d
 8005cca:	2204      	movs	r2, #4
 8005ccc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	1a9b      	subs	r3, r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	3319      	adds	r3, #25
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d114      	bne.n	8005d0e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	3318      	adds	r3, #24
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3319      	adds	r3, #25
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f004 fb0d 	bl	800a336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	6093      	str	r3, [r2, #8]
 8005d2e:	e2a7      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f003 fd52 	bl	80097e2 <USB_ReadChInterrupts>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d44:	2b80      	cmp	r3, #128	@ 0x80
 8005d46:	f040 8083 	bne.w	8005e50 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	799b      	ldrb	r3, [r3, #6]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d111      	bne.n	8005d76 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	334d      	adds	r3, #77	@ 0x4d
 8005d62:	2207      	movs	r2, #7
 8005d64:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f004 fae1 	bl	800a336 <USB_HC_Halt>
 8005d74:	e062      	b.n	8005e3c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005d76:	78fa      	ldrb	r2, [r7, #3]
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	011b      	lsls	r3, r3, #4
 8005d7e:	1a9b      	subs	r3, r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	440b      	add	r3, r1
 8005d84:	3344      	adds	r3, #68	@ 0x44
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4403      	add	r3, r0
 8005d96:	3344      	adds	r3, #68	@ 0x44
 8005d98:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005d9a:	78fa      	ldrb	r2, [r7, #3]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	011b      	lsls	r3, r3, #4
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3344      	adds	r3, #68	@ 0x44
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d922      	bls.n	8005df6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	6879      	ldr	r1, [r7, #4]
 8005db4:	4613      	mov	r3, r2
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	3344      	adds	r3, #68	@ 0x44
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	6879      	ldr	r1, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	440b      	add	r3, r1
 8005dd2:	334c      	adds	r3, #76	@ 0x4c
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005dd8:	78fa      	ldrb	r2, [r7, #3]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	334c      	adds	r3, #76	@ 0x4c
 8005de8:	781a      	ldrb	r2, [r3, #0]
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f00b fa62 	bl	80112b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005df4:	e022      	b.n	8005e3c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	334c      	adds	r3, #76	@ 0x4c
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e20:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e28:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e36:	461a      	mov	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2380      	movs	r3, #128	@ 0x80
 8005e4c:	6093      	str	r3, [r2, #8]
 8005e4e:	e217      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f003 fcc2 	bl	80097e2 <USB_ReadChInterrupts>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e68:	d11b      	bne.n	8005ea2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	334d      	adds	r3, #77	@ 0x4d
 8005e7a:	2209      	movs	r2, #9
 8005e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f004 fa55 	bl	800a336 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e9e:	6093      	str	r3, [r2, #8]
 8005ea0:	e1ee      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f003 fc99 	bl	80097e2 <USB_ReadChInterrupts>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	f040 81df 	bne.w	800627a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2302      	movs	r3, #2
 8005ecc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	334d      	adds	r3, #77	@ 0x4d
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	f040 8093 	bne.w	800600c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ee6:	78fa      	ldrb	r2, [r7, #3]
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	334d      	adds	r3, #77	@ 0x4d
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005efa:	78fa      	ldrb	r2, [r7, #3]
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	011b      	lsls	r3, r3, #4
 8005f02:	1a9b      	subs	r3, r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	440b      	add	r3, r1
 8005f08:	334c      	adds	r3, #76	@ 0x4c
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	6879      	ldr	r1, [r7, #4]
 8005f12:	4613      	mov	r3, r2
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3326      	adds	r3, #38	@ 0x26
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d00b      	beq.n	8005f3c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005f24:	78fa      	ldrb	r2, [r7, #3]
 8005f26:	6879      	ldr	r1, [r7, #4]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	1a9b      	subs	r3, r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	3326      	adds	r3, #38	@ 0x26
 8005f34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	f040 8190 	bne.w	800625c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	799b      	ldrb	r3, [r3, #6]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d115      	bne.n	8005f70 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005f44:	78fa      	ldrb	r2, [r7, #3]
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	440b      	add	r3, r1
 8005f52:	333d      	adds	r3, #61	@ 0x3d
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	f083 0301 	eor.w	r3, r3, #1
 8005f5c:	b2d8      	uxtb	r0, r3
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	333d      	adds	r3, #61	@ 0x3d
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	799b      	ldrb	r3, [r3, #6]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f040 8171 	bne.w	800625c <HCD_HC_OUT_IRQHandler+0x954>
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	3334      	adds	r3, #52	@ 0x34
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f000 8165 	beq.w	800625c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	1a9b      	subs	r3, r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3334      	adds	r3, #52	@ 0x34
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4403      	add	r3, r0
 8005fb2:	3328      	adds	r3, #40	@ 0x28
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	440b      	add	r3, r1
 8005fb8:	1e59      	subs	r1, r3, #1
 8005fba:	78fa      	ldrb	r2, [r7, #3]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4403      	add	r3, r0
 8005fc8:	3328      	adds	r3, #40	@ 0x28
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fd0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 813f 	beq.w	800625c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005fde:	78fa      	ldrb	r2, [r7, #3]
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	333d      	adds	r3, #61	@ 0x3d
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	f083 0301 	eor.w	r3, r3, #1
 8005ff6:	b2d8      	uxtb	r0, r3
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	333d      	adds	r3, #61	@ 0x3d
 8006006:	4602      	mov	r2, r0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e127      	b.n	800625c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	334d      	adds	r3, #77	@ 0x4d
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d120      	bne.n	8006064 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	334d      	adds	r3, #77	@ 0x4d
 8006032:	2202      	movs	r2, #2
 8006034:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	331b      	adds	r3, #27
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 8107 	bne.w	800625c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	334c      	adds	r3, #76	@ 0x4c
 800605e:	2202      	movs	r2, #2
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	e0fb      	b.n	800625c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006064:	78fa      	ldrb	r2, [r7, #3]
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4613      	mov	r3, r2
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	334d      	adds	r3, #77	@ 0x4d
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d13a      	bne.n	80060f0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	334d      	adds	r3, #77	@ 0x4d
 800608a:	2202      	movs	r2, #2
 800608c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	334c      	adds	r3, #76	@ 0x4c
 800609e:	2202      	movs	r2, #2
 80060a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	331b      	adds	r3, #27
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	f040 80d1 	bne.w	800625c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80060ba:	78fa      	ldrb	r2, [r7, #3]
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	4613      	mov	r3, r2
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	440b      	add	r3, r1
 80060c8:	331b      	adds	r3, #27
 80060ca:	2200      	movs	r2, #0
 80060cc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ec:	6053      	str	r3, [r2, #4]
 80060ee:	e0b5      	b.n	800625c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	6879      	ldr	r1, [r7, #4]
 80060f4:	4613      	mov	r3, r2
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	1a9b      	subs	r3, r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	334d      	adds	r3, #77	@ 0x4d
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b05      	cmp	r3, #5
 8006104:	d114      	bne.n	8006130 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	334d      	adds	r3, #77	@ 0x4d
 8006116:	2202      	movs	r2, #2
 8006118:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	440b      	add	r3, r1
 8006128:	334c      	adds	r3, #76	@ 0x4c
 800612a:	2202      	movs	r2, #2
 800612c:	701a      	strb	r2, [r3, #0]
 800612e:	e095      	b.n	800625c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006130:	78fa      	ldrb	r2, [r7, #3]
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	4613      	mov	r3, r2
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	1a9b      	subs	r3, r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	334d      	adds	r3, #77	@ 0x4d
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d114      	bne.n	8006170 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006146:	78fa      	ldrb	r2, [r7, #3]
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	334d      	adds	r3, #77	@ 0x4d
 8006156:	2202      	movs	r2, #2
 8006158:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800615a:	78fa      	ldrb	r2, [r7, #3]
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	1a9b      	subs	r3, r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	440b      	add	r3, r1
 8006168:	334c      	adds	r3, #76	@ 0x4c
 800616a:	2205      	movs	r2, #5
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	e075      	b.n	800625c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006170:	78fa      	ldrb	r2, [r7, #3]
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	1a9b      	subs	r3, r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	334d      	adds	r3, #77	@ 0x4d
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b07      	cmp	r3, #7
 8006184:	d00a      	beq.n	800619c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	334d      	adds	r3, #77	@ 0x4d
 8006196:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006198:	2b09      	cmp	r3, #9
 800619a:	d170      	bne.n	800627e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	334d      	adds	r3, #77	@ 0x4d
 80061ac:	2202      	movs	r2, #2
 80061ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80061b0:	78fa      	ldrb	r2, [r7, #3]
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	1a9b      	subs	r3, r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	3344      	adds	r3, #68	@ 0x44
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4403      	add	r3, r0
 80061d0:	3344      	adds	r3, #68	@ 0x44
 80061d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80061d4:	78fa      	ldrb	r2, [r7, #3]
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	4613      	mov	r3, r2
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	440b      	add	r3, r1
 80061e2:	3344      	adds	r3, #68	@ 0x44
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d914      	bls.n	8006214 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	6879      	ldr	r1, [r7, #4]
 80061ee:	4613      	mov	r3, r2
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	3344      	adds	r3, #68	@ 0x44
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4613      	mov	r3, r2
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	1a9b      	subs	r3, r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	440b      	add	r3, r1
 800620c:	334c      	adds	r3, #76	@ 0x4c
 800620e:	2204      	movs	r2, #4
 8006210:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006212:	e022      	b.n	800625a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	4613      	mov	r3, r2
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	334c      	adds	r3, #76	@ 0x4c
 8006224:	2202      	movs	r2, #2
 8006226:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800623e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006246:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006254:	461a      	mov	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800625a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800625c:	78fa      	ldrb	r2, [r7, #3]
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4613      	mov	r3, r2
 8006262:	011b      	lsls	r3, r3, #4
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	334c      	adds	r3, #76	@ 0x4c
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	4619      	mov	r1, r3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f00b f820 	bl	80112b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006278:	e002      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800627e:	bf00      	nop
  }
}
 8006280:	3718      	adds	r7, #24
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b08a      	sub	sp, #40	@ 0x28
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006296:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	0c5b      	lsrs	r3, r3, #17
 80062ac:	f003 030f 	and.w	r3, r3, #15
 80062b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d004      	beq.n	80062cc <HCD_RXQLVL_IRQHandler+0x46>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	f000 80b6 	beq.w	8006436 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062ca:	e0b7      	b.n	800643c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80b3 	beq.w	800643a <HCD_RXQLVL_IRQHandler+0x1b4>
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4613      	mov	r3, r2
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	332c      	adds	r3, #44	@ 0x2c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80a7 	beq.w	800643a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	3338      	adds	r3, #56	@ 0x38
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	18d1      	adds	r1, r2, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4613      	mov	r3, r2
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4403      	add	r3, r0
 8006310:	3334      	adds	r3, #52	@ 0x34
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4299      	cmp	r1, r3
 8006316:	f200 8083 	bhi.w	8006420 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	4613      	mov	r3, r2
 8006324:	011b      	lsls	r3, r3, #4
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	332c      	adds	r3, #44	@ 0x2c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	b292      	uxth	r2, r2
 8006334:	4619      	mov	r1, r3
 8006336:	f003 f9e9 	bl	800970c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4613      	mov	r3, r2
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	1a9b      	subs	r3, r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	440b      	add	r3, r1
 8006348:	332c      	adds	r3, #44	@ 0x2c
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	18d1      	adds	r1, r2, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4613      	mov	r3, r2
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4403      	add	r3, r0
 800635e:	332c      	adds	r3, #44	@ 0x2c
 8006360:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006362:	6879      	ldr	r1, [r7, #4]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4613      	mov	r3, r2
 8006368:	011b      	lsls	r3, r3, #4
 800636a:	1a9b      	subs	r3, r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	3338      	adds	r3, #56	@ 0x38
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	18d1      	adds	r1, r2, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4613      	mov	r3, r2
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4403      	add	r3, r0
 8006386:	3338      	adds	r3, #56	@ 0x38
 8006388:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	0cdb      	lsrs	r3, r3, #19
 800639a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	4613      	mov	r3, r2
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	3328      	adds	r3, #40	@ 0x28
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d13f      	bne.n	800643a <HCD_RXQLVL_IRQHandler+0x1b4>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d03c      	beq.n	800643a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063de:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4613      	mov	r3, r2
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	1a9b      	subs	r3, r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	333c      	adds	r3, #60	@ 0x3c
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	f083 0301 	eor.w	r3, r3, #1
 8006408:	b2d8      	uxtb	r0, r3
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4613      	mov	r3, r2
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	333c      	adds	r3, #60	@ 0x3c
 800641a:	4602      	mov	r2, r0
 800641c:	701a      	strb	r2, [r3, #0]
      break;
 800641e:	e00c      	b.n	800643a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4613      	mov	r3, r2
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	334c      	adds	r3, #76	@ 0x4c
 8006430:	2204      	movs	r2, #4
 8006432:	701a      	strb	r2, [r3, #0]
      break;
 8006434:	e001      	b.n	800643a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006436:	bf00      	nop
 8006438:	e000      	b.n	800643c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800643a:	bf00      	nop
  }
}
 800643c:	bf00      	nop
 800643e:	3728      	adds	r7, #40	@ 0x28
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006470:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d10b      	bne.n	8006494 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b01      	cmp	r3, #1
 8006484:	d102      	bne.n	800648c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f00a fefa 	bl	8011280 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f043 0302 	orr.w	r3, r3, #2
 8006492:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b08      	cmp	r3, #8
 800649c:	d132      	bne.n	8006504 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d126      	bne.n	80064fe <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	7a5b      	ldrb	r3, [r3, #9]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d113      	bne.n	80064e0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80064be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064c2:	d106      	bne.n	80064d2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2102      	movs	r1, #2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f003 fab4 	bl	8009a38 <USB_InitFSLSPClkSel>
 80064d0:	e011      	b.n	80064f6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2101      	movs	r1, #1
 80064d8:	4618      	mov	r0, r3
 80064da:	f003 faad 	bl	8009a38 <USB_InitFSLSPClkSel>
 80064de:	e00a      	b.n	80064f6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	79db      	ldrb	r3, [r3, #7]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d106      	bne.n	80064f6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064ee:	461a      	mov	r2, r3
 80064f0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80064f4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f00a fef0 	bl	80112dc <HAL_HCD_PortEnabled_Callback>
 80064fc:	e002      	b.n	8006504 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f00a fefa 	bl	80112f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f003 0320 	and.w	r3, r3, #32
 800650a:	2b20      	cmp	r3, #32
 800650c:	d103      	bne.n	8006516 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f043 0320 	orr.w	r3, r3, #32
 8006514:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800651c:	461a      	mov	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6013      	str	r3, [r2, #0]
}
 8006522:	bf00      	nop
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e12b      	b.n	8006796 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fc ff4a 	bl	80033ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	@ 0x24
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0201 	bic.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800657e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800658e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006590:	f001 fa20 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 8006594:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	4a81      	ldr	r2, [pc, #516]	@ (80067a0 <HAL_I2C_Init+0x274>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d807      	bhi.n	80065b0 <HAL_I2C_Init+0x84>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a80      	ldr	r2, [pc, #512]	@ (80067a4 <HAL_I2C_Init+0x278>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	bf94      	ite	ls
 80065a8:	2301      	movls	r3, #1
 80065aa:	2300      	movhi	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e006      	b.n	80065be <HAL_I2C_Init+0x92>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4a7d      	ldr	r2, [pc, #500]	@ (80067a8 <HAL_I2C_Init+0x27c>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	bf94      	ite	ls
 80065b8:	2301      	movls	r3, #1
 80065ba:	2300      	movhi	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e0e7      	b.n	8006796 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a78      	ldr	r2, [pc, #480]	@ (80067ac <HAL_I2C_Init+0x280>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0c9b      	lsrs	r3, r3, #18
 80065d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4a6a      	ldr	r2, [pc, #424]	@ (80067a0 <HAL_I2C_Init+0x274>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d802      	bhi.n	8006600 <HAL_I2C_Init+0xd4>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	3301      	adds	r3, #1
 80065fe:	e009      	b.n	8006614 <HAL_I2C_Init+0xe8>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	4a69      	ldr	r2, [pc, #420]	@ (80067b0 <HAL_I2C_Init+0x284>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	099b      	lsrs	r3, r3, #6
 8006612:	3301      	adds	r3, #1
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	430b      	orrs	r3, r1
 800661a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006626:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	495c      	ldr	r1, [pc, #368]	@ (80067a0 <HAL_I2C_Init+0x274>)
 8006630:	428b      	cmp	r3, r1
 8006632:	d819      	bhi.n	8006668 <HAL_I2C_Init+0x13c>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1e59      	subs	r1, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006648:	400b      	ands	r3, r1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <HAL_I2C_Init+0x138>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1e59      	subs	r1, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	fbb1 f3f3 	udiv	r3, r1, r3
 800665c:	3301      	adds	r3, #1
 800665e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006662:	e051      	b.n	8006708 <HAL_I2C_Init+0x1dc>
 8006664:	2304      	movs	r3, #4
 8006666:	e04f      	b.n	8006708 <HAL_I2C_Init+0x1dc>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d111      	bne.n	8006694 <HAL_I2C_Init+0x168>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1e58      	subs	r0, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6859      	ldr	r1, [r3, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	440b      	add	r3, r1
 800667e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006682:	3301      	adds	r3, #1
 8006684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006688:	2b00      	cmp	r3, #0
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	e012      	b.n	80066ba <HAL_I2C_Init+0x18e>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1e58      	subs	r0, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6859      	ldr	r1, [r3, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	0099      	lsls	r1, r3, #2
 80066a4:	440b      	add	r3, r1
 80066a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066aa:	3301      	adds	r3, #1
 80066ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_I2C_Init+0x196>
 80066be:	2301      	movs	r3, #1
 80066c0:	e022      	b.n	8006708 <HAL_I2C_Init+0x1dc>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10e      	bne.n	80066e8 <HAL_I2C_Init+0x1bc>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1e58      	subs	r0, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6859      	ldr	r1, [r3, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	440b      	add	r3, r1
 80066d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80066dc:	3301      	adds	r3, #1
 80066de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e6:	e00f      	b.n	8006708 <HAL_I2C_Init+0x1dc>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	1e58      	subs	r0, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6859      	ldr	r1, [r3, #4]
 80066f0:	460b      	mov	r3, r1
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	0099      	lsls	r1, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80066fe:	3301      	adds	r3, #1
 8006700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006704:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	6809      	ldr	r1, [r1, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69da      	ldr	r2, [r3, #28]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006736:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6911      	ldr	r1, [r2, #16]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	68d2      	ldr	r2, [r2, #12]
 8006742:	4311      	orrs	r1, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6812      	ldr	r2, [r2, #0]
 8006748:	430b      	orrs	r3, r1
 800674a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0201 	orr.w	r2, r2, #1
 8006776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	000186a0 	.word	0x000186a0
 80067a4:	001e847f 	.word	0x001e847f
 80067a8:	003d08ff 	.word	0x003d08ff
 80067ac:	431bde83 	.word	0x431bde83
 80067b0:	10624dd3 	.word	0x10624dd3

080067b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e128      	b.n	8006a18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a90      	ldr	r2, [pc, #576]	@ (8006a20 <HAL_I2S_Init+0x26c>)
 80067de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7fc fe4b 	bl	800347c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2202      	movs	r2, #2
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80067fc:	f023 030f 	bic.w	r3, r3, #15
 8006800:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2202      	movs	r2, #2
 8006808:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d060      	beq.n	80068d4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d102      	bne.n	8006820 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800681a:	2310      	movs	r3, #16
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	e001      	b.n	8006824 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006820:	2320      	movs	r3, #32
 8006822:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b20      	cmp	r3, #32
 800682a:	d802      	bhi.n	8006832 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006832:	2001      	movs	r0, #1
 8006834:	f001 fa0a 	bl	8007c4c <HAL_RCCEx_GetPeriphCLKFreq>
 8006838:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006842:	d125      	bne.n	8006890 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d010      	beq.n	800686e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	fbb2 f2f3 	udiv	r2, r2, r3
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	3305      	adds	r3, #5
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	e01f      	b.n	80068ae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	fbb2 f2f3 	udiv	r2, r2, r3
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	fbb2 f3f3 	udiv	r3, r2, r3
 800688a:	3305      	adds	r3, #5
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	e00e      	b.n	80068ae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	fbb2 f2f3 	udiv	r2, r2, r3
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	461a      	mov	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068aa:	3305      	adds	r3, #5
 80068ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	4a5c      	ldr	r2, [pc, #368]	@ (8006a24 <HAL_I2S_Init+0x270>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	08db      	lsrs	r3, r3, #3
 80068b8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	e003      	b.n	80068dc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80068d4:	2302      	movs	r3, #2
 80068d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d902      	bls.n	80068e8 <HAL_I2S_Init+0x134>
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	2bff      	cmp	r3, #255	@ 0xff
 80068e6:	d907      	bls.n	80068f8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ec:	f043 0210 	orr.w	r2, r3, #16
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e08f      	b.n	8006a18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	ea42 0103 	orr.w	r1, r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	430a      	orrs	r2, r1
 800690a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006916:	f023 030f 	bic.w	r3, r3, #15
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6851      	ldr	r1, [r2, #4]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6892      	ldr	r2, [r2, #8]
 8006922:	4311      	orrs	r1, r2
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	68d2      	ldr	r2, [r2, #12]
 8006928:	4311      	orrs	r1, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6992      	ldr	r2, [r2, #24]
 800692e:	430a      	orrs	r2, r1
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800693a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d161      	bne.n	8006a08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a38      	ldr	r2, [pc, #224]	@ (8006a28 <HAL_I2S_Init+0x274>)
 8006948:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a37      	ldr	r2, [pc, #220]	@ (8006a2c <HAL_I2S_Init+0x278>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d101      	bne.n	8006958 <HAL_I2S_Init+0x1a4>
 8006954:	4b36      	ldr	r3, [pc, #216]	@ (8006a30 <HAL_I2S_Init+0x27c>)
 8006956:	e001      	b.n	800695c <HAL_I2S_Init+0x1a8>
 8006958:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6812      	ldr	r2, [r2, #0]
 8006962:	4932      	ldr	r1, [pc, #200]	@ (8006a2c <HAL_I2S_Init+0x278>)
 8006964:	428a      	cmp	r2, r1
 8006966:	d101      	bne.n	800696c <HAL_I2S_Init+0x1b8>
 8006968:	4a31      	ldr	r2, [pc, #196]	@ (8006a30 <HAL_I2S_Init+0x27c>)
 800696a:	e001      	b.n	8006970 <HAL_I2S_Init+0x1bc>
 800696c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006970:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006974:	f023 030f 	bic.w	r3, r3, #15
 8006978:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2b      	ldr	r2, [pc, #172]	@ (8006a2c <HAL_I2S_Init+0x278>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d101      	bne.n	8006988 <HAL_I2S_Init+0x1d4>
 8006984:	4b2a      	ldr	r3, [pc, #168]	@ (8006a30 <HAL_I2S_Init+0x27c>)
 8006986:	e001      	b.n	800698c <HAL_I2S_Init+0x1d8>
 8006988:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800698c:	2202      	movs	r2, #2
 800698e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a25      	ldr	r2, [pc, #148]	@ (8006a2c <HAL_I2S_Init+0x278>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d101      	bne.n	800699e <HAL_I2S_Init+0x1ea>
 800699a:	4b25      	ldr	r3, [pc, #148]	@ (8006a30 <HAL_I2S_Init+0x27c>)
 800699c:	e001      	b.n	80069a2 <HAL_I2S_Init+0x1ee>
 800699e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ae:	d003      	beq.n	80069b8 <HAL_I2S_Init+0x204>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80069b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	e001      	b.n	80069c4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069ce:	4313      	orrs	r3, r2
 80069d0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069d8:	4313      	orrs	r3, r2
 80069da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80069f0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a0d      	ldr	r2, [pc, #52]	@ (8006a2c <HAL_I2S_Init+0x278>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d101      	bne.n	8006a00 <HAL_I2S_Init+0x24c>
 80069fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006a30 <HAL_I2S_Init+0x27c>)
 80069fe:	e001      	b.n	8006a04 <HAL_I2S_Init+0x250>
 8006a00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a04:	897a      	ldrh	r2, [r7, #10]
 8006a06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	08006b2b 	.word	0x08006b2b
 8006a24:	cccccccd 	.word	0xcccccccd
 8006a28:	08006c41 	.word	0x08006c41
 8006a2c:	40003800 	.word	0x40003800
 8006a30:	40003400 	.word	0x40003400

08006a34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7c:	881a      	ldrh	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a88:	1c9a      	adds	r2, r3, #2
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10e      	bne.n	8006ac4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ab4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff ffb8 	bl	8006a34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ade:	b292      	uxth	r2, r2
 8006ae0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae6:	1c9a      	adds	r2, r3, #2
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10e      	bne.n	8006b22 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff93 	bl	8006a48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d13a      	bne.n	8006bbc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d109      	bne.n	8006b64 <I2S_IRQHandler+0x3a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5a:	2b40      	cmp	r3, #64	@ 0x40
 8006b5c:	d102      	bne.n	8006b64 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff ffb4 	bl	8006acc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6a:	2b40      	cmp	r3, #64	@ 0x40
 8006b6c:	d126      	bne.n	8006bbc <I2S_IRQHandler+0x92>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b20      	cmp	r3, #32
 8006b7a:	d11f      	bne.n	8006bbc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff ff50 	bl	8006a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d136      	bne.n	8006c36 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d109      	bne.n	8006be6 <I2S_IRQHandler+0xbc>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bdc:	2b80      	cmp	r3, #128	@ 0x80
 8006bde:	d102      	bne.n	8006be6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff ff45 	bl	8006a70 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d122      	bne.n	8006c36 <I2S_IRQHandler+0x10c>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d11b      	bne.n	8006c36 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c0c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c28:	f043 0204 	orr.w	r2, r3, #4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7ff ff13 	bl	8006a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c36:	bf00      	nop
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a92      	ldr	r2, [pc, #584]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006c5a:	4b92      	ldr	r3, [pc, #584]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c5c:	e001      	b.n	8006c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006c5e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a8b      	ldr	r2, [pc, #556]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d101      	bne.n	8006c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006c78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c7a:	e001      	b.n	8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c8c:	d004      	beq.n	8006c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f040 8099 	bne.w	8006dca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d107      	bne.n	8006cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f925 	bl	8006efc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9c8 	bl	800705c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd2:	2b40      	cmp	r3, #64	@ 0x40
 8006cd4:	d13a      	bne.n	8006d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d035      	beq.n	8006d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6e      	ldr	r2, [pc, #440]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006cea:	4b6e      	ldr	r3, [pc, #440]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cec:	e001      	b.n	8006cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006cee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4969      	ldr	r1, [pc, #420]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006cfa:	428b      	cmp	r3, r1
 8006cfc:	d101      	bne.n	8006d02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006cfe:	4b69      	ldr	r3, [pc, #420]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d00:	e001      	b.n	8006d06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006d02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	f043 0202 	orr.w	r2, r3, #2
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fe88 	bl	8006a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	f040 80c3 	bne.w	8006ede <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 80bd 	beq.w	8006ede <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a49      	ldr	r2, [pc, #292]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d101      	bne.n	8006d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006d7e:	4b49      	ldr	r3, [pc, #292]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d80:	e001      	b.n	8006d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4944      	ldr	r1, [pc, #272]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d8e:	428b      	cmp	r3, r1
 8006d90:	d101      	bne.n	8006d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006d92:	4b44      	ldr	r3, [pc, #272]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d94:	e001      	b.n	8006d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006d96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006da0:	2300      	movs	r3, #0
 8006da2:	60bb      	str	r3, [r7, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	f043 0204 	orr.w	r2, r3, #4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff fe4a 	bl	8006a5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006dc8:	e089      	b.n	8006ede <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d107      	bne.n	8006de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f8be 	bl	8006f60 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d107      	bne.n	8006dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f8fd 	bl	8006ff8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b40      	cmp	r3, #64	@ 0x40
 8006e06:	d12f      	bne.n	8006e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d02a      	beq.n	8006e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e20:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1e      	ldr	r2, [pc, #120]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d101      	bne.n	8006e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e2e:	e001      	b.n	8006e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006e30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4919      	ldr	r1, [pc, #100]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	d101      	bne.n	8006e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006e40:	4b18      	ldr	r3, [pc, #96]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e42:	e001      	b.n	8006e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006e44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e48:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e4c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5a:	f043 0202 	orr.w	r2, r3, #2
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff fdfa 	bl	8006a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d136      	bne.n	8006ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f003 0320 	and.w	r3, r3, #32
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d031      	beq.n	8006ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a07      	ldr	r2, [pc, #28]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d101      	bne.n	8006e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006e86:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e88:	e001      	b.n	8006e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006e8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4902      	ldr	r1, [pc, #8]	@ (8006ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e96:	428b      	cmp	r3, r1
 8006e98:	d106      	bne.n	8006ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006e9a:	4b02      	ldr	r3, [pc, #8]	@ (8006ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e9c:	e006      	b.n	8006eac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006e9e:	bf00      	nop
 8006ea0:	40003800 	.word	0x40003800
 8006ea4:	40003400 	.word	0x40003400
 8006ea8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006eac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006eb0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685a      	ldr	r2, [r3, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ec0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	f043 0204 	orr.w	r2, r3, #4
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff fdc0 	bl	8006a5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006edc:	e000      	b.n	8006ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ede:	bf00      	nop
}
 8006ee0:	bf00      	nop
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	1c99      	adds	r1, r3, #2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d113      	bne.n	8006f56 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f3c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d106      	bne.n	8006f56 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff ffc9 	bl	8006ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	1c99      	adds	r1, r3, #2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f72:	8819      	ldrh	r1, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff0 <I2SEx_TxISR_I2SExt+0x90>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <I2SEx_TxISR_I2SExt+0x22>
 8006f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff4 <I2SEx_TxISR_I2SExt+0x94>)
 8006f80:	e001      	b.n	8006f86 <I2SEx_TxISR_I2SExt+0x26>
 8006f82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006f86:	460a      	mov	r2, r1
 8006f88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d121      	bne.n	8006fe6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a12      	ldr	r2, [pc, #72]	@ (8006ff0 <I2SEx_TxISR_I2SExt+0x90>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <I2SEx_TxISR_I2SExt+0x50>
 8006fac:	4b11      	ldr	r3, [pc, #68]	@ (8006ff4 <I2SEx_TxISR_I2SExt+0x94>)
 8006fae:	e001      	b.n	8006fb4 <I2SEx_TxISR_I2SExt+0x54>
 8006fb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	490d      	ldr	r1, [pc, #52]	@ (8006ff0 <I2SEx_TxISR_I2SExt+0x90>)
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	d101      	bne.n	8006fc4 <I2SEx_TxISR_I2SExt+0x64>
 8006fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <I2SEx_TxISR_I2SExt+0x94>)
 8006fc2:	e001      	b.n	8006fc8 <I2SEx_TxISR_I2SExt+0x68>
 8006fc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff ff81 	bl	8006ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	40003800 	.word	0x40003800
 8006ff4:	40003400 	.word	0x40003400

08006ff8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68d8      	ldr	r0, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700a:	1c99      	adds	r1, r3, #2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007010:	b282      	uxth	r2, r0
 8007012:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007018:	b29b      	uxth	r3, r3
 800701a:	3b01      	subs	r3, #1
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007026:	b29b      	uxth	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d113      	bne.n	8007054 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800703a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff ff4a 	bl	8006ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a20      	ldr	r2, [pc, #128]	@ (80070ec <I2SEx_RxISR_I2SExt+0x90>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d101      	bne.n	8007072 <I2SEx_RxISR_I2SExt+0x16>
 800706e:	4b20      	ldr	r3, [pc, #128]	@ (80070f0 <I2SEx_RxISR_I2SExt+0x94>)
 8007070:	e001      	b.n	8007076 <I2SEx_RxISR_I2SExt+0x1a>
 8007072:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8007076:	68d8      	ldr	r0, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	1c99      	adds	r1, r3, #2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007082:	b282      	uxth	r2, r0
 8007084:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d121      	bne.n	80070e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a12      	ldr	r2, [pc, #72]	@ (80070ec <I2SEx_RxISR_I2SExt+0x90>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d101      	bne.n	80070ac <I2SEx_RxISR_I2SExt+0x50>
 80070a8:	4b11      	ldr	r3, [pc, #68]	@ (80070f0 <I2SEx_RxISR_I2SExt+0x94>)
 80070aa:	e001      	b.n	80070b0 <I2SEx_RxISR_I2SExt+0x54>
 80070ac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	490d      	ldr	r1, [pc, #52]	@ (80070ec <I2SEx_RxISR_I2SExt+0x90>)
 80070b8:	428b      	cmp	r3, r1
 80070ba:	d101      	bne.n	80070c0 <I2SEx_RxISR_I2SExt+0x64>
 80070bc:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <I2SEx_RxISR_I2SExt+0x94>)
 80070be:	e001      	b.n	80070c4 <I2SEx_RxISR_I2SExt+0x68>
 80070c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070c4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff ff03 	bl	8006ee8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40003800 	.word	0x40003800
 80070f0:	40003400 	.word	0x40003400

080070f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e267      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d075      	beq.n	80071fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007112:	4b88      	ldr	r3, [pc, #544]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 030c 	and.w	r3, r3, #12
 800711a:	2b04      	cmp	r3, #4
 800711c:	d00c      	beq.n	8007138 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800711e:	4b85      	ldr	r3, [pc, #532]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007126:	2b08      	cmp	r3, #8
 8007128:	d112      	bne.n	8007150 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800712a:	4b82      	ldr	r3, [pc, #520]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007136:	d10b      	bne.n	8007150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007138:	4b7e      	ldr	r3, [pc, #504]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d05b      	beq.n	80071fc <HAL_RCC_OscConfig+0x108>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d157      	bne.n	80071fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e242      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007158:	d106      	bne.n	8007168 <HAL_RCC_OscConfig+0x74>
 800715a:	4b76      	ldr	r3, [pc, #472]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a75      	ldr	r2, [pc, #468]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e01d      	b.n	80071a4 <HAL_RCC_OscConfig+0xb0>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007170:	d10c      	bne.n	800718c <HAL_RCC_OscConfig+0x98>
 8007172:	4b70      	ldr	r3, [pc, #448]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a6f      	ldr	r2, [pc, #444]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	4b6d      	ldr	r3, [pc, #436]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a6c      	ldr	r2, [pc, #432]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	e00b      	b.n	80071a4 <HAL_RCC_OscConfig+0xb0>
 800718c:	4b69      	ldr	r3, [pc, #420]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a68      	ldr	r2, [pc, #416]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	4b66      	ldr	r3, [pc, #408]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a65      	ldr	r2, [pc, #404]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800719e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d013      	beq.n	80071d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ac:	f7fc fcda 	bl	8003b64 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b4:	f7fc fcd6 	bl	8003b64 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b64      	cmp	r3, #100	@ 0x64
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e207      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c6:	4b5b      	ldr	r3, [pc, #364]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0xc0>
 80071d2:	e014      	b.n	80071fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071d4:	f7fc fcc6 	bl	8003b64 <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071da:	e008      	b.n	80071ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071dc:	f7fc fcc2 	bl	8003b64 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b64      	cmp	r3, #100	@ 0x64
 80071e8:	d901      	bls.n	80071ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e1f3      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ee:	4b51      	ldr	r3, [pc, #324]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f0      	bne.n	80071dc <HAL_RCC_OscConfig+0xe8>
 80071fa:	e000      	b.n	80071fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d063      	beq.n	80072d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800720a:	4b4a      	ldr	r3, [pc, #296]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 030c 	and.w	r3, r3, #12
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007216:	4b47      	ldr	r3, [pc, #284]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800721e:	2b08      	cmp	r3, #8
 8007220:	d11c      	bne.n	800725c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007222:	4b44      	ldr	r3, [pc, #272]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d116      	bne.n	800725c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800722e:	4b41      	ldr	r3, [pc, #260]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_RCC_OscConfig+0x152>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d001      	beq.n	8007246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e1c7      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007246:	4b3b      	ldr	r3, [pc, #236]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	4937      	ldr	r1, [pc, #220]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007256:	4313      	orrs	r3, r2
 8007258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800725a:	e03a      	b.n	80072d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d020      	beq.n	80072a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007264:	4b34      	ldr	r3, [pc, #208]	@ (8007338 <HAL_RCC_OscConfig+0x244>)
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726a:	f7fc fc7b 	bl	8003b64 <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007272:	f7fc fc77 	bl	8003b64 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e1a8      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007284:	4b2b      	ldr	r3, [pc, #172]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0f0      	beq.n	8007272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007290:	4b28      	ldr	r3, [pc, #160]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4925      	ldr	r1, [pc, #148]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	600b      	str	r3, [r1, #0]
 80072a4:	e015      	b.n	80072d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072a6:	4b24      	ldr	r3, [pc, #144]	@ (8007338 <HAL_RCC_OscConfig+0x244>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ac:	f7fc fc5a 	bl	8003b64 <HAL_GetTick>
 80072b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072b4:	f7fc fc56 	bl	8003b64 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e187      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1f0      	bne.n	80072b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d036      	beq.n	800734c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072e6:	4b15      	ldr	r3, [pc, #84]	@ (800733c <HAL_RCC_OscConfig+0x248>)
 80072e8:	2201      	movs	r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ec:	f7fc fc3a 	bl	8003b64 <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072f4:	f7fc fc36 	bl	8003b64 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e167      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007306:	4b0b      	ldr	r3, [pc, #44]	@ (8007334 <HAL_RCC_OscConfig+0x240>)
 8007308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f0      	beq.n	80072f4 <HAL_RCC_OscConfig+0x200>
 8007312:	e01b      	b.n	800734c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007314:	4b09      	ldr	r3, [pc, #36]	@ (800733c <HAL_RCC_OscConfig+0x248>)
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800731a:	f7fc fc23 	bl	8003b64 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007320:	e00e      	b.n	8007340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007322:	f7fc fc1f 	bl	8003b64 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d907      	bls.n	8007340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e150      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
 8007334:	40023800 	.word	0x40023800
 8007338:	42470000 	.word	0x42470000
 800733c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007340:	4b88      	ldr	r3, [pc, #544]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1ea      	bne.n	8007322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8097 	beq.w	8007488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800735a:	2300      	movs	r3, #0
 800735c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800735e:	4b81      	ldr	r3, [pc, #516]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10f      	bne.n	800738a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	4b7d      	ldr	r3, [pc, #500]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007372:	4a7c      	ldr	r2, [pc, #496]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007378:	6413      	str	r3, [r2, #64]	@ 0x40
 800737a:	4b7a      	ldr	r3, [pc, #488]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007382:	60bb      	str	r3, [r7, #8]
 8007384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007386:	2301      	movs	r3, #1
 8007388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800738a:	4b77      	ldr	r3, [pc, #476]	@ (8007568 <HAL_RCC_OscConfig+0x474>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d118      	bne.n	80073c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007396:	4b74      	ldr	r3, [pc, #464]	@ (8007568 <HAL_RCC_OscConfig+0x474>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a73      	ldr	r2, [pc, #460]	@ (8007568 <HAL_RCC_OscConfig+0x474>)
 800739c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073a2:	f7fc fbdf 	bl	8003b64 <HAL_GetTick>
 80073a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073a8:	e008      	b.n	80073bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073aa:	f7fc fbdb 	bl	8003b64 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d901      	bls.n	80073bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e10c      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007568 <HAL_RCC_OscConfig+0x474>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0f0      	beq.n	80073aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d106      	bne.n	80073de <HAL_RCC_OscConfig+0x2ea>
 80073d0:	4b64      	ldr	r3, [pc, #400]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80073d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d4:	4a63      	ldr	r2, [pc, #396]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	6713      	str	r3, [r2, #112]	@ 0x70
 80073dc:	e01c      	b.n	8007418 <HAL_RCC_OscConfig+0x324>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	d10c      	bne.n	8007400 <HAL_RCC_OscConfig+0x30c>
 80073e6:	4b5f      	ldr	r3, [pc, #380]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ea:	4a5e      	ldr	r2, [pc, #376]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80073ec:	f043 0304 	orr.w	r3, r3, #4
 80073f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f2:	4b5c      	ldr	r3, [pc, #368]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80073f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f6:	4a5b      	ldr	r2, [pc, #364]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fe:	e00b      	b.n	8007418 <HAL_RCC_OscConfig+0x324>
 8007400:	4b58      	ldr	r3, [pc, #352]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007404:	4a57      	ldr	r2, [pc, #348]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007406:	f023 0301 	bic.w	r3, r3, #1
 800740a:	6713      	str	r3, [r2, #112]	@ 0x70
 800740c:	4b55      	ldr	r3, [pc, #340]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007410:	4a54      	ldr	r2, [pc, #336]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007412:	f023 0304 	bic.w	r3, r3, #4
 8007416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d015      	beq.n	800744c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007420:	f7fc fba0 	bl	8003b64 <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007426:	e00a      	b.n	800743e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007428:	f7fc fb9c 	bl	8003b64 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e0cb      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743e:	4b49      	ldr	r3, [pc, #292]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ee      	beq.n	8007428 <HAL_RCC_OscConfig+0x334>
 800744a:	e014      	b.n	8007476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800744c:	f7fc fb8a 	bl	8003b64 <HAL_GetTick>
 8007450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007452:	e00a      	b.n	800746a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007454:	f7fc fb86 	bl	8003b64 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e0b5      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800746a:	4b3e      	ldr	r3, [pc, #248]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1ee      	bne.n	8007454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d105      	bne.n	8007488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800747c:	4b39      	ldr	r3, [pc, #228]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007480:	4a38      	ldr	r2, [pc, #224]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007486:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80a1 	beq.w	80075d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007492:	4b34      	ldr	r3, [pc, #208]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f003 030c 	and.w	r3, r3, #12
 800749a:	2b08      	cmp	r3, #8
 800749c:	d05c      	beq.n	8007558 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d141      	bne.n	800752a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a6:	4b31      	ldr	r3, [pc, #196]	@ (800756c <HAL_RCC_OscConfig+0x478>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ac:	f7fc fb5a 	bl	8003b64 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fc fb56 	bl	8003b64 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e087      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c6:	4b27      	ldr	r3, [pc, #156]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69da      	ldr	r2, [r3, #28]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	019b      	lsls	r3, r3, #6
 80074e2:	431a      	orrs	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	3b01      	subs	r3, #1
 80074ec:	041b      	lsls	r3, r3, #16
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f4:	061b      	lsls	r3, r3, #24
 80074f6:	491b      	ldr	r1, [pc, #108]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074fc:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <HAL_RCC_OscConfig+0x478>)
 80074fe:	2201      	movs	r2, #1
 8007500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007502:	f7fc fb2f 	bl	8003b64 <HAL_GetTick>
 8007506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007508:	e008      	b.n	800751c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750a:	f7fc fb2b 	bl	8003b64 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e05c      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800751c:	4b11      	ldr	r3, [pc, #68]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f0      	beq.n	800750a <HAL_RCC_OscConfig+0x416>
 8007528:	e054      	b.n	80075d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800752a:	4b10      	ldr	r3, [pc, #64]	@ (800756c <HAL_RCC_OscConfig+0x478>)
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007530:	f7fc fb18 	bl	8003b64 <HAL_GetTick>
 8007534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007536:	e008      	b.n	800754a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007538:	f7fc fb14 	bl	8003b64 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d901      	bls.n	800754a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	e045      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800754a:	4b06      	ldr	r3, [pc, #24]	@ (8007564 <HAL_RCC_OscConfig+0x470>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1f0      	bne.n	8007538 <HAL_RCC_OscConfig+0x444>
 8007556:	e03d      	b.n	80075d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d107      	bne.n	8007570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e038      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
 8007564:	40023800 	.word	0x40023800
 8007568:	40007000 	.word	0x40007000
 800756c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007570:	4b1b      	ldr	r3, [pc, #108]	@ (80075e0 <HAL_RCC_OscConfig+0x4ec>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d028      	beq.n	80075d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007588:	429a      	cmp	r2, r3
 800758a:	d121      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007596:	429a      	cmp	r2, r3
 8007598:	d11a      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075a0:	4013      	ands	r3, r2
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d111      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	3b01      	subs	r3, #1
 80075ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075bc:	429a      	cmp	r2, r3
 80075be:	d107      	bne.n	80075d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d001      	beq.n	80075d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e000      	b.n	80075d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40023800 	.word	0x40023800

080075e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e0cc      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075f8:	4b68      	ldr	r3, [pc, #416]	@ (800779c <HAL_RCC_ClockConfig+0x1b8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d90c      	bls.n	8007620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007606:	4b65      	ldr	r3, [pc, #404]	@ (800779c <HAL_RCC_ClockConfig+0x1b8>)
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b63      	ldr	r3, [pc, #396]	@ (800779c <HAL_RCC_ClockConfig+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0b8      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d020      	beq.n	800766e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	d005      	beq.n	8007644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007638:	4b59      	ldr	r3, [pc, #356]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	4a58      	ldr	r2, [pc, #352]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 800763e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007650:	4b53      	ldr	r3, [pc, #332]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	4a52      	ldr	r2, [pc, #328]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800765a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800765c:	4b50      	ldr	r3, [pc, #320]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	494d      	ldr	r1, [pc, #308]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 800766a:	4313      	orrs	r3, r2
 800766c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	2b00      	cmp	r3, #0
 8007678:	d044      	beq.n	8007704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d107      	bne.n	8007692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007682:	4b47      	ldr	r3, [pc, #284]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d119      	bne.n	80076c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e07f      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d003      	beq.n	80076a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d107      	bne.n	80076b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076a2:	4b3f      	ldr	r3, [pc, #252]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e06f      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b2:	4b3b      	ldr	r3, [pc, #236]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e067      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076c2:	4b37      	ldr	r3, [pc, #220]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f023 0203 	bic.w	r2, r3, #3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4934      	ldr	r1, [pc, #208]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076d4:	f7fc fa46 	bl	8003b64 <HAL_GetTick>
 80076d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076da:	e00a      	b.n	80076f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076dc:	f7fc fa42 	bl	8003b64 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e04f      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076f2:	4b2b      	ldr	r3, [pc, #172]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 020c 	and.w	r2, r3, #12
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	429a      	cmp	r2, r3
 8007702:	d1eb      	bne.n	80076dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007704:	4b25      	ldr	r3, [pc, #148]	@ (800779c <HAL_RCC_ClockConfig+0x1b8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0307 	and.w	r3, r3, #7
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d20c      	bcs.n	800772c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007712:	4b22      	ldr	r3, [pc, #136]	@ (800779c <HAL_RCC_ClockConfig+0x1b8>)
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	b2d2      	uxtb	r2, r2
 8007718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800771a:	4b20      	ldr	r3, [pc, #128]	@ (800779c <HAL_RCC_ClockConfig+0x1b8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0307 	and.w	r3, r3, #7
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d001      	beq.n	800772c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e032      	b.n	8007792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007738:	4b19      	ldr	r3, [pc, #100]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	4916      	ldr	r1, [pc, #88]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0308 	and.w	r3, r3, #8
 8007752:	2b00      	cmp	r3, #0
 8007754:	d009      	beq.n	800776a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007756:	4b12      	ldr	r3, [pc, #72]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	490e      	ldr	r1, [pc, #56]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007766:	4313      	orrs	r3, r2
 8007768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800776a:	f000 f821 	bl	80077b0 <HAL_RCC_GetSysClockFreq>
 800776e:	4602      	mov	r2, r0
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	091b      	lsrs	r3, r3, #4
 8007776:	f003 030f 	and.w	r3, r3, #15
 800777a:	490a      	ldr	r1, [pc, #40]	@ (80077a4 <HAL_RCC_ClockConfig+0x1c0>)
 800777c:	5ccb      	ldrb	r3, [r1, r3]
 800777e:	fa22 f303 	lsr.w	r3, r2, r3
 8007782:	4a09      	ldr	r2, [pc, #36]	@ (80077a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007786:	4b09      	ldr	r3, [pc, #36]	@ (80077ac <HAL_RCC_ClockConfig+0x1c8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7fb ffca 	bl	8003724 <HAL_InitTick>

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	40023c00 	.word	0x40023c00
 80077a0:	40023800 	.word	0x40023800
 80077a4:	080166e4 	.word	0x080166e4
 80077a8:	20000264 	.word	0x20000264
 80077ac:	20000268 	.word	0x20000268

080077b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077b4:	b094      	sub	sp, #80	@ 0x50
 80077b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077c8:	4b79      	ldr	r3, [pc, #484]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 030c 	and.w	r3, r3, #12
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d00d      	beq.n	80077f0 <HAL_RCC_GetSysClockFreq+0x40>
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	f200 80e1 	bhi.w	800799c <HAL_RCC_GetSysClockFreq+0x1ec>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_RCC_GetSysClockFreq+0x34>
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d003      	beq.n	80077ea <HAL_RCC_GetSysClockFreq+0x3a>
 80077e2:	e0db      	b.n	800799c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077e4:	4b73      	ldr	r3, [pc, #460]	@ (80079b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80077e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077e8:	e0db      	b.n	80079a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077ea:	4b73      	ldr	r3, [pc, #460]	@ (80079b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80077ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077ee:	e0d8      	b.n	80079a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077f0:	4b6f      	ldr	r3, [pc, #444]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077fa:	4b6d      	ldr	r3, [pc, #436]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007802:	2b00      	cmp	r3, #0
 8007804:	d063      	beq.n	80078ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007806:	4b6a      	ldr	r3, [pc, #424]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	099b      	lsrs	r3, r3, #6
 800780c:	2200      	movs	r2, #0
 800780e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007810:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007818:	633b      	str	r3, [r7, #48]	@ 0x30
 800781a:	2300      	movs	r3, #0
 800781c:	637b      	str	r3, [r7, #52]	@ 0x34
 800781e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007822:	4622      	mov	r2, r4
 8007824:	462b      	mov	r3, r5
 8007826:	f04f 0000 	mov.w	r0, #0
 800782a:	f04f 0100 	mov.w	r1, #0
 800782e:	0159      	lsls	r1, r3, #5
 8007830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007834:	0150      	lsls	r0, r2, #5
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4621      	mov	r1, r4
 800783c:	1a51      	subs	r1, r2, r1
 800783e:	6139      	str	r1, [r7, #16]
 8007840:	4629      	mov	r1, r5
 8007842:	eb63 0301 	sbc.w	r3, r3, r1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007854:	4659      	mov	r1, fp
 8007856:	018b      	lsls	r3, r1, #6
 8007858:	4651      	mov	r1, sl
 800785a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800785e:	4651      	mov	r1, sl
 8007860:	018a      	lsls	r2, r1, #6
 8007862:	4651      	mov	r1, sl
 8007864:	ebb2 0801 	subs.w	r8, r2, r1
 8007868:	4659      	mov	r1, fp
 800786a:	eb63 0901 	sbc.w	r9, r3, r1
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800787a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800787e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007882:	4690      	mov	r8, r2
 8007884:	4699      	mov	r9, r3
 8007886:	4623      	mov	r3, r4
 8007888:	eb18 0303 	adds.w	r3, r8, r3
 800788c:	60bb      	str	r3, [r7, #8]
 800788e:	462b      	mov	r3, r5
 8007890:	eb49 0303 	adc.w	r3, r9, r3
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	f04f 0300 	mov.w	r3, #0
 800789e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078a2:	4629      	mov	r1, r5
 80078a4:	024b      	lsls	r3, r1, #9
 80078a6:	4621      	mov	r1, r4
 80078a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078ac:	4621      	mov	r1, r4
 80078ae:	024a      	lsls	r2, r1, #9
 80078b0:	4610      	mov	r0, r2
 80078b2:	4619      	mov	r1, r3
 80078b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078b6:	2200      	movs	r2, #0
 80078b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078c0:	f7f9 f992 	bl	8000be8 <__aeabi_uldivmod>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4613      	mov	r3, r2
 80078ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078cc:	e058      	b.n	8007980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ce:	4b38      	ldr	r3, [pc, #224]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	099b      	lsrs	r3, r3, #6
 80078d4:	2200      	movs	r2, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	4611      	mov	r1, r2
 80078da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078de:	623b      	str	r3, [r7, #32]
 80078e0:	2300      	movs	r3, #0
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078e8:	4642      	mov	r2, r8
 80078ea:	464b      	mov	r3, r9
 80078ec:	f04f 0000 	mov.w	r0, #0
 80078f0:	f04f 0100 	mov.w	r1, #0
 80078f4:	0159      	lsls	r1, r3, #5
 80078f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078fa:	0150      	lsls	r0, r2, #5
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	4641      	mov	r1, r8
 8007902:	ebb2 0a01 	subs.w	sl, r2, r1
 8007906:	4649      	mov	r1, r9
 8007908:	eb63 0b01 	sbc.w	fp, r3, r1
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	f04f 0300 	mov.w	r3, #0
 8007914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800791c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007920:	ebb2 040a 	subs.w	r4, r2, sl
 8007924:	eb63 050b 	sbc.w	r5, r3, fp
 8007928:	f04f 0200 	mov.w	r2, #0
 800792c:	f04f 0300 	mov.w	r3, #0
 8007930:	00eb      	lsls	r3, r5, #3
 8007932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007936:	00e2      	lsls	r2, r4, #3
 8007938:	4614      	mov	r4, r2
 800793a:	461d      	mov	r5, r3
 800793c:	4643      	mov	r3, r8
 800793e:	18e3      	adds	r3, r4, r3
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	464b      	mov	r3, r9
 8007944:	eb45 0303 	adc.w	r3, r5, r3
 8007948:	607b      	str	r3, [r7, #4]
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007956:	4629      	mov	r1, r5
 8007958:	028b      	lsls	r3, r1, #10
 800795a:	4621      	mov	r1, r4
 800795c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007960:	4621      	mov	r1, r4
 8007962:	028a      	lsls	r2, r1, #10
 8007964:	4610      	mov	r0, r2
 8007966:	4619      	mov	r1, r3
 8007968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800796a:	2200      	movs	r2, #0
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	61fa      	str	r2, [r7, #28]
 8007970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007974:	f7f9 f938 	bl	8000be8 <__aeabi_uldivmod>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4613      	mov	r3, r2
 800797e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007980:	4b0b      	ldr	r3, [pc, #44]	@ (80079b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	3301      	adds	r3, #1
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007994:	fbb2 f3f3 	udiv	r3, r2, r3
 8007998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800799a:	e002      	b.n	80079a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800799c:	4b05      	ldr	r3, [pc, #20]	@ (80079b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800799e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3750      	adds	r7, #80	@ 0x50
 80079a8:	46bd      	mov	sp, r7
 80079aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	00f42400 	.word	0x00f42400
 80079b8:	007a1200 	.word	0x007a1200

080079bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079c0:	4b03      	ldr	r3, [pc, #12]	@ (80079d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80079c2:	681b      	ldr	r3, [r3, #0]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000264 	.word	0x20000264

080079d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079d8:	f7ff fff0 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 80079dc:	4602      	mov	r2, r0
 80079de:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	0a9b      	lsrs	r3, r3, #10
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	4903      	ldr	r1, [pc, #12]	@ (80079f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ea:	5ccb      	ldrb	r3, [r1, r3]
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40023800 	.word	0x40023800
 80079f8:	080166f4 	.word	0x080166f4

080079fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a00:	f7ff ffdc 	bl	80079bc <HAL_RCC_GetHCLKFreq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	0b5b      	lsrs	r3, r3, #13
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	4903      	ldr	r1, [pc, #12]	@ (8007a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a12:	5ccb      	ldrb	r3, [r1, r3]
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	080166f4 	.word	0x080166f4

08007a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	220f      	movs	r2, #15
 8007a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a34:	4b12      	ldr	r3, [pc, #72]	@ (8007a80 <HAL_RCC_GetClockConfig+0x5c>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 0203 	and.w	r2, r3, #3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a40:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <HAL_RCC_GetClockConfig+0x5c>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a80 <HAL_RCC_GetClockConfig+0x5c>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007a58:	4b09      	ldr	r3, [pc, #36]	@ (8007a80 <HAL_RCC_GetClockConfig+0x5c>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	08db      	lsrs	r3, r3, #3
 8007a5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a66:	4b07      	ldr	r3, [pc, #28]	@ (8007a84 <HAL_RCC_GetClockConfig+0x60>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0207 	and.w	r2, r3, #7
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	601a      	str	r2, [r3, #0]
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40023c00 	.word	0x40023c00

08007a88 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d035      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ab0:	4b62      	ldr	r3, [pc, #392]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ab6:	f7fc f855 	bl	8003b64 <HAL_GetTick>
 8007aba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007abc:	e008      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007abe:	f7fc f851 	bl	8003b64 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d901      	bls.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e0b0      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f0      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	019a      	lsls	r2, r3, #6
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	071b      	lsls	r3, r3, #28
 8007ae8:	4955      	ldr	r1, [pc, #340]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007af0:	4b52      	ldr	r3, [pc, #328]	@ (8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af6:	f7fc f835 	bl	8003b64 <HAL_GetTick>
 8007afa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007afc:	e008      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007afe:	f7fc f831 	bl	8003b64 <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e090      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b10:	4b4b      	ldr	r3, [pc, #300]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 8083 	beq.w	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
 8007b2e:	4b44      	ldr	r3, [pc, #272]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b32:	4a43      	ldr	r2, [pc, #268]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b3a:	4b41      	ldr	r3, [pc, #260]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b46:	4b3f      	ldr	r3, [pc, #252]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a3e      	ldr	r2, [pc, #248]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b52:	f7fc f807 	bl	8003b64 <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b58:	e008      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b5a:	f7fc f803 	bl	8003b64 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e062      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b6c:	4b35      	ldr	r3, [pc, #212]	@ (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b78:	4b31      	ldr	r3, [pc, #196]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b80:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d02f      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d028      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b96:	4b2a      	ldr	r3, [pc, #168]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b9e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ba0:	4b29      	ldr	r3, [pc, #164]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ba6:	4b28      	ldr	r3, [pc, #160]	@ (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007bac:	4a24      	ldr	r2, [pc, #144]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007bb2:	4b23      	ldr	r3, [pc, #140]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d114      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007bbe:	f7fb ffd1 	bl	8003b64 <HAL_GetTick>
 8007bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc4:	e00a      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc6:	f7fb ffcd 	bl	8003b64 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e02a      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bdc:	4b18      	ldr	r3, [pc, #96]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0ee      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bf4:	d10d      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c0a:	490d      	ldr	r1, [pc, #52]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	608b      	str	r3, [r1, #8]
 8007c10:	e005      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c12:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	4a0a      	ldr	r2, [pc, #40]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c18:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007c1c:	6093      	str	r3, [r2, #8]
 8007c1e:	4b08      	ldr	r3, [pc, #32]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c20:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c2a:	4905      	ldr	r1, [pc, #20]	@ (8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	42470068 	.word	0x42470068
 8007c40:	40023800 	.word	0x40023800
 8007c44:	40007000 	.word	0x40007000
 8007c48:	42470e40 	.word	0x42470e40

08007c4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d13f      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007c6a:	4b24      	ldr	r3, [pc, #144]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c72:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d006      	beq.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c80:	d12f      	bne.n	8007ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c82:	4b1f      	ldr	r3, [pc, #124]	@ (8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c84:	617b      	str	r3, [r7, #20]
          break;
 8007c86:	e02f      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c88:	4b1c      	ldr	r3, [pc, #112]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c94:	d108      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c96:	4b19      	ldr	r3, [pc, #100]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c9e:	4a19      	ldr	r2, [pc, #100]	@ (8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	613b      	str	r3, [r7, #16]
 8007ca6:	e007      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ca8:	4b14      	ldr	r3, [pc, #80]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cb0:	4a15      	ldr	r2, [pc, #84]	@ (8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cb6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007cb8:	4b10      	ldr	r3, [pc, #64]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cbe:	099b      	lsrs	r3, r3, #6
 8007cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cd2:	0f1b      	lsrs	r3, r3, #28
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	617b      	str	r3, [r7, #20]
          break;
 8007ce0:	e002      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	617b      	str	r3, [r7, #20]
          break;
 8007ce6:	bf00      	nop
        }
      }
      break;
 8007ce8:	e000      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007cea:	bf00      	nop
    }
  }
  return frequency;
 8007cec:	697b      	ldr	r3, [r7, #20]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	00bb8000 	.word	0x00bb8000
 8007d04:	007a1200 	.word	0x007a1200
 8007d08:	00f42400 	.word	0x00f42400

08007d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e07b      	b.n	8007e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d108      	bne.n	8007d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d2e:	d009      	beq.n	8007d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	61da      	str	r2, [r3, #28]
 8007d36:	e005      	b.n	8007d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fb fc0c 	bl	800357c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007db4:	431a      	orrs	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dc8:	ea42 0103 	orr.w	r1, r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	0c1b      	lsrs	r3, r3, #16
 8007de2:	f003 0104 	and.w	r1, r3, #4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	f003 0210 	and.w	r2, r3, #16
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b082      	sub	sp, #8
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e041      	b.n	8007eb4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d106      	bne.n	8007e4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f839 	bl	8007ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	f000 f9bf 	bl	80081e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d001      	beq.n	8007ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e04e      	b.n	8007f86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0201 	orr.w	r2, r2, #1
 8007efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a23      	ldr	r2, [pc, #140]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d022      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f12:	d01d      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1f      	ldr	r2, [pc, #124]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d018      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1e      	ldr	r2, [pc, #120]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xcc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a19      	ldr	r2, [pc, #100]	@ (8007fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x80>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a18      	ldr	r2, [pc, #96]	@ (8007fac <HAL_TIM_Base_Start_IT+0xdc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d111      	bne.n	8007f74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d010      	beq.n	8007f84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f72:	e007      	b.n	8007f84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40010400 	.word	0x40010400
 8007fa8:	40014000 	.word	0x40014000
 8007fac:	40001800 	.word	0x40001800

08007fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 0302 	and.w	r3, r3, #2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d020      	beq.n	8008014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f003 0302 	and.w	r3, r3, #2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d01b      	beq.n	8008014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f06f 0202 	mvn.w	r2, #2
 8007fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8d2 	bl	80081a4 <HAL_TIM_IC_CaptureCallback>
 8008000:	e005      	b.n	800800e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8c4 	bl	8008190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8d5 	bl	80081b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f003 0304 	and.w	r3, r3, #4
 800801a:	2b00      	cmp	r3, #0
 800801c:	d020      	beq.n	8008060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01b      	beq.n	8008060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f06f 0204 	mvn.w	r2, #4
 8008030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8ac 	bl	80081a4 <HAL_TIM_IC_CaptureCallback>
 800804c:	e005      	b.n	800805a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f89e 	bl	8008190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f8af 	bl	80081b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d020      	beq.n	80080ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01b      	beq.n	80080ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0208 	mvn.w	r2, #8
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2204      	movs	r2, #4
 8008082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f886 	bl	80081a4 <HAL_TIM_IC_CaptureCallback>
 8008098:	e005      	b.n	80080a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f878 	bl	8008190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f889 	bl	80081b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f003 0310 	and.w	r3, r3, #16
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d020      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f003 0310 	and.w	r3, r3, #16
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d01b      	beq.n	80080f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f06f 0210 	mvn.w	r2, #16
 80080c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2208      	movs	r2, #8
 80080ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f860 	bl	80081a4 <HAL_TIM_IC_CaptureCallback>
 80080e4:	e005      	b.n	80080f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f852 	bl	8008190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f863 	bl	80081b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00c      	beq.n	800811c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d007      	beq.n	800811c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f06f 0201 	mvn.w	r2, #1
 8008114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fb f924 	bl	8003364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812c:	2b00      	cmp	r3, #0
 800812e:	d007      	beq.n	8008140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f900 	bl	8008340 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800815c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f834 	bl	80081cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f003 0320 	and.w	r3, r3, #32
 8008174:	2b00      	cmp	r3, #0
 8008176:	d007      	beq.n	8008188 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f06f 0220 	mvn.w	r2, #32
 8008180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f8d2 	bl	800832c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008188:	bf00      	nop
 800818a:	3710      	adds	r7, #16
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a43      	ldr	r2, [pc, #268]	@ (8008300 <TIM_Base_SetConfig+0x120>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <TIM_Base_SetConfig+0x40>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fe:	d00f      	beq.n	8008220 <TIM_Base_SetConfig+0x40>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a40      	ldr	r2, [pc, #256]	@ (8008304 <TIM_Base_SetConfig+0x124>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00b      	beq.n	8008220 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a3f      	ldr	r2, [pc, #252]	@ (8008308 <TIM_Base_SetConfig+0x128>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d007      	beq.n	8008220 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a3e      	ldr	r2, [pc, #248]	@ (800830c <TIM_Base_SetConfig+0x12c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d003      	beq.n	8008220 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a3d      	ldr	r2, [pc, #244]	@ (8008310 <TIM_Base_SetConfig+0x130>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d108      	bne.n	8008232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a32      	ldr	r2, [pc, #200]	@ (8008300 <TIM_Base_SetConfig+0x120>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d02b      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008240:	d027      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a2f      	ldr	r2, [pc, #188]	@ (8008304 <TIM_Base_SetConfig+0x124>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d023      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a2e      	ldr	r2, [pc, #184]	@ (8008308 <TIM_Base_SetConfig+0x128>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d01f      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a2d      	ldr	r2, [pc, #180]	@ (800830c <TIM_Base_SetConfig+0x12c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d01b      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a2c      	ldr	r2, [pc, #176]	@ (8008310 <TIM_Base_SetConfig+0x130>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d017      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a2b      	ldr	r2, [pc, #172]	@ (8008314 <TIM_Base_SetConfig+0x134>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2a      	ldr	r2, [pc, #168]	@ (8008318 <TIM_Base_SetConfig+0x138>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00f      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a29      	ldr	r2, [pc, #164]	@ (800831c <TIM_Base_SetConfig+0x13c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00b      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a28      	ldr	r2, [pc, #160]	@ (8008320 <TIM_Base_SetConfig+0x140>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d007      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a27      	ldr	r2, [pc, #156]	@ (8008324 <TIM_Base_SetConfig+0x144>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a26      	ldr	r2, [pc, #152]	@ (8008328 <TIM_Base_SetConfig+0x148>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d108      	bne.n	80082a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a0e      	ldr	r2, [pc, #56]	@ (8008300 <TIM_Base_SetConfig+0x120>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_Base_SetConfig+0xf2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a10      	ldr	r2, [pc, #64]	@ (8008310 <TIM_Base_SetConfig+0x130>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d103      	bne.n	80082da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	691a      	ldr	r2, [r3, #16]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f043 0204 	orr.w	r2, r3, #4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	40010000 	.word	0x40010000
 8008304:	40000400 	.word	0x40000400
 8008308:	40000800 	.word	0x40000800
 800830c:	40000c00 	.word	0x40000c00
 8008310:	40010400 	.word	0x40010400
 8008314:	40014000 	.word	0x40014000
 8008318:	40014400 	.word	0x40014400
 800831c:	40014800 	.word	0x40014800
 8008320:	40001800 	.word	0x40001800
 8008324:	40001c00 	.word	0x40001c00
 8008328:	40002000 	.word	0x40002000

0800832c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e042      	b.n	80083ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d106      	bne.n	8008380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7fb f946 	bl	800360c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2224      	movs	r2, #36	@ 0x24
 8008384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fdd3 	bl	8008f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	695a      	ldr	r2, [r3, #20]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	@ 0x28
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b20      	cmp	r3, #32
 8008412:	d175      	bne.n	8008500 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_UART_Transmit+0x2c>
 800841a:	88fb      	ldrh	r3, [r7, #6]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e06e      	b.n	8008502 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2221      	movs	r2, #33	@ 0x21
 800842e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008432:	f7fb fb97 	bl	8003b64 <HAL_GetTick>
 8008436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	88fa      	ldrh	r2, [r7, #6]
 800843c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	88fa      	ldrh	r2, [r7, #6]
 8008442:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800844c:	d108      	bne.n	8008460 <HAL_UART_Transmit+0x6c>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	61bb      	str	r3, [r7, #24]
 800845e:	e003      	b.n	8008468 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008464:	2300      	movs	r3, #0
 8008466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008468:	e02e      	b.n	80084c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2200      	movs	r2, #0
 8008472:	2180      	movs	r1, #128	@ 0x80
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fb37 	bl	8008ae8 <UART_WaitOnFlagUntilTimeout>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e03a      	b.n	8008502 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	3302      	adds	r3, #2
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	e007      	b.n	80084ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	781a      	ldrb	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084be:	b29b      	uxth	r3, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1cb      	bne.n	800846a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	2140      	movs	r1, #64	@ 0x40
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 fb03 	bl	8008ae8 <UART_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e006      	b.n	8008502 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	e000      	b.n	8008502 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008500:	2302      	movs	r3, #2
  }
}
 8008502:	4618      	mov	r0, r3
 8008504:	3720      	adds	r7, #32
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b084      	sub	sp, #16
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	4613      	mov	r3, r2
 8008516:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b20      	cmp	r3, #32
 8008522:	d112      	bne.n	800854a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <HAL_UART_Receive_IT+0x26>
 800852a:	88fb      	ldrh	r3, [r7, #6]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e00b      	b.n	800854c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800853a:	88fb      	ldrh	r3, [r7, #6]
 800853c:	461a      	mov	r2, r3
 800853e:	68b9      	ldr	r1, [r7, #8]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fb2a 	bl	8008b9a <UART_Start_Receive_IT>
 8008546:	4603      	mov	r3, r0
 8008548:	e000      	b.n	800854c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800854a:	2302      	movs	r3, #2
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b0ba      	sub	sp, #232	@ 0xe8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800857a:	2300      	movs	r3, #0
 800857c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008580:	2300      	movs	r3, #0
 8008582:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10f      	bne.n	80085ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_UART_IRQHandler+0x66>
 80085a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fc07 	bl	8008dc6 <UART_Receive_IT>
      return;
 80085b8:	e273      	b.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 80de 	beq.w	8008780 <HAL_UART_IRQHandler+0x22c>
 80085c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d106      	bne.n	80085de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80d1 	beq.w	8008780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <HAL_UART_IRQHandler+0xae>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fa:	f043 0201 	orr.w	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <HAL_UART_IRQHandler+0xd2>
 800860e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861e:	f043 0202 	orr.w	r2, r3, #2
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <HAL_UART_IRQHandler+0xf6>
 8008632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008642:	f043 0204 	orr.w	r2, r3, #4
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864e:	f003 0308 	and.w	r3, r3, #8
 8008652:	2b00      	cmp	r3, #0
 8008654:	d011      	beq.n	800867a <HAL_UART_IRQHandler+0x126>
 8008656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008672:	f043 0208 	orr.w	r2, r3, #8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 820a 	beq.w	8008a98 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008688:	f003 0320 	and.w	r3, r3, #32
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <HAL_UART_IRQHandler+0x14e>
 8008690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008694:	f003 0320 	and.w	r3, r3, #32
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fb92 	bl	8008dc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ac:	2b40      	cmp	r3, #64	@ 0x40
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d103      	bne.n	80086ce <HAL_UART_IRQHandler+0x17a>
 80086c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d04f      	beq.n	800876e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa9d 	bl	8008c0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086de:	2b40      	cmp	r3, #64	@ 0x40
 80086e0:	d141      	bne.n	8008766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3314      	adds	r3, #20
 80086e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3314      	adds	r3, #20
 800870a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800870e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800871a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800871e:	e841 2300 	strex	r3, r2, [r1]
 8008722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1d9      	bne.n	80086e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d013      	beq.n	800875e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873a:	4a8a      	ldr	r2, [pc, #552]	@ (8008964 <HAL_UART_IRQHandler+0x410>)
 800873c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008742:	4618      	mov	r0, r3
 8008744:	f7fb fb90 	bl	8003e68 <HAL_DMA_Abort_IT>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d016      	beq.n	800877c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008758:	4610      	mov	r0, r2
 800875a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	e00e      	b.n	800877c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 f9ac 	bl	8008abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008764:	e00a      	b.n	800877c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f9a8 	bl	8008abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800876c:	e006      	b.n	800877c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f9a4 	bl	8008abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800877a:	e18d      	b.n	8008a98 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800877c:	bf00      	nop
    return;
 800877e:	e18b      	b.n	8008a98 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	2b01      	cmp	r3, #1
 8008786:	f040 8167 	bne.w	8008a58 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800878a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800878e:	f003 0310 	and.w	r3, r3, #16
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 8160 	beq.w	8008a58 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 8159 	beq.w	8008a58 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c6:	2b40      	cmp	r3, #64	@ 0x40
 80087c8:	f040 80ce 	bne.w	8008968 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 80a9 	beq.w	8008934 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80087e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087ea:	429a      	cmp	r2, r3
 80087ec:	f080 80a2 	bcs.w	8008934 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008802:	f000 8088 	beq.w	8008916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	330c      	adds	r3, #12
 800880c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800881c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008820:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800883e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008842:	e841 2300 	strex	r3, r2, [r1]
 8008846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800884a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1d9      	bne.n	8008806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3314      	adds	r3, #20
 8008858:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800885c:	e853 3f00 	ldrex	r3, [r3]
 8008860:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008862:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008864:	f023 0301 	bic.w	r3, r3, #1
 8008868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3314      	adds	r3, #20
 8008872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008876:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800887a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800887e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e1      	bne.n	8008852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3314      	adds	r3, #20
 8008894:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800889e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3314      	adds	r3, #20
 80088ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e3      	bne.n	800888e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	330c      	adds	r3, #12
 80088f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80088f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80088fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e3      	bne.n	80088d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008910:	4618      	mov	r0, r3
 8008912:	f7fb fa39 	bl	8003d88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2202      	movs	r2, #2
 800891a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008924:	b29b      	uxth	r3, r3
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	b29b      	uxth	r3, r3
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f8cf 	bl	8008ad0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008932:	e0b3      	b.n	8008a9c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800893c:	429a      	cmp	r2, r3
 800893e:	f040 80ad 	bne.w	8008a9c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800894c:	f040 80a6 	bne.w	8008a9c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f8b7 	bl	8008ad0 <HAL_UARTEx_RxEventCallback>
      return;
 8008962:	e09b      	b.n	8008a9c <HAL_UART_IRQHandler+0x548>
 8008964:	08008cd5 	.word	0x08008cd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008970:	b29b      	uxth	r3, r3
 8008972:	1ad3      	subs	r3, r2, r3
 8008974:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 808e 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8089 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	330c      	adds	r3, #12
 8008994:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	e853 3f00 	ldrex	r3, [r3]
 800899c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800899e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	330c      	adds	r3, #12
 80089ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80089b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e3      	bne.n	800898e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3314      	adds	r3, #20
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	623b      	str	r3, [r7, #32]
   return(result);
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	f023 0301 	bic.w	r3, r3, #1
 80089dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3314      	adds	r3, #20
 80089e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80089ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e3      	bne.n	80089c6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0310 	bic.w	r3, r3, #16
 8008a22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a30:	61fa      	str	r2, [r7, #28]
 8008a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	69b9      	ldr	r1, [r7, #24]
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e3      	bne.n	8008a0c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f83d 	bl	8008ad0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a56:	e023      	b.n	8008aa0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <HAL_UART_IRQHandler+0x524>
 8008a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f940 	bl	8008cf6 <UART_Transmit_IT>
    return;
 8008a76:	e014      	b.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d008      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 f980 	bl	8008d96 <UART_EndTransmit_IT>
    return;
 8008a96:	e004      	b.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
    return;
 8008a98:	bf00      	nop
 8008a9a:	e002      	b.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
      return;
 8008a9c:	bf00      	nop
 8008a9e:	e000      	b.n	8008aa2 <HAL_UART_IRQHandler+0x54e>
      return;
 8008aa0:	bf00      	nop
  }
}
 8008aa2:	37e8      	adds	r7, #232	@ 0xe8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	4613      	mov	r3, r2
 8008af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008af8:	e03b      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d037      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b02:	f7fb f82f 	bl	8003b64 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	6a3a      	ldr	r2, [r7, #32]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d302      	bcc.n	8008b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b12:	6a3b      	ldr	r3, [r7, #32]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e03a      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d023      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2b80      	cmp	r3, #128	@ 0x80
 8008b2e:	d020      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	2b40      	cmp	r3, #64	@ 0x40
 8008b34:	d01d      	beq.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d116      	bne.n	8008b72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b44:	2300      	movs	r3, #0
 8008b46:	617b      	str	r3, [r7, #20]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 f857 	bl	8008c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2208      	movs	r2, #8
 8008b64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e00f      	b.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	bf0c      	ite	eq
 8008b82:	2301      	moveq	r3, #1
 8008b84:	2300      	movne	r3, #0
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	79fb      	ldrb	r3, [r7, #7]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d0b4      	beq.n	8008afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	88fa      	ldrh	r2, [r7, #6]
 8008bb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	88fa      	ldrh	r2, [r7, #6]
 8008bb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2222      	movs	r2, #34	@ 0x22
 8008bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d007      	beq.n	8008be0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008bde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	695a      	ldr	r2, [r3, #20]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0201 	orr.w	r2, r2, #1
 8008bee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0220 	orr.w	r2, r2, #32
 8008bfe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b095      	sub	sp, #84	@ 0x54
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	330c      	adds	r3, #12
 8008c34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c36:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3314      	adds	r3, #20
 8008c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	e853 3f00 	ldrex	r3, [r3]
 8008c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	f023 0301 	bic.w	r3, r3, #1
 8008c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3314      	adds	r3, #20
 8008c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d119      	bne.n	8008cba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	330c      	adds	r3, #12
 8008c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	f023 0310 	bic.w	r3, r3, #16
 8008c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	330c      	adds	r3, #12
 8008ca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca6:	61ba      	str	r2, [r7, #24]
 8008ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e5      	bne.n	8008c86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2220      	movs	r2, #32
 8008cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008cc8:	bf00      	nop
 8008cca:	3754      	adds	r7, #84	@ 0x54
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff fee7 	bl	8008abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2b21      	cmp	r3, #33	@ 0x21
 8008d08:	d13e      	bne.n	8008d88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d12:	d114      	bne.n	8008d3e <UART_Transmit_IT+0x48>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d110      	bne.n	8008d3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	1c9a      	adds	r2, r3, #2
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	621a      	str	r2, [r3, #32]
 8008d3c:	e008      	b.n	8008d50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	1c59      	adds	r1, r3, #1
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6211      	str	r1, [r2, #32]
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10f      	bne.n	8008d84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e000      	b.n	8008d8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d88:	2302      	movs	r3, #2
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fe76 	bl	8008aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b08c      	sub	sp, #48	@ 0x30
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b22      	cmp	r3, #34	@ 0x22
 8008de0:	f040 80aa 	bne.w	8008f38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dec:	d115      	bne.n	8008e1a <UART_Receive_IT+0x54>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d111      	bne.n	8008e1a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	1c9a      	adds	r2, r3, #2
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e18:	e024      	b.n	8008e64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e28:	d007      	beq.n	8008e3a <UART_Receive_IT+0x74>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <UART_Receive_IT+0x82>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	e008      	b.n	8008e5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	4619      	mov	r1, r3
 8008e72:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d15d      	bne.n	8008f34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0220 	bic.w	r2, r2, #32
 8008e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008e96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695a      	ldr	r2, [r3, #20]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 0201 	bic.w	r2, r2, #1
 8008ea6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d135      	bne.n	8008f2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f023 0310 	bic.w	r3, r3, #16
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	330c      	adds	r3, #12
 8008ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee4:	623a      	str	r2, [r7, #32]
 8008ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	69f9      	ldr	r1, [r7, #28]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e5      	bne.n	8008ec4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d10a      	bne.n	8008f1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff fdd4 	bl	8008ad0 <HAL_UARTEx_RxEventCallback>
 8008f28:	e002      	b.n	8008f30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7fa f98a 	bl	8003244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	e002      	b.n	8008f3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e000      	b.n	8008f3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008f38:	2302      	movs	r3, #2
  }
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3730      	adds	r7, #48	@ 0x30
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f48:	b0c0      	sub	sp, #256	@ 0x100
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f60:	68d9      	ldr	r1, [r3, #12]
 8008f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	ea40 0301 	orr.w	r3, r0, r1
 8008f6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f72:	689a      	ldr	r2, [r3, #8]
 8008f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	431a      	orrs	r2, r3
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008f9c:	f021 010c 	bic.w	r1, r1, #12
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008faa:	430b      	orrs	r3, r1
 8008fac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fbe:	6999      	ldr	r1, [r3, #24]
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	ea40 0301 	orr.w	r3, r0, r1
 8008fca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8009210 <UART_SetConfig+0x2cc>)
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d005      	beq.n	8008fe4 <UART_SetConfig+0xa0>
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b8d      	ldr	r3, [pc, #564]	@ (8009214 <UART_SetConfig+0x2d0>)
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d104      	bne.n	8008fee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fe4:	f7fe fd0a 	bl	80079fc <HAL_RCC_GetPCLK2Freq>
 8008fe8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008fec:	e003      	b.n	8008ff6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fee:	f7fe fcf1 	bl	80079d4 <HAL_RCC_GetPCLK1Freq>
 8008ff2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ffa:	69db      	ldr	r3, [r3, #28]
 8008ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009000:	f040 810c 	bne.w	800921c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009008:	2200      	movs	r2, #0
 800900a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800900e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009012:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009016:	4622      	mov	r2, r4
 8009018:	462b      	mov	r3, r5
 800901a:	1891      	adds	r1, r2, r2
 800901c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800901e:	415b      	adcs	r3, r3
 8009020:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009022:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009026:	4621      	mov	r1, r4
 8009028:	eb12 0801 	adds.w	r8, r2, r1
 800902c:	4629      	mov	r1, r5
 800902e:	eb43 0901 	adc.w	r9, r3, r1
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	f04f 0300 	mov.w	r3, #0
 800903a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800903e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009042:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009046:	4690      	mov	r8, r2
 8009048:	4699      	mov	r9, r3
 800904a:	4623      	mov	r3, r4
 800904c:	eb18 0303 	adds.w	r3, r8, r3
 8009050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009054:	462b      	mov	r3, r5
 8009056:	eb49 0303 	adc.w	r3, r9, r3
 800905a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800905e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800906a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800906e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009072:	460b      	mov	r3, r1
 8009074:	18db      	adds	r3, r3, r3
 8009076:	653b      	str	r3, [r7, #80]	@ 0x50
 8009078:	4613      	mov	r3, r2
 800907a:	eb42 0303 	adc.w	r3, r2, r3
 800907e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009080:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009084:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009088:	f7f7 fdae 	bl	8000be8 <__aeabi_uldivmod>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4b61      	ldr	r3, [pc, #388]	@ (8009218 <UART_SetConfig+0x2d4>)
 8009092:	fba3 2302 	umull	r2, r3, r3, r2
 8009096:	095b      	lsrs	r3, r3, #5
 8009098:	011c      	lsls	r4, r3, #4
 800909a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800909e:	2200      	movs	r2, #0
 80090a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80090a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80090ac:	4642      	mov	r2, r8
 80090ae:	464b      	mov	r3, r9
 80090b0:	1891      	adds	r1, r2, r2
 80090b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80090b4:	415b      	adcs	r3, r3
 80090b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80090bc:	4641      	mov	r1, r8
 80090be:	eb12 0a01 	adds.w	sl, r2, r1
 80090c2:	4649      	mov	r1, r9
 80090c4:	eb43 0b01 	adc.w	fp, r3, r1
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090dc:	4692      	mov	sl, r2
 80090de:	469b      	mov	fp, r3
 80090e0:	4643      	mov	r3, r8
 80090e2:	eb1a 0303 	adds.w	r3, sl, r3
 80090e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090ea:	464b      	mov	r3, r9
 80090ec:	eb4b 0303 	adc.w	r3, fp, r3
 80090f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009100:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009104:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009108:	460b      	mov	r3, r1
 800910a:	18db      	adds	r3, r3, r3
 800910c:	643b      	str	r3, [r7, #64]	@ 0x40
 800910e:	4613      	mov	r3, r2
 8009110:	eb42 0303 	adc.w	r3, r2, r3
 8009114:	647b      	str	r3, [r7, #68]	@ 0x44
 8009116:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800911a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800911e:	f7f7 fd63 	bl	8000be8 <__aeabi_uldivmod>
 8009122:	4602      	mov	r2, r0
 8009124:	460b      	mov	r3, r1
 8009126:	4611      	mov	r1, r2
 8009128:	4b3b      	ldr	r3, [pc, #236]	@ (8009218 <UART_SetConfig+0x2d4>)
 800912a:	fba3 2301 	umull	r2, r3, r3, r1
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	2264      	movs	r2, #100	@ 0x64
 8009132:	fb02 f303 	mul.w	r3, r2, r3
 8009136:	1acb      	subs	r3, r1, r3
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800913e:	4b36      	ldr	r3, [pc, #216]	@ (8009218 <UART_SetConfig+0x2d4>)
 8009140:	fba3 2302 	umull	r2, r3, r3, r2
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800914c:	441c      	add	r4, r3
 800914e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009152:	2200      	movs	r2, #0
 8009154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009158:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800915c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	1891      	adds	r1, r2, r2
 8009166:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009168:	415b      	adcs	r3, r3
 800916a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800916c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009170:	4641      	mov	r1, r8
 8009172:	1851      	adds	r1, r2, r1
 8009174:	6339      	str	r1, [r7, #48]	@ 0x30
 8009176:	4649      	mov	r1, r9
 8009178:	414b      	adcs	r3, r1
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
 800917c:	f04f 0200 	mov.w	r2, #0
 8009180:	f04f 0300 	mov.w	r3, #0
 8009184:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009188:	4659      	mov	r1, fp
 800918a:	00cb      	lsls	r3, r1, #3
 800918c:	4651      	mov	r1, sl
 800918e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009192:	4651      	mov	r1, sl
 8009194:	00ca      	lsls	r2, r1, #3
 8009196:	4610      	mov	r0, r2
 8009198:	4619      	mov	r1, r3
 800919a:	4603      	mov	r3, r0
 800919c:	4642      	mov	r2, r8
 800919e:	189b      	adds	r3, r3, r2
 80091a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091a4:	464b      	mov	r3, r9
 80091a6:	460a      	mov	r2, r1
 80091a8:	eb42 0303 	adc.w	r3, r2, r3
 80091ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80091c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091c4:	460b      	mov	r3, r1
 80091c6:	18db      	adds	r3, r3, r3
 80091c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091ca:	4613      	mov	r3, r2
 80091cc:	eb42 0303 	adc.w	r3, r2, r3
 80091d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091da:	f7f7 fd05 	bl	8000be8 <__aeabi_uldivmod>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009218 <UART_SetConfig+0x2d4>)
 80091e4:	fba3 1302 	umull	r1, r3, r3, r2
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	2164      	movs	r1, #100	@ 0x64
 80091ec:	fb01 f303 	mul.w	r3, r1, r3
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	3332      	adds	r3, #50	@ 0x32
 80091f6:	4a08      	ldr	r2, [pc, #32]	@ (8009218 <UART_SetConfig+0x2d4>)
 80091f8:	fba2 2303 	umull	r2, r3, r2, r3
 80091fc:	095b      	lsrs	r3, r3, #5
 80091fe:	f003 0207 	and.w	r2, r3, #7
 8009202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4422      	add	r2, r4
 800920a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800920c:	e106      	b.n	800941c <UART_SetConfig+0x4d8>
 800920e:	bf00      	nop
 8009210:	40011000 	.word	0x40011000
 8009214:	40011400 	.word	0x40011400
 8009218:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800921c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009220:	2200      	movs	r2, #0
 8009222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009226:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800922a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800922e:	4642      	mov	r2, r8
 8009230:	464b      	mov	r3, r9
 8009232:	1891      	adds	r1, r2, r2
 8009234:	6239      	str	r1, [r7, #32]
 8009236:	415b      	adcs	r3, r3
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24
 800923a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800923e:	4641      	mov	r1, r8
 8009240:	1854      	adds	r4, r2, r1
 8009242:	4649      	mov	r1, r9
 8009244:	eb43 0501 	adc.w	r5, r3, r1
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	00eb      	lsls	r3, r5, #3
 8009252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009256:	00e2      	lsls	r2, r4, #3
 8009258:	4614      	mov	r4, r2
 800925a:	461d      	mov	r5, r3
 800925c:	4643      	mov	r3, r8
 800925e:	18e3      	adds	r3, r4, r3
 8009260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009264:	464b      	mov	r3, r9
 8009266:	eb45 0303 	adc.w	r3, r5, r3
 800926a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800927a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800927e:	f04f 0200 	mov.w	r2, #0
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800928a:	4629      	mov	r1, r5
 800928c:	008b      	lsls	r3, r1, #2
 800928e:	4621      	mov	r1, r4
 8009290:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009294:	4621      	mov	r1, r4
 8009296:	008a      	lsls	r2, r1, #2
 8009298:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800929c:	f7f7 fca4 	bl	8000be8 <__aeabi_uldivmod>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4b60      	ldr	r3, [pc, #384]	@ (8009428 <UART_SetConfig+0x4e4>)
 80092a6:	fba3 2302 	umull	r2, r3, r3, r2
 80092aa:	095b      	lsrs	r3, r3, #5
 80092ac:	011c      	lsls	r4, r3, #4
 80092ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80092bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	1891      	adds	r1, r2, r2
 80092c6:	61b9      	str	r1, [r7, #24]
 80092c8:	415b      	adcs	r3, r3
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092d0:	4641      	mov	r1, r8
 80092d2:	1851      	adds	r1, r2, r1
 80092d4:	6139      	str	r1, [r7, #16]
 80092d6:	4649      	mov	r1, r9
 80092d8:	414b      	adcs	r3, r1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092e8:	4659      	mov	r1, fp
 80092ea:	00cb      	lsls	r3, r1, #3
 80092ec:	4651      	mov	r1, sl
 80092ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092f2:	4651      	mov	r1, sl
 80092f4:	00ca      	lsls	r2, r1, #3
 80092f6:	4610      	mov	r0, r2
 80092f8:	4619      	mov	r1, r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	4642      	mov	r2, r8
 80092fe:	189b      	adds	r3, r3, r2
 8009300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009304:	464b      	mov	r3, r9
 8009306:	460a      	mov	r2, r1
 8009308:	eb42 0303 	adc.w	r3, r2, r3
 800930c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800931a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009328:	4649      	mov	r1, r9
 800932a:	008b      	lsls	r3, r1, #2
 800932c:	4641      	mov	r1, r8
 800932e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009332:	4641      	mov	r1, r8
 8009334:	008a      	lsls	r2, r1, #2
 8009336:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800933a:	f7f7 fc55 	bl	8000be8 <__aeabi_uldivmod>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4611      	mov	r1, r2
 8009344:	4b38      	ldr	r3, [pc, #224]	@ (8009428 <UART_SetConfig+0x4e4>)
 8009346:	fba3 2301 	umull	r2, r3, r3, r1
 800934a:	095b      	lsrs	r3, r3, #5
 800934c:	2264      	movs	r2, #100	@ 0x64
 800934e:	fb02 f303 	mul.w	r3, r2, r3
 8009352:	1acb      	subs	r3, r1, r3
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	3332      	adds	r3, #50	@ 0x32
 8009358:	4a33      	ldr	r2, [pc, #204]	@ (8009428 <UART_SetConfig+0x4e4>)
 800935a:	fba2 2303 	umull	r2, r3, r2, r3
 800935e:	095b      	lsrs	r3, r3, #5
 8009360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009364:	441c      	add	r4, r3
 8009366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800936a:	2200      	movs	r2, #0
 800936c:	673b      	str	r3, [r7, #112]	@ 0x70
 800936e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009370:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009374:	4642      	mov	r2, r8
 8009376:	464b      	mov	r3, r9
 8009378:	1891      	adds	r1, r2, r2
 800937a:	60b9      	str	r1, [r7, #8]
 800937c:	415b      	adcs	r3, r3
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009384:	4641      	mov	r1, r8
 8009386:	1851      	adds	r1, r2, r1
 8009388:	6039      	str	r1, [r7, #0]
 800938a:	4649      	mov	r1, r9
 800938c:	414b      	adcs	r3, r1
 800938e:	607b      	str	r3, [r7, #4]
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800939c:	4659      	mov	r1, fp
 800939e:	00cb      	lsls	r3, r1, #3
 80093a0:	4651      	mov	r1, sl
 80093a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093a6:	4651      	mov	r1, sl
 80093a8:	00ca      	lsls	r2, r1, #3
 80093aa:	4610      	mov	r0, r2
 80093ac:	4619      	mov	r1, r3
 80093ae:	4603      	mov	r3, r0
 80093b0:	4642      	mov	r2, r8
 80093b2:	189b      	adds	r3, r3, r2
 80093b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093b6:	464b      	mov	r3, r9
 80093b8:	460a      	mov	r2, r1
 80093ba:	eb42 0303 	adc.w	r3, r2, r3
 80093be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80093ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80093cc:	f04f 0200 	mov.w	r2, #0
 80093d0:	f04f 0300 	mov.w	r3, #0
 80093d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093d8:	4649      	mov	r1, r9
 80093da:	008b      	lsls	r3, r1, #2
 80093dc:	4641      	mov	r1, r8
 80093de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093e2:	4641      	mov	r1, r8
 80093e4:	008a      	lsls	r2, r1, #2
 80093e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80093ea:	f7f7 fbfd 	bl	8000be8 <__aeabi_uldivmod>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009428 <UART_SetConfig+0x4e4>)
 80093f4:	fba3 1302 	umull	r1, r3, r3, r2
 80093f8:	095b      	lsrs	r3, r3, #5
 80093fa:	2164      	movs	r1, #100	@ 0x64
 80093fc:	fb01 f303 	mul.w	r3, r1, r3
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	3332      	adds	r3, #50	@ 0x32
 8009406:	4a08      	ldr	r2, [pc, #32]	@ (8009428 <UART_SetConfig+0x4e4>)
 8009408:	fba2 2303 	umull	r2, r3, r2, r3
 800940c:	095b      	lsrs	r3, r3, #5
 800940e:	f003 020f 	and.w	r2, r3, #15
 8009412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4422      	add	r2, r4
 800941a:	609a      	str	r2, [r3, #8]
}
 800941c:	bf00      	nop
 800941e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009422:	46bd      	mov	sp, r7
 8009424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009428:	51eb851f 	.word	0x51eb851f

0800942c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800942c:	b084      	sub	sp, #16
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	f107 001c 	add.w	r0, r7, #28
 800943a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800943e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009442:	2b01      	cmp	r3, #1
 8009444:	d123      	bne.n	800948e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800945a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800946e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009472:	2b01      	cmp	r3, #1
 8009474:	d105      	bne.n	8009482 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9dc 	bl	8009840 <USB_CoreReset>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]
 800948c:	e01b      	b.n	80094c6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f9d0 	bl	8009840 <USB_CoreReset>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094a4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80094b8:	e005      	b.n	80094c6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094c6:	7fbb      	ldrb	r3, [r7, #30]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d10b      	bne.n	80094e4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f043 0206 	orr.w	r2, r3, #6
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f043 0220 	orr.w	r2, r3, #32
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094f0:	b004      	add	sp, #16
 80094f2:	4770      	bx	lr

080094f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f043 0201 	orr.w	r2, r3, #1
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	f023 0201 	bic.w	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d115      	bne.n	8009586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009566:	200a      	movs	r0, #10
 8009568:	f7fa fb08 	bl	8003b7c <HAL_Delay>
      ms += 10U;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	330a      	adds	r3, #10
 8009570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f956 	bl	8009824 <USB_GetMode>
 8009578:	4603      	mov	r3, r0
 800957a:	2b01      	cmp	r3, #1
 800957c:	d01e      	beq.n	80095bc <USB_SetCurrentMode+0x84>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2bc7      	cmp	r3, #199	@ 0xc7
 8009582:	d9f0      	bls.n	8009566 <USB_SetCurrentMode+0x2e>
 8009584:	e01a      	b.n	80095bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009586:	78fb      	ldrb	r3, [r7, #3]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d115      	bne.n	80095b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009598:	200a      	movs	r0, #10
 800959a:	f7fa faef 	bl	8003b7c <HAL_Delay>
      ms += 10U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	330a      	adds	r3, #10
 80095a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f93d 	bl	8009824 <USB_GetMode>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <USB_SetCurrentMode+0x84>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80095b4:	d9f0      	bls.n	8009598 <USB_SetCurrentMode+0x60>
 80095b6:	e001      	b.n	80095bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e005      	b.n	80095c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2bc8      	cmp	r3, #200	@ 0xc8
 80095c0:	d101      	bne.n	80095c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e000      	b.n	80095c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3301      	adds	r3, #1
 80095e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095ea:	d901      	bls.n	80095f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e01b      	b.n	8009628 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	daf2      	bge.n	80095de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	019b      	lsls	r3, r3, #6
 8009600:	f043 0220 	orr.w	r2, r3, #32
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3301      	adds	r3, #1
 800960c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009614:	d901      	bls.n	800961a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e006      	b.n	8009628 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b20      	cmp	r3, #32
 8009624:	d0f0      	beq.n	8009608 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3714      	adds	r7, #20
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800963c:	2300      	movs	r3, #0
 800963e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800964c:	d901      	bls.n	8009652 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e018      	b.n	8009684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	daf2      	bge.n	8009640 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2210      	movs	r2, #16
 8009662:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3301      	adds	r3, #1
 8009668:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009670:	d901      	bls.n	8009676 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e006      	b.n	8009684 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	f003 0310 	and.w	r3, r3, #16
 800967e:	2b10      	cmp	r3, #16
 8009680:	d0f0      	beq.n	8009664 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009690:	b480      	push	{r7}
 8009692:	b089      	sub	sp, #36	@ 0x24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4611      	mov	r1, r2
 800969c:	461a      	mov	r2, r3
 800969e:	460b      	mov	r3, r1
 80096a0:	71fb      	strb	r3, [r7, #7]
 80096a2:	4613      	mov	r3, r2
 80096a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80096ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d123      	bne.n	80096fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096b6:	88bb      	ldrh	r3, [r7, #4]
 80096b8:	3303      	adds	r3, #3
 80096ba:	089b      	lsrs	r3, r3, #2
 80096bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096be:	2300      	movs	r3, #0
 80096c0:	61bb      	str	r3, [r7, #24]
 80096c2:	e018      	b.n	80096f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	031a      	lsls	r2, r3, #12
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d0:	461a      	mov	r2, r3
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	3301      	adds	r3, #1
 80096dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	3301      	adds	r3, #1
 80096e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	3301      	adds	r3, #1
 80096e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	3301      	adds	r3, #1
 80096ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	3301      	adds	r3, #1
 80096f4:	61bb      	str	r3, [r7, #24]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d3e2      	bcc.n	80096c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3724      	adds	r7, #36	@ 0x24
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800970c:	b480      	push	{r7}
 800970e:	b08b      	sub	sp, #44	@ 0x2c
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009722:	88fb      	ldrh	r3, [r7, #6]
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	b29b      	uxth	r3, r3
 8009728:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009732:	2300      	movs	r3, #0
 8009734:	623b      	str	r3, [r7, #32]
 8009736:	e014      	b.n	8009762 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009742:	601a      	str	r2, [r3, #0]
    pDest++;
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	3301      	adds	r3, #1
 8009748:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	3301      	adds	r3, #1
 800974e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	3301      	adds	r3, #1
 8009754:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	3301      	adds	r3, #1
 800975a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	3301      	adds	r3, #1
 8009760:	623b      	str	r3, [r7, #32]
 8009762:	6a3a      	ldr	r2, [r7, #32]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	429a      	cmp	r2, r3
 8009768:	d3e6      	bcc.n	8009738 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800976a:	8bfb      	ldrh	r3, [r7, #30]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01e      	beq.n	80097ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009770:	2300      	movs	r3, #0
 8009772:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800977a:	461a      	mov	r2, r3
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	fa22 f303 	lsr.w	r3, r2, r3
 8009790:	b2da      	uxtb	r2, r3
 8009792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009794:	701a      	strb	r2, [r3, #0]
      i++;
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	3301      	adds	r3, #1
 800979a:	623b      	str	r3, [r7, #32]
      pDest++;
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	3301      	adds	r3, #1
 80097a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80097a2:	8bfb      	ldrh	r3, [r7, #30]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80097a8:	8bfb      	ldrh	r3, [r7, #30]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1ea      	bne.n	8009784 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	372c      	adds	r7, #44	@ 0x2c
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	4013      	ands	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097d4:	68fb      	ldr	r3, [r7, #12]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	460b      	mov	r3, r1
 80097ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009802:	78fb      	ldrb	r3, [r7, #3]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	4013      	ands	r3, r2
 8009814:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009816:	68bb      	ldr	r3, [r7, #8]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	f003 0301 	and.w	r3, r3, #1
}
 8009834:	4618      	mov	r0, r3
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009858:	d901      	bls.n	800985e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e022      	b.n	80098a4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	daf2      	bge.n	800984c <USB_CoreReset+0xc>

  count = 10U;
 8009866:	230a      	movs	r3, #10
 8009868:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800986a:	e002      	b.n	8009872 <USB_CoreReset+0x32>
  {
    count--;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	3b01      	subs	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1f9      	bne.n	800986c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f043 0201 	orr.w	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3301      	adds	r3, #1
 8009888:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009890:	d901      	bls.n	8009896 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e006      	b.n	80098a4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	f003 0301 	and.w	r3, r3, #1
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d0f0      	beq.n	8009884 <USB_CoreReset+0x44>

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098b0:	b084      	sub	sp, #16
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80098be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098d0:	461a      	mov	r2, r3
 80098d2:	2300      	movs	r3, #0
 80098d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d119      	bne.n	800993a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800990a:	2b01      	cmp	r3, #1
 800990c:	d10a      	bne.n	8009924 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800991c:	f043 0304 	orr.w	r3, r3, #4
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	e014      	b.n	800994e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009932:	f023 0304 	bic.w	r3, r3, #4
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	e009      	b.n	800994e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009948:	f023 0304 	bic.w	r3, r3, #4
 800994c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800994e:	2110      	movs	r1, #16
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff fe3d 	bl	80095d0 <USB_FlushTxFifo>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff fe67 	bl	8009634 <USB_FlushRxFifo>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009970:	2300      	movs	r3, #0
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	e015      	b.n	80099a2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	4413      	add	r3, r2
 800997e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009982:	461a      	mov	r2, r3
 8009984:	f04f 33ff 	mov.w	r3, #4294967295
 8009988:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	4413      	add	r3, r2
 8009992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009996:	461a      	mov	r2, r3
 8009998:	2300      	movs	r3, #0
 800999a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	3301      	adds	r3, #1
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099a6:	461a      	mov	r2, r3
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d3e3      	bcc.n	8009976 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a18      	ldr	r2, [pc, #96]	@ (8009a20 <USB_HostInit+0x170>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d10b      	bne.n	80099dc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099ca:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4a15      	ldr	r2, [pc, #84]	@ (8009a24 <USB_HostInit+0x174>)
 80099d0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a14      	ldr	r2, [pc, #80]	@ (8009a28 <USB_HostInit+0x178>)
 80099d6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80099da:	e009      	b.n	80099f0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2280      	movs	r2, #128	@ 0x80
 80099e0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a11      	ldr	r2, [pc, #68]	@ (8009a2c <USB_HostInit+0x17c>)
 80099e6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a11      	ldr	r2, [pc, #68]	@ (8009a30 <USB_HostInit+0x180>)
 80099ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80099f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d105      	bne.n	8009a04 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	f043 0210 	orr.w	r2, r3, #16
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	699a      	ldr	r2, [r3, #24]
 8009a08:	4b0a      	ldr	r3, [pc, #40]	@ (8009a34 <USB_HostInit+0x184>)
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	4770      	bx	lr
 8009a20:	40040000 	.word	0x40040000
 8009a24:	01000200 	.word	0x01000200
 8009a28:	00e00300 	.word	0x00e00300
 8009a2c:	00600080 	.word	0x00600080
 8009a30:	004000e0 	.word	0x004000e0
 8009a34:	a3200008 	.word	0xa3200008

08009a38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	68f9      	ldr	r1, [r7, #12]
 8009a6c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009a70:	4313      	orrs	r3, r2
 8009a72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d107      	bne.n	8009a8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a80:	461a      	mov	r2, r3
 8009a82:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009a86:	6053      	str	r3, [r2, #4]
 8009a88:	e00c      	b.n	8009aa4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009a8a:	78fb      	ldrb	r3, [r7, #3]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	d107      	bne.n	8009aa0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009a96:	461a      	mov	r2, r3
 8009a98:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009a9c:	6053      	str	r3, [r2, #4]
 8009a9e:	e001      	b.n	8009aa4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e000      	b.n	8009aa6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr

08009ab2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b084      	sub	sp, #16
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009ad2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ae0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009ae2:	2064      	movs	r0, #100	@ 0x64
 8009ae4:	f7fa f84a 	bl	8003b7c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009af4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009af6:	200a      	movs	r0, #10
 8009af8:	f7fa f840 	bl	8003b7c <HAL_Delay>

  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009b06:	b480      	push	{r7}
 8009b08:	b085      	sub	sp, #20
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009b2a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d109      	bne.n	8009b4a <USB_DriveVbus+0x44>
 8009b36:	78fb      	ldrb	r3, [r7, #3]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d106      	bne.n	8009b4a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009b44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009b48:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b54:	d109      	bne.n	8009b6a <USB_DriveVbus+0x64>
 8009b56:	78fb      	ldrb	r3, [r7, #3]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d106      	bne.n	8009b6a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009b64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b68:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	0c5b      	lsrs	r3, r3, #17
 8009b96:	f003 0303 	and.w	r3, r3, #3
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	b29b      	uxth	r3, r3
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b088      	sub	sp, #32
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	4608      	mov	r0, r1
 8009bd2:	4611      	mov	r1, r2
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	70fb      	strb	r3, [r7, #3]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70bb      	strb	r3, [r7, #2]
 8009bde:	4613      	mov	r3, r2
 8009be0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009bea:	78fb      	ldrb	r3, [r7, #3]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d87c      	bhi.n	8009d00 <USB_HC_Init+0x138>
 8009c06:	a201      	add	r2, pc, #4	@ (adr r2, 8009c0c <USB_HC_Init+0x44>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c1d 	.word	0x08009c1d
 8009c10:	08009cc3 	.word	0x08009cc3
 8009c14:	08009c1d 	.word	0x08009c1d
 8009c18:	08009c85 	.word	0x08009c85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009c2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009c30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da10      	bge.n	8009c5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	78fa      	ldrb	r2, [r7, #3]
 8009c48:	0151      	lsls	r1, r2, #5
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	440a      	add	r2, r1
 8009c4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c56:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009c58:	e055      	b.n	8009d06 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a6f      	ldr	r2, [pc, #444]	@ (8009e1c <USB_HC_Init+0x254>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d151      	bne.n	8009d06 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	78fa      	ldrb	r2, [r7, #3]
 8009c72:	0151      	lsls	r1, r2, #5
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	440a      	add	r2, r1
 8009c78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009c80:	60d3      	str	r3, [r2, #12]
      break;
 8009c82:	e040      	b.n	8009d06 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c90:	461a      	mov	r2, r3
 8009c92:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009c96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009c98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da34      	bge.n	8009d0a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	78fa      	ldrb	r2, [r7, #3]
 8009cb0:	0151      	lsls	r1, r2, #5
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	440a      	add	r2, r1
 8009cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cbe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009cc0:	e023      	b.n	8009d0a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009cc2:	78fb      	ldrb	r3, [r7, #3]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f240 2325 	movw	r3, #549	@ 0x225
 8009cd4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009cd6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da17      	bge.n	8009d0e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009cde:	78fb      	ldrb	r3, [r7, #3]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	0151      	lsls	r1, r2, #5
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	440a      	add	r2, r1
 8009cf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009cf8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009cfc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009cfe:	e006      	b.n	8009d0e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	77fb      	strb	r3, [r7, #31]
      break;
 8009d04:	e004      	b.n	8009d10 <USB_HC_Init+0x148>
      break;
 8009d06:	bf00      	nop
 8009d08:	e002      	b.n	8009d10 <USB_HC_Init+0x148>
      break;
 8009d0a:	bf00      	nop
 8009d0c:	e000      	b.n	8009d10 <USB_HC_Init+0x148>
      break;
 8009d0e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009d22:	78fb      	ldrb	r3, [r7, #3]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d3c:	f043 0302 	orr.w	r3, r3, #2
 8009d40:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d48:	699a      	ldr	r2, [r3, #24]
 8009d4a:	78fb      	ldrb	r3, [r7, #3]
 8009d4c:	f003 030f 	and.w	r3, r3, #15
 8009d50:	2101      	movs	r1, #1
 8009d52:	fa01 f303 	lsl.w	r3, r1, r3
 8009d56:	6939      	ldr	r1, [r7, #16]
 8009d58:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009d6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	da03      	bge.n	8009d7c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009d74:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d78:	61bb      	str	r3, [r7, #24]
 8009d7a:	e001      	b.n	8009d80 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7ff fef9 	bl	8009b78 <USB_GetHostSpeed>
 8009d86:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009d88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d106      	bne.n	8009d9e <USB_HC_Init+0x1d6>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d003      	beq.n	8009d9e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009d96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	e001      	b.n	8009da2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009da2:	787b      	ldrb	r3, [r7, #1]
 8009da4:	059b      	lsls	r3, r3, #22
 8009da6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009daa:	78bb      	ldrb	r3, [r7, #2]
 8009dac:	02db      	lsls	r3, r3, #11
 8009dae:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009db2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009db4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009db8:	049b      	lsls	r3, r3, #18
 8009dba:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009dbe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009dc0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009dc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009dc6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	0151      	lsls	r1, r2, #5
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	440a      	add	r2, r1
 8009dd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009ddc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009de0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d003      	beq.n	8009df2 <USB_HC_Init+0x22a>
 8009dea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d10f      	bne.n	8009e12 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009df2:	78fb      	ldrb	r3, [r7, #3]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	78fa      	ldrb	r2, [r7, #3]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e10:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009e12:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3720      	adds	r7, #32
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	40040000 	.word	0x40040000

08009e20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	@ 0x30
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e3c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	4a5d      	ldr	r2, [pc, #372]	@ (8009fb8 <USB_HC_StartXfer+0x198>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d12f      	bne.n	8009ea6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d11c      	bne.n	8009e86 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	7c9b      	ldrb	r3, [r3, #18]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <USB_HC_StartXfer+0x3c>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	7c9b      	ldrb	r3, [r3, #18]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d124      	bne.n	8009ea6 <USB_HC_StartXfer+0x86>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	799b      	ldrb	r3, [r3, #6]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d120      	bne.n	8009ea6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	0151      	lsls	r1, r2, #5
 8009e76:	6a3a      	ldr	r2, [r7, #32]
 8009e78:	440a      	add	r2, r1
 8009e7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e82:	60d3      	str	r3, [r2, #12]
 8009e84:	e00f      	b.n	8009ea6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	791b      	ldrb	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10b      	bne.n	8009ea6 <USB_HC_StartXfer+0x86>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	795b      	ldrb	r3, [r3, #5]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d107      	bne.n	8009ea6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f000 fb6b 	bl	800a578 <USB_DoPing>
        return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e232      	b.n	800a30c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	799b      	ldrb	r3, [r3, #6]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d158      	bne.n	8009f60 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	78db      	ldrb	r3, [r3, #3]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009eba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009ebc:	68ba      	ldr	r2, [r7, #8]
 8009ebe:	8a92      	ldrh	r2, [r2, #20]
 8009ec0:	fb03 f202 	mul.w	r2, r3, r2
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	61da      	str	r2, [r3, #28]
 8009ec8:	e07c      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	7c9b      	ldrb	r3, [r3, #18]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d130      	bne.n	8009f34 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	2bbc      	cmp	r3, #188	@ 0xbc
 8009ed8:	d918      	bls.n	8009f0c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	8a9b      	ldrh	r3, [r3, #20]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	69da      	ldr	r2, [r3, #28]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d003      	beq.n	8009efc <USB_HC_StartXfer+0xdc>
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d103      	bne.n	8009f04 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	2202      	movs	r2, #2
 8009f00:	60da      	str	r2, [r3, #12]
 8009f02:	e05f      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2201      	movs	r2, #1
 8009f08:	60da      	str	r2, [r3, #12]
 8009f0a:	e05b      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	6a1a      	ldr	r2, [r3, #32]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d007      	beq.n	8009f2c <USB_HC_StartXfer+0x10c>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d003      	beq.n	8009f2c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2204      	movs	r2, #4
 8009f28:	60da      	str	r2, [r3, #12]
 8009f2a:	e04b      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2203      	movs	r2, #3
 8009f30:	60da      	str	r2, [r3, #12]
 8009f32:	e047      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009f34:	79fb      	ldrb	r3, [r7, #7]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d10d      	bne.n	8009f56 <USB_HC_StartXfer+0x136>
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	8a92      	ldrh	r2, [r2, #20]
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d907      	bls.n	8009f56 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	8a92      	ldrh	r2, [r2, #20]
 8009f4c:	fb03 f202 	mul.w	r2, r3, r2
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	61da      	str	r2, [r3, #28]
 8009f54:	e036      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6a1a      	ldr	r2, [r3, #32]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	61da      	str	r2, [r3, #28]
 8009f5e:	e031      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d018      	beq.n	8009f9a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	8a92      	ldrh	r2, [r2, #20]
 8009f70:	4413      	add	r3, r2
 8009f72:	3b01      	subs	r3, #1
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	8a92      	ldrh	r2, [r2, #20]
 8009f78:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8009f7e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009f80:	8b7b      	ldrh	r3, [r7, #26]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d90b      	bls.n	8009f9e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009f86:	8b7b      	ldrh	r3, [r7, #26]
 8009f88:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009f8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	8a92      	ldrh	r2, [r2, #20]
 8009f90:	fb03 f202 	mul.w	r2, r3, r2
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	61da      	str	r2, [r3, #28]
 8009f98:	e001      	b.n	8009f9e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	78db      	ldrb	r3, [r3, #3]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009fa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	8a92      	ldrh	r2, [r2, #20]
 8009fac:	fb03 f202 	mul.w	r2, r3, r2
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	61da      	str	r2, [r3, #28]
 8009fb4:	e006      	b.n	8009fc4 <USB_HC_StartXfer+0x1a4>
 8009fb6:	bf00      	nop
 8009fb8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	6a1a      	ldr	r2, [r3, #32]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fcc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009fce:	04d9      	lsls	r1, r3, #19
 8009fd0:	4ba3      	ldr	r3, [pc, #652]	@ (800a260 <USB_HC_StartXfer+0x440>)
 8009fd2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fd4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	7d9b      	ldrb	r3, [r3, #22]
 8009fda:	075b      	lsls	r3, r3, #29
 8009fdc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fe0:	69f9      	ldr	r1, [r7, #28]
 8009fe2:	0148      	lsls	r0, r1, #5
 8009fe4:	6a39      	ldr	r1, [r7, #32]
 8009fe6:	4401      	add	r1, r0
 8009fe8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009fee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d009      	beq.n	800a00a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	6999      	ldr	r1, [r3, #24]
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a006:	460a      	mov	r2, r1
 800a008:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	bf0c      	ite	eq
 800a01a:	2301      	moveq	r3, #1
 800a01c:	2300      	movne	r3, #0
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	015a      	lsls	r2, r3, #5
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	4413      	add	r3, r2
 800a02a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	0151      	lsls	r1, r2, #5
 800a034:	6a3a      	ldr	r2, [r7, #32]
 800a036:	440a      	add	r2, r1
 800a038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a03c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a040:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	015a      	lsls	r2, r3, #5
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	4413      	add	r3, r2
 800a04a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	7e7b      	ldrb	r3, [r7, #25]
 800a052:	075b      	lsls	r3, r3, #29
 800a054:	69f9      	ldr	r1, [r7, #28]
 800a056:	0148      	lsls	r0, r1, #5
 800a058:	6a39      	ldr	r1, [r7, #32]
 800a05a:	4401      	add	r1, r0
 800a05c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a060:	4313      	orrs	r3, r2
 800a062:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	799b      	ldrb	r3, [r3, #6]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	f040 80c3 	bne.w	800a1f4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	7c5b      	ldrb	r3, [r3, #17]
 800a072:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a078:	4313      	orrs	r3, r2
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	0151      	lsls	r1, r2, #5
 800a07e:	6a3a      	ldr	r2, [r7, #32]
 800a080:	440a      	add	r2, r1
 800a082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a08a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	015a      	lsls	r2, r3, #5
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	4413      	add	r3, r2
 800a094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	69fa      	ldr	r2, [r7, #28]
 800a09c:	0151      	lsls	r1, r2, #5
 800a09e:	6a3a      	ldr	r2, [r7, #32]
 800a0a0:	440a      	add	r2, r1
 800a0a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a0aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	79db      	ldrb	r3, [r3, #7]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d123      	bne.n	800a0fc <USB_HC_StartXfer+0x2dc>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	78db      	ldrb	r3, [r3, #3]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d11f      	bne.n	800a0fc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	0151      	lsls	r1, r2, #5
 800a0ce:	6a3a      	ldr	r2, [r7, #32]
 800a0d0:	440a      	add	r2, r1
 800a0d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0da:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a0dc:	69fb      	ldr	r3, [r7, #28]
 800a0de:	015a      	lsls	r2, r3, #5
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	0151      	lsls	r1, r2, #5
 800a0ee:	6a3a      	ldr	r2, [r7, #32]
 800a0f0:	440a      	add	r2, r1
 800a0f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0fa:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	7c9b      	ldrb	r3, [r3, #18]
 800a100:	2b01      	cmp	r3, #1
 800a102:	d003      	beq.n	800a10c <USB_HC_StartXfer+0x2ec>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	7c9b      	ldrb	r3, [r3, #18]
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d117      	bne.n	800a13c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a110:	2b01      	cmp	r3, #1
 800a112:	d113      	bne.n	800a13c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	78db      	ldrb	r3, [r3, #3]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d10f      	bne.n	800a13c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	4413      	add	r3, r2
 800a124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	0151      	lsls	r1, r2, #5
 800a12e:	6a3a      	ldr	r2, [r7, #32]
 800a130:	440a      	add	r2, r1
 800a132:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a13a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	7c9b      	ldrb	r3, [r3, #18]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d162      	bne.n	800a20a <USB_HC_StartXfer+0x3ea>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	78db      	ldrb	r3, [r3, #3]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d15e      	bne.n	800a20a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	3b01      	subs	r3, #1
 800a152:	2b03      	cmp	r3, #3
 800a154:	d858      	bhi.n	800a208 <USB_HC_StartXfer+0x3e8>
 800a156:	a201      	add	r2, pc, #4	@ (adr r2, 800a15c <USB_HC_StartXfer+0x33c>)
 800a158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15c:	0800a16d 	.word	0x0800a16d
 800a160:	0800a18f 	.word	0x0800a18f
 800a164:	0800a1b1 	.word	0x0800a1b1
 800a168:	0800a1d3 	.word	0x0800a1d3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	4413      	add	r3, r2
 800a174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	0151      	lsls	r1, r2, #5
 800a17e:	6a3a      	ldr	r2, [r7, #32]
 800a180:	440a      	add	r2, r1
 800a182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a18a:	6053      	str	r3, [r2, #4]
          break;
 800a18c:	e03d      	b.n	800a20a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	4413      	add	r3, r2
 800a196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	6a3a      	ldr	r2, [r7, #32]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1a8:	f043 030e 	orr.w	r3, r3, #14
 800a1ac:	6053      	str	r3, [r2, #4]
          break;
 800a1ae:	e02c      	b.n	800a20a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	6a3b      	ldr	r3, [r7, #32]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1ce:	6053      	str	r3, [r2, #4]
          break;
 800a1d0:	e01b      	b.n	800a20a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	015a      	lsls	r2, r3, #5
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	4413      	add	r3, r2
 800a1da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	69fa      	ldr	r2, [r7, #28]
 800a1e2:	0151      	lsls	r1, r2, #5
 800a1e4:	6a3a      	ldr	r2, [r7, #32]
 800a1e6:	440a      	add	r2, r1
 800a1e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1f0:	6053      	str	r3, [r2, #4]
          break;
 800a1f2:	e00a      	b.n	800a20a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a200:	461a      	mov	r2, r3
 800a202:	2300      	movs	r3, #0
 800a204:	6053      	str	r3, [r2, #4]
 800a206:	e000      	b.n	800a20a <USB_HC_StartXfer+0x3ea>
          break;
 800a208:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	4413      	add	r3, r2
 800a212:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a220:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	78db      	ldrb	r3, [r3, #3]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d004      	beq.n	800a234 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	e003      	b.n	800a23c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a23a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a242:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a250:	461a      	mov	r2, r3
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d003      	beq.n	800a264 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	e055      	b.n	800a30c <USB_HC_StartXfer+0x4ec>
 800a260:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	78db      	ldrb	r3, [r3, #3]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d14e      	bne.n	800a30a <USB_HC_StartXfer+0x4ea>
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d04a      	beq.n	800a30a <USB_HC_StartXfer+0x4ea>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	79db      	ldrb	r3, [r3, #7]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d146      	bne.n	800a30a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	7c9b      	ldrb	r3, [r3, #18]
 800a280:	2b03      	cmp	r3, #3
 800a282:	d831      	bhi.n	800a2e8 <USB_HC_StartXfer+0x4c8>
 800a284:	a201      	add	r2, pc, #4	@ (adr r2, 800a28c <USB_HC_StartXfer+0x46c>)
 800a286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28a:	bf00      	nop
 800a28c:	0800a29d 	.word	0x0800a29d
 800a290:	0800a2c1 	.word	0x0800a2c1
 800a294:	0800a29d 	.word	0x0800a29d
 800a298:	0800a2c1 	.word	0x0800a2c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	3303      	adds	r3, #3
 800a2a2:	089b      	lsrs	r3, r3, #2
 800a2a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a2a6:	8afa      	ldrh	r2, [r7, #22]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d91c      	bls.n	800a2ec <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	f043 0220 	orr.w	r2, r3, #32
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2be:	e015      	b.n	800a2ec <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	3303      	adds	r3, #3
 800a2c6:	089b      	lsrs	r3, r3, #2
 800a2c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a2ca:	8afa      	ldrh	r2, [r7, #22]
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d90a      	bls.n	800a2f0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	619a      	str	r2, [r3, #24]
        }
        break;
 800a2e6:	e003      	b.n	800a2f0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a2e8:	bf00      	nop
 800a2ea:	e002      	b.n	800a2f2 <USB_HC_StartXfer+0x4d2>
        break;
 800a2ec:	bf00      	nop
 800a2ee:	e000      	b.n	800a2f2 <USB_HC_StartXfer+0x4d2>
        break;
 800a2f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6999      	ldr	r1, [r3, #24]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	785a      	ldrb	r2, [r3, #1]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	2000      	movs	r0, #0
 800a302:	9000      	str	r0, [sp, #0]
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f7ff f9c3 	bl	8009690 <USB_WritePacket>
  }

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3728      	adds	r7, #40	@ 0x28
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	b29b      	uxth	r3, r3
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a336:	b480      	push	{r7}
 800a338:	b089      	sub	sp, #36	@ 0x24
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	4413      	add	r3, r2
 800a356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	0c9b      	lsrs	r3, r3, #18
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	015a      	lsls	r2, r3, #5
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	4413      	add	r3, r2
 800a36c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	0fdb      	lsrs	r3, r3, #31
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	4413      	add	r3, r2
 800a382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	0fdb      	lsrs	r3, r3, #31
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f003 0320 	and.w	r3, r3, #32
 800a398:	2b20      	cmp	r3, #32
 800a39a:	d10d      	bne.n	800a3b8 <USB_HC_Halt+0x82>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <USB_HC_Halt+0x82>
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d005      	beq.n	800a3b4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d002      	beq.n	800a3b4 <USB_HC_Halt+0x7e>
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d101      	bne.n	800a3b8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e0d8      	b.n	800a56a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <USB_HC_Halt+0x8e>
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d173      	bne.n	800a4ac <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	0151      	lsls	r1, r2, #5
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	440a      	add	r2, r1
 800a3da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a3de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 0320 	and.w	r3, r3, #32
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d14a      	bne.n	800a486 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d133      	bne.n	800a464 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	015a      	lsls	r2, r3, #5
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	4413      	add	r3, r2
 800a404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	0151      	lsls	r1, r2, #5
 800a40e:	69fa      	ldr	r2, [r7, #28]
 800a410:	440a      	add	r2, r1
 800a412:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a416:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a41a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	4413      	add	r3, r2
 800a424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	440a      	add	r2, r1
 800a432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a43a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3301      	adds	r3, #1
 800a440:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a448:	d82e      	bhi.n	800a4a8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	015a      	lsls	r2, r3, #5
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4413      	add	r3, r2
 800a452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a45c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a460:	d0ec      	beq.n	800a43c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a462:	e081      	b.n	800a568 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	69ba      	ldr	r2, [r7, #24]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	69fa      	ldr	r2, [r7, #28]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a47e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a482:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a484:	e070      	b.n	800a568 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	015a      	lsls	r2, r3, #5
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	4413      	add	r3, r2
 800a48e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	0151      	lsls	r1, r2, #5
 800a498:	69fa      	ldr	r2, [r7, #28]
 800a49a:	440a      	add	r2, r1
 800a49c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a4a4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4a6:	e05f      	b.n	800a568 <USB_HC_Halt+0x232>
            break;
 800a4a8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4aa:	e05d      	b.n	800a568 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69ba      	ldr	r2, [r7, #24]
 800a4bc:	0151      	lsls	r1, r2, #5
 800a4be:	69fa      	ldr	r2, [r7, #28]
 800a4c0:	440a      	add	r2, r1
 800a4c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4ca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d133      	bne.n	800a544 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	69fa      	ldr	r2, [r7, #28]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	4413      	add	r3, r2
 800a504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	69ba      	ldr	r2, [r7, #24]
 800a50c:	0151      	lsls	r1, r2, #5
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	440a      	add	r2, r1
 800a512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a516:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a51a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	3301      	adds	r3, #1
 800a520:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a528:	d81d      	bhi.n	800a566 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	4413      	add	r3, r2
 800a532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a53c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a540:	d0ec      	beq.n	800a51c <USB_HC_Halt+0x1e6>
 800a542:	e011      	b.n	800a568 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a55e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	e000      	b.n	800a568 <USB_HC_Halt+0x232>
          break;
 800a566:	bf00      	nop
    }
  }

  return HAL_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3724      	adds	r7, #36	@ 0x24
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a578:	b480      	push	{r7}
 800a57a:	b087      	sub	sp, #28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a588:	78fb      	ldrb	r3, [r7, #3]
 800a58a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a58c:	2301      	movs	r3, #1
 800a58e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	04da      	lsls	r2, r3, #19
 800a594:	4b15      	ldr	r3, [pc, #84]	@ (800a5ec <USB_DoPing+0x74>)
 800a596:	4013      	ands	r3, r2
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	1ff80000 	.word	0x1ff80000

0800a5f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7fe ff86 	bl	8009516 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a60a:	2110      	movs	r1, #16
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fe ffdf 	bl	80095d0 <USB_FlushTxFifo>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7ff f809 	bl	8009634 <USB_FlushRxFifo>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d001      	beq.n	800a62c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a62c:	2300      	movs	r3, #0
 800a62e:	61bb      	str	r3, [r7, #24]
 800a630:	e01f      	b.n	800a672 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	015a      	lsls	r2, r3, #5
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	4413      	add	r3, r2
 800a63a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a648:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a650:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a658:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	4413      	add	r3, r2
 800a662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a666:	461a      	mov	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	3301      	adds	r3, #1
 800a670:	61bb      	str	r3, [r7, #24]
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b0f      	cmp	r3, #15
 800a676:	d9dc      	bls.n	800a632 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a678:	2300      	movs	r3, #0
 800a67a:	61bb      	str	r3, [r7, #24]
 800a67c:	e034      	b.n	800a6e8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	4413      	add	r3, r2
 800a686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a694:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a69c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a6a4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	015a      	lsls	r2, r3, #5
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6c4:	d80c      	bhi.n	800a6e0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6dc:	d0ec      	beq.n	800a6b8 <USB_StopHost+0xc8>
 800a6de:	e000      	b.n	800a6e2 <USB_StopHost+0xf2>
        break;
 800a6e0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	2b0f      	cmp	r3, #15
 800a6ec:	d9c7      	bls.n	800a67e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a702:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7fe fef5 	bl	80094f4 <USB_EnableGlobalInt>

  return ret;
 800a70a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3720      	adds	r7, #32
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a714:	b590      	push	{r4, r7, lr}
 800a716:	b089      	sub	sp, #36	@ 0x24
 800a718:	af04      	add	r7, sp, #16
 800a71a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a71c:	2301      	movs	r3, #1
 800a71e:	2202      	movs	r2, #2
 800a720:	2102      	movs	r1, #2
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fcb7 	bl	800b096 <USBH_FindInterface>
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	2bff      	cmp	r3, #255	@ 0xff
 800a730:	d002      	beq.n	800a738 <USBH_CDC_InterfaceInit+0x24>
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d901      	bls.n	800a73c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a738:	2302      	movs	r3, #2
 800a73a:	e13d      	b.n	800a9b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fc8c 	bl	800b05e <USBH_SelectInterface>
 800a746:	4603      	mov	r3, r0
 800a748:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a74a:	7bbb      	ldrb	r3, [r7, #14]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a750:	2302      	movs	r3, #2
 800a752:	e131      	b.n	800a9b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a75a:	2050      	movs	r0, #80	@ 0x50
 800a75c:	f006 ffd8 	bl	8011710 <malloc>
 800a760:	4603      	mov	r3, r0
 800a762:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a774:	2302      	movs	r3, #2
 800a776:	e11f      	b.n	800a9b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a778:	2250      	movs	r2, #80	@ 0x50
 800a77a:	2100      	movs	r1, #0
 800a77c:	68b8      	ldr	r0, [r7, #8]
 800a77e:	f008 fce4 	bl	801314a <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a782:	7bfb      	ldrb	r3, [r7, #15]
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	211a      	movs	r1, #26
 800a788:	fb01 f303 	mul.w	r3, r1, r3
 800a78c:	4413      	add	r3, r2
 800a78e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	b25b      	sxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	da15      	bge.n	800a7c6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	211a      	movs	r1, #26
 800a7a0:	fb01 f303 	mul.w	r3, r1, r3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a7b0:	7bfb      	ldrb	r3, [r7, #15]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	211a      	movs	r1, #26
 800a7b6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a7c0:	881a      	ldrh	r2, [r3, #0]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	785b      	ldrb	r3, [r3, #1]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f002 f904 	bl	800c9da <USBH_AllocPipe>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	7858      	ldrb	r0, [r3, #1]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	8952      	ldrh	r2, [r2, #10]
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	9201      	str	r2, [sp, #4]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f002 f8bc 	bl	800c97c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	2200      	movs	r2, #0
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f006 fef1 	bl	80115f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a812:	2300      	movs	r3, #0
 800a814:	2200      	movs	r2, #0
 800a816:	210a      	movs	r1, #10
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 fc3c 	bl	800b096 <USBH_FindInterface>
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	2bff      	cmp	r3, #255	@ 0xff
 800a826:	d002      	beq.n	800a82e <USBH_CDC_InterfaceInit+0x11a>
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d901      	bls.n	800a832 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a82e:	2302      	movs	r3, #2
 800a830:	e0c2      	b.n	800a9b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	211a      	movs	r1, #26
 800a838:	fb01 f303 	mul.w	r3, r1, r3
 800a83c:	4413      	add	r3, r2
 800a83e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	b25b      	sxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	da16      	bge.n	800a878 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	211a      	movs	r1, #26
 800a850:	fb01 f303 	mul.w	r3, r1, r3
 800a854:	4413      	add	r3, r2
 800a856:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a85a:	781a      	ldrb	r2, [r3, #0]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	211a      	movs	r1, #26
 800a866:	fb01 f303 	mul.w	r3, r1, r3
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a870:	881a      	ldrh	r2, [r3, #0]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	835a      	strh	r2, [r3, #26]
 800a876:	e015      	b.n	800a8a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	211a      	movs	r1, #26
 800a87e:	fb01 f303 	mul.w	r3, r1, r3
 800a882:	4413      	add	r3, r2
 800a884:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a888:	781a      	ldrb	r2, [r3, #0]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	211a      	movs	r1, #26
 800a894:	fb01 f303 	mul.w	r3, r1, r3
 800a898:	4413      	add	r3, r2
 800a89a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a89e:	881a      	ldrh	r2, [r3, #0]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	211a      	movs	r1, #26
 800a8aa:	fb01 f303 	mul.w	r3, r1, r3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	b25b      	sxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	da16      	bge.n	800a8ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	211a      	movs	r1, #26
 800a8c2:	fb01 f303 	mul.w	r3, r1, r3
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8cc:	781a      	ldrb	r2, [r3, #0]
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	211a      	movs	r1, #26
 800a8d8:	fb01 f303 	mul.w	r3, r1, r3
 800a8dc:	4413      	add	r3, r2
 800a8de:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a8e2:	881a      	ldrh	r2, [r3, #0]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	835a      	strh	r2, [r3, #26]
 800a8e8:	e015      	b.n	800a916 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	211a      	movs	r1, #26
 800a8f0:	fb01 f303 	mul.w	r3, r1, r3
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800a8fa:	781a      	ldrb	r2, [r3, #0]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	211a      	movs	r1, #26
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800a910:	881a      	ldrh	r2, [r3, #0]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	7b9b      	ldrb	r3, [r3, #14]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f002 f85c 	bl	800c9da <USBH_AllocPipe>
 800a922:	4603      	mov	r3, r0
 800a924:	461a      	mov	r2, r3
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	7bdb      	ldrb	r3, [r3, #15]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f002 f852 	bl	800c9da <USBH_AllocPipe>
 800a936:	4603      	mov	r3, r0
 800a938:	461a      	mov	r2, r3
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	7b59      	ldrb	r1, [r3, #13]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	7b98      	ldrb	r0, [r3, #14]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	8b12      	ldrh	r2, [r2, #24]
 800a956:	9202      	str	r2, [sp, #8]
 800a958:	2202      	movs	r2, #2
 800a95a:	9201      	str	r2, [sp, #4]
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	4623      	mov	r3, r4
 800a960:	4602      	mov	r2, r0
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f002 f80a 	bl	800c97c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	7b19      	ldrb	r1, [r3, #12]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	7bd8      	ldrb	r0, [r3, #15]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	8b52      	ldrh	r2, [r2, #26]
 800a980:	9202      	str	r2, [sp, #8]
 800a982:	2202      	movs	r2, #2
 800a984:	9201      	str	r2, [sp, #4]
 800a986:	9300      	str	r3, [sp, #0]
 800a988:	4623      	mov	r3, r4
 800a98a:	4602      	mov	r2, r0
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fff5 	bl	800c97c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	7b5b      	ldrb	r3, [r3, #13]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f006 fe26 	bl	80115f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	7b1b      	ldrb	r3, [r3, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f006 fe1f 	bl	80115f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd90      	pop	{r4, r7, pc}

0800a9c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00e      	beq.n	800a9f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f001 ffea 	bl	800c9ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f002 f815 	bl	800ca1c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	7b1b      	ldrb	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00e      	beq.n	800aa1e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	7b1b      	ldrb	r3, [r3, #12]
 800aa04:	4619      	mov	r1, r3
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 ffd7 	bl	800c9ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	7b1b      	ldrb	r3, [r3, #12]
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f002 f802 	bl	800ca1c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	7b5b      	ldrb	r3, [r3, #13]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00e      	beq.n	800aa44 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	7b5b      	ldrb	r3, [r3, #13]
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f001 ffc4 	bl	800c9ba <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	7b5b      	ldrb	r3, [r3, #13]
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 ffef 	bl	800ca1c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa4a:	69db      	ldr	r3, [r3, #28]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00b      	beq.n	800aa68 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f006 fe61 	bl	8011720 <free>
    phost->pActiveClass->pData = 0U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa64:	2200      	movs	r2, #0
 800aa66:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	3340      	adds	r3, #64	@ 0x40
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 f8b1 	bl	800abf2 <GetLineCoding>
 800aa90:	4603      	mov	r3, r0
 800aa92:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d105      	bne.n	800aaa6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aaa0:	2102      	movs	r1, #2
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aaa6:	7afb      	ldrb	r3, [r7, #11]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aac6:	69db      	ldr	r3, [r3, #28]
 800aac8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	d877      	bhi.n	800abc4 <USBH_CDC_Process+0x114>
 800aad4:	a201      	add	r2, pc, #4	@ (adr r2, 800aadc <USBH_CDC_Process+0x2c>)
 800aad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aada:	bf00      	nop
 800aadc:	0800aaf1 	.word	0x0800aaf1
 800aae0:	0800aaf7 	.word	0x0800aaf7
 800aae4:	0800ab27 	.word	0x0800ab27
 800aae8:	0800ab9b 	.word	0x0800ab9b
 800aaec:	0800aba9 	.word	0x0800aba9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf4:	e06d      	b.n	800abd2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f897 	bl	800ac30 <SetLineCoding>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d104      	bne.n	800ab16 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab14:	e058      	b.n	800abc8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d055      	beq.n	800abc8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2204      	movs	r2, #4
 800ab20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ab24:	e050      	b.n	800abc8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	3340      	adds	r3, #64	@ 0x40
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f860 	bl	800abf2 <GetLineCoding>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d126      	bne.n	800ab8a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab4e:	791b      	ldrb	r3, [r3, #4]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d13b      	bne.n	800abcc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab5e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d133      	bne.n	800abcc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab6e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d12b      	bne.n	800abcc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab7c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d124      	bne.n	800abcc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 f96a 	bl	800ae5c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab88:	e020      	b.n	800abcc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d01d      	beq.n	800abcc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2204      	movs	r2, #4
 800ab94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ab98:	e018      	b.n	800abcc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f867 	bl	800ac6e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8e6 	bl	800ad72 <CDC_ProcessReception>
      break;
 800aba6:	e014      	b.n	800abd2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800aba8:	2100      	movs	r1, #0
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 f8f8 	bl	800bda0 <USBH_ClrFeature>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10a      	bne.n	800abd0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800abc2:	e005      	b.n	800abd0 <USBH_CDC_Process+0x120>

    default:
      break;
 800abc4:	bf00      	nop
 800abc6:	e004      	b.n	800abd2 <USBH_CDC_Process+0x122>
      break;
 800abc8:	bf00      	nop
 800abca:	e002      	b.n	800abd2 <USBH_CDC_Process+0x122>
      break;
 800abcc:	bf00      	nop
 800abce:	e000      	b.n	800abd2 <USBH_CDC_Process+0x122>
      break;
 800abd0:	bf00      	nop

  }

  return status;
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	22a1      	movs	r2, #161	@ 0xa1
 800ac00:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2221      	movs	r2, #33	@ 0x21
 800ac06:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2207      	movs	r2, #7
 800ac18:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2207      	movs	r2, #7
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 fbf1 	bl	800c408 <USBH_CtlReq>
 800ac26:	4603      	mov	r3, r0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2221      	movs	r2, #33	@ 0x21
 800ac3e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2220      	movs	r2, #32
 800ac44:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2207      	movs	r2, #7
 800ac56:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2207      	movs	r2, #7
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f001 fbd2 	bl	800c408 <USBH_CtlReq>
 800ac64:	4603      	mov	r3, r0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b086      	sub	sp, #24
 800ac72:	af02      	add	r7, sp, #8
 800ac74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac80:	2300      	movs	r3, #0
 800ac82:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d002      	beq.n	800ac94 <CDC_ProcessTransmission+0x26>
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d023      	beq.n	800acda <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ac92:	e06a      	b.n	800ad6a <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	8b12      	ldrh	r2, [r2, #24]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d90b      	bls.n	800acb8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	69d9      	ldr	r1, [r3, #28]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	8b1a      	ldrh	r2, [r3, #24]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	7b5b      	ldrb	r3, [r3, #13]
 800acac:	2001      	movs	r0, #1
 800acae:	9000      	str	r0, [sp, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f001 fe20 	bl	800c8f6 <USBH_BulkSendData>
 800acb6:	e00b      	b.n	800acd0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	7b5b      	ldrb	r3, [r3, #13]
 800acc6:	2001      	movs	r0, #1
 800acc8:	9000      	str	r0, [sp, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f001 fe13 	bl	800c8f6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800acd8:	e047      	b.n	800ad6a <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	7b5b      	ldrb	r3, [r3, #13]
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f006 fc5d 	bl	80115a0 <USBH_LL_GetURBState>
 800ace6:	4603      	mov	r3, r0
 800ace8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800acea:	7afb      	ldrb	r3, [r7, #11]
 800acec:	2b01      	cmp	r3, #1
 800acee:	d12e      	bne.n	800ad4e <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	8b12      	ldrh	r2, [r2, #24]
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d90e      	bls.n	800ad1a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	8b12      	ldrh	r2, [r2, #24]
 800ad04:	1a9a      	subs	r2, r3, r2
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	8b12      	ldrh	r2, [r2, #24]
 800ad12:	441a      	add	r2, r3
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	61da      	str	r2, [r3, #28]
 800ad18:	e002      	b.n	800ad20 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d004      	beq.n	800ad32 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800ad30:	e006      	b.n	800ad40 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f87a 	bl	800ae34 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ad40:	2300      	movs	r3, #0
 800ad42:	2200      	movs	r2, #0
 800ad44:	2104      	movs	r1, #4
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 feb6 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800ad4c:	e00c      	b.n	800ad68 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 800ad4e:	7afb      	ldrb	r3, [r7, #11]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d109      	bne.n	800ad68 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2201      	movs	r2, #1
 800ad58:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2104      	movs	r1, #4
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f000 fea8 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800ad68:	bf00      	nop
  }
}
 800ad6a:	bf00      	nop
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d002      	beq.n	800ad98 <CDC_ProcessReception+0x26>
 800ad92:	2b04      	cmp	r3, #4
 800ad94:	d00e      	beq.n	800adb4 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800ad96:	e049      	b.n	800ae2c <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	6a19      	ldr	r1, [r3, #32]
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	8b5a      	ldrh	r2, [r3, #26]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	7b1b      	ldrb	r3, [r3, #12]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 fdcb 	bl	800c940 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2204      	movs	r2, #4
 800adae:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800adb2:	e03b      	b.n	800ae2c <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	7b1b      	ldrb	r3, [r3, #12]
 800adb8:	4619      	mov	r1, r3
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f006 fbf0 	bl	80115a0 <USBH_LL_GetURBState>
 800adc0:	4603      	mov	r3, r0
 800adc2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800adc4:	7cfb      	ldrb	r3, [r7, #19]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d12f      	bne.n	800ae2a <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	7b1b      	ldrb	r3, [r3, #12]
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f006 fb53 	bl	801147c <USBH_LL_GetLastXferSize>
 800add6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d016      	beq.n	800ae10 <CDC_ProcessReception+0x9e>
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	8b5b      	ldrh	r3, [r3, #26]
 800ade6:	461a      	mov	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4293      	cmp	r3, r2
 800adec:	d110      	bne.n	800ae10 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	1ad2      	subs	r2, r2, r3
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	6a1a      	ldr	r2, [r3, #32]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	441a      	add	r2, r3
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	2203      	movs	r2, #3
 800ae0a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800ae0e:	e006      	b.n	800ae1e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f815 	bl	800ae48 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2200      	movs	r2, #0
 800ae22:	2104      	movs	r1, #4
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fe47 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800ae2a:	bf00      	nop
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ae84:	2302      	movs	r3, #2
 800ae86:	e044      	b.n	800af12 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	79fa      	ldrb	r2, [r7, #7]
 800ae8c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f000 f841 	bl	800af28 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800aed4:	2200      	movs	r2, #0
 800aed6:	2104      	movs	r1, #4
 800aed8:	2010      	movs	r0, #16
 800aeda:	f001 ff5a 	bl	800cd92 <osMessageQueueNew>
 800aede:	4602      	mov	r2, r0
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800aee6:	4b0d      	ldr	r3, [pc, #52]	@ (800af1c <USBH_Init+0xac>)
 800aee8:	4a0d      	ldr	r2, [pc, #52]	@ (800af20 <USBH_Init+0xb0>)
 800aeea:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800aeec:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <USBH_Init+0xac>)
 800aeee:	2280      	movs	r2, #128	@ 0x80
 800aef0:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800aef2:	4b0a      	ldr	r3, [pc, #40]	@ (800af1c <USBH_Init+0xac>)
 800aef4:	2218      	movs	r2, #24
 800aef6:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800aef8:	4a08      	ldr	r2, [pc, #32]	@ (800af1c <USBH_Init+0xac>)
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	4809      	ldr	r0, [pc, #36]	@ (800af24 <USBH_Init+0xb4>)
 800aefe:	f001 fe9b 	bl	800cc38 <osThreadNew>
 800af02:	4602      	mov	r2, r0
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f006 fa02 	bl	8011314 <USBH_LL_Init>

  return USBH_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20002710 	.word	0x20002710
 800af20:	08016604 	.word	0x08016604
 800af24:	0800bb01 	.word	0x0800bb01

0800af28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	e009      	b.n	800af4a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	33e0      	adds	r3, #224	@ 0xe0
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	2200      	movs	r2, #0
 800af42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3301      	adds	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b0f      	cmp	r3, #15
 800af4e:	d9f2      	bls.n	800af36 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	e009      	b.n	800af6a <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800af60:	2200      	movs	r2, #0
 800af62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af70:	d3f1      	bcc.n	800af56 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2200      	movs	r2, #0
 800af76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2240      	movs	r2, #64	@ 0x40
 800af96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	331c      	adds	r3, #28
 800afc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f008 f8be 	bl	801314a <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800afd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afd8:	2100      	movs	r1, #0
 800afda:	4618      	mov	r0, r3
 800afdc:	f008 f8b5 	bl	801314a <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800afe6:	2212      	movs	r2, #18
 800afe8:	2100      	movs	r1, #0
 800afea:	4618      	mov	r0, r3
 800afec:	f008 f8ad 	bl	801314a <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aff6:	223e      	movs	r2, #62	@ 0x3e
 800aff8:	2100      	movs	r1, #0
 800affa:	4618      	mov	r0, r3
 800affc:	f008 f8a5 	bl	801314a <memset>

  return USBH_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b00a:	b480      	push	{r7}
 800b00c:	b085      	sub	sp, #20
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b014:	2300      	movs	r3, #0
 800b016:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d016      	beq.n	800b04c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10e      	bne.n	800b046 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b02e:	1c59      	adds	r1, r3, #1
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	33de      	adds	r3, #222	@ 0xde
 800b03a:	6839      	ldr	r1, [r7, #0]
 800b03c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
 800b044:	e004      	b.n	800b050 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b046:	2302      	movs	r3, #2
 800b048:	73fb      	strb	r3, [r7, #15]
 800b04a:	e001      	b.n	800b050 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b04c:	2302      	movs	r3, #2
 800b04e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3714      	adds	r7, #20
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b05e:	b480      	push	{r7}
 800b060:	b085      	sub	sp, #20
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	460b      	mov	r3, r1
 800b068:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	429a      	cmp	r2, r3
 800b078:	d204      	bcs.n	800b084 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	78fa      	ldrb	r2, [r7, #3]
 800b07e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b082:	e001      	b.n	800b088 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b084:	2302      	movs	r3, #2
 800b086:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b088:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3714      	adds	r7, #20
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr

0800b096 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b096:	b480      	push	{r7}
 800b098:	b087      	sub	sp, #28
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
 800b09e:	4608      	mov	r0, r1
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	70fb      	strb	r3, [r7, #3]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	70bb      	strb	r3, [r7, #2]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b0be:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b0c0:	e025      	b.n	800b10e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	221a      	movs	r2, #26
 800b0c6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	3302      	adds	r3, #2
 800b0d2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	795b      	ldrb	r3, [r3, #5]
 800b0d8:	78fa      	ldrb	r2, [r7, #3]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d002      	beq.n	800b0e4 <USBH_FindInterface+0x4e>
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	2bff      	cmp	r3, #255	@ 0xff
 800b0e2:	d111      	bne.n	800b108 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b0e8:	78ba      	ldrb	r2, [r7, #2]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d002      	beq.n	800b0f4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0ee:	78bb      	ldrb	r3, [r7, #2]
 800b0f0:	2bff      	cmp	r3, #255	@ 0xff
 800b0f2:	d109      	bne.n	800b108 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b0f8:	787a      	ldrb	r2, [r7, #1]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d002      	beq.n	800b104 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b0fe:	787b      	ldrb	r3, [r7, #1]
 800b100:	2bff      	cmp	r3, #255	@ 0xff
 800b102:	d101      	bne.n	800b108 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	e006      	b.n	800b116 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b108:	7dfb      	ldrb	r3, [r7, #23]
 800b10a:	3301      	adds	r3, #1
 800b10c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d9d6      	bls.n	800b0c2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b114:	23ff      	movs	r3, #255	@ 0xff
}
 800b116:	4618      	mov	r0, r3
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f006 f92e 	bl	801138c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b130:	2101      	movs	r1, #1
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f006 fa47 	bl	80115c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af04      	add	r7, sp, #16
 800b14a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b14c:	2302      	movs	r3, #2
 800b14e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d102      	bne.n	800b166 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2203      	movs	r2, #3
 800b164:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b0b      	cmp	r3, #11
 800b16e:	f200 81f5 	bhi.w	800b55c <USBH_Process+0x418>
 800b172:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <USBH_Process+0x34>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b1a9 	.word	0x0800b1a9
 800b17c:	0800b1e7 	.word	0x0800b1e7
 800b180:	0800b25d 	.word	0x0800b25d
 800b184:	0800b4eb 	.word	0x0800b4eb
 800b188:	0800b55d 	.word	0x0800b55d
 800b18c:	0800b309 	.word	0x0800b309
 800b190:	0800b485 	.word	0x0800b485
 800b194:	0800b34b 	.word	0x0800b34b
 800b198:	0800b377 	.word	0x0800b377
 800b19c:	0800b39f 	.word	0x0800b39f
 800b1a0:	0800b3ed 	.word	0x0800b3ed
 800b1a4:	0800b4d3 	.word	0x0800b4d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 81d5 	beq.w	800b560 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b1bc:	20c8      	movs	r0, #200	@ 0xc8
 800b1be:	f006 fa4c 	bl	801165a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f006 f93f 	bl	8011446 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2101      	movs	r1, #1
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fc6a 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b1e4:	e1bc      	b.n	800b560 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d107      	bne.n	800b202 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2202      	movs	r2, #2
 800b1fe:	701a      	strb	r2, [r3, #0]
 800b200:	e025      	b.n	800b24e <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b208:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b20c:	d914      	bls.n	800b238 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b214:	3301      	adds	r3, #1
 800b216:	b2da      	uxtb	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b224:	2b03      	cmp	r3, #3
 800b226:	d903      	bls.n	800b230 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	220d      	movs	r2, #13
 800b22c:	701a      	strb	r2, [r3, #0]
 800b22e:	e00e      	b.n	800b24e <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e00a      	b.n	800b24e <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b23e:	f103 020a 	add.w	r2, r3, #10
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b248:	200a      	movs	r0, #10
 800b24a:	f006 fa06 	bl	801165a <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b24e:	2300      	movs	r3, #0
 800b250:	2200      	movs	r2, #0
 800b252:	2101      	movs	r1, #1
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fc2f 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b25a:	e188      	b.n	800b56e <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d005      	beq.n	800b272 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b26c:	2104      	movs	r1, #4
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b272:	2064      	movs	r0, #100	@ 0x64
 800b274:	f006 f9f1 	bl	801165a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f006 f8bd 	bl	80113f8 <USBH_LL_GetSpeed>
 800b27e:	4603      	mov	r3, r0
 800b280:	461a      	mov	r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2205      	movs	r2, #5
 800b28c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b28e:	2100      	movs	r1, #0
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f001 fba2 	bl	800c9da <USBH_AllocPipe>
 800b296:	4603      	mov	r3, r0
 800b298:	461a      	mov	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b29e:	2180      	movs	r1, #128	@ 0x80
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fb9a 	bl	800c9da <USBH_AllocPipe>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7919      	ldrb	r1, [r3, #4]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b2c2:	9202      	str	r2, [sp, #8]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	9201      	str	r2, [sp, #4]
 800b2c8:	9300      	str	r3, [sp, #0]
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2280      	movs	r2, #128	@ 0x80
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f001 fb54 	bl	800c97c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7959      	ldrb	r1, [r3, #5]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b2e8:	9202      	str	r2, [sp, #8]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	9201      	str	r2, [sp, #4]
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fb41 	bl	800c97c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2101      	movs	r1, #1
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fbd9 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b306:	e132      	b.n	800b56e <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f935 	bl	800b578 <USBH_HandleEnum>
 800b30e:	4603      	mov	r3, r0
 800b310:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b312:	7bbb      	ldrb	r3, [r7, #14]
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	f040 8124 	bne.w	800b564 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d103      	bne.n	800b336 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2208      	movs	r2, #8
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	e002      	b.n	800b33c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2207      	movs	r2, #7
 800b33a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b33c:	2300      	movs	r3, #0
 800b33e:	2200      	movs	r2, #0
 800b340:	2105      	movs	r1, #5
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fbb8 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b348:	e10c      	b.n	800b564 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 8109 	beq.w	800b568 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b35c:	2101      	movs	r1, #1
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2208      	movs	r2, #8
 800b366:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b368:	2300      	movs	r3, #0
 800b36a:	2200      	movs	r2, #0
 800b36c:	2105      	movs	r1, #5
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fba2 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 800b374:	e0f8      	b.n	800b568 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fcc7 	bl	800bd12 <USBH_SetCfg>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2209      	movs	r2, #9
 800b38e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b390:	2300      	movs	r3, #0
 800b392:	2200      	movs	r2, #0
 800b394:	2101      	movs	r1, #1
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fb8e 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b39c:	e0e7      	b.n	800b56e <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b3a4:	f003 0320 	and.w	r3, r3, #32
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d015      	beq.n	800b3d8 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 fcd2 	bl	800bd58 <USBH_SetFeature>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d103      	bne.n	800b3c8 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	220a      	movs	r2, #10
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e00a      	b.n	800b3de <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d106      	bne.n	800b3de <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	220a      	movs	r2, #10
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	e002      	b.n	800b3de <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	220a      	movs	r2, #10
 800b3dc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b3de:	2300      	movs	r3, #0
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	2101      	movs	r1, #1
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fb67 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b3ea:	e0c0      	b.n	800b56e <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d03f      	beq.n	800b476 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b3fe:	2300      	movs	r3, #0
 800b400:	73fb      	strb	r3, [r7, #15]
 800b402:	e016      	b.n	800b432 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b404:	7bfa      	ldrb	r2, [r7, #15]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	32de      	adds	r2, #222	@ 0xde
 800b40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40e:	791a      	ldrb	r2, [r3, #4]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b416:	429a      	cmp	r2, r3
 800b418:	d108      	bne.n	800b42c <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b41a:	7bfa      	ldrb	r2, [r7, #15]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	32de      	adds	r2, #222	@ 0xde
 800b420:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b42a:	e005      	b.n	800b438 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	3301      	adds	r3, #1
 800b430:	73fb      	strb	r3, [r7, #15]
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0e5      	beq.n	800b404 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d016      	beq.n	800b470 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2206      	movs	r2, #6
 800b458:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b460:	2103      	movs	r1, #3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	4798      	blx	r3
 800b466:	e006      	b.n	800b476 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	220d      	movs	r2, #13
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e002      	b.n	800b476 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	220d      	movs	r2, #13
 800b474:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b476:	2300      	movs	r3, #0
 800b478:	2200      	movs	r2, #0
 800b47a:	2105      	movs	r1, #5
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fb1b 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b482:	e074      	b.n	800b56e <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d017      	beq.n	800b4be <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	4798      	blx	r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b49e:	7bbb      	ldrb	r3, [r7, #14]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d103      	bne.n	800b4ae <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	220b      	movs	r2, #11
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	e00a      	b.n	800b4c4 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 800b4ae:	7bbb      	ldrb	r3, [r7, #14]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d106      	bne.n	800b4c4 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	220d      	movs	r2, #13
 800b4ba:	701a      	strb	r2, [r3, #0]
 800b4bc:	e002      	b.n	800b4c4 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	220d      	movs	r2, #13
 800b4c2:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2105      	movs	r1, #5
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 faf4 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b4d0:	e04d      	b.n	800b56e <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d047      	beq.n	800b56c <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	4798      	blx	r3
      }
      break;
 800b4e8:	e040      	b.n	800b56c <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fd18 	bl	800af28 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d009      	beq.n	800b516 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b526:	2105      	movs	r1, #5
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b01      	cmp	r3, #1
 800b536:	d107      	bne.n	800b548 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fdee 	bl	800b122 <USBH_Start>
 800b546:	e002      	b.n	800b54e <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f005 ff1f 	bl	801138c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b54e:	2300      	movs	r3, #0
 800b550:	2200      	movs	r2, #0
 800b552:	2101      	movs	r1, #1
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 faaf 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 800b55a:	e008      	b.n	800b56e <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 800b55c:	bf00      	nop
 800b55e:	e006      	b.n	800b56e <USBH_Process+0x42a>
      break;
 800b560:	bf00      	nop
 800b562:	e004      	b.n	800b56e <USBH_Process+0x42a>
      break;
 800b564:	bf00      	nop
 800b566:	e002      	b.n	800b56e <USBH_Process+0x42a>
    break;
 800b568:	bf00      	nop
 800b56a:	e000      	b.n	800b56e <USBH_Process+0x42a>
      break;
 800b56c:	bf00      	nop
  }
  return USBH_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af04      	add	r7, sp, #16
 800b57e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b580:	2301      	movs	r3, #1
 800b582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b584:	2301      	movs	r3, #1
 800b586:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	2b07      	cmp	r3, #7
 800b58e:	f200 81db 	bhi.w	800b948 <USBH_HandleEnum+0x3d0>
 800b592:	a201      	add	r2, pc, #4	@ (adr r2, 800b598 <USBH_HandleEnum+0x20>)
 800b594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b598:	0800b5b9 	.word	0x0800b5b9
 800b59c:	0800b673 	.word	0x0800b673
 800b5a0:	0800b6dd 	.word	0x0800b6dd
 800b5a4:	0800b767 	.word	0x0800b767
 800b5a8:	0800b7d1 	.word	0x0800b7d1
 800b5ac:	0800b841 	.word	0x0800b841
 800b5b0:	0800b8ab 	.word	0x0800b8ab
 800b5b4:	0800b909 	.word	0x0800b909
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b5b8:	2108      	movs	r1, #8
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fac6 	bl	800bb4c <USBH_Get_DevDesc>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d12e      	bne.n	800b628 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	7919      	ldrb	r1, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b5ee:	9202      	str	r2, [sp, #8]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	9201      	str	r2, [sp, #4]
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2280      	movs	r2, #128	@ 0x80
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f001 f9be 	bl	800c97c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	7959      	ldrb	r1, [r3, #5]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b614:	9202      	str	r2, [sp, #8]
 800b616:	2200      	movs	r2, #0
 800b618:	9201      	str	r2, [sp, #4]
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	4603      	mov	r3, r0
 800b61e:	2200      	movs	r2, #0
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 f9ab 	bl	800c97c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b626:	e191      	b.n	800b94c <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b628:	7bbb      	ldrb	r3, [r7, #14]
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	f040 818e 	bne.w	800b94c <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b636:	3301      	adds	r3, #1
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b646:	2b03      	cmp	r3, #3
 800b648:	d903      	bls.n	800b652 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	220d      	movs	r2, #13
 800b64e:	701a      	strb	r2, [r3, #0]
      break;
 800b650:	e17c      	b.n	800b94c <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	795b      	ldrb	r3, [r3, #5]
 800b656:	4619      	mov	r1, r3
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 f9df 	bl	800ca1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	791b      	ldrb	r3, [r3, #4]
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 f9d9 	bl	800ca1c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	701a      	strb	r2, [r3, #0]
      break;
 800b670:	e16c      	b.n	800b94c <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b672:	2112      	movs	r1, #18
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fa69 	bl	800bb4c <USBH_Get_DevDesc>
 800b67a:	4603      	mov	r3, r0
 800b67c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b67e:	7bbb      	ldrb	r3, [r7, #14]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d103      	bne.n	800b68c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b68a:	e161      	b.n	800b950 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b68c:	7bbb      	ldrb	r3, [r7, #14]
 800b68e:	2b03      	cmp	r3, #3
 800b690:	f040 815e 	bne.w	800b950 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b69a:	3301      	adds	r3, #1
 800b69c:	b2da      	uxtb	r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d903      	bls.n	800b6b6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	220d      	movs	r2, #13
 800b6b2:	701a      	strb	r2, [r3, #0]
      break;
 800b6b4:	e14c      	b.n	800b950 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	795b      	ldrb	r3, [r3, #5]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 f9ad 	bl	800ca1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	791b      	ldrb	r3, [r3, #4]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 f9a7 	bl	800ca1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	701a      	strb	r2, [r3, #0]
      break;
 800b6da:	e139      	b.n	800b950 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b6dc:	2101      	movs	r1, #1
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 faf3 	bl	800bcca <USBH_SetAddress>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6e8:	7bbb      	ldrb	r3, [r7, #14]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d130      	bne.n	800b750 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b6ee:	2002      	movs	r0, #2
 800b6f0:	f005 ffb3 	bl	801165a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2203      	movs	r2, #3
 800b700:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7919      	ldrb	r1, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b716:	9202      	str	r2, [sp, #8]
 800b718:	2200      	movs	r2, #0
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	4603      	mov	r3, r0
 800b720:	2280      	movs	r2, #128	@ 0x80
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 f92a 	bl	800c97c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7959      	ldrb	r1, [r3, #5]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b73c:	9202      	str	r2, [sp, #8]
 800b73e:	2200      	movs	r2, #0
 800b740:	9201      	str	r2, [sp, #4]
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	4603      	mov	r3, r0
 800b746:	2200      	movs	r2, #0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f001 f917 	bl	800c97c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b74e:	e101      	b.n	800b954 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	2b03      	cmp	r3, #3
 800b754:	f040 80fe 	bne.w	800b954 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	220d      	movs	r2, #13
 800b75c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	705a      	strb	r2, [r3, #1]
      break;
 800b764:	e0f6      	b.n	800b954 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b766:	2109      	movs	r1, #9
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fa1b 	bl	800bba4 <USBH_Get_CfgDesc>
 800b76e:	4603      	mov	r3, r0
 800b770:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b772:	7bbb      	ldrb	r3, [r7, #14]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d103      	bne.n	800b780 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2204      	movs	r2, #4
 800b77c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b77e:	e0eb      	b.n	800b958 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b780:	7bbb      	ldrb	r3, [r7, #14]
 800b782:	2b03      	cmp	r3, #3
 800b784:	f040 80e8 	bne.w	800b958 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b78e:	3301      	adds	r3, #1
 800b790:	b2da      	uxtb	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b79e:	2b03      	cmp	r3, #3
 800b7a0:	d903      	bls.n	800b7aa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	220d      	movs	r2, #13
 800b7a6:	701a      	strb	r2, [r3, #0]
      break;
 800b7a8:	e0d6      	b.n	800b958 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	795b      	ldrb	r3, [r3, #5]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f001 f933 	bl	800ca1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	791b      	ldrb	r3, [r3, #4]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 f92d 	bl	800ca1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	701a      	strb	r2, [r3, #0]
      break;
 800b7ce:	e0c3      	b.n	800b958 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f9e3 	bl	800bba4 <USBH_Get_CfgDesc>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7e2:	7bbb      	ldrb	r3, [r7, #14]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d103      	bne.n	800b7f0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2205      	movs	r2, #5
 800b7ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7ee:	e0b5      	b.n	800b95c <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7f0:	7bbb      	ldrb	r3, [r7, #14]
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	f040 80b2 	bne.w	800b95c <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b7fe:	3301      	adds	r3, #1
 800b800:	b2da      	uxtb	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d903      	bls.n	800b81a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	220d      	movs	r2, #13
 800b816:	701a      	strb	r2, [r3, #0]
      break;
 800b818:	e0a0      	b.n	800b95c <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	795b      	ldrb	r3, [r3, #5]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f001 f8fb 	bl	800ca1c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	791b      	ldrb	r3, [r3, #4]
 800b82a:	4619      	mov	r1, r3
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 f8f5 	bl	800ca1c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]
      break;
 800b83e:	e08d      	b.n	800b95c <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b846:	2b00      	cmp	r3, #0
 800b848:	d025      	beq.n	800b896 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b856:	23ff      	movs	r3, #255	@ 0xff
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f9cd 	bl	800bbf8 <USBH_Get_StringDesc>
 800b85e:	4603      	mov	r3, r0
 800b860:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b862:	7bbb      	ldrb	r3, [r7, #14]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d109      	bne.n	800b87c <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2206      	movs	r2, #6
 800b86c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b86e:	2300      	movs	r3, #0
 800b870:	2200      	movs	r2, #0
 800b872:	2105      	movs	r1, #5
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f91f 	bl	800bab8 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b87a:	e071      	b.n	800b960 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b87c:	7bbb      	ldrb	r3, [r7, #14]
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d16e      	bne.n	800b960 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2206      	movs	r2, #6
 800b886:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b888:	2300      	movs	r3, #0
 800b88a:	2200      	movs	r2, #0
 800b88c:	2105      	movs	r1, #5
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f912 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800b894:	e064      	b.n	800b960 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2206      	movs	r2, #6
 800b89a:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b89c:	2300      	movs	r3, #0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2105      	movs	r1, #5
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 f908 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800b8a8:	e05a      	b.n	800b960 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d01f      	beq.n	800b8f4 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b8c0:	23ff      	movs	r3, #255	@ 0xff
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f998 	bl	800bbf8 <USBH_Get_StringDesc>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d103      	bne.n	800b8da <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2207      	movs	r2, #7
 800b8d6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800b8d8:	e044      	b.n	800b964 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8da:	7bbb      	ldrb	r3, [r7, #14]
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d141      	bne.n	800b964 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2207      	movs	r2, #7
 800b8e4:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2105      	movs	r1, #5
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 f8e3 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800b8f2:	e037      	b.n	800b964 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2207      	movs	r2, #7
 800b8f8:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2105      	movs	r1, #5
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f8d9 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800b906:	e02d      	b.n	800b964 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d017      	beq.n	800b942 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b91e:	23ff      	movs	r3, #255	@ 0xff
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f969 	bl	800bbf8 <USBH_Get_StringDesc>
 800b926:	4603      	mov	r3, r0
 800b928:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b92a:	7bbb      	ldrb	r3, [r7, #14]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b934:	e018      	b.n	800b968 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b936:	7bbb      	ldrb	r3, [r7, #14]
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d115      	bne.n	800b968 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
      break;
 800b940:	e012      	b.n	800b968 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]
      break;
 800b946:	e00f      	b.n	800b968 <USBH_HandleEnum+0x3f0>

    default:
      break;
 800b948:	bf00      	nop
 800b94a:	e00e      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b94c:	bf00      	nop
 800b94e:	e00c      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b950:	bf00      	nop
 800b952:	e00a      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b954:	bf00      	nop
 800b956:	e008      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b958:	bf00      	nop
 800b95a:	e006      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b95c:	bf00      	nop
 800b95e:	e004      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b960:	bf00      	nop
 800b962:	e002      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b964:	bf00      	nop
 800b966:	e000      	b.n	800b96a <USBH_HandleEnum+0x3f2>
      break;
 800b968:	bf00      	nop
  }
  return Status;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800b986:	bf00      	nop
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f804 	bl	800b9b6 <USBH_HandleSof>
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b0b      	cmp	r3, #11
 800b9c6:	d10a      	bne.n	800b9de <USBH_HandleSof+0x28>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d005      	beq.n	800b9de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	4798      	blx	r3
  }
}
 800b9de:	bf00      	nop
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f85b 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 800ba02:	bf00      	nop
}
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b083      	sub	sp, #12
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800ba22:	bf00      	nop
}
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b082      	sub	sp, #8
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800ba4e:	2300      	movs	r3, #0
 800ba50:	2200      	movs	r2, #0
 800ba52:	2101      	movs	r1, #1
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f82f 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f005 fc9c 	bl	80113c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	791b      	ldrb	r3, [r3, #4]
 800ba8e:	4619      	mov	r1, r3
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 ffc3 	bl	800ca1c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	795b      	ldrb	r3, [r3, #5]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 ffbd 	bl	800ca1c <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800baa2:	2300      	movs	r3, #0
 800baa4:	2200      	movs	r2, #0
 800baa6:	2101      	movs	r1, #1
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f805 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	607a      	str	r2, [r7, #4]
 800bac2:	603b      	str	r3, [r7, #0]
 800bac4:	460b      	mov	r3, r1
 800bac6:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 800bac8:	7afa      	ldrb	r2, [r7, #11]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 fa8c 	bl	800cff4 <osMessageQueueGetSpace>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00a      	beq.n	800baf8 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f001 f9c0 	bl	800ce78 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 800baf8:	bf00      	nop
 800bafa:	3710      	adds	r7, #16
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb14:	f04f 33ff 	mov.w	r3, #4294967295
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f001 fa0d 	bl	800cf38 <osMessageQueueGet>
 800bb1e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1f0      	bne.n	800bb08 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff fb0c 	bl	800b144 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800bb2c:	e7ec      	b.n	800bb08 <USBH_Process_OS+0x8>

0800bb2e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 800bb36:	2300      	movs	r3, #0
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2101      	movs	r1, #1
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f7ff ffbb 	bl	800bab8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bb58:	887b      	ldrh	r3, [r7, #2]
 800bb5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb5e:	d901      	bls.n	800bb64 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bb60:	2303      	movs	r3, #3
 800bb62:	e01b      	b.n	800bb9c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bb6a:	887b      	ldrh	r3, [r7, #2]
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f872 	bl	800bc60 <USBH_GetDescriptor>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d109      	bne.n	800bb9a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb8c:	887a      	ldrh	r2, [r7, #2]
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f929 	bl	800bde8 <USBH_ParseDevDesc>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	331c      	adds	r3, #28
 800bbb4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bbb6:	887b      	ldrh	r3, [r7, #2]
 800bbb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbbc:	d901      	bls.n	800bbc2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e016      	b.n	800bbf0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbc2:	887b      	ldrh	r3, [r7, #2]
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbcc:	2100      	movs	r1, #0
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f846 	bl	800bc60 <USBH_GetDescriptor>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d107      	bne.n	800bbee <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bbde:	887b      	ldrh	r3, [r7, #2]
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f9af 	bl	800bf48 <USBH_ParseCfgDesc>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b088      	sub	sp, #32
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	607a      	str	r2, [r7, #4]
 800bc02:	461a      	mov	r2, r3
 800bc04:	460b      	mov	r3, r1
 800bc06:	72fb      	strb	r3, [r7, #11]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bc0c:	893b      	ldrh	r3, [r7, #8]
 800bc0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc12:	d802      	bhi.n	800bc1a <USBH_Get_StringDesc+0x22>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d101      	bne.n	800bc1e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e01c      	b.n	800bc58 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bc26:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bc2e:	893b      	ldrh	r3, [r7, #8]
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	460b      	mov	r3, r1
 800bc34:	2100      	movs	r1, #0
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f812 	bl	800bc60 <USBH_GetDescriptor>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d107      	bne.n	800bc56 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bc4c:	893a      	ldrh	r2, [r7, #8]
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 fb8c 	bl	800c36e <USBH_ParseStringDesc>
  }

  return status;
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	607b      	str	r3, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	72fb      	strb	r3, [r7, #11]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	789b      	ldrb	r3, [r3, #2]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d11c      	bne.n	800bcb4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc7a:	7afb      	ldrb	r3, [r7, #11]
 800bc7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2206      	movs	r2, #6
 800bc8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	893a      	ldrh	r2, [r7, #8]
 800bc90:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc92:	893b      	ldrh	r3, [r7, #8]
 800bc94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc9c:	d104      	bne.n	800bca8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f240 4209 	movw	r2, #1033	@ 0x409
 800bca4:	829a      	strh	r2, [r3, #20]
 800bca6:	e002      	b.n	800bcae <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	8b3a      	ldrh	r2, [r7, #24]
 800bcb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bcb4:	8b3b      	ldrh	r3, [r7, #24]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 fba4 	bl	800c408 <USBH_CtlReq>
 800bcc0:	4603      	mov	r3, r0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b082      	sub	sp, #8
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	789b      	ldrb	r3, [r3, #2]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d10f      	bne.n	800bcfe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2205      	movs	r2, #5
 800bce8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2100      	movs	r1, #0
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fb80 	bl	800c408 <USBH_CtlReq>
 800bd08:	4603      	mov	r3, r0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd12:	b580      	push	{r7, lr}
 800bd14:	b082      	sub	sp, #8
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	789b      	ldrb	r3, [r3, #2]
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d10e      	bne.n	800bd44 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2209      	movs	r2, #9
 800bd30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	887a      	ldrh	r2, [r7, #2]
 800bd36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fb5d 	bl	800c408 <USBH_CtlReq>
 800bd4e:	4603      	mov	r3, r0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	460b      	mov	r3, r1
 800bd62:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	789b      	ldrb	r3, [r3, #2]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d10f      	bne.n	800bd8c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2203      	movs	r2, #3
 800bd76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd78:	78fb      	ldrb	r3, [r7, #3]
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2100      	movs	r1, #0
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fb39 	bl	800c408 <USBH_CtlReq>
 800bd96:	4603      	mov	r3, r0
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	789b      	ldrb	r3, [r3, #2]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d10f      	bne.n	800bdd4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2202      	movs	r2, #2
 800bdb8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bdc6:	78fb      	ldrb	r3, [r7, #3]
 800bdc8:	b29a      	uxth	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fb15 	bl	800c408 <USBH_CtlReq>
 800bdde:	4603      	mov	r3, r0
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	4613      	mov	r3, r2
 800bdf4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bdfc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bdfe:	2300      	movs	r3, #0
 800be00:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800be08:	2302      	movs	r3, #2
 800be0a:	e094      	b.n	800bf36 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	781a      	ldrb	r2, [r3, #0]
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	785a      	ldrb	r2, [r3, #1]
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	3302      	adds	r3, #2
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	461a      	mov	r2, r3
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	3303      	adds	r3, #3
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	4313      	orrs	r3, r2
 800be30:	b29a      	uxth	r2, r3
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	791a      	ldrb	r2, [r3, #4]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	795a      	ldrb	r2, [r3, #5]
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	799a      	ldrb	r2, [r3, #6]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	79da      	ldrb	r2, [r3, #7]
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d004      	beq.n	800be6a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be66:	2b01      	cmp	r3, #1
 800be68:	d11b      	bne.n	800bea2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	79db      	ldrb	r3, [r3, #7]
 800be6e:	2b20      	cmp	r3, #32
 800be70:	dc0f      	bgt.n	800be92 <USBH_ParseDevDesc+0xaa>
 800be72:	2b08      	cmp	r3, #8
 800be74:	db0f      	blt.n	800be96 <USBH_ParseDevDesc+0xae>
 800be76:	3b08      	subs	r3, #8
 800be78:	4a32      	ldr	r2, [pc, #200]	@ (800bf44 <USBH_ParseDevDesc+0x15c>)
 800be7a:	fa22 f303 	lsr.w	r3, r2, r3
 800be7e:	f003 0301 	and.w	r3, r3, #1
 800be82:	2b00      	cmp	r3, #0
 800be84:	bf14      	ite	ne
 800be86:	2301      	movne	r3, #1
 800be88:	2300      	moveq	r3, #0
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <USBH_ParseDevDesc+0xb6>
 800be90:	e001      	b.n	800be96 <USBH_ParseDevDesc+0xae>
 800be92:	2b40      	cmp	r3, #64	@ 0x40
 800be94:	d003      	beq.n	800be9e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	2208      	movs	r2, #8
 800be9a:	71da      	strb	r2, [r3, #7]
        break;
 800be9c:	e000      	b.n	800bea0 <USBH_ParseDevDesc+0xb8>
        break;
 800be9e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bea0:	e00e      	b.n	800bec0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d107      	bne.n	800bebc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	79db      	ldrb	r3, [r3, #7]
 800beb0:	2b08      	cmp	r3, #8
 800beb2:	d005      	beq.n	800bec0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2208      	movs	r2, #8
 800beb8:	71da      	strb	r2, [r3, #7]
 800beba:	e001      	b.n	800bec0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bebc:	2303      	movs	r3, #3
 800bebe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bec0:	88fb      	ldrh	r3, [r7, #6]
 800bec2:	2b08      	cmp	r3, #8
 800bec4:	d936      	bls.n	800bf34 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	3308      	adds	r3, #8
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	461a      	mov	r2, r3
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	3309      	adds	r3, #9
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	021b      	lsls	r3, r3, #8
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	4313      	orrs	r3, r2
 800beda:	b29a      	uxth	r2, r3
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	330a      	adds	r3, #10
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	330b      	adds	r3, #11
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	021b      	lsls	r3, r3, #8
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	4313      	orrs	r3, r2
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	330c      	adds	r3, #12
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	461a      	mov	r2, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	330d      	adds	r3, #13
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	021b      	lsls	r3, r3, #8
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	7b9a      	ldrb	r2, [r3, #14]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	7bda      	ldrb	r2, [r3, #15]
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	7c1a      	ldrb	r2, [r3, #16]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	7c5a      	ldrb	r2, [r3, #17]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	371c      	adds	r7, #28
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	01000101 	.word	0x01000101

0800bf48 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b08c      	sub	sp, #48	@ 0x30
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bf5c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d101      	bne.n	800bf7a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bf76:	2302      	movs	r3, #2
 800bf78:	e0de      	b.n	800c138 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	d002      	beq.n	800bf8c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	2209      	movs	r2, #9
 800bf8a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	781a      	ldrb	r2, [r3, #0]
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	785a      	ldrb	r2, [r3, #1]
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	3302      	adds	r3, #2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	3303      	adds	r3, #3
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	021b      	lsls	r3, r3, #8
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfb6:	bf28      	it	cs
 800bfb8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	791a      	ldrb	r2, [r3, #4]
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	795a      	ldrb	r2, [r3, #5]
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	799a      	ldrb	r2, [r3, #6]
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	79da      	ldrb	r2, [r3, #7]
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	7a1a      	ldrb	r2, [r3, #8]
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	2b09      	cmp	r3, #9
 800bfee:	f240 80a1 	bls.w	800c134 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800bff2:	2309      	movs	r3, #9
 800bff4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bffa:	e085      	b.n	800c108 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bffc:	f107 0316 	add.w	r3, r7, #22
 800c000:	4619      	mov	r1, r3
 800c002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c004:	f000 f9e6 	bl	800c3d4 <USBH_GetNextDesc>
 800c008:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00c:	785b      	ldrb	r3, [r3, #1]
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d17a      	bne.n	800c108 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b09      	cmp	r3, #9
 800c018:	d002      	beq.n	800c020 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01c:	2209      	movs	r2, #9
 800c01e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c024:	221a      	movs	r2, #26
 800c026:	fb02 f303 	mul.w	r3, r2, r3
 800c02a:	3308      	adds	r3, #8
 800c02c:	6a3a      	ldr	r2, [r7, #32]
 800c02e:	4413      	add	r3, r2
 800c030:	3302      	adds	r3, #2
 800c032:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c034:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c036:	69f8      	ldr	r0, [r7, #28]
 800c038:	f000 f882 	bl	800c140 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c03c:	2300      	movs	r3, #0
 800c03e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c042:	2300      	movs	r3, #0
 800c044:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c046:	e043      	b.n	800c0d0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c048:	f107 0316 	add.w	r3, r7, #22
 800c04c:	4619      	mov	r1, r3
 800c04e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c050:	f000 f9c0 	bl	800c3d4 <USBH_GetNextDesc>
 800c054:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c058:	785b      	ldrb	r3, [r3, #1]
 800c05a:	2b05      	cmp	r3, #5
 800c05c:	d138      	bne.n	800c0d0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	795b      	ldrb	r3, [r3, #5]
 800c062:	2b01      	cmp	r3, #1
 800c064:	d113      	bne.n	800c08e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d003      	beq.n	800c076 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	799b      	ldrb	r3, [r3, #6]
 800c072:	2b03      	cmp	r3, #3
 800c074:	d10b      	bne.n	800c08e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	79db      	ldrb	r3, [r3, #7]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10b      	bne.n	800c096 <USBH_ParseCfgDesc+0x14e>
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b09      	cmp	r3, #9
 800c084:	d007      	beq.n	800c096 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c088:	2209      	movs	r2, #9
 800c08a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c08c:	e003      	b.n	800c096 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	2207      	movs	r2, #7
 800c092:	701a      	strb	r2, [r3, #0]
 800c094:	e000      	b.n	800c098 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c096:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c09c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0a0:	3201      	adds	r2, #1
 800c0a2:	00d2      	lsls	r2, r2, #3
 800c0a4:	211a      	movs	r1, #26
 800c0a6:	fb01 f303 	mul.w	r3, r1, r3
 800c0aa:	4413      	add	r3, r2
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	6a3a      	ldr	r2, [r7, #32]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3304      	adds	r3, #4
 800c0b4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c0b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0b8:	69b9      	ldr	r1, [r7, #24]
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f000 f86f 	bl	800c19e <USBH_ParseEPDesc>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c0c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d80a      	bhi.n	800c0ee <USBH_ParseCfgDesc+0x1a6>
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	791b      	ldrb	r3, [r3, #4]
 800c0dc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d204      	bcs.n	800c0ee <USBH_ParseCfgDesc+0x1a6>
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	885a      	ldrh	r2, [r3, #2]
 800c0e8:	8afb      	ldrh	r3, [r7, #22]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d8ac      	bhi.n	800c048 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	791b      	ldrb	r3, [r3, #4]
 800c0f2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d201      	bcs.n	800c0fe <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e01c      	b.n	800c138 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 800c0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c102:	3301      	adds	r3, #1
 800c104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d805      	bhi.n	800c11c <USBH_ParseCfgDesc+0x1d4>
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	885a      	ldrh	r2, [r3, #2]
 800c114:	8afb      	ldrh	r3, [r7, #22]
 800c116:	429a      	cmp	r2, r3
 800c118:	f63f af70 	bhi.w	800bffc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	791b      	ldrb	r3, [r3, #4]
 800c120:	2b02      	cmp	r3, #2
 800c122:	bf28      	it	cs
 800c124:	2302      	movcs	r3, #2
 800c126:	b2db      	uxtb	r3, r3
 800c128:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d201      	bcs.n	800c134 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 800c130:	2303      	movs	r3, #3
 800c132:	e001      	b.n	800c138 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 800c134:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3730      	adds	r7, #48	@ 0x30
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781a      	ldrb	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	785a      	ldrb	r2, [r3, #1]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	789a      	ldrb	r2, [r3, #2]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	78da      	ldrb	r2, [r3, #3]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	791a      	ldrb	r2, [r3, #4]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	795a      	ldrb	r2, [r3, #5]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	799a      	ldrb	r2, [r3, #6]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	79da      	ldrb	r2, [r3, #7]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	7a1a      	ldrb	r2, [r3, #8]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	721a      	strb	r2, [r3, #8]
}
 800c192:	bf00      	nop
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c19e:	b480      	push	{r7}
 800c1a0:	b087      	sub	sp, #28
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	60f8      	str	r0, [r7, #12]
 800c1a6:	60b9      	str	r1, [r7, #8]
 800c1a8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	781a      	ldrb	r2, [r3, #0]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	785a      	ldrb	r2, [r3, #1]
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	789a      	ldrb	r2, [r3, #2]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	78da      	ldrb	r2, [r3, #3]
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	3304      	adds	r3, #4
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3305      	adds	r3, #5
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	021b      	lsls	r3, r3, #8
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	799a      	ldrb	r2, [r3, #6]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	889b      	ldrh	r3, [r3, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c200:	d804      	bhi.n	800c20c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c20a:	d901      	bls.n	800c210 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c20c:	2303      	movs	r3, #3
 800c20e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c216:	2b00      	cmp	r3, #0
 800c218:	d136      	bne.n	800c288 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	78db      	ldrb	r3, [r3, #3]
 800c21e:	f003 0303 	and.w	r3, r3, #3
 800c222:	2b02      	cmp	r3, #2
 800c224:	d108      	bne.n	800c238 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	889b      	ldrh	r3, [r3, #4]
 800c22a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c22e:	f240 8097 	bls.w	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c232:	2303      	movs	r3, #3
 800c234:	75fb      	strb	r3, [r7, #23]
 800c236:	e093      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	78db      	ldrb	r3, [r3, #3]
 800c23c:	f003 0303 	and.w	r3, r3, #3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d107      	bne.n	800c254 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	889b      	ldrh	r3, [r3, #4]
 800c248:	2b40      	cmp	r3, #64	@ 0x40
 800c24a:	f240 8089 	bls.w	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c24e:	2303      	movs	r3, #3
 800c250:	75fb      	strb	r3, [r7, #23]
 800c252:	e085      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	78db      	ldrb	r3, [r3, #3]
 800c258:	f003 0303 	and.w	r3, r3, #3
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d005      	beq.n	800c26c <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	78db      	ldrb	r3, [r3, #3]
 800c264:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c268:	2b03      	cmp	r3, #3
 800c26a:	d10a      	bne.n	800c282 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	799b      	ldrb	r3, [r3, #6]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d003      	beq.n	800c27c <USBH_ParseEPDesc+0xde>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	799b      	ldrb	r3, [r3, #6]
 800c278:	2b10      	cmp	r3, #16
 800c27a:	d970      	bls.n	800c35e <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c27c:	2303      	movs	r3, #3
 800c27e:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c280:	e06d      	b.n	800c35e <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c282:	2303      	movs	r3, #3
 800c284:	75fb      	strb	r3, [r7, #23]
 800c286:	e06b      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d13c      	bne.n	800c30c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	78db      	ldrb	r3, [r3, #3]
 800c296:	f003 0303 	and.w	r3, r3, #3
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d005      	beq.n	800c2aa <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	78db      	ldrb	r3, [r3, #3]
 800c2a2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d106      	bne.n	800c2b8 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	889b      	ldrh	r3, [r3, #4]
 800c2ae:	2b40      	cmp	r3, #64	@ 0x40
 800c2b0:	d956      	bls.n	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c2b6:	e053      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	78db      	ldrb	r3, [r3, #3]
 800c2bc:	f003 0303 	and.w	r3, r3, #3
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d10e      	bne.n	800c2e2 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	799b      	ldrb	r3, [r3, #6]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c2d0:	2b10      	cmp	r3, #16
 800c2d2:	d803      	bhi.n	800c2dc <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c2d8:	2b40      	cmp	r3, #64	@ 0x40
 800c2da:	d941      	bls.n	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2dc:	2303      	movs	r3, #3
 800c2de:	75fb      	strb	r3, [r7, #23]
 800c2e0:	e03e      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	78db      	ldrb	r3, [r3, #3]
 800c2e6:	f003 0303 	and.w	r3, r3, #3
 800c2ea:	2b03      	cmp	r3, #3
 800c2ec:	d10b      	bne.n	800c306 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	799b      	ldrb	r3, [r3, #6]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d004      	beq.n	800c300 <USBH_ParseEPDesc+0x162>
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	889b      	ldrh	r3, [r3, #4]
 800c2fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2fe:	d32f      	bcc.n	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c300:	2303      	movs	r3, #3
 800c302:	75fb      	strb	r3, [r7, #23]
 800c304:	e02c      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c306:	2303      	movs	r3, #3
 800c308:	75fb      	strb	r3, [r7, #23]
 800c30a:	e029      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c312:	2b02      	cmp	r3, #2
 800c314:	d120      	bne.n	800c358 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	78db      	ldrb	r3, [r3, #3]
 800c31a:	f003 0303 	and.w	r3, r3, #3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d106      	bne.n	800c330 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	889b      	ldrh	r3, [r3, #4]
 800c326:	2b08      	cmp	r3, #8
 800c328:	d01a      	beq.n	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c32a:	2303      	movs	r3, #3
 800c32c:	75fb      	strb	r3, [r7, #23]
 800c32e:	e017      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	78db      	ldrb	r3, [r3, #3]
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	2b03      	cmp	r3, #3
 800c33a:	d10a      	bne.n	800c352 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	799b      	ldrb	r3, [r3, #6]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d003      	beq.n	800c34c <USBH_ParseEPDesc+0x1ae>
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	889b      	ldrh	r3, [r3, #4]
 800c348:	2b08      	cmp	r3, #8
 800c34a:	d909      	bls.n	800c360 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c34c:	2303      	movs	r3, #3
 800c34e:	75fb      	strb	r3, [r7, #23]
 800c350:	e006      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c352:	2303      	movs	r3, #3
 800c354:	75fb      	strb	r3, [r7, #23]
 800c356:	e003      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c358:	2303      	movs	r3, #3
 800c35a:	75fb      	strb	r3, [r7, #23]
 800c35c:	e000      	b.n	800c360 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c35e:	bf00      	nop
  }

  return status;
 800c360:	7dfb      	ldrb	r3, [r7, #23]
}
 800c362:	4618      	mov	r0, r3
 800c364:	371c      	adds	r7, #28
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr

0800c36e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c36e:	b480      	push	{r7}
 800c370:	b087      	sub	sp, #28
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	4613      	mov	r3, r2
 800c37a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	2b03      	cmp	r3, #3
 800c384:	d120      	bne.n	800c3c8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	1e9a      	subs	r2, r3, #2
 800c38c:	88fb      	ldrh	r3, [r7, #6]
 800c38e:	4293      	cmp	r3, r2
 800c390:	bf28      	it	cs
 800c392:	4613      	movcs	r3, r2
 800c394:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3302      	adds	r3, #2
 800c39a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c39c:	2300      	movs	r3, #0
 800c39e:	82fb      	strh	r3, [r7, #22]
 800c3a0:	e00b      	b.n	800c3ba <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c3a2:	8afb      	ldrh	r3, [r7, #22]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	781a      	ldrb	r2, [r3, #0]
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c3b4:	8afb      	ldrh	r3, [r7, #22]
 800c3b6:	3302      	adds	r3, #2
 800c3b8:	82fb      	strh	r3, [r7, #22]
 800c3ba:	8afa      	ldrh	r2, [r7, #22]
 800c3bc:	8abb      	ldrh	r3, [r7, #20]
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d3ef      	bcc.n	800c3a2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	701a      	strb	r2, [r3, #0]
  }
}
 800c3c8:	bf00      	nop
 800c3ca:	371c      	adds	r7, #28
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	881b      	ldrh	r3, [r3, #0]
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	7812      	ldrb	r2, [r2, #0]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	4613      	mov	r3, r2
 800c414:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c416:	2301      	movs	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	789b      	ldrb	r3, [r3, #2]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d002      	beq.n	800c428 <USBH_CtlReq+0x20>
 800c422:	2b02      	cmp	r3, #2
 800c424:	d015      	beq.n	800c452 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800c426:	e033      	b.n	800c490 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	88fa      	ldrh	r2, [r7, #6]
 800c432:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2201      	movs	r2, #1
 800c438:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2202      	movs	r2, #2
 800c43e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c440:	2301      	movs	r3, #1
 800c442:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c444:	2300      	movs	r3, #0
 800c446:	2200      	movs	r2, #0
 800c448:	2103      	movs	r1, #3
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f7ff fb34 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c450:	e01e      	b.n	800c490 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f000 f822 	bl	800c49c <USBH_HandleControl>
 800c458:	4603      	mov	r3, r0
 800c45a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <USBH_CtlReq+0x60>
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d106      	bne.n	800c476 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2201      	movs	r2, #1
 800c46c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	761a      	strb	r2, [r3, #24]
 800c474:	e005      	b.n	800c482 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d102      	bne.n	800c482 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2201      	movs	r2, #1
 800c480:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c482:	2300      	movs	r3, #0
 800c484:	2200      	movs	r2, #0
 800c486:	2103      	movs	r1, #3
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7ff fb15 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c48e:	bf00      	nop
  }
  return status;
 800c490:	7dfb      	ldrb	r3, [r7, #23]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af02      	add	r7, sp, #8
 800c4a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	7e1b      	ldrb	r3, [r3, #24]
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	2b0a      	cmp	r3, #10
 800c4b4:	f200 81b2 	bhi.w	800c81c <USBH_HandleControl+0x380>
 800c4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c0 <USBH_HandleControl+0x24>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4ed 	.word	0x0800c4ed
 800c4c4:	0800c507 	.word	0x0800c507
 800c4c8:	0800c589 	.word	0x0800c589
 800c4cc:	0800c5af 	.word	0x0800c5af
 800c4d0:	0800c60d 	.word	0x0800c60d
 800c4d4:	0800c637 	.word	0x0800c637
 800c4d8:	0800c6b9 	.word	0x0800c6b9
 800c4dc:	0800c6db 	.word	0x0800c6db
 800c4e0:	0800c73d 	.word	0x0800c73d
 800c4e4:	0800c763 	.word	0x0800c763
 800c4e8:	0800c7c5 	.word	0x0800c7c5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f103 0110 	add.w	r1, r3, #16
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	795b      	ldrb	r3, [r3, #5]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f99f 	bl	800c83c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2202      	movs	r2, #2
 800c502:	761a      	strb	r2, [r3, #24]
      break;
 800c504:	e195      	b.n	800c832 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	795b      	ldrb	r3, [r3, #5]
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f005 f847 	bl	80115a0 <USBH_LL_GetURBState>
 800c512:	4603      	mov	r3, r0
 800c514:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d124      	bne.n	800c566 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7c1b      	ldrb	r3, [r3, #16]
 800c520:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c524:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8adb      	ldrh	r3, [r3, #22]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00a      	beq.n	800c544 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c52e:	7b7b      	ldrb	r3, [r7, #13]
 800c530:	2b80      	cmp	r3, #128	@ 0x80
 800c532:	d103      	bne.n	800c53c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2203      	movs	r2, #3
 800c538:	761a      	strb	r2, [r3, #24]
 800c53a:	e00d      	b.n	800c558 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2205      	movs	r2, #5
 800c540:	761a      	strb	r2, [r3, #24]
 800c542:	e009      	b.n	800c558 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800c544:	7b7b      	ldrb	r3, [r7, #13]
 800c546:	2b80      	cmp	r3, #128	@ 0x80
 800c548:	d103      	bne.n	800c552 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2209      	movs	r2, #9
 800c54e:	761a      	strb	r2, [r3, #24]
 800c550:	e002      	b.n	800c558 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2207      	movs	r2, #7
 800c556:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c558:	2300      	movs	r3, #0
 800c55a:	2200      	movs	r2, #0
 800c55c:	2103      	movs	r1, #3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff faaa 	bl	800bab8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c564:	e15c      	b.n	800c820 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c566:	7bbb      	ldrb	r3, [r7, #14]
 800c568:	2b04      	cmp	r3, #4
 800c56a:	d003      	beq.n	800c574 <USBH_HandleControl+0xd8>
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	2b02      	cmp	r3, #2
 800c570:	f040 8156 	bne.w	800c820 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	220b      	movs	r2, #11
 800c578:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c57a:	2300      	movs	r3, #0
 800c57c:	2200      	movs	r2, #0
 800c57e:	2103      	movs	r1, #3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7ff fa99 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c586:	e14b      	b.n	800c820 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c58e:	b29a      	uxth	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6899      	ldr	r1, [r3, #8]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	899a      	ldrh	r2, [r3, #12]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	791b      	ldrb	r3, [r3, #4]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f98a 	bl	800c8ba <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2204      	movs	r2, #4
 800c5aa:	761a      	strb	r2, [r3, #24]
      break;
 800c5ac:	e141      	b.n	800c832 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	791b      	ldrb	r3, [r3, #4]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f004 fff3 	bl	80115a0 <USBH_LL_GetURBState>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c5be:	7bbb      	ldrb	r3, [r7, #14]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d109      	bne.n	800c5d8 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2209      	movs	r2, #9
 800c5c8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2103      	movs	r1, #3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fa71 	bl	800bab8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c5d6:	e125      	b.n	800c824 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b05      	cmp	r3, #5
 800c5dc:	d108      	bne.n	800c5f0 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2103      	movs	r1, #3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fa65 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c5ee:	e119      	b.n	800c824 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 800c5f0:	7bbb      	ldrb	r3, [r7, #14]
 800c5f2:	2b04      	cmp	r3, #4
 800c5f4:	f040 8116 	bne.w	800c824 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	220b      	movs	r2, #11
 800c5fc:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c5fe:	2300      	movs	r3, #0
 800c600:	2200      	movs	r2, #0
 800c602:	2103      	movs	r1, #3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f7ff fa57 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c60a:	e10b      	b.n	800c824 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6899      	ldr	r1, [r3, #8]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	899a      	ldrh	r2, [r3, #12]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	795b      	ldrb	r3, [r3, #5]
 800c618:	2001      	movs	r0, #1
 800c61a:	9000      	str	r0, [sp, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f000 f927 	bl	800c870 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c628:	b29a      	uxth	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2206      	movs	r2, #6
 800c632:	761a      	strb	r2, [r3, #24]
      break;
 800c634:	e0fd      	b.n	800c832 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	795b      	ldrb	r3, [r3, #5]
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f004 ffaf 	bl	80115a0 <USBH_LL_GetURBState>
 800c642:	4603      	mov	r3, r0
 800c644:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c646:	7bbb      	ldrb	r3, [r7, #14]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d109      	bne.n	800c660 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2207      	movs	r2, #7
 800c650:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c652:	2300      	movs	r3, #0
 800c654:	2200      	movs	r2, #0
 800c656:	2103      	movs	r1, #3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f7ff fa2d 	bl	800bab8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c65e:	e0e3      	b.n	800c828 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	2b05      	cmp	r3, #5
 800c664:	d10b      	bne.n	800c67e <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	220c      	movs	r2, #12
 800c66a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c66c:	2303      	movs	r3, #3
 800c66e:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c670:	2300      	movs	r3, #0
 800c672:	2200      	movs	r2, #0
 800c674:	2103      	movs	r1, #3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff fa1e 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c67c:	e0d4      	b.n	800c828 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d109      	bne.n	800c698 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2205      	movs	r2, #5
 800c688:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c68a:	2300      	movs	r3, #0
 800c68c:	2200      	movs	r2, #0
 800c68e:	2103      	movs	r1, #3
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff fa11 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c696:	e0c7      	b.n	800c828 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 800c698:	7bbb      	ldrb	r3, [r7, #14]
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	f040 80c4 	bne.w	800c828 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	220b      	movs	r2, #11
 800c6a4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c6a6:	2302      	movs	r3, #2
 800c6a8:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	2103      	movs	r1, #3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7ff fa01 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c6b6:	e0b7      	b.n	800c828 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	791b      	ldrb	r3, [r3, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2100      	movs	r1, #0
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f8fa 	bl	800c8ba <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2208      	movs	r2, #8
 800c6d6:	761a      	strb	r2, [r3, #24]

      break;
 800c6d8:	e0ab      	b.n	800c832 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	791b      	ldrb	r3, [r3, #4]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f004 ff5d 	bl	80115a0 <USBH_LL_GetURBState>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d10b      	bne.n	800c708 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	220d      	movs	r2, #13
 800c6f4:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	2103      	movs	r1, #3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f7ff f9d9 	bl	800bab8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c706:	e091      	b.n	800c82c <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 800c708:	7bbb      	ldrb	r3, [r7, #14]
 800c70a:	2b04      	cmp	r3, #4
 800c70c:	d109      	bne.n	800c722 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	220b      	movs	r2, #11
 800c712:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c714:	2300      	movs	r3, #0
 800c716:	2200      	movs	r2, #0
 800c718:	2103      	movs	r1, #3
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7ff f9cc 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c720:	e084      	b.n	800c82c <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 800c722:	7bbb      	ldrb	r3, [r7, #14]
 800c724:	2b05      	cmp	r3, #5
 800c726:	f040 8081 	bne.w	800c82c <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 800c72a:	2303      	movs	r3, #3
 800c72c:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c72e:	2300      	movs	r3, #0
 800c730:	2200      	movs	r2, #0
 800c732:	2103      	movs	r1, #3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7ff f9bf 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c73a:	e077      	b.n	800c82c <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	795b      	ldrb	r3, [r3, #5]
 800c740:	2201      	movs	r2, #1
 800c742:	9200      	str	r2, [sp, #0]
 800c744:	2200      	movs	r2, #0
 800c746:	2100      	movs	r1, #0
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f891 	bl	800c870 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c754:	b29a      	uxth	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	220a      	movs	r2, #10
 800c75e:	761a      	strb	r2, [r3, #24]
      break;
 800c760:	e067      	b.n	800c832 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	795b      	ldrb	r3, [r3, #5]
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f004 ff19 	bl	80115a0 <USBH_LL_GetURBState>
 800c76e:	4603      	mov	r3, r0
 800c770:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c772:	7bbb      	ldrb	r3, [r7, #14]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d10b      	bne.n	800c790 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	220d      	movs	r2, #13
 800c780:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c782:	2300      	movs	r3, #0
 800c784:	2200      	movs	r2, #0
 800c786:	2103      	movs	r1, #3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f7ff f995 	bl	800bab8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800c78e:	e04f      	b.n	800c830 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c790:	7bbb      	ldrb	r3, [r7, #14]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d109      	bne.n	800c7aa <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2209      	movs	r2, #9
 800c79a:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c79c:	2300      	movs	r3, #0
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2103      	movs	r1, #3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7ff f988 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c7a8:	e042      	b.n	800c830 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d13f      	bne.n	800c830 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	220b      	movs	r2, #11
 800c7b4:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	2103      	movs	r1, #3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff f97b 	bl	800bab8 <USBH_OS_PutMessage>
      break;
 800c7c2:	e035      	b.n	800c830 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7e5b      	ldrb	r3, [r3, #25]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	765a      	strb	r2, [r3, #25]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7e5b      	ldrb	r3, [r3, #25]
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d806      	bhi.n	800c7e6 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c7e4:	e025      	b.n	800c832 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7ec:	2106      	movs	r1, #6
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	795b      	ldrb	r3, [r3, #5]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f90c 	bl	800ca1c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	791b      	ldrb	r3, [r3, #4]
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 f906 	bl	800ca1c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c816:	2302      	movs	r3, #2
 800c818:	73fb      	strb	r3, [r7, #15]
      break;
 800c81a:	e00a      	b.n	800c832 <USBH_HandleControl+0x396>

    default:
      break;
 800c81c:	bf00      	nop
 800c81e:	e008      	b.n	800c832 <USBH_HandleControl+0x396>
      break;
 800c820:	bf00      	nop
 800c822:	e006      	b.n	800c832 <USBH_HandleControl+0x396>
      break;
 800c824:	bf00      	nop
 800c826:	e004      	b.n	800c832 <USBH_HandleControl+0x396>
      break;
 800c828:	bf00      	nop
 800c82a:	e002      	b.n	800c832 <USBH_HandleControl+0x396>
      break;
 800c82c:	bf00      	nop
 800c82e:	e000      	b.n	800c832 <USBH_HandleControl+0x396>
      break;
 800c830:	bf00      	nop
  }

  return status;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af04      	add	r7, sp, #16
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	4613      	mov	r3, r2
 800c848:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c84a:	79f9      	ldrb	r1, [r7, #7]
 800c84c:	2300      	movs	r3, #0
 800c84e:	9303      	str	r3, [sp, #12]
 800c850:	2308      	movs	r3, #8
 800c852:	9302      	str	r3, [sp, #8]
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	9301      	str	r3, [sp, #4]
 800c858:	2300      	movs	r3, #0
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	2300      	movs	r3, #0
 800c85e:	2200      	movs	r2, #0
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	f004 fe6c 	bl	801153e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b088      	sub	sp, #32
 800c874:	af04      	add	r7, sp, #16
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4611      	mov	r1, r2
 800c87c:	461a      	mov	r2, r3
 800c87e:	460b      	mov	r3, r1
 800c880:	80fb      	strh	r3, [r7, #6]
 800c882:	4613      	mov	r3, r2
 800c884:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c894:	7979      	ldrb	r1, [r7, #5]
 800c896:	7e3b      	ldrb	r3, [r7, #24]
 800c898:	9303      	str	r3, [sp, #12]
 800c89a:	88fb      	ldrh	r3, [r7, #6]
 800c89c:	9302      	str	r3, [sp, #8]
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f004 fe47 	bl	801153e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b088      	sub	sp, #32
 800c8be:	af04      	add	r7, sp, #16
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	80fb      	strh	r3, [r7, #6]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c8d0:	7979      	ldrb	r1, [r7, #5]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9303      	str	r3, [sp, #12]
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	9302      	str	r3, [sp, #8]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	9301      	str	r3, [sp, #4]
 800c8de:	2301      	movs	r3, #1
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f004 fe29 	bl	801153e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c8ec:	2300      	movs	r3, #0

}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b088      	sub	sp, #32
 800c8fa:	af04      	add	r7, sp, #16
 800c8fc:	60f8      	str	r0, [r7, #12]
 800c8fe:	60b9      	str	r1, [r7, #8]
 800c900:	4611      	mov	r1, r2
 800c902:	461a      	mov	r2, r3
 800c904:	460b      	mov	r3, r1
 800c906:	80fb      	strh	r3, [r7, #6]
 800c908:	4613      	mov	r3, r2
 800c90a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c912:	2b00      	cmp	r3, #0
 800c914:	d001      	beq.n	800c91a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c91a:	7979      	ldrb	r1, [r7, #5]
 800c91c:	7e3b      	ldrb	r3, [r7, #24]
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	88fb      	ldrh	r3, [r7, #6]
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	2301      	movs	r3, #1
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	2302      	movs	r3, #2
 800c92e:	2200      	movs	r2, #0
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f004 fe04 	bl	801153e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b088      	sub	sp, #32
 800c944:	af04      	add	r7, sp, #16
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	4611      	mov	r1, r2
 800c94c:	461a      	mov	r2, r3
 800c94e:	460b      	mov	r3, r1
 800c950:	80fb      	strh	r3, [r7, #6]
 800c952:	4613      	mov	r3, r2
 800c954:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c956:	7979      	ldrb	r1, [r7, #5]
 800c958:	2300      	movs	r3, #0
 800c95a:	9303      	str	r3, [sp, #12]
 800c95c:	88fb      	ldrh	r3, [r7, #6]
 800c95e:	9302      	str	r3, [sp, #8]
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	9301      	str	r3, [sp, #4]
 800c964:	2301      	movs	r3, #1
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	2302      	movs	r3, #2
 800c96a:	2201      	movs	r2, #1
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f004 fde6 	bl	801153e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af04      	add	r7, sp, #16
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	4608      	mov	r0, r1
 800c986:	4611      	mov	r1, r2
 800c988:	461a      	mov	r2, r3
 800c98a:	4603      	mov	r3, r0
 800c98c:	70fb      	strb	r3, [r7, #3]
 800c98e:	460b      	mov	r3, r1
 800c990:	70bb      	strb	r3, [r7, #2]
 800c992:	4613      	mov	r3, r2
 800c994:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c996:	7878      	ldrb	r0, [r7, #1]
 800c998:	78ba      	ldrb	r2, [r7, #2]
 800c99a:	78f9      	ldrb	r1, [r7, #3]
 800c99c:	8b3b      	ldrh	r3, [r7, #24]
 800c99e:	9302      	str	r3, [sp, #8]
 800c9a0:	7d3b      	ldrb	r3, [r7, #20]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	7c3b      	ldrb	r3, [r7, #16]
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f004 fd79 	bl	80114a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b082      	sub	sp, #8
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c9c6:	78fb      	ldrb	r3, [r7, #3]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f004 fd98 	bl	8011500 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b084      	sub	sp, #16
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f836 	bl	800ca58 <USBH_GetFreePipe>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c9f0:	89fb      	ldrh	r3, [r7, #14]
 800c9f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d00a      	beq.n	800ca10 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c9fa:	78fa      	ldrb	r2, [r7, #3]
 800c9fc:	89fb      	ldrh	r3, [r7, #14]
 800c9fe:	f003 030f 	and.w	r3, r3, #15
 800ca02:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ca06:	6879      	ldr	r1, [r7, #4]
 800ca08:	33e0      	adds	r3, #224	@ 0xe0
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	440b      	add	r3, r1
 800ca0e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ca10:	89fb      	ldrh	r3, [r7, #14]
 800ca12:	b2db      	uxtb	r3, r3
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	460b      	mov	r3, r1
 800ca26:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	2b0f      	cmp	r3, #15
 800ca2c:	d80d      	bhi.n	800ca4a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ca2e:	78fb      	ldrb	r3, [r7, #3]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	33e0      	adds	r3, #224	@ 0xe0
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	4413      	add	r3, r2
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	78fb      	ldrb	r3, [r7, #3]
 800ca3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	33e0      	adds	r3, #224	@ 0xe0
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	440b      	add	r3, r1
 800ca48:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca64:	2300      	movs	r3, #0
 800ca66:	73fb      	strb	r3, [r7, #15]
 800ca68:	e00f      	b.n	800ca8a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	33e0      	adds	r3, #224	@ 0xe0
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d102      	bne.n	800ca84 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	e007      	b.n	800ca94 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ca84:	7bfb      	ldrb	r3, [r7, #15]
 800ca86:	3301      	adds	r3, #1
 800ca88:	73fb      	strb	r3, [r7, #15]
 800ca8a:	7bfb      	ldrb	r3, [r7, #15]
 800ca8c:	2b0f      	cmp	r3, #15
 800ca8e:	d9ec      	bls.n	800ca6a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ca90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <__NVIC_SetPriority>:
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	6039      	str	r1, [r7, #0]
 800caaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800caac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	db0a      	blt.n	800caca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	490c      	ldr	r1, [pc, #48]	@ (800caec <__NVIC_SetPriority+0x4c>)
 800caba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cabe:	0112      	lsls	r2, r2, #4
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	440b      	add	r3, r1
 800cac4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cac8:	e00a      	b.n	800cae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	4908      	ldr	r1, [pc, #32]	@ (800caf0 <__NVIC_SetPriority+0x50>)
 800cad0:	79fb      	ldrb	r3, [r7, #7]
 800cad2:	f003 030f 	and.w	r3, r3, #15
 800cad6:	3b04      	subs	r3, #4
 800cad8:	0112      	lsls	r2, r2, #4
 800cada:	b2d2      	uxtb	r2, r2
 800cadc:	440b      	add	r3, r1
 800cade:	761a      	strb	r2, [r3, #24]
}
 800cae0:	bf00      	nop
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	e000e100 	.word	0xe000e100
 800caf0:	e000ed00 	.word	0xe000ed00

0800caf4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800caf8:	4b05      	ldr	r3, [pc, #20]	@ (800cb10 <SysTick_Handler+0x1c>)
 800cafa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cafc:	f002 ff78 	bl	800f9f0 <xTaskGetSchedulerState>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d001      	beq.n	800cb0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cb06:	f004 f877 	bl	8010bf8 <xPortSysTickHandler>
  }
}
 800cb0a:	bf00      	nop
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	e000e010 	.word	0xe000e010

0800cb14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb14:	b580      	push	{r7, lr}
 800cb16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cb18:	2100      	movs	r1, #0
 800cb1a:	f06f 0004 	mvn.w	r0, #4
 800cb1e:	f7ff ffbf 	bl	800caa0 <__NVIC_SetPriority>
#endif
}
 800cb22:	bf00      	nop
 800cb24:	bd80      	pop	{r7, pc}
	...

0800cb28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb2e:	f3ef 8305 	mrs	r3, IPSR
 800cb32:	603b      	str	r3, [r7, #0]
  return(result);
 800cb34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cb3a:	f06f 0305 	mvn.w	r3, #5
 800cb3e:	607b      	str	r3, [r7, #4]
 800cb40:	e00c      	b.n	800cb5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb42:	4b0a      	ldr	r3, [pc, #40]	@ (800cb6c <osKernelInitialize+0x44>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d105      	bne.n	800cb56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb4a:	4b08      	ldr	r3, [pc, #32]	@ (800cb6c <osKernelInitialize+0x44>)
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	607b      	str	r3, [r7, #4]
 800cb54:	e002      	b.n	800cb5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cb56:	f04f 33ff 	mov.w	r3, #4294967295
 800cb5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cb5c:	687b      	ldr	r3, [r7, #4]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	20002734 	.word	0x20002734

0800cb70 <osKernelGetInfo>:

osStatus_t osKernelGetInfo (osVersion_t *version, char *id_buf, uint32_t id_size) {
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]

  if (version != NULL) {
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d005      	beq.n	800cb8e <osKernelGetInfo+0x1e>
    /* Version encoding is major.minor.rev: mmnnnrrrr dec */
    version->api    = KERNEL_VERSION;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4a0c      	ldr	r2, [pc, #48]	@ (800cbb8 <osKernelGetInfo+0x48>)
 800cb86:	601a      	str	r2, [r3, #0]
    version->kernel = KERNEL_VERSION;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	4a0b      	ldr	r2, [pc, #44]	@ (800cbb8 <osKernelGetInfo+0x48>)
 800cb8c:	605a      	str	r2, [r3, #4]
  }

  if ((id_buf != NULL) && (id_size != 0U)) {
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00c      	beq.n	800cbae <osKernelGetInfo+0x3e>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <osKernelGetInfo+0x3e>
    if (id_size > sizeof(KERNEL_ID)) {
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b11      	cmp	r3, #17
 800cb9e:	d901      	bls.n	800cba4 <osKernelGetInfo+0x34>
      id_size = sizeof(KERNEL_ID);
 800cba0:	2311      	movs	r3, #17
 800cba2:	607b      	str	r3, [r7, #4]
    }
    memcpy(id_buf, KERNEL_ID, id_size);
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	4905      	ldr	r1, [pc, #20]	@ (800cbbc <osKernelGetInfo+0x4c>)
 800cba8:	68b8      	ldr	r0, [r7, #8]
 800cbaa:	f006 fc3e 	bl	801342a <memcpy>
  }

  return (osOK);
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	05f5f531 	.word	0x05f5f531
 800cbbc:	08016610 	.word	0x08016610

0800cbc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbc6:	f3ef 8305 	mrs	r3, IPSR
 800cbca:	603b      	str	r3, [r7, #0]
  return(result);
 800cbcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <osKernelStart+0x1a>
    stat = osErrorISR;
 800cbd2:	f06f 0305 	mvn.w	r3, #5
 800cbd6:	607b      	str	r3, [r7, #4]
 800cbd8:	e010      	b.n	800cbfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbda:	4b0b      	ldr	r3, [pc, #44]	@ (800cc08 <osKernelStart+0x48>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d109      	bne.n	800cbf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbe2:	f7ff ff97 	bl	800cb14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbe6:	4b08      	ldr	r3, [pc, #32]	@ (800cc08 <osKernelStart+0x48>)
 800cbe8:	2202      	movs	r2, #2
 800cbea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbec:	f002 f888 	bl	800ed00 <vTaskStartScheduler>
      stat = osOK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	607b      	str	r3, [r7, #4]
 800cbf4:	e002      	b.n	800cbfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cbf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cbfc:	687b      	ldr	r3, [r7, #4]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	20002734 	.word	0x20002734

0800cc0c <osKernelGetTickFreq>:
  }

  return (ticks);
}

uint32_t osKernelGetTickFreq (void) {
 800cc0c:	b480      	push	{r7}
 800cc0e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800cc10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
	...

0800cc20 <osKernelGetSysTimerFreq>:
  }

  return (val);
}

uint32_t osKernelGetSysTimerFreq (void) {
 800cc20:	b480      	push	{r7}
 800cc22:	af00      	add	r7, sp, #0
  return (configCPU_CLOCK_HZ);
 800cc24:	4b03      	ldr	r3, [pc, #12]	@ (800cc34 <osKernelGetSysTimerFreq+0x14>)
 800cc26:	681b      	ldr	r3, [r3, #0]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
 800cc34:	20000264 	.word	0x20000264

0800cc38 <osThreadNew>:

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	@ 0x38
 800cc3c:	af04      	add	r7, sp, #16
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc44:	2300      	movs	r3, #0
 800cc46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc48:	f3ef 8305 	mrs	r3, IPSR
 800cc4c:	617b      	str	r3, [r7, #20]
  return(result);
 800cc4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d17e      	bne.n	800cd52 <osThreadNew+0x11a>
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d07b      	beq.n	800cd52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cc5a:	2380      	movs	r3, #128	@ 0x80
 800cc5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cc5e:	2318      	movs	r3, #24
 800cc60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800cc66:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d045      	beq.n	800ccfe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <osThreadNew+0x48>
        name = attr->name;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d002      	beq.n	800cc8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d008      	beq.n	800cca6 <osThreadNew+0x6e>
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	2b38      	cmp	r3, #56	@ 0x38
 800cc98:	d805      	bhi.n	800cca6 <osThreadNew+0x6e>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f003 0301 	and.w	r3, r3, #1
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <osThreadNew+0x72>
        return (NULL);
 800cca6:	2300      	movs	r3, #0
 800cca8:	e054      	b.n	800cd54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d003      	beq.n	800ccba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	695b      	ldr	r3, [r3, #20]
 800ccb6:	089b      	lsrs	r3, r3, #2
 800ccb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00e      	beq.n	800cce0 <osThreadNew+0xa8>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	2ba7      	cmp	r3, #167	@ 0xa7
 800ccc8:	d90a      	bls.n	800cce0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d006      	beq.n	800cce0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d002      	beq.n	800cce0 <osThreadNew+0xa8>
        mem = 1;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	61bb      	str	r3, [r7, #24]
 800ccde:	e010      	b.n	800cd02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10c      	bne.n	800cd02 <osThreadNew+0xca>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d108      	bne.n	800cd02 <osThreadNew+0xca>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d104      	bne.n	800cd02 <osThreadNew+0xca>
          mem = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	61bb      	str	r3, [r7, #24]
 800ccfc:	e001      	b.n	800cd02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d110      	bne.n	800cd2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd10:	9202      	str	r2, [sp, #8]
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	6a3a      	ldr	r2, [r7, #32]
 800cd1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f001 fb78 	bl	800e414 <xTaskCreateStatic>
 800cd24:	4603      	mov	r3, r0
 800cd26:	613b      	str	r3, [r7, #16]
 800cd28:	e013      	b.n	800cd52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d110      	bne.n	800cd52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd30:	6a3b      	ldr	r3, [r7, #32]
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	f107 0310 	add.w	r3, r7, #16
 800cd38:	9301      	str	r3, [sp, #4]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	9300      	str	r3, [sp, #0]
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f001 fbc6 	bl	800e4d4 <xTaskCreate>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d001      	beq.n	800cd52 <osThreadNew+0x11a>
            hTask = NULL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd52:	693b      	ldr	r3, [r7, #16]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3728      	adds	r7, #40	@ 0x28
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd64:	f3ef 8305 	mrs	r3, IPSR
 800cd68:	60bb      	str	r3, [r7, #8]
  return(result);
 800cd6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d003      	beq.n	800cd78 <osDelay+0x1c>
    stat = osErrorISR;
 800cd70:	f06f 0305 	mvn.w	r3, #5
 800cd74:	60fb      	str	r3, [r7, #12]
 800cd76:	e007      	b.n	800cd88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d002      	beq.n	800cd88 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f001 fd78 	bl	800e878 <vTaskDelay>
    }
  }

  return (stat);
 800cd88:	68fb      	ldr	r3, [r7, #12]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3710      	adds	r7, #16
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}

0800cd92 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b08a      	sub	sp, #40	@ 0x28
 800cd96:	af02      	add	r7, sp, #8
 800cd98:	60f8      	str	r0, [r7, #12]
 800cd9a:	60b9      	str	r1, [r7, #8]
 800cd9c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cda2:	f3ef 8305 	mrs	r3, IPSR
 800cda6:	613b      	str	r3, [r7, #16]
  return(result);
 800cda8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d15f      	bne.n	800ce6e <osMessageQueueNew+0xdc>
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d05c      	beq.n	800ce6e <osMessageQueueNew+0xdc>
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d059      	beq.n	800ce6e <osMessageQueueNew+0xdc>
    mem = -1;
 800cdba:	f04f 33ff 	mov.w	r3, #4294967295
 800cdbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d029      	beq.n	800ce1a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d012      	beq.n	800cdf4 <osMessageQueueNew+0x62>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	2b4f      	cmp	r3, #79	@ 0x4f
 800cdd4:	d90e      	bls.n	800cdf4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d00a      	beq.n	800cdf4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	695a      	ldr	r2, [r3, #20]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68b9      	ldr	r1, [r7, #8]
 800cde6:	fb01 f303 	mul.w	r3, r1, r3
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d302      	bcc.n	800cdf4 <osMessageQueueNew+0x62>
        mem = 1;
 800cdee:	2301      	movs	r3, #1
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	e014      	b.n	800ce1e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d110      	bne.n	800ce1e <osMessageQueueNew+0x8c>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10c      	bne.n	800ce1e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d108      	bne.n	800ce1e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	695b      	ldr	r3, [r3, #20]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d104      	bne.n	800ce1e <osMessageQueueNew+0x8c>
          mem = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	61bb      	str	r3, [r7, #24]
 800ce18:	e001      	b.n	800ce1e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d10b      	bne.n	800ce3c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	9100      	str	r1, [sp, #0]
 800ce30:	68b9      	ldr	r1, [r7, #8]
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f000 fc22 	bl	800d67c <xQueueGenericCreateStatic>
 800ce38:	61f8      	str	r0, [r7, #28]
 800ce3a:	e008      	b.n	800ce4e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ce3c:	69bb      	ldr	r3, [r7, #24]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d105      	bne.n	800ce4e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ce42:	2200      	movs	r2, #0
 800ce44:	68b9      	ldr	r1, [r7, #8]
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f000 fc95 	bl	800d776 <xQueueGenericCreate>
 800ce4c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d00c      	beq.n	800ce6e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	617b      	str	r3, [r7, #20]
 800ce60:	e001      	b.n	800ce66 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ce62:	2300      	movs	r3, #0
 800ce64:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ce66:	6979      	ldr	r1, [r7, #20]
 800ce68:	69f8      	ldr	r0, [r7, #28]
 800ce6a:	f001 fa75 	bl	800e358 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ce6e:	69fb      	ldr	r3, [r7, #28]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	603b      	str	r3, [r7, #0]
 800ce84:	4613      	mov	r3, r2
 800ce86:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce90:	f3ef 8305 	mrs	r3, IPSR
 800ce94:	617b      	str	r3, [r7, #20]
  return(result);
 800ce96:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d028      	beq.n	800ceee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d005      	beq.n	800ceae <osMessageQueuePut+0x36>
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <osMessageQueuePut+0x36>
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ceae:	f06f 0303 	mvn.w	r3, #3
 800ceb2:	61fb      	str	r3, [r7, #28]
 800ceb4:	e038      	b.n	800cf28 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ceba:	f107 0210 	add.w	r2, r7, #16
 800cebe:	2300      	movs	r3, #0
 800cec0:	68b9      	ldr	r1, [r7, #8]
 800cec2:	69b8      	ldr	r0, [r7, #24]
 800cec4:	f000 fdea 	bl	800da9c <xQueueGenericSendFromISR>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d003      	beq.n	800ced6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800cece:	f06f 0302 	mvn.w	r3, #2
 800ced2:	61fb      	str	r3, [r7, #28]
 800ced4:	e028      	b.n	800cf28 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d025      	beq.n	800cf28 <osMessageQueuePut+0xb0>
 800cedc:	4b15      	ldr	r3, [pc, #84]	@ (800cf34 <osMessageQueuePut+0xbc>)
 800cede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cee2:	601a      	str	r2, [r3, #0]
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	f3bf 8f6f 	isb	sy
 800ceec:	e01c      	b.n	800cf28 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ceee:	69bb      	ldr	r3, [r7, #24]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d002      	beq.n	800cefa <osMessageQueuePut+0x82>
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d103      	bne.n	800cf02 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800cefa:	f06f 0303 	mvn.w	r3, #3
 800cefe:	61fb      	str	r3, [r7, #28]
 800cf00:	e012      	b.n	800cf28 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf02:	2300      	movs	r3, #0
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	68b9      	ldr	r1, [r7, #8]
 800cf08:	69b8      	ldr	r0, [r7, #24]
 800cf0a:	f000 fcc5 	bl	800d898 <xQueueGenericSend>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d009      	beq.n	800cf28 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800cf1a:	f06f 0301 	mvn.w	r3, #1
 800cf1e:	61fb      	str	r3, [r7, #28]
 800cf20:	e002      	b.n	800cf28 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cf22:	f06f 0302 	mvn.w	r3, #2
 800cf26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf28:	69fb      	ldr	r3, [r7, #28]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	e000ed04 	.word	0xe000ed04

0800cf38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf4e:	f3ef 8305 	mrs	r3, IPSR
 800cf52:	617b      	str	r3, [r7, #20]
  return(result);
 800cf54:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d028      	beq.n	800cfac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d005      	beq.n	800cf6c <osMessageQueueGet+0x34>
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d002      	beq.n	800cf6c <osMessageQueueGet+0x34>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cf6c:	f06f 0303 	mvn.w	r3, #3
 800cf70:	61fb      	str	r3, [r7, #28]
 800cf72:	e037      	b.n	800cfe4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cf74:	2300      	movs	r3, #0
 800cf76:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cf78:	f107 0310 	add.w	r3, r7, #16
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	68b9      	ldr	r1, [r7, #8]
 800cf80:	69b8      	ldr	r0, [r7, #24]
 800cf82:	f001 f81b 	bl	800dfbc <xQueueReceiveFromISR>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d003      	beq.n	800cf94 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf8c:	f06f 0302 	mvn.w	r3, #2
 800cf90:	61fb      	str	r3, [r7, #28]
 800cf92:	e027      	b.n	800cfe4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d024      	beq.n	800cfe4 <osMessageQueueGet+0xac>
 800cf9a:	4b15      	ldr	r3, [pc, #84]	@ (800cff0 <osMessageQueueGet+0xb8>)
 800cf9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	e01b      	b.n	800cfe4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <osMessageQueueGet+0x80>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d103      	bne.n	800cfc0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cfb8:	f06f 0303 	mvn.w	r3, #3
 800cfbc:	61fb      	str	r3, [r7, #28]
 800cfbe:	e011      	b.n	800cfe4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	68b9      	ldr	r1, [r7, #8]
 800cfc4:	69b8      	ldr	r0, [r7, #24]
 800cfc6:	f000 fe07 	bl	800dbd8 <xQueueReceive>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d009      	beq.n	800cfe4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cfd6:	f06f 0301 	mvn.w	r3, #1
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	e002      	b.n	800cfe4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cfde:	f06f 0302 	mvn.w	r3, #2
 800cfe2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfe4:	69fb      	ldr	r3, [r7, #28]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	@ 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d102      	bne.n	800d00c <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	627b      	str	r3, [r7, #36]	@ 0x24
 800d00a:	e023      	b.n	800d054 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d00c:	f3ef 8305 	mrs	r3, IPSR
 800d010:	61bb      	str	r3, [r7, #24]
  return(result);
 800d012:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 800d014:	2b00      	cmp	r3, #0
 800d016:	d019      	beq.n	800d04c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d018:	f3ef 8211 	mrs	r2, BASEPRI
 800d01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	613a      	str	r2, [r7, #16]
 800d02e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d030:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d032:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d034:	6a3b      	ldr	r3, [r7, #32]
 800d036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d038:	6a3b      	ldr	r3, [r7, #32]
 800d03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d04a:	e003      	b.n	800d054 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d04c:	6a38      	ldr	r0, [r7, #32]
 800d04e:	f001 f837 	bl	800e0c0 <uxQueueSpacesAvailable>
 800d052:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 800d054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d056:	4618      	mov	r0, r3
 800d058:	3728      	adds	r7, #40	@ 0x28
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	4a07      	ldr	r2, [pc, #28]	@ (800d08c <vApplicationGetIdleTaskMemory+0x2c>)
 800d070:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	4a06      	ldr	r2, [pc, #24]	@ (800d090 <vApplicationGetIdleTaskMemory+0x30>)
 800d076:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2280      	movs	r2, #128	@ 0x80
 800d07c:	601a      	str	r2, [r3, #0]
}
 800d07e:	bf00      	nop
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20002738 	.word	0x20002738
 800d090:	200027e0 	.word	0x200027e0

0800d094 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	4a07      	ldr	r2, [pc, #28]	@ (800d0c0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d0a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	4a06      	ldr	r2, [pc, #24]	@ (800d0c4 <vApplicationGetTimerTaskMemory+0x30>)
 800d0aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d0b2:	601a      	str	r2, [r3, #0]
}
 800d0b4:	bf00      	nop
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	200029e0 	.word	0x200029e0
 800d0c4:	20002a88 	.word	0x20002a88

0800d0c8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800d0ce:	2020      	movs	r0, #32
 800d0d0:	f003 fe24 	bl	8010d1c <pvPortMalloc>
 800d0d4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00a      	beq.n	800d0f2 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f9aa 	bl	800d440 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800d0f2:	687b      	ldr	r3, [r7, #4]
	}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b090      	sub	sp, #64	@ 0x40
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800d112:	2300      	movs	r3, #0
 800d114:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10b      	bne.n	800d134 <xEventGroupWaitBits+0x38>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	623b      	str	r3, [r7, #32]
}
 800d12e:	bf00      	nop
 800d130:	bf00      	nop
 800d132:	e7fd      	b.n	800d130 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d13a:	d30b      	bcc.n	800d154 <xEventGroupWaitBits+0x58>
	__asm volatile
 800d13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d140:	f383 8811 	msr	BASEPRI, r3
 800d144:	f3bf 8f6f 	isb	sy
 800d148:	f3bf 8f4f 	dsb	sy
 800d14c:	61fb      	str	r3, [r7, #28]
}
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	e7fd      	b.n	800d150 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10b      	bne.n	800d172 <xEventGroupWaitBits+0x76>
	__asm volatile
 800d15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15e:	f383 8811 	msr	BASEPRI, r3
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	f3bf 8f4f 	dsb	sy
 800d16a:	61bb      	str	r3, [r7, #24]
}
 800d16c:	bf00      	nop
 800d16e:	bf00      	nop
 800d170:	e7fd      	b.n	800d16e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d172:	f002 fc3d 	bl	800f9f0 <xTaskGetSchedulerState>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d102      	bne.n	800d182 <xEventGroupWaitBits+0x86>
 800d17c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d101      	bne.n	800d186 <xEventGroupWaitBits+0x8a>
 800d182:	2301      	movs	r3, #1
 800d184:	e000      	b.n	800d188 <xEventGroupWaitBits+0x8c>
 800d186:	2300      	movs	r3, #0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d10b      	bne.n	800d1a4 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	617b      	str	r3, [r7, #20]
}
 800d19e:	bf00      	nop
 800d1a0:	bf00      	nop
 800d1a2:	e7fd      	b.n	800d1a0 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800d1a4:	f001 fe1c 	bl	800ede0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	68b9      	ldr	r1, [r7, #8]
 800d1b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d1b4:	f000 f90d 	bl	800d3d2 <prvTestWaitCondition>
 800d1b8:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800d1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00e      	beq.n	800d1de <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800d1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d028      	beq.n	800d220 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	43db      	mvns	r3, r3
 800d1d6:	401a      	ands	r2, r3
 800d1d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1da:	601a      	str	r2, [r3, #0]
 800d1dc:	e020      	b.n	800d220 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800d1de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d104      	bne.n	800d1ee <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1ec:	e018      	b.n	800d220 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d003      	beq.n	800d1fc <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d003      	beq.n	800d20a <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800d202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d204:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d208:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800d20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d20c:	1d18      	adds	r0, r3, #4
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d212:	4313      	orrs	r3, r2
 800d214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d216:	4619      	mov	r1, r3
 800d218:	f002 f8b8 	bl	800f38c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800d21c:	2300      	movs	r3, #0
 800d21e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800d220:	f001 fdec 	bl	800edfc <xTaskResumeAll>
 800d224:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800d226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d031      	beq.n	800d290 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d107      	bne.n	800d242 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800d232:	4b1a      	ldr	r3, [pc, #104]	@ (800d29c <xEventGroupWaitBits+0x1a0>)
 800d234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d238:	601a      	str	r2, [r3, #0]
 800d23a:	f3bf 8f4f 	dsb	sy
 800d23e:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800d242:	f002 fd4f 	bl	800fce4 <uxTaskResetEventItemValue>
 800d246:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800d248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d24a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d11a      	bne.n	800d288 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800d252:	f003 fc41 	bl	8010ad8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800d256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d262:	f000 f8b6 	bl	800d3d2 <prvTestWaitCondition>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d009      	beq.n	800d280 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d006      	beq.n	800d280 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800d272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	43db      	mvns	r3, r3
 800d27a:	401a      	ands	r2, r3
 800d27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d27e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800d284:	f003 fc5a 	bl	8010b3c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800d290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d292:	4618      	mov	r0, r3
 800d294:	3740      	adds	r7, #64	@ 0x40
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	e000ed04 	.word	0xe000ed04

0800d2a0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08e      	sub	sp, #56	@ 0x38
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10b      	bne.n	800d2d4 <xEventGroupSetBits+0x34>
	__asm volatile
 800d2bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2c0:	f383 8811 	msr	BASEPRI, r3
 800d2c4:	f3bf 8f6f 	isb	sy
 800d2c8:	f3bf 8f4f 	dsb	sy
 800d2cc:	613b      	str	r3, [r7, #16]
}
 800d2ce:	bf00      	nop
 800d2d0:	bf00      	nop
 800d2d2:	e7fd      	b.n	800d2d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2da:	d30b      	bcc.n	800d2f4 <xEventGroupSetBits+0x54>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	60fb      	str	r3, [r7, #12]
}
 800d2ee:	bf00      	nop
 800d2f0:	bf00      	nop
 800d2f2:	e7fd      	b.n	800d2f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800d2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2fc:	3308      	adds	r3, #8
 800d2fe:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800d300:	f001 fd6e 	bl	800ede0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800d304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800d30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	431a      	orrs	r2, r3
 800d312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d314:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800d316:	e03c      	b.n	800d392 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800d318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800d31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800d324:	2300      	movs	r3, #0
 800d326:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d32e:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800d330:	69bb      	ldr	r3, [r7, #24]
 800d332:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d336:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d108      	bne.n	800d354 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800d342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	4013      	ands	r3, r2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00b      	beq.n	800d366 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800d34e:	2301      	movs	r3, #1
 800d350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d352:	e008      	b.n	800d366 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800d354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	4013      	ands	r3, r2
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d101      	bne.n	800d366 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800d362:	2301      	movs	r3, #1
 800d364:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800d366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d010      	beq.n	800d38e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800d376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	4313      	orrs	r3, r2
 800d37c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800d37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d386:	4619      	mov	r1, r3
 800d388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d38a:	f002 f8cd 	bl	800f528 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800d392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	429a      	cmp	r2, r3
 800d398:	d1be      	bne.n	800d318 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3a0:	43db      	mvns	r3, r3
 800d3a2:	401a      	ands	r2, r3
 800d3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a6:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800d3a8:	f001 fd28 	bl	800edfc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ae:	681b      	ldr	r3, [r3, #0]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3738      	adds	r7, #56	@ 0x38
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff ff6b 	bl	800d2a0 <xEventGroupSetBits>
}
 800d3ca:	bf00      	nop
 800d3cc:	3708      	adds	r7, #8
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800d3d2:	b480      	push	{r7}
 800d3d4:	b087      	sub	sp, #28
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	60b9      	str	r1, [r7, #8]
 800d3dc:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d107      	bne.n	800d3f8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4013      	ands	r3, r2
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	617b      	str	r3, [r7, #20]
 800d3f6:	e007      	b.n	800d408 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	68ba      	ldr	r2, [r7, #8]
 800d400:	429a      	cmp	r2, r3
 800d402:	d101      	bne.n	800d408 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800d404:	2301      	movs	r3, #1
 800d406:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800d408:	697b      	ldr	r3, [r7, #20]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	371c      	adds	r7, #28
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
	...

0800d418 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	68f9      	ldr	r1, [r7, #12]
 800d42a:	4804      	ldr	r0, [pc, #16]	@ (800d43c <xEventGroupSetBitsFromISR+0x24>)
 800d42c:	f003 fa00 	bl	8010830 <xTimerPendFunctionCallFromISR>
 800d430:	6178      	str	r0, [r7, #20]

		return xReturn;
 800d432:	697b      	ldr	r3, [r7, #20]
	}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	0800d3b9 	.word	0x0800d3b9

0800d440 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f103 0208 	add.w	r2, r3, #8
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f04f 32ff 	mov.w	r2, #4294967295
 800d458:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f103 0208 	add.w	r2, r3, #8
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f103 0208 	add.w	r2, r3, #8
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d474:	bf00      	nop
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d48e:	bf00      	nop
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	683a      	ldr	r2, [r7, #0]
 800d4be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	601a      	str	r2, [r3, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f8:	d103      	bne.n	800d502 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	60fb      	str	r3, [r7, #12]
 800d500:	e00c      	b.n	800d51c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3308      	adds	r3, #8
 800d506:	60fb      	str	r3, [r7, #12]
 800d508:	e002      	b.n	800d510 <vListInsert+0x2e>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	60fb      	str	r3, [r7, #12]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68ba      	ldr	r2, [r7, #8]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d2f6      	bcs.n	800d50a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	685a      	ldr	r2, [r3, #4]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685b      	ldr	r3, [r3, #4]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	68fa      	ldr	r2, [r7, #12]
 800d530:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	601a      	str	r2, [r3, #0]
}
 800d548:	bf00      	nop
 800d54a:	3714      	adds	r7, #20
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	6892      	ldr	r2, [r2, #8]
 800d56a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	6852      	ldr	r2, [r2, #4]
 800d574:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d103      	bne.n	800d588 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	689a      	ldr	r2, [r3, #8]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	1e5a      	subs	r2, r3, #1
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10b      	bne.n	800d5d4 <xQueueGenericReset+0x2c>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	60bb      	str	r3, [r7, #8]
}
 800d5ce:	bf00      	nop
 800d5d0:	bf00      	nop
 800d5d2:	e7fd      	b.n	800d5d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d5d4:	f003 fa80 	bl	8010ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681a      	ldr	r2, [r3, #0]
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5e0:	68f9      	ldr	r1, [r7, #12]
 800d5e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d5e4:	fb01 f303 	mul.w	r3, r1, r3
 800d5e8:	441a      	add	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d604:	3b01      	subs	r3, #1
 800d606:	68f9      	ldr	r1, [r7, #12]
 800d608:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d60a:	fb01 f303 	mul.w	r3, r1, r3
 800d60e:	441a      	add	r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	22ff      	movs	r2, #255	@ 0xff
 800d618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	22ff      	movs	r2, #255	@ 0xff
 800d620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d114      	bne.n	800d654 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d01a      	beq.n	800d668 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	3310      	adds	r3, #16
 800d636:	4618      	mov	r0, r3
 800d638:	f001 ff12 	bl	800f460 <xTaskRemoveFromEventList>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d012      	beq.n	800d668 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d642:	4b0d      	ldr	r3, [pc, #52]	@ (800d678 <xQueueGenericReset+0xd0>)
 800d644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	e009      	b.n	800d668 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	3310      	adds	r3, #16
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff fef1 	bl	800d440 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	3324      	adds	r3, #36	@ 0x24
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff feec 	bl	800d440 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d668:	f003 fa68 	bl	8010b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d66c:	2301      	movs	r3, #1
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	e000ed04 	.word	0xe000ed04

0800d67c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08e      	sub	sp, #56	@ 0x38
 800d680:	af02      	add	r7, sp, #8
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d10b      	bne.n	800d6a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6a2:	bf00      	nop
 800d6a4:	bf00      	nop
 800d6a6:	e7fd      	b.n	800d6a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10b      	bne.n	800d6c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <xQueueGenericCreateStatic+0x56>
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <xQueueGenericCreateStatic+0x5a>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	e000      	b.n	800d6d8 <xQueueGenericCreateStatic+0x5c>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10b      	bne.n	800d6f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	623b      	str	r3, [r7, #32]
}
 800d6ee:	bf00      	nop
 800d6f0:	bf00      	nop
 800d6f2:	e7fd      	b.n	800d6f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d102      	bne.n	800d700 <xQueueGenericCreateStatic+0x84>
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <xQueueGenericCreateStatic+0x88>
 800d700:	2301      	movs	r3, #1
 800d702:	e000      	b.n	800d706 <xQueueGenericCreateStatic+0x8a>
 800d704:	2300      	movs	r3, #0
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	61fb      	str	r3, [r7, #28]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d722:	2350      	movs	r3, #80	@ 0x50
 800d724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b50      	cmp	r3, #80	@ 0x50
 800d72a:	d00b      	beq.n	800d744 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d730:	f383 8811 	msr	BASEPRI, r3
 800d734:	f3bf 8f6f 	isb	sy
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	61bb      	str	r3, [r7, #24]
}
 800d73e:	bf00      	nop
 800d740:	bf00      	nop
 800d742:	e7fd      	b.n	800d740 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d744:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00d      	beq.n	800d76c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d752:	2201      	movs	r2, #1
 800d754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d758:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	4613      	mov	r3, r2
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	68b9      	ldr	r1, [r7, #8]
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f000 f840 	bl	800d7ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d76e:	4618      	mov	r0, r3
 800d770:	3730      	adds	r7, #48	@ 0x30
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d776:	b580      	push	{r7, lr}
 800d778:	b08a      	sub	sp, #40	@ 0x28
 800d77a:	af02      	add	r7, sp, #8
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	60b9      	str	r1, [r7, #8]
 800d780:	4613      	mov	r3, r2
 800d782:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10b      	bne.n	800d7a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	613b      	str	r3, [r7, #16]
}
 800d79c:	bf00      	nop
 800d79e:	bf00      	nop
 800d7a0:	e7fd      	b.n	800d79e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	68ba      	ldr	r2, [r7, #8]
 800d7a6:	fb02 f303 	mul.w	r3, r2, r3
 800d7aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	3350      	adds	r3, #80	@ 0x50
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f003 fab3 	bl	8010d1c <pvPortMalloc>
 800d7b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d7b8:	69bb      	ldr	r3, [r7, #24]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d011      	beq.n	800d7e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d7be:	69bb      	ldr	r3, [r7, #24]
 800d7c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	3350      	adds	r3, #80	@ 0x50
 800d7c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7d0:	79fa      	ldrb	r2, [r7, #7]
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	9300      	str	r3, [sp, #0]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	697a      	ldr	r2, [r7, #20]
 800d7da:	68b9      	ldr	r1, [r7, #8]
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f000 f805 	bl	800d7ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7e2:	69bb      	ldr	r3, [r7, #24]
	}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3720      	adds	r7, #32
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	60b9      	str	r1, [r7, #8]
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d103      	bne.n	800d808 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	69ba      	ldr	r2, [r7, #24]
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	e002      	b.n	800d80e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d81a:	2101      	movs	r1, #1
 800d81c:	69b8      	ldr	r0, [r7, #24]
 800d81e:	f7ff fec3 	bl	800d5a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d82a:	bf00      	nop
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d832:	b580      	push	{r7, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00e      	beq.n	800d85e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d852:	2300      	movs	r3, #0
 800d854:	2200      	movs	r2, #0
 800d856:	2100      	movs	r1, #0
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f81d 	bl	800d898 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d85e:	bf00      	nop
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}

0800d866 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d866:	b580      	push	{r7, lr}
 800d868:	b086      	sub	sp, #24
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	4603      	mov	r3, r0
 800d86e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d870:	2301      	movs	r3, #1
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	2300      	movs	r3, #0
 800d876:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d878:	79fb      	ldrb	r3, [r7, #7]
 800d87a:	461a      	mov	r2, r3
 800d87c:	6939      	ldr	r1, [r7, #16]
 800d87e:	6978      	ldr	r0, [r7, #20]
 800d880:	f7ff ff79 	bl	800d776 <xQueueGenericCreate>
 800d884:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d886:	68f8      	ldr	r0, [r7, #12]
 800d888:	f7ff ffd3 	bl	800d832 <prvInitialiseMutex>

		return xNewQueue;
 800d88c:	68fb      	ldr	r3, [r7, #12]
	}
 800d88e:	4618      	mov	r0, r3
 800d890:	3718      	adds	r7, #24
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
	...

0800d898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	@ 0x38
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10b      	bne.n	800d8cc <xQueueGenericSend+0x34>
	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8c6:	bf00      	nop
 800d8c8:	bf00      	nop
 800d8ca:	e7fd      	b.n	800d8c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d103      	bne.n	800d8da <xQueueGenericSend+0x42>
 800d8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <xQueueGenericSend+0x46>
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e000      	b.n	800d8e0 <xQueueGenericSend+0x48>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10b      	bne.n	800d8fc <xQueueGenericSend+0x64>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d8f6:	bf00      	nop
 800d8f8:	bf00      	nop
 800d8fa:	e7fd      	b.n	800d8f8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d103      	bne.n	800d90a <xQueueGenericSend+0x72>
 800d902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d906:	2b01      	cmp	r3, #1
 800d908:	d101      	bne.n	800d90e <xQueueGenericSend+0x76>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e000      	b.n	800d910 <xQueueGenericSend+0x78>
 800d90e:	2300      	movs	r3, #0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10b      	bne.n	800d92c <xQueueGenericSend+0x94>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	623b      	str	r3, [r7, #32]
}
 800d926:	bf00      	nop
 800d928:	bf00      	nop
 800d92a:	e7fd      	b.n	800d928 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d92c:	f002 f860 	bl	800f9f0 <xTaskGetSchedulerState>
 800d930:	4603      	mov	r3, r0
 800d932:	2b00      	cmp	r3, #0
 800d934:	d102      	bne.n	800d93c <xQueueGenericSend+0xa4>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d101      	bne.n	800d940 <xQueueGenericSend+0xa8>
 800d93c:	2301      	movs	r3, #1
 800d93e:	e000      	b.n	800d942 <xQueueGenericSend+0xaa>
 800d940:	2300      	movs	r3, #0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d10b      	bne.n	800d95e <xQueueGenericSend+0xc6>
	__asm volatile
 800d946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	61fb      	str	r3, [r7, #28]
}
 800d958:	bf00      	nop
 800d95a:	bf00      	nop
 800d95c:	e7fd      	b.n	800d95a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d95e:	f003 f8bb 	bl	8010ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d964:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d302      	bcc.n	800d974 <xQueueGenericSend+0xdc>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b02      	cmp	r3, #2
 800d972:	d129      	bne.n	800d9c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d974:	683a      	ldr	r2, [r7, #0]
 800d976:	68b9      	ldr	r1, [r7, #8]
 800d978:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d97a:	f000 fbdd 	bl	800e138 <prvCopyDataToQueue>
 800d97e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d984:	2b00      	cmp	r3, #0
 800d986:	d010      	beq.n	800d9aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98a:	3324      	adds	r3, #36	@ 0x24
 800d98c:	4618      	mov	r0, r3
 800d98e:	f001 fd67 	bl	800f460 <xTaskRemoveFromEventList>
 800d992:	4603      	mov	r3, r0
 800d994:	2b00      	cmp	r3, #0
 800d996:	d013      	beq.n	800d9c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d998:	4b3f      	ldr	r3, [pc, #252]	@ (800da98 <xQueueGenericSend+0x200>)
 800d99a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	e00a      	b.n	800d9c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9b0:	4b39      	ldr	r3, [pc, #228]	@ (800da98 <xQueueGenericSend+0x200>)
 800d9b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9c0:	f003 f8bc 	bl	8010b3c <vPortExitCritical>
				return pdPASS;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e063      	b.n	800da90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d103      	bne.n	800d9d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9ce:	f003 f8b5 	bl	8010b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e05c      	b.n	800da90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9dc:	f107 0314 	add.w	r3, r7, #20
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f001 fe05 	bl	800f5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ea:	f003 f8a7 	bl	8010b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9ee:	f001 f9f7 	bl	800ede0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9f2:	f003 f871 	bl	8010ad8 <vPortEnterCritical>
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d9fc:	b25b      	sxtb	r3, r3
 800d9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da02:	d103      	bne.n	800da0c <xQueueGenericSend+0x174>
 800da04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da06:	2200      	movs	r2, #0
 800da08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da12:	b25b      	sxtb	r3, r3
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d103      	bne.n	800da22 <xQueueGenericSend+0x18a>
 800da1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da22:	f003 f88b 	bl	8010b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da26:	1d3a      	adds	r2, r7, #4
 800da28:	f107 0314 	add.w	r3, r7, #20
 800da2c:	4611      	mov	r1, r2
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 fdf4 	bl	800f61c <xTaskCheckForTimeOut>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d124      	bne.n	800da84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da3c:	f000 fc74 	bl	800e328 <prvIsQueueFull>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d018      	beq.n	800da78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da48:	3310      	adds	r3, #16
 800da4a:	687a      	ldr	r2, [r7, #4]
 800da4c:	4611      	mov	r1, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f001 fc76 	bl	800f340 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da56:	f000 fbff 	bl	800e258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da5a:	f001 f9cf 	bl	800edfc <xTaskResumeAll>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	f47f af7c 	bne.w	800d95e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800da66:	4b0c      	ldr	r3, [pc, #48]	@ (800da98 <xQueueGenericSend+0x200>)
 800da68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	f3bf 8f6f 	isb	sy
 800da76:	e772      	b.n	800d95e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da7a:	f000 fbed 	bl	800e258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da7e:	f001 f9bd 	bl	800edfc <xTaskResumeAll>
 800da82:	e76c      	b.n	800d95e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da86:	f000 fbe7 	bl	800e258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da8a:	f001 f9b7 	bl	800edfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da90:	4618      	mov	r0, r3
 800da92:	3738      	adds	r7, #56	@ 0x38
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	e000ed04 	.word	0xe000ed04

0800da9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b090      	sub	sp, #64	@ 0x40
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800daae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d10b      	bne.n	800dacc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	e7fd      	b.n	800dac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d103      	bne.n	800dada <xQueueGenericSendFromISR+0x3e>
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <xQueueGenericSendFromISR+0x42>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <xQueueGenericSendFromISR+0x44>
 800dade:	2300      	movs	r3, #0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10b      	bne.n	800dafc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800daf6:	bf00      	nop
 800daf8:	bf00      	nop
 800dafa:	e7fd      	b.n	800daf8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d103      	bne.n	800db0a <xQueueGenericSendFromISR+0x6e>
 800db02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db06:	2b01      	cmp	r3, #1
 800db08:	d101      	bne.n	800db0e <xQueueGenericSendFromISR+0x72>
 800db0a:	2301      	movs	r3, #1
 800db0c:	e000      	b.n	800db10 <xQueueGenericSendFromISR+0x74>
 800db0e:	2300      	movs	r3, #0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10b      	bne.n	800db2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	623b      	str	r3, [r7, #32]
}
 800db26:	bf00      	nop
 800db28:	bf00      	nop
 800db2a:	e7fd      	b.n	800db28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db2c:	f003 f8b4 	bl	8010c98 <vPortValidateInterruptPriority>
	__asm volatile
 800db30:	f3ef 8211 	mrs	r2, BASEPRI
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	61fa      	str	r2, [r7, #28]
 800db46:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800db48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800db54:	429a      	cmp	r2, r3
 800db56:	d302      	bcc.n	800db5e <xQueueGenericSendFromISR+0xc2>
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d12f      	bne.n	800dbbe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	68b9      	ldr	r1, [r7, #8]
 800db72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db74:	f000 fae0 	bl	800e138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800db78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d112      	bne.n	800dba8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800db82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db86:	2b00      	cmp	r3, #0
 800db88:	d016      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800db8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8c:	3324      	adds	r3, #36	@ 0x24
 800db8e:	4618      	mov	r0, r3
 800db90:	f001 fc66 	bl	800f460 <xTaskRemoveFromEventList>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00e      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00b      	beq.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	e007      	b.n	800dbb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dba8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800dbac:	3301      	adds	r3, #1
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	b25a      	sxtb	r2, r3
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800dbbc:	e001      	b.n	800dbc2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbc4:	617b      	str	r3, [r7, #20]
	__asm volatile
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f383 8811 	msr	BASEPRI, r3
}
 800dbcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3740      	adds	r7, #64	@ 0x40
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08c      	sub	sp, #48	@ 0x30
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	60f8      	str	r0, [r7, #12]
 800dbe0:	60b9      	str	r1, [r7, #8]
 800dbe2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dbec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10b      	bne.n	800dc0a <xQueueReceive+0x32>
	__asm volatile
 800dbf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	623b      	str	r3, [r7, #32]
}
 800dc04:	bf00      	nop
 800dc06:	bf00      	nop
 800dc08:	e7fd      	b.n	800dc06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d103      	bne.n	800dc18 <xQueueReceive+0x40>
 800dc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d101      	bne.n	800dc1c <xQueueReceive+0x44>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	e000      	b.n	800dc1e <xQueueReceive+0x46>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10b      	bne.n	800dc3a <xQueueReceive+0x62>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	61fb      	str	r3, [r7, #28]
}
 800dc34:	bf00      	nop
 800dc36:	bf00      	nop
 800dc38:	e7fd      	b.n	800dc36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc3a:	f001 fed9 	bl	800f9f0 <xTaskGetSchedulerState>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <xQueueReceive+0x72>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <xQueueReceive+0x76>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e000      	b.n	800dc50 <xQueueReceive+0x78>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10b      	bne.n	800dc6c <xQueueReceive+0x94>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	61bb      	str	r3, [r7, #24]
}
 800dc66:	bf00      	nop
 800dc68:	bf00      	nop
 800dc6a:	e7fd      	b.n	800dc68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc6c:	f002 ff34 	bl	8010ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d01f      	beq.n	800dcbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dc7c:	68b9      	ldr	r1, [r7, #8]
 800dc7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc80:	f000 fac4 	bl	800e20c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc86:	1e5a      	subs	r2, r3, #1
 800dc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00f      	beq.n	800dcb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc96:	3310      	adds	r3, #16
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f001 fbe1 	bl	800f460 <xTaskRemoveFromEventList>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dca4:	4b3c      	ldr	r3, [pc, #240]	@ (800dd98 <xQueueReceive+0x1c0>)
 800dca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcb4:	f002 ff42 	bl	8010b3c <vPortExitCritical>
				return pdPASS;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e069      	b.n	800dd90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d103      	bne.n	800dcca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcc2:	f002 ff3b 	bl	8010b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	e062      	b.n	800dd90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d106      	bne.n	800dcde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcd0:	f107 0310 	add.w	r3, r7, #16
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f001 fc8b 	bl	800f5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcde:	f002 ff2d 	bl	8010b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dce2:	f001 f87d 	bl	800ede0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dce6:	f002 fef7 	bl	8010ad8 <vPortEnterCritical>
 800dcea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dcf0:	b25b      	sxtb	r3, r3
 800dcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcf6:	d103      	bne.n	800dd00 <xQueueReceive+0x128>
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd06:	b25b      	sxtb	r3, r3
 800dd08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0c:	d103      	bne.n	800dd16 <xQueueReceive+0x13e>
 800dd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd16:	f002 ff11 	bl	8010b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd1a:	1d3a      	adds	r2, r7, #4
 800dd1c:	f107 0310 	add.w	r3, r7, #16
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f001 fc7a 	bl	800f61c <xTaskCheckForTimeOut>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d123      	bne.n	800dd76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd30:	f000 fae4 	bl	800e2fc <prvIsQueueEmpty>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d017      	beq.n	800dd6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd3c:	3324      	adds	r3, #36	@ 0x24
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	4611      	mov	r1, r2
 800dd42:	4618      	mov	r0, r3
 800dd44:	f001 fafc 	bl	800f340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd4a:	f000 fa85 	bl	800e258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd4e:	f001 f855 	bl	800edfc <xTaskResumeAll>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d189      	bne.n	800dc6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dd58:	4b0f      	ldr	r3, [pc, #60]	@ (800dd98 <xQueueReceive+0x1c0>)
 800dd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd5e:	601a      	str	r2, [r3, #0]
 800dd60:	f3bf 8f4f 	dsb	sy
 800dd64:	f3bf 8f6f 	isb	sy
 800dd68:	e780      	b.n	800dc6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd6c:	f000 fa74 	bl	800e258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd70:	f001 f844 	bl	800edfc <xTaskResumeAll>
 800dd74:	e77a      	b.n	800dc6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dd76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd78:	f000 fa6e 	bl	800e258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd7c:	f001 f83e 	bl	800edfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dd82:	f000 fabb 	bl	800e2fc <prvIsQueueEmpty>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f43f af6f 	beq.w	800dc6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dd8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3730      	adds	r7, #48	@ 0x30
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}
 800dd98:	e000ed04 	.word	0xe000ed04

0800dd9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08e      	sub	sp, #56	@ 0x38
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dda6:	2300      	movs	r3, #0
 800dda8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ddb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10b      	bne.n	800ddd0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	623b      	str	r3, [r7, #32]
}
 800ddca:	bf00      	nop
 800ddcc:	bf00      	nop
 800ddce:	e7fd      	b.n	800ddcc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00b      	beq.n	800ddf0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ddd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dddc:	f383 8811 	msr	BASEPRI, r3
 800dde0:	f3bf 8f6f 	isb	sy
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	61fb      	str	r3, [r7, #28]
}
 800ddea:	bf00      	nop
 800ddec:	bf00      	nop
 800ddee:	e7fd      	b.n	800ddec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ddf0:	f001 fdfe 	bl	800f9f0 <xTaskGetSchedulerState>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d102      	bne.n	800de00 <xQueueSemaphoreTake+0x64>
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <xQueueSemaphoreTake+0x68>
 800de00:	2301      	movs	r3, #1
 800de02:	e000      	b.n	800de06 <xQueueSemaphoreTake+0x6a>
 800de04:	2300      	movs	r3, #0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10b      	bne.n	800de22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	61bb      	str	r3, [r7, #24]
}
 800de1c:	bf00      	nop
 800de1e:	bf00      	nop
 800de20:	e7fd      	b.n	800de1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de22:	f002 fe59 	bl	8010ad8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d024      	beq.n	800de7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de34:	1e5a      	subs	r2, r3, #1
 800de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d104      	bne.n	800de4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de42:	f001 ff67 	bl	800fd14 <pvTaskIncrementMutexHeldCount>
 800de46:	4602      	mov	r2, r0
 800de48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00f      	beq.n	800de74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de56:	3310      	adds	r3, #16
 800de58:	4618      	mov	r0, r3
 800de5a:	f001 fb01 	bl	800f460 <xTaskRemoveFromEventList>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d007      	beq.n	800de74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de64:	4b54      	ldr	r3, [pc, #336]	@ (800dfb8 <xQueueSemaphoreTake+0x21c>)
 800de66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de6a:	601a      	str	r2, [r3, #0]
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de74:	f002 fe62 	bl	8010b3c <vPortExitCritical>
				return pdPASS;
 800de78:	2301      	movs	r3, #1
 800de7a:	e098      	b.n	800dfae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d112      	bne.n	800dea8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800de82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00b      	beq.n	800dea0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800de88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de8c:	f383 8811 	msr	BASEPRI, r3
 800de90:	f3bf 8f6f 	isb	sy
 800de94:	f3bf 8f4f 	dsb	sy
 800de98:	617b      	str	r3, [r7, #20]
}
 800de9a:	bf00      	nop
 800de9c:	bf00      	nop
 800de9e:	e7fd      	b.n	800de9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dea0:	f002 fe4c 	bl	8010b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dea4:	2300      	movs	r3, #0
 800dea6:	e082      	b.n	800dfae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d106      	bne.n	800debc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800deae:	f107 030c 	add.w	r3, r7, #12
 800deb2:	4618      	mov	r0, r3
 800deb4:	f001 fb9c 	bl	800f5f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800deb8:	2301      	movs	r3, #1
 800deba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800debc:	f002 fe3e 	bl	8010b3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dec0:	f000 ff8e 	bl	800ede0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dec4:	f002 fe08 	bl	8010ad8 <vPortEnterCritical>
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dece:	b25b      	sxtb	r3, r3
 800ded0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded4:	d103      	bne.n	800dede <xQueueSemaphoreTake+0x142>
 800ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded8:	2200      	movs	r2, #0
 800deda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dee4:	b25b      	sxtb	r3, r3
 800dee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deea:	d103      	bne.n	800def4 <xQueueSemaphoreTake+0x158>
 800deec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deee:	2200      	movs	r2, #0
 800def0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800def4:	f002 fe22 	bl	8010b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800def8:	463a      	mov	r2, r7
 800defa:	f107 030c 	add.w	r3, r7, #12
 800defe:	4611      	mov	r1, r2
 800df00:	4618      	mov	r0, r3
 800df02:	f001 fb8b 	bl	800f61c <xTaskCheckForTimeOut>
 800df06:	4603      	mov	r3, r0
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d132      	bne.n	800df72 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df0e:	f000 f9f5 	bl	800e2fc <prvIsQueueEmpty>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d026      	beq.n	800df66 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d109      	bne.n	800df34 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800df20:	f002 fdda 	bl	8010ad8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	4618      	mov	r0, r3
 800df2a:	f001 fd7f 	bl	800fa2c <xTaskPriorityInherit>
 800df2e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800df30:	f002 fe04 	bl	8010b3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	3324      	adds	r3, #36	@ 0x24
 800df38:	683a      	ldr	r2, [r7, #0]
 800df3a:	4611      	mov	r1, r2
 800df3c:	4618      	mov	r0, r3
 800df3e:	f001 f9ff 	bl	800f340 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df44:	f000 f988 	bl	800e258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df48:	f000 ff58 	bl	800edfc <xTaskResumeAll>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f47f af67 	bne.w	800de22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800df54:	4b18      	ldr	r3, [pc, #96]	@ (800dfb8 <xQueueSemaphoreTake+0x21c>)
 800df56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	e75d      	b.n	800de22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800df66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df68:	f000 f976 	bl	800e258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800df6c:	f000 ff46 	bl	800edfc <xTaskResumeAll>
 800df70:	e757      	b.n	800de22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800df72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df74:	f000 f970 	bl	800e258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800df78:	f000 ff40 	bl	800edfc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df7e:	f000 f9bd 	bl	800e2fc <prvIsQueueEmpty>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	f43f af4c 	beq.w	800de22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800df8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00d      	beq.n	800dfac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800df90:	f002 fda2 	bl	8010ad8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800df94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df96:	f000 f8b7 	bl	800e108 <prvGetDisinheritPriorityAfterTimeout>
 800df9a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800df9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f001 fe1a 	bl	800fbdc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dfa8:	f002 fdc8 	bl	8010b3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dfac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3738      	adds	r7, #56	@ 0x38
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	e000ed04 	.word	0xe000ed04

0800dfbc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08e      	sub	sp, #56	@ 0x38
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d10b      	bne.n	800dfea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800dfd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd6:	f383 8811 	msr	BASEPRI, r3
 800dfda:	f3bf 8f6f 	isb	sy
 800dfde:	f3bf 8f4f 	dsb	sy
 800dfe2:	623b      	str	r3, [r7, #32]
}
 800dfe4:	bf00      	nop
 800dfe6:	bf00      	nop
 800dfe8:	e7fd      	b.n	800dfe6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d103      	bne.n	800dff8 <xQueueReceiveFromISR+0x3c>
 800dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d101      	bne.n	800dffc <xQueueReceiveFromISR+0x40>
 800dff8:	2301      	movs	r3, #1
 800dffa:	e000      	b.n	800dffe <xQueueReceiveFromISR+0x42>
 800dffc:	2300      	movs	r3, #0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d10b      	bne.n	800e01a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800e002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e006:	f383 8811 	msr	BASEPRI, r3
 800e00a:	f3bf 8f6f 	isb	sy
 800e00e:	f3bf 8f4f 	dsb	sy
 800e012:	61fb      	str	r3, [r7, #28]
}
 800e014:	bf00      	nop
 800e016:	bf00      	nop
 800e018:	e7fd      	b.n	800e016 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e01a:	f002 fe3d 	bl	8010c98 <vPortValidateInterruptPriority>
	__asm volatile
 800e01e:	f3ef 8211 	mrs	r2, BASEPRI
 800e022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e026:	f383 8811 	msr	BASEPRI, r3
 800e02a:	f3bf 8f6f 	isb	sy
 800e02e:	f3bf 8f4f 	dsb	sy
 800e032:	61ba      	str	r2, [r7, #24]
 800e034:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e036:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e038:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e03e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e042:	2b00      	cmp	r3, #0
 800e044:	d02f      	beq.n	800e0a6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e04c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e050:	68b9      	ldr	r1, [r7, #8]
 800e052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e054:	f000 f8da 	bl	800e20c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e05a:	1e5a      	subs	r2, r3, #1
 800e05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e05e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e060:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e068:	d112      	bne.n	800e090 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d016      	beq.n	800e0a0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e074:	3310      	adds	r3, #16
 800e076:	4618      	mov	r0, r3
 800e078:	f001 f9f2 	bl	800f460 <xTaskRemoveFromEventList>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d00e      	beq.n	800e0a0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00b      	beq.n	800e0a0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	e007      	b.n	800e0a0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e094:	3301      	adds	r3, #1
 800e096:	b2db      	uxtb	r3, r3
 800e098:	b25a      	sxtb	r2, r3
 800e09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0a4:	e001      	b.n	800e0aa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f383 8811 	msr	BASEPRI, r3
}
 800e0b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3738      	adds	r7, #56	@ 0x38
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d10b      	bne.n	800e0ea <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	60fb      	str	r3, [r7, #12]
}
 800e0e4:	bf00      	nop
 800e0e6:	bf00      	nop
 800e0e8:	e7fd      	b.n	800e0e6 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 800e0ea:	f002 fcf5 	bl	8010ad8 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0f6:	1ad3      	subs	r3, r2, r3
 800e0f8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e0fa:	f002 fd1f 	bl	8010b3c <vPortExitCritical>

	return uxReturn;
 800e0fe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e114:	2b00      	cmp	r3, #0
 800e116:	d006      	beq.n	800e126 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	e001      	b.n	800e12a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e126:	2300      	movs	r3, #0
 800e128:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e12a:	68fb      	ldr	r3, [r7, #12]
	}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e144:	2300      	movs	r3, #0
 800e146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e14c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e152:	2b00      	cmp	r3, #0
 800e154:	d10d      	bne.n	800e172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d14d      	bne.n	800e1fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	4618      	mov	r0, r3
 800e164:	f001 fcca 	bl	800fafc <xTaskPriorityDisinherit>
 800e168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2200      	movs	r2, #0
 800e16e:	609a      	str	r2, [r3, #8]
 800e170:	e043      	b.n	800e1fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d119      	bne.n	800e1ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	6858      	ldr	r0, [r3, #4]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e180:	461a      	mov	r2, r3
 800e182:	68b9      	ldr	r1, [r7, #8]
 800e184:	f005 f951 	bl	801342a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	685a      	ldr	r2, [r3, #4]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	685a      	ldr	r2, [r3, #4]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d32b      	bcc.n	800e1fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681a      	ldr	r2, [r3, #0]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	605a      	str	r2, [r3, #4]
 800e1aa:	e026      	b.n	800e1fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	68d8      	ldr	r0, [r3, #12]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	68b9      	ldr	r1, [r7, #8]
 800e1b8:	f005 f937 	bl	801342a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1c4:	425b      	negs	r3, r3
 800e1c6:	441a      	add	r2, r3
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	68da      	ldr	r2, [r3, #12]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d207      	bcs.n	800e1e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	689a      	ldr	r2, [r3, #8]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1e0:	425b      	negs	r3, r3
 800e1e2:	441a      	add	r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b02      	cmp	r3, #2
 800e1ec:	d105      	bne.n	800e1fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e202:	697b      	ldr	r3, [r7, #20]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d018      	beq.n	800e250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	68da      	ldr	r2, [r3, #12]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e226:	441a      	add	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	68da      	ldr	r2, [r3, #12]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	429a      	cmp	r2, r3
 800e236:	d303      	bcc.n	800e240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68d9      	ldr	r1, [r3, #12]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e248:	461a      	mov	r2, r3
 800e24a:	6838      	ldr	r0, [r7, #0]
 800e24c:	f005 f8ed 	bl	801342a <memcpy>
	}
}
 800e250:	bf00      	nop
 800e252:	3708      	adds	r7, #8
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e260:	f002 fc3a 	bl	8010ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e26a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e26c:	e011      	b.n	800e292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e272:	2b00      	cmp	r3, #0
 800e274:	d012      	beq.n	800e29c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	3324      	adds	r3, #36	@ 0x24
 800e27a:	4618      	mov	r0, r3
 800e27c:	f001 f8f0 	bl	800f460 <xTaskRemoveFromEventList>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e286:	f001 fa2d 	bl	800f6e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e296:	2b00      	cmp	r3, #0
 800e298:	dce9      	bgt.n	800e26e <prvUnlockQueue+0x16>
 800e29a:	e000      	b.n	800e29e <prvUnlockQueue+0x46>
					break;
 800e29c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	22ff      	movs	r2, #255	@ 0xff
 800e2a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e2a6:	f002 fc49 	bl	8010b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e2aa:	f002 fc15 	bl	8010ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2b6:	e011      	b.n	800e2dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d012      	beq.n	800e2e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3310      	adds	r3, #16
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f001 f8cb 	bl	800f460 <xTaskRemoveFromEventList>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d001      	beq.n	800e2d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e2d0:	f001 fa08 	bl	800f6e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dce9      	bgt.n	800e2b8 <prvUnlockQueue+0x60>
 800e2e4:	e000      	b.n	800e2e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	22ff      	movs	r2, #255	@ 0xff
 800e2ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e2f0:	f002 fc24 	bl	8010b3c <vPortExitCritical>
}
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e304:	f002 fbe8 	bl	8010ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d102      	bne.n	800e316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e310:	2301      	movs	r3, #1
 800e312:	60fb      	str	r3, [r7, #12]
 800e314:	e001      	b.n	800e31a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e316:	2300      	movs	r3, #0
 800e318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e31a:	f002 fc0f 	bl	8010b3c <vPortExitCritical>

	return xReturn;
 800e31e:	68fb      	ldr	r3, [r7, #12]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}

0800e328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e330:	f002 fbd2 	bl	8010ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d102      	bne.n	800e346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e340:	2301      	movs	r3, #1
 800e342:	60fb      	str	r3, [r7, #12]
 800e344:	e001      	b.n	800e34a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e346:	2300      	movs	r3, #0
 800e348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e34a:	f002 fbf7 	bl	8010b3c <vPortExitCritical>

	return xReturn;
 800e34e:	68fb      	ldr	r3, [r7, #12]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3710      	adds	r7, #16
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e362:	2300      	movs	r3, #0
 800e364:	60fb      	str	r3, [r7, #12]
 800e366:	e014      	b.n	800e392 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e368:	4a0f      	ldr	r2, [pc, #60]	@ (800e3a8 <vQueueAddToRegistry+0x50>)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10b      	bne.n	800e38c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e374:	490c      	ldr	r1, [pc, #48]	@ (800e3a8 <vQueueAddToRegistry+0x50>)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	683a      	ldr	r2, [r7, #0]
 800e37a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e37e:	4a0a      	ldr	r2, [pc, #40]	@ (800e3a8 <vQueueAddToRegistry+0x50>)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	00db      	lsls	r3, r3, #3
 800e384:	4413      	add	r3, r2
 800e386:	687a      	ldr	r2, [r7, #4]
 800e388:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e38a:	e006      	b.n	800e39a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3301      	adds	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b07      	cmp	r3, #7
 800e396:	d9e7      	bls.n	800e368 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr
 800e3a6:	bf00      	nop
 800e3a8:	20002e88 	.word	0x20002e88

0800e3ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e3bc:	f002 fb8c 	bl	8010ad8 <vPortEnterCritical>
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3c6:	b25b      	sxtb	r3, r3
 800e3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3cc:	d103      	bne.n	800e3d6 <vQueueWaitForMessageRestricted+0x2a>
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e3dc:	b25b      	sxtb	r3, r3
 800e3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3e2:	d103      	bne.n	800e3ec <vQueueWaitForMessageRestricted+0x40>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e3ec:	f002 fba6 	bl	8010b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d106      	bne.n	800e406 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	3324      	adds	r3, #36	@ 0x24
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	68b9      	ldr	r1, [r7, #8]
 800e400:	4618      	mov	r0, r3
 800e402:	f001 f801 	bl	800f408 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e406:	6978      	ldr	r0, [r7, #20]
 800e408:	f7ff ff26 	bl	800e258 <prvUnlockQueue>
	}
 800e40c:	bf00      	nop
 800e40e:	3718      	adds	r7, #24
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e414:	b580      	push	{r7, lr}
 800e416:	b08e      	sub	sp, #56	@ 0x38
 800e418:	af04      	add	r7, sp, #16
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10b      	bne.n	800e440 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	623b      	str	r3, [r7, #32]
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	e7fd      	b.n	800e43c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e442:	2b00      	cmp	r3, #0
 800e444:	d10b      	bne.n	800e45e <xTaskCreateStatic+0x4a>
	__asm volatile
 800e446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44a:	f383 8811 	msr	BASEPRI, r3
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f3bf 8f4f 	dsb	sy
 800e456:	61fb      	str	r3, [r7, #28]
}
 800e458:	bf00      	nop
 800e45a:	bf00      	nop
 800e45c:	e7fd      	b.n	800e45a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e45e:	23a8      	movs	r3, #168	@ 0xa8
 800e460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2ba8      	cmp	r3, #168	@ 0xa8
 800e466:	d00b      	beq.n	800e480 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	61bb      	str	r3, [r7, #24]
}
 800e47a:	bf00      	nop
 800e47c:	bf00      	nop
 800e47e:	e7fd      	b.n	800e47c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e480:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e484:	2b00      	cmp	r3, #0
 800e486:	d01e      	beq.n	800e4c6 <xTaskCreateStatic+0xb2>
 800e488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d01b      	beq.n	800e4c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e490:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e496:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	2202      	movs	r2, #2
 800e49c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	9303      	str	r3, [sp, #12]
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	9302      	str	r3, [sp, #8]
 800e4a8:	f107 0314 	add.w	r3, r7, #20
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	68b9      	ldr	r1, [r7, #8]
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f000 f851 	bl	800e560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e4c0:	f000 f8f6 	bl	800e6b0 <prvAddNewTaskToReadyList>
 800e4c4:	e001      	b.n	800e4ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e4ca:	697b      	ldr	r3, [r7, #20]
	}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3728      	adds	r7, #40	@ 0x28
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b08c      	sub	sp, #48	@ 0x30
 800e4d8:	af04      	add	r7, sp, #16
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	603b      	str	r3, [r7, #0]
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e4e4:	88fb      	ldrh	r3, [r7, #6]
 800e4e6:	009b      	lsls	r3, r3, #2
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f002 fc17 	bl	8010d1c <pvPortMalloc>
 800e4ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d00e      	beq.n	800e514 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e4f6:	20a8      	movs	r0, #168	@ 0xa8
 800e4f8:	f002 fc10 	bl	8010d1c <pvPortMalloc>
 800e4fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d003      	beq.n	800e50c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e504:	69fb      	ldr	r3, [r7, #28]
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	631a      	str	r2, [r3, #48]	@ 0x30
 800e50a:	e005      	b.n	800e518 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e50c:	6978      	ldr	r0, [r7, #20]
 800e50e:	f002 fcd3 	bl	8010eb8 <vPortFree>
 800e512:	e001      	b.n	800e518 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e514:	2300      	movs	r3, #0
 800e516:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d017      	beq.n	800e54e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	2200      	movs	r2, #0
 800e522:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e526:	88fa      	ldrh	r2, [r7, #6]
 800e528:	2300      	movs	r3, #0
 800e52a:	9303      	str	r3, [sp, #12]
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	9302      	str	r3, [sp, #8]
 800e530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e532:	9301      	str	r3, [sp, #4]
 800e534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 f80f 	bl	800e560 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e542:	69f8      	ldr	r0, [r7, #28]
 800e544:	f000 f8b4 	bl	800e6b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e548:	2301      	movs	r3, #1
 800e54a:	61bb      	str	r3, [r7, #24]
 800e54c:	e002      	b.n	800e554 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e54e:	f04f 33ff 	mov.w	r3, #4294967295
 800e552:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e554:	69bb      	ldr	r3, [r7, #24]
	}
 800e556:	4618      	mov	r0, r3
 800e558:	3720      	adds	r7, #32
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
	...

0800e560 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	60f8      	str	r0, [r7, #12]
 800e568:	60b9      	str	r1, [r7, #8]
 800e56a:	607a      	str	r2, [r7, #4]
 800e56c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e570:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	461a      	mov	r2, r3
 800e578:	21a5      	movs	r1, #165	@ 0xa5
 800e57a:	f004 fde6 	bl	801314a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e580:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e588:	3b01      	subs	r3, #1
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	4413      	add	r3, r2
 800e58e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	f023 0307 	bic.w	r3, r3, #7
 800e596:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	f003 0307 	and.w	r3, r3, #7
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00b      	beq.n	800e5ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a6:	f383 8811 	msr	BASEPRI, r3
 800e5aa:	f3bf 8f6f 	isb	sy
 800e5ae:	f3bf 8f4f 	dsb	sy
 800e5b2:	617b      	str	r3, [r7, #20]
}
 800e5b4:	bf00      	nop
 800e5b6:	bf00      	nop
 800e5b8:	e7fd      	b.n	800e5b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01f      	beq.n	800e600 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	61fb      	str	r3, [r7, #28]
 800e5c4:	e012      	b.n	800e5ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	69fb      	ldr	r3, [r7, #28]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	7819      	ldrb	r1, [r3, #0]
 800e5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	3334      	adds	r3, #52	@ 0x34
 800e5d6:	460a      	mov	r2, r1
 800e5d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e5da:	68ba      	ldr	r2, [r7, #8]
 800e5dc:	69fb      	ldr	r3, [r7, #28]
 800e5de:	4413      	add	r3, r2
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	61fb      	str	r3, [r7, #28]
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	2b0f      	cmp	r3, #15
 800e5f0:	d9e9      	bls.n	800e5c6 <prvInitialiseNewTask+0x66>
 800e5f2:	e000      	b.n	800e5f6 <prvInitialiseNewTask+0x96>
			{
				break;
 800e5f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e5fe:	e003      	b.n	800e608 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e60a:	2b37      	cmp	r3, #55	@ 0x37
 800e60c:	d901      	bls.n	800e612 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e60e:	2337      	movs	r3, #55	@ 0x37
 800e610:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e616:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e61a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e61c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e620:	2200      	movs	r2, #0
 800e622:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e626:	3304      	adds	r3, #4
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe ff29 	bl	800d480 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e630:	3318      	adds	r3, #24
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe ff24 	bl	800d480 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e63c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e640:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e646:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e64a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e64c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e650:	2200      	movs	r2, #0
 800e652:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e658:	2200      	movs	r2, #0
 800e65a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e660:	3354      	adds	r3, #84	@ 0x54
 800e662:	224c      	movs	r2, #76	@ 0x4c
 800e664:	2100      	movs	r1, #0
 800e666:	4618      	mov	r0, r3
 800e668:	f004 fd6f 	bl	801314a <memset>
 800e66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e66e:	4a0d      	ldr	r2, [pc, #52]	@ (800e6a4 <prvInitialiseNewTask+0x144>)
 800e670:	659a      	str	r2, [r3, #88]	@ 0x58
 800e672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e674:	4a0c      	ldr	r2, [pc, #48]	@ (800e6a8 <prvInitialiseNewTask+0x148>)
 800e676:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	4a0c      	ldr	r2, [pc, #48]	@ (800e6ac <prvInitialiseNewTask+0x14c>)
 800e67c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e67e:	683a      	ldr	r2, [r7, #0]
 800e680:	68f9      	ldr	r1, [r7, #12]
 800e682:	69b8      	ldr	r0, [r7, #24]
 800e684:	f002 f8f4 	bl	8010870 <pxPortInitialiseStack>
 800e688:	4602      	mov	r2, r0
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e69a:	bf00      	nop
 800e69c:	3720      	adds	r7, #32
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200136ec 	.word	0x200136ec
 800e6a8:	20013754 	.word	0x20013754
 800e6ac:	200137bc 	.word	0x200137bc

0800e6b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e6b8:	f002 fa0e 	bl	8010ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e6bc:	4b2d      	ldr	r3, [pc, #180]	@ (800e774 <prvAddNewTaskToReadyList+0xc4>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e774 <prvAddNewTaskToReadyList+0xc4>)
 800e6c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e6c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e778 <prvAddNewTaskToReadyList+0xc8>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d109      	bne.n	800e6e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e6ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e778 <prvAddNewTaskToReadyList+0xc8>)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e6d4:	4b27      	ldr	r3, [pc, #156]	@ (800e774 <prvAddNewTaskToReadyList+0xc4>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d110      	bne.n	800e6fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e6dc:	f001 f826 	bl	800f72c <prvInitialiseTaskLists>
 800e6e0:	e00d      	b.n	800e6fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e6e2:	4b26      	ldr	r3, [pc, #152]	@ (800e77c <prvAddNewTaskToReadyList+0xcc>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d109      	bne.n	800e6fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e6ea:	4b23      	ldr	r3, [pc, #140]	@ (800e778 <prvAddNewTaskToReadyList+0xc8>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d802      	bhi.n	800e6fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e6f8:	4a1f      	ldr	r2, [pc, #124]	@ (800e778 <prvAddNewTaskToReadyList+0xc8>)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e6fe:	4b20      	ldr	r3, [pc, #128]	@ (800e780 <prvAddNewTaskToReadyList+0xd0>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3301      	adds	r3, #1
 800e704:	4a1e      	ldr	r2, [pc, #120]	@ (800e780 <prvAddNewTaskToReadyList+0xd0>)
 800e706:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e708:	4b1d      	ldr	r3, [pc, #116]	@ (800e780 <prvAddNewTaskToReadyList+0xd0>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e714:	4b1b      	ldr	r3, [pc, #108]	@ (800e784 <prvAddNewTaskToReadyList+0xd4>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d903      	bls.n	800e724 <prvAddNewTaskToReadyList+0x74>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e720:	4a18      	ldr	r2, [pc, #96]	@ (800e784 <prvAddNewTaskToReadyList+0xd4>)
 800e722:	6013      	str	r3, [r2, #0]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e728:	4613      	mov	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	4a15      	ldr	r2, [pc, #84]	@ (800e788 <prvAddNewTaskToReadyList+0xd8>)
 800e732:	441a      	add	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	3304      	adds	r3, #4
 800e738:	4619      	mov	r1, r3
 800e73a:	4610      	mov	r0, r2
 800e73c:	f7fe fead 	bl	800d49a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e740:	f002 f9fc 	bl	8010b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e744:	4b0d      	ldr	r3, [pc, #52]	@ (800e77c <prvAddNewTaskToReadyList+0xcc>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d00e      	beq.n	800e76a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e74c:	4b0a      	ldr	r3, [pc, #40]	@ (800e778 <prvAddNewTaskToReadyList+0xc8>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e756:	429a      	cmp	r2, r3
 800e758:	d207      	bcs.n	800e76a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e75a:	4b0c      	ldr	r3, [pc, #48]	@ (800e78c <prvAddNewTaskToReadyList+0xdc>)
 800e75c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e760:	601a      	str	r2, [r3, #0]
 800e762:	f3bf 8f4f 	dsb	sy
 800e766:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	2000339c 	.word	0x2000339c
 800e778:	20002ec8 	.word	0x20002ec8
 800e77c:	200033a8 	.word	0x200033a8
 800e780:	200033b8 	.word	0x200033b8
 800e784:	200033a4 	.word	0x200033a4
 800e788:	20002ecc 	.word	0x20002ecc
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e798:	f002 f99e 	bl	8010ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d102      	bne.n	800e7a8 <vTaskDelete+0x18>
 800e7a2:	4b2d      	ldr	r3, [pc, #180]	@ (800e858 <vTaskDelete+0xc8>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	e000      	b.n	800e7aa <vTaskDelete+0x1a>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	3304      	adds	r3, #4
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	f7fe fecf 	bl	800d554 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d004      	beq.n	800e7c8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	3318      	adds	r3, #24
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe fec6 	bl	800d554 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e7c8:	4b24      	ldr	r3, [pc, #144]	@ (800e85c <vTaskDelete+0xcc>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	4a23      	ldr	r2, [pc, #140]	@ (800e85c <vTaskDelete+0xcc>)
 800e7d0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e7d2:	4b21      	ldr	r3, [pc, #132]	@ (800e858 <vTaskDelete+0xc8>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d10b      	bne.n	800e7f4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	481f      	ldr	r0, [pc, #124]	@ (800e860 <vTaskDelete+0xd0>)
 800e7e4:	f7fe fe59 	bl	800d49a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e7e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e864 <vTaskDelete+0xd4>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	4a1d      	ldr	r2, [pc, #116]	@ (800e864 <vTaskDelete+0xd4>)
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	e009      	b.n	800e808 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e7f4:	4b1c      	ldr	r3, [pc, #112]	@ (800e868 <vTaskDelete+0xd8>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	4a1b      	ldr	r2, [pc, #108]	@ (800e868 <vTaskDelete+0xd8>)
 800e7fc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f001 f8a0 	bl	800f944 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e804:	f001 f8d4 	bl	800f9b0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e808:	f002 f998 	bl	8010b3c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e80c:	4b17      	ldr	r3, [pc, #92]	@ (800e86c <vTaskDelete+0xdc>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d01c      	beq.n	800e84e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800e814:	4b10      	ldr	r3, [pc, #64]	@ (800e858 <vTaskDelete+0xc8>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d117      	bne.n	800e84e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e81e:	4b14      	ldr	r3, [pc, #80]	@ (800e870 <vTaskDelete+0xe0>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00b      	beq.n	800e83e <vTaskDelete+0xae>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60bb      	str	r3, [r7, #8]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e83e:	4b0d      	ldr	r3, [pc, #52]	@ (800e874 <vTaskDelete+0xe4>)
 800e840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20002ec8 	.word	0x20002ec8
 800e85c:	200033b8 	.word	0x200033b8
 800e860:	20003370 	.word	0x20003370
 800e864:	20003384 	.word	0x20003384
 800e868:	2000339c 	.word	0x2000339c
 800e86c:	200033a8 	.word	0x200033a8
 800e870:	200033c4 	.word	0x200033c4
 800e874:	e000ed04 	.word	0xe000ed04

0800e878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e880:	2300      	movs	r3, #0
 800e882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d018      	beq.n	800e8bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e88a:	4b14      	ldr	r3, [pc, #80]	@ (800e8dc <vTaskDelay+0x64>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00b      	beq.n	800e8aa <vTaskDelay+0x32>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	60bb      	str	r3, [r7, #8]
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	e7fd      	b.n	800e8a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e8aa:	f000 fa99 	bl	800ede0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 fbb1 	bl	8010018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e8b6:	f000 faa1 	bl	800edfc <xTaskResumeAll>
 800e8ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d107      	bne.n	800e8d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e8c2:	4b07      	ldr	r3, [pc, #28]	@ (800e8e0 <vTaskDelay+0x68>)
 800e8c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	f3bf 8f4f 	dsb	sy
 800e8ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	200033c4 	.word	0x200033c4
 800e8e0:	e000ed04 	.word	0xe000ed04

0800e8e4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b088      	sub	sp, #32
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d10b      	bne.n	800e90e <eTaskGetState+0x2a>
	__asm volatile
 800e8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8fa:	f383 8811 	msr	BASEPRI, r3
 800e8fe:	f3bf 8f6f 	isb	sy
 800e902:	f3bf 8f4f 	dsb	sy
 800e906:	60bb      	str	r3, [r7, #8]
}
 800e908:	bf00      	nop
 800e90a:	bf00      	nop
 800e90c:	e7fd      	b.n	800e90a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e90e:	4b24      	ldr	r3, [pc, #144]	@ (800e9a0 <eTaskGetState+0xbc>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	69ba      	ldr	r2, [r7, #24]
 800e914:	429a      	cmp	r2, r3
 800e916:	d102      	bne.n	800e91e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e918:	2300      	movs	r3, #0
 800e91a:	77fb      	strb	r3, [r7, #31]
 800e91c:	e03a      	b.n	800e994 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800e91e:	f002 f8db 	bl	8010ad8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	695b      	ldr	r3, [r3, #20]
 800e926:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e928:	4b1e      	ldr	r3, [pc, #120]	@ (800e9a4 <eTaskGetState+0xc0>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e92e:	4b1e      	ldr	r3, [pc, #120]	@ (800e9a8 <eTaskGetState+0xc4>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e934:	f002 f902 	bl	8010b3c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e938:	697a      	ldr	r2, [r7, #20]
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d003      	beq.n	800e948 <eTaskGetState+0x64>
 800e940:	697a      	ldr	r2, [r7, #20]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	429a      	cmp	r2, r3
 800e946:	d102      	bne.n	800e94e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e948:	2302      	movs	r3, #2
 800e94a:	77fb      	strb	r3, [r7, #31]
 800e94c:	e022      	b.n	800e994 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	4a16      	ldr	r2, [pc, #88]	@ (800e9ac <eTaskGetState+0xc8>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d112      	bne.n	800e97c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10b      	bne.n	800e976 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e95e:	69bb      	ldr	r3, [r7, #24]
 800e960:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b01      	cmp	r3, #1
 800e968:	d102      	bne.n	800e970 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 800e96a:	2302      	movs	r3, #2
 800e96c:	77fb      	strb	r3, [r7, #31]
 800e96e:	e011      	b.n	800e994 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800e970:	2303      	movs	r3, #3
 800e972:	77fb      	strb	r3, [r7, #31]
 800e974:	e00e      	b.n	800e994 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e976:	2302      	movs	r3, #2
 800e978:	77fb      	strb	r3, [r7, #31]
 800e97a:	e00b      	b.n	800e994 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e97c:	697b      	ldr	r3, [r7, #20]
 800e97e:	4a0c      	ldr	r2, [pc, #48]	@ (800e9b0 <eTaskGetState+0xcc>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d002      	beq.n	800e98a <eTaskGetState+0xa6>
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d102      	bne.n	800e990 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e98a:	2304      	movs	r3, #4
 800e98c:	77fb      	strb	r3, [r7, #31]
 800e98e:	e001      	b.n	800e994 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e990:	2301      	movs	r3, #1
 800e992:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e994:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e996:	4618      	mov	r0, r3
 800e998:	3720      	adds	r7, #32
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20002ec8 	.word	0x20002ec8
 800e9a4:	20003354 	.word	0x20003354
 800e9a8:	20003358 	.word	0x20003358
 800e9ac:	20003388 	.word	0x20003388
 800e9b0:	20003370 	.word	0x20003370

0800e9b4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b088      	sub	sp, #32
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b37      	cmp	r3, #55	@ 0x37
 800e9c6:	d90b      	bls.n	800e9e0 <vTaskPrioritySet+0x2c>
	__asm volatile
 800e9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9cc:	f383 8811 	msr	BASEPRI, r3
 800e9d0:	f3bf 8f6f 	isb	sy
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	60fb      	str	r3, [r7, #12]
}
 800e9da:	bf00      	nop
 800e9dc:	bf00      	nop
 800e9de:	e7fd      	b.n	800e9dc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2b37      	cmp	r3, #55	@ 0x37
 800e9e4:	d901      	bls.n	800e9ea <vTaskPrioritySet+0x36>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9e6:	2337      	movs	r3, #55	@ 0x37
 800e9e8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800e9ea:	f002 f875 	bl	8010ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d102      	bne.n	800e9fa <vTaskPrioritySet+0x46>
 800e9f4:	4b3a      	ldr	r3, [pc, #232]	@ (800eae0 <vTaskPrioritySet+0x12c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	e000      	b.n	800e9fc <vTaskPrioritySet+0x48>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea02:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800ea04:	697a      	ldr	r2, [r7, #20]
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d063      	beq.n	800ead4 <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800ea0c:	683a      	ldr	r2, [r7, #0]
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d90d      	bls.n	800ea30 <vTaskPrioritySet+0x7c>
				{
					if( pxTCB != pxCurrentTCB )
 800ea14:	4b32      	ldr	r3, [pc, #200]	@ (800eae0 <vTaskPrioritySet+0x12c>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	69ba      	ldr	r2, [r7, #24]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d00f      	beq.n	800ea3e <vTaskPrioritySet+0x8a>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800ea1e:	4b30      	ldr	r3, [pc, #192]	@ (800eae0 <vTaskPrioritySet+0x12c>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea24:	683a      	ldr	r2, [r7, #0]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d309      	bcc.n	800ea3e <vTaskPrioritySet+0x8a>
						{
							xYieldRequired = pdTRUE;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	61fb      	str	r3, [r7, #28]
 800ea2e:	e006      	b.n	800ea3e <vTaskPrioritySet+0x8a>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800ea30:	4b2b      	ldr	r3, [pc, #172]	@ (800eae0 <vTaskPrioritySet+0x12c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	69ba      	ldr	r2, [r7, #24]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d101      	bne.n	800ea3e <vTaskPrioritySet+0x8a>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea42:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d102      	bne.n	800ea56 <vTaskPrioritySet+0xa2>
					{
						pxTCB->uxPriority = uxNewPriority;
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	db04      	blt.n	800ea6e <vTaskPrioritySet+0xba>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	6959      	ldr	r1, [r3, #20]
 800ea72:	693a      	ldr	r2, [r7, #16]
 800ea74:	4613      	mov	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4a19      	ldr	r2, [pc, #100]	@ (800eae4 <vTaskPrioritySet+0x130>)
 800ea7e:	4413      	add	r3, r2
 800ea80:	4299      	cmp	r1, r3
 800ea82:	d11c      	bne.n	800eabe <vTaskPrioritySet+0x10a>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	3304      	adds	r3, #4
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fe fd63 	bl	800d554 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea92:	4b15      	ldr	r3, [pc, #84]	@ (800eae8 <vTaskPrioritySet+0x134>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d903      	bls.n	800eaa2 <vTaskPrioritySet+0xee>
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9e:	4a12      	ldr	r2, [pc, #72]	@ (800eae8 <vTaskPrioritySet+0x134>)
 800eaa0:	6013      	str	r3, [r2, #0]
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	009b      	lsls	r3, r3, #2
 800eaaa:	4413      	add	r3, r2
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4a0d      	ldr	r2, [pc, #52]	@ (800eae4 <vTaskPrioritySet+0x130>)
 800eab0:	441a      	add	r2, r3
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	3304      	adds	r3, #4
 800eab6:	4619      	mov	r1, r3
 800eab8:	4610      	mov	r0, r2
 800eaba:	f7fe fcee 	bl	800d49a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d007      	beq.n	800ead4 <vTaskPrioritySet+0x120>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800eac4:	4b09      	ldr	r3, [pc, #36]	@ (800eaec <vTaskPrioritySet+0x138>)
 800eac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaca:	601a      	str	r2, [r3, #0]
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800ead4:	f002 f832 	bl	8010b3c <vPortExitCritical>
	}
 800ead8:	bf00      	nop
 800eada:	3720      	adds	r7, #32
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	20002ec8 	.word	0x20002ec8
 800eae4:	20002ecc 	.word	0x20002ecc
 800eae8:	200033a4 	.word	0x200033a4
 800eaec:	e000ed04 	.word	0xe000ed04

0800eaf0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800eaf8:	f001 ffee 	bl	8010ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <vTaskSuspend+0x18>
 800eb02:	4b30      	ldr	r3, [pc, #192]	@ (800ebc4 <vTaskSuspend+0xd4>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	e000      	b.n	800eb0a <vTaskSuspend+0x1a>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	3304      	adds	r3, #4
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe fd1f 	bl	800d554 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d004      	beq.n	800eb28 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	3318      	adds	r3, #24
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fe fd16 	bl	800d554 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3304      	adds	r3, #4
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4826      	ldr	r0, [pc, #152]	@ (800ebc8 <vTaskSuspend+0xd8>)
 800eb30:	f7fe fcb3 	bl	800d49a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d103      	bne.n	800eb48 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800eb48:	f001 fff8 	bl	8010b3c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800eb4c:	4b1f      	ldr	r3, [pc, #124]	@ (800ebcc <vTaskSuspend+0xdc>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d005      	beq.n	800eb60 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800eb54:	f001 ffc0 	bl	8010ad8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800eb58:	f000 ff2a 	bl	800f9b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800eb5c:	f001 ffee 	bl	8010b3c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800eb60:	4b18      	ldr	r3, [pc, #96]	@ (800ebc4 <vTaskSuspend+0xd4>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d128      	bne.n	800ebbc <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800eb6a:	4b18      	ldr	r3, [pc, #96]	@ (800ebcc <vTaskSuspend+0xdc>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d018      	beq.n	800eba4 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800eb72:	4b17      	ldr	r3, [pc, #92]	@ (800ebd0 <vTaskSuspend+0xe0>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00b      	beq.n	800eb92 <vTaskSuspend+0xa2>
	__asm volatile
 800eb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7e:	f383 8811 	msr	BASEPRI, r3
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	f3bf 8f4f 	dsb	sy
 800eb8a:	60bb      	str	r3, [r7, #8]
}
 800eb8c:	bf00      	nop
 800eb8e:	bf00      	nop
 800eb90:	e7fd      	b.n	800eb8e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800eb92:	4b10      	ldr	r3, [pc, #64]	@ (800ebd4 <vTaskSuspend+0xe4>)
 800eb94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eba2:	e00b      	b.n	800ebbc <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800eba4:	4b08      	ldr	r3, [pc, #32]	@ (800ebc8 <vTaskSuspend+0xd8>)
 800eba6:	681a      	ldr	r2, [r3, #0]
 800eba8:	4b0b      	ldr	r3, [pc, #44]	@ (800ebd8 <vTaskSuspend+0xe8>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d103      	bne.n	800ebb8 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800ebb0:	4b04      	ldr	r3, [pc, #16]	@ (800ebc4 <vTaskSuspend+0xd4>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	601a      	str	r2, [r3, #0]
	}
 800ebb6:	e001      	b.n	800ebbc <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800ebb8:	f000 fb5c 	bl	800f274 <vTaskSwitchContext>
	}
 800ebbc:	bf00      	nop
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	20002ec8 	.word	0x20002ec8
 800ebc8:	20003388 	.word	0x20003388
 800ebcc:	200033a8 	.word	0x200033a8
 800ebd0:	200033c4 	.word	0x200033c4
 800ebd4:	e000ed04 	.word	0xe000ed04
 800ebd8:	2000339c 	.word	0x2000339c

0800ebdc <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ebdc:	b480      	push	{r7}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10b      	bne.n	800ec0a <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800ebf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf6:	f383 8811 	msr	BASEPRI, r3
 800ebfa:	f3bf 8f6f 	isb	sy
 800ebfe:	f3bf 8f4f 	dsb	sy
 800ec02:	60fb      	str	r3, [r7, #12]
}
 800ec04:	bf00      	nop
 800ec06:	bf00      	nop
 800ec08:	e7fd      	b.n	800ec06 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	695b      	ldr	r3, [r3, #20]
 800ec0e:	4a0a      	ldr	r2, [pc, #40]	@ (800ec38 <prvTaskIsTaskSuspended+0x5c>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d10a      	bne.n	800ec2a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec18:	4a08      	ldr	r2, [pc, #32]	@ (800ec3c <prvTaskIsTaskSuspended+0x60>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d005      	beq.n	800ec2a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d101      	bne.n	800ec2a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800ec26:	2301      	movs	r3, #1
 800ec28:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec2a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	371c      	adds	r7, #28
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	20003388 	.word	0x20003388
 800ec3c:	2000335c 	.word	0x2000335c

0800ec40 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d10b      	bne.n	800ec6a <vTaskResume+0x2a>
	__asm volatile
 800ec52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec56:	f383 8811 	msr	BASEPRI, r3
 800ec5a:	f3bf 8f6f 	isb	sy
 800ec5e:	f3bf 8f4f 	dsb	sy
 800ec62:	60bb      	str	r3, [r7, #8]
}
 800ec64:	bf00      	nop
 800ec66:	bf00      	nop
 800ec68:	e7fd      	b.n	800ec66 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ec6a:	4b21      	ldr	r3, [pc, #132]	@ (800ecf0 <vTaskResume+0xb0>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d038      	beq.n	800ece6 <vTaskResume+0xa6>
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d035      	beq.n	800ece6 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800ec7a:	f001 ff2d 	bl	8010ad8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ec7e:	68f8      	ldr	r0, [r7, #12]
 800ec80:	f7ff ffac 	bl	800ebdc <prvTaskIsTaskSuspended>
 800ec84:	4603      	mov	r3, r0
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d02b      	beq.n	800ece2 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fe fc60 	bl	800d554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec98:	4b16      	ldr	r3, [pc, #88]	@ (800ecf4 <vTaskResume+0xb4>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d903      	bls.n	800eca8 <vTaskResume+0x68>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eca4:	4a13      	ldr	r2, [pc, #76]	@ (800ecf4 <vTaskResume+0xb4>)
 800eca6:	6013      	str	r3, [r2, #0]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecac:	4613      	mov	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4413      	add	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	4a10      	ldr	r2, [pc, #64]	@ (800ecf8 <vTaskResume+0xb8>)
 800ecb6:	441a      	add	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	3304      	adds	r3, #4
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	f7fe fbeb 	bl	800d49a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc8:	4b09      	ldr	r3, [pc, #36]	@ (800ecf0 <vTaskResume+0xb0>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d307      	bcc.n	800ece2 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecfc <vTaskResume+0xbc>)
 800ecd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecd8:	601a      	str	r2, [r3, #0]
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ece2:	f001 ff2b 	bl	8010b3c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ece6:	bf00      	nop
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	20002ec8 	.word	0x20002ec8
 800ecf4:	200033a4 	.word	0x200033a4
 800ecf8:	20002ecc 	.word	0x20002ecc
 800ecfc:	e000ed04 	.word	0xe000ed04

0800ed00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b08a      	sub	sp, #40	@ 0x28
 800ed04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed0e:	463a      	mov	r2, r7
 800ed10:	1d39      	adds	r1, r7, #4
 800ed12:	f107 0308 	add.w	r3, r7, #8
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fe f9a2 	bl	800d060 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	9202      	str	r2, [sp, #8]
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	2300      	movs	r3, #0
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	460a      	mov	r2, r1
 800ed2e:	4924      	ldr	r1, [pc, #144]	@ (800edc0 <vTaskStartScheduler+0xc0>)
 800ed30:	4824      	ldr	r0, [pc, #144]	@ (800edc4 <vTaskStartScheduler+0xc4>)
 800ed32:	f7ff fb6f 	bl	800e414 <xTaskCreateStatic>
 800ed36:	4603      	mov	r3, r0
 800ed38:	4a23      	ldr	r2, [pc, #140]	@ (800edc8 <vTaskStartScheduler+0xc8>)
 800ed3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed3c:	4b22      	ldr	r3, [pc, #136]	@ (800edc8 <vTaskStartScheduler+0xc8>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed44:	2301      	movs	r3, #1
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	e001      	b.n	800ed4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d102      	bne.n	800ed5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed54:	f001 f9b4 	bl	80100c0 <xTimerCreateTimerTask>
 800ed58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d11b      	bne.n	800ed98 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed64:	f383 8811 	msr	BASEPRI, r3
 800ed68:	f3bf 8f6f 	isb	sy
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	613b      	str	r3, [r7, #16]
}
 800ed72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed74:	4b15      	ldr	r3, [pc, #84]	@ (800edcc <vTaskStartScheduler+0xcc>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	3354      	adds	r3, #84	@ 0x54
 800ed7a:	4a15      	ldr	r2, [pc, #84]	@ (800edd0 <vTaskStartScheduler+0xd0>)
 800ed7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed7e:	4b15      	ldr	r3, [pc, #84]	@ (800edd4 <vTaskStartScheduler+0xd4>)
 800ed80:	f04f 32ff 	mov.w	r2, #4294967295
 800ed84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed86:	4b14      	ldr	r3, [pc, #80]	@ (800edd8 <vTaskStartScheduler+0xd8>)
 800ed88:	2201      	movs	r2, #1
 800ed8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed8c:	4b13      	ldr	r3, [pc, #76]	@ (800eddc <vTaskStartScheduler+0xdc>)
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed92:	f001 fdfd 	bl	8010990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed96:	e00f      	b.n	800edb8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed9e:	d10b      	bne.n	800edb8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800eda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	60fb      	str	r3, [r7, #12]
}
 800edb2:	bf00      	nop
 800edb4:	bf00      	nop
 800edb6:	e7fd      	b.n	800edb4 <vTaskStartScheduler+0xb4>
}
 800edb8:	bf00      	nop
 800edba:	3718      	adds	r7, #24
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	08016624 	.word	0x08016624
 800edc4:	0800f6fd 	.word	0x0800f6fd
 800edc8:	200033c0 	.word	0x200033c0
 800edcc:	20002ec8 	.word	0x20002ec8
 800edd0:	2000040c 	.word	0x2000040c
 800edd4:	200033bc 	.word	0x200033bc
 800edd8:	200033a8 	.word	0x200033a8
 800eddc:	200033a0 	.word	0x200033a0

0800ede0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ede0:	b480      	push	{r7}
 800ede2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ede4:	4b04      	ldr	r3, [pc, #16]	@ (800edf8 <vTaskSuspendAll+0x18>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	3301      	adds	r3, #1
 800edea:	4a03      	ldr	r2, [pc, #12]	@ (800edf8 <vTaskSuspendAll+0x18>)
 800edec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edee:	bf00      	nop
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	200033c4 	.word	0x200033c4

0800edfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ee06:	2300      	movs	r3, #0
 800ee08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ee0a:	4b42      	ldr	r3, [pc, #264]	@ (800ef14 <xTaskResumeAll+0x118>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d10b      	bne.n	800ee2a <xTaskResumeAll+0x2e>
	__asm volatile
 800ee12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee16:	f383 8811 	msr	BASEPRI, r3
 800ee1a:	f3bf 8f6f 	isb	sy
 800ee1e:	f3bf 8f4f 	dsb	sy
 800ee22:	603b      	str	r3, [r7, #0]
}
 800ee24:	bf00      	nop
 800ee26:	bf00      	nop
 800ee28:	e7fd      	b.n	800ee26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee2a:	f001 fe55 	bl	8010ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee2e:	4b39      	ldr	r3, [pc, #228]	@ (800ef14 <xTaskResumeAll+0x118>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	3b01      	subs	r3, #1
 800ee34:	4a37      	ldr	r2, [pc, #220]	@ (800ef14 <xTaskResumeAll+0x118>)
 800ee36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee38:	4b36      	ldr	r3, [pc, #216]	@ (800ef14 <xTaskResumeAll+0x118>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d162      	bne.n	800ef06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee40:	4b35      	ldr	r3, [pc, #212]	@ (800ef18 <xTaskResumeAll+0x11c>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d05e      	beq.n	800ef06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee48:	e02f      	b.n	800eeaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee4a:	4b34      	ldr	r3, [pc, #208]	@ (800ef1c <xTaskResumeAll+0x120>)
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	3318      	adds	r3, #24
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fe fb7c 	bl	800d554 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe fb77 	bl	800d554 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ef20 <xTaskResumeAll+0x124>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d903      	bls.n	800ee7a <xTaskResumeAll+0x7e>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee76:	4a2a      	ldr	r2, [pc, #168]	@ (800ef20 <xTaskResumeAll+0x124>)
 800ee78:	6013      	str	r3, [r2, #0]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee7e:	4613      	mov	r3, r2
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	4a27      	ldr	r2, [pc, #156]	@ (800ef24 <xTaskResumeAll+0x128>)
 800ee88:	441a      	add	r2, r3
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3304      	adds	r3, #4
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4610      	mov	r0, r2
 800ee92:	f7fe fb02 	bl	800d49a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee9a:	4b23      	ldr	r3, [pc, #140]	@ (800ef28 <xTaskResumeAll+0x12c>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d302      	bcc.n	800eeaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800eea4:	4b21      	ldr	r3, [pc, #132]	@ (800ef2c <xTaskResumeAll+0x130>)
 800eea6:	2201      	movs	r2, #1
 800eea8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eeaa:	4b1c      	ldr	r3, [pc, #112]	@ (800ef1c <xTaskResumeAll+0x120>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1cb      	bne.n	800ee4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eeb8:	f000 fd7a 	bl	800f9b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eebc:	4b1c      	ldr	r3, [pc, #112]	@ (800ef30 <xTaskResumeAll+0x134>)
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d010      	beq.n	800eeea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eec8:	f000 f91a 	bl	800f100 <xTaskIncrementTick>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800eed2:	4b16      	ldr	r3, [pc, #88]	@ (800ef2c <xTaskResumeAll+0x130>)
 800eed4:	2201      	movs	r2, #1
 800eed6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	3b01      	subs	r3, #1
 800eedc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1f1      	bne.n	800eec8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800eee4:	4b12      	ldr	r3, [pc, #72]	@ (800ef30 <xTaskResumeAll+0x134>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eeea:	4b10      	ldr	r3, [pc, #64]	@ (800ef2c <xTaskResumeAll+0x130>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d009      	beq.n	800ef06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eef2:	2301      	movs	r3, #1
 800eef4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eef6:	4b0f      	ldr	r3, [pc, #60]	@ (800ef34 <xTaskResumeAll+0x138>)
 800eef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eefc:	601a      	str	r2, [r3, #0]
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef06:	f001 fe19 	bl	8010b3c <vPortExitCritical>

	return xAlreadyYielded;
 800ef0a:	68bb      	ldr	r3, [r7, #8]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	200033c4 	.word	0x200033c4
 800ef18:	2000339c 	.word	0x2000339c
 800ef1c:	2000335c 	.word	0x2000335c
 800ef20:	200033a4 	.word	0x200033a4
 800ef24:	20002ecc 	.word	0x20002ecc
 800ef28:	20002ec8 	.word	0x20002ec8
 800ef2c:	200033b0 	.word	0x200033b0
 800ef30:	200033ac 	.word	0x200033ac
 800ef34:	e000ed04 	.word	0xe000ed04

0800ef38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef3e:	4b05      	ldr	r3, [pc, #20]	@ (800ef54 <xTaskGetTickCount+0x1c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef44:	687b      	ldr	r3, [r7, #4]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
 800ef52:	bf00      	nop
 800ef54:	200033a0 	.word	0x200033a0

0800ef58 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800ef58:	b480      	push	{r7}
 800ef5a:	b08b      	sub	sp, #44	@ 0x2c
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d05b      	beq.n	800f026 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	61bb      	str	r3, [r7, #24]
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	685a      	ldr	r2, [r3, #4]
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	605a      	str	r2, [r3, #4]
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	3308      	adds	r3, #8
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d104      	bne.n	800ef92 <prvSearchForNameWithinSingleList+0x3a>
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	685a      	ldr	r2, [r3, #4]
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	605a      	str	r2, [r3, #4]
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	613b      	str	r3, [r7, #16]
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	605a      	str	r2, [r3, #4]
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	3308      	adds	r3, #8
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d104      	bne.n	800efbe <prvSearchForNameWithinSingleList+0x66>
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	605a      	str	r2, [r3, #4]
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800efc6:	2300      	movs	r3, #0
 800efc8:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800efca:	2300      	movs	r3, #0
 800efcc:	623b      	str	r3, [r7, #32]
 800efce:	e01c      	b.n	800f00a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	4413      	add	r3, r2
 800efd6:	3334      	adds	r3, #52	@ 0x34
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800efdc:	683a      	ldr	r2, [r7, #0]
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	4413      	add	r3, r2
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	7afa      	ldrb	r2, [r7, #11]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d002      	beq.n	800eff0 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800efea:	2301      	movs	r3, #1
 800efec:	61fb      	str	r3, [r7, #28]
 800efee:	e006      	b.n	800effe <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800eff0:	7afb      	ldrb	r3, [r7, #11]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d103      	bne.n	800effe <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800effa:	2301      	movs	r3, #1
 800effc:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d106      	bne.n	800f012 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f004:	6a3b      	ldr	r3, [r7, #32]
 800f006:	3301      	adds	r3, #1
 800f008:	623b      	str	r3, [r7, #32]
 800f00a:	6a3b      	ldr	r3, [r7, #32]
 800f00c:	2b0f      	cmp	r3, #15
 800f00e:	d9df      	bls.n	800efd0 <prvSearchForNameWithinSingleList+0x78>
 800f010:	e000      	b.n	800f014 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800f012:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800f014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f016:	2b00      	cmp	r3, #0
 800f018:	d104      	bne.n	800f024 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d1bb      	bne.n	800ef9a <prvSearchForNameWithinSingleList+0x42>
 800f022:	e000      	b.n	800f026 <prvSearchForNameWithinSingleList+0xce>
					break;
 800f024:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800f026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f028:	4618      	mov	r0, r3
 800f02a:	372c      	adds	r7, #44	@ 0x2c
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f034:	b580      	push	{r7, lr}
 800f036:	b086      	sub	sp, #24
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800f03c:	2338      	movs	r3, #56	@ 0x38
 800f03e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7f1 f915 	bl	8000270 <strlen>
 800f046:	4603      	mov	r3, r0
 800f048:	2b0f      	cmp	r3, #15
 800f04a:	d90b      	bls.n	800f064 <xTaskGetHandle+0x30>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60fb      	str	r3, [r7, #12]
}
 800f05e:	bf00      	nop
 800f060:	bf00      	nop
 800f062:	e7fd      	b.n	800f060 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800f064:	f7ff febc 	bl	800ede0 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	3b01      	subs	r3, #1
 800f06c:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800f06e:	697a      	ldr	r2, [r7, #20]
 800f070:	4613      	mov	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	4a1c      	ldr	r2, [pc, #112]	@ (800f0ec <xTaskGetHandle+0xb8>)
 800f07a:	4413      	add	r3, r2
 800f07c:	6879      	ldr	r1, [r7, #4]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7ff ff6a 	bl	800ef58 <prvSearchForNameWithinSingleList>
 800f084:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d103      	bne.n	800f094 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1ea      	bne.n	800f068 <xTaskGetHandle+0x34>
 800f092:	e000      	b.n	800f096 <xTaskGetHandle+0x62>
					break;
 800f094:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800f09c:	4b14      	ldr	r3, [pc, #80]	@ (800f0f0 <xTaskGetHandle+0xbc>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6879      	ldr	r1, [r7, #4]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7ff ff58 	bl	800ef58 <prvSearchForNameWithinSingleList>
 800f0a8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800f0b0:	4b10      	ldr	r3, [pc, #64]	@ (800f0f4 <xTaskGetHandle+0xc0>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	6879      	ldr	r1, [r7, #4]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7ff ff4e 	bl	800ef58 <prvSearchForNameWithinSingleList>
 800f0bc:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d104      	bne.n	800f0ce <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	480c      	ldr	r0, [pc, #48]	@ (800f0f8 <xTaskGetHandle+0xc4>)
 800f0c8:	f7ff ff46 	bl	800ef58 <prvSearchForNameWithinSingleList>
 800f0cc:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d104      	bne.n	800f0de <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800f0d4:	6879      	ldr	r1, [r7, #4]
 800f0d6:	4809      	ldr	r0, [pc, #36]	@ (800f0fc <xTaskGetHandle+0xc8>)
 800f0d8:	f7ff ff3e 	bl	800ef58 <prvSearchForNameWithinSingleList>
 800f0dc:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800f0de:	f7ff fe8d 	bl	800edfc <xTaskResumeAll>

		return pxTCB;
 800f0e2:	693b      	ldr	r3, [r7, #16]
	}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	20002ecc 	.word	0x20002ecc
 800f0f0:	20003354 	.word	0x20003354
 800f0f4:	20003358 	.word	0x20003358
 800f0f8:	20003388 	.word	0x20003388
 800f0fc:	20003370 	.word	0x20003370

0800f100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f106:	2300      	movs	r3, #0
 800f108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f10a:	4b4f      	ldr	r3, [pc, #316]	@ (800f248 <xTaskIncrementTick+0x148>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f040 8090 	bne.w	800f234 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f114:	4b4d      	ldr	r3, [pc, #308]	@ (800f24c <xTaskIncrementTick+0x14c>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	3301      	adds	r3, #1
 800f11a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f11c:	4a4b      	ldr	r2, [pc, #300]	@ (800f24c <xTaskIncrementTick+0x14c>)
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d121      	bne.n	800f16c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f128:	4b49      	ldr	r3, [pc, #292]	@ (800f250 <xTaskIncrementTick+0x150>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00b      	beq.n	800f14a <xTaskIncrementTick+0x4a>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f136:	f383 8811 	msr	BASEPRI, r3
 800f13a:	f3bf 8f6f 	isb	sy
 800f13e:	f3bf 8f4f 	dsb	sy
 800f142:	603b      	str	r3, [r7, #0]
}
 800f144:	bf00      	nop
 800f146:	bf00      	nop
 800f148:	e7fd      	b.n	800f146 <xTaskIncrementTick+0x46>
 800f14a:	4b41      	ldr	r3, [pc, #260]	@ (800f250 <xTaskIncrementTick+0x150>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	4b40      	ldr	r3, [pc, #256]	@ (800f254 <xTaskIncrementTick+0x154>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a3e      	ldr	r2, [pc, #248]	@ (800f250 <xTaskIncrementTick+0x150>)
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	4a3e      	ldr	r2, [pc, #248]	@ (800f254 <xTaskIncrementTick+0x154>)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6013      	str	r3, [r2, #0]
 800f15e:	4b3e      	ldr	r3, [pc, #248]	@ (800f258 <xTaskIncrementTick+0x158>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3301      	adds	r3, #1
 800f164:	4a3c      	ldr	r2, [pc, #240]	@ (800f258 <xTaskIncrementTick+0x158>)
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	f000 fc22 	bl	800f9b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f16c:	4b3b      	ldr	r3, [pc, #236]	@ (800f25c <xTaskIncrementTick+0x15c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	429a      	cmp	r2, r3
 800f174:	d349      	bcc.n	800f20a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f176:	4b36      	ldr	r3, [pc, #216]	@ (800f250 <xTaskIncrementTick+0x150>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d104      	bne.n	800f18a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f180:	4b36      	ldr	r3, [pc, #216]	@ (800f25c <xTaskIncrementTick+0x15c>)
 800f182:	f04f 32ff 	mov.w	r2, #4294967295
 800f186:	601a      	str	r2, [r3, #0]
					break;
 800f188:	e03f      	b.n	800f20a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f18a:	4b31      	ldr	r3, [pc, #196]	@ (800f250 <xTaskIncrementTick+0x150>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f19a:	693a      	ldr	r2, [r7, #16]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d203      	bcs.n	800f1aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f1a2:	4a2e      	ldr	r2, [pc, #184]	@ (800f25c <xTaskIncrementTick+0x15c>)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f1a8:	e02f      	b.n	800f20a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	3304      	adds	r3, #4
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7fe f9d0 	bl	800d554 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d004      	beq.n	800f1c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	3318      	adds	r3, #24
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fe f9c7 	bl	800d554 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1ca:	4b25      	ldr	r3, [pc, #148]	@ (800f260 <xTaskIncrementTick+0x160>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d903      	bls.n	800f1da <xTaskIncrementTick+0xda>
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d6:	4a22      	ldr	r2, [pc, #136]	@ (800f260 <xTaskIncrementTick+0x160>)
 800f1d8:	6013      	str	r3, [r2, #0]
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	4a1f      	ldr	r2, [pc, #124]	@ (800f264 <xTaskIncrementTick+0x164>)
 800f1e8:	441a      	add	r2, r3
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	3304      	adds	r3, #4
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	f7fe f952 	bl	800d49a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1fa:	4b1b      	ldr	r3, [pc, #108]	@ (800f268 <xTaskIncrementTick+0x168>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f200:	429a      	cmp	r2, r3
 800f202:	d3b8      	bcc.n	800f176 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f204:	2301      	movs	r3, #1
 800f206:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f208:	e7b5      	b.n	800f176 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f20a:	4b17      	ldr	r3, [pc, #92]	@ (800f268 <xTaskIncrementTick+0x168>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f210:	4914      	ldr	r1, [pc, #80]	@ (800f264 <xTaskIncrementTick+0x164>)
 800f212:	4613      	mov	r3, r2
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	4413      	add	r3, r2
 800f218:	009b      	lsls	r3, r3, #2
 800f21a:	440b      	add	r3, r1
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b01      	cmp	r3, #1
 800f220:	d901      	bls.n	800f226 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f222:	2301      	movs	r3, #1
 800f224:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f226:	4b11      	ldr	r3, [pc, #68]	@ (800f26c <xTaskIncrementTick+0x16c>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d007      	beq.n	800f23e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f22e:	2301      	movs	r3, #1
 800f230:	617b      	str	r3, [r7, #20]
 800f232:	e004      	b.n	800f23e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f234:	4b0e      	ldr	r3, [pc, #56]	@ (800f270 <xTaskIncrementTick+0x170>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	3301      	adds	r3, #1
 800f23a:	4a0d      	ldr	r2, [pc, #52]	@ (800f270 <xTaskIncrementTick+0x170>)
 800f23c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f23e:	697b      	ldr	r3, [r7, #20]
}
 800f240:	4618      	mov	r0, r3
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	200033c4 	.word	0x200033c4
 800f24c:	200033a0 	.word	0x200033a0
 800f250:	20003354 	.word	0x20003354
 800f254:	20003358 	.word	0x20003358
 800f258:	200033b4 	.word	0x200033b4
 800f25c:	200033bc 	.word	0x200033bc
 800f260:	200033a4 	.word	0x200033a4
 800f264:	20002ecc 	.word	0x20002ecc
 800f268:	20002ec8 	.word	0x20002ec8
 800f26c:	200033b0 	.word	0x200033b0
 800f270:	200033ac 	.word	0x200033ac

0800f274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f27a:	4b2b      	ldr	r3, [pc, #172]	@ (800f328 <vTaskSwitchContext+0xb4>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d003      	beq.n	800f28a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f282:	4b2a      	ldr	r3, [pc, #168]	@ (800f32c <vTaskSwitchContext+0xb8>)
 800f284:	2201      	movs	r2, #1
 800f286:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f288:	e047      	b.n	800f31a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f28a:	4b28      	ldr	r3, [pc, #160]	@ (800f32c <vTaskSwitchContext+0xb8>)
 800f28c:	2200      	movs	r2, #0
 800f28e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f290:	4b27      	ldr	r3, [pc, #156]	@ (800f330 <vTaskSwitchContext+0xbc>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	60fb      	str	r3, [r7, #12]
 800f296:	e011      	b.n	800f2bc <vTaskSwitchContext+0x48>
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10b      	bne.n	800f2b6 <vTaskSwitchContext+0x42>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	607b      	str	r3, [r7, #4]
}
 800f2b0:	bf00      	nop
 800f2b2:	bf00      	nop
 800f2b4:	e7fd      	b.n	800f2b2 <vTaskSwitchContext+0x3e>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	3b01      	subs	r3, #1
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	491d      	ldr	r1, [pc, #116]	@ (800f334 <vTaskSwitchContext+0xc0>)
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	4613      	mov	r3, r2
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	4413      	add	r3, r2
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	440b      	add	r3, r1
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d0e3      	beq.n	800f298 <vTaskSwitchContext+0x24>
 800f2d0:	68fa      	ldr	r2, [r7, #12]
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	4413      	add	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4a16      	ldr	r2, [pc, #88]	@ (800f334 <vTaskSwitchContext+0xc0>)
 800f2dc:	4413      	add	r3, r2
 800f2de:	60bb      	str	r3, [r7, #8]
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	685a      	ldr	r2, [r3, #4]
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	605a      	str	r2, [r3, #4]
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	685a      	ldr	r2, [r3, #4]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d104      	bne.n	800f300 <vTaskSwitchContext+0x8c>
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	685a      	ldr	r2, [r3, #4]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	605a      	str	r2, [r3, #4]
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	4a0c      	ldr	r2, [pc, #48]	@ (800f338 <vTaskSwitchContext+0xc4>)
 800f308:	6013      	str	r3, [r2, #0]
 800f30a:	4a09      	ldr	r2, [pc, #36]	@ (800f330 <vTaskSwitchContext+0xbc>)
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f310:	4b09      	ldr	r3, [pc, #36]	@ (800f338 <vTaskSwitchContext+0xc4>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	3354      	adds	r3, #84	@ 0x54
 800f316:	4a09      	ldr	r2, [pc, #36]	@ (800f33c <vTaskSwitchContext+0xc8>)
 800f318:	6013      	str	r3, [r2, #0]
}
 800f31a:	bf00      	nop
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	200033c4 	.word	0x200033c4
 800f32c:	200033b0 	.word	0x200033b0
 800f330:	200033a4 	.word	0x200033a4
 800f334:	20002ecc 	.word	0x20002ecc
 800f338:	20002ec8 	.word	0x20002ec8
 800f33c:	2000040c 	.word	0x2000040c

0800f340 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d10b      	bne.n	800f368 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f354:	f383 8811 	msr	BASEPRI, r3
 800f358:	f3bf 8f6f 	isb	sy
 800f35c:	f3bf 8f4f 	dsb	sy
 800f360:	60fb      	str	r3, [r7, #12]
}
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	e7fd      	b.n	800f364 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f368:	4b07      	ldr	r3, [pc, #28]	@ (800f388 <vTaskPlaceOnEventList+0x48>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3318      	adds	r3, #24
 800f36e:	4619      	mov	r1, r3
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7fe f8b6 	bl	800d4e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f376:	2101      	movs	r1, #1
 800f378:	6838      	ldr	r0, [r7, #0]
 800f37a:	f000 fe4d 	bl	8010018 <prvAddCurrentTaskToDelayedList>
}
 800f37e:	bf00      	nop
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	20002ec8 	.word	0x20002ec8

0800f38c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d10b      	bne.n	800f3b6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800f39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	617b      	str	r3, [r7, #20]
}
 800f3b0:	bf00      	nop
 800f3b2:	bf00      	nop
 800f3b4:	e7fd      	b.n	800f3b2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f3b6:	4b12      	ldr	r3, [pc, #72]	@ (800f400 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d10b      	bne.n	800f3d6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3c2:	f383 8811 	msr	BASEPRI, r3
 800f3c6:	f3bf 8f6f 	isb	sy
 800f3ca:	f3bf 8f4f 	dsb	sy
 800f3ce:	613b      	str	r3, [r7, #16]
}
 800f3d0:	bf00      	nop
 800f3d2:	bf00      	nop
 800f3d4:	e7fd      	b.n	800f3d2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800f404 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	68ba      	ldr	r2, [r7, #8]
 800f3dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800f3e0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3e2:	4b08      	ldr	r3, [pc, #32]	@ (800f404 <vTaskPlaceOnUnorderedEventList+0x78>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3318      	adds	r3, #24
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f7fe f855 	bl	800d49a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3f0:	2101      	movs	r1, #1
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 fe10 	bl	8010018 <prvAddCurrentTaskToDelayedList>
}
 800f3f8:	bf00      	nop
 800f3fa:	3718      	adds	r7, #24
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	200033c4 	.word	0x200033c4
 800f404:	20002ec8 	.word	0x20002ec8

0800f408 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10b      	bne.n	800f432 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f41e:	f383 8811 	msr	BASEPRI, r3
 800f422:	f3bf 8f6f 	isb	sy
 800f426:	f3bf 8f4f 	dsb	sy
 800f42a:	617b      	str	r3, [r7, #20]
}
 800f42c:	bf00      	nop
 800f42e:	bf00      	nop
 800f430:	e7fd      	b.n	800f42e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f432:	4b0a      	ldr	r3, [pc, #40]	@ (800f45c <vTaskPlaceOnEventListRestricted+0x54>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	3318      	adds	r3, #24
 800f438:	4619      	mov	r1, r3
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f7fe f82d 	bl	800d49a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d002      	beq.n	800f44c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f446:	f04f 33ff 	mov.w	r3, #4294967295
 800f44a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	68b8      	ldr	r0, [r7, #8]
 800f450:	f000 fde2 	bl	8010018 <prvAddCurrentTaskToDelayedList>
	}
 800f454:	bf00      	nop
 800f456:	3718      	adds	r7, #24
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	20002ec8 	.word	0x20002ec8

0800f460 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10b      	bne.n	800f48e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47a:	f383 8811 	msr	BASEPRI, r3
 800f47e:	f3bf 8f6f 	isb	sy
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	60fb      	str	r3, [r7, #12]
}
 800f488:	bf00      	nop
 800f48a:	bf00      	nop
 800f48c:	e7fd      	b.n	800f48a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	3318      	adds	r3, #24
 800f492:	4618      	mov	r0, r3
 800f494:	f7fe f85e 	bl	800d554 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f498:	4b1d      	ldr	r3, [pc, #116]	@ (800f510 <xTaskRemoveFromEventList+0xb0>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d11d      	bne.n	800f4dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fe f855 	bl	800d554 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4ae:	4b19      	ldr	r3, [pc, #100]	@ (800f514 <xTaskRemoveFromEventList+0xb4>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d903      	bls.n	800f4be <xTaskRemoveFromEventList+0x5e>
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4ba:	4a16      	ldr	r2, [pc, #88]	@ (800f514 <xTaskRemoveFromEventList+0xb4>)
 800f4bc:	6013      	str	r3, [r2, #0]
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	4a13      	ldr	r2, [pc, #76]	@ (800f518 <xTaskRemoveFromEventList+0xb8>)
 800f4cc:	441a      	add	r2, r3
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	3304      	adds	r3, #4
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	4610      	mov	r0, r2
 800f4d6:	f7fd ffe0 	bl	800d49a <vListInsertEnd>
 800f4da:	e005      	b.n	800f4e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	3318      	adds	r3, #24
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	480e      	ldr	r0, [pc, #56]	@ (800f51c <xTaskRemoveFromEventList+0xbc>)
 800f4e4:	f7fd ffd9 	bl	800d49a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800f520 <xTaskRemoveFromEventList+0xc0>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d905      	bls.n	800f502 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f4fa:	4b0a      	ldr	r3, [pc, #40]	@ (800f524 <xTaskRemoveFromEventList+0xc4>)
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	e001      	b.n	800f506 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f502:	2300      	movs	r3, #0
 800f504:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f506:	697b      	ldr	r3, [r7, #20]
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3718      	adds	r7, #24
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	200033c4 	.word	0x200033c4
 800f514:	200033a4 	.word	0x200033a4
 800f518:	20002ecc 	.word	0x20002ecc
 800f51c:	2000335c 	.word	0x2000335c
 800f520:	20002ec8 	.word	0x20002ec8
 800f524:	200033b0 	.word	0x200033b0

0800f528 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b086      	sub	sp, #24
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f532:	4b2a      	ldr	r3, [pc, #168]	@ (800f5dc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d10b      	bne.n	800f552 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800f53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f53e:	f383 8811 	msr	BASEPRI, r3
 800f542:	f3bf 8f6f 	isb	sy
 800f546:	f3bf 8f4f 	dsb	sy
 800f54a:	613b      	str	r3, [r7, #16]
}
 800f54c:	bf00      	nop
 800f54e:	bf00      	nop
 800f550:	e7fd      	b.n	800f54e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10b      	bne.n	800f580 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800f568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	60fb      	str	r3, [r7, #12]
}
 800f57a:	bf00      	nop
 800f57c:	bf00      	nop
 800f57e:	e7fd      	b.n	800f57c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7fd ffe7 	bl	800d554 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	3304      	adds	r3, #4
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fd ffe2 	bl	800d554 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f594:	4b12      	ldr	r3, [pc, #72]	@ (800f5e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	429a      	cmp	r2, r3
 800f59a:	d903      	bls.n	800f5a4 <vTaskRemoveFromUnorderedEventList+0x7c>
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5a0:	4a0f      	ldr	r2, [pc, #60]	@ (800f5e0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	4413      	add	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4a0c      	ldr	r2, [pc, #48]	@ (800f5e4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f5b2:	441a      	add	r2, r3
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	3304      	adds	r3, #4
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	f7fd ff6d 	bl	800d49a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5c4:	4b08      	ldr	r3, [pc, #32]	@ (800f5e8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5ca:	429a      	cmp	r2, r3
 800f5cc:	d902      	bls.n	800f5d4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f5ce:	4b07      	ldr	r3, [pc, #28]	@ (800f5ec <vTaskRemoveFromUnorderedEventList+0xc4>)
 800f5d0:	2201      	movs	r2, #1
 800f5d2:	601a      	str	r2, [r3, #0]
	}
}
 800f5d4:	bf00      	nop
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	200033c4 	.word	0x200033c4
 800f5e0:	200033a4 	.word	0x200033a4
 800f5e4:	20002ecc 	.word	0x20002ecc
 800f5e8:	20002ec8 	.word	0x20002ec8
 800f5ec:	200033b0 	.word	0x200033b0

0800f5f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f5f8:	4b06      	ldr	r3, [pc, #24]	@ (800f614 <vTaskInternalSetTimeOutState+0x24>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f600:	4b05      	ldr	r3, [pc, #20]	@ (800f618 <vTaskInternalSetTimeOutState+0x28>)
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	605a      	str	r2, [r3, #4]
}
 800f608:	bf00      	nop
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr
 800f614:	200033b4 	.word	0x200033b4
 800f618:	200033a0 	.word	0x200033a0

0800f61c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10b      	bne.n	800f644 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	613b      	str	r3, [r7, #16]
}
 800f63e:	bf00      	nop
 800f640:	bf00      	nop
 800f642:	e7fd      	b.n	800f640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10b      	bne.n	800f662 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	f383 8811 	msr	BASEPRI, r3
 800f652:	f3bf 8f6f 	isb	sy
 800f656:	f3bf 8f4f 	dsb	sy
 800f65a:	60fb      	str	r3, [r7, #12]
}
 800f65c:	bf00      	nop
 800f65e:	bf00      	nop
 800f660:	e7fd      	b.n	800f65e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f662:	f001 fa39 	bl	8010ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f666:	4b1d      	ldr	r3, [pc, #116]	@ (800f6dc <xTaskCheckForTimeOut+0xc0>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	1ad3      	subs	r3, r2, r3
 800f674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f67e:	d102      	bne.n	800f686 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f680:	2300      	movs	r3, #0
 800f682:	61fb      	str	r3, [r7, #28]
 800f684:	e023      	b.n	800f6ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	4b15      	ldr	r3, [pc, #84]	@ (800f6e0 <xTaskCheckForTimeOut+0xc4>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d007      	beq.n	800f6a2 <xTaskCheckForTimeOut+0x86>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	69ba      	ldr	r2, [r7, #24]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d302      	bcc.n	800f6a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f69c:	2301      	movs	r3, #1
 800f69e:	61fb      	str	r3, [r7, #28]
 800f6a0:	e015      	b.n	800f6ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d20b      	bcs.n	800f6c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	1ad2      	subs	r2, r2, r3
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7ff ff99 	bl	800f5f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	61fb      	str	r3, [r7, #28]
 800f6c2:	e004      	b.n	800f6ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f6ce:	f001 fa35 	bl	8010b3c <vPortExitCritical>

	return xReturn;
 800f6d2:	69fb      	ldr	r3, [r7, #28]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3720      	adds	r7, #32
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	200033a0 	.word	0x200033a0
 800f6e0:	200033b4 	.word	0x200033b4

0800f6e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f6e8:	4b03      	ldr	r3, [pc, #12]	@ (800f6f8 <vTaskMissedYield+0x14>)
 800f6ea:	2201      	movs	r2, #1
 800f6ec:	601a      	str	r2, [r3, #0]
}
 800f6ee:	bf00      	nop
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	200033b0 	.word	0x200033b0

0800f6fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f704:	f000 f852 	bl	800f7ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f708:	4b06      	ldr	r3, [pc, #24]	@ (800f724 <prvIdleTask+0x28>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	d9f9      	bls.n	800f704 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f710:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <prvIdleTask+0x2c>)
 800f712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f716:	601a      	str	r2, [r3, #0]
 800f718:	f3bf 8f4f 	dsb	sy
 800f71c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f720:	e7f0      	b.n	800f704 <prvIdleTask+0x8>
 800f722:	bf00      	nop
 800f724:	20002ecc 	.word	0x20002ecc
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f732:	2300      	movs	r3, #0
 800f734:	607b      	str	r3, [r7, #4]
 800f736:	e00c      	b.n	800f752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	4613      	mov	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4413      	add	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4a12      	ldr	r2, [pc, #72]	@ (800f78c <prvInitialiseTaskLists+0x60>)
 800f744:	4413      	add	r3, r2
 800f746:	4618      	mov	r0, r3
 800f748:	f7fd fe7a 	bl	800d440 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	3301      	adds	r3, #1
 800f750:	607b      	str	r3, [r7, #4]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b37      	cmp	r3, #55	@ 0x37
 800f756:	d9ef      	bls.n	800f738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f758:	480d      	ldr	r0, [pc, #52]	@ (800f790 <prvInitialiseTaskLists+0x64>)
 800f75a:	f7fd fe71 	bl	800d440 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f75e:	480d      	ldr	r0, [pc, #52]	@ (800f794 <prvInitialiseTaskLists+0x68>)
 800f760:	f7fd fe6e 	bl	800d440 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f764:	480c      	ldr	r0, [pc, #48]	@ (800f798 <prvInitialiseTaskLists+0x6c>)
 800f766:	f7fd fe6b 	bl	800d440 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f76a:	480c      	ldr	r0, [pc, #48]	@ (800f79c <prvInitialiseTaskLists+0x70>)
 800f76c:	f7fd fe68 	bl	800d440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f770:	480b      	ldr	r0, [pc, #44]	@ (800f7a0 <prvInitialiseTaskLists+0x74>)
 800f772:	f7fd fe65 	bl	800d440 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f776:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a4 <prvInitialiseTaskLists+0x78>)
 800f778:	4a05      	ldr	r2, [pc, #20]	@ (800f790 <prvInitialiseTaskLists+0x64>)
 800f77a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f77c:	4b0a      	ldr	r3, [pc, #40]	@ (800f7a8 <prvInitialiseTaskLists+0x7c>)
 800f77e:	4a05      	ldr	r2, [pc, #20]	@ (800f794 <prvInitialiseTaskLists+0x68>)
 800f780:	601a      	str	r2, [r3, #0]
}
 800f782:	bf00      	nop
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	20002ecc 	.word	0x20002ecc
 800f790:	2000332c 	.word	0x2000332c
 800f794:	20003340 	.word	0x20003340
 800f798:	2000335c 	.word	0x2000335c
 800f79c:	20003370 	.word	0x20003370
 800f7a0:	20003388 	.word	0x20003388
 800f7a4:	20003354 	.word	0x20003354
 800f7a8:	20003358 	.word	0x20003358

0800f7ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7b2:	e019      	b.n	800f7e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f7b4:	f001 f990 	bl	8010ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7b8:	4b10      	ldr	r3, [pc, #64]	@ (800f7fc <prvCheckTasksWaitingTermination+0x50>)
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	3304      	adds	r3, #4
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fd fec5 	bl	800d554 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f800 <prvCheckTasksWaitingTermination+0x54>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	3b01      	subs	r3, #1
 800f7d0:	4a0b      	ldr	r2, [pc, #44]	@ (800f800 <prvCheckTasksWaitingTermination+0x54>)
 800f7d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f7d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f804 <prvCheckTasksWaitingTermination+0x58>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	4a0a      	ldr	r2, [pc, #40]	@ (800f804 <prvCheckTasksWaitingTermination+0x58>)
 800f7dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f7de:	f001 f9ad 	bl	8010b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 f8ae 	bl	800f944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f7e8:	4b06      	ldr	r3, [pc, #24]	@ (800f804 <prvCheckTasksWaitingTermination+0x58>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1e1      	bne.n	800f7b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f7f0:	bf00      	nop
 800f7f2:	bf00      	nop
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20003370 	.word	0x20003370
 800f800:	2000339c 	.word	0x2000339c
 800f804:	20003384 	.word	0x20003384

0800f808 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d102      	bne.n	800f822 <vTaskGetInfo+0x1a>
 800f81c:	4b2c      	ldr	r3, [pc, #176]	@ (800f8d0 <vTaskGetInfo+0xc8>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	e000      	b.n	800f824 <vTaskGetInfo+0x1c>
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f83a:	68bb      	ldr	r3, [r7, #8]
 800f83c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800f83e:	697b      	ldr	r3, [r7, #20]
 800f840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	2200      	movs	r2, #0
 800f85a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800f85c:	78fb      	ldrb	r3, [r7, #3]
 800f85e:	2b05      	cmp	r3, #5
 800f860:	d01a      	beq.n	800f898 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800f862:	4b1b      	ldr	r3, [pc, #108]	@ (800f8d0 <vTaskGetInfo+0xc8>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d103      	bne.n	800f874 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	2200      	movs	r2, #0
 800f870:	731a      	strb	r2, [r3, #12]
 800f872:	e018      	b.n	800f8a6 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	78fa      	ldrb	r2, [r7, #3]
 800f878:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800f87a:	78fb      	ldrb	r3, [r7, #3]
 800f87c:	2b03      	cmp	r3, #3
 800f87e:	d112      	bne.n	800f8a6 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800f880:	f7ff faae 	bl	800ede0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d002      	beq.n	800f892 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	2202      	movs	r2, #2
 800f890:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800f892:	f7ff fab3 	bl	800edfc <xTaskResumeAll>
 800f896:	e006      	b.n	800f8a6 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800f898:	6978      	ldr	r0, [r7, #20]
 800f89a:	f7ff f823 	bl	800e8e4 <eTaskGetState>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d009      	beq.n	800f8c0 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f000 f80f 	bl	800f8d4 <prvTaskCheckFreeStackSpace>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800f8be:	e002      	b.n	800f8c6 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	841a      	strh	r2, [r3, #32]
	}
 800f8c6:	bf00      	nop
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	20002ec8 	.word	0x20002ec8

0800f8d4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f8e0:	e005      	b.n	800f8ee <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	2ba5      	cmp	r3, #165	@ 0xa5
 800f8f4:	d0f5      	beq.n	800f8e2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	089b      	lsrs	r3, r3, #2
 800f8fa:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	b29b      	uxth	r3, r3
	}
 800f900:	4618      	mov	r0, r3
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d102      	bne.n	800f920 <uxTaskGetStackHighWaterMark+0x14>
 800f91a:	4b09      	ldr	r3, [pc, #36]	@ (800f940 <uxTaskGetStackHighWaterMark+0x34>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	e000      	b.n	800f922 <uxTaskGetStackHighWaterMark+0x16>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f928:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800f92a:	6938      	ldr	r0, [r7, #16]
 800f92c:	f7ff ffd2 	bl	800f8d4 <prvTaskCheckFreeStackSpace>
 800f930:	4603      	mov	r3, r0
 800f932:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800f934:	68fb      	ldr	r3, [r7, #12]
	}
 800f936:	4618      	mov	r0, r3
 800f938:	3718      	adds	r7, #24
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	20002ec8 	.word	0x20002ec8

0800f944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	3354      	adds	r3, #84	@ 0x54
 800f950:	4618      	mov	r0, r3
 800f952:	f003 fc91 	bl	8013278 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d108      	bne.n	800f972 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f964:	4618      	mov	r0, r3
 800f966:	f001 faa7 	bl	8010eb8 <vPortFree>
				vPortFree( pxTCB );
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f001 faa4 	bl	8010eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f970:	e019      	b.n	800f9a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d103      	bne.n	800f984 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f001 fa9b 	bl	8010eb8 <vPortFree>
	}
 800f982:	e010      	b.n	800f9a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d00b      	beq.n	800f9a6 <prvDeleteTCB+0x62>
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	60fb      	str	r3, [r7, #12]
}
 800f9a0:	bf00      	nop
 800f9a2:	bf00      	nop
 800f9a4:	e7fd      	b.n	800f9a2 <prvDeleteTCB+0x5e>
	}
 800f9a6:	bf00      	nop
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b083      	sub	sp, #12
 800f9b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e8 <prvResetNextTaskUnblockTime+0x38>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d104      	bne.n	800f9ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f9ec <prvResetNextTaskUnblockTime+0x3c>)
 800f9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9c8:	e008      	b.n	800f9dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9ca:	4b07      	ldr	r3, [pc, #28]	@ (800f9e8 <prvResetNextTaskUnblockTime+0x38>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	68db      	ldr	r3, [r3, #12]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	4a04      	ldr	r2, [pc, #16]	@ (800f9ec <prvResetNextTaskUnblockTime+0x3c>)
 800f9da:	6013      	str	r3, [r2, #0]
}
 800f9dc:	bf00      	nop
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	20003354 	.word	0x20003354
 800f9ec:	200033bc 	.word	0x200033bc

0800f9f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9f6:	4b0b      	ldr	r3, [pc, #44]	@ (800fa24 <xTaskGetSchedulerState+0x34>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d102      	bne.n	800fa04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	607b      	str	r3, [r7, #4]
 800fa02:	e008      	b.n	800fa16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa04:	4b08      	ldr	r3, [pc, #32]	@ (800fa28 <xTaskGetSchedulerState+0x38>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d102      	bne.n	800fa12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa0c:	2302      	movs	r3, #2
 800fa0e:	607b      	str	r3, [r7, #4]
 800fa10:	e001      	b.n	800fa16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa12:	2300      	movs	r3, #0
 800fa14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa16:	687b      	ldr	r3, [r7, #4]
	}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	200033a8 	.word	0x200033a8
 800fa28:	200033c4 	.word	0x200033c4

0800fa2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d051      	beq.n	800fae6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa46:	4b2a      	ldr	r3, [pc, #168]	@ (800faf0 <xTaskPriorityInherit+0xc4>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d241      	bcs.n	800fad4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	db06      	blt.n	800fa66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa58:	4b25      	ldr	r3, [pc, #148]	@ (800faf0 <xTaskPriorityInherit+0xc4>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	6959      	ldr	r1, [r3, #20]
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	4a1f      	ldr	r2, [pc, #124]	@ (800faf4 <xTaskPriorityInherit+0xc8>)
 800fa78:	4413      	add	r3, r2
 800fa7a:	4299      	cmp	r1, r3
 800fa7c:	d122      	bne.n	800fac4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	3304      	adds	r3, #4
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fd fd66 	bl	800d554 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fa88:	4b19      	ldr	r3, [pc, #100]	@ (800faf0 <xTaskPriorityInherit+0xc4>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa96:	4b18      	ldr	r3, [pc, #96]	@ (800faf8 <xTaskPriorityInherit+0xcc>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d903      	bls.n	800faa6 <xTaskPriorityInherit+0x7a>
 800fa9e:	68bb      	ldr	r3, [r7, #8]
 800faa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa2:	4a15      	ldr	r2, [pc, #84]	@ (800faf8 <xTaskPriorityInherit+0xcc>)
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faaa:	4613      	mov	r3, r2
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	4a10      	ldr	r2, [pc, #64]	@ (800faf4 <xTaskPriorityInherit+0xc8>)
 800fab4:	441a      	add	r2, r3
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	3304      	adds	r3, #4
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f7fd fcec 	bl	800d49a <vListInsertEnd>
 800fac2:	e004      	b.n	800face <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fac4:	4b0a      	ldr	r3, [pc, #40]	@ (800faf0 <xTaskPriorityInherit+0xc4>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800face:	2301      	movs	r3, #1
 800fad0:	60fb      	str	r3, [r7, #12]
 800fad2:	e008      	b.n	800fae6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fad8:	4b05      	ldr	r3, [pc, #20]	@ (800faf0 <xTaskPriorityInherit+0xc4>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fade:	429a      	cmp	r2, r3
 800fae0:	d201      	bcs.n	800fae6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fae2:	2301      	movs	r3, #1
 800fae4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fae6:	68fb      	ldr	r3, [r7, #12]
	}
 800fae8:	4618      	mov	r0, r3
 800faea:	3710      	adds	r7, #16
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	20002ec8 	.word	0x20002ec8
 800faf4:	20002ecc 	.word	0x20002ecc
 800faf8:	200033a4 	.word	0x200033a4

0800fafc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d058      	beq.n	800fbc4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb12:	4b2f      	ldr	r3, [pc, #188]	@ (800fbd0 <xTaskPriorityDisinherit+0xd4>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	693a      	ldr	r2, [r7, #16]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d00b      	beq.n	800fb34 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	60fb      	str	r3, [r7, #12]
}
 800fb2e:	bf00      	nop
 800fb30:	bf00      	nop
 800fb32:	e7fd      	b.n	800fb30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d10b      	bne.n	800fb54 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	60bb      	str	r3, [r7, #8]
}
 800fb4e:	bf00      	nop
 800fb50:	bf00      	nop
 800fb52:	e7fd      	b.n	800fb50 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb58:	1e5a      	subs	r2, r3, #1
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d02c      	beq.n	800fbc4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d128      	bne.n	800fbc4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	3304      	adds	r3, #4
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fd fcec 	bl	800d554 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb94:	4b0f      	ldr	r3, [pc, #60]	@ (800fbd4 <xTaskPriorityDisinherit+0xd8>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d903      	bls.n	800fba4 <xTaskPriorityDisinherit+0xa8>
 800fb9c:	693b      	ldr	r3, [r7, #16]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba0:	4a0c      	ldr	r2, [pc, #48]	@ (800fbd4 <xTaskPriorityDisinherit+0xd8>)
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fba8:	4613      	mov	r3, r2
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	4413      	add	r3, r2
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4a09      	ldr	r2, [pc, #36]	@ (800fbd8 <xTaskPriorityDisinherit+0xdc>)
 800fbb2:	441a      	add	r2, r3
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	4619      	mov	r1, r3
 800fbba:	4610      	mov	r0, r2
 800fbbc:	f7fd fc6d 	bl	800d49a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fbc0:	2301      	movs	r3, #1
 800fbc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fbc4:	697b      	ldr	r3, [r7, #20]
	}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3718      	adds	r7, #24
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	20002ec8 	.word	0x20002ec8
 800fbd4:	200033a4 	.word	0x200033a4
 800fbd8:	20002ecc 	.word	0x20002ecc

0800fbdc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b088      	sub	sp, #32
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fbea:	2301      	movs	r3, #1
 800fbec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d06c      	beq.n	800fcce <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fbf4:	69bb      	ldr	r3, [r7, #24]
 800fbf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d10b      	bne.n	800fc14 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800fbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc00:	f383 8811 	msr	BASEPRI, r3
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	f3bf 8f4f 	dsb	sy
 800fc0c:	60fb      	str	r3, [r7, #12]
}
 800fc0e:	bf00      	nop
 800fc10:	bf00      	nop
 800fc12:	e7fd      	b.n	800fc10 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fc14:	69bb      	ldr	r3, [r7, #24]
 800fc16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc18:	683a      	ldr	r2, [r7, #0]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d902      	bls.n	800fc24 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	61fb      	str	r3, [r7, #28]
 800fc22:	e002      	b.n	800fc2a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fc28:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc2e:	69fa      	ldr	r2, [r7, #28]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d04c      	beq.n	800fcce <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc38:	697a      	ldr	r2, [r7, #20]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d147      	bne.n	800fcce <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fc3e:	4b26      	ldr	r3, [pc, #152]	@ (800fcd8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	69ba      	ldr	r2, [r7, #24]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d10b      	bne.n	800fc60 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800fc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc4c:	f383 8811 	msr	BASEPRI, r3
 800fc50:	f3bf 8f6f 	isb	sy
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	60bb      	str	r3, [r7, #8]
}
 800fc5a:	bf00      	nop
 800fc5c:	bf00      	nop
 800fc5e:	e7fd      	b.n	800fc5c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fc60:	69bb      	ldr	r3, [r7, #24]
 800fc62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc64:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	69fa      	ldr	r2, [r7, #28]
 800fc6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	db04      	blt.n	800fc7e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	6959      	ldr	r1, [r3, #20]
 800fc82:	693a      	ldr	r2, [r7, #16]
 800fc84:	4613      	mov	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	4413      	add	r3, r2
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	4a13      	ldr	r2, [pc, #76]	@ (800fcdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fc8e:	4413      	add	r3, r2
 800fc90:	4299      	cmp	r1, r3
 800fc92:	d11c      	bne.n	800fcce <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	3304      	adds	r3, #4
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fd fc5b 	bl	800d554 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fca2:	4b0f      	ldr	r3, [pc, #60]	@ (800fce0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d903      	bls.n	800fcb2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcae:	4a0c      	ldr	r2, [pc, #48]	@ (800fce0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fcb0:	6013      	str	r3, [r2, #0]
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	009b      	lsls	r3, r3, #2
 800fcbe:	4a07      	ldr	r2, [pc, #28]	@ (800fcdc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800fcc0:	441a      	add	r2, r3
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	3304      	adds	r3, #4
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	4610      	mov	r0, r2
 800fcca:	f7fd fbe6 	bl	800d49a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fcce:	bf00      	nop
 800fcd0:	3720      	adds	r7, #32
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20002ec8 	.word	0x20002ec8
 800fcdc:	20002ecc 	.word	0x20002ecc
 800fce0:	200033a4 	.word	0x200033a4

0800fce4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800fcea:	4b09      	ldr	r3, [pc, #36]	@ (800fd10 <uxTaskResetEventItemValue+0x2c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcf2:	4b07      	ldr	r3, [pc, #28]	@ (800fd10 <uxTaskResetEventItemValue+0x2c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcf8:	4b05      	ldr	r3, [pc, #20]	@ (800fd10 <uxTaskResetEventItemValue+0x2c>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800fd00:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800fd02:	687b      	ldr	r3, [r7, #4]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	20002ec8 	.word	0x20002ec8

0800fd14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd18:	4b07      	ldr	r3, [pc, #28]	@ (800fd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d004      	beq.n	800fd2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd20:	4b05      	ldr	r3, [pc, #20]	@ (800fd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd26:	3201      	adds	r2, #1
 800fd28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd2a:	4b03      	ldr	r3, [pc, #12]	@ (800fd38 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
	}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	20002ec8 	.word	0x20002ec8

0800fd3c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b084      	sub	sp, #16
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fd46:	f000 fec7 	bl	8010ad8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fd4a:	4b20      	ldr	r3, [pc, #128]	@ (800fdcc <ulTaskNotifyTake+0x90>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d113      	bne.n	800fd7e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fd56:	4b1d      	ldr	r3, [pc, #116]	@ (800fdcc <ulTaskNotifyTake+0x90>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00b      	beq.n	800fd7e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd66:	2101      	movs	r1, #1
 800fd68:	6838      	ldr	r0, [r7, #0]
 800fd6a:	f000 f955 	bl	8010018 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fd6e:	4b18      	ldr	r3, [pc, #96]	@ (800fdd0 <ulTaskNotifyTake+0x94>)
 800fd70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd74:	601a      	str	r2, [r3, #0]
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fd7e:	f000 fedd 	bl	8010b3c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fd82:	f000 fea9 	bl	8010ad8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fd86:	4b11      	ldr	r3, [pc, #68]	@ (800fdcc <ulTaskNotifyTake+0x90>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd8e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00e      	beq.n	800fdb4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d005      	beq.n	800fda8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fd9c:	4b0b      	ldr	r3, [pc, #44]	@ (800fdcc <ulTaskNotifyTake+0x90>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2200      	movs	r2, #0
 800fda2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800fda6:	e005      	b.n	800fdb4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800fda8:	4b08      	ldr	r3, [pc, #32]	@ (800fdcc <ulTaskNotifyTake+0x90>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68fa      	ldr	r2, [r7, #12]
 800fdae:	3a01      	subs	r2, #1
 800fdb0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fdb4:	4b05      	ldr	r3, [pc, #20]	@ (800fdcc <ulTaskNotifyTake+0x90>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800fdbe:	f000 febd 	bl	8010b3c <vPortExitCritical>

		return ulReturn;
 800fdc2:	68fb      	ldr	r3, [r7, #12]
	}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20002ec8 	.word	0x20002ec8
 800fdd0:	e000ed04 	.word	0xe000ed04

0800fdd4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b086      	sub	sp, #24
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800fde2:	f000 fe79 	bl	8010ad8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fde6:	4b29      	ldr	r3, [pc, #164]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	d01c      	beq.n	800fe2e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fdf4:	4b25      	ldr	r3, [pc, #148]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	43d2      	mvns	r2, r2
 800fe00:	400a      	ands	r2, r1
 800fe02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fe06:	4b21      	ldr	r3, [pc, #132]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00b      	beq.n	800fe2e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe16:	2101      	movs	r1, #1
 800fe18:	6838      	ldr	r0, [r7, #0]
 800fe1a:	f000 f8fd 	bl	8010018 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fe1e:	4b1c      	ldr	r3, [pc, #112]	@ (800fe90 <xTaskNotifyWait+0xbc>)
 800fe20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	f3bf 8f4f 	dsb	sy
 800fe2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fe2e:	f000 fe85 	bl	8010b3c <vPortExitCritical>

		taskENTER_CRITICAL();
 800fe32:	f000 fe51 	bl	8010ad8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d005      	beq.n	800fe48 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fe3c:	4b13      	ldr	r3, [pc, #76]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fe48:	4b10      	ldr	r3, [pc, #64]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d002      	beq.n	800fe5c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fe56:	2300      	movs	r3, #0
 800fe58:	617b      	str	r3, [r7, #20]
 800fe5a:	e00a      	b.n	800fe72 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fe5c:	4b0b      	ldr	r3, [pc, #44]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	43d2      	mvns	r2, r2
 800fe68:	400a      	ands	r2, r1
 800fe6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe72:	4b06      	ldr	r3, [pc, #24]	@ (800fe8c <xTaskNotifyWait+0xb8>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2200      	movs	r2, #0
 800fe78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800fe7c:	f000 fe5e 	bl	8010b3c <vPortExitCritical>

		return xReturn;
 800fe80:	697b      	ldr	r3, [r7, #20]
	}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3718      	adds	r7, #24
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}
 800fe8a:	bf00      	nop
 800fe8c:	20002ec8 	.word	0x20002ec8
 800fe90:	e000ed04 	.word	0xe000ed04

0800fe94 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b08a      	sub	sp, #40	@ 0x28
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	603b      	str	r3, [r7, #0]
 800fea0:	4613      	mov	r3, r2
 800fea2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fea4:	2301      	movs	r3, #1
 800fea6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10b      	bne.n	800fec6 <xTaskGenericNotify+0x32>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	61bb      	str	r3, [r7, #24]
}
 800fec0:	bf00      	nop
 800fec2:	bf00      	nop
 800fec4:	e7fd      	b.n	800fec2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800feca:	f000 fe05 	bl	8010ad8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d004      	beq.n	800fede <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fed4:	6a3b      	ldr	r3, [r7, #32]
 800fed6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fede:	6a3b      	ldr	r3, [r7, #32]
 800fee0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800fee4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fee6:	6a3b      	ldr	r3, [r7, #32]
 800fee8:	2202      	movs	r2, #2
 800feea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	2b04      	cmp	r3, #4
 800fef2:	d82e      	bhi.n	800ff52 <xTaskGenericNotify+0xbe>
 800fef4:	a201      	add	r2, pc, #4	@ (adr r2, 800fefc <xTaskGenericNotify+0x68>)
 800fef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fefa:	bf00      	nop
 800fefc:	0800ff77 	.word	0x0800ff77
 800ff00:	0800ff11 	.word	0x0800ff11
 800ff04:	0800ff23 	.word	0x0800ff23
 800ff08:	0800ff33 	.word	0x0800ff33
 800ff0c:	0800ff3d 	.word	0x0800ff3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ff10:	6a3b      	ldr	r3, [r7, #32]
 800ff12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	431a      	orrs	r2, r3
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff20:	e02c      	b.n	800ff7c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff28:	1c5a      	adds	r2, r3, #1
 800ff2a:	6a3b      	ldr	r3, [r7, #32]
 800ff2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff30:	e024      	b.n	800ff7c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ff32:	6a3b      	ldr	r3, [r7, #32]
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800ff3a:	e01f      	b.n	800ff7c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ff3c:	7ffb      	ldrb	r3, [r7, #31]
 800ff3e:	2b02      	cmp	r3, #2
 800ff40:	d004      	beq.n	800ff4c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ff4a:	e017      	b.n	800ff7c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800ff50:	e014      	b.n	800ff7c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ff52:	6a3b      	ldr	r3, [r7, #32]
 800ff54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff5c:	d00d      	beq.n	800ff7a <xTaskGenericNotify+0xe6>
	__asm volatile
 800ff5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff62:	f383 8811 	msr	BASEPRI, r3
 800ff66:	f3bf 8f6f 	isb	sy
 800ff6a:	f3bf 8f4f 	dsb	sy
 800ff6e:	617b      	str	r3, [r7, #20]
}
 800ff70:	bf00      	nop
 800ff72:	bf00      	nop
 800ff74:	e7fd      	b.n	800ff72 <xTaskGenericNotify+0xde>
					break;
 800ff76:	bf00      	nop
 800ff78:	e000      	b.n	800ff7c <xTaskGenericNotify+0xe8>

					break;
 800ff7a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ff7c:	7ffb      	ldrb	r3, [r7, #31]
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d13b      	bne.n	800fffa <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	3304      	adds	r3, #4
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7fd fae4 	bl	800d554 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ff8c:	6a3b      	ldr	r3, [r7, #32]
 800ff8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff90:	4b1d      	ldr	r3, [pc, #116]	@ (8010008 <xTaskGenericNotify+0x174>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d903      	bls.n	800ffa0 <xTaskGenericNotify+0x10c>
 800ff98:	6a3b      	ldr	r3, [r7, #32]
 800ff9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff9c:	4a1a      	ldr	r2, [pc, #104]	@ (8010008 <xTaskGenericNotify+0x174>)
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	4413      	add	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4a17      	ldr	r2, [pc, #92]	@ (801000c <xTaskGenericNotify+0x178>)
 800ffae:	441a      	add	r2, r3
 800ffb0:	6a3b      	ldr	r3, [r7, #32]
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	f7fd fa6f 	bl	800d49a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ffbc:	6a3b      	ldr	r3, [r7, #32]
 800ffbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00b      	beq.n	800ffdc <xTaskGenericNotify+0x148>
	__asm volatile
 800ffc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc8:	f383 8811 	msr	BASEPRI, r3
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f3bf 8f4f 	dsb	sy
 800ffd4:	613b      	str	r3, [r7, #16]
}
 800ffd6:	bf00      	nop
 800ffd8:	bf00      	nop
 800ffda:	e7fd      	b.n	800ffd8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
 800ffde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffe0:	4b0b      	ldr	r3, [pc, #44]	@ (8010010 <xTaskGenericNotify+0x17c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d907      	bls.n	800fffa <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ffea:	4b0a      	ldr	r3, [pc, #40]	@ (8010014 <xTaskGenericNotify+0x180>)
 800ffec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	f3bf 8f4f 	dsb	sy
 800fff6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fffa:	f000 fd9f 	bl	8010b3c <vPortExitCritical>

		return xReturn;
 800fffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010000:	4618      	mov	r0, r3
 8010002:	3728      	adds	r7, #40	@ 0x28
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	200033a4 	.word	0x200033a4
 801000c:	20002ecc 	.word	0x20002ecc
 8010010:	20002ec8 	.word	0x20002ec8
 8010014:	e000ed04 	.word	0xe000ed04

08010018 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b084      	sub	sp, #16
 801001c:	af00      	add	r7, sp, #0
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010022:	4b21      	ldr	r3, [pc, #132]	@ (80100a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010028:	4b20      	ldr	r3, [pc, #128]	@ (80100ac <prvAddCurrentTaskToDelayedList+0x94>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	3304      	adds	r3, #4
 801002e:	4618      	mov	r0, r3
 8010030:	f7fd fa90 	bl	800d554 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f1b3 3fff 	cmp.w	r3, #4294967295
 801003a:	d10a      	bne.n	8010052 <prvAddCurrentTaskToDelayedList+0x3a>
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d007      	beq.n	8010052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010042:	4b1a      	ldr	r3, [pc, #104]	@ (80100ac <prvAddCurrentTaskToDelayedList+0x94>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	3304      	adds	r3, #4
 8010048:	4619      	mov	r1, r3
 801004a:	4819      	ldr	r0, [pc, #100]	@ (80100b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801004c:	f7fd fa25 	bl	800d49a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010050:	e026      	b.n	80100a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	4413      	add	r3, r2
 8010058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801005a:	4b14      	ldr	r3, [pc, #80]	@ (80100ac <prvAddCurrentTaskToDelayedList+0x94>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	429a      	cmp	r2, r3
 8010068:	d209      	bcs.n	801007e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801006a:	4b12      	ldr	r3, [pc, #72]	@ (80100b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801006c:	681a      	ldr	r2, [r3, #0]
 801006e:	4b0f      	ldr	r3, [pc, #60]	@ (80100ac <prvAddCurrentTaskToDelayedList+0x94>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3304      	adds	r3, #4
 8010074:	4619      	mov	r1, r3
 8010076:	4610      	mov	r0, r2
 8010078:	f7fd fa33 	bl	800d4e2 <vListInsert>
}
 801007c:	e010      	b.n	80100a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801007e:	4b0e      	ldr	r3, [pc, #56]	@ (80100b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	4b0a      	ldr	r3, [pc, #40]	@ (80100ac <prvAddCurrentTaskToDelayedList+0x94>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	3304      	adds	r3, #4
 8010088:	4619      	mov	r1, r3
 801008a:	4610      	mov	r0, r2
 801008c:	f7fd fa29 	bl	800d4e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010090:	4b0a      	ldr	r3, [pc, #40]	@ (80100bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	429a      	cmp	r2, r3
 8010098:	d202      	bcs.n	80100a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801009a:	4a08      	ldr	r2, [pc, #32]	@ (80100bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	6013      	str	r3, [r2, #0]
}
 80100a0:	bf00      	nop
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}
 80100a8:	200033a0 	.word	0x200033a0
 80100ac:	20002ec8 	.word	0x20002ec8
 80100b0:	20003388 	.word	0x20003388
 80100b4:	20003358 	.word	0x20003358
 80100b8:	20003354 	.word	0x20003354
 80100bc:	200033bc 	.word	0x200033bc

080100c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08a      	sub	sp, #40	@ 0x28
 80100c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80100c6:	2300      	movs	r3, #0
 80100c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80100ca:	f000 fb71 	bl	80107b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80100ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010144 <xTimerCreateTimerTask+0x84>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d021      	beq.n	801011a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80100d6:	2300      	movs	r3, #0
 80100d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80100de:	1d3a      	adds	r2, r7, #4
 80100e0:	f107 0108 	add.w	r1, r7, #8
 80100e4:	f107 030c 	add.w	r3, r7, #12
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fc ffd3 	bl	800d094 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80100ee:	6879      	ldr	r1, [r7, #4]
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	9202      	str	r2, [sp, #8]
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	2302      	movs	r3, #2
 80100fa:	9300      	str	r3, [sp, #0]
 80100fc:	2300      	movs	r3, #0
 80100fe:	460a      	mov	r2, r1
 8010100:	4911      	ldr	r1, [pc, #68]	@ (8010148 <xTimerCreateTimerTask+0x88>)
 8010102:	4812      	ldr	r0, [pc, #72]	@ (801014c <xTimerCreateTimerTask+0x8c>)
 8010104:	f7fe f986 	bl	800e414 <xTaskCreateStatic>
 8010108:	4603      	mov	r3, r0
 801010a:	4a11      	ldr	r2, [pc, #68]	@ (8010150 <xTimerCreateTimerTask+0x90>)
 801010c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801010e:	4b10      	ldr	r3, [pc, #64]	@ (8010150 <xTimerCreateTimerTask+0x90>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d001      	beq.n	801011a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010116:	2301      	movs	r3, #1
 8010118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10b      	bne.n	8010138 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	613b      	str	r3, [r7, #16]
}
 8010132:	bf00      	nop
 8010134:	bf00      	nop
 8010136:	e7fd      	b.n	8010134 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010138:	697b      	ldr	r3, [r7, #20]
}
 801013a:	4618      	mov	r0, r3
 801013c:	3718      	adds	r7, #24
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	200033f8 	.word	0x200033f8
 8010148:	0801662c 	.word	0x0801662c
 801014c:	08010349 	.word	0x08010349
 8010150:	200033fc 	.word	0x200033fc

08010154 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8010154:	b580      	push	{r7, lr}
 8010156:	b088      	sub	sp, #32
 8010158:	af02      	add	r7, sp, #8
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
 8010160:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8010162:	202c      	movs	r0, #44	@ 0x2c
 8010164:	f000 fdda 	bl	8010d1c <pvPortMalloc>
 8010168:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00d      	beq.n	801018c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	9301      	str	r3, [sp, #4]
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	687a      	ldr	r2, [r7, #4]
 8010184:	68b9      	ldr	r1, [r7, #8]
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f000 f805 	bl	8010196 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801018c:	697b      	ldr	r3, [r7, #20]
	}
 801018e:	4618      	mov	r0, r3
 8010190:	3718      	adds	r7, #24
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b086      	sub	sp, #24
 801019a:	af00      	add	r7, sp, #0
 801019c:	60f8      	str	r0, [r7, #12]
 801019e:	60b9      	str	r1, [r7, #8]
 80101a0:	607a      	str	r2, [r7, #4]
 80101a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10b      	bne.n	80101c2 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80101aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	617b      	str	r3, [r7, #20]
}
 80101bc:	bf00      	nop
 80101be:	bf00      	nop
 80101c0:	e7fd      	b.n	80101be <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80101c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d01e      	beq.n	8010206 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80101c8:	f000 faf2 	bl	80107b0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80101cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80101d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80101d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101da:	683a      	ldr	r2, [r7, #0]
 80101dc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80101de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e0:	6a3a      	ldr	r2, [r7, #32]
 80101e2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80101e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e6:	3304      	adds	r3, #4
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7fd f949 	bl	800d480 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d008      	beq.n	8010206 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80101f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101fa:	f043 0304 	orr.w	r3, r3, #4
 80101fe:	b2da      	uxtb	r2, r3
 8010200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010202:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8010206:	bf00      	nop
 8010208:	3718      	adds	r7, #24
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}
	...

08010210 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b08a      	sub	sp, #40	@ 0x28
 8010214:	af00      	add	r7, sp, #0
 8010216:	60f8      	str	r0, [r7, #12]
 8010218:	60b9      	str	r1, [r7, #8]
 801021a:	607a      	str	r2, [r7, #4]
 801021c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801021e:	2300      	movs	r3, #0
 8010220:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d10b      	bne.n	8010240 <xTimerGenericCommand+0x30>
	__asm volatile
 8010228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801022c:	f383 8811 	msr	BASEPRI, r3
 8010230:	f3bf 8f6f 	isb	sy
 8010234:	f3bf 8f4f 	dsb	sy
 8010238:	623b      	str	r3, [r7, #32]
}
 801023a:	bf00      	nop
 801023c:	bf00      	nop
 801023e:	e7fd      	b.n	801023c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010240:	4b19      	ldr	r3, [pc, #100]	@ (80102a8 <xTimerGenericCommand+0x98>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d02a      	beq.n	801029e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	2b05      	cmp	r3, #5
 8010258:	dc18      	bgt.n	801028c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801025a:	f7ff fbc9 	bl	800f9f0 <xTaskGetSchedulerState>
 801025e:	4603      	mov	r3, r0
 8010260:	2b02      	cmp	r3, #2
 8010262:	d109      	bne.n	8010278 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010264:	4b10      	ldr	r3, [pc, #64]	@ (80102a8 <xTimerGenericCommand+0x98>)
 8010266:	6818      	ldr	r0, [r3, #0]
 8010268:	f107 0110 	add.w	r1, r7, #16
 801026c:	2300      	movs	r3, #0
 801026e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010270:	f7fd fb12 	bl	800d898 <xQueueGenericSend>
 8010274:	6278      	str	r0, [r7, #36]	@ 0x24
 8010276:	e012      	b.n	801029e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010278:	4b0b      	ldr	r3, [pc, #44]	@ (80102a8 <xTimerGenericCommand+0x98>)
 801027a:	6818      	ldr	r0, [r3, #0]
 801027c:	f107 0110 	add.w	r1, r7, #16
 8010280:	2300      	movs	r3, #0
 8010282:	2200      	movs	r2, #0
 8010284:	f7fd fb08 	bl	800d898 <xQueueGenericSend>
 8010288:	6278      	str	r0, [r7, #36]	@ 0x24
 801028a:	e008      	b.n	801029e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801028c:	4b06      	ldr	r3, [pc, #24]	@ (80102a8 <xTimerGenericCommand+0x98>)
 801028e:	6818      	ldr	r0, [r3, #0]
 8010290:	f107 0110 	add.w	r1, r7, #16
 8010294:	2300      	movs	r3, #0
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	f7fd fc00 	bl	800da9c <xQueueGenericSendFromISR>
 801029c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3728      	adds	r7, #40	@ 0x28
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}
 80102a8:	200033f8 	.word	0x200033f8

080102ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b088      	sub	sp, #32
 80102b0:	af02      	add	r7, sp, #8
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102b6:	4b23      	ldr	r3, [pc, #140]	@ (8010344 <prvProcessExpiredTimer+0x98>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	3304      	adds	r3, #4
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fd f945 	bl	800d554 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102d0:	f003 0304 	and.w	r3, r3, #4
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d023      	beq.n	8010320 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	699a      	ldr	r2, [r3, #24]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	18d1      	adds	r1, r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	683a      	ldr	r2, [r7, #0]
 80102e4:	6978      	ldr	r0, [r7, #20]
 80102e6:	f000 f8d5 	bl	8010494 <prvInsertTimerInActiveList>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d020      	beq.n	8010332 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102f0:	2300      	movs	r3, #0
 80102f2:	9300      	str	r3, [sp, #0]
 80102f4:	2300      	movs	r3, #0
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	2100      	movs	r1, #0
 80102fa:	6978      	ldr	r0, [r7, #20]
 80102fc:	f7ff ff88 	bl	8010210 <xTimerGenericCommand>
 8010300:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d114      	bne.n	8010332 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8010308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801030c:	f383 8811 	msr	BASEPRI, r3
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	60fb      	str	r3, [r7, #12]
}
 801031a:	bf00      	nop
 801031c:	bf00      	nop
 801031e:	e7fd      	b.n	801031c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010326:	f023 0301 	bic.w	r3, r3, #1
 801032a:	b2da      	uxtb	r2, r3
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	6a1b      	ldr	r3, [r3, #32]
 8010336:	6978      	ldr	r0, [r7, #20]
 8010338:	4798      	blx	r3
}
 801033a:	bf00      	nop
 801033c:	3718      	adds	r7, #24
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	200033f0 	.word	0x200033f0

08010348 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010350:	f107 0308 	add.w	r3, r7, #8
 8010354:	4618      	mov	r0, r3
 8010356:	f000 f859 	bl	801040c <prvGetNextExpireTime>
 801035a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	4619      	mov	r1, r3
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f000 f805 	bl	8010370 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010366:	f000 f8d7 	bl	8010518 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801036a:	bf00      	nop
 801036c:	e7f0      	b.n	8010350 <prvTimerTask+0x8>
	...

08010370 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b084      	sub	sp, #16
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801037a:	f7fe fd31 	bl	800ede0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801037e:	f107 0308 	add.w	r3, r7, #8
 8010382:	4618      	mov	r0, r3
 8010384:	f000 f866 	bl	8010454 <prvSampleTimeNow>
 8010388:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d130      	bne.n	80103f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10a      	bne.n	80103ac <prvProcessTimerOrBlockTask+0x3c>
 8010396:	687a      	ldr	r2, [r7, #4]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	429a      	cmp	r2, r3
 801039c:	d806      	bhi.n	80103ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801039e:	f7fe fd2d 	bl	800edfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80103a2:	68f9      	ldr	r1, [r7, #12]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff ff81 	bl	80102ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80103aa:	e024      	b.n	80103f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d008      	beq.n	80103c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80103b2:	4b13      	ldr	r3, [pc, #76]	@ (8010400 <prvProcessTimerOrBlockTask+0x90>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d101      	bne.n	80103c0 <prvProcessTimerOrBlockTask+0x50>
 80103bc:	2301      	movs	r3, #1
 80103be:	e000      	b.n	80103c2 <prvProcessTimerOrBlockTask+0x52>
 80103c0:	2300      	movs	r3, #0
 80103c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80103c4:	4b0f      	ldr	r3, [pc, #60]	@ (8010404 <prvProcessTimerOrBlockTask+0x94>)
 80103c6:	6818      	ldr	r0, [r3, #0]
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	1ad3      	subs	r3, r2, r3
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	4619      	mov	r1, r3
 80103d2:	f7fd ffeb 	bl	800e3ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80103d6:	f7fe fd11 	bl	800edfc <xTaskResumeAll>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d10a      	bne.n	80103f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80103e0:	4b09      	ldr	r3, [pc, #36]	@ (8010408 <prvProcessTimerOrBlockTask+0x98>)
 80103e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103e6:	601a      	str	r2, [r3, #0]
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	f3bf 8f6f 	isb	sy
}
 80103f0:	e001      	b.n	80103f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80103f2:	f7fe fd03 	bl	800edfc <xTaskResumeAll>
}
 80103f6:	bf00      	nop
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	200033f4 	.word	0x200033f4
 8010404:	200033f8 	.word	0x200033f8
 8010408:	e000ed04 	.word	0xe000ed04

0801040c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010414:	4b0e      	ldr	r3, [pc, #56]	@ (8010450 <prvGetNextExpireTime+0x44>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <prvGetNextExpireTime+0x16>
 801041e:	2201      	movs	r2, #1
 8010420:	e000      	b.n	8010424 <prvGetNextExpireTime+0x18>
 8010422:	2200      	movs	r2, #0
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d105      	bne.n	801043c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010430:	4b07      	ldr	r3, [pc, #28]	@ (8010450 <prvGetNextExpireTime+0x44>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	60fb      	str	r3, [r7, #12]
 801043a:	e001      	b.n	8010440 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010440:	68fb      	ldr	r3, [r7, #12]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3714      	adds	r7, #20
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	200033f0 	.word	0x200033f0

08010454 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b084      	sub	sp, #16
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801045c:	f7fe fd6c 	bl	800ef38 <xTaskGetTickCount>
 8010460:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010462:	4b0b      	ldr	r3, [pc, #44]	@ (8010490 <prvSampleTimeNow+0x3c>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	429a      	cmp	r2, r3
 801046a:	d205      	bcs.n	8010478 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801046c:	f000 f93a 	bl	80106e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	601a      	str	r2, [r3, #0]
 8010476:	e002      	b.n	801047e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801047e:	4a04      	ldr	r2, [pc, #16]	@ (8010490 <prvSampleTimeNow+0x3c>)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010484:	68fb      	ldr	r3, [r7, #12]
}
 8010486:	4618      	mov	r0, r3
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	20003400 	.word	0x20003400

08010494 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b086      	sub	sp, #24
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
 80104a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	68ba      	ldr	r2, [r7, #8]
 80104aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	68fa      	ldr	r2, [r7, #12]
 80104b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80104b2:	68ba      	ldr	r2, [r7, #8]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d812      	bhi.n	80104e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	1ad2      	subs	r2, r2, r3
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	699b      	ldr	r3, [r3, #24]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d302      	bcc.n	80104ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80104c8:	2301      	movs	r3, #1
 80104ca:	617b      	str	r3, [r7, #20]
 80104cc:	e01b      	b.n	8010506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80104ce:	4b10      	ldr	r3, [pc, #64]	@ (8010510 <prvInsertTimerInActiveList+0x7c>)
 80104d0:	681a      	ldr	r2, [r3, #0]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	3304      	adds	r3, #4
 80104d6:	4619      	mov	r1, r3
 80104d8:	4610      	mov	r0, r2
 80104da:	f7fd f802 	bl	800d4e2 <vListInsert>
 80104de:	e012      	b.n	8010506 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d206      	bcs.n	80104f6 <prvInsertTimerInActiveList+0x62>
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d302      	bcc.n	80104f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80104f0:	2301      	movs	r3, #1
 80104f2:	617b      	str	r3, [r7, #20]
 80104f4:	e007      	b.n	8010506 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104f6:	4b07      	ldr	r3, [pc, #28]	@ (8010514 <prvInsertTimerInActiveList+0x80>)
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	3304      	adds	r3, #4
 80104fe:	4619      	mov	r1, r3
 8010500:	4610      	mov	r0, r2
 8010502:	f7fc ffee 	bl	800d4e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010506:	697b      	ldr	r3, [r7, #20]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}
 8010510:	200033f4 	.word	0x200033f4
 8010514:	200033f0 	.word	0x200033f0

08010518 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b08e      	sub	sp, #56	@ 0x38
 801051c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801051e:	e0ce      	b.n	80106be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	da19      	bge.n	801055a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010526:	1d3b      	adds	r3, r7, #4
 8010528:	3304      	adds	r3, #4
 801052a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801052c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801052e:	2b00      	cmp	r3, #0
 8010530:	d10b      	bne.n	801054a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010536:	f383 8811 	msr	BASEPRI, r3
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	61fb      	str	r3, [r7, #28]
}
 8010544:	bf00      	nop
 8010546:	bf00      	nop
 8010548:	e7fd      	b.n	8010546 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801054a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010550:	6850      	ldr	r0, [r2, #4]
 8010552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010554:	6892      	ldr	r2, [r2, #8]
 8010556:	4611      	mov	r1, r2
 8010558:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2b00      	cmp	r3, #0
 801055e:	f2c0 80ae 	blt.w	80106be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010568:	695b      	ldr	r3, [r3, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d004      	beq.n	8010578 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801056e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010570:	3304      	adds	r3, #4
 8010572:	4618      	mov	r0, r3
 8010574:	f7fc ffee 	bl	800d554 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010578:	463b      	mov	r3, r7
 801057a:	4618      	mov	r0, r3
 801057c:	f7ff ff6a 	bl	8010454 <prvSampleTimeNow>
 8010580:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2b09      	cmp	r3, #9
 8010586:	f200 8097 	bhi.w	80106b8 <prvProcessReceivedCommands+0x1a0>
 801058a:	a201      	add	r2, pc, #4	@ (adr r2, 8010590 <prvProcessReceivedCommands+0x78>)
 801058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010590:	080105b9 	.word	0x080105b9
 8010594:	080105b9 	.word	0x080105b9
 8010598:	080105b9 	.word	0x080105b9
 801059c:	0801062f 	.word	0x0801062f
 80105a0:	08010643 	.word	0x08010643
 80105a4:	0801068f 	.word	0x0801068f
 80105a8:	080105b9 	.word	0x080105b9
 80105ac:	080105b9 	.word	0x080105b9
 80105b0:	0801062f 	.word	0x0801062f
 80105b4:	08010643 	.word	0x08010643
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105be:	f043 0301 	orr.w	r3, r3, #1
 80105c2:	b2da      	uxtb	r2, r3
 80105c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105ca:	68ba      	ldr	r2, [r7, #8]
 80105cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	18d1      	adds	r1, r2, r3
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105d8:	f7ff ff5c 	bl	8010494 <prvInsertTimerInActiveList>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d06c      	beq.n	80106bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e4:	6a1b      	ldr	r3, [r3, #32]
 80105e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105f0:	f003 0304 	and.w	r3, r3, #4
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d061      	beq.n	80106bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80105f8:	68ba      	ldr	r2, [r7, #8]
 80105fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105fc:	699b      	ldr	r3, [r3, #24]
 80105fe:	441a      	add	r2, r3
 8010600:	2300      	movs	r3, #0
 8010602:	9300      	str	r3, [sp, #0]
 8010604:	2300      	movs	r3, #0
 8010606:	2100      	movs	r1, #0
 8010608:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801060a:	f7ff fe01 	bl	8010210 <xTimerGenericCommand>
 801060e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010610:	6a3b      	ldr	r3, [r7, #32]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d152      	bne.n	80106bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801061a:	f383 8811 	msr	BASEPRI, r3
 801061e:	f3bf 8f6f 	isb	sy
 8010622:	f3bf 8f4f 	dsb	sy
 8010626:	61bb      	str	r3, [r7, #24]
}
 8010628:	bf00      	nop
 801062a:	bf00      	nop
 801062c:	e7fd      	b.n	801062a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801062e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010634:	f023 0301 	bic.w	r3, r3, #1
 8010638:	b2da      	uxtb	r2, r3
 801063a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801063c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010640:	e03d      	b.n	80106be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010648:	f043 0301 	orr.w	r3, r3, #1
 801064c:	b2da      	uxtb	r2, r3
 801064e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010650:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010658:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801065a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801065c:	699b      	ldr	r3, [r3, #24]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d10b      	bne.n	801067a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010666:	f383 8811 	msr	BASEPRI, r3
 801066a:	f3bf 8f6f 	isb	sy
 801066e:	f3bf 8f4f 	dsb	sy
 8010672:	617b      	str	r3, [r7, #20]
}
 8010674:	bf00      	nop
 8010676:	bf00      	nop
 8010678:	e7fd      	b.n	8010676 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801067a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801067c:	699a      	ldr	r2, [r3, #24]
 801067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010680:	18d1      	adds	r1, r2, r3
 8010682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010688:	f7ff ff04 	bl	8010494 <prvInsertTimerInActiveList>
					break;
 801068c:	e017      	b.n	80106be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801068e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010694:	f003 0302 	and.w	r3, r3, #2
 8010698:	2b00      	cmp	r3, #0
 801069a:	d103      	bne.n	80106a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801069c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801069e:	f000 fc0b 	bl	8010eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80106a2:	e00c      	b.n	80106be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106aa:	f023 0301 	bic.w	r3, r3, #1
 80106ae:	b2da      	uxtb	r2, r3
 80106b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80106b6:	e002      	b.n	80106be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80106b8:	bf00      	nop
 80106ba:	e000      	b.n	80106be <prvProcessReceivedCommands+0x1a6>
					break;
 80106bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106be:	4b08      	ldr	r3, [pc, #32]	@ (80106e0 <prvProcessReceivedCommands+0x1c8>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	1d39      	adds	r1, r7, #4
 80106c4:	2200      	movs	r2, #0
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fd fa86 	bl	800dbd8 <xQueueReceive>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f47f af26 	bne.w	8010520 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80106d4:	bf00      	nop
 80106d6:	bf00      	nop
 80106d8:	3730      	adds	r7, #48	@ 0x30
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	200033f8 	.word	0x200033f8

080106e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106ea:	e049      	b.n	8010780 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106ec:	4b2e      	ldr	r3, [pc, #184]	@ (80107a8 <prvSwitchTimerLists+0xc4>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106f6:	4b2c      	ldr	r3, [pc, #176]	@ (80107a8 <prvSwitchTimerLists+0xc4>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	68db      	ldr	r3, [r3, #12]
 80106fc:	68db      	ldr	r3, [r3, #12]
 80106fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	3304      	adds	r3, #4
 8010704:	4618      	mov	r0, r3
 8010706:	f7fc ff25 	bl	800d554 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	68f8      	ldr	r0, [r7, #12]
 8010710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010718:	f003 0304 	and.w	r3, r3, #4
 801071c:	2b00      	cmp	r3, #0
 801071e:	d02f      	beq.n	8010780 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	699b      	ldr	r3, [r3, #24]
 8010724:	693a      	ldr	r2, [r7, #16]
 8010726:	4413      	add	r3, r2
 8010728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	693b      	ldr	r3, [r7, #16]
 801072e:	429a      	cmp	r2, r3
 8010730:	d90e      	bls.n	8010750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801073e:	4b1a      	ldr	r3, [pc, #104]	@ (80107a8 <prvSwitchTimerLists+0xc4>)
 8010740:	681a      	ldr	r2, [r3, #0]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	3304      	adds	r3, #4
 8010746:	4619      	mov	r1, r3
 8010748:	4610      	mov	r0, r2
 801074a:	f7fc feca 	bl	800d4e2 <vListInsert>
 801074e:	e017      	b.n	8010780 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010750:	2300      	movs	r3, #0
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	2300      	movs	r3, #0
 8010756:	693a      	ldr	r2, [r7, #16]
 8010758:	2100      	movs	r1, #0
 801075a:	68f8      	ldr	r0, [r7, #12]
 801075c:	f7ff fd58 	bl	8010210 <xTimerGenericCommand>
 8010760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10b      	bne.n	8010780 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	603b      	str	r3, [r7, #0]
}
 801077a:	bf00      	nop
 801077c:	bf00      	nop
 801077e:	e7fd      	b.n	801077c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010780:	4b09      	ldr	r3, [pc, #36]	@ (80107a8 <prvSwitchTimerLists+0xc4>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d1b0      	bne.n	80106ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801078a:	4b07      	ldr	r3, [pc, #28]	@ (80107a8 <prvSwitchTimerLists+0xc4>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010790:	4b06      	ldr	r3, [pc, #24]	@ (80107ac <prvSwitchTimerLists+0xc8>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a04      	ldr	r2, [pc, #16]	@ (80107a8 <prvSwitchTimerLists+0xc4>)
 8010796:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010798:	4a04      	ldr	r2, [pc, #16]	@ (80107ac <prvSwitchTimerLists+0xc8>)
 801079a:	697b      	ldr	r3, [r7, #20]
 801079c:	6013      	str	r3, [r2, #0]
}
 801079e:	bf00      	nop
 80107a0:	3718      	adds	r7, #24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	200033f0 	.word	0x200033f0
 80107ac:	200033f4 	.word	0x200033f4

080107b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80107b6:	f000 f98f 	bl	8010ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80107ba:	4b15      	ldr	r3, [pc, #84]	@ (8010810 <prvCheckForValidListAndQueue+0x60>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d120      	bne.n	8010804 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80107c2:	4814      	ldr	r0, [pc, #80]	@ (8010814 <prvCheckForValidListAndQueue+0x64>)
 80107c4:	f7fc fe3c 	bl	800d440 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80107c8:	4813      	ldr	r0, [pc, #76]	@ (8010818 <prvCheckForValidListAndQueue+0x68>)
 80107ca:	f7fc fe39 	bl	800d440 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80107ce:	4b13      	ldr	r3, [pc, #76]	@ (801081c <prvCheckForValidListAndQueue+0x6c>)
 80107d0:	4a10      	ldr	r2, [pc, #64]	@ (8010814 <prvCheckForValidListAndQueue+0x64>)
 80107d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80107d4:	4b12      	ldr	r3, [pc, #72]	@ (8010820 <prvCheckForValidListAndQueue+0x70>)
 80107d6:	4a10      	ldr	r2, [pc, #64]	@ (8010818 <prvCheckForValidListAndQueue+0x68>)
 80107d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80107da:	2300      	movs	r3, #0
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	4b11      	ldr	r3, [pc, #68]	@ (8010824 <prvCheckForValidListAndQueue+0x74>)
 80107e0:	4a11      	ldr	r2, [pc, #68]	@ (8010828 <prvCheckForValidListAndQueue+0x78>)
 80107e2:	2110      	movs	r1, #16
 80107e4:	200a      	movs	r0, #10
 80107e6:	f7fc ff49 	bl	800d67c <xQueueGenericCreateStatic>
 80107ea:	4603      	mov	r3, r0
 80107ec:	4a08      	ldr	r2, [pc, #32]	@ (8010810 <prvCheckForValidListAndQueue+0x60>)
 80107ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80107f0:	4b07      	ldr	r3, [pc, #28]	@ (8010810 <prvCheckForValidListAndQueue+0x60>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d005      	beq.n	8010804 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80107f8:	4b05      	ldr	r3, [pc, #20]	@ (8010810 <prvCheckForValidListAndQueue+0x60>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	490b      	ldr	r1, [pc, #44]	@ (801082c <prvCheckForValidListAndQueue+0x7c>)
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fd fdaa 	bl	800e358 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010804:	f000 f99a 	bl	8010b3c <vPortExitCritical>
}
 8010808:	bf00      	nop
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	200033f8 	.word	0x200033f8
 8010814:	200033c8 	.word	0x200033c8
 8010818:	200033dc 	.word	0x200033dc
 801081c:	200033f0 	.word	0x200033f0
 8010820:	200033f4 	.word	0x200033f4
 8010824:	200034a4 	.word	0x200034a4
 8010828:	20003404 	.word	0x20003404
 801082c:	08016634 	.word	0x08016634

08010830 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010830:	b580      	push	{r7, lr}
 8010832:	b08a      	sub	sp, #40	@ 0x28
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	60b9      	str	r1, [r7, #8]
 801083a:	607a      	str	r2, [r7, #4]
 801083c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801083e:	f06f 0301 	mvn.w	r3, #1
 8010842:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010848:	68bb      	ldr	r3, [r7, #8]
 801084a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010850:	4b06      	ldr	r3, [pc, #24]	@ (801086c <xTimerPendFunctionCallFromISR+0x3c>)
 8010852:	6818      	ldr	r0, [r3, #0]
 8010854:	f107 0114 	add.w	r1, r7, #20
 8010858:	2300      	movs	r3, #0
 801085a:	683a      	ldr	r2, [r7, #0]
 801085c:	f7fd f91e 	bl	800da9c <xQueueGenericSendFromISR>
 8010860:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8010862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8010864:	4618      	mov	r0, r3
 8010866:	3728      	adds	r7, #40	@ 0x28
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	200033f8 	.word	0x200033f8

08010870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010870:	b480      	push	{r7}
 8010872:	b085      	sub	sp, #20
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	3b04      	subs	r3, #4
 8010880:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	3b04      	subs	r3, #4
 801088e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	f023 0201 	bic.w	r2, r3, #1
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3b04      	subs	r3, #4
 801089e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80108a0:	4a0c      	ldr	r2, [pc, #48]	@ (80108d4 <pxPortInitialiseStack+0x64>)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	3b14      	subs	r3, #20
 80108aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80108ac:	687a      	ldr	r2, [r7, #4]
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3b04      	subs	r3, #4
 80108b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	f06f 0202 	mvn.w	r2, #2
 80108be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	3b20      	subs	r3, #32
 80108c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80108c6:	68fb      	ldr	r3, [r7, #12]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3714      	adds	r7, #20
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr
 80108d4:	080108d9 	.word	0x080108d9

080108d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80108e2:	4b13      	ldr	r3, [pc, #76]	@ (8010930 <prvTaskExitError+0x58>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ea:	d00b      	beq.n	8010904 <prvTaskExitError+0x2c>
	__asm volatile
 80108ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f0:	f383 8811 	msr	BASEPRI, r3
 80108f4:	f3bf 8f6f 	isb	sy
 80108f8:	f3bf 8f4f 	dsb	sy
 80108fc:	60fb      	str	r3, [r7, #12]
}
 80108fe:	bf00      	nop
 8010900:	bf00      	nop
 8010902:	e7fd      	b.n	8010900 <prvTaskExitError+0x28>
	__asm volatile
 8010904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010908:	f383 8811 	msr	BASEPRI, r3
 801090c:	f3bf 8f6f 	isb	sy
 8010910:	f3bf 8f4f 	dsb	sy
 8010914:	60bb      	str	r3, [r7, #8]
}
 8010916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010918:	bf00      	nop
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d0fc      	beq.n	801091a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010920:	bf00      	nop
 8010922:	bf00      	nop
 8010924:	3714      	adds	r7, #20
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	20000290 	.word	0x20000290
	...

08010940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010940:	4b07      	ldr	r3, [pc, #28]	@ (8010960 <pxCurrentTCBConst2>)
 8010942:	6819      	ldr	r1, [r3, #0]
 8010944:	6808      	ldr	r0, [r1, #0]
 8010946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801094a:	f380 8809 	msr	PSP, r0
 801094e:	f3bf 8f6f 	isb	sy
 8010952:	f04f 0000 	mov.w	r0, #0
 8010956:	f380 8811 	msr	BASEPRI, r0
 801095a:	4770      	bx	lr
 801095c:	f3af 8000 	nop.w

08010960 <pxCurrentTCBConst2>:
 8010960:	20002ec8 	.word	0x20002ec8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010964:	bf00      	nop
 8010966:	bf00      	nop

08010968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010968:	4808      	ldr	r0, [pc, #32]	@ (801098c <prvPortStartFirstTask+0x24>)
 801096a:	6800      	ldr	r0, [r0, #0]
 801096c:	6800      	ldr	r0, [r0, #0]
 801096e:	f380 8808 	msr	MSP, r0
 8010972:	f04f 0000 	mov.w	r0, #0
 8010976:	f380 8814 	msr	CONTROL, r0
 801097a:	b662      	cpsie	i
 801097c:	b661      	cpsie	f
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	df00      	svc	0
 8010988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801098a:	bf00      	nop
 801098c:	e000ed08 	.word	0xe000ed08

08010990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010996:	4b47      	ldr	r3, [pc, #284]	@ (8010ab4 <xPortStartScheduler+0x124>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4a47      	ldr	r2, [pc, #284]	@ (8010ab8 <xPortStartScheduler+0x128>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d10b      	bne.n	80109b8 <xPortStartScheduler+0x28>
	__asm volatile
 80109a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	60fb      	str	r3, [r7, #12]
}
 80109b2:	bf00      	nop
 80109b4:	bf00      	nop
 80109b6:	e7fd      	b.n	80109b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80109b8:	4b3e      	ldr	r3, [pc, #248]	@ (8010ab4 <xPortStartScheduler+0x124>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a3f      	ldr	r2, [pc, #252]	@ (8010abc <xPortStartScheduler+0x12c>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d10b      	bne.n	80109da <xPortStartScheduler+0x4a>
	__asm volatile
 80109c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c6:	f383 8811 	msr	BASEPRI, r3
 80109ca:	f3bf 8f6f 	isb	sy
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	613b      	str	r3, [r7, #16]
}
 80109d4:	bf00      	nop
 80109d6:	bf00      	nop
 80109d8:	e7fd      	b.n	80109d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109da:	4b39      	ldr	r3, [pc, #228]	@ (8010ac0 <xPortStartScheduler+0x130>)
 80109dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	22ff      	movs	r2, #255	@ 0xff
 80109ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80109fc:	b2da      	uxtb	r2, r3
 80109fe:	4b31      	ldr	r3, [pc, #196]	@ (8010ac4 <xPortStartScheduler+0x134>)
 8010a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a02:	4b31      	ldr	r3, [pc, #196]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a04:	2207      	movs	r2, #7
 8010a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a08:	e009      	b.n	8010a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8010a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	4a2d      	ldr	r2, [pc, #180]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a14:	78fb      	ldrb	r3, [r7, #3]
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a1e:	78fb      	ldrb	r3, [r7, #3]
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010a26:	2b80      	cmp	r3, #128	@ 0x80
 8010a28:	d0ef      	beq.n	8010a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a2a:	4b27      	ldr	r3, [pc, #156]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f1c3 0307 	rsb	r3, r3, #7
 8010a32:	2b04      	cmp	r3, #4
 8010a34:	d00b      	beq.n	8010a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8010a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a3a:	f383 8811 	msr	BASEPRI, r3
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f3bf 8f4f 	dsb	sy
 8010a46:	60bb      	str	r3, [r7, #8]
}
 8010a48:	bf00      	nop
 8010a4a:	bf00      	nop
 8010a4c:	e7fd      	b.n	8010a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	021b      	lsls	r3, r3, #8
 8010a54:	4a1c      	ldr	r2, [pc, #112]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a58:	4b1b      	ldr	r3, [pc, #108]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010a60:	4a19      	ldr	r2, [pc, #100]	@ (8010ac8 <xPortStartScheduler+0x138>)
 8010a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a6c:	4b17      	ldr	r3, [pc, #92]	@ (8010acc <xPortStartScheduler+0x13c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4a16      	ldr	r2, [pc, #88]	@ (8010acc <xPortStartScheduler+0x13c>)
 8010a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a78:	4b14      	ldr	r3, [pc, #80]	@ (8010acc <xPortStartScheduler+0x13c>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	4a13      	ldr	r2, [pc, #76]	@ (8010acc <xPortStartScheduler+0x13c>)
 8010a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a84:	f000 f8da 	bl	8010c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a88:	4b11      	ldr	r3, [pc, #68]	@ (8010ad0 <xPortStartScheduler+0x140>)
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a8e:	f000 f8f9 	bl	8010c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a92:	4b10      	ldr	r3, [pc, #64]	@ (8010ad4 <xPortStartScheduler+0x144>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a0f      	ldr	r2, [pc, #60]	@ (8010ad4 <xPortStartScheduler+0x144>)
 8010a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a9e:	f7ff ff63 	bl	8010968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010aa2:	f7fe fbe7 	bl	800f274 <vTaskSwitchContext>
	prvTaskExitError();
 8010aa6:	f7ff ff17 	bl	80108d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010aaa:	2300      	movs	r3, #0
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	e000ed00 	.word	0xe000ed00
 8010ab8:	410fc271 	.word	0x410fc271
 8010abc:	410fc270 	.word	0x410fc270
 8010ac0:	e000e400 	.word	0xe000e400
 8010ac4:	200034f4 	.word	0x200034f4
 8010ac8:	200034f8 	.word	0x200034f8
 8010acc:	e000ed20 	.word	0xe000ed20
 8010ad0:	20000290 	.word	0x20000290
 8010ad4:	e000ef34 	.word	0xe000ef34

08010ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b083      	sub	sp, #12
 8010adc:	af00      	add	r7, sp, #0
	__asm volatile
 8010ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	607b      	str	r3, [r7, #4]
}
 8010af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010af2:	4b10      	ldr	r3, [pc, #64]	@ (8010b34 <vPortEnterCritical+0x5c>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	3301      	adds	r3, #1
 8010af8:	4a0e      	ldr	r2, [pc, #56]	@ (8010b34 <vPortEnterCritical+0x5c>)
 8010afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010afc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b34 <vPortEnterCritical+0x5c>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d110      	bne.n	8010b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b04:	4b0c      	ldr	r3, [pc, #48]	@ (8010b38 <vPortEnterCritical+0x60>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d00b      	beq.n	8010b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	603b      	str	r3, [r7, #0]
}
 8010b20:	bf00      	nop
 8010b22:	bf00      	nop
 8010b24:	e7fd      	b.n	8010b22 <vPortEnterCritical+0x4a>
	}
}
 8010b26:	bf00      	nop
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr
 8010b32:	bf00      	nop
 8010b34:	20000290 	.word	0x20000290
 8010b38:	e000ed04 	.word	0xe000ed04

08010b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b42:	4b12      	ldr	r3, [pc, #72]	@ (8010b8c <vPortExitCritical+0x50>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10b      	bne.n	8010b62 <vPortExitCritical+0x26>
	__asm volatile
 8010b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b4e:	f383 8811 	msr	BASEPRI, r3
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	f3bf 8f4f 	dsb	sy
 8010b5a:	607b      	str	r3, [r7, #4]
}
 8010b5c:	bf00      	nop
 8010b5e:	bf00      	nop
 8010b60:	e7fd      	b.n	8010b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010b62:	4b0a      	ldr	r3, [pc, #40]	@ (8010b8c <vPortExitCritical+0x50>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	3b01      	subs	r3, #1
 8010b68:	4a08      	ldr	r2, [pc, #32]	@ (8010b8c <vPortExitCritical+0x50>)
 8010b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b6c:	4b07      	ldr	r3, [pc, #28]	@ (8010b8c <vPortExitCritical+0x50>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d105      	bne.n	8010b80 <vPortExitCritical+0x44>
 8010b74:	2300      	movs	r3, #0
 8010b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	f383 8811 	msr	BASEPRI, r3
}
 8010b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b80:	bf00      	nop
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	20000290 	.word	0x20000290

08010b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b90:	f3ef 8009 	mrs	r0, PSP
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	4b15      	ldr	r3, [pc, #84]	@ (8010bf0 <pxCurrentTCBConst>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	f01e 0f10 	tst.w	lr, #16
 8010ba0:	bf08      	it	eq
 8010ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010baa:	6010      	str	r0, [r2, #0]
 8010bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010bb4:	f380 8811 	msr	BASEPRI, r0
 8010bb8:	f3bf 8f4f 	dsb	sy
 8010bbc:	f3bf 8f6f 	isb	sy
 8010bc0:	f7fe fb58 	bl	800f274 <vTaskSwitchContext>
 8010bc4:	f04f 0000 	mov.w	r0, #0
 8010bc8:	f380 8811 	msr	BASEPRI, r0
 8010bcc:	bc09      	pop	{r0, r3}
 8010bce:	6819      	ldr	r1, [r3, #0]
 8010bd0:	6808      	ldr	r0, [r1, #0]
 8010bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd6:	f01e 0f10 	tst.w	lr, #16
 8010bda:	bf08      	it	eq
 8010bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010be0:	f380 8809 	msr	PSP, r0
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	f3af 8000 	nop.w

08010bf0 <pxCurrentTCBConst>:
 8010bf0:	20002ec8 	.word	0x20002ec8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010bf4:	bf00      	nop
 8010bf6:	bf00      	nop

08010bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8010bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c02:	f383 8811 	msr	BASEPRI, r3
 8010c06:	f3bf 8f6f 	isb	sy
 8010c0a:	f3bf 8f4f 	dsb	sy
 8010c0e:	607b      	str	r3, [r7, #4]
}
 8010c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c12:	f7fe fa75 	bl	800f100 <xTaskIncrementTick>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d003      	beq.n	8010c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c1c:	4b06      	ldr	r3, [pc, #24]	@ (8010c38 <xPortSysTickHandler+0x40>)
 8010c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c22:	601a      	str	r2, [r3, #0]
 8010c24:	2300      	movs	r3, #0
 8010c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	f383 8811 	msr	BASEPRI, r3
}
 8010c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c30:	bf00      	nop
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	e000ed04 	.word	0xe000ed04

08010c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c40:	4b0b      	ldr	r3, [pc, #44]	@ (8010c70 <vPortSetupTimerInterrupt+0x34>)
 8010c42:	2200      	movs	r2, #0
 8010c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c46:	4b0b      	ldr	r3, [pc, #44]	@ (8010c74 <vPortSetupTimerInterrupt+0x38>)
 8010c48:	2200      	movs	r2, #0
 8010c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8010c78 <vPortSetupTimerInterrupt+0x3c>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4a0a      	ldr	r2, [pc, #40]	@ (8010c7c <vPortSetupTimerInterrupt+0x40>)
 8010c52:	fba2 2303 	umull	r2, r3, r2, r3
 8010c56:	099b      	lsrs	r3, r3, #6
 8010c58:	4a09      	ldr	r2, [pc, #36]	@ (8010c80 <vPortSetupTimerInterrupt+0x44>)
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c5e:	4b04      	ldr	r3, [pc, #16]	@ (8010c70 <vPortSetupTimerInterrupt+0x34>)
 8010c60:	2207      	movs	r2, #7
 8010c62:	601a      	str	r2, [r3, #0]
}
 8010c64:	bf00      	nop
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
 8010c6e:	bf00      	nop
 8010c70:	e000e010 	.word	0xe000e010
 8010c74:	e000e018 	.word	0xe000e018
 8010c78:	20000264 	.word	0x20000264
 8010c7c:	10624dd3 	.word	0x10624dd3
 8010c80:	e000e014 	.word	0xe000e014

08010c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010c94 <vPortEnableVFP+0x10>
 8010c88:	6801      	ldr	r1, [r0, #0]
 8010c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010c8e:	6001      	str	r1, [r0, #0]
 8010c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c92:	bf00      	nop
 8010c94:	e000ed88 	.word	0xe000ed88

08010c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c98:	b480      	push	{r7}
 8010c9a:	b085      	sub	sp, #20
 8010c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c9e:	f3ef 8305 	mrs	r3, IPSR
 8010ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2b0f      	cmp	r3, #15
 8010ca8:	d915      	bls.n	8010cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010caa:	4a18      	ldr	r2, [pc, #96]	@ (8010d0c <vPortValidateInterruptPriority+0x74>)
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	4413      	add	r3, r2
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010cb4:	4b16      	ldr	r3, [pc, #88]	@ (8010d10 <vPortValidateInterruptPriority+0x78>)
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	7afa      	ldrb	r2, [r7, #11]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d20b      	bcs.n	8010cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc2:	f383 8811 	msr	BASEPRI, r3
 8010cc6:	f3bf 8f6f 	isb	sy
 8010cca:	f3bf 8f4f 	dsb	sy
 8010cce:	607b      	str	r3, [r7, #4]
}
 8010cd0:	bf00      	nop
 8010cd2:	bf00      	nop
 8010cd4:	e7fd      	b.n	8010cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8010d14 <vPortValidateInterruptPriority+0x7c>)
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010cde:	4b0e      	ldr	r3, [pc, #56]	@ (8010d18 <vPortValidateInterruptPriority+0x80>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d90b      	bls.n	8010cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cea:	f383 8811 	msr	BASEPRI, r3
 8010cee:	f3bf 8f6f 	isb	sy
 8010cf2:	f3bf 8f4f 	dsb	sy
 8010cf6:	603b      	str	r3, [r7, #0]
}
 8010cf8:	bf00      	nop
 8010cfa:	bf00      	nop
 8010cfc:	e7fd      	b.n	8010cfa <vPortValidateInterruptPriority+0x62>
	}
 8010cfe:	bf00      	nop
 8010d00:	3714      	adds	r7, #20
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	e000e3f0 	.word	0xe000e3f0
 8010d10:	200034f4 	.word	0x200034f4
 8010d14:	e000ed0c 	.word	0xe000ed0c
 8010d18:	200034f8 	.word	0x200034f8

08010d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b08a      	sub	sp, #40	@ 0x28
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d24:	2300      	movs	r3, #0
 8010d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d28:	f7fe f85a 	bl	800ede0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8010ea0 <pvPortMalloc+0x184>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d101      	bne.n	8010d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d34:	f000 f924 	bl	8010f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d38:	4b5a      	ldr	r3, [pc, #360]	@ (8010ea4 <pvPortMalloc+0x188>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4013      	ands	r3, r2
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	f040 8095 	bne.w	8010e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d01e      	beq.n	8010d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010d4c:	2208      	movs	r2, #8
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	4413      	add	r3, r2
 8010d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f003 0307 	and.w	r3, r3, #7
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d015      	beq.n	8010d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f023 0307 	bic.w	r3, r3, #7
 8010d64:	3308      	adds	r3, #8
 8010d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f003 0307 	and.w	r3, r3, #7
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00b      	beq.n	8010d8a <pvPortMalloc+0x6e>
	__asm volatile
 8010d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d76:	f383 8811 	msr	BASEPRI, r3
 8010d7a:	f3bf 8f6f 	isb	sy
 8010d7e:	f3bf 8f4f 	dsb	sy
 8010d82:	617b      	str	r3, [r7, #20]
}
 8010d84:	bf00      	nop
 8010d86:	bf00      	nop
 8010d88:	e7fd      	b.n	8010d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d06f      	beq.n	8010e70 <pvPortMalloc+0x154>
 8010d90:	4b45      	ldr	r3, [pc, #276]	@ (8010ea8 <pvPortMalloc+0x18c>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d86a      	bhi.n	8010e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d9a:	4b44      	ldr	r3, [pc, #272]	@ (8010eac <pvPortMalloc+0x190>)
 8010d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d9e:	4b43      	ldr	r3, [pc, #268]	@ (8010eac <pvPortMalloc+0x190>)
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010da4:	e004      	b.n	8010db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	687a      	ldr	r2, [r7, #4]
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d903      	bls.n	8010dc2 <pvPortMalloc+0xa6>
 8010dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d1f1      	bne.n	8010da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010dc2:	4b37      	ldr	r3, [pc, #220]	@ (8010ea0 <pvPortMalloc+0x184>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d051      	beq.n	8010e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010dcc:	6a3b      	ldr	r3, [r7, #32]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2208      	movs	r2, #8
 8010dd2:	4413      	add	r3, r2
 8010dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	6a3b      	ldr	r3, [r7, #32]
 8010ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de0:	685a      	ldr	r2, [r3, #4]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	1ad2      	subs	r2, r2, r3
 8010de6:	2308      	movs	r3, #8
 8010de8:	005b      	lsls	r3, r3, #1
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d920      	bls.n	8010e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4413      	add	r3, r2
 8010df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	f003 0307 	and.w	r3, r3, #7
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00b      	beq.n	8010e18 <pvPortMalloc+0xfc>
	__asm volatile
 8010e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	613b      	str	r3, [r7, #16]
}
 8010e12:	bf00      	nop
 8010e14:	bf00      	nop
 8010e16:	e7fd      	b.n	8010e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e1a:	685a      	ldr	r2, [r3, #4]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	1ad2      	subs	r2, r2, r3
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e2a:	69b8      	ldr	r0, [r7, #24]
 8010e2c:	f000 f90a 	bl	8011044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e30:	4b1d      	ldr	r3, [pc, #116]	@ (8010ea8 <pvPortMalloc+0x18c>)
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e36:	685b      	ldr	r3, [r3, #4]
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8010ea8 <pvPortMalloc+0x18c>)
 8010e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ea8 <pvPortMalloc+0x18c>)
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	4b1b      	ldr	r3, [pc, #108]	@ (8010eb0 <pvPortMalloc+0x194>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d203      	bcs.n	8010e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e4a:	4b17      	ldr	r3, [pc, #92]	@ (8010ea8 <pvPortMalloc+0x18c>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	4a18      	ldr	r2, [pc, #96]	@ (8010eb0 <pvPortMalloc+0x194>)
 8010e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e54:	685a      	ldr	r2, [r3, #4]
 8010e56:	4b13      	ldr	r3, [pc, #76]	@ (8010ea4 <pvPortMalloc+0x188>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	431a      	orrs	r2, r3
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e62:	2200      	movs	r2, #0
 8010e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010e66:	4b13      	ldr	r3, [pc, #76]	@ (8010eb4 <pvPortMalloc+0x198>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	4a11      	ldr	r2, [pc, #68]	@ (8010eb4 <pvPortMalloc+0x198>)
 8010e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e70:	f7fd ffc4 	bl	800edfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	f003 0307 	and.w	r3, r3, #7
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d00b      	beq.n	8010e96 <pvPortMalloc+0x17a>
	__asm volatile
 8010e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e82:	f383 8811 	msr	BASEPRI, r3
 8010e86:	f3bf 8f6f 	isb	sy
 8010e8a:	f3bf 8f4f 	dsb	sy
 8010e8e:	60fb      	str	r3, [r7, #12]
}
 8010e90:	bf00      	nop
 8010e92:	bf00      	nop
 8010e94:	e7fd      	b.n	8010e92 <pvPortMalloc+0x176>
	return pvReturn;
 8010e96:	69fb      	ldr	r3, [r7, #28]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3728      	adds	r7, #40	@ 0x28
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	20012f04 	.word	0x20012f04
 8010ea4:	20012f18 	.word	0x20012f18
 8010ea8:	20012f08 	.word	0x20012f08
 8010eac:	20012efc 	.word	0x20012efc
 8010eb0:	20012f0c 	.word	0x20012f0c
 8010eb4:	20012f10 	.word	0x20012f10

08010eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b086      	sub	sp, #24
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d04f      	beq.n	8010f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eca:	2308      	movs	r3, #8
 8010ecc:	425b      	negs	r3, r3
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ed8:	693b      	ldr	r3, [r7, #16]
 8010eda:	685a      	ldr	r2, [r3, #4]
 8010edc:	4b25      	ldr	r3, [pc, #148]	@ (8010f74 <vPortFree+0xbc>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10b      	bne.n	8010efe <vPortFree+0x46>
	__asm volatile
 8010ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eea:	f383 8811 	msr	BASEPRI, r3
 8010eee:	f3bf 8f6f 	isb	sy
 8010ef2:	f3bf 8f4f 	dsb	sy
 8010ef6:	60fb      	str	r3, [r7, #12]
}
 8010ef8:	bf00      	nop
 8010efa:	bf00      	nop
 8010efc:	e7fd      	b.n	8010efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00b      	beq.n	8010f1e <vPortFree+0x66>
	__asm volatile
 8010f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f0a:	f383 8811 	msr	BASEPRI, r3
 8010f0e:	f3bf 8f6f 	isb	sy
 8010f12:	f3bf 8f4f 	dsb	sy
 8010f16:	60bb      	str	r3, [r7, #8]
}
 8010f18:	bf00      	nop
 8010f1a:	bf00      	nop
 8010f1c:	e7fd      	b.n	8010f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	685a      	ldr	r2, [r3, #4]
 8010f22:	4b14      	ldr	r3, [pc, #80]	@ (8010f74 <vPortFree+0xbc>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4013      	ands	r3, r2
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d01e      	beq.n	8010f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d11a      	bne.n	8010f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	685a      	ldr	r2, [r3, #4]
 8010f38:	4b0e      	ldr	r3, [pc, #56]	@ (8010f74 <vPortFree+0xbc>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	43db      	mvns	r3, r3
 8010f3e:	401a      	ands	r2, r3
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f44:	f7fd ff4c 	bl	800ede0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	685a      	ldr	r2, [r3, #4]
 8010f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8010f78 <vPortFree+0xc0>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4413      	add	r3, r2
 8010f52:	4a09      	ldr	r2, [pc, #36]	@ (8010f78 <vPortFree+0xc0>)
 8010f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f56:	6938      	ldr	r0, [r7, #16]
 8010f58:	f000 f874 	bl	8011044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f5c:	4b07      	ldr	r3, [pc, #28]	@ (8010f7c <vPortFree+0xc4>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	3301      	adds	r3, #1
 8010f62:	4a06      	ldr	r2, [pc, #24]	@ (8010f7c <vPortFree+0xc4>)
 8010f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010f66:	f7fd ff49 	bl	800edfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f6a:	bf00      	nop
 8010f6c:	3718      	adds	r7, #24
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	20012f18 	.word	0x20012f18
 8010f78:	20012f08 	.word	0x20012f08
 8010f7c:	20012f14 	.word	0x20012f14

08010f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f80:	b480      	push	{r7}
 8010f82:	b085      	sub	sp, #20
 8010f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f86:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8010f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f8c:	4b27      	ldr	r3, [pc, #156]	@ (801102c <prvHeapInit+0xac>)
 8010f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f003 0307 	and.w	r3, r3, #7
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00c      	beq.n	8010fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3307      	adds	r3, #7
 8010f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f023 0307 	bic.w	r3, r3, #7
 8010fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010fa8:	68ba      	ldr	r2, [r7, #8]
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	4a1f      	ldr	r2, [pc, #124]	@ (801102c <prvHeapInit+0xac>)
 8010fb0:	4413      	add	r3, r2
 8010fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8011030 <prvHeapInit+0xb0>)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8011030 <prvHeapInit+0xb0>)
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	4413      	add	r3, r2
 8010fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fcc:	2208      	movs	r2, #8
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	1a9b      	subs	r3, r3, r2
 8010fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f023 0307 	bic.w	r3, r3, #7
 8010fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	4a15      	ldr	r2, [pc, #84]	@ (8011034 <prvHeapInit+0xb4>)
 8010fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fe2:	4b14      	ldr	r3, [pc, #80]	@ (8011034 <prvHeapInit+0xb4>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2200      	movs	r2, #0
 8010fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fea:	4b12      	ldr	r3, [pc, #72]	@ (8011034 <prvHeapInit+0xb4>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ff6:	683b      	ldr	r3, [r7, #0]
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	1ad2      	subs	r2, r2, r3
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011000:	4b0c      	ldr	r3, [pc, #48]	@ (8011034 <prvHeapInit+0xb4>)
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	4a0a      	ldr	r2, [pc, #40]	@ (8011038 <prvHeapInit+0xb8>)
 801100e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	685b      	ldr	r3, [r3, #4]
 8011014:	4a09      	ldr	r2, [pc, #36]	@ (801103c <prvHeapInit+0xbc>)
 8011016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011018:	4b09      	ldr	r3, [pc, #36]	@ (8011040 <prvHeapInit+0xc0>)
 801101a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801101e:	601a      	str	r2, [r3, #0]
}
 8011020:	bf00      	nop
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr
 801102c:	200034fc 	.word	0x200034fc
 8011030:	20012efc 	.word	0x20012efc
 8011034:	20012f04 	.word	0x20012f04
 8011038:	20012f0c 	.word	0x20012f0c
 801103c:	20012f08 	.word	0x20012f08
 8011040:	20012f18 	.word	0x20012f18

08011044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011044:	b480      	push	{r7}
 8011046:	b085      	sub	sp, #20
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801104c:	4b28      	ldr	r3, [pc, #160]	@ (80110f0 <prvInsertBlockIntoFreeList+0xac>)
 801104e:	60fb      	str	r3, [r7, #12]
 8011050:	e002      	b.n	8011058 <prvInsertBlockIntoFreeList+0x14>
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	60fb      	str	r3, [r7, #12]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	429a      	cmp	r2, r3
 8011060:	d8f7      	bhi.n	8011052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	4413      	add	r3, r2
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	429a      	cmp	r2, r3
 8011072:	d108      	bne.n	8011086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	685a      	ldr	r2, [r3, #4]
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	441a      	add	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	441a      	add	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	429a      	cmp	r2, r3
 8011098:	d118      	bne.n	80110cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	4b15      	ldr	r3, [pc, #84]	@ (80110f4 <prvInsertBlockIntoFreeList+0xb0>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	429a      	cmp	r2, r3
 80110a4:	d00d      	beq.n	80110c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685a      	ldr	r2, [r3, #4]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	441a      	add	r2, r3
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	e008      	b.n	80110d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110c2:	4b0c      	ldr	r3, [pc, #48]	@ (80110f4 <prvInsertBlockIntoFreeList+0xb0>)
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	601a      	str	r2, [r3, #0]
 80110ca:	e003      	b.n	80110d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d002      	beq.n	80110e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110e2:	bf00      	nop
 80110e4:	3714      	adds	r7, #20
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	20012efc 	.word	0x20012efc
 80110f4:	20012f04 	.word	0x20012f04

080110f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80110fc:	2201      	movs	r2, #1
 80110fe:	490e      	ldr	r1, [pc, #56]	@ (8011138 <MX_USB_HOST_Init+0x40>)
 8011100:	480e      	ldr	r0, [pc, #56]	@ (801113c <MX_USB_HOST_Init+0x44>)
 8011102:	f7f9 feb5 	bl	800ae70 <USBH_Init>
 8011106:	4603      	mov	r3, r0
 8011108:	2b00      	cmp	r3, #0
 801110a:	d001      	beq.n	8011110 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801110c:	f7f2 f93c 	bl	8003388 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011110:	490b      	ldr	r1, [pc, #44]	@ (8011140 <MX_USB_HOST_Init+0x48>)
 8011112:	480a      	ldr	r0, [pc, #40]	@ (801113c <MX_USB_HOST_Init+0x44>)
 8011114:	f7f9 ff79 	bl	800b00a <USBH_RegisterClass>
 8011118:	4603      	mov	r3, r0
 801111a:	2b00      	cmp	r3, #0
 801111c:	d001      	beq.n	8011122 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801111e:	f7f2 f933 	bl	8003388 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011122:	4806      	ldr	r0, [pc, #24]	@ (801113c <MX_USB_HOST_Init+0x44>)
 8011124:	f7f9 fffd 	bl	800b122 <USBH_Start>
 8011128:	4603      	mov	r3, r0
 801112a:	2b00      	cmp	r3, #0
 801112c:	d001      	beq.n	8011132 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801112e:	f7f2 f92b 	bl	8003388 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011132:	bf00      	nop
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	08011145 	.word	0x08011145
 801113c:	20012f1c 	.word	0x20012f1c
 8011140:	20000270 	.word	0x20000270

08011144 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	460b      	mov	r3, r1
 801114e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011150:	78fb      	ldrb	r3, [r7, #3]
 8011152:	3b01      	subs	r3, #1
 8011154:	2b04      	cmp	r3, #4
 8011156:	d819      	bhi.n	801118c <USBH_UserProcess+0x48>
 8011158:	a201      	add	r2, pc, #4	@ (adr r2, 8011160 <USBH_UserProcess+0x1c>)
 801115a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801115e:	bf00      	nop
 8011160:	0801118d 	.word	0x0801118d
 8011164:	0801117d 	.word	0x0801117d
 8011168:	0801118d 	.word	0x0801118d
 801116c:	08011185 	.word	0x08011185
 8011170:	08011175 	.word	0x08011175
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011174:	4b09      	ldr	r3, [pc, #36]	@ (801119c <USBH_UserProcess+0x58>)
 8011176:	2203      	movs	r2, #3
 8011178:	701a      	strb	r2, [r3, #0]
  break;
 801117a:	e008      	b.n	801118e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801117c:	4b07      	ldr	r3, [pc, #28]	@ (801119c <USBH_UserProcess+0x58>)
 801117e:	2202      	movs	r2, #2
 8011180:	701a      	strb	r2, [r3, #0]
  break;
 8011182:	e004      	b.n	801118e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011184:	4b05      	ldr	r3, [pc, #20]	@ (801119c <USBH_UserProcess+0x58>)
 8011186:	2201      	movs	r2, #1
 8011188:	701a      	strb	r2, [r3, #0]
  break;
 801118a:	e000      	b.n	801118e <USBH_UserProcess+0x4a>

  default:
  break;
 801118c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801118e:	bf00      	nop
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr
 801119a:	bf00      	nop
 801119c:	20013300 	.word	0x20013300

080111a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b08a      	sub	sp, #40	@ 0x28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111a8:	f107 0314 	add.w	r3, r7, #20
 80111ac:	2200      	movs	r2, #0
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	605a      	str	r2, [r3, #4]
 80111b2:	609a      	str	r2, [r3, #8]
 80111b4:	60da      	str	r2, [r3, #12]
 80111b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80111c0:	d147      	bne.n	8011252 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111c2:	2300      	movs	r3, #0
 80111c4:	613b      	str	r3, [r7, #16]
 80111c6:	4b25      	ldr	r3, [pc, #148]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 80111c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111ca:	4a24      	ldr	r2, [pc, #144]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 80111cc:	f043 0301 	orr.w	r3, r3, #1
 80111d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80111d2:	4b22      	ldr	r3, [pc, #136]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 80111d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111d6:	f003 0301 	and.w	r3, r3, #1
 80111da:	613b      	str	r3, [r7, #16]
 80111dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80111de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80111e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80111e4:	2300      	movs	r3, #0
 80111e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80111e8:	2300      	movs	r3, #0
 80111ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80111ec:	f107 0314 	add.w	r3, r7, #20
 80111f0:	4619      	mov	r1, r3
 80111f2:	481b      	ldr	r0, [pc, #108]	@ (8011260 <HAL_HCD_MspInit+0xc0>)
 80111f4:	f7f2 fe5a 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80111f8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80111fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80111fe:	2302      	movs	r3, #2
 8011200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011202:	2300      	movs	r3, #0
 8011204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011206:	2300      	movs	r3, #0
 8011208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801120a:	230a      	movs	r3, #10
 801120c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801120e:	f107 0314 	add.w	r3, r7, #20
 8011212:	4619      	mov	r1, r3
 8011214:	4812      	ldr	r0, [pc, #72]	@ (8011260 <HAL_HCD_MspInit+0xc0>)
 8011216:	f7f2 fe49 	bl	8003eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801121a:	4b10      	ldr	r3, [pc, #64]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 801121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801121e:	4a0f      	ldr	r2, [pc, #60]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 8011220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011224:	6353      	str	r3, [r2, #52]	@ 0x34
 8011226:	2300      	movs	r3, #0
 8011228:	60fb      	str	r3, [r7, #12]
 801122a:	4b0c      	ldr	r3, [pc, #48]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 801122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801122e:	4a0b      	ldr	r2, [pc, #44]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 8011230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011234:	6453      	str	r3, [r2, #68]	@ 0x44
 8011236:	4b09      	ldr	r3, [pc, #36]	@ (801125c <HAL_HCD_MspInit+0xbc>)
 8011238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801123e:	60fb      	str	r3, [r7, #12]
 8011240:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011242:	2200      	movs	r2, #0
 8011244:	2105      	movs	r1, #5
 8011246:	2043      	movs	r0, #67	@ 0x43
 8011248:	f7f2 fd74 	bl	8003d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801124c:	2043      	movs	r0, #67	@ 0x43
 801124e:	f7f2 fd8d 	bl	8003d6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011252:	bf00      	nop
 8011254:	3728      	adds	r7, #40	@ 0x28
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	40023800 	.word	0x40023800
 8011260:	40020000 	.word	0x40020000

08011264 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011272:	4618      	mov	r0, r3
 8011274:	f7fa fb8d 	bl	800b992 <USBH_LL_IncTimer>
}
 8011278:	bf00      	nop
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801128e:	4618      	mov	r0, r3
 8011290:	f7fa fbcd 	bl	800ba2e <USBH_LL_Connect>
}
 8011294:	bf00      	nop
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7fa fbda 	bl	800ba64 <USBH_LL_Disconnect>
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	460b      	mov	r3, r1
 80112c2:	70fb      	strb	r3, [r7, #3]
 80112c4:	4613      	mov	r3, r2
 80112c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fa fc2d 	bl	800bb2e <USBH_LL_NotifyURBChange>
#endif
}
 80112d4:	bf00      	nop
 80112d6:	3708      	adds	r7, #8
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fa fb7b 	bl	800b9e6 <USBH_LL_PortEnabled>
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8011306:	4618      	mov	r0, r3
 8011308:	f7fa fb7f 	bl	800ba0a <USBH_LL_PortDisabled>
}
 801130c:	bf00      	nop
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}

08011314 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8011322:	2b01      	cmp	r3, #1
 8011324:	d12a      	bne.n	801137c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011326:	4a18      	ldr	r2, [pc, #96]	@ (8011388 <USBH_LL_Init+0x74>)
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a15      	ldr	r2, [pc, #84]	@ (8011388 <USBH_LL_Init+0x74>)
 8011332:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011336:	4b14      	ldr	r3, [pc, #80]	@ (8011388 <USBH_LL_Init+0x74>)
 8011338:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801133c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801133e:	4b12      	ldr	r3, [pc, #72]	@ (8011388 <USBH_LL_Init+0x74>)
 8011340:	2208      	movs	r2, #8
 8011342:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011344:	4b10      	ldr	r3, [pc, #64]	@ (8011388 <USBH_LL_Init+0x74>)
 8011346:	2201      	movs	r2, #1
 8011348:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801134a:	4b0f      	ldr	r3, [pc, #60]	@ (8011388 <USBH_LL_Init+0x74>)
 801134c:	2200      	movs	r2, #0
 801134e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011350:	4b0d      	ldr	r3, [pc, #52]	@ (8011388 <USBH_LL_Init+0x74>)
 8011352:	2202      	movs	r2, #2
 8011354:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011356:	4b0c      	ldr	r3, [pc, #48]	@ (8011388 <USBH_LL_Init+0x74>)
 8011358:	2200      	movs	r2, #0
 801135a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801135c:	480a      	ldr	r0, [pc, #40]	@ (8011388 <USBH_LL_Init+0x74>)
 801135e:	f7f2 ffb0 	bl	80042c2 <HAL_HCD_Init>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d001      	beq.n	801136c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011368:	f7f2 f80e 	bl	8003388 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801136c:	4806      	ldr	r0, [pc, #24]	@ (8011388 <USBH_LL_Init+0x74>)
 801136e:	f7f3 fc11 	bl	8004b94 <HAL_HCD_GetCurrentFrame>
 8011372:	4603      	mov	r3, r0
 8011374:	4619      	mov	r1, r3
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f7fa fafc 	bl	800b974 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3708      	adds	r7, #8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	20013304 	.word	0x20013304

0801138c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011398:	2300      	movs	r3, #0
 801139a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f3 fb7e 	bl	8004aa4 <HAL_HCD_Start>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 f95e 	bl	8011670 <USBH_Get_USB_Status>
 80113b4:	4603      	mov	r3, r0
 80113b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b084      	sub	sp, #16
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80113d8:	4618      	mov	r0, r3
 80113da:	f7f3 fb86 	bl	8004aea <HAL_HCD_Stop>
 80113de:	4603      	mov	r3, r0
 80113e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80113e2:	7bfb      	ldrb	r3, [r7, #15]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f000 f943 	bl	8011670 <USBH_Get_USB_Status>
 80113ea:	4603      	mov	r3, r0
 80113ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3710      	adds	r7, #16
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011400:	2301      	movs	r3, #1
 8011402:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801140a:	4618      	mov	r0, r3
 801140c:	f7f3 fbd0 	bl	8004bb0 <HAL_HCD_GetCurrentSpeed>
 8011410:	4603      	mov	r3, r0
 8011412:	2b02      	cmp	r3, #2
 8011414:	d00c      	beq.n	8011430 <USBH_LL_GetSpeed+0x38>
 8011416:	2b02      	cmp	r3, #2
 8011418:	d80d      	bhi.n	8011436 <USBH_LL_GetSpeed+0x3e>
 801141a:	2b00      	cmp	r3, #0
 801141c:	d002      	beq.n	8011424 <USBH_LL_GetSpeed+0x2c>
 801141e:	2b01      	cmp	r3, #1
 8011420:	d003      	beq.n	801142a <USBH_LL_GetSpeed+0x32>
 8011422:	e008      	b.n	8011436 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011424:	2300      	movs	r3, #0
 8011426:	73fb      	strb	r3, [r7, #15]
    break;
 8011428:	e008      	b.n	801143c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801142a:	2301      	movs	r3, #1
 801142c:	73fb      	strb	r3, [r7, #15]
    break;
 801142e:	e005      	b.n	801143c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011430:	2302      	movs	r3, #2
 8011432:	73fb      	strb	r3, [r7, #15]
    break;
 8011434:	e002      	b.n	801143c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011436:	2301      	movs	r3, #1
 8011438:	73fb      	strb	r3, [r7, #15]
    break;
 801143a:	bf00      	nop
  }
  return  speed;
 801143c:	7bfb      	ldrb	r3, [r7, #15]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}

08011446 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011446:	b580      	push	{r7, lr}
 8011448:	b084      	sub	sp, #16
 801144a:	af00      	add	r7, sp, #0
 801144c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801144e:	2300      	movs	r3, #0
 8011450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801145c:	4618      	mov	r0, r3
 801145e:	f7f3 fb61 	bl	8004b24 <HAL_HCD_ResetPort>
 8011462:	4603      	mov	r3, r0
 8011464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011466:	7bfb      	ldrb	r3, [r7, #15]
 8011468:	4618      	mov	r0, r3
 801146a:	f000 f901 	bl	8011670 <USBH_Get_USB_Status>
 801146e:	4603      	mov	r3, r0
 8011470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011472:	7bbb      	ldrb	r3, [r7, #14]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b082      	sub	sp, #8
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801148e:	78fa      	ldrb	r2, [r7, #3]
 8011490:	4611      	mov	r1, r2
 8011492:	4618      	mov	r0, r3
 8011494:	f7f3 fb69 	bl	8004b6a <HAL_HCD_HC_GetXferCount>
 8011498:	4603      	mov	r3, r0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80114a2:	b590      	push	{r4, r7, lr}
 80114a4:	b089      	sub	sp, #36	@ 0x24
 80114a6:	af04      	add	r7, sp, #16
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	4608      	mov	r0, r1
 80114ac:	4611      	mov	r1, r2
 80114ae:	461a      	mov	r2, r3
 80114b0:	4603      	mov	r3, r0
 80114b2:	70fb      	strb	r3, [r7, #3]
 80114b4:	460b      	mov	r3, r1
 80114b6:	70bb      	strb	r3, [r7, #2]
 80114b8:	4613      	mov	r3, r2
 80114ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80114c0:	2300      	movs	r3, #0
 80114c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80114ca:	787c      	ldrb	r4, [r7, #1]
 80114cc:	78ba      	ldrb	r2, [r7, #2]
 80114ce:	78f9      	ldrb	r1, [r7, #3]
 80114d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80114d2:	9302      	str	r3, [sp, #8]
 80114d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80114d8:	9301      	str	r3, [sp, #4]
 80114da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	4623      	mov	r3, r4
 80114e2:	f7f2 ff55 	bl	8004390 <HAL_HCD_HC_Init>
 80114e6:	4603      	mov	r3, r0
 80114e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80114ea:	7bfb      	ldrb	r3, [r7, #15]
 80114ec:	4618      	mov	r0, r3
 80114ee:	f000 f8bf 	bl	8011670 <USBH_Get_USB_Status>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd90      	pop	{r4, r7, pc}

08011500 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
 8011508:	460b      	mov	r3, r1
 801150a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801150c:	2300      	movs	r3, #0
 801150e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801151a:	78fa      	ldrb	r2, [r7, #3]
 801151c:	4611      	mov	r1, r2
 801151e:	4618      	mov	r0, r3
 8011520:	f7f2 ffee 	bl	8004500 <HAL_HCD_HC_Halt>
 8011524:	4603      	mov	r3, r0
 8011526:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011528:	7bfb      	ldrb	r3, [r7, #15]
 801152a:	4618      	mov	r0, r3
 801152c:	f000 f8a0 	bl	8011670 <USBH_Get_USB_Status>
 8011530:	4603      	mov	r3, r0
 8011532:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011534:	7bbb      	ldrb	r3, [r7, #14]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}

0801153e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801153e:	b590      	push	{r4, r7, lr}
 8011540:	b089      	sub	sp, #36	@ 0x24
 8011542:	af04      	add	r7, sp, #16
 8011544:	6078      	str	r0, [r7, #4]
 8011546:	4608      	mov	r0, r1
 8011548:	4611      	mov	r1, r2
 801154a:	461a      	mov	r2, r3
 801154c:	4603      	mov	r3, r0
 801154e:	70fb      	strb	r3, [r7, #3]
 8011550:	460b      	mov	r3, r1
 8011552:	70bb      	strb	r3, [r7, #2]
 8011554:	4613      	mov	r3, r2
 8011556:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011558:	2300      	movs	r3, #0
 801155a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801155c:	2300      	movs	r3, #0
 801155e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8011566:	787c      	ldrb	r4, [r7, #1]
 8011568:	78ba      	ldrb	r2, [r7, #2]
 801156a:	78f9      	ldrb	r1, [r7, #3]
 801156c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011570:	9303      	str	r3, [sp, #12]
 8011572:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011574:	9302      	str	r3, [sp, #8]
 8011576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011578:	9301      	str	r3, [sp, #4]
 801157a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	4623      	mov	r3, r4
 8011582:	f7f2 ffe1 	bl	8004548 <HAL_HCD_HC_SubmitRequest>
 8011586:	4603      	mov	r3, r0
 8011588:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	4618      	mov	r0, r3
 801158e:	f000 f86f 	bl	8011670 <USBH_Get_USB_Status>
 8011592:	4603      	mov	r3, r0
 8011594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011596:	7bbb      	ldrb	r3, [r7, #14]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3714      	adds	r7, #20
 801159c:	46bd      	mov	sp, r7
 801159e:	bd90      	pop	{r4, r7, pc}

080115a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
 80115a8:	460b      	mov	r3, r1
 80115aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80115b2:	78fa      	ldrb	r2, [r7, #3]
 80115b4:	4611      	mov	r1, r2
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7f3 fac2 	bl	8004b40 <HAL_HCD_HC_GetURBState>
 80115bc:	4603      	mov	r3, r0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3708      	adds	r7, #8
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b082      	sub	sp, #8
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	460b      	mov	r3, r1
 80115d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d103      	bne.n	80115e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80115dc:	78fb      	ldrb	r3, [r7, #3]
 80115de:	4618      	mov	r0, r3
 80115e0:	f000 f872 	bl	80116c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80115e4:	20c8      	movs	r0, #200	@ 0xc8
 80115e6:	f7f2 fac9 	bl	8003b7c <HAL_Delay>
  return USBH_OK;
 80115ea:	2300      	movs	r3, #0
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	460b      	mov	r3, r1
 80115fe:	70fb      	strb	r3, [r7, #3]
 8011600:	4613      	mov	r3, r2
 8011602:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801160a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801160c:	78fa      	ldrb	r2, [r7, #3]
 801160e:	68f9      	ldr	r1, [r7, #12]
 8011610:	4613      	mov	r3, r2
 8011612:	011b      	lsls	r3, r3, #4
 8011614:	1a9b      	subs	r3, r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	440b      	add	r3, r1
 801161a:	3317      	adds	r3, #23
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d00a      	beq.n	8011638 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011622:	78fa      	ldrb	r2, [r7, #3]
 8011624:	68f9      	ldr	r1, [r7, #12]
 8011626:	4613      	mov	r3, r2
 8011628:	011b      	lsls	r3, r3, #4
 801162a:	1a9b      	subs	r3, r3, r2
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	440b      	add	r3, r1
 8011630:	333c      	adds	r3, #60	@ 0x3c
 8011632:	78ba      	ldrb	r2, [r7, #2]
 8011634:	701a      	strb	r2, [r3, #0]
 8011636:	e009      	b.n	801164c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011638:	78fa      	ldrb	r2, [r7, #3]
 801163a:	68f9      	ldr	r1, [r7, #12]
 801163c:	4613      	mov	r3, r2
 801163e:	011b      	lsls	r3, r3, #4
 8011640:	1a9b      	subs	r3, r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	440b      	add	r3, r1
 8011646:	333d      	adds	r3, #61	@ 0x3d
 8011648:	78ba      	ldrb	r2, [r7, #2]
 801164a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801164c:	2300      	movs	r3, #0
}
 801164e:	4618      	mov	r0, r3
 8011650:	3714      	adds	r7, #20
 8011652:	46bd      	mov	sp, r7
 8011654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011658:	4770      	bx	lr

0801165a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801165a:	b580      	push	{r7, lr}
 801165c:	b082      	sub	sp, #8
 801165e:	af00      	add	r7, sp, #0
 8011660:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f7f2 fa8a 	bl	8003b7c <HAL_Delay>
}
 8011668:	bf00      	nop
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011670:	b480      	push	{r7}
 8011672:	b085      	sub	sp, #20
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801167a:	2300      	movs	r3, #0
 801167c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801167e:	79fb      	ldrb	r3, [r7, #7]
 8011680:	2b03      	cmp	r3, #3
 8011682:	d817      	bhi.n	80116b4 <USBH_Get_USB_Status+0x44>
 8011684:	a201      	add	r2, pc, #4	@ (adr r2, 801168c <USBH_Get_USB_Status+0x1c>)
 8011686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801168a:	bf00      	nop
 801168c:	0801169d 	.word	0x0801169d
 8011690:	080116a3 	.word	0x080116a3
 8011694:	080116a9 	.word	0x080116a9
 8011698:	080116af 	.word	0x080116af
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801169c:	2300      	movs	r3, #0
 801169e:	73fb      	strb	r3, [r7, #15]
    break;
 80116a0:	e00b      	b.n	80116ba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80116a2:	2302      	movs	r3, #2
 80116a4:	73fb      	strb	r3, [r7, #15]
    break;
 80116a6:	e008      	b.n	80116ba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80116a8:	2301      	movs	r3, #1
 80116aa:	73fb      	strb	r3, [r7, #15]
    break;
 80116ac:	e005      	b.n	80116ba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80116ae:	2302      	movs	r3, #2
 80116b0:	73fb      	strb	r3, [r7, #15]
    break;
 80116b2:	e002      	b.n	80116ba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80116b4:	2302      	movs	r3, #2
 80116b6:	73fb      	strb	r3, [r7, #15]
    break;
 80116b8:	bf00      	nop
  }
  return usb_status;
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80116d6:	79fb      	ldrb	r3, [r7, #7]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d102      	bne.n	80116e2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80116dc:	2301      	movs	r3, #1
 80116de:	73fb      	strb	r3, [r7, #15]
 80116e0:	e001      	b.n	80116e6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80116e2:	2300      	movs	r3, #0
 80116e4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80116e6:	7bfb      	ldrb	r3, [r7, #15]
 80116e8:	461a      	mov	r2, r3
 80116ea:	2101      	movs	r1, #1
 80116ec:	4803      	ldr	r0, [pc, #12]	@ (80116fc <MX_DriverVbusFS+0x34>)
 80116ee:	f7f2 fd91 	bl	8004214 <HAL_GPIO_WritePin>
}
 80116f2:	bf00      	nop
 80116f4:	3710      	adds	r7, #16
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	40020800 	.word	0x40020800

08011700 <atof>:
 8011700:	2100      	movs	r1, #0
 8011702:	f000 bec5 	b.w	8012490 <strtod>

08011706 <atoi>:
 8011706:	220a      	movs	r2, #10
 8011708:	2100      	movs	r1, #0
 801170a:	f000 bf47 	b.w	801259c <strtol>
	...

08011710 <malloc>:
 8011710:	4b02      	ldr	r3, [pc, #8]	@ (801171c <malloc+0xc>)
 8011712:	4601      	mov	r1, r0
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	f000 b82d 	b.w	8011774 <_malloc_r>
 801171a:	bf00      	nop
 801171c:	2000040c 	.word	0x2000040c

08011720 <free>:
 8011720:	4b02      	ldr	r3, [pc, #8]	@ (801172c <free+0xc>)
 8011722:	4601      	mov	r1, r0
 8011724:	6818      	ldr	r0, [r3, #0]
 8011726:	f002 bd0f 	b.w	8014148 <_free_r>
 801172a:	bf00      	nop
 801172c:	2000040c 	.word	0x2000040c

08011730 <sbrk_aligned>:
 8011730:	b570      	push	{r4, r5, r6, lr}
 8011732:	4e0f      	ldr	r6, [pc, #60]	@ (8011770 <sbrk_aligned+0x40>)
 8011734:	460c      	mov	r4, r1
 8011736:	6831      	ldr	r1, [r6, #0]
 8011738:	4605      	mov	r5, r0
 801173a:	b911      	cbnz	r1, 8011742 <sbrk_aligned+0x12>
 801173c:	f001 fe1e 	bl	801337c <_sbrk_r>
 8011740:	6030      	str	r0, [r6, #0]
 8011742:	4621      	mov	r1, r4
 8011744:	4628      	mov	r0, r5
 8011746:	f001 fe19 	bl	801337c <_sbrk_r>
 801174a:	1c43      	adds	r3, r0, #1
 801174c:	d103      	bne.n	8011756 <sbrk_aligned+0x26>
 801174e:	f04f 34ff 	mov.w	r4, #4294967295
 8011752:	4620      	mov	r0, r4
 8011754:	bd70      	pop	{r4, r5, r6, pc}
 8011756:	1cc4      	adds	r4, r0, #3
 8011758:	f024 0403 	bic.w	r4, r4, #3
 801175c:	42a0      	cmp	r0, r4
 801175e:	d0f8      	beq.n	8011752 <sbrk_aligned+0x22>
 8011760:	1a21      	subs	r1, r4, r0
 8011762:	4628      	mov	r0, r5
 8011764:	f001 fe0a 	bl	801337c <_sbrk_r>
 8011768:	3001      	adds	r0, #1
 801176a:	d1f2      	bne.n	8011752 <sbrk_aligned+0x22>
 801176c:	e7ef      	b.n	801174e <sbrk_aligned+0x1e>
 801176e:	bf00      	nop
 8011770:	200136e4 	.word	0x200136e4

08011774 <_malloc_r>:
 8011774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011778:	1ccd      	adds	r5, r1, #3
 801177a:	f025 0503 	bic.w	r5, r5, #3
 801177e:	3508      	adds	r5, #8
 8011780:	2d0c      	cmp	r5, #12
 8011782:	bf38      	it	cc
 8011784:	250c      	movcc	r5, #12
 8011786:	2d00      	cmp	r5, #0
 8011788:	4606      	mov	r6, r0
 801178a:	db01      	blt.n	8011790 <_malloc_r+0x1c>
 801178c:	42a9      	cmp	r1, r5
 801178e:	d904      	bls.n	801179a <_malloc_r+0x26>
 8011790:	230c      	movs	r3, #12
 8011792:	6033      	str	r3, [r6, #0]
 8011794:	2000      	movs	r0, #0
 8011796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801179a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011870 <_malloc_r+0xfc>
 801179e:	f000 f869 	bl	8011874 <__malloc_lock>
 80117a2:	f8d8 3000 	ldr.w	r3, [r8]
 80117a6:	461c      	mov	r4, r3
 80117a8:	bb44      	cbnz	r4, 80117fc <_malloc_r+0x88>
 80117aa:	4629      	mov	r1, r5
 80117ac:	4630      	mov	r0, r6
 80117ae:	f7ff ffbf 	bl	8011730 <sbrk_aligned>
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	4604      	mov	r4, r0
 80117b6:	d158      	bne.n	801186a <_malloc_r+0xf6>
 80117b8:	f8d8 4000 	ldr.w	r4, [r8]
 80117bc:	4627      	mov	r7, r4
 80117be:	2f00      	cmp	r7, #0
 80117c0:	d143      	bne.n	801184a <_malloc_r+0xd6>
 80117c2:	2c00      	cmp	r4, #0
 80117c4:	d04b      	beq.n	801185e <_malloc_r+0xea>
 80117c6:	6823      	ldr	r3, [r4, #0]
 80117c8:	4639      	mov	r1, r7
 80117ca:	4630      	mov	r0, r6
 80117cc:	eb04 0903 	add.w	r9, r4, r3
 80117d0:	f001 fdd4 	bl	801337c <_sbrk_r>
 80117d4:	4581      	cmp	r9, r0
 80117d6:	d142      	bne.n	801185e <_malloc_r+0xea>
 80117d8:	6821      	ldr	r1, [r4, #0]
 80117da:	1a6d      	subs	r5, r5, r1
 80117dc:	4629      	mov	r1, r5
 80117de:	4630      	mov	r0, r6
 80117e0:	f7ff ffa6 	bl	8011730 <sbrk_aligned>
 80117e4:	3001      	adds	r0, #1
 80117e6:	d03a      	beq.n	801185e <_malloc_r+0xea>
 80117e8:	6823      	ldr	r3, [r4, #0]
 80117ea:	442b      	add	r3, r5
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	f8d8 3000 	ldr.w	r3, [r8]
 80117f2:	685a      	ldr	r2, [r3, #4]
 80117f4:	bb62      	cbnz	r2, 8011850 <_malloc_r+0xdc>
 80117f6:	f8c8 7000 	str.w	r7, [r8]
 80117fa:	e00f      	b.n	801181c <_malloc_r+0xa8>
 80117fc:	6822      	ldr	r2, [r4, #0]
 80117fe:	1b52      	subs	r2, r2, r5
 8011800:	d420      	bmi.n	8011844 <_malloc_r+0xd0>
 8011802:	2a0b      	cmp	r2, #11
 8011804:	d917      	bls.n	8011836 <_malloc_r+0xc2>
 8011806:	1961      	adds	r1, r4, r5
 8011808:	42a3      	cmp	r3, r4
 801180a:	6025      	str	r5, [r4, #0]
 801180c:	bf18      	it	ne
 801180e:	6059      	strne	r1, [r3, #4]
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	bf08      	it	eq
 8011814:	f8c8 1000 	streq.w	r1, [r8]
 8011818:	5162      	str	r2, [r4, r5]
 801181a:	604b      	str	r3, [r1, #4]
 801181c:	4630      	mov	r0, r6
 801181e:	f000 f82f 	bl	8011880 <__malloc_unlock>
 8011822:	f104 000b 	add.w	r0, r4, #11
 8011826:	1d23      	adds	r3, r4, #4
 8011828:	f020 0007 	bic.w	r0, r0, #7
 801182c:	1ac2      	subs	r2, r0, r3
 801182e:	bf1c      	itt	ne
 8011830:	1a1b      	subne	r3, r3, r0
 8011832:	50a3      	strne	r3, [r4, r2]
 8011834:	e7af      	b.n	8011796 <_malloc_r+0x22>
 8011836:	6862      	ldr	r2, [r4, #4]
 8011838:	42a3      	cmp	r3, r4
 801183a:	bf0c      	ite	eq
 801183c:	f8c8 2000 	streq.w	r2, [r8]
 8011840:	605a      	strne	r2, [r3, #4]
 8011842:	e7eb      	b.n	801181c <_malloc_r+0xa8>
 8011844:	4623      	mov	r3, r4
 8011846:	6864      	ldr	r4, [r4, #4]
 8011848:	e7ae      	b.n	80117a8 <_malloc_r+0x34>
 801184a:	463c      	mov	r4, r7
 801184c:	687f      	ldr	r7, [r7, #4]
 801184e:	e7b6      	b.n	80117be <_malloc_r+0x4a>
 8011850:	461a      	mov	r2, r3
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	42a3      	cmp	r3, r4
 8011856:	d1fb      	bne.n	8011850 <_malloc_r+0xdc>
 8011858:	2300      	movs	r3, #0
 801185a:	6053      	str	r3, [r2, #4]
 801185c:	e7de      	b.n	801181c <_malloc_r+0xa8>
 801185e:	230c      	movs	r3, #12
 8011860:	6033      	str	r3, [r6, #0]
 8011862:	4630      	mov	r0, r6
 8011864:	f000 f80c 	bl	8011880 <__malloc_unlock>
 8011868:	e794      	b.n	8011794 <_malloc_r+0x20>
 801186a:	6005      	str	r5, [r0, #0]
 801186c:	e7d6      	b.n	801181c <_malloc_r+0xa8>
 801186e:	bf00      	nop
 8011870:	200136e8 	.word	0x200136e8

08011874 <__malloc_lock>:
 8011874:	4801      	ldr	r0, [pc, #4]	@ (801187c <__malloc_lock+0x8>)
 8011876:	f001 bdce 	b.w	8013416 <__retarget_lock_acquire_recursive>
 801187a:	bf00      	nop
 801187c:	2001382c 	.word	0x2001382c

08011880 <__malloc_unlock>:
 8011880:	4801      	ldr	r0, [pc, #4]	@ (8011888 <__malloc_unlock+0x8>)
 8011882:	f001 bdc9 	b.w	8013418 <__retarget_lock_release_recursive>
 8011886:	bf00      	nop
 8011888:	2001382c 	.word	0x2001382c

0801188c <sulp>:
 801188c:	b570      	push	{r4, r5, r6, lr}
 801188e:	4604      	mov	r4, r0
 8011890:	460d      	mov	r5, r1
 8011892:	ec45 4b10 	vmov	d0, r4, r5
 8011896:	4616      	mov	r6, r2
 8011898:	f003 fb58 	bl	8014f4c <__ulp>
 801189c:	ec51 0b10 	vmov	r0, r1, d0
 80118a0:	b17e      	cbz	r6, 80118c2 <sulp+0x36>
 80118a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80118a6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	dd09      	ble.n	80118c2 <sulp+0x36>
 80118ae:	051b      	lsls	r3, r3, #20
 80118b0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80118b4:	2400      	movs	r4, #0
 80118b6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80118ba:	4622      	mov	r2, r4
 80118bc:	462b      	mov	r3, r5
 80118be:	f7ee fe9b 	bl	80005f8 <__aeabi_dmul>
 80118c2:	ec41 0b10 	vmov	d0, r0, r1
 80118c6:	bd70      	pop	{r4, r5, r6, pc}

080118c8 <_strtod_l>:
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	b09f      	sub	sp, #124	@ 0x7c
 80118ce:	460c      	mov	r4, r1
 80118d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80118d2:	2200      	movs	r2, #0
 80118d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80118d6:	9005      	str	r0, [sp, #20]
 80118d8:	f04f 0a00 	mov.w	sl, #0
 80118dc:	f04f 0b00 	mov.w	fp, #0
 80118e0:	460a      	mov	r2, r1
 80118e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80118e4:	7811      	ldrb	r1, [r2, #0]
 80118e6:	292b      	cmp	r1, #43	@ 0x2b
 80118e8:	d04a      	beq.n	8011980 <_strtod_l+0xb8>
 80118ea:	d838      	bhi.n	801195e <_strtod_l+0x96>
 80118ec:	290d      	cmp	r1, #13
 80118ee:	d832      	bhi.n	8011956 <_strtod_l+0x8e>
 80118f0:	2908      	cmp	r1, #8
 80118f2:	d832      	bhi.n	801195a <_strtod_l+0x92>
 80118f4:	2900      	cmp	r1, #0
 80118f6:	d03b      	beq.n	8011970 <_strtod_l+0xa8>
 80118f8:	2200      	movs	r2, #0
 80118fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80118fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80118fe:	782a      	ldrb	r2, [r5, #0]
 8011900:	2a30      	cmp	r2, #48	@ 0x30
 8011902:	f040 80b2 	bne.w	8011a6a <_strtod_l+0x1a2>
 8011906:	786a      	ldrb	r2, [r5, #1]
 8011908:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801190c:	2a58      	cmp	r2, #88	@ 0x58
 801190e:	d16e      	bne.n	80119ee <_strtod_l+0x126>
 8011910:	9302      	str	r3, [sp, #8]
 8011912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011914:	9301      	str	r3, [sp, #4]
 8011916:	ab1a      	add	r3, sp, #104	@ 0x68
 8011918:	9300      	str	r3, [sp, #0]
 801191a:	4a8f      	ldr	r2, [pc, #572]	@ (8011b58 <_strtod_l+0x290>)
 801191c:	9805      	ldr	r0, [sp, #20]
 801191e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011920:	a919      	add	r1, sp, #100	@ 0x64
 8011922:	f002 fcc3 	bl	80142ac <__gethex>
 8011926:	f010 060f 	ands.w	r6, r0, #15
 801192a:	4604      	mov	r4, r0
 801192c:	d005      	beq.n	801193a <_strtod_l+0x72>
 801192e:	2e06      	cmp	r6, #6
 8011930:	d128      	bne.n	8011984 <_strtod_l+0xbc>
 8011932:	3501      	adds	r5, #1
 8011934:	2300      	movs	r3, #0
 8011936:	9519      	str	r5, [sp, #100]	@ 0x64
 8011938:	930e      	str	r3, [sp, #56]	@ 0x38
 801193a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801193c:	2b00      	cmp	r3, #0
 801193e:	f040 858e 	bne.w	801245e <_strtod_l+0xb96>
 8011942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011944:	b1cb      	cbz	r3, 801197a <_strtod_l+0xb2>
 8011946:	4652      	mov	r2, sl
 8011948:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801194c:	ec43 2b10 	vmov	d0, r2, r3
 8011950:	b01f      	add	sp, #124	@ 0x7c
 8011952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011956:	2920      	cmp	r1, #32
 8011958:	d1ce      	bne.n	80118f8 <_strtod_l+0x30>
 801195a:	3201      	adds	r2, #1
 801195c:	e7c1      	b.n	80118e2 <_strtod_l+0x1a>
 801195e:	292d      	cmp	r1, #45	@ 0x2d
 8011960:	d1ca      	bne.n	80118f8 <_strtod_l+0x30>
 8011962:	2101      	movs	r1, #1
 8011964:	910e      	str	r1, [sp, #56]	@ 0x38
 8011966:	1c51      	adds	r1, r2, #1
 8011968:	9119      	str	r1, [sp, #100]	@ 0x64
 801196a:	7852      	ldrb	r2, [r2, #1]
 801196c:	2a00      	cmp	r2, #0
 801196e:	d1c5      	bne.n	80118fc <_strtod_l+0x34>
 8011970:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011972:	9419      	str	r4, [sp, #100]	@ 0x64
 8011974:	2b00      	cmp	r3, #0
 8011976:	f040 8570 	bne.w	801245a <_strtod_l+0xb92>
 801197a:	4652      	mov	r2, sl
 801197c:	465b      	mov	r3, fp
 801197e:	e7e5      	b.n	801194c <_strtod_l+0x84>
 8011980:	2100      	movs	r1, #0
 8011982:	e7ef      	b.n	8011964 <_strtod_l+0x9c>
 8011984:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011986:	b13a      	cbz	r2, 8011998 <_strtod_l+0xd0>
 8011988:	2135      	movs	r1, #53	@ 0x35
 801198a:	a81c      	add	r0, sp, #112	@ 0x70
 801198c:	f003 fbd8 	bl	8015140 <__copybits>
 8011990:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011992:	9805      	ldr	r0, [sp, #20]
 8011994:	f002 ffae 	bl	80148f4 <_Bfree>
 8011998:	3e01      	subs	r6, #1
 801199a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801199c:	2e04      	cmp	r6, #4
 801199e:	d806      	bhi.n	80119ae <_strtod_l+0xe6>
 80119a0:	e8df f006 	tbb	[pc, r6]
 80119a4:	201d0314 	.word	0x201d0314
 80119a8:	14          	.byte	0x14
 80119a9:	00          	.byte	0x00
 80119aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80119ae:	05e1      	lsls	r1, r4, #23
 80119b0:	bf48      	it	mi
 80119b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80119b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80119ba:	0d1b      	lsrs	r3, r3, #20
 80119bc:	051b      	lsls	r3, r3, #20
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1bb      	bne.n	801193a <_strtod_l+0x72>
 80119c2:	f001 fcfd 	bl	80133c0 <__errno>
 80119c6:	2322      	movs	r3, #34	@ 0x22
 80119c8:	6003      	str	r3, [r0, #0]
 80119ca:	e7b6      	b.n	801193a <_strtod_l+0x72>
 80119cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80119d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80119d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80119d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80119dc:	e7e7      	b.n	80119ae <_strtod_l+0xe6>
 80119de:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8011b60 <_strtod_l+0x298>
 80119e2:	e7e4      	b.n	80119ae <_strtod_l+0xe6>
 80119e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80119e8:	f04f 3aff 	mov.w	sl, #4294967295
 80119ec:	e7df      	b.n	80119ae <_strtod_l+0xe6>
 80119ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80119f0:	1c5a      	adds	r2, r3, #1
 80119f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80119f4:	785b      	ldrb	r3, [r3, #1]
 80119f6:	2b30      	cmp	r3, #48	@ 0x30
 80119f8:	d0f9      	beq.n	80119ee <_strtod_l+0x126>
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d09d      	beq.n	801193a <_strtod_l+0x72>
 80119fe:	2301      	movs	r3, #1
 8011a00:	2700      	movs	r7, #0
 8011a02:	9308      	str	r3, [sp, #32]
 8011a04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a06:	930c      	str	r3, [sp, #48]	@ 0x30
 8011a08:	970b      	str	r7, [sp, #44]	@ 0x2c
 8011a0a:	46b9      	mov	r9, r7
 8011a0c:	220a      	movs	r2, #10
 8011a0e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011a10:	7805      	ldrb	r5, [r0, #0]
 8011a12:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011a16:	b2d9      	uxtb	r1, r3
 8011a18:	2909      	cmp	r1, #9
 8011a1a:	d928      	bls.n	8011a6e <_strtod_l+0x1a6>
 8011a1c:	494f      	ldr	r1, [pc, #316]	@ (8011b5c <_strtod_l+0x294>)
 8011a1e:	2201      	movs	r2, #1
 8011a20:	f001 fba8 	bl	8013174 <strncmp>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d032      	beq.n	8011a8e <_strtod_l+0x1c6>
 8011a28:	2000      	movs	r0, #0
 8011a2a:	462a      	mov	r2, r5
 8011a2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a2e:	464d      	mov	r5, r9
 8011a30:	4603      	mov	r3, r0
 8011a32:	2a65      	cmp	r2, #101	@ 0x65
 8011a34:	d001      	beq.n	8011a3a <_strtod_l+0x172>
 8011a36:	2a45      	cmp	r2, #69	@ 0x45
 8011a38:	d114      	bne.n	8011a64 <_strtod_l+0x19c>
 8011a3a:	b91d      	cbnz	r5, 8011a44 <_strtod_l+0x17c>
 8011a3c:	9a08      	ldr	r2, [sp, #32]
 8011a3e:	4302      	orrs	r2, r0
 8011a40:	d096      	beq.n	8011970 <_strtod_l+0xa8>
 8011a42:	2500      	movs	r5, #0
 8011a44:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011a46:	1c62      	adds	r2, r4, #1
 8011a48:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a4a:	7862      	ldrb	r2, [r4, #1]
 8011a4c:	2a2b      	cmp	r2, #43	@ 0x2b
 8011a4e:	d07a      	beq.n	8011b46 <_strtod_l+0x27e>
 8011a50:	2a2d      	cmp	r2, #45	@ 0x2d
 8011a52:	d07e      	beq.n	8011b52 <_strtod_l+0x28a>
 8011a54:	f04f 0c00 	mov.w	ip, #0
 8011a58:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011a5c:	2909      	cmp	r1, #9
 8011a5e:	f240 8085 	bls.w	8011b6c <_strtod_l+0x2a4>
 8011a62:	9419      	str	r4, [sp, #100]	@ 0x64
 8011a64:	f04f 0800 	mov.w	r8, #0
 8011a68:	e0a5      	b.n	8011bb6 <_strtod_l+0x2ee>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e7c8      	b.n	8011a00 <_strtod_l+0x138>
 8011a6e:	f1b9 0f08 	cmp.w	r9, #8
 8011a72:	bfd8      	it	le
 8011a74:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8011a76:	f100 0001 	add.w	r0, r0, #1
 8011a7a:	bfda      	itte	le
 8011a7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011a80:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8011a82:	fb02 3707 	mlagt	r7, r2, r7, r3
 8011a86:	f109 0901 	add.w	r9, r9, #1
 8011a8a:	9019      	str	r0, [sp, #100]	@ 0x64
 8011a8c:	e7bf      	b.n	8011a0e <_strtod_l+0x146>
 8011a8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a90:	1c5a      	adds	r2, r3, #1
 8011a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a94:	785a      	ldrb	r2, [r3, #1]
 8011a96:	f1b9 0f00 	cmp.w	r9, #0
 8011a9a:	d03b      	beq.n	8011b14 <_strtod_l+0x24c>
 8011a9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8011a9e:	464d      	mov	r5, r9
 8011aa0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011aa4:	2b09      	cmp	r3, #9
 8011aa6:	d912      	bls.n	8011ace <_strtod_l+0x206>
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e7c2      	b.n	8011a32 <_strtod_l+0x16a>
 8011aac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011aae:	1c5a      	adds	r2, r3, #1
 8011ab0:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ab2:	785a      	ldrb	r2, [r3, #1]
 8011ab4:	3001      	adds	r0, #1
 8011ab6:	2a30      	cmp	r2, #48	@ 0x30
 8011ab8:	d0f8      	beq.n	8011aac <_strtod_l+0x1e4>
 8011aba:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011abe:	2b08      	cmp	r3, #8
 8011ac0:	f200 84d2 	bhi.w	8012468 <_strtod_l+0xba0>
 8011ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ac6:	900a      	str	r0, [sp, #40]	@ 0x28
 8011ac8:	2000      	movs	r0, #0
 8011aca:	930c      	str	r3, [sp, #48]	@ 0x30
 8011acc:	4605      	mov	r5, r0
 8011ace:	3a30      	subs	r2, #48	@ 0x30
 8011ad0:	f100 0301 	add.w	r3, r0, #1
 8011ad4:	d018      	beq.n	8011b08 <_strtod_l+0x240>
 8011ad6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011ad8:	4419      	add	r1, r3
 8011ada:	910a      	str	r1, [sp, #40]	@ 0x28
 8011adc:	462e      	mov	r6, r5
 8011ade:	f04f 0e0a 	mov.w	lr, #10
 8011ae2:	1c71      	adds	r1, r6, #1
 8011ae4:	eba1 0c05 	sub.w	ip, r1, r5
 8011ae8:	4563      	cmp	r3, ip
 8011aea:	dc15      	bgt.n	8011b18 <_strtod_l+0x250>
 8011aec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8011af0:	182b      	adds	r3, r5, r0
 8011af2:	2b08      	cmp	r3, #8
 8011af4:	f105 0501 	add.w	r5, r5, #1
 8011af8:	4405      	add	r5, r0
 8011afa:	dc1a      	bgt.n	8011b32 <_strtod_l+0x26a>
 8011afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011afe:	230a      	movs	r3, #10
 8011b00:	fb03 2301 	mla	r3, r3, r1, r2
 8011b04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b06:	2300      	movs	r3, #0
 8011b08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b0a:	1c51      	adds	r1, r2, #1
 8011b0c:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b0e:	7852      	ldrb	r2, [r2, #1]
 8011b10:	4618      	mov	r0, r3
 8011b12:	e7c5      	b.n	8011aa0 <_strtod_l+0x1d8>
 8011b14:	4648      	mov	r0, r9
 8011b16:	e7ce      	b.n	8011ab6 <_strtod_l+0x1ee>
 8011b18:	2e08      	cmp	r6, #8
 8011b1a:	dc05      	bgt.n	8011b28 <_strtod_l+0x260>
 8011b1c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8011b1e:	fb0e f606 	mul.w	r6, lr, r6
 8011b22:	960b      	str	r6, [sp, #44]	@ 0x2c
 8011b24:	460e      	mov	r6, r1
 8011b26:	e7dc      	b.n	8011ae2 <_strtod_l+0x21a>
 8011b28:	2910      	cmp	r1, #16
 8011b2a:	bfd8      	it	le
 8011b2c:	fb0e f707 	mulle.w	r7, lr, r7
 8011b30:	e7f8      	b.n	8011b24 <_strtod_l+0x25c>
 8011b32:	2b0f      	cmp	r3, #15
 8011b34:	bfdc      	itt	le
 8011b36:	230a      	movle	r3, #10
 8011b38:	fb03 2707 	mlale	r7, r3, r7, r2
 8011b3c:	e7e3      	b.n	8011b06 <_strtod_l+0x23e>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b42:	2301      	movs	r3, #1
 8011b44:	e77a      	b.n	8011a3c <_strtod_l+0x174>
 8011b46:	f04f 0c00 	mov.w	ip, #0
 8011b4a:	1ca2      	adds	r2, r4, #2
 8011b4c:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b4e:	78a2      	ldrb	r2, [r4, #2]
 8011b50:	e782      	b.n	8011a58 <_strtod_l+0x190>
 8011b52:	f04f 0c01 	mov.w	ip, #1
 8011b56:	e7f8      	b.n	8011b4a <_strtod_l+0x282>
 8011b58:	0801693c 	.word	0x0801693c
 8011b5c:	080166fc 	.word	0x080166fc
 8011b60:	7ff00000 	.word	0x7ff00000
 8011b64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b66:	1c51      	adds	r1, r2, #1
 8011b68:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b6a:	7852      	ldrb	r2, [r2, #1]
 8011b6c:	2a30      	cmp	r2, #48	@ 0x30
 8011b6e:	d0f9      	beq.n	8011b64 <_strtod_l+0x29c>
 8011b70:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011b74:	2908      	cmp	r1, #8
 8011b76:	f63f af75 	bhi.w	8011a64 <_strtod_l+0x19c>
 8011b7a:	3a30      	subs	r2, #48	@ 0x30
 8011b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b80:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011b82:	f04f 080a 	mov.w	r8, #10
 8011b86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011b88:	1c56      	adds	r6, r2, #1
 8011b8a:	9619      	str	r6, [sp, #100]	@ 0x64
 8011b8c:	7852      	ldrb	r2, [r2, #1]
 8011b8e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011b92:	f1be 0f09 	cmp.w	lr, #9
 8011b96:	d939      	bls.n	8011c0c <_strtod_l+0x344>
 8011b98:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011b9a:	1a76      	subs	r6, r6, r1
 8011b9c:	2e08      	cmp	r6, #8
 8011b9e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011ba2:	dc03      	bgt.n	8011bac <_strtod_l+0x2e4>
 8011ba4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ba6:	4588      	cmp	r8, r1
 8011ba8:	bfa8      	it	ge
 8011baa:	4688      	movge	r8, r1
 8011bac:	f1bc 0f00 	cmp.w	ip, #0
 8011bb0:	d001      	beq.n	8011bb6 <_strtod_l+0x2ee>
 8011bb2:	f1c8 0800 	rsb	r8, r8, #0
 8011bb6:	2d00      	cmp	r5, #0
 8011bb8:	d14e      	bne.n	8011c58 <_strtod_l+0x390>
 8011bba:	9908      	ldr	r1, [sp, #32]
 8011bbc:	4308      	orrs	r0, r1
 8011bbe:	f47f aebc 	bne.w	801193a <_strtod_l+0x72>
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f47f aed4 	bne.w	8011970 <_strtod_l+0xa8>
 8011bc8:	2a69      	cmp	r2, #105	@ 0x69
 8011bca:	d028      	beq.n	8011c1e <_strtod_l+0x356>
 8011bcc:	dc25      	bgt.n	8011c1a <_strtod_l+0x352>
 8011bce:	2a49      	cmp	r2, #73	@ 0x49
 8011bd0:	d025      	beq.n	8011c1e <_strtod_l+0x356>
 8011bd2:	2a4e      	cmp	r2, #78	@ 0x4e
 8011bd4:	f47f aecc 	bne.w	8011970 <_strtod_l+0xa8>
 8011bd8:	499a      	ldr	r1, [pc, #616]	@ (8011e44 <_strtod_l+0x57c>)
 8011bda:	a819      	add	r0, sp, #100	@ 0x64
 8011bdc:	f002 fd88 	bl	80146f0 <__match>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	f43f aec5 	beq.w	8011970 <_strtod_l+0xa8>
 8011be6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	2b28      	cmp	r3, #40	@ 0x28
 8011bec:	d12e      	bne.n	8011c4c <_strtod_l+0x384>
 8011bee:	4996      	ldr	r1, [pc, #600]	@ (8011e48 <_strtod_l+0x580>)
 8011bf0:	aa1c      	add	r2, sp, #112	@ 0x70
 8011bf2:	a819      	add	r0, sp, #100	@ 0x64
 8011bf4:	f002 fd90 	bl	8014718 <__hexnan>
 8011bf8:	2805      	cmp	r0, #5
 8011bfa:	d127      	bne.n	8011c4c <_strtod_l+0x384>
 8011bfc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011bfe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011c02:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011c06:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011c0a:	e696      	b.n	801193a <_strtod_l+0x72>
 8011c0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011c0e:	fb08 2101 	mla	r1, r8, r1, r2
 8011c12:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011c16:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c18:	e7b5      	b.n	8011b86 <_strtod_l+0x2be>
 8011c1a:	2a6e      	cmp	r2, #110	@ 0x6e
 8011c1c:	e7da      	b.n	8011bd4 <_strtod_l+0x30c>
 8011c1e:	498b      	ldr	r1, [pc, #556]	@ (8011e4c <_strtod_l+0x584>)
 8011c20:	a819      	add	r0, sp, #100	@ 0x64
 8011c22:	f002 fd65 	bl	80146f0 <__match>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	f43f aea2 	beq.w	8011970 <_strtod_l+0xa8>
 8011c2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c2e:	4988      	ldr	r1, [pc, #544]	@ (8011e50 <_strtod_l+0x588>)
 8011c30:	3b01      	subs	r3, #1
 8011c32:	a819      	add	r0, sp, #100	@ 0x64
 8011c34:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c36:	f002 fd5b 	bl	80146f0 <__match>
 8011c3a:	b910      	cbnz	r0, 8011c42 <_strtod_l+0x37a>
 8011c3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c3e:	3301      	adds	r3, #1
 8011c40:	9319      	str	r3, [sp, #100]	@ 0x64
 8011c42:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8011e60 <_strtod_l+0x598>
 8011c46:	f04f 0a00 	mov.w	sl, #0
 8011c4a:	e676      	b.n	801193a <_strtod_l+0x72>
 8011c4c:	4881      	ldr	r0, [pc, #516]	@ (8011e54 <_strtod_l+0x58c>)
 8011c4e:	f001 fbfb 	bl	8013448 <nan>
 8011c52:	ec5b ab10 	vmov	sl, fp, d0
 8011c56:	e670      	b.n	801193a <_strtod_l+0x72>
 8011c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c5a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8011c5c:	eba8 0303 	sub.w	r3, r8, r3
 8011c60:	f1b9 0f00 	cmp.w	r9, #0
 8011c64:	bf08      	it	eq
 8011c66:	46a9      	moveq	r9, r5
 8011c68:	2d10      	cmp	r5, #16
 8011c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c6c:	462c      	mov	r4, r5
 8011c6e:	bfa8      	it	ge
 8011c70:	2410      	movge	r4, #16
 8011c72:	f7ee fc47 	bl	8000504 <__aeabi_ui2d>
 8011c76:	2d09      	cmp	r5, #9
 8011c78:	4682      	mov	sl, r0
 8011c7a:	468b      	mov	fp, r1
 8011c7c:	dc13      	bgt.n	8011ca6 <_strtod_l+0x3de>
 8011c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	f43f ae5a 	beq.w	801193a <_strtod_l+0x72>
 8011c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c88:	dd78      	ble.n	8011d7c <_strtod_l+0x4b4>
 8011c8a:	2b16      	cmp	r3, #22
 8011c8c:	dc5f      	bgt.n	8011d4e <_strtod_l+0x486>
 8011c8e:	4972      	ldr	r1, [pc, #456]	@ (8011e58 <_strtod_l+0x590>)
 8011c90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011c94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c98:	4652      	mov	r2, sl
 8011c9a:	465b      	mov	r3, fp
 8011c9c:	f7ee fcac 	bl	80005f8 <__aeabi_dmul>
 8011ca0:	4682      	mov	sl, r0
 8011ca2:	468b      	mov	fp, r1
 8011ca4:	e649      	b.n	801193a <_strtod_l+0x72>
 8011ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8011e58 <_strtod_l+0x590>)
 8011ca8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011cac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011cb0:	f7ee fca2 	bl	80005f8 <__aeabi_dmul>
 8011cb4:	4682      	mov	sl, r0
 8011cb6:	4638      	mov	r0, r7
 8011cb8:	468b      	mov	fp, r1
 8011cba:	f7ee fc23 	bl	8000504 <__aeabi_ui2d>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	4650      	mov	r0, sl
 8011cc4:	4659      	mov	r1, fp
 8011cc6:	f7ee fae1 	bl	800028c <__adddf3>
 8011cca:	2d0f      	cmp	r5, #15
 8011ccc:	4682      	mov	sl, r0
 8011cce:	468b      	mov	fp, r1
 8011cd0:	ddd5      	ble.n	8011c7e <_strtod_l+0x3b6>
 8011cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011cd4:	1b2c      	subs	r4, r5, r4
 8011cd6:	441c      	add	r4, r3
 8011cd8:	2c00      	cmp	r4, #0
 8011cda:	f340 8093 	ble.w	8011e04 <_strtod_l+0x53c>
 8011cde:	f014 030f 	ands.w	r3, r4, #15
 8011ce2:	d00a      	beq.n	8011cfa <_strtod_l+0x432>
 8011ce4:	495c      	ldr	r1, [pc, #368]	@ (8011e58 <_strtod_l+0x590>)
 8011ce6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011cea:	4652      	mov	r2, sl
 8011cec:	465b      	mov	r3, fp
 8011cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cf2:	f7ee fc81 	bl	80005f8 <__aeabi_dmul>
 8011cf6:	4682      	mov	sl, r0
 8011cf8:	468b      	mov	fp, r1
 8011cfa:	f034 040f 	bics.w	r4, r4, #15
 8011cfe:	d073      	beq.n	8011de8 <_strtod_l+0x520>
 8011d00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011d04:	dd49      	ble.n	8011d9a <_strtod_l+0x4d2>
 8011d06:	2400      	movs	r4, #0
 8011d08:	46a0      	mov	r8, r4
 8011d0a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011d0c:	46a1      	mov	r9, r4
 8011d0e:	9a05      	ldr	r2, [sp, #20]
 8011d10:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8011e60 <_strtod_l+0x598>
 8011d14:	2322      	movs	r3, #34	@ 0x22
 8011d16:	6013      	str	r3, [r2, #0]
 8011d18:	f04f 0a00 	mov.w	sl, #0
 8011d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	f43f ae0b 	beq.w	801193a <_strtod_l+0x72>
 8011d24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011d26:	9805      	ldr	r0, [sp, #20]
 8011d28:	f002 fde4 	bl	80148f4 <_Bfree>
 8011d2c:	9805      	ldr	r0, [sp, #20]
 8011d2e:	4649      	mov	r1, r9
 8011d30:	f002 fde0 	bl	80148f4 <_Bfree>
 8011d34:	9805      	ldr	r0, [sp, #20]
 8011d36:	4641      	mov	r1, r8
 8011d38:	f002 fddc 	bl	80148f4 <_Bfree>
 8011d3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d3e:	9805      	ldr	r0, [sp, #20]
 8011d40:	f002 fdd8 	bl	80148f4 <_Bfree>
 8011d44:	9805      	ldr	r0, [sp, #20]
 8011d46:	4621      	mov	r1, r4
 8011d48:	f002 fdd4 	bl	80148f4 <_Bfree>
 8011d4c:	e5f5      	b.n	801193a <_strtod_l+0x72>
 8011d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011d54:	4293      	cmp	r3, r2
 8011d56:	dbbc      	blt.n	8011cd2 <_strtod_l+0x40a>
 8011d58:	4c3f      	ldr	r4, [pc, #252]	@ (8011e58 <_strtod_l+0x590>)
 8011d5a:	f1c5 050f 	rsb	r5, r5, #15
 8011d5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011d62:	4652      	mov	r2, sl
 8011d64:	465b      	mov	r3, fp
 8011d66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d6a:	f7ee fc45 	bl	80005f8 <__aeabi_dmul>
 8011d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d70:	1b5d      	subs	r5, r3, r5
 8011d72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011d76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d7a:	e78f      	b.n	8011c9c <_strtod_l+0x3d4>
 8011d7c:	3316      	adds	r3, #22
 8011d7e:	dba8      	blt.n	8011cd2 <_strtod_l+0x40a>
 8011d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d82:	eba3 0808 	sub.w	r8, r3, r8
 8011d86:	4b34      	ldr	r3, [pc, #208]	@ (8011e58 <_strtod_l+0x590>)
 8011d88:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011d8c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011d90:	4650      	mov	r0, sl
 8011d92:	4659      	mov	r1, fp
 8011d94:	f7ee fd5a 	bl	800084c <__aeabi_ddiv>
 8011d98:	e782      	b.n	8011ca0 <_strtod_l+0x3d8>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	4f2f      	ldr	r7, [pc, #188]	@ (8011e5c <_strtod_l+0x594>)
 8011d9e:	1124      	asrs	r4, r4, #4
 8011da0:	4650      	mov	r0, sl
 8011da2:	4659      	mov	r1, fp
 8011da4:	461e      	mov	r6, r3
 8011da6:	2c01      	cmp	r4, #1
 8011da8:	dc21      	bgt.n	8011dee <_strtod_l+0x526>
 8011daa:	b10b      	cbz	r3, 8011db0 <_strtod_l+0x4e8>
 8011dac:	4682      	mov	sl, r0
 8011dae:	468b      	mov	fp, r1
 8011db0:	492a      	ldr	r1, [pc, #168]	@ (8011e5c <_strtod_l+0x594>)
 8011db2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011db6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011dba:	4652      	mov	r2, sl
 8011dbc:	465b      	mov	r3, fp
 8011dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dc2:	f7ee fc19 	bl	80005f8 <__aeabi_dmul>
 8011dc6:	4b26      	ldr	r3, [pc, #152]	@ (8011e60 <_strtod_l+0x598>)
 8011dc8:	460a      	mov	r2, r1
 8011dca:	400b      	ands	r3, r1
 8011dcc:	4925      	ldr	r1, [pc, #148]	@ (8011e64 <_strtod_l+0x59c>)
 8011dce:	428b      	cmp	r3, r1
 8011dd0:	4682      	mov	sl, r0
 8011dd2:	d898      	bhi.n	8011d06 <_strtod_l+0x43e>
 8011dd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011dd8:	428b      	cmp	r3, r1
 8011dda:	bf86      	itte	hi
 8011ddc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8011e68 <_strtod_l+0x5a0>
 8011de0:	f04f 3aff 	movhi.w	sl, #4294967295
 8011de4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011de8:	2300      	movs	r3, #0
 8011dea:	9308      	str	r3, [sp, #32]
 8011dec:	e076      	b.n	8011edc <_strtod_l+0x614>
 8011dee:	07e2      	lsls	r2, r4, #31
 8011df0:	d504      	bpl.n	8011dfc <_strtod_l+0x534>
 8011df2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011df6:	f7ee fbff 	bl	80005f8 <__aeabi_dmul>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	3601      	adds	r6, #1
 8011dfe:	1064      	asrs	r4, r4, #1
 8011e00:	3708      	adds	r7, #8
 8011e02:	e7d0      	b.n	8011da6 <_strtod_l+0x4de>
 8011e04:	d0f0      	beq.n	8011de8 <_strtod_l+0x520>
 8011e06:	4264      	negs	r4, r4
 8011e08:	f014 020f 	ands.w	r2, r4, #15
 8011e0c:	d00a      	beq.n	8011e24 <_strtod_l+0x55c>
 8011e0e:	4b12      	ldr	r3, [pc, #72]	@ (8011e58 <_strtod_l+0x590>)
 8011e10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011e14:	4650      	mov	r0, sl
 8011e16:	4659      	mov	r1, fp
 8011e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1c:	f7ee fd16 	bl	800084c <__aeabi_ddiv>
 8011e20:	4682      	mov	sl, r0
 8011e22:	468b      	mov	fp, r1
 8011e24:	1124      	asrs	r4, r4, #4
 8011e26:	d0df      	beq.n	8011de8 <_strtod_l+0x520>
 8011e28:	2c1f      	cmp	r4, #31
 8011e2a:	dd1f      	ble.n	8011e6c <_strtod_l+0x5a4>
 8011e2c:	2400      	movs	r4, #0
 8011e2e:	46a0      	mov	r8, r4
 8011e30:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011e32:	46a1      	mov	r9, r4
 8011e34:	9a05      	ldr	r2, [sp, #20]
 8011e36:	2322      	movs	r3, #34	@ 0x22
 8011e38:	f04f 0a00 	mov.w	sl, #0
 8011e3c:	f04f 0b00 	mov.w	fp, #0
 8011e40:	6013      	str	r3, [r2, #0]
 8011e42:	e76b      	b.n	8011d1c <_strtod_l+0x454>
 8011e44:	0801670b 	.word	0x0801670b
 8011e48:	08016928 	.word	0x08016928
 8011e4c:	08016703 	.word	0x08016703
 8011e50:	080167ea 	.word	0x080167ea
 8011e54:	080167e6 	.word	0x080167e6
 8011e58:	08016ab0 	.word	0x08016ab0
 8011e5c:	08016a88 	.word	0x08016a88
 8011e60:	7ff00000 	.word	0x7ff00000
 8011e64:	7ca00000 	.word	0x7ca00000
 8011e68:	7fefffff 	.word	0x7fefffff
 8011e6c:	f014 0310 	ands.w	r3, r4, #16
 8011e70:	bf18      	it	ne
 8011e72:	236a      	movne	r3, #106	@ 0x6a
 8011e74:	4ea9      	ldr	r6, [pc, #676]	@ (801211c <_strtod_l+0x854>)
 8011e76:	9308      	str	r3, [sp, #32]
 8011e78:	4650      	mov	r0, sl
 8011e7a:	4659      	mov	r1, fp
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	07e7      	lsls	r7, r4, #31
 8011e80:	d504      	bpl.n	8011e8c <_strtod_l+0x5c4>
 8011e82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e86:	f7ee fbb7 	bl	80005f8 <__aeabi_dmul>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	1064      	asrs	r4, r4, #1
 8011e8e:	f106 0608 	add.w	r6, r6, #8
 8011e92:	d1f4      	bne.n	8011e7e <_strtod_l+0x5b6>
 8011e94:	b10b      	cbz	r3, 8011e9a <_strtod_l+0x5d2>
 8011e96:	4682      	mov	sl, r0
 8011e98:	468b      	mov	fp, r1
 8011e9a:	9b08      	ldr	r3, [sp, #32]
 8011e9c:	b1b3      	cbz	r3, 8011ecc <_strtod_l+0x604>
 8011e9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011ea2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	4659      	mov	r1, fp
 8011eaa:	dd0f      	ble.n	8011ecc <_strtod_l+0x604>
 8011eac:	2b1f      	cmp	r3, #31
 8011eae:	dd56      	ble.n	8011f5e <_strtod_l+0x696>
 8011eb0:	2b34      	cmp	r3, #52	@ 0x34
 8011eb2:	bfde      	ittt	le
 8011eb4:	f04f 33ff 	movle.w	r3, #4294967295
 8011eb8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8011ebc:	4093      	lslle	r3, r2
 8011ebe:	f04f 0a00 	mov.w	sl, #0
 8011ec2:	bfcc      	ite	gt
 8011ec4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011ec8:	ea03 0b01 	andle.w	fp, r3, r1
 8011ecc:	2200      	movs	r2, #0
 8011ece:	2300      	movs	r3, #0
 8011ed0:	4650      	mov	r0, sl
 8011ed2:	4659      	mov	r1, fp
 8011ed4:	f7ee fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	d1a7      	bne.n	8011e2c <_strtod_l+0x564>
 8011edc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ede:	9300      	str	r3, [sp, #0]
 8011ee0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011ee2:	9805      	ldr	r0, [sp, #20]
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	464a      	mov	r2, r9
 8011ee8:	f002 fd6c 	bl	80149c4 <__s2b>
 8011eec:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011eee:	2800      	cmp	r0, #0
 8011ef0:	f43f af09 	beq.w	8011d06 <_strtod_l+0x43e>
 8011ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ef6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ef8:	2a00      	cmp	r2, #0
 8011efa:	eba3 0308 	sub.w	r3, r3, r8
 8011efe:	bfa8      	it	ge
 8011f00:	2300      	movge	r3, #0
 8011f02:	9312      	str	r3, [sp, #72]	@ 0x48
 8011f04:	2400      	movs	r4, #0
 8011f06:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011f0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8011f0c:	46a0      	mov	r8, r4
 8011f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f10:	9805      	ldr	r0, [sp, #20]
 8011f12:	6859      	ldr	r1, [r3, #4]
 8011f14:	f002 fcae 	bl	8014874 <_Balloc>
 8011f18:	4681      	mov	r9, r0
 8011f1a:	2800      	cmp	r0, #0
 8011f1c:	f43f aef7 	beq.w	8011d0e <_strtod_l+0x446>
 8011f20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f22:	691a      	ldr	r2, [r3, #16]
 8011f24:	3202      	adds	r2, #2
 8011f26:	f103 010c 	add.w	r1, r3, #12
 8011f2a:	0092      	lsls	r2, r2, #2
 8011f2c:	300c      	adds	r0, #12
 8011f2e:	f001 fa7c 	bl	801342a <memcpy>
 8011f32:	ec4b ab10 	vmov	d0, sl, fp
 8011f36:	9805      	ldr	r0, [sp, #20]
 8011f38:	aa1c      	add	r2, sp, #112	@ 0x70
 8011f3a:	a91b      	add	r1, sp, #108	@ 0x6c
 8011f3c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8011f40:	f003 f874 	bl	801502c <__d2b>
 8011f44:	901a      	str	r0, [sp, #104]	@ 0x68
 8011f46:	2800      	cmp	r0, #0
 8011f48:	f43f aee1 	beq.w	8011d0e <_strtod_l+0x446>
 8011f4c:	9805      	ldr	r0, [sp, #20]
 8011f4e:	2101      	movs	r1, #1
 8011f50:	f002 fdce 	bl	8014af0 <__i2b>
 8011f54:	4680      	mov	r8, r0
 8011f56:	b948      	cbnz	r0, 8011f6c <_strtod_l+0x6a4>
 8011f58:	f04f 0800 	mov.w	r8, #0
 8011f5c:	e6d7      	b.n	8011d0e <_strtod_l+0x446>
 8011f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8011f62:	fa02 f303 	lsl.w	r3, r2, r3
 8011f66:	ea03 0a0a 	and.w	sl, r3, sl
 8011f6a:	e7af      	b.n	8011ecc <_strtod_l+0x604>
 8011f6c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8011f6e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011f70:	2d00      	cmp	r5, #0
 8011f72:	bfab      	itete	ge
 8011f74:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011f76:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011f78:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011f7a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8011f7c:	bfac      	ite	ge
 8011f7e:	18ef      	addge	r7, r5, r3
 8011f80:	1b5e      	sublt	r6, r3, r5
 8011f82:	9b08      	ldr	r3, [sp, #32]
 8011f84:	1aed      	subs	r5, r5, r3
 8011f86:	4415      	add	r5, r2
 8011f88:	4b65      	ldr	r3, [pc, #404]	@ (8012120 <_strtod_l+0x858>)
 8011f8a:	3d01      	subs	r5, #1
 8011f8c:	429d      	cmp	r5, r3
 8011f8e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011f92:	da50      	bge.n	8012036 <_strtod_l+0x76e>
 8011f94:	1b5b      	subs	r3, r3, r5
 8011f96:	2b1f      	cmp	r3, #31
 8011f98:	eba2 0203 	sub.w	r2, r2, r3
 8011f9c:	f04f 0101 	mov.w	r1, #1
 8011fa0:	dc3d      	bgt.n	801201e <_strtod_l+0x756>
 8011fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8011fa6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011fa8:	2300      	movs	r3, #0
 8011faa:	9310      	str	r3, [sp, #64]	@ 0x40
 8011fac:	18bd      	adds	r5, r7, r2
 8011fae:	9b08      	ldr	r3, [sp, #32]
 8011fb0:	42af      	cmp	r7, r5
 8011fb2:	4416      	add	r6, r2
 8011fb4:	441e      	add	r6, r3
 8011fb6:	463b      	mov	r3, r7
 8011fb8:	bfa8      	it	ge
 8011fba:	462b      	movge	r3, r5
 8011fbc:	42b3      	cmp	r3, r6
 8011fbe:	bfa8      	it	ge
 8011fc0:	4633      	movge	r3, r6
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	bfc2      	ittt	gt
 8011fc6:	1aed      	subgt	r5, r5, r3
 8011fc8:	1af6      	subgt	r6, r6, r3
 8011fca:	1aff      	subgt	r7, r7, r3
 8011fcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	dd16      	ble.n	8012000 <_strtod_l+0x738>
 8011fd2:	4641      	mov	r1, r8
 8011fd4:	9805      	ldr	r0, [sp, #20]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	f002 fe42 	bl	8014c60 <__pow5mult>
 8011fdc:	4680      	mov	r8, r0
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	d0ba      	beq.n	8011f58 <_strtod_l+0x690>
 8011fe2:	4601      	mov	r1, r0
 8011fe4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011fe6:	9805      	ldr	r0, [sp, #20]
 8011fe8:	f002 fd98 	bl	8014b1c <__multiply>
 8011fec:	900a      	str	r0, [sp, #40]	@ 0x28
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f43f ae8d 	beq.w	8011d0e <_strtod_l+0x446>
 8011ff4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011ff6:	9805      	ldr	r0, [sp, #20]
 8011ff8:	f002 fc7c 	bl	80148f4 <_Bfree>
 8011ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ffe:	931a      	str	r3, [sp, #104]	@ 0x68
 8012000:	2d00      	cmp	r5, #0
 8012002:	dc1d      	bgt.n	8012040 <_strtod_l+0x778>
 8012004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012006:	2b00      	cmp	r3, #0
 8012008:	dd23      	ble.n	8012052 <_strtod_l+0x78a>
 801200a:	4649      	mov	r1, r9
 801200c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801200e:	9805      	ldr	r0, [sp, #20]
 8012010:	f002 fe26 	bl	8014c60 <__pow5mult>
 8012014:	4681      	mov	r9, r0
 8012016:	b9e0      	cbnz	r0, 8012052 <_strtod_l+0x78a>
 8012018:	f04f 0900 	mov.w	r9, #0
 801201c:	e677      	b.n	8011d0e <_strtod_l+0x446>
 801201e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012022:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012026:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801202a:	35e2      	adds	r5, #226	@ 0xe2
 801202c:	fa01 f305 	lsl.w	r3, r1, r5
 8012030:	9310      	str	r3, [sp, #64]	@ 0x40
 8012032:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012034:	e7ba      	b.n	8011fac <_strtod_l+0x6e4>
 8012036:	2300      	movs	r3, #0
 8012038:	9310      	str	r3, [sp, #64]	@ 0x40
 801203a:	2301      	movs	r3, #1
 801203c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801203e:	e7b5      	b.n	8011fac <_strtod_l+0x6e4>
 8012040:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012042:	9805      	ldr	r0, [sp, #20]
 8012044:	462a      	mov	r2, r5
 8012046:	f002 fe65 	bl	8014d14 <__lshift>
 801204a:	901a      	str	r0, [sp, #104]	@ 0x68
 801204c:	2800      	cmp	r0, #0
 801204e:	d1d9      	bne.n	8012004 <_strtod_l+0x73c>
 8012050:	e65d      	b.n	8011d0e <_strtod_l+0x446>
 8012052:	2e00      	cmp	r6, #0
 8012054:	dd07      	ble.n	8012066 <_strtod_l+0x79e>
 8012056:	4649      	mov	r1, r9
 8012058:	9805      	ldr	r0, [sp, #20]
 801205a:	4632      	mov	r2, r6
 801205c:	f002 fe5a 	bl	8014d14 <__lshift>
 8012060:	4681      	mov	r9, r0
 8012062:	2800      	cmp	r0, #0
 8012064:	d0d8      	beq.n	8012018 <_strtod_l+0x750>
 8012066:	2f00      	cmp	r7, #0
 8012068:	dd08      	ble.n	801207c <_strtod_l+0x7b4>
 801206a:	4641      	mov	r1, r8
 801206c:	9805      	ldr	r0, [sp, #20]
 801206e:	463a      	mov	r2, r7
 8012070:	f002 fe50 	bl	8014d14 <__lshift>
 8012074:	4680      	mov	r8, r0
 8012076:	2800      	cmp	r0, #0
 8012078:	f43f ae49 	beq.w	8011d0e <_strtod_l+0x446>
 801207c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801207e:	9805      	ldr	r0, [sp, #20]
 8012080:	464a      	mov	r2, r9
 8012082:	f002 fecf 	bl	8014e24 <__mdiff>
 8012086:	4604      	mov	r4, r0
 8012088:	2800      	cmp	r0, #0
 801208a:	f43f ae40 	beq.w	8011d0e <_strtod_l+0x446>
 801208e:	68c3      	ldr	r3, [r0, #12]
 8012090:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012092:	2300      	movs	r3, #0
 8012094:	60c3      	str	r3, [r0, #12]
 8012096:	4641      	mov	r1, r8
 8012098:	f002 fea8 	bl	8014dec <__mcmp>
 801209c:	2800      	cmp	r0, #0
 801209e:	da45      	bge.n	801212c <_strtod_l+0x864>
 80120a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120a2:	ea53 030a 	orrs.w	r3, r3, sl
 80120a6:	d16b      	bne.n	8012180 <_strtod_l+0x8b8>
 80120a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d167      	bne.n	8012180 <_strtod_l+0x8b8>
 80120b0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120b4:	0d1b      	lsrs	r3, r3, #20
 80120b6:	051b      	lsls	r3, r3, #20
 80120b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120bc:	d960      	bls.n	8012180 <_strtod_l+0x8b8>
 80120be:	6963      	ldr	r3, [r4, #20]
 80120c0:	b913      	cbnz	r3, 80120c8 <_strtod_l+0x800>
 80120c2:	6923      	ldr	r3, [r4, #16]
 80120c4:	2b01      	cmp	r3, #1
 80120c6:	dd5b      	ble.n	8012180 <_strtod_l+0x8b8>
 80120c8:	4621      	mov	r1, r4
 80120ca:	2201      	movs	r2, #1
 80120cc:	9805      	ldr	r0, [sp, #20]
 80120ce:	f002 fe21 	bl	8014d14 <__lshift>
 80120d2:	4641      	mov	r1, r8
 80120d4:	4604      	mov	r4, r0
 80120d6:	f002 fe89 	bl	8014dec <__mcmp>
 80120da:	2800      	cmp	r0, #0
 80120dc:	dd50      	ble.n	8012180 <_strtod_l+0x8b8>
 80120de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80120e2:	9a08      	ldr	r2, [sp, #32]
 80120e4:	0d1b      	lsrs	r3, r3, #20
 80120e6:	051b      	lsls	r3, r3, #20
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	d06a      	beq.n	80121c2 <_strtod_l+0x8fa>
 80120ec:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80120f0:	d867      	bhi.n	80121c2 <_strtod_l+0x8fa>
 80120f2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80120f6:	f67f ae9d 	bls.w	8011e34 <_strtod_l+0x56c>
 80120fa:	4b0a      	ldr	r3, [pc, #40]	@ (8012124 <_strtod_l+0x85c>)
 80120fc:	4650      	mov	r0, sl
 80120fe:	4659      	mov	r1, fp
 8012100:	2200      	movs	r2, #0
 8012102:	f7ee fa79 	bl	80005f8 <__aeabi_dmul>
 8012106:	4b08      	ldr	r3, [pc, #32]	@ (8012128 <_strtod_l+0x860>)
 8012108:	400b      	ands	r3, r1
 801210a:	4682      	mov	sl, r0
 801210c:	468b      	mov	fp, r1
 801210e:	2b00      	cmp	r3, #0
 8012110:	f47f ae08 	bne.w	8011d24 <_strtod_l+0x45c>
 8012114:	9a05      	ldr	r2, [sp, #20]
 8012116:	2322      	movs	r3, #34	@ 0x22
 8012118:	6013      	str	r3, [r2, #0]
 801211a:	e603      	b.n	8011d24 <_strtod_l+0x45c>
 801211c:	08016950 	.word	0x08016950
 8012120:	fffffc02 	.word	0xfffffc02
 8012124:	39500000 	.word	0x39500000
 8012128:	7ff00000 	.word	0x7ff00000
 801212c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012130:	d165      	bne.n	80121fe <_strtod_l+0x936>
 8012132:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012138:	b35a      	cbz	r2, 8012192 <_strtod_l+0x8ca>
 801213a:	4a9f      	ldr	r2, [pc, #636]	@ (80123b8 <_strtod_l+0xaf0>)
 801213c:	4293      	cmp	r3, r2
 801213e:	d12b      	bne.n	8012198 <_strtod_l+0x8d0>
 8012140:	9b08      	ldr	r3, [sp, #32]
 8012142:	4651      	mov	r1, sl
 8012144:	b303      	cbz	r3, 8012188 <_strtod_l+0x8c0>
 8012146:	4b9d      	ldr	r3, [pc, #628]	@ (80123bc <_strtod_l+0xaf4>)
 8012148:	465a      	mov	r2, fp
 801214a:	4013      	ands	r3, r2
 801214c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012150:	f04f 32ff 	mov.w	r2, #4294967295
 8012154:	d81b      	bhi.n	801218e <_strtod_l+0x8c6>
 8012156:	0d1b      	lsrs	r3, r3, #20
 8012158:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801215c:	fa02 f303 	lsl.w	r3, r2, r3
 8012160:	4299      	cmp	r1, r3
 8012162:	d119      	bne.n	8012198 <_strtod_l+0x8d0>
 8012164:	4b96      	ldr	r3, [pc, #600]	@ (80123c0 <_strtod_l+0xaf8>)
 8012166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012168:	429a      	cmp	r2, r3
 801216a:	d102      	bne.n	8012172 <_strtod_l+0x8aa>
 801216c:	3101      	adds	r1, #1
 801216e:	f43f adce 	beq.w	8011d0e <_strtod_l+0x446>
 8012172:	4b92      	ldr	r3, [pc, #584]	@ (80123bc <_strtod_l+0xaf4>)
 8012174:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012176:	401a      	ands	r2, r3
 8012178:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801217c:	f04f 0a00 	mov.w	sl, #0
 8012180:	9b08      	ldr	r3, [sp, #32]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d1b9      	bne.n	80120fa <_strtod_l+0x832>
 8012186:	e5cd      	b.n	8011d24 <_strtod_l+0x45c>
 8012188:	f04f 33ff 	mov.w	r3, #4294967295
 801218c:	e7e8      	b.n	8012160 <_strtod_l+0x898>
 801218e:	4613      	mov	r3, r2
 8012190:	e7e6      	b.n	8012160 <_strtod_l+0x898>
 8012192:	ea53 030a 	orrs.w	r3, r3, sl
 8012196:	d0a2      	beq.n	80120de <_strtod_l+0x816>
 8012198:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801219a:	b1db      	cbz	r3, 80121d4 <_strtod_l+0x90c>
 801219c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801219e:	4213      	tst	r3, r2
 80121a0:	d0ee      	beq.n	8012180 <_strtod_l+0x8b8>
 80121a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80121a4:	9a08      	ldr	r2, [sp, #32]
 80121a6:	4650      	mov	r0, sl
 80121a8:	4659      	mov	r1, fp
 80121aa:	b1bb      	cbz	r3, 80121dc <_strtod_l+0x914>
 80121ac:	f7ff fb6e 	bl	801188c <sulp>
 80121b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121b4:	ec53 2b10 	vmov	r2, r3, d0
 80121b8:	f7ee f868 	bl	800028c <__adddf3>
 80121bc:	4682      	mov	sl, r0
 80121be:	468b      	mov	fp, r1
 80121c0:	e7de      	b.n	8012180 <_strtod_l+0x8b8>
 80121c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80121c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80121ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80121ce:	f04f 3aff 	mov.w	sl, #4294967295
 80121d2:	e7d5      	b.n	8012180 <_strtod_l+0x8b8>
 80121d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80121d6:	ea13 0f0a 	tst.w	r3, sl
 80121da:	e7e1      	b.n	80121a0 <_strtod_l+0x8d8>
 80121dc:	f7ff fb56 	bl	801188c <sulp>
 80121e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80121e4:	ec53 2b10 	vmov	r2, r3, d0
 80121e8:	f7ee f84e 	bl	8000288 <__aeabi_dsub>
 80121ec:	2200      	movs	r2, #0
 80121ee:	2300      	movs	r3, #0
 80121f0:	4682      	mov	sl, r0
 80121f2:	468b      	mov	fp, r1
 80121f4:	f7ee fc68 	bl	8000ac8 <__aeabi_dcmpeq>
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d0c1      	beq.n	8012180 <_strtod_l+0x8b8>
 80121fc:	e61a      	b.n	8011e34 <_strtod_l+0x56c>
 80121fe:	4641      	mov	r1, r8
 8012200:	4620      	mov	r0, r4
 8012202:	f002 ff6b 	bl	80150dc <__ratio>
 8012206:	ec57 6b10 	vmov	r6, r7, d0
 801220a:	2200      	movs	r2, #0
 801220c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012210:	4630      	mov	r0, r6
 8012212:	4639      	mov	r1, r7
 8012214:	f7ee fc6c 	bl	8000af0 <__aeabi_dcmple>
 8012218:	2800      	cmp	r0, #0
 801221a:	d06f      	beq.n	80122fc <_strtod_l+0xa34>
 801221c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801221e:	2b00      	cmp	r3, #0
 8012220:	d17a      	bne.n	8012318 <_strtod_l+0xa50>
 8012222:	f1ba 0f00 	cmp.w	sl, #0
 8012226:	d158      	bne.n	80122da <_strtod_l+0xa12>
 8012228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801222a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801222e:	2b00      	cmp	r3, #0
 8012230:	d15a      	bne.n	80122e8 <_strtod_l+0xa20>
 8012232:	4b64      	ldr	r3, [pc, #400]	@ (80123c4 <_strtod_l+0xafc>)
 8012234:	2200      	movs	r2, #0
 8012236:	4630      	mov	r0, r6
 8012238:	4639      	mov	r1, r7
 801223a:	f7ee fc4f 	bl	8000adc <__aeabi_dcmplt>
 801223e:	2800      	cmp	r0, #0
 8012240:	d159      	bne.n	80122f6 <_strtod_l+0xa2e>
 8012242:	4630      	mov	r0, r6
 8012244:	4639      	mov	r1, r7
 8012246:	4b60      	ldr	r3, [pc, #384]	@ (80123c8 <_strtod_l+0xb00>)
 8012248:	2200      	movs	r2, #0
 801224a:	f7ee f9d5 	bl	80005f8 <__aeabi_dmul>
 801224e:	4606      	mov	r6, r0
 8012250:	460f      	mov	r7, r1
 8012252:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012256:	9606      	str	r6, [sp, #24]
 8012258:	9307      	str	r3, [sp, #28]
 801225a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801225e:	4d57      	ldr	r5, [pc, #348]	@ (80123bc <_strtod_l+0xaf4>)
 8012260:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012266:	401d      	ands	r5, r3
 8012268:	4b58      	ldr	r3, [pc, #352]	@ (80123cc <_strtod_l+0xb04>)
 801226a:	429d      	cmp	r5, r3
 801226c:	f040 80b2 	bne.w	80123d4 <_strtod_l+0xb0c>
 8012270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012272:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012276:	ec4b ab10 	vmov	d0, sl, fp
 801227a:	f002 fe67 	bl	8014f4c <__ulp>
 801227e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012282:	ec51 0b10 	vmov	r0, r1, d0
 8012286:	f7ee f9b7 	bl	80005f8 <__aeabi_dmul>
 801228a:	4652      	mov	r2, sl
 801228c:	465b      	mov	r3, fp
 801228e:	f7ed fffd 	bl	800028c <__adddf3>
 8012292:	460b      	mov	r3, r1
 8012294:	4949      	ldr	r1, [pc, #292]	@ (80123bc <_strtod_l+0xaf4>)
 8012296:	4a4e      	ldr	r2, [pc, #312]	@ (80123d0 <_strtod_l+0xb08>)
 8012298:	4019      	ands	r1, r3
 801229a:	4291      	cmp	r1, r2
 801229c:	4682      	mov	sl, r0
 801229e:	d942      	bls.n	8012326 <_strtod_l+0xa5e>
 80122a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122a2:	4b47      	ldr	r3, [pc, #284]	@ (80123c0 <_strtod_l+0xaf8>)
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d103      	bne.n	80122b0 <_strtod_l+0x9e8>
 80122a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122aa:	3301      	adds	r3, #1
 80122ac:	f43f ad2f 	beq.w	8011d0e <_strtod_l+0x446>
 80122b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80123c0 <_strtod_l+0xaf8>
 80122b4:	f04f 3aff 	mov.w	sl, #4294967295
 80122b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80122ba:	9805      	ldr	r0, [sp, #20]
 80122bc:	f002 fb1a 	bl	80148f4 <_Bfree>
 80122c0:	9805      	ldr	r0, [sp, #20]
 80122c2:	4649      	mov	r1, r9
 80122c4:	f002 fb16 	bl	80148f4 <_Bfree>
 80122c8:	9805      	ldr	r0, [sp, #20]
 80122ca:	4641      	mov	r1, r8
 80122cc:	f002 fb12 	bl	80148f4 <_Bfree>
 80122d0:	9805      	ldr	r0, [sp, #20]
 80122d2:	4621      	mov	r1, r4
 80122d4:	f002 fb0e 	bl	80148f4 <_Bfree>
 80122d8:	e619      	b.n	8011f0e <_strtod_l+0x646>
 80122da:	f1ba 0f01 	cmp.w	sl, #1
 80122de:	d103      	bne.n	80122e8 <_strtod_l+0xa20>
 80122e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	f43f ada6 	beq.w	8011e34 <_strtod_l+0x56c>
 80122e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012398 <_strtod_l+0xad0>
 80122ec:	4f35      	ldr	r7, [pc, #212]	@ (80123c4 <_strtod_l+0xafc>)
 80122ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80122f2:	2600      	movs	r6, #0
 80122f4:	e7b1      	b.n	801225a <_strtod_l+0x992>
 80122f6:	4f34      	ldr	r7, [pc, #208]	@ (80123c8 <_strtod_l+0xb00>)
 80122f8:	2600      	movs	r6, #0
 80122fa:	e7aa      	b.n	8012252 <_strtod_l+0x98a>
 80122fc:	4b32      	ldr	r3, [pc, #200]	@ (80123c8 <_strtod_l+0xb00>)
 80122fe:	4630      	mov	r0, r6
 8012300:	4639      	mov	r1, r7
 8012302:	2200      	movs	r2, #0
 8012304:	f7ee f978 	bl	80005f8 <__aeabi_dmul>
 8012308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801230a:	4606      	mov	r6, r0
 801230c:	460f      	mov	r7, r1
 801230e:	2b00      	cmp	r3, #0
 8012310:	d09f      	beq.n	8012252 <_strtod_l+0x98a>
 8012312:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012316:	e7a0      	b.n	801225a <_strtod_l+0x992>
 8012318:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80123a0 <_strtod_l+0xad8>
 801231c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012320:	ec57 6b17 	vmov	r6, r7, d7
 8012324:	e799      	b.n	801225a <_strtod_l+0x992>
 8012326:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801232a:	9b08      	ldr	r3, [sp, #32]
 801232c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8012330:	2b00      	cmp	r3, #0
 8012332:	d1c1      	bne.n	80122b8 <_strtod_l+0x9f0>
 8012334:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012338:	0d1b      	lsrs	r3, r3, #20
 801233a:	051b      	lsls	r3, r3, #20
 801233c:	429d      	cmp	r5, r3
 801233e:	d1bb      	bne.n	80122b8 <_strtod_l+0x9f0>
 8012340:	4630      	mov	r0, r6
 8012342:	4639      	mov	r1, r7
 8012344:	f7ee fc68 	bl	8000c18 <__aeabi_d2lz>
 8012348:	f7ee f928 	bl	800059c <__aeabi_l2d>
 801234c:	4602      	mov	r2, r0
 801234e:	460b      	mov	r3, r1
 8012350:	4630      	mov	r0, r6
 8012352:	4639      	mov	r1, r7
 8012354:	f7ed ff98 	bl	8000288 <__aeabi_dsub>
 8012358:	460b      	mov	r3, r1
 801235a:	4602      	mov	r2, r0
 801235c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012360:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012366:	ea46 060a 	orr.w	r6, r6, sl
 801236a:	431e      	orrs	r6, r3
 801236c:	d06f      	beq.n	801244e <_strtod_l+0xb86>
 801236e:	a30e      	add	r3, pc, #56	@ (adr r3, 80123a8 <_strtod_l+0xae0>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	f7ee fbb2 	bl	8000adc <__aeabi_dcmplt>
 8012378:	2800      	cmp	r0, #0
 801237a:	f47f acd3 	bne.w	8011d24 <_strtod_l+0x45c>
 801237e:	a30c      	add	r3, pc, #48	@ (adr r3, 80123b0 <_strtod_l+0xae8>)
 8012380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012388:	f7ee fbc6 	bl	8000b18 <__aeabi_dcmpgt>
 801238c:	2800      	cmp	r0, #0
 801238e:	d093      	beq.n	80122b8 <_strtod_l+0x9f0>
 8012390:	e4c8      	b.n	8011d24 <_strtod_l+0x45c>
 8012392:	bf00      	nop
 8012394:	f3af 8000 	nop.w
 8012398:	00000000 	.word	0x00000000
 801239c:	bff00000 	.word	0xbff00000
 80123a0:	00000000 	.word	0x00000000
 80123a4:	3ff00000 	.word	0x3ff00000
 80123a8:	94a03595 	.word	0x94a03595
 80123ac:	3fdfffff 	.word	0x3fdfffff
 80123b0:	35afe535 	.word	0x35afe535
 80123b4:	3fe00000 	.word	0x3fe00000
 80123b8:	000fffff 	.word	0x000fffff
 80123bc:	7ff00000 	.word	0x7ff00000
 80123c0:	7fefffff 	.word	0x7fefffff
 80123c4:	3ff00000 	.word	0x3ff00000
 80123c8:	3fe00000 	.word	0x3fe00000
 80123cc:	7fe00000 	.word	0x7fe00000
 80123d0:	7c9fffff 	.word	0x7c9fffff
 80123d4:	9b08      	ldr	r3, [sp, #32]
 80123d6:	b323      	cbz	r3, 8012422 <_strtod_l+0xb5a>
 80123d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80123dc:	d821      	bhi.n	8012422 <_strtod_l+0xb5a>
 80123de:	a328      	add	r3, pc, #160	@ (adr r3, 8012480 <_strtod_l+0xbb8>)
 80123e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123e4:	4630      	mov	r0, r6
 80123e6:	4639      	mov	r1, r7
 80123e8:	f7ee fb82 	bl	8000af0 <__aeabi_dcmple>
 80123ec:	b1a0      	cbz	r0, 8012418 <_strtod_l+0xb50>
 80123ee:	4639      	mov	r1, r7
 80123f0:	4630      	mov	r0, r6
 80123f2:	f7ee fbd9 	bl	8000ba8 <__aeabi_d2uiz>
 80123f6:	2801      	cmp	r0, #1
 80123f8:	bf38      	it	cc
 80123fa:	2001      	movcc	r0, #1
 80123fc:	f7ee f882 	bl	8000504 <__aeabi_ui2d>
 8012400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012402:	4606      	mov	r6, r0
 8012404:	460f      	mov	r7, r1
 8012406:	b9fb      	cbnz	r3, 8012448 <_strtod_l+0xb80>
 8012408:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801240c:	9014      	str	r0, [sp, #80]	@ 0x50
 801240e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012410:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012414:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012418:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801241a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801241e:	1b5b      	subs	r3, r3, r5
 8012420:	9311      	str	r3, [sp, #68]	@ 0x44
 8012422:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012426:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801242a:	f002 fd8f 	bl	8014f4c <__ulp>
 801242e:	4650      	mov	r0, sl
 8012430:	ec53 2b10 	vmov	r2, r3, d0
 8012434:	4659      	mov	r1, fp
 8012436:	f7ee f8df 	bl	80005f8 <__aeabi_dmul>
 801243a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801243e:	f7ed ff25 	bl	800028c <__adddf3>
 8012442:	4682      	mov	sl, r0
 8012444:	468b      	mov	fp, r1
 8012446:	e770      	b.n	801232a <_strtod_l+0xa62>
 8012448:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801244c:	e7e0      	b.n	8012410 <_strtod_l+0xb48>
 801244e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012488 <_strtod_l+0xbc0>)
 8012450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012454:	f7ee fb42 	bl	8000adc <__aeabi_dcmplt>
 8012458:	e798      	b.n	801238c <_strtod_l+0xac4>
 801245a:	2300      	movs	r3, #0
 801245c:	930e      	str	r3, [sp, #56]	@ 0x38
 801245e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012460:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012462:	6013      	str	r3, [r2, #0]
 8012464:	f7ff ba6d 	b.w	8011942 <_strtod_l+0x7a>
 8012468:	2a65      	cmp	r2, #101	@ 0x65
 801246a:	f43f ab68 	beq.w	8011b3e <_strtod_l+0x276>
 801246e:	2a45      	cmp	r2, #69	@ 0x45
 8012470:	f43f ab65 	beq.w	8011b3e <_strtod_l+0x276>
 8012474:	2301      	movs	r3, #1
 8012476:	f7ff bba0 	b.w	8011bba <_strtod_l+0x2f2>
 801247a:	bf00      	nop
 801247c:	f3af 8000 	nop.w
 8012480:	ffc00000 	.word	0xffc00000
 8012484:	41dfffff 	.word	0x41dfffff
 8012488:	94a03595 	.word	0x94a03595
 801248c:	3fcfffff 	.word	0x3fcfffff

08012490 <strtod>:
 8012490:	460a      	mov	r2, r1
 8012492:	4601      	mov	r1, r0
 8012494:	4802      	ldr	r0, [pc, #8]	@ (80124a0 <strtod+0x10>)
 8012496:	4b03      	ldr	r3, [pc, #12]	@ (80124a4 <strtod+0x14>)
 8012498:	6800      	ldr	r0, [r0, #0]
 801249a:	f7ff ba15 	b.w	80118c8 <_strtod_l>
 801249e:	bf00      	nop
 80124a0:	2000040c 	.word	0x2000040c
 80124a4:	200002a0 	.word	0x200002a0

080124a8 <_strtol_l.isra.0>:
 80124a8:	2b24      	cmp	r3, #36	@ 0x24
 80124aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124ae:	4686      	mov	lr, r0
 80124b0:	4690      	mov	r8, r2
 80124b2:	d801      	bhi.n	80124b8 <_strtol_l.isra.0+0x10>
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d106      	bne.n	80124c6 <_strtol_l.isra.0+0x1e>
 80124b8:	f000 ff82 	bl	80133c0 <__errno>
 80124bc:	2316      	movs	r3, #22
 80124be:	6003      	str	r3, [r0, #0]
 80124c0:	2000      	movs	r0, #0
 80124c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124c6:	4834      	ldr	r0, [pc, #208]	@ (8012598 <_strtol_l.isra.0+0xf0>)
 80124c8:	460d      	mov	r5, r1
 80124ca:	462a      	mov	r2, r5
 80124cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80124d0:	5d06      	ldrb	r6, [r0, r4]
 80124d2:	f016 0608 	ands.w	r6, r6, #8
 80124d6:	d1f8      	bne.n	80124ca <_strtol_l.isra.0+0x22>
 80124d8:	2c2d      	cmp	r4, #45	@ 0x2d
 80124da:	d110      	bne.n	80124fe <_strtol_l.isra.0+0x56>
 80124dc:	782c      	ldrb	r4, [r5, #0]
 80124de:	2601      	movs	r6, #1
 80124e0:	1c95      	adds	r5, r2, #2
 80124e2:	f033 0210 	bics.w	r2, r3, #16
 80124e6:	d115      	bne.n	8012514 <_strtol_l.isra.0+0x6c>
 80124e8:	2c30      	cmp	r4, #48	@ 0x30
 80124ea:	d10d      	bne.n	8012508 <_strtol_l.isra.0+0x60>
 80124ec:	782a      	ldrb	r2, [r5, #0]
 80124ee:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80124f2:	2a58      	cmp	r2, #88	@ 0x58
 80124f4:	d108      	bne.n	8012508 <_strtol_l.isra.0+0x60>
 80124f6:	786c      	ldrb	r4, [r5, #1]
 80124f8:	3502      	adds	r5, #2
 80124fa:	2310      	movs	r3, #16
 80124fc:	e00a      	b.n	8012514 <_strtol_l.isra.0+0x6c>
 80124fe:	2c2b      	cmp	r4, #43	@ 0x2b
 8012500:	bf04      	itt	eq
 8012502:	782c      	ldrbeq	r4, [r5, #0]
 8012504:	1c95      	addeq	r5, r2, #2
 8012506:	e7ec      	b.n	80124e2 <_strtol_l.isra.0+0x3a>
 8012508:	2b00      	cmp	r3, #0
 801250a:	d1f6      	bne.n	80124fa <_strtol_l.isra.0+0x52>
 801250c:	2c30      	cmp	r4, #48	@ 0x30
 801250e:	bf14      	ite	ne
 8012510:	230a      	movne	r3, #10
 8012512:	2308      	moveq	r3, #8
 8012514:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012518:	f10c 3cff 	add.w	ip, ip, #4294967295
 801251c:	2200      	movs	r2, #0
 801251e:	fbbc f9f3 	udiv	r9, ip, r3
 8012522:	4610      	mov	r0, r2
 8012524:	fb03 ca19 	mls	sl, r3, r9, ip
 8012528:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801252c:	2f09      	cmp	r7, #9
 801252e:	d80f      	bhi.n	8012550 <_strtol_l.isra.0+0xa8>
 8012530:	463c      	mov	r4, r7
 8012532:	42a3      	cmp	r3, r4
 8012534:	dd1b      	ble.n	801256e <_strtol_l.isra.0+0xc6>
 8012536:	1c57      	adds	r7, r2, #1
 8012538:	d007      	beq.n	801254a <_strtol_l.isra.0+0xa2>
 801253a:	4581      	cmp	r9, r0
 801253c:	d314      	bcc.n	8012568 <_strtol_l.isra.0+0xc0>
 801253e:	d101      	bne.n	8012544 <_strtol_l.isra.0+0x9c>
 8012540:	45a2      	cmp	sl, r4
 8012542:	db11      	blt.n	8012568 <_strtol_l.isra.0+0xc0>
 8012544:	fb00 4003 	mla	r0, r0, r3, r4
 8012548:	2201      	movs	r2, #1
 801254a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801254e:	e7eb      	b.n	8012528 <_strtol_l.isra.0+0x80>
 8012550:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012554:	2f19      	cmp	r7, #25
 8012556:	d801      	bhi.n	801255c <_strtol_l.isra.0+0xb4>
 8012558:	3c37      	subs	r4, #55	@ 0x37
 801255a:	e7ea      	b.n	8012532 <_strtol_l.isra.0+0x8a>
 801255c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012560:	2f19      	cmp	r7, #25
 8012562:	d804      	bhi.n	801256e <_strtol_l.isra.0+0xc6>
 8012564:	3c57      	subs	r4, #87	@ 0x57
 8012566:	e7e4      	b.n	8012532 <_strtol_l.isra.0+0x8a>
 8012568:	f04f 32ff 	mov.w	r2, #4294967295
 801256c:	e7ed      	b.n	801254a <_strtol_l.isra.0+0xa2>
 801256e:	1c53      	adds	r3, r2, #1
 8012570:	d108      	bne.n	8012584 <_strtol_l.isra.0+0xdc>
 8012572:	2322      	movs	r3, #34	@ 0x22
 8012574:	f8ce 3000 	str.w	r3, [lr]
 8012578:	4660      	mov	r0, ip
 801257a:	f1b8 0f00 	cmp.w	r8, #0
 801257e:	d0a0      	beq.n	80124c2 <_strtol_l.isra.0+0x1a>
 8012580:	1e69      	subs	r1, r5, #1
 8012582:	e006      	b.n	8012592 <_strtol_l.isra.0+0xea>
 8012584:	b106      	cbz	r6, 8012588 <_strtol_l.isra.0+0xe0>
 8012586:	4240      	negs	r0, r0
 8012588:	f1b8 0f00 	cmp.w	r8, #0
 801258c:	d099      	beq.n	80124c2 <_strtol_l.isra.0+0x1a>
 801258e:	2a00      	cmp	r2, #0
 8012590:	d1f6      	bne.n	8012580 <_strtol_l.isra.0+0xd8>
 8012592:	f8c8 1000 	str.w	r1, [r8]
 8012596:	e794      	b.n	80124c2 <_strtol_l.isra.0+0x1a>
 8012598:	08016979 	.word	0x08016979

0801259c <strtol>:
 801259c:	4613      	mov	r3, r2
 801259e:	460a      	mov	r2, r1
 80125a0:	4601      	mov	r1, r0
 80125a2:	4802      	ldr	r0, [pc, #8]	@ (80125ac <strtol+0x10>)
 80125a4:	6800      	ldr	r0, [r0, #0]
 80125a6:	f7ff bf7f 	b.w	80124a8 <_strtol_l.isra.0>
 80125aa:	bf00      	nop
 80125ac:	2000040c 	.word	0x2000040c

080125b0 <__cvt>:
 80125b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125b4:	ec57 6b10 	vmov	r6, r7, d0
 80125b8:	2f00      	cmp	r7, #0
 80125ba:	460c      	mov	r4, r1
 80125bc:	4619      	mov	r1, r3
 80125be:	463b      	mov	r3, r7
 80125c0:	bfbb      	ittet	lt
 80125c2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80125c6:	461f      	movlt	r7, r3
 80125c8:	2300      	movge	r3, #0
 80125ca:	232d      	movlt	r3, #45	@ 0x2d
 80125cc:	700b      	strb	r3, [r1, #0]
 80125ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80125d4:	4691      	mov	r9, r2
 80125d6:	f023 0820 	bic.w	r8, r3, #32
 80125da:	bfbc      	itt	lt
 80125dc:	4632      	movlt	r2, r6
 80125de:	4616      	movlt	r6, r2
 80125e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80125e4:	d005      	beq.n	80125f2 <__cvt+0x42>
 80125e6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80125ea:	d100      	bne.n	80125ee <__cvt+0x3e>
 80125ec:	3401      	adds	r4, #1
 80125ee:	2102      	movs	r1, #2
 80125f0:	e000      	b.n	80125f4 <__cvt+0x44>
 80125f2:	2103      	movs	r1, #3
 80125f4:	ab03      	add	r3, sp, #12
 80125f6:	9301      	str	r3, [sp, #4]
 80125f8:	ab02      	add	r3, sp, #8
 80125fa:	9300      	str	r3, [sp, #0]
 80125fc:	ec47 6b10 	vmov	d0, r6, r7
 8012600:	4653      	mov	r3, sl
 8012602:	4622      	mov	r2, r4
 8012604:	f000 ffd0 	bl	80135a8 <_dtoa_r>
 8012608:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801260c:	4605      	mov	r5, r0
 801260e:	d119      	bne.n	8012644 <__cvt+0x94>
 8012610:	f019 0f01 	tst.w	r9, #1
 8012614:	d00e      	beq.n	8012634 <__cvt+0x84>
 8012616:	eb00 0904 	add.w	r9, r0, r4
 801261a:	2200      	movs	r2, #0
 801261c:	2300      	movs	r3, #0
 801261e:	4630      	mov	r0, r6
 8012620:	4639      	mov	r1, r7
 8012622:	f7ee fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 8012626:	b108      	cbz	r0, 801262c <__cvt+0x7c>
 8012628:	f8cd 900c 	str.w	r9, [sp, #12]
 801262c:	2230      	movs	r2, #48	@ 0x30
 801262e:	9b03      	ldr	r3, [sp, #12]
 8012630:	454b      	cmp	r3, r9
 8012632:	d31e      	bcc.n	8012672 <__cvt+0xc2>
 8012634:	9b03      	ldr	r3, [sp, #12]
 8012636:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012638:	1b5b      	subs	r3, r3, r5
 801263a:	4628      	mov	r0, r5
 801263c:	6013      	str	r3, [r2, #0]
 801263e:	b004      	add	sp, #16
 8012640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012644:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012648:	eb00 0904 	add.w	r9, r0, r4
 801264c:	d1e5      	bne.n	801261a <__cvt+0x6a>
 801264e:	7803      	ldrb	r3, [r0, #0]
 8012650:	2b30      	cmp	r3, #48	@ 0x30
 8012652:	d10a      	bne.n	801266a <__cvt+0xba>
 8012654:	2200      	movs	r2, #0
 8012656:	2300      	movs	r3, #0
 8012658:	4630      	mov	r0, r6
 801265a:	4639      	mov	r1, r7
 801265c:	f7ee fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8012660:	b918      	cbnz	r0, 801266a <__cvt+0xba>
 8012662:	f1c4 0401 	rsb	r4, r4, #1
 8012666:	f8ca 4000 	str.w	r4, [sl]
 801266a:	f8da 3000 	ldr.w	r3, [sl]
 801266e:	4499      	add	r9, r3
 8012670:	e7d3      	b.n	801261a <__cvt+0x6a>
 8012672:	1c59      	adds	r1, r3, #1
 8012674:	9103      	str	r1, [sp, #12]
 8012676:	701a      	strb	r2, [r3, #0]
 8012678:	e7d9      	b.n	801262e <__cvt+0x7e>

0801267a <__exponent>:
 801267a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801267c:	2900      	cmp	r1, #0
 801267e:	bfba      	itte	lt
 8012680:	4249      	neglt	r1, r1
 8012682:	232d      	movlt	r3, #45	@ 0x2d
 8012684:	232b      	movge	r3, #43	@ 0x2b
 8012686:	2909      	cmp	r1, #9
 8012688:	7002      	strb	r2, [r0, #0]
 801268a:	7043      	strb	r3, [r0, #1]
 801268c:	dd29      	ble.n	80126e2 <__exponent+0x68>
 801268e:	f10d 0307 	add.w	r3, sp, #7
 8012692:	461d      	mov	r5, r3
 8012694:	270a      	movs	r7, #10
 8012696:	461a      	mov	r2, r3
 8012698:	fbb1 f6f7 	udiv	r6, r1, r7
 801269c:	fb07 1416 	mls	r4, r7, r6, r1
 80126a0:	3430      	adds	r4, #48	@ 0x30
 80126a2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80126a6:	460c      	mov	r4, r1
 80126a8:	2c63      	cmp	r4, #99	@ 0x63
 80126aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80126ae:	4631      	mov	r1, r6
 80126b0:	dcf1      	bgt.n	8012696 <__exponent+0x1c>
 80126b2:	3130      	adds	r1, #48	@ 0x30
 80126b4:	1e94      	subs	r4, r2, #2
 80126b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80126ba:	1c41      	adds	r1, r0, #1
 80126bc:	4623      	mov	r3, r4
 80126be:	42ab      	cmp	r3, r5
 80126c0:	d30a      	bcc.n	80126d8 <__exponent+0x5e>
 80126c2:	f10d 0309 	add.w	r3, sp, #9
 80126c6:	1a9b      	subs	r3, r3, r2
 80126c8:	42ac      	cmp	r4, r5
 80126ca:	bf88      	it	hi
 80126cc:	2300      	movhi	r3, #0
 80126ce:	3302      	adds	r3, #2
 80126d0:	4403      	add	r3, r0
 80126d2:	1a18      	subs	r0, r3, r0
 80126d4:	b003      	add	sp, #12
 80126d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126d8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80126dc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80126e0:	e7ed      	b.n	80126be <__exponent+0x44>
 80126e2:	2330      	movs	r3, #48	@ 0x30
 80126e4:	3130      	adds	r1, #48	@ 0x30
 80126e6:	7083      	strb	r3, [r0, #2]
 80126e8:	70c1      	strb	r1, [r0, #3]
 80126ea:	1d03      	adds	r3, r0, #4
 80126ec:	e7f1      	b.n	80126d2 <__exponent+0x58>
	...

080126f0 <_printf_float>:
 80126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f4:	b08d      	sub	sp, #52	@ 0x34
 80126f6:	460c      	mov	r4, r1
 80126f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80126fc:	4616      	mov	r6, r2
 80126fe:	461f      	mov	r7, r3
 8012700:	4605      	mov	r5, r0
 8012702:	f000 fda5 	bl	8013250 <_localeconv_r>
 8012706:	6803      	ldr	r3, [r0, #0]
 8012708:	9304      	str	r3, [sp, #16]
 801270a:	4618      	mov	r0, r3
 801270c:	f7ed fdb0 	bl	8000270 <strlen>
 8012710:	2300      	movs	r3, #0
 8012712:	930a      	str	r3, [sp, #40]	@ 0x28
 8012714:	f8d8 3000 	ldr.w	r3, [r8]
 8012718:	9005      	str	r0, [sp, #20]
 801271a:	3307      	adds	r3, #7
 801271c:	f023 0307 	bic.w	r3, r3, #7
 8012720:	f103 0208 	add.w	r2, r3, #8
 8012724:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012728:	f8d4 b000 	ldr.w	fp, [r4]
 801272c:	f8c8 2000 	str.w	r2, [r8]
 8012730:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012734:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012738:	9307      	str	r3, [sp, #28]
 801273a:	f8cd 8018 	str.w	r8, [sp, #24]
 801273e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012742:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012746:	4b9c      	ldr	r3, [pc, #624]	@ (80129b8 <_printf_float+0x2c8>)
 8012748:	f04f 32ff 	mov.w	r2, #4294967295
 801274c:	f7ee f9ee 	bl	8000b2c <__aeabi_dcmpun>
 8012750:	bb70      	cbnz	r0, 80127b0 <_printf_float+0xc0>
 8012752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012756:	4b98      	ldr	r3, [pc, #608]	@ (80129b8 <_printf_float+0x2c8>)
 8012758:	f04f 32ff 	mov.w	r2, #4294967295
 801275c:	f7ee f9c8 	bl	8000af0 <__aeabi_dcmple>
 8012760:	bb30      	cbnz	r0, 80127b0 <_printf_float+0xc0>
 8012762:	2200      	movs	r2, #0
 8012764:	2300      	movs	r3, #0
 8012766:	4640      	mov	r0, r8
 8012768:	4649      	mov	r1, r9
 801276a:	f7ee f9b7 	bl	8000adc <__aeabi_dcmplt>
 801276e:	b110      	cbz	r0, 8012776 <_printf_float+0x86>
 8012770:	232d      	movs	r3, #45	@ 0x2d
 8012772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012776:	4a91      	ldr	r2, [pc, #580]	@ (80129bc <_printf_float+0x2cc>)
 8012778:	4b91      	ldr	r3, [pc, #580]	@ (80129c0 <_printf_float+0x2d0>)
 801277a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801277e:	bf8c      	ite	hi
 8012780:	4690      	movhi	r8, r2
 8012782:	4698      	movls	r8, r3
 8012784:	2303      	movs	r3, #3
 8012786:	6123      	str	r3, [r4, #16]
 8012788:	f02b 0304 	bic.w	r3, fp, #4
 801278c:	6023      	str	r3, [r4, #0]
 801278e:	f04f 0900 	mov.w	r9, #0
 8012792:	9700      	str	r7, [sp, #0]
 8012794:	4633      	mov	r3, r6
 8012796:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012798:	4621      	mov	r1, r4
 801279a:	4628      	mov	r0, r5
 801279c:	f000 f9d2 	bl	8012b44 <_printf_common>
 80127a0:	3001      	adds	r0, #1
 80127a2:	f040 808d 	bne.w	80128c0 <_printf_float+0x1d0>
 80127a6:	f04f 30ff 	mov.w	r0, #4294967295
 80127aa:	b00d      	add	sp, #52	@ 0x34
 80127ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b0:	4642      	mov	r2, r8
 80127b2:	464b      	mov	r3, r9
 80127b4:	4640      	mov	r0, r8
 80127b6:	4649      	mov	r1, r9
 80127b8:	f7ee f9b8 	bl	8000b2c <__aeabi_dcmpun>
 80127bc:	b140      	cbz	r0, 80127d0 <_printf_float+0xe0>
 80127be:	464b      	mov	r3, r9
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	bfbc      	itt	lt
 80127c4:	232d      	movlt	r3, #45	@ 0x2d
 80127c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80127ca:	4a7e      	ldr	r2, [pc, #504]	@ (80129c4 <_printf_float+0x2d4>)
 80127cc:	4b7e      	ldr	r3, [pc, #504]	@ (80129c8 <_printf_float+0x2d8>)
 80127ce:	e7d4      	b.n	801277a <_printf_float+0x8a>
 80127d0:	6863      	ldr	r3, [r4, #4]
 80127d2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80127d6:	9206      	str	r2, [sp, #24]
 80127d8:	1c5a      	adds	r2, r3, #1
 80127da:	d13b      	bne.n	8012854 <_printf_float+0x164>
 80127dc:	2306      	movs	r3, #6
 80127de:	6063      	str	r3, [r4, #4]
 80127e0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80127e4:	2300      	movs	r3, #0
 80127e6:	6022      	str	r2, [r4, #0]
 80127e8:	9303      	str	r3, [sp, #12]
 80127ea:	ab0a      	add	r3, sp, #40	@ 0x28
 80127ec:	e9cd a301 	strd	sl, r3, [sp, #4]
 80127f0:	ab09      	add	r3, sp, #36	@ 0x24
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	6861      	ldr	r1, [r4, #4]
 80127f6:	ec49 8b10 	vmov	d0, r8, r9
 80127fa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80127fe:	4628      	mov	r0, r5
 8012800:	f7ff fed6 	bl	80125b0 <__cvt>
 8012804:	9b06      	ldr	r3, [sp, #24]
 8012806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012808:	2b47      	cmp	r3, #71	@ 0x47
 801280a:	4680      	mov	r8, r0
 801280c:	d129      	bne.n	8012862 <_printf_float+0x172>
 801280e:	1cc8      	adds	r0, r1, #3
 8012810:	db02      	blt.n	8012818 <_printf_float+0x128>
 8012812:	6863      	ldr	r3, [r4, #4]
 8012814:	4299      	cmp	r1, r3
 8012816:	dd41      	ble.n	801289c <_printf_float+0x1ac>
 8012818:	f1aa 0a02 	sub.w	sl, sl, #2
 801281c:	fa5f fa8a 	uxtb.w	sl, sl
 8012820:	3901      	subs	r1, #1
 8012822:	4652      	mov	r2, sl
 8012824:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012828:	9109      	str	r1, [sp, #36]	@ 0x24
 801282a:	f7ff ff26 	bl	801267a <__exponent>
 801282e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012830:	1813      	adds	r3, r2, r0
 8012832:	2a01      	cmp	r2, #1
 8012834:	4681      	mov	r9, r0
 8012836:	6123      	str	r3, [r4, #16]
 8012838:	dc02      	bgt.n	8012840 <_printf_float+0x150>
 801283a:	6822      	ldr	r2, [r4, #0]
 801283c:	07d2      	lsls	r2, r2, #31
 801283e:	d501      	bpl.n	8012844 <_printf_float+0x154>
 8012840:	3301      	adds	r3, #1
 8012842:	6123      	str	r3, [r4, #16]
 8012844:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012848:	2b00      	cmp	r3, #0
 801284a:	d0a2      	beq.n	8012792 <_printf_float+0xa2>
 801284c:	232d      	movs	r3, #45	@ 0x2d
 801284e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012852:	e79e      	b.n	8012792 <_printf_float+0xa2>
 8012854:	9a06      	ldr	r2, [sp, #24]
 8012856:	2a47      	cmp	r2, #71	@ 0x47
 8012858:	d1c2      	bne.n	80127e0 <_printf_float+0xf0>
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1c0      	bne.n	80127e0 <_printf_float+0xf0>
 801285e:	2301      	movs	r3, #1
 8012860:	e7bd      	b.n	80127de <_printf_float+0xee>
 8012862:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012866:	d9db      	bls.n	8012820 <_printf_float+0x130>
 8012868:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801286c:	d118      	bne.n	80128a0 <_printf_float+0x1b0>
 801286e:	2900      	cmp	r1, #0
 8012870:	6863      	ldr	r3, [r4, #4]
 8012872:	dd0b      	ble.n	801288c <_printf_float+0x19c>
 8012874:	6121      	str	r1, [r4, #16]
 8012876:	b913      	cbnz	r3, 801287e <_printf_float+0x18e>
 8012878:	6822      	ldr	r2, [r4, #0]
 801287a:	07d0      	lsls	r0, r2, #31
 801287c:	d502      	bpl.n	8012884 <_printf_float+0x194>
 801287e:	3301      	adds	r3, #1
 8012880:	440b      	add	r3, r1
 8012882:	6123      	str	r3, [r4, #16]
 8012884:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012886:	f04f 0900 	mov.w	r9, #0
 801288a:	e7db      	b.n	8012844 <_printf_float+0x154>
 801288c:	b913      	cbnz	r3, 8012894 <_printf_float+0x1a4>
 801288e:	6822      	ldr	r2, [r4, #0]
 8012890:	07d2      	lsls	r2, r2, #31
 8012892:	d501      	bpl.n	8012898 <_printf_float+0x1a8>
 8012894:	3302      	adds	r3, #2
 8012896:	e7f4      	b.n	8012882 <_printf_float+0x192>
 8012898:	2301      	movs	r3, #1
 801289a:	e7f2      	b.n	8012882 <_printf_float+0x192>
 801289c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80128a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128a2:	4299      	cmp	r1, r3
 80128a4:	db05      	blt.n	80128b2 <_printf_float+0x1c2>
 80128a6:	6823      	ldr	r3, [r4, #0]
 80128a8:	6121      	str	r1, [r4, #16]
 80128aa:	07d8      	lsls	r0, r3, #31
 80128ac:	d5ea      	bpl.n	8012884 <_printf_float+0x194>
 80128ae:	1c4b      	adds	r3, r1, #1
 80128b0:	e7e7      	b.n	8012882 <_printf_float+0x192>
 80128b2:	2900      	cmp	r1, #0
 80128b4:	bfd4      	ite	le
 80128b6:	f1c1 0202 	rsble	r2, r1, #2
 80128ba:	2201      	movgt	r2, #1
 80128bc:	4413      	add	r3, r2
 80128be:	e7e0      	b.n	8012882 <_printf_float+0x192>
 80128c0:	6823      	ldr	r3, [r4, #0]
 80128c2:	055a      	lsls	r2, r3, #21
 80128c4:	d407      	bmi.n	80128d6 <_printf_float+0x1e6>
 80128c6:	6923      	ldr	r3, [r4, #16]
 80128c8:	4642      	mov	r2, r8
 80128ca:	4631      	mov	r1, r6
 80128cc:	4628      	mov	r0, r5
 80128ce:	47b8      	blx	r7
 80128d0:	3001      	adds	r0, #1
 80128d2:	d12b      	bne.n	801292c <_printf_float+0x23c>
 80128d4:	e767      	b.n	80127a6 <_printf_float+0xb6>
 80128d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80128da:	f240 80dd 	bls.w	8012a98 <_printf_float+0x3a8>
 80128de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80128e2:	2200      	movs	r2, #0
 80128e4:	2300      	movs	r3, #0
 80128e6:	f7ee f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d033      	beq.n	8012956 <_printf_float+0x266>
 80128ee:	4a37      	ldr	r2, [pc, #220]	@ (80129cc <_printf_float+0x2dc>)
 80128f0:	2301      	movs	r3, #1
 80128f2:	4631      	mov	r1, r6
 80128f4:	4628      	mov	r0, r5
 80128f6:	47b8      	blx	r7
 80128f8:	3001      	adds	r0, #1
 80128fa:	f43f af54 	beq.w	80127a6 <_printf_float+0xb6>
 80128fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012902:	4543      	cmp	r3, r8
 8012904:	db02      	blt.n	801290c <_printf_float+0x21c>
 8012906:	6823      	ldr	r3, [r4, #0]
 8012908:	07d8      	lsls	r0, r3, #31
 801290a:	d50f      	bpl.n	801292c <_printf_float+0x23c>
 801290c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012910:	4631      	mov	r1, r6
 8012912:	4628      	mov	r0, r5
 8012914:	47b8      	blx	r7
 8012916:	3001      	adds	r0, #1
 8012918:	f43f af45 	beq.w	80127a6 <_printf_float+0xb6>
 801291c:	f04f 0900 	mov.w	r9, #0
 8012920:	f108 38ff 	add.w	r8, r8, #4294967295
 8012924:	f104 0a1a 	add.w	sl, r4, #26
 8012928:	45c8      	cmp	r8, r9
 801292a:	dc09      	bgt.n	8012940 <_printf_float+0x250>
 801292c:	6823      	ldr	r3, [r4, #0]
 801292e:	079b      	lsls	r3, r3, #30
 8012930:	f100 8103 	bmi.w	8012b3a <_printf_float+0x44a>
 8012934:	68e0      	ldr	r0, [r4, #12]
 8012936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012938:	4298      	cmp	r0, r3
 801293a:	bfb8      	it	lt
 801293c:	4618      	movlt	r0, r3
 801293e:	e734      	b.n	80127aa <_printf_float+0xba>
 8012940:	2301      	movs	r3, #1
 8012942:	4652      	mov	r2, sl
 8012944:	4631      	mov	r1, r6
 8012946:	4628      	mov	r0, r5
 8012948:	47b8      	blx	r7
 801294a:	3001      	adds	r0, #1
 801294c:	f43f af2b 	beq.w	80127a6 <_printf_float+0xb6>
 8012950:	f109 0901 	add.w	r9, r9, #1
 8012954:	e7e8      	b.n	8012928 <_printf_float+0x238>
 8012956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012958:	2b00      	cmp	r3, #0
 801295a:	dc39      	bgt.n	80129d0 <_printf_float+0x2e0>
 801295c:	4a1b      	ldr	r2, [pc, #108]	@ (80129cc <_printf_float+0x2dc>)
 801295e:	2301      	movs	r3, #1
 8012960:	4631      	mov	r1, r6
 8012962:	4628      	mov	r0, r5
 8012964:	47b8      	blx	r7
 8012966:	3001      	adds	r0, #1
 8012968:	f43f af1d 	beq.w	80127a6 <_printf_float+0xb6>
 801296c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012970:	ea59 0303 	orrs.w	r3, r9, r3
 8012974:	d102      	bne.n	801297c <_printf_float+0x28c>
 8012976:	6823      	ldr	r3, [r4, #0]
 8012978:	07d9      	lsls	r1, r3, #31
 801297a:	d5d7      	bpl.n	801292c <_printf_float+0x23c>
 801297c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012980:	4631      	mov	r1, r6
 8012982:	4628      	mov	r0, r5
 8012984:	47b8      	blx	r7
 8012986:	3001      	adds	r0, #1
 8012988:	f43f af0d 	beq.w	80127a6 <_printf_float+0xb6>
 801298c:	f04f 0a00 	mov.w	sl, #0
 8012990:	f104 0b1a 	add.w	fp, r4, #26
 8012994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012996:	425b      	negs	r3, r3
 8012998:	4553      	cmp	r3, sl
 801299a:	dc01      	bgt.n	80129a0 <_printf_float+0x2b0>
 801299c:	464b      	mov	r3, r9
 801299e:	e793      	b.n	80128c8 <_printf_float+0x1d8>
 80129a0:	2301      	movs	r3, #1
 80129a2:	465a      	mov	r2, fp
 80129a4:	4631      	mov	r1, r6
 80129a6:	4628      	mov	r0, r5
 80129a8:	47b8      	blx	r7
 80129aa:	3001      	adds	r0, #1
 80129ac:	f43f aefb 	beq.w	80127a6 <_printf_float+0xb6>
 80129b0:	f10a 0a01 	add.w	sl, sl, #1
 80129b4:	e7ee      	b.n	8012994 <_printf_float+0x2a4>
 80129b6:	bf00      	nop
 80129b8:	7fefffff 	.word	0x7fefffff
 80129bc:	08016702 	.word	0x08016702
 80129c0:	080166fe 	.word	0x080166fe
 80129c4:	0801670a 	.word	0x0801670a
 80129c8:	08016706 	.word	0x08016706
 80129cc:	0801670e 	.word	0x0801670e
 80129d0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129d2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80129d6:	4553      	cmp	r3, sl
 80129d8:	bfa8      	it	ge
 80129da:	4653      	movge	r3, sl
 80129dc:	2b00      	cmp	r3, #0
 80129de:	4699      	mov	r9, r3
 80129e0:	dc36      	bgt.n	8012a50 <_printf_float+0x360>
 80129e2:	f04f 0b00 	mov.w	fp, #0
 80129e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129ea:	f104 021a 	add.w	r2, r4, #26
 80129ee:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80129f0:	9306      	str	r3, [sp, #24]
 80129f2:	eba3 0309 	sub.w	r3, r3, r9
 80129f6:	455b      	cmp	r3, fp
 80129f8:	dc31      	bgt.n	8012a5e <_printf_float+0x36e>
 80129fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129fc:	459a      	cmp	sl, r3
 80129fe:	dc3a      	bgt.n	8012a76 <_printf_float+0x386>
 8012a00:	6823      	ldr	r3, [r4, #0]
 8012a02:	07da      	lsls	r2, r3, #31
 8012a04:	d437      	bmi.n	8012a76 <_printf_float+0x386>
 8012a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a08:	ebaa 0903 	sub.w	r9, sl, r3
 8012a0c:	9b06      	ldr	r3, [sp, #24]
 8012a0e:	ebaa 0303 	sub.w	r3, sl, r3
 8012a12:	4599      	cmp	r9, r3
 8012a14:	bfa8      	it	ge
 8012a16:	4699      	movge	r9, r3
 8012a18:	f1b9 0f00 	cmp.w	r9, #0
 8012a1c:	dc33      	bgt.n	8012a86 <_printf_float+0x396>
 8012a1e:	f04f 0800 	mov.w	r8, #0
 8012a22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a26:	f104 0b1a 	add.w	fp, r4, #26
 8012a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a2c:	ebaa 0303 	sub.w	r3, sl, r3
 8012a30:	eba3 0309 	sub.w	r3, r3, r9
 8012a34:	4543      	cmp	r3, r8
 8012a36:	f77f af79 	ble.w	801292c <_printf_float+0x23c>
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	465a      	mov	r2, fp
 8012a3e:	4631      	mov	r1, r6
 8012a40:	4628      	mov	r0, r5
 8012a42:	47b8      	blx	r7
 8012a44:	3001      	adds	r0, #1
 8012a46:	f43f aeae 	beq.w	80127a6 <_printf_float+0xb6>
 8012a4a:	f108 0801 	add.w	r8, r8, #1
 8012a4e:	e7ec      	b.n	8012a2a <_printf_float+0x33a>
 8012a50:	4642      	mov	r2, r8
 8012a52:	4631      	mov	r1, r6
 8012a54:	4628      	mov	r0, r5
 8012a56:	47b8      	blx	r7
 8012a58:	3001      	adds	r0, #1
 8012a5a:	d1c2      	bne.n	80129e2 <_printf_float+0x2f2>
 8012a5c:	e6a3      	b.n	80127a6 <_printf_float+0xb6>
 8012a5e:	2301      	movs	r3, #1
 8012a60:	4631      	mov	r1, r6
 8012a62:	4628      	mov	r0, r5
 8012a64:	9206      	str	r2, [sp, #24]
 8012a66:	47b8      	blx	r7
 8012a68:	3001      	adds	r0, #1
 8012a6a:	f43f ae9c 	beq.w	80127a6 <_printf_float+0xb6>
 8012a6e:	9a06      	ldr	r2, [sp, #24]
 8012a70:	f10b 0b01 	add.w	fp, fp, #1
 8012a74:	e7bb      	b.n	80129ee <_printf_float+0x2fe>
 8012a76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a7a:	4631      	mov	r1, r6
 8012a7c:	4628      	mov	r0, r5
 8012a7e:	47b8      	blx	r7
 8012a80:	3001      	adds	r0, #1
 8012a82:	d1c0      	bne.n	8012a06 <_printf_float+0x316>
 8012a84:	e68f      	b.n	80127a6 <_printf_float+0xb6>
 8012a86:	9a06      	ldr	r2, [sp, #24]
 8012a88:	464b      	mov	r3, r9
 8012a8a:	4442      	add	r2, r8
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	4628      	mov	r0, r5
 8012a90:	47b8      	blx	r7
 8012a92:	3001      	adds	r0, #1
 8012a94:	d1c3      	bne.n	8012a1e <_printf_float+0x32e>
 8012a96:	e686      	b.n	80127a6 <_printf_float+0xb6>
 8012a98:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a9c:	f1ba 0f01 	cmp.w	sl, #1
 8012aa0:	dc01      	bgt.n	8012aa6 <_printf_float+0x3b6>
 8012aa2:	07db      	lsls	r3, r3, #31
 8012aa4:	d536      	bpl.n	8012b14 <_printf_float+0x424>
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	4642      	mov	r2, r8
 8012aaa:	4631      	mov	r1, r6
 8012aac:	4628      	mov	r0, r5
 8012aae:	47b8      	blx	r7
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	f43f ae78 	beq.w	80127a6 <_printf_float+0xb6>
 8012ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aba:	4631      	mov	r1, r6
 8012abc:	4628      	mov	r0, r5
 8012abe:	47b8      	blx	r7
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	f43f ae70 	beq.w	80127a6 <_printf_float+0xb6>
 8012ac6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012aca:	2200      	movs	r2, #0
 8012acc:	2300      	movs	r3, #0
 8012ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012ad2:	f7ed fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ad6:	b9c0      	cbnz	r0, 8012b0a <_printf_float+0x41a>
 8012ad8:	4653      	mov	r3, sl
 8012ada:	f108 0201 	add.w	r2, r8, #1
 8012ade:	4631      	mov	r1, r6
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	47b8      	blx	r7
 8012ae4:	3001      	adds	r0, #1
 8012ae6:	d10c      	bne.n	8012b02 <_printf_float+0x412>
 8012ae8:	e65d      	b.n	80127a6 <_printf_float+0xb6>
 8012aea:	2301      	movs	r3, #1
 8012aec:	465a      	mov	r2, fp
 8012aee:	4631      	mov	r1, r6
 8012af0:	4628      	mov	r0, r5
 8012af2:	47b8      	blx	r7
 8012af4:	3001      	adds	r0, #1
 8012af6:	f43f ae56 	beq.w	80127a6 <_printf_float+0xb6>
 8012afa:	f108 0801 	add.w	r8, r8, #1
 8012afe:	45d0      	cmp	r8, sl
 8012b00:	dbf3      	blt.n	8012aea <_printf_float+0x3fa>
 8012b02:	464b      	mov	r3, r9
 8012b04:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012b08:	e6df      	b.n	80128ca <_printf_float+0x1da>
 8012b0a:	f04f 0800 	mov.w	r8, #0
 8012b0e:	f104 0b1a 	add.w	fp, r4, #26
 8012b12:	e7f4      	b.n	8012afe <_printf_float+0x40e>
 8012b14:	2301      	movs	r3, #1
 8012b16:	4642      	mov	r2, r8
 8012b18:	e7e1      	b.n	8012ade <_printf_float+0x3ee>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	464a      	mov	r2, r9
 8012b1e:	4631      	mov	r1, r6
 8012b20:	4628      	mov	r0, r5
 8012b22:	47b8      	blx	r7
 8012b24:	3001      	adds	r0, #1
 8012b26:	f43f ae3e 	beq.w	80127a6 <_printf_float+0xb6>
 8012b2a:	f108 0801 	add.w	r8, r8, #1
 8012b2e:	68e3      	ldr	r3, [r4, #12]
 8012b30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012b32:	1a5b      	subs	r3, r3, r1
 8012b34:	4543      	cmp	r3, r8
 8012b36:	dcf0      	bgt.n	8012b1a <_printf_float+0x42a>
 8012b38:	e6fc      	b.n	8012934 <_printf_float+0x244>
 8012b3a:	f04f 0800 	mov.w	r8, #0
 8012b3e:	f104 0919 	add.w	r9, r4, #25
 8012b42:	e7f4      	b.n	8012b2e <_printf_float+0x43e>

08012b44 <_printf_common>:
 8012b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b48:	4616      	mov	r6, r2
 8012b4a:	4698      	mov	r8, r3
 8012b4c:	688a      	ldr	r2, [r1, #8]
 8012b4e:	690b      	ldr	r3, [r1, #16]
 8012b50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012b54:	4293      	cmp	r3, r2
 8012b56:	bfb8      	it	lt
 8012b58:	4613      	movlt	r3, r2
 8012b5a:	6033      	str	r3, [r6, #0]
 8012b5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012b60:	4607      	mov	r7, r0
 8012b62:	460c      	mov	r4, r1
 8012b64:	b10a      	cbz	r2, 8012b6a <_printf_common+0x26>
 8012b66:	3301      	adds	r3, #1
 8012b68:	6033      	str	r3, [r6, #0]
 8012b6a:	6823      	ldr	r3, [r4, #0]
 8012b6c:	0699      	lsls	r1, r3, #26
 8012b6e:	bf42      	ittt	mi
 8012b70:	6833      	ldrmi	r3, [r6, #0]
 8012b72:	3302      	addmi	r3, #2
 8012b74:	6033      	strmi	r3, [r6, #0]
 8012b76:	6825      	ldr	r5, [r4, #0]
 8012b78:	f015 0506 	ands.w	r5, r5, #6
 8012b7c:	d106      	bne.n	8012b8c <_printf_common+0x48>
 8012b7e:	f104 0a19 	add.w	sl, r4, #25
 8012b82:	68e3      	ldr	r3, [r4, #12]
 8012b84:	6832      	ldr	r2, [r6, #0]
 8012b86:	1a9b      	subs	r3, r3, r2
 8012b88:	42ab      	cmp	r3, r5
 8012b8a:	dc26      	bgt.n	8012bda <_printf_common+0x96>
 8012b8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012b90:	6822      	ldr	r2, [r4, #0]
 8012b92:	3b00      	subs	r3, #0
 8012b94:	bf18      	it	ne
 8012b96:	2301      	movne	r3, #1
 8012b98:	0692      	lsls	r2, r2, #26
 8012b9a:	d42b      	bmi.n	8012bf4 <_printf_common+0xb0>
 8012b9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012ba0:	4641      	mov	r1, r8
 8012ba2:	4638      	mov	r0, r7
 8012ba4:	47c8      	blx	r9
 8012ba6:	3001      	adds	r0, #1
 8012ba8:	d01e      	beq.n	8012be8 <_printf_common+0xa4>
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	6922      	ldr	r2, [r4, #16]
 8012bae:	f003 0306 	and.w	r3, r3, #6
 8012bb2:	2b04      	cmp	r3, #4
 8012bb4:	bf02      	ittt	eq
 8012bb6:	68e5      	ldreq	r5, [r4, #12]
 8012bb8:	6833      	ldreq	r3, [r6, #0]
 8012bba:	1aed      	subeq	r5, r5, r3
 8012bbc:	68a3      	ldr	r3, [r4, #8]
 8012bbe:	bf0c      	ite	eq
 8012bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012bc4:	2500      	movne	r5, #0
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	bfc4      	itt	gt
 8012bca:	1a9b      	subgt	r3, r3, r2
 8012bcc:	18ed      	addgt	r5, r5, r3
 8012bce:	2600      	movs	r6, #0
 8012bd0:	341a      	adds	r4, #26
 8012bd2:	42b5      	cmp	r5, r6
 8012bd4:	d11a      	bne.n	8012c0c <_printf_common+0xc8>
 8012bd6:	2000      	movs	r0, #0
 8012bd8:	e008      	b.n	8012bec <_printf_common+0xa8>
 8012bda:	2301      	movs	r3, #1
 8012bdc:	4652      	mov	r2, sl
 8012bde:	4641      	mov	r1, r8
 8012be0:	4638      	mov	r0, r7
 8012be2:	47c8      	blx	r9
 8012be4:	3001      	adds	r0, #1
 8012be6:	d103      	bne.n	8012bf0 <_printf_common+0xac>
 8012be8:	f04f 30ff 	mov.w	r0, #4294967295
 8012bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bf0:	3501      	adds	r5, #1
 8012bf2:	e7c6      	b.n	8012b82 <_printf_common+0x3e>
 8012bf4:	18e1      	adds	r1, r4, r3
 8012bf6:	1c5a      	adds	r2, r3, #1
 8012bf8:	2030      	movs	r0, #48	@ 0x30
 8012bfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012bfe:	4422      	add	r2, r4
 8012c00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012c04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012c08:	3302      	adds	r3, #2
 8012c0a:	e7c7      	b.n	8012b9c <_printf_common+0x58>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	4622      	mov	r2, r4
 8012c10:	4641      	mov	r1, r8
 8012c12:	4638      	mov	r0, r7
 8012c14:	47c8      	blx	r9
 8012c16:	3001      	adds	r0, #1
 8012c18:	d0e6      	beq.n	8012be8 <_printf_common+0xa4>
 8012c1a:	3601      	adds	r6, #1
 8012c1c:	e7d9      	b.n	8012bd2 <_printf_common+0x8e>
	...

08012c20 <_printf_i>:
 8012c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c24:	7e0f      	ldrb	r7, [r1, #24]
 8012c26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012c28:	2f78      	cmp	r7, #120	@ 0x78
 8012c2a:	4691      	mov	r9, r2
 8012c2c:	4680      	mov	r8, r0
 8012c2e:	460c      	mov	r4, r1
 8012c30:	469a      	mov	sl, r3
 8012c32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012c36:	d807      	bhi.n	8012c48 <_printf_i+0x28>
 8012c38:	2f62      	cmp	r7, #98	@ 0x62
 8012c3a:	d80a      	bhi.n	8012c52 <_printf_i+0x32>
 8012c3c:	2f00      	cmp	r7, #0
 8012c3e:	f000 80d1 	beq.w	8012de4 <_printf_i+0x1c4>
 8012c42:	2f58      	cmp	r7, #88	@ 0x58
 8012c44:	f000 80b8 	beq.w	8012db8 <_printf_i+0x198>
 8012c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012c50:	e03a      	b.n	8012cc8 <_printf_i+0xa8>
 8012c52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012c56:	2b15      	cmp	r3, #21
 8012c58:	d8f6      	bhi.n	8012c48 <_printf_i+0x28>
 8012c5a:	a101      	add	r1, pc, #4	@ (adr r1, 8012c60 <_printf_i+0x40>)
 8012c5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c60:	08012cb9 	.word	0x08012cb9
 8012c64:	08012ccd 	.word	0x08012ccd
 8012c68:	08012c49 	.word	0x08012c49
 8012c6c:	08012c49 	.word	0x08012c49
 8012c70:	08012c49 	.word	0x08012c49
 8012c74:	08012c49 	.word	0x08012c49
 8012c78:	08012ccd 	.word	0x08012ccd
 8012c7c:	08012c49 	.word	0x08012c49
 8012c80:	08012c49 	.word	0x08012c49
 8012c84:	08012c49 	.word	0x08012c49
 8012c88:	08012c49 	.word	0x08012c49
 8012c8c:	08012dcb 	.word	0x08012dcb
 8012c90:	08012cf7 	.word	0x08012cf7
 8012c94:	08012d85 	.word	0x08012d85
 8012c98:	08012c49 	.word	0x08012c49
 8012c9c:	08012c49 	.word	0x08012c49
 8012ca0:	08012ded 	.word	0x08012ded
 8012ca4:	08012c49 	.word	0x08012c49
 8012ca8:	08012cf7 	.word	0x08012cf7
 8012cac:	08012c49 	.word	0x08012c49
 8012cb0:	08012c49 	.word	0x08012c49
 8012cb4:	08012d8d 	.word	0x08012d8d
 8012cb8:	6833      	ldr	r3, [r6, #0]
 8012cba:	1d1a      	adds	r2, r3, #4
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	6032      	str	r2, [r6, #0]
 8012cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012cc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012cc8:	2301      	movs	r3, #1
 8012cca:	e09c      	b.n	8012e06 <_printf_i+0x1e6>
 8012ccc:	6833      	ldr	r3, [r6, #0]
 8012cce:	6820      	ldr	r0, [r4, #0]
 8012cd0:	1d19      	adds	r1, r3, #4
 8012cd2:	6031      	str	r1, [r6, #0]
 8012cd4:	0606      	lsls	r6, r0, #24
 8012cd6:	d501      	bpl.n	8012cdc <_printf_i+0xbc>
 8012cd8:	681d      	ldr	r5, [r3, #0]
 8012cda:	e003      	b.n	8012ce4 <_printf_i+0xc4>
 8012cdc:	0645      	lsls	r5, r0, #25
 8012cde:	d5fb      	bpl.n	8012cd8 <_printf_i+0xb8>
 8012ce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ce4:	2d00      	cmp	r5, #0
 8012ce6:	da03      	bge.n	8012cf0 <_printf_i+0xd0>
 8012ce8:	232d      	movs	r3, #45	@ 0x2d
 8012cea:	426d      	negs	r5, r5
 8012cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cf0:	4858      	ldr	r0, [pc, #352]	@ (8012e54 <_printf_i+0x234>)
 8012cf2:	230a      	movs	r3, #10
 8012cf4:	e011      	b.n	8012d1a <_printf_i+0xfa>
 8012cf6:	6821      	ldr	r1, [r4, #0]
 8012cf8:	6833      	ldr	r3, [r6, #0]
 8012cfa:	0608      	lsls	r0, r1, #24
 8012cfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012d00:	d402      	bmi.n	8012d08 <_printf_i+0xe8>
 8012d02:	0649      	lsls	r1, r1, #25
 8012d04:	bf48      	it	mi
 8012d06:	b2ad      	uxthmi	r5, r5
 8012d08:	2f6f      	cmp	r7, #111	@ 0x6f
 8012d0a:	4852      	ldr	r0, [pc, #328]	@ (8012e54 <_printf_i+0x234>)
 8012d0c:	6033      	str	r3, [r6, #0]
 8012d0e:	bf14      	ite	ne
 8012d10:	230a      	movne	r3, #10
 8012d12:	2308      	moveq	r3, #8
 8012d14:	2100      	movs	r1, #0
 8012d16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012d1a:	6866      	ldr	r6, [r4, #4]
 8012d1c:	60a6      	str	r6, [r4, #8]
 8012d1e:	2e00      	cmp	r6, #0
 8012d20:	db05      	blt.n	8012d2e <_printf_i+0x10e>
 8012d22:	6821      	ldr	r1, [r4, #0]
 8012d24:	432e      	orrs	r6, r5
 8012d26:	f021 0104 	bic.w	r1, r1, #4
 8012d2a:	6021      	str	r1, [r4, #0]
 8012d2c:	d04b      	beq.n	8012dc6 <_printf_i+0x1a6>
 8012d2e:	4616      	mov	r6, r2
 8012d30:	fbb5 f1f3 	udiv	r1, r5, r3
 8012d34:	fb03 5711 	mls	r7, r3, r1, r5
 8012d38:	5dc7      	ldrb	r7, [r0, r7]
 8012d3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012d3e:	462f      	mov	r7, r5
 8012d40:	42bb      	cmp	r3, r7
 8012d42:	460d      	mov	r5, r1
 8012d44:	d9f4      	bls.n	8012d30 <_printf_i+0x110>
 8012d46:	2b08      	cmp	r3, #8
 8012d48:	d10b      	bne.n	8012d62 <_printf_i+0x142>
 8012d4a:	6823      	ldr	r3, [r4, #0]
 8012d4c:	07df      	lsls	r7, r3, #31
 8012d4e:	d508      	bpl.n	8012d62 <_printf_i+0x142>
 8012d50:	6923      	ldr	r3, [r4, #16]
 8012d52:	6861      	ldr	r1, [r4, #4]
 8012d54:	4299      	cmp	r1, r3
 8012d56:	bfde      	ittt	le
 8012d58:	2330      	movle	r3, #48	@ 0x30
 8012d5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012d5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012d62:	1b92      	subs	r2, r2, r6
 8012d64:	6122      	str	r2, [r4, #16]
 8012d66:	f8cd a000 	str.w	sl, [sp]
 8012d6a:	464b      	mov	r3, r9
 8012d6c:	aa03      	add	r2, sp, #12
 8012d6e:	4621      	mov	r1, r4
 8012d70:	4640      	mov	r0, r8
 8012d72:	f7ff fee7 	bl	8012b44 <_printf_common>
 8012d76:	3001      	adds	r0, #1
 8012d78:	d14a      	bne.n	8012e10 <_printf_i+0x1f0>
 8012d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d7e:	b004      	add	sp, #16
 8012d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d84:	6823      	ldr	r3, [r4, #0]
 8012d86:	f043 0320 	orr.w	r3, r3, #32
 8012d8a:	6023      	str	r3, [r4, #0]
 8012d8c:	4832      	ldr	r0, [pc, #200]	@ (8012e58 <_printf_i+0x238>)
 8012d8e:	2778      	movs	r7, #120	@ 0x78
 8012d90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012d94:	6823      	ldr	r3, [r4, #0]
 8012d96:	6831      	ldr	r1, [r6, #0]
 8012d98:	061f      	lsls	r7, r3, #24
 8012d9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8012d9e:	d402      	bmi.n	8012da6 <_printf_i+0x186>
 8012da0:	065f      	lsls	r7, r3, #25
 8012da2:	bf48      	it	mi
 8012da4:	b2ad      	uxthmi	r5, r5
 8012da6:	6031      	str	r1, [r6, #0]
 8012da8:	07d9      	lsls	r1, r3, #31
 8012daa:	bf44      	itt	mi
 8012dac:	f043 0320 	orrmi.w	r3, r3, #32
 8012db0:	6023      	strmi	r3, [r4, #0]
 8012db2:	b11d      	cbz	r5, 8012dbc <_printf_i+0x19c>
 8012db4:	2310      	movs	r3, #16
 8012db6:	e7ad      	b.n	8012d14 <_printf_i+0xf4>
 8012db8:	4826      	ldr	r0, [pc, #152]	@ (8012e54 <_printf_i+0x234>)
 8012dba:	e7e9      	b.n	8012d90 <_printf_i+0x170>
 8012dbc:	6823      	ldr	r3, [r4, #0]
 8012dbe:	f023 0320 	bic.w	r3, r3, #32
 8012dc2:	6023      	str	r3, [r4, #0]
 8012dc4:	e7f6      	b.n	8012db4 <_printf_i+0x194>
 8012dc6:	4616      	mov	r6, r2
 8012dc8:	e7bd      	b.n	8012d46 <_printf_i+0x126>
 8012dca:	6833      	ldr	r3, [r6, #0]
 8012dcc:	6825      	ldr	r5, [r4, #0]
 8012dce:	6961      	ldr	r1, [r4, #20]
 8012dd0:	1d18      	adds	r0, r3, #4
 8012dd2:	6030      	str	r0, [r6, #0]
 8012dd4:	062e      	lsls	r6, r5, #24
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	d501      	bpl.n	8012dde <_printf_i+0x1be>
 8012dda:	6019      	str	r1, [r3, #0]
 8012ddc:	e002      	b.n	8012de4 <_printf_i+0x1c4>
 8012dde:	0668      	lsls	r0, r5, #25
 8012de0:	d5fb      	bpl.n	8012dda <_printf_i+0x1ba>
 8012de2:	8019      	strh	r1, [r3, #0]
 8012de4:	2300      	movs	r3, #0
 8012de6:	6123      	str	r3, [r4, #16]
 8012de8:	4616      	mov	r6, r2
 8012dea:	e7bc      	b.n	8012d66 <_printf_i+0x146>
 8012dec:	6833      	ldr	r3, [r6, #0]
 8012dee:	1d1a      	adds	r2, r3, #4
 8012df0:	6032      	str	r2, [r6, #0]
 8012df2:	681e      	ldr	r6, [r3, #0]
 8012df4:	6862      	ldr	r2, [r4, #4]
 8012df6:	2100      	movs	r1, #0
 8012df8:	4630      	mov	r0, r6
 8012dfa:	f7ed f9e9 	bl	80001d0 <memchr>
 8012dfe:	b108      	cbz	r0, 8012e04 <_printf_i+0x1e4>
 8012e00:	1b80      	subs	r0, r0, r6
 8012e02:	6060      	str	r0, [r4, #4]
 8012e04:	6863      	ldr	r3, [r4, #4]
 8012e06:	6123      	str	r3, [r4, #16]
 8012e08:	2300      	movs	r3, #0
 8012e0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e0e:	e7aa      	b.n	8012d66 <_printf_i+0x146>
 8012e10:	6923      	ldr	r3, [r4, #16]
 8012e12:	4632      	mov	r2, r6
 8012e14:	4649      	mov	r1, r9
 8012e16:	4640      	mov	r0, r8
 8012e18:	47d0      	blx	sl
 8012e1a:	3001      	adds	r0, #1
 8012e1c:	d0ad      	beq.n	8012d7a <_printf_i+0x15a>
 8012e1e:	6823      	ldr	r3, [r4, #0]
 8012e20:	079b      	lsls	r3, r3, #30
 8012e22:	d413      	bmi.n	8012e4c <_printf_i+0x22c>
 8012e24:	68e0      	ldr	r0, [r4, #12]
 8012e26:	9b03      	ldr	r3, [sp, #12]
 8012e28:	4298      	cmp	r0, r3
 8012e2a:	bfb8      	it	lt
 8012e2c:	4618      	movlt	r0, r3
 8012e2e:	e7a6      	b.n	8012d7e <_printf_i+0x15e>
 8012e30:	2301      	movs	r3, #1
 8012e32:	4632      	mov	r2, r6
 8012e34:	4649      	mov	r1, r9
 8012e36:	4640      	mov	r0, r8
 8012e38:	47d0      	blx	sl
 8012e3a:	3001      	adds	r0, #1
 8012e3c:	d09d      	beq.n	8012d7a <_printf_i+0x15a>
 8012e3e:	3501      	adds	r5, #1
 8012e40:	68e3      	ldr	r3, [r4, #12]
 8012e42:	9903      	ldr	r1, [sp, #12]
 8012e44:	1a5b      	subs	r3, r3, r1
 8012e46:	42ab      	cmp	r3, r5
 8012e48:	dcf2      	bgt.n	8012e30 <_printf_i+0x210>
 8012e4a:	e7eb      	b.n	8012e24 <_printf_i+0x204>
 8012e4c:	2500      	movs	r5, #0
 8012e4e:	f104 0619 	add.w	r6, r4, #25
 8012e52:	e7f5      	b.n	8012e40 <_printf_i+0x220>
 8012e54:	08016710 	.word	0x08016710
 8012e58:	08016721 	.word	0x08016721

08012e5c <std>:
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	b510      	push	{r4, lr}
 8012e60:	4604      	mov	r4, r0
 8012e62:	e9c0 3300 	strd	r3, r3, [r0]
 8012e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e6a:	6083      	str	r3, [r0, #8]
 8012e6c:	8181      	strh	r1, [r0, #12]
 8012e6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012e70:	81c2      	strh	r2, [r0, #14]
 8012e72:	6183      	str	r3, [r0, #24]
 8012e74:	4619      	mov	r1, r3
 8012e76:	2208      	movs	r2, #8
 8012e78:	305c      	adds	r0, #92	@ 0x5c
 8012e7a:	f000 f966 	bl	801314a <memset>
 8012e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8012eb4 <std+0x58>)
 8012e80:	6263      	str	r3, [r4, #36]	@ 0x24
 8012e82:	4b0d      	ldr	r3, [pc, #52]	@ (8012eb8 <std+0x5c>)
 8012e84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012e86:	4b0d      	ldr	r3, [pc, #52]	@ (8012ebc <std+0x60>)
 8012e88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ec0 <std+0x64>)
 8012e8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ec4 <std+0x68>)
 8012e90:	6224      	str	r4, [r4, #32]
 8012e92:	429c      	cmp	r4, r3
 8012e94:	d006      	beq.n	8012ea4 <std+0x48>
 8012e96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012e9a:	4294      	cmp	r4, r2
 8012e9c:	d002      	beq.n	8012ea4 <std+0x48>
 8012e9e:	33d0      	adds	r3, #208	@ 0xd0
 8012ea0:	429c      	cmp	r4, r3
 8012ea2:	d105      	bne.n	8012eb0 <std+0x54>
 8012ea4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012eac:	f000 bab2 	b.w	8013414 <__retarget_lock_init_recursive>
 8012eb0:	bd10      	pop	{r4, pc}
 8012eb2:	bf00      	nop
 8012eb4:	08013091 	.word	0x08013091
 8012eb8:	080130b3 	.word	0x080130b3
 8012ebc:	080130eb 	.word	0x080130eb
 8012ec0:	0801310f 	.word	0x0801310f
 8012ec4:	200136ec 	.word	0x200136ec

08012ec8 <stdio_exit_handler>:
 8012ec8:	4a02      	ldr	r2, [pc, #8]	@ (8012ed4 <stdio_exit_handler+0xc>)
 8012eca:	4903      	ldr	r1, [pc, #12]	@ (8012ed8 <stdio_exit_handler+0x10>)
 8012ecc:	4803      	ldr	r0, [pc, #12]	@ (8012edc <stdio_exit_handler+0x14>)
 8012ece:	f000 b869 	b.w	8012fa4 <_fwalk_sglue>
 8012ed2:	bf00      	nop
 8012ed4:	20000294 	.word	0x20000294
 8012ed8:	08015599 	.word	0x08015599
 8012edc:	20000410 	.word	0x20000410

08012ee0 <cleanup_stdio>:
 8012ee0:	6841      	ldr	r1, [r0, #4]
 8012ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8012f14 <cleanup_stdio+0x34>)
 8012ee4:	4299      	cmp	r1, r3
 8012ee6:	b510      	push	{r4, lr}
 8012ee8:	4604      	mov	r4, r0
 8012eea:	d001      	beq.n	8012ef0 <cleanup_stdio+0x10>
 8012eec:	f002 fb54 	bl	8015598 <_fflush_r>
 8012ef0:	68a1      	ldr	r1, [r4, #8]
 8012ef2:	4b09      	ldr	r3, [pc, #36]	@ (8012f18 <cleanup_stdio+0x38>)
 8012ef4:	4299      	cmp	r1, r3
 8012ef6:	d002      	beq.n	8012efe <cleanup_stdio+0x1e>
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f002 fb4d 	bl	8015598 <_fflush_r>
 8012efe:	68e1      	ldr	r1, [r4, #12]
 8012f00:	4b06      	ldr	r3, [pc, #24]	@ (8012f1c <cleanup_stdio+0x3c>)
 8012f02:	4299      	cmp	r1, r3
 8012f04:	d004      	beq.n	8012f10 <cleanup_stdio+0x30>
 8012f06:	4620      	mov	r0, r4
 8012f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f0c:	f002 bb44 	b.w	8015598 <_fflush_r>
 8012f10:	bd10      	pop	{r4, pc}
 8012f12:	bf00      	nop
 8012f14:	200136ec 	.word	0x200136ec
 8012f18:	20013754 	.word	0x20013754
 8012f1c:	200137bc 	.word	0x200137bc

08012f20 <global_stdio_init.part.0>:
 8012f20:	b510      	push	{r4, lr}
 8012f22:	4b0b      	ldr	r3, [pc, #44]	@ (8012f50 <global_stdio_init.part.0+0x30>)
 8012f24:	4c0b      	ldr	r4, [pc, #44]	@ (8012f54 <global_stdio_init.part.0+0x34>)
 8012f26:	4a0c      	ldr	r2, [pc, #48]	@ (8012f58 <global_stdio_init.part.0+0x38>)
 8012f28:	601a      	str	r2, [r3, #0]
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	2104      	movs	r1, #4
 8012f30:	f7ff ff94 	bl	8012e5c <std>
 8012f34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012f38:	2201      	movs	r2, #1
 8012f3a:	2109      	movs	r1, #9
 8012f3c:	f7ff ff8e 	bl	8012e5c <std>
 8012f40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012f44:	2202      	movs	r2, #2
 8012f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f4a:	2112      	movs	r1, #18
 8012f4c:	f7ff bf86 	b.w	8012e5c <std>
 8012f50:	20013824 	.word	0x20013824
 8012f54:	200136ec 	.word	0x200136ec
 8012f58:	08012ec9 	.word	0x08012ec9

08012f5c <__sfp_lock_acquire>:
 8012f5c:	4801      	ldr	r0, [pc, #4]	@ (8012f64 <__sfp_lock_acquire+0x8>)
 8012f5e:	f000 ba5a 	b.w	8013416 <__retarget_lock_acquire_recursive>
 8012f62:	bf00      	nop
 8012f64:	2001382d 	.word	0x2001382d

08012f68 <__sfp_lock_release>:
 8012f68:	4801      	ldr	r0, [pc, #4]	@ (8012f70 <__sfp_lock_release+0x8>)
 8012f6a:	f000 ba55 	b.w	8013418 <__retarget_lock_release_recursive>
 8012f6e:	bf00      	nop
 8012f70:	2001382d 	.word	0x2001382d

08012f74 <__sinit>:
 8012f74:	b510      	push	{r4, lr}
 8012f76:	4604      	mov	r4, r0
 8012f78:	f7ff fff0 	bl	8012f5c <__sfp_lock_acquire>
 8012f7c:	6a23      	ldr	r3, [r4, #32]
 8012f7e:	b11b      	cbz	r3, 8012f88 <__sinit+0x14>
 8012f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f84:	f7ff bff0 	b.w	8012f68 <__sfp_lock_release>
 8012f88:	4b04      	ldr	r3, [pc, #16]	@ (8012f9c <__sinit+0x28>)
 8012f8a:	6223      	str	r3, [r4, #32]
 8012f8c:	4b04      	ldr	r3, [pc, #16]	@ (8012fa0 <__sinit+0x2c>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d1f5      	bne.n	8012f80 <__sinit+0xc>
 8012f94:	f7ff ffc4 	bl	8012f20 <global_stdio_init.part.0>
 8012f98:	e7f2      	b.n	8012f80 <__sinit+0xc>
 8012f9a:	bf00      	nop
 8012f9c:	08012ee1 	.word	0x08012ee1
 8012fa0:	20013824 	.word	0x20013824

08012fa4 <_fwalk_sglue>:
 8012fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fa8:	4607      	mov	r7, r0
 8012faa:	4688      	mov	r8, r1
 8012fac:	4614      	mov	r4, r2
 8012fae:	2600      	movs	r6, #0
 8012fb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012fb4:	f1b9 0901 	subs.w	r9, r9, #1
 8012fb8:	d505      	bpl.n	8012fc6 <_fwalk_sglue+0x22>
 8012fba:	6824      	ldr	r4, [r4, #0]
 8012fbc:	2c00      	cmp	r4, #0
 8012fbe:	d1f7      	bne.n	8012fb0 <_fwalk_sglue+0xc>
 8012fc0:	4630      	mov	r0, r6
 8012fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fc6:	89ab      	ldrh	r3, [r5, #12]
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d907      	bls.n	8012fdc <_fwalk_sglue+0x38>
 8012fcc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	d003      	beq.n	8012fdc <_fwalk_sglue+0x38>
 8012fd4:	4629      	mov	r1, r5
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	47c0      	blx	r8
 8012fda:	4306      	orrs	r6, r0
 8012fdc:	3568      	adds	r5, #104	@ 0x68
 8012fde:	e7e9      	b.n	8012fb4 <_fwalk_sglue+0x10>

08012fe0 <sniprintf>:
 8012fe0:	b40c      	push	{r2, r3}
 8012fe2:	b530      	push	{r4, r5, lr}
 8012fe4:	4b18      	ldr	r3, [pc, #96]	@ (8013048 <sniprintf+0x68>)
 8012fe6:	1e0c      	subs	r4, r1, #0
 8012fe8:	681d      	ldr	r5, [r3, #0]
 8012fea:	b09d      	sub	sp, #116	@ 0x74
 8012fec:	da08      	bge.n	8013000 <sniprintf+0x20>
 8012fee:	238b      	movs	r3, #139	@ 0x8b
 8012ff0:	602b      	str	r3, [r5, #0]
 8012ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ff6:	b01d      	add	sp, #116	@ 0x74
 8012ff8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ffc:	b002      	add	sp, #8
 8012ffe:	4770      	bx	lr
 8013000:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013004:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013008:	f04f 0300 	mov.w	r3, #0
 801300c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801300e:	bf14      	ite	ne
 8013010:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013014:	4623      	moveq	r3, r4
 8013016:	9304      	str	r3, [sp, #16]
 8013018:	9307      	str	r3, [sp, #28]
 801301a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801301e:	9002      	str	r0, [sp, #8]
 8013020:	9006      	str	r0, [sp, #24]
 8013022:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013026:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013028:	ab21      	add	r3, sp, #132	@ 0x84
 801302a:	a902      	add	r1, sp, #8
 801302c:	4628      	mov	r0, r5
 801302e:	9301      	str	r3, [sp, #4]
 8013030:	f002 f932 	bl	8015298 <_svfiprintf_r>
 8013034:	1c43      	adds	r3, r0, #1
 8013036:	bfbc      	itt	lt
 8013038:	238b      	movlt	r3, #139	@ 0x8b
 801303a:	602b      	strlt	r3, [r5, #0]
 801303c:	2c00      	cmp	r4, #0
 801303e:	d0da      	beq.n	8012ff6 <sniprintf+0x16>
 8013040:	9b02      	ldr	r3, [sp, #8]
 8013042:	2200      	movs	r2, #0
 8013044:	701a      	strb	r2, [r3, #0]
 8013046:	e7d6      	b.n	8012ff6 <sniprintf+0x16>
 8013048:	2000040c 	.word	0x2000040c

0801304c <siprintf>:
 801304c:	b40e      	push	{r1, r2, r3}
 801304e:	b510      	push	{r4, lr}
 8013050:	b09d      	sub	sp, #116	@ 0x74
 8013052:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013054:	9002      	str	r0, [sp, #8]
 8013056:	9006      	str	r0, [sp, #24]
 8013058:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801305c:	480a      	ldr	r0, [pc, #40]	@ (8013088 <siprintf+0x3c>)
 801305e:	9107      	str	r1, [sp, #28]
 8013060:	9104      	str	r1, [sp, #16]
 8013062:	490a      	ldr	r1, [pc, #40]	@ (801308c <siprintf+0x40>)
 8013064:	f853 2b04 	ldr.w	r2, [r3], #4
 8013068:	9105      	str	r1, [sp, #20]
 801306a:	2400      	movs	r4, #0
 801306c:	a902      	add	r1, sp, #8
 801306e:	6800      	ldr	r0, [r0, #0]
 8013070:	9301      	str	r3, [sp, #4]
 8013072:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013074:	f002 f910 	bl	8015298 <_svfiprintf_r>
 8013078:	9b02      	ldr	r3, [sp, #8]
 801307a:	701c      	strb	r4, [r3, #0]
 801307c:	b01d      	add	sp, #116	@ 0x74
 801307e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013082:	b003      	add	sp, #12
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	2000040c 	.word	0x2000040c
 801308c:	ffff0208 	.word	0xffff0208

08013090 <__sread>:
 8013090:	b510      	push	{r4, lr}
 8013092:	460c      	mov	r4, r1
 8013094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013098:	f000 f95e 	bl	8013358 <_read_r>
 801309c:	2800      	cmp	r0, #0
 801309e:	bfab      	itete	ge
 80130a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80130a2:	89a3      	ldrhlt	r3, [r4, #12]
 80130a4:	181b      	addge	r3, r3, r0
 80130a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80130aa:	bfac      	ite	ge
 80130ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80130ae:	81a3      	strhlt	r3, [r4, #12]
 80130b0:	bd10      	pop	{r4, pc}

080130b2 <__swrite>:
 80130b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b6:	461f      	mov	r7, r3
 80130b8:	898b      	ldrh	r3, [r1, #12]
 80130ba:	05db      	lsls	r3, r3, #23
 80130bc:	4605      	mov	r5, r0
 80130be:	460c      	mov	r4, r1
 80130c0:	4616      	mov	r6, r2
 80130c2:	d505      	bpl.n	80130d0 <__swrite+0x1e>
 80130c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130c8:	2302      	movs	r3, #2
 80130ca:	2200      	movs	r2, #0
 80130cc:	f000 f932 	bl	8013334 <_lseek_r>
 80130d0:	89a3      	ldrh	r3, [r4, #12]
 80130d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80130da:	81a3      	strh	r3, [r4, #12]
 80130dc:	4632      	mov	r2, r6
 80130de:	463b      	mov	r3, r7
 80130e0:	4628      	mov	r0, r5
 80130e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130e6:	f000 b959 	b.w	801339c <_write_r>

080130ea <__sseek>:
 80130ea:	b510      	push	{r4, lr}
 80130ec:	460c      	mov	r4, r1
 80130ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130f2:	f000 f91f 	bl	8013334 <_lseek_r>
 80130f6:	1c43      	adds	r3, r0, #1
 80130f8:	89a3      	ldrh	r3, [r4, #12]
 80130fa:	bf15      	itete	ne
 80130fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80130fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013102:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013106:	81a3      	strheq	r3, [r4, #12]
 8013108:	bf18      	it	ne
 801310a:	81a3      	strhne	r3, [r4, #12]
 801310c:	bd10      	pop	{r4, pc}

0801310e <__sclose>:
 801310e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013112:	f000 b8a1 	b.w	8013258 <_close_r>

08013116 <memmove>:
 8013116:	4288      	cmp	r0, r1
 8013118:	b510      	push	{r4, lr}
 801311a:	eb01 0402 	add.w	r4, r1, r2
 801311e:	d902      	bls.n	8013126 <memmove+0x10>
 8013120:	4284      	cmp	r4, r0
 8013122:	4623      	mov	r3, r4
 8013124:	d807      	bhi.n	8013136 <memmove+0x20>
 8013126:	1e43      	subs	r3, r0, #1
 8013128:	42a1      	cmp	r1, r4
 801312a:	d008      	beq.n	801313e <memmove+0x28>
 801312c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013130:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013134:	e7f8      	b.n	8013128 <memmove+0x12>
 8013136:	4402      	add	r2, r0
 8013138:	4601      	mov	r1, r0
 801313a:	428a      	cmp	r2, r1
 801313c:	d100      	bne.n	8013140 <memmove+0x2a>
 801313e:	bd10      	pop	{r4, pc}
 8013140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013144:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013148:	e7f7      	b.n	801313a <memmove+0x24>

0801314a <memset>:
 801314a:	4402      	add	r2, r0
 801314c:	4603      	mov	r3, r0
 801314e:	4293      	cmp	r3, r2
 8013150:	d100      	bne.n	8013154 <memset+0xa>
 8013152:	4770      	bx	lr
 8013154:	f803 1b01 	strb.w	r1, [r3], #1
 8013158:	e7f9      	b.n	801314e <memset+0x4>

0801315a <strchr>:
 801315a:	b2c9      	uxtb	r1, r1
 801315c:	4603      	mov	r3, r0
 801315e:	4618      	mov	r0, r3
 8013160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013164:	b112      	cbz	r2, 801316c <strchr+0x12>
 8013166:	428a      	cmp	r2, r1
 8013168:	d1f9      	bne.n	801315e <strchr+0x4>
 801316a:	4770      	bx	lr
 801316c:	2900      	cmp	r1, #0
 801316e:	bf18      	it	ne
 8013170:	2000      	movne	r0, #0
 8013172:	4770      	bx	lr

08013174 <strncmp>:
 8013174:	b510      	push	{r4, lr}
 8013176:	b16a      	cbz	r2, 8013194 <strncmp+0x20>
 8013178:	3901      	subs	r1, #1
 801317a:	1884      	adds	r4, r0, r2
 801317c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013180:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013184:	429a      	cmp	r2, r3
 8013186:	d103      	bne.n	8013190 <strncmp+0x1c>
 8013188:	42a0      	cmp	r0, r4
 801318a:	d001      	beq.n	8013190 <strncmp+0x1c>
 801318c:	2a00      	cmp	r2, #0
 801318e:	d1f5      	bne.n	801317c <strncmp+0x8>
 8013190:	1ad0      	subs	r0, r2, r3
 8013192:	bd10      	pop	{r4, pc}
 8013194:	4610      	mov	r0, r2
 8013196:	e7fc      	b.n	8013192 <strncmp+0x1e>

08013198 <strtok>:
 8013198:	4b16      	ldr	r3, [pc, #88]	@ (80131f4 <strtok+0x5c>)
 801319a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801319e:	681f      	ldr	r7, [r3, #0]
 80131a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80131a2:	4605      	mov	r5, r0
 80131a4:	460e      	mov	r6, r1
 80131a6:	b9ec      	cbnz	r4, 80131e4 <strtok+0x4c>
 80131a8:	2050      	movs	r0, #80	@ 0x50
 80131aa:	f7fe fab1 	bl	8011710 <malloc>
 80131ae:	4602      	mov	r2, r0
 80131b0:	6478      	str	r0, [r7, #68]	@ 0x44
 80131b2:	b920      	cbnz	r0, 80131be <strtok+0x26>
 80131b4:	4b10      	ldr	r3, [pc, #64]	@ (80131f8 <strtok+0x60>)
 80131b6:	4811      	ldr	r0, [pc, #68]	@ (80131fc <strtok+0x64>)
 80131b8:	215b      	movs	r1, #91	@ 0x5b
 80131ba:	f000 f94d 	bl	8013458 <__assert_func>
 80131be:	e9c0 4400 	strd	r4, r4, [r0]
 80131c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80131c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80131ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80131ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80131d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80131d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80131da:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80131de:	6184      	str	r4, [r0, #24]
 80131e0:	7704      	strb	r4, [r0, #28]
 80131e2:	6244      	str	r4, [r0, #36]	@ 0x24
 80131e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80131e6:	4631      	mov	r1, r6
 80131e8:	4628      	mov	r0, r5
 80131ea:	2301      	movs	r3, #1
 80131ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131f0:	f000 b806 	b.w	8013200 <__strtok_r>
 80131f4:	2000040c 	.word	0x2000040c
 80131f8:	08016732 	.word	0x08016732
 80131fc:	08016749 	.word	0x08016749

08013200 <__strtok_r>:
 8013200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013202:	4604      	mov	r4, r0
 8013204:	b908      	cbnz	r0, 801320a <__strtok_r+0xa>
 8013206:	6814      	ldr	r4, [r2, #0]
 8013208:	b144      	cbz	r4, 801321c <__strtok_r+0x1c>
 801320a:	4620      	mov	r0, r4
 801320c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013210:	460f      	mov	r7, r1
 8013212:	f817 6b01 	ldrb.w	r6, [r7], #1
 8013216:	b91e      	cbnz	r6, 8013220 <__strtok_r+0x20>
 8013218:	b965      	cbnz	r5, 8013234 <__strtok_r+0x34>
 801321a:	6015      	str	r5, [r2, #0]
 801321c:	2000      	movs	r0, #0
 801321e:	e005      	b.n	801322c <__strtok_r+0x2c>
 8013220:	42b5      	cmp	r5, r6
 8013222:	d1f6      	bne.n	8013212 <__strtok_r+0x12>
 8013224:	2b00      	cmp	r3, #0
 8013226:	d1f0      	bne.n	801320a <__strtok_r+0xa>
 8013228:	6014      	str	r4, [r2, #0]
 801322a:	7003      	strb	r3, [r0, #0]
 801322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801322e:	461c      	mov	r4, r3
 8013230:	e00c      	b.n	801324c <__strtok_r+0x4c>
 8013232:	b91d      	cbnz	r5, 801323c <__strtok_r+0x3c>
 8013234:	4627      	mov	r7, r4
 8013236:	f814 3b01 	ldrb.w	r3, [r4], #1
 801323a:	460e      	mov	r6, r1
 801323c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013240:	42ab      	cmp	r3, r5
 8013242:	d1f6      	bne.n	8013232 <__strtok_r+0x32>
 8013244:	2b00      	cmp	r3, #0
 8013246:	d0f2      	beq.n	801322e <__strtok_r+0x2e>
 8013248:	2300      	movs	r3, #0
 801324a:	703b      	strb	r3, [r7, #0]
 801324c:	6014      	str	r4, [r2, #0]
 801324e:	e7ed      	b.n	801322c <__strtok_r+0x2c>

08013250 <_localeconv_r>:
 8013250:	4800      	ldr	r0, [pc, #0]	@ (8013254 <_localeconv_r+0x4>)
 8013252:	4770      	bx	lr
 8013254:	20000390 	.word	0x20000390

08013258 <_close_r>:
 8013258:	b538      	push	{r3, r4, r5, lr}
 801325a:	4d06      	ldr	r5, [pc, #24]	@ (8013274 <_close_r+0x1c>)
 801325c:	2300      	movs	r3, #0
 801325e:	4604      	mov	r4, r0
 8013260:	4608      	mov	r0, r1
 8013262:	602b      	str	r3, [r5, #0]
 8013264:	f7f0 fba2 	bl	80039ac <_close>
 8013268:	1c43      	adds	r3, r0, #1
 801326a:	d102      	bne.n	8013272 <_close_r+0x1a>
 801326c:	682b      	ldr	r3, [r5, #0]
 801326e:	b103      	cbz	r3, 8013272 <_close_r+0x1a>
 8013270:	6023      	str	r3, [r4, #0]
 8013272:	bd38      	pop	{r3, r4, r5, pc}
 8013274:	20013828 	.word	0x20013828

08013278 <_reclaim_reent>:
 8013278:	4b2d      	ldr	r3, [pc, #180]	@ (8013330 <_reclaim_reent+0xb8>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	4283      	cmp	r3, r0
 801327e:	b570      	push	{r4, r5, r6, lr}
 8013280:	4604      	mov	r4, r0
 8013282:	d053      	beq.n	801332c <_reclaim_reent+0xb4>
 8013284:	69c3      	ldr	r3, [r0, #28]
 8013286:	b31b      	cbz	r3, 80132d0 <_reclaim_reent+0x58>
 8013288:	68db      	ldr	r3, [r3, #12]
 801328a:	b163      	cbz	r3, 80132a6 <_reclaim_reent+0x2e>
 801328c:	2500      	movs	r5, #0
 801328e:	69e3      	ldr	r3, [r4, #28]
 8013290:	68db      	ldr	r3, [r3, #12]
 8013292:	5959      	ldr	r1, [r3, r5]
 8013294:	b9b1      	cbnz	r1, 80132c4 <_reclaim_reent+0x4c>
 8013296:	3504      	adds	r5, #4
 8013298:	2d80      	cmp	r5, #128	@ 0x80
 801329a:	d1f8      	bne.n	801328e <_reclaim_reent+0x16>
 801329c:	69e3      	ldr	r3, [r4, #28]
 801329e:	4620      	mov	r0, r4
 80132a0:	68d9      	ldr	r1, [r3, #12]
 80132a2:	f000 ff51 	bl	8014148 <_free_r>
 80132a6:	69e3      	ldr	r3, [r4, #28]
 80132a8:	6819      	ldr	r1, [r3, #0]
 80132aa:	b111      	cbz	r1, 80132b2 <_reclaim_reent+0x3a>
 80132ac:	4620      	mov	r0, r4
 80132ae:	f000 ff4b 	bl	8014148 <_free_r>
 80132b2:	69e3      	ldr	r3, [r4, #28]
 80132b4:	689d      	ldr	r5, [r3, #8]
 80132b6:	b15d      	cbz	r5, 80132d0 <_reclaim_reent+0x58>
 80132b8:	4629      	mov	r1, r5
 80132ba:	4620      	mov	r0, r4
 80132bc:	682d      	ldr	r5, [r5, #0]
 80132be:	f000 ff43 	bl	8014148 <_free_r>
 80132c2:	e7f8      	b.n	80132b6 <_reclaim_reent+0x3e>
 80132c4:	680e      	ldr	r6, [r1, #0]
 80132c6:	4620      	mov	r0, r4
 80132c8:	f000 ff3e 	bl	8014148 <_free_r>
 80132cc:	4631      	mov	r1, r6
 80132ce:	e7e1      	b.n	8013294 <_reclaim_reent+0x1c>
 80132d0:	6961      	ldr	r1, [r4, #20]
 80132d2:	b111      	cbz	r1, 80132da <_reclaim_reent+0x62>
 80132d4:	4620      	mov	r0, r4
 80132d6:	f000 ff37 	bl	8014148 <_free_r>
 80132da:	69e1      	ldr	r1, [r4, #28]
 80132dc:	b111      	cbz	r1, 80132e4 <_reclaim_reent+0x6c>
 80132de:	4620      	mov	r0, r4
 80132e0:	f000 ff32 	bl	8014148 <_free_r>
 80132e4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80132e6:	b111      	cbz	r1, 80132ee <_reclaim_reent+0x76>
 80132e8:	4620      	mov	r0, r4
 80132ea:	f000 ff2d 	bl	8014148 <_free_r>
 80132ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80132f0:	b111      	cbz	r1, 80132f8 <_reclaim_reent+0x80>
 80132f2:	4620      	mov	r0, r4
 80132f4:	f000 ff28 	bl	8014148 <_free_r>
 80132f8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80132fa:	b111      	cbz	r1, 8013302 <_reclaim_reent+0x8a>
 80132fc:	4620      	mov	r0, r4
 80132fe:	f000 ff23 	bl	8014148 <_free_r>
 8013302:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013304:	b111      	cbz	r1, 801330c <_reclaim_reent+0x94>
 8013306:	4620      	mov	r0, r4
 8013308:	f000 ff1e 	bl	8014148 <_free_r>
 801330c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801330e:	b111      	cbz	r1, 8013316 <_reclaim_reent+0x9e>
 8013310:	4620      	mov	r0, r4
 8013312:	f000 ff19 	bl	8014148 <_free_r>
 8013316:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013318:	b111      	cbz	r1, 8013320 <_reclaim_reent+0xa8>
 801331a:	4620      	mov	r0, r4
 801331c:	f000 ff14 	bl	8014148 <_free_r>
 8013320:	6a23      	ldr	r3, [r4, #32]
 8013322:	b11b      	cbz	r3, 801332c <_reclaim_reent+0xb4>
 8013324:	4620      	mov	r0, r4
 8013326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801332a:	4718      	bx	r3
 801332c:	bd70      	pop	{r4, r5, r6, pc}
 801332e:	bf00      	nop
 8013330:	2000040c 	.word	0x2000040c

08013334 <_lseek_r>:
 8013334:	b538      	push	{r3, r4, r5, lr}
 8013336:	4d07      	ldr	r5, [pc, #28]	@ (8013354 <_lseek_r+0x20>)
 8013338:	4604      	mov	r4, r0
 801333a:	4608      	mov	r0, r1
 801333c:	4611      	mov	r1, r2
 801333e:	2200      	movs	r2, #0
 8013340:	602a      	str	r2, [r5, #0]
 8013342:	461a      	mov	r2, r3
 8013344:	f7f0 fb59 	bl	80039fa <_lseek>
 8013348:	1c43      	adds	r3, r0, #1
 801334a:	d102      	bne.n	8013352 <_lseek_r+0x1e>
 801334c:	682b      	ldr	r3, [r5, #0]
 801334e:	b103      	cbz	r3, 8013352 <_lseek_r+0x1e>
 8013350:	6023      	str	r3, [r4, #0]
 8013352:	bd38      	pop	{r3, r4, r5, pc}
 8013354:	20013828 	.word	0x20013828

08013358 <_read_r>:
 8013358:	b538      	push	{r3, r4, r5, lr}
 801335a:	4d07      	ldr	r5, [pc, #28]	@ (8013378 <_read_r+0x20>)
 801335c:	4604      	mov	r4, r0
 801335e:	4608      	mov	r0, r1
 8013360:	4611      	mov	r1, r2
 8013362:	2200      	movs	r2, #0
 8013364:	602a      	str	r2, [r5, #0]
 8013366:	461a      	mov	r2, r3
 8013368:	f7f0 fae7 	bl	800393a <_read>
 801336c:	1c43      	adds	r3, r0, #1
 801336e:	d102      	bne.n	8013376 <_read_r+0x1e>
 8013370:	682b      	ldr	r3, [r5, #0]
 8013372:	b103      	cbz	r3, 8013376 <_read_r+0x1e>
 8013374:	6023      	str	r3, [r4, #0]
 8013376:	bd38      	pop	{r3, r4, r5, pc}
 8013378:	20013828 	.word	0x20013828

0801337c <_sbrk_r>:
 801337c:	b538      	push	{r3, r4, r5, lr}
 801337e:	4d06      	ldr	r5, [pc, #24]	@ (8013398 <_sbrk_r+0x1c>)
 8013380:	2300      	movs	r3, #0
 8013382:	4604      	mov	r4, r0
 8013384:	4608      	mov	r0, r1
 8013386:	602b      	str	r3, [r5, #0]
 8013388:	f7f0 fb44 	bl	8003a14 <_sbrk>
 801338c:	1c43      	adds	r3, r0, #1
 801338e:	d102      	bne.n	8013396 <_sbrk_r+0x1a>
 8013390:	682b      	ldr	r3, [r5, #0]
 8013392:	b103      	cbz	r3, 8013396 <_sbrk_r+0x1a>
 8013394:	6023      	str	r3, [r4, #0]
 8013396:	bd38      	pop	{r3, r4, r5, pc}
 8013398:	20013828 	.word	0x20013828

0801339c <_write_r>:
 801339c:	b538      	push	{r3, r4, r5, lr}
 801339e:	4d07      	ldr	r5, [pc, #28]	@ (80133bc <_write_r+0x20>)
 80133a0:	4604      	mov	r4, r0
 80133a2:	4608      	mov	r0, r1
 80133a4:	4611      	mov	r1, r2
 80133a6:	2200      	movs	r2, #0
 80133a8:	602a      	str	r2, [r5, #0]
 80133aa:	461a      	mov	r2, r3
 80133ac:	f7f0 fae2 	bl	8003974 <_write>
 80133b0:	1c43      	adds	r3, r0, #1
 80133b2:	d102      	bne.n	80133ba <_write_r+0x1e>
 80133b4:	682b      	ldr	r3, [r5, #0]
 80133b6:	b103      	cbz	r3, 80133ba <_write_r+0x1e>
 80133b8:	6023      	str	r3, [r4, #0]
 80133ba:	bd38      	pop	{r3, r4, r5, pc}
 80133bc:	20013828 	.word	0x20013828

080133c0 <__errno>:
 80133c0:	4b01      	ldr	r3, [pc, #4]	@ (80133c8 <__errno+0x8>)
 80133c2:	6818      	ldr	r0, [r3, #0]
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop
 80133c8:	2000040c 	.word	0x2000040c

080133cc <__libc_init_array>:
 80133cc:	b570      	push	{r4, r5, r6, lr}
 80133ce:	4d0d      	ldr	r5, [pc, #52]	@ (8013404 <__libc_init_array+0x38>)
 80133d0:	4c0d      	ldr	r4, [pc, #52]	@ (8013408 <__libc_init_array+0x3c>)
 80133d2:	1b64      	subs	r4, r4, r5
 80133d4:	10a4      	asrs	r4, r4, #2
 80133d6:	2600      	movs	r6, #0
 80133d8:	42a6      	cmp	r6, r4
 80133da:	d109      	bne.n	80133f0 <__libc_init_array+0x24>
 80133dc:	4d0b      	ldr	r5, [pc, #44]	@ (801340c <__libc_init_array+0x40>)
 80133de:	4c0c      	ldr	r4, [pc, #48]	@ (8013410 <__libc_init_array+0x44>)
 80133e0:	f002 fc02 	bl	8015be8 <_init>
 80133e4:	1b64      	subs	r4, r4, r5
 80133e6:	10a4      	asrs	r4, r4, #2
 80133e8:	2600      	movs	r6, #0
 80133ea:	42a6      	cmp	r6, r4
 80133ec:	d105      	bne.n	80133fa <__libc_init_array+0x2e>
 80133ee:	bd70      	pop	{r4, r5, r6, pc}
 80133f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80133f4:	4798      	blx	r3
 80133f6:	3601      	adds	r6, #1
 80133f8:	e7ee      	b.n	80133d8 <__libc_init_array+0xc>
 80133fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80133fe:	4798      	blx	r3
 8013400:	3601      	adds	r6, #1
 8013402:	e7f2      	b.n	80133ea <__libc_init_array+0x1e>
 8013404:	08016b80 	.word	0x08016b80
 8013408:	08016b80 	.word	0x08016b80
 801340c:	08016b80 	.word	0x08016b80
 8013410:	08016b84 	.word	0x08016b84

08013414 <__retarget_lock_init_recursive>:
 8013414:	4770      	bx	lr

08013416 <__retarget_lock_acquire_recursive>:
 8013416:	4770      	bx	lr

08013418 <__retarget_lock_release_recursive>:
 8013418:	4770      	bx	lr

0801341a <strcpy>:
 801341a:	4603      	mov	r3, r0
 801341c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013420:	f803 2b01 	strb.w	r2, [r3], #1
 8013424:	2a00      	cmp	r2, #0
 8013426:	d1f9      	bne.n	801341c <strcpy+0x2>
 8013428:	4770      	bx	lr

0801342a <memcpy>:
 801342a:	440a      	add	r2, r1
 801342c:	4291      	cmp	r1, r2
 801342e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013432:	d100      	bne.n	8013436 <memcpy+0xc>
 8013434:	4770      	bx	lr
 8013436:	b510      	push	{r4, lr}
 8013438:	f811 4b01 	ldrb.w	r4, [r1], #1
 801343c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013440:	4291      	cmp	r1, r2
 8013442:	d1f9      	bne.n	8013438 <memcpy+0xe>
 8013444:	bd10      	pop	{r4, pc}
	...

08013448 <nan>:
 8013448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013450 <nan+0x8>
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	00000000 	.word	0x00000000
 8013454:	7ff80000 	.word	0x7ff80000

08013458 <__assert_func>:
 8013458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801345a:	4614      	mov	r4, r2
 801345c:	461a      	mov	r2, r3
 801345e:	4b09      	ldr	r3, [pc, #36]	@ (8013484 <__assert_func+0x2c>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	4605      	mov	r5, r0
 8013464:	68d8      	ldr	r0, [r3, #12]
 8013466:	b14c      	cbz	r4, 801347c <__assert_func+0x24>
 8013468:	4b07      	ldr	r3, [pc, #28]	@ (8013488 <__assert_func+0x30>)
 801346a:	9100      	str	r1, [sp, #0]
 801346c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013470:	4906      	ldr	r1, [pc, #24]	@ (801348c <__assert_func+0x34>)
 8013472:	462b      	mov	r3, r5
 8013474:	f002 f8b8 	bl	80155e8 <fiprintf>
 8013478:	f002 f8c8 	bl	801560c <abort>
 801347c:	4b04      	ldr	r3, [pc, #16]	@ (8013490 <__assert_func+0x38>)
 801347e:	461c      	mov	r4, r3
 8013480:	e7f3      	b.n	801346a <__assert_func+0x12>
 8013482:	bf00      	nop
 8013484:	2000040c 	.word	0x2000040c
 8013488:	080167ab 	.word	0x080167ab
 801348c:	080167b8 	.word	0x080167b8
 8013490:	080167e6 	.word	0x080167e6

08013494 <quorem>:
 8013494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	6903      	ldr	r3, [r0, #16]
 801349a:	690c      	ldr	r4, [r1, #16]
 801349c:	42a3      	cmp	r3, r4
 801349e:	4607      	mov	r7, r0
 80134a0:	db7e      	blt.n	80135a0 <quorem+0x10c>
 80134a2:	3c01      	subs	r4, #1
 80134a4:	f101 0814 	add.w	r8, r1, #20
 80134a8:	00a3      	lsls	r3, r4, #2
 80134aa:	f100 0514 	add.w	r5, r0, #20
 80134ae:	9300      	str	r3, [sp, #0]
 80134b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80134b4:	9301      	str	r3, [sp, #4]
 80134b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80134ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80134be:	3301      	adds	r3, #1
 80134c0:	429a      	cmp	r2, r3
 80134c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80134c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80134ca:	d32e      	bcc.n	801352a <quorem+0x96>
 80134cc:	f04f 0a00 	mov.w	sl, #0
 80134d0:	46c4      	mov	ip, r8
 80134d2:	46ae      	mov	lr, r5
 80134d4:	46d3      	mov	fp, sl
 80134d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80134da:	b298      	uxth	r0, r3
 80134dc:	fb06 a000 	mla	r0, r6, r0, sl
 80134e0:	0c02      	lsrs	r2, r0, #16
 80134e2:	0c1b      	lsrs	r3, r3, #16
 80134e4:	fb06 2303 	mla	r3, r6, r3, r2
 80134e8:	f8de 2000 	ldr.w	r2, [lr]
 80134ec:	b280      	uxth	r0, r0
 80134ee:	b292      	uxth	r2, r2
 80134f0:	1a12      	subs	r2, r2, r0
 80134f2:	445a      	add	r2, fp
 80134f4:	f8de 0000 	ldr.w	r0, [lr]
 80134f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013502:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013506:	b292      	uxth	r2, r2
 8013508:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801350c:	45e1      	cmp	r9, ip
 801350e:	f84e 2b04 	str.w	r2, [lr], #4
 8013512:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013516:	d2de      	bcs.n	80134d6 <quorem+0x42>
 8013518:	9b00      	ldr	r3, [sp, #0]
 801351a:	58eb      	ldr	r3, [r5, r3]
 801351c:	b92b      	cbnz	r3, 801352a <quorem+0x96>
 801351e:	9b01      	ldr	r3, [sp, #4]
 8013520:	3b04      	subs	r3, #4
 8013522:	429d      	cmp	r5, r3
 8013524:	461a      	mov	r2, r3
 8013526:	d32f      	bcc.n	8013588 <quorem+0xf4>
 8013528:	613c      	str	r4, [r7, #16]
 801352a:	4638      	mov	r0, r7
 801352c:	f001 fc5e 	bl	8014dec <__mcmp>
 8013530:	2800      	cmp	r0, #0
 8013532:	db25      	blt.n	8013580 <quorem+0xec>
 8013534:	4629      	mov	r1, r5
 8013536:	2000      	movs	r0, #0
 8013538:	f858 2b04 	ldr.w	r2, [r8], #4
 801353c:	f8d1 c000 	ldr.w	ip, [r1]
 8013540:	fa1f fe82 	uxth.w	lr, r2
 8013544:	fa1f f38c 	uxth.w	r3, ip
 8013548:	eba3 030e 	sub.w	r3, r3, lr
 801354c:	4403      	add	r3, r0
 801354e:	0c12      	lsrs	r2, r2, #16
 8013550:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013554:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013558:	b29b      	uxth	r3, r3
 801355a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801355e:	45c1      	cmp	r9, r8
 8013560:	f841 3b04 	str.w	r3, [r1], #4
 8013564:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013568:	d2e6      	bcs.n	8013538 <quorem+0xa4>
 801356a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801356e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013572:	b922      	cbnz	r2, 801357e <quorem+0xea>
 8013574:	3b04      	subs	r3, #4
 8013576:	429d      	cmp	r5, r3
 8013578:	461a      	mov	r2, r3
 801357a:	d30b      	bcc.n	8013594 <quorem+0x100>
 801357c:	613c      	str	r4, [r7, #16]
 801357e:	3601      	adds	r6, #1
 8013580:	4630      	mov	r0, r6
 8013582:	b003      	add	sp, #12
 8013584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013588:	6812      	ldr	r2, [r2, #0]
 801358a:	3b04      	subs	r3, #4
 801358c:	2a00      	cmp	r2, #0
 801358e:	d1cb      	bne.n	8013528 <quorem+0x94>
 8013590:	3c01      	subs	r4, #1
 8013592:	e7c6      	b.n	8013522 <quorem+0x8e>
 8013594:	6812      	ldr	r2, [r2, #0]
 8013596:	3b04      	subs	r3, #4
 8013598:	2a00      	cmp	r2, #0
 801359a:	d1ef      	bne.n	801357c <quorem+0xe8>
 801359c:	3c01      	subs	r4, #1
 801359e:	e7ea      	b.n	8013576 <quorem+0xe2>
 80135a0:	2000      	movs	r0, #0
 80135a2:	e7ee      	b.n	8013582 <quorem+0xee>
 80135a4:	0000      	movs	r0, r0
	...

080135a8 <_dtoa_r>:
 80135a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135ac:	69c7      	ldr	r7, [r0, #28]
 80135ae:	b097      	sub	sp, #92	@ 0x5c
 80135b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80135b4:	ec55 4b10 	vmov	r4, r5, d0
 80135b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80135ba:	9107      	str	r1, [sp, #28]
 80135bc:	4681      	mov	r9, r0
 80135be:	920c      	str	r2, [sp, #48]	@ 0x30
 80135c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80135c2:	b97f      	cbnz	r7, 80135e4 <_dtoa_r+0x3c>
 80135c4:	2010      	movs	r0, #16
 80135c6:	f7fe f8a3 	bl	8011710 <malloc>
 80135ca:	4602      	mov	r2, r0
 80135cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80135d0:	b920      	cbnz	r0, 80135dc <_dtoa_r+0x34>
 80135d2:	4ba9      	ldr	r3, [pc, #676]	@ (8013878 <_dtoa_r+0x2d0>)
 80135d4:	21ef      	movs	r1, #239	@ 0xef
 80135d6:	48a9      	ldr	r0, [pc, #676]	@ (801387c <_dtoa_r+0x2d4>)
 80135d8:	f7ff ff3e 	bl	8013458 <__assert_func>
 80135dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80135e0:	6007      	str	r7, [r0, #0]
 80135e2:	60c7      	str	r7, [r0, #12]
 80135e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80135e8:	6819      	ldr	r1, [r3, #0]
 80135ea:	b159      	cbz	r1, 8013604 <_dtoa_r+0x5c>
 80135ec:	685a      	ldr	r2, [r3, #4]
 80135ee:	604a      	str	r2, [r1, #4]
 80135f0:	2301      	movs	r3, #1
 80135f2:	4093      	lsls	r3, r2
 80135f4:	608b      	str	r3, [r1, #8]
 80135f6:	4648      	mov	r0, r9
 80135f8:	f001 f97c 	bl	80148f4 <_Bfree>
 80135fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013600:	2200      	movs	r2, #0
 8013602:	601a      	str	r2, [r3, #0]
 8013604:	1e2b      	subs	r3, r5, #0
 8013606:	bfb9      	ittee	lt
 8013608:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801360c:	9305      	strlt	r3, [sp, #20]
 801360e:	2300      	movge	r3, #0
 8013610:	6033      	strge	r3, [r6, #0]
 8013612:	9f05      	ldr	r7, [sp, #20]
 8013614:	4b9a      	ldr	r3, [pc, #616]	@ (8013880 <_dtoa_r+0x2d8>)
 8013616:	bfbc      	itt	lt
 8013618:	2201      	movlt	r2, #1
 801361a:	6032      	strlt	r2, [r6, #0]
 801361c:	43bb      	bics	r3, r7
 801361e:	d112      	bne.n	8013646 <_dtoa_r+0x9e>
 8013620:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013622:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013626:	6013      	str	r3, [r2, #0]
 8013628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801362c:	4323      	orrs	r3, r4
 801362e:	f000 855a 	beq.w	80140e6 <_dtoa_r+0xb3e>
 8013632:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013634:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8013894 <_dtoa_r+0x2ec>
 8013638:	2b00      	cmp	r3, #0
 801363a:	f000 855c 	beq.w	80140f6 <_dtoa_r+0xb4e>
 801363e:	f10a 0303 	add.w	r3, sl, #3
 8013642:	f000 bd56 	b.w	80140f2 <_dtoa_r+0xb4a>
 8013646:	ed9d 7b04 	vldr	d7, [sp, #16]
 801364a:	2200      	movs	r2, #0
 801364c:	ec51 0b17 	vmov	r0, r1, d7
 8013650:	2300      	movs	r3, #0
 8013652:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8013656:	f7ed fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 801365a:	4680      	mov	r8, r0
 801365c:	b158      	cbz	r0, 8013676 <_dtoa_r+0xce>
 801365e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8013660:	2301      	movs	r3, #1
 8013662:	6013      	str	r3, [r2, #0]
 8013664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013666:	b113      	cbz	r3, 801366e <_dtoa_r+0xc6>
 8013668:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801366a:	4b86      	ldr	r3, [pc, #536]	@ (8013884 <_dtoa_r+0x2dc>)
 801366c:	6013      	str	r3, [r2, #0]
 801366e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8013898 <_dtoa_r+0x2f0>
 8013672:	f000 bd40 	b.w	80140f6 <_dtoa_r+0xb4e>
 8013676:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801367a:	aa14      	add	r2, sp, #80	@ 0x50
 801367c:	a915      	add	r1, sp, #84	@ 0x54
 801367e:	4648      	mov	r0, r9
 8013680:	f001 fcd4 	bl	801502c <__d2b>
 8013684:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013688:	9002      	str	r0, [sp, #8]
 801368a:	2e00      	cmp	r6, #0
 801368c:	d078      	beq.n	8013780 <_dtoa_r+0x1d8>
 801368e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013690:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8013694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801369c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80136a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80136a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80136a8:	4619      	mov	r1, r3
 80136aa:	2200      	movs	r2, #0
 80136ac:	4b76      	ldr	r3, [pc, #472]	@ (8013888 <_dtoa_r+0x2e0>)
 80136ae:	f7ec fdeb 	bl	8000288 <__aeabi_dsub>
 80136b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8013860 <_dtoa_r+0x2b8>)
 80136b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b8:	f7ec ff9e 	bl	80005f8 <__aeabi_dmul>
 80136bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8013868 <_dtoa_r+0x2c0>)
 80136be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c2:	f7ec fde3 	bl	800028c <__adddf3>
 80136c6:	4604      	mov	r4, r0
 80136c8:	4630      	mov	r0, r6
 80136ca:	460d      	mov	r5, r1
 80136cc:	f7ec ff2a 	bl	8000524 <__aeabi_i2d>
 80136d0:	a367      	add	r3, pc, #412	@ (adr r3, 8013870 <_dtoa_r+0x2c8>)
 80136d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d6:	f7ec ff8f 	bl	80005f8 <__aeabi_dmul>
 80136da:	4602      	mov	r2, r0
 80136dc:	460b      	mov	r3, r1
 80136de:	4620      	mov	r0, r4
 80136e0:	4629      	mov	r1, r5
 80136e2:	f7ec fdd3 	bl	800028c <__adddf3>
 80136e6:	4604      	mov	r4, r0
 80136e8:	460d      	mov	r5, r1
 80136ea:	f7ed fa35 	bl	8000b58 <__aeabi_d2iz>
 80136ee:	2200      	movs	r2, #0
 80136f0:	4607      	mov	r7, r0
 80136f2:	2300      	movs	r3, #0
 80136f4:	4620      	mov	r0, r4
 80136f6:	4629      	mov	r1, r5
 80136f8:	f7ed f9f0 	bl	8000adc <__aeabi_dcmplt>
 80136fc:	b140      	cbz	r0, 8013710 <_dtoa_r+0x168>
 80136fe:	4638      	mov	r0, r7
 8013700:	f7ec ff10 	bl	8000524 <__aeabi_i2d>
 8013704:	4622      	mov	r2, r4
 8013706:	462b      	mov	r3, r5
 8013708:	f7ed f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 801370c:	b900      	cbnz	r0, 8013710 <_dtoa_r+0x168>
 801370e:	3f01      	subs	r7, #1
 8013710:	2f16      	cmp	r7, #22
 8013712:	d852      	bhi.n	80137ba <_dtoa_r+0x212>
 8013714:	4b5d      	ldr	r3, [pc, #372]	@ (801388c <_dtoa_r+0x2e4>)
 8013716:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801371e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013722:	f7ed f9db 	bl	8000adc <__aeabi_dcmplt>
 8013726:	2800      	cmp	r0, #0
 8013728:	d049      	beq.n	80137be <_dtoa_r+0x216>
 801372a:	3f01      	subs	r7, #1
 801372c:	2300      	movs	r3, #0
 801372e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013730:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013732:	1b9b      	subs	r3, r3, r6
 8013734:	1e5a      	subs	r2, r3, #1
 8013736:	bf45      	ittet	mi
 8013738:	f1c3 0301 	rsbmi	r3, r3, #1
 801373c:	9300      	strmi	r3, [sp, #0]
 801373e:	2300      	movpl	r3, #0
 8013740:	2300      	movmi	r3, #0
 8013742:	9206      	str	r2, [sp, #24]
 8013744:	bf54      	ite	pl
 8013746:	9300      	strpl	r3, [sp, #0]
 8013748:	9306      	strmi	r3, [sp, #24]
 801374a:	2f00      	cmp	r7, #0
 801374c:	db39      	blt.n	80137c2 <_dtoa_r+0x21a>
 801374e:	9b06      	ldr	r3, [sp, #24]
 8013750:	970d      	str	r7, [sp, #52]	@ 0x34
 8013752:	443b      	add	r3, r7
 8013754:	9306      	str	r3, [sp, #24]
 8013756:	2300      	movs	r3, #0
 8013758:	9308      	str	r3, [sp, #32]
 801375a:	9b07      	ldr	r3, [sp, #28]
 801375c:	2b09      	cmp	r3, #9
 801375e:	d863      	bhi.n	8013828 <_dtoa_r+0x280>
 8013760:	2b05      	cmp	r3, #5
 8013762:	bfc4      	itt	gt
 8013764:	3b04      	subgt	r3, #4
 8013766:	9307      	strgt	r3, [sp, #28]
 8013768:	9b07      	ldr	r3, [sp, #28]
 801376a:	f1a3 0302 	sub.w	r3, r3, #2
 801376e:	bfcc      	ite	gt
 8013770:	2400      	movgt	r4, #0
 8013772:	2401      	movle	r4, #1
 8013774:	2b03      	cmp	r3, #3
 8013776:	d863      	bhi.n	8013840 <_dtoa_r+0x298>
 8013778:	e8df f003 	tbb	[pc, r3]
 801377c:	2b375452 	.word	0x2b375452
 8013780:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8013784:	441e      	add	r6, r3
 8013786:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801378a:	2b20      	cmp	r3, #32
 801378c:	bfc1      	itttt	gt
 801378e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013792:	409f      	lslgt	r7, r3
 8013794:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013798:	fa24 f303 	lsrgt.w	r3, r4, r3
 801379c:	bfd6      	itet	le
 801379e:	f1c3 0320 	rsble	r3, r3, #32
 80137a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80137a6:	fa04 f003 	lslle.w	r0, r4, r3
 80137aa:	f7ec feab 	bl	8000504 <__aeabi_ui2d>
 80137ae:	2201      	movs	r2, #1
 80137b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80137b4:	3e01      	subs	r6, #1
 80137b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80137b8:	e776      	b.n	80136a8 <_dtoa_r+0x100>
 80137ba:	2301      	movs	r3, #1
 80137bc:	e7b7      	b.n	801372e <_dtoa_r+0x186>
 80137be:	9010      	str	r0, [sp, #64]	@ 0x40
 80137c0:	e7b6      	b.n	8013730 <_dtoa_r+0x188>
 80137c2:	9b00      	ldr	r3, [sp, #0]
 80137c4:	1bdb      	subs	r3, r3, r7
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	427b      	negs	r3, r7
 80137ca:	9308      	str	r3, [sp, #32]
 80137cc:	2300      	movs	r3, #0
 80137ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80137d0:	e7c3      	b.n	801375a <_dtoa_r+0x1b2>
 80137d2:	2301      	movs	r3, #1
 80137d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80137d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137d8:	eb07 0b03 	add.w	fp, r7, r3
 80137dc:	f10b 0301 	add.w	r3, fp, #1
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	9303      	str	r3, [sp, #12]
 80137e4:	bfb8      	it	lt
 80137e6:	2301      	movlt	r3, #1
 80137e8:	e006      	b.n	80137f8 <_dtoa_r+0x250>
 80137ea:	2301      	movs	r3, #1
 80137ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80137ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	dd28      	ble.n	8013846 <_dtoa_r+0x29e>
 80137f4:	469b      	mov	fp, r3
 80137f6:	9303      	str	r3, [sp, #12]
 80137f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80137fc:	2100      	movs	r1, #0
 80137fe:	2204      	movs	r2, #4
 8013800:	f102 0514 	add.w	r5, r2, #20
 8013804:	429d      	cmp	r5, r3
 8013806:	d926      	bls.n	8013856 <_dtoa_r+0x2ae>
 8013808:	6041      	str	r1, [r0, #4]
 801380a:	4648      	mov	r0, r9
 801380c:	f001 f832 	bl	8014874 <_Balloc>
 8013810:	4682      	mov	sl, r0
 8013812:	2800      	cmp	r0, #0
 8013814:	d142      	bne.n	801389c <_dtoa_r+0x2f4>
 8013816:	4b1e      	ldr	r3, [pc, #120]	@ (8013890 <_dtoa_r+0x2e8>)
 8013818:	4602      	mov	r2, r0
 801381a:	f240 11af 	movw	r1, #431	@ 0x1af
 801381e:	e6da      	b.n	80135d6 <_dtoa_r+0x2e>
 8013820:	2300      	movs	r3, #0
 8013822:	e7e3      	b.n	80137ec <_dtoa_r+0x244>
 8013824:	2300      	movs	r3, #0
 8013826:	e7d5      	b.n	80137d4 <_dtoa_r+0x22c>
 8013828:	2401      	movs	r4, #1
 801382a:	2300      	movs	r3, #0
 801382c:	9307      	str	r3, [sp, #28]
 801382e:	9409      	str	r4, [sp, #36]	@ 0x24
 8013830:	f04f 3bff 	mov.w	fp, #4294967295
 8013834:	2200      	movs	r2, #0
 8013836:	f8cd b00c 	str.w	fp, [sp, #12]
 801383a:	2312      	movs	r3, #18
 801383c:	920c      	str	r2, [sp, #48]	@ 0x30
 801383e:	e7db      	b.n	80137f8 <_dtoa_r+0x250>
 8013840:	2301      	movs	r3, #1
 8013842:	9309      	str	r3, [sp, #36]	@ 0x24
 8013844:	e7f4      	b.n	8013830 <_dtoa_r+0x288>
 8013846:	f04f 0b01 	mov.w	fp, #1
 801384a:	f8cd b00c 	str.w	fp, [sp, #12]
 801384e:	465b      	mov	r3, fp
 8013850:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8013854:	e7d0      	b.n	80137f8 <_dtoa_r+0x250>
 8013856:	3101      	adds	r1, #1
 8013858:	0052      	lsls	r2, r2, #1
 801385a:	e7d1      	b.n	8013800 <_dtoa_r+0x258>
 801385c:	f3af 8000 	nop.w
 8013860:	636f4361 	.word	0x636f4361
 8013864:	3fd287a7 	.word	0x3fd287a7
 8013868:	8b60c8b3 	.word	0x8b60c8b3
 801386c:	3fc68a28 	.word	0x3fc68a28
 8013870:	509f79fb 	.word	0x509f79fb
 8013874:	3fd34413 	.word	0x3fd34413
 8013878:	08016732 	.word	0x08016732
 801387c:	080167f4 	.word	0x080167f4
 8013880:	7ff00000 	.word	0x7ff00000
 8013884:	0801670f 	.word	0x0801670f
 8013888:	3ff80000 	.word	0x3ff80000
 801388c:	08016ab0 	.word	0x08016ab0
 8013890:	0801684c 	.word	0x0801684c
 8013894:	080167f0 	.word	0x080167f0
 8013898:	0801670e 	.word	0x0801670e
 801389c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80138a0:	6018      	str	r0, [r3, #0]
 80138a2:	9b03      	ldr	r3, [sp, #12]
 80138a4:	2b0e      	cmp	r3, #14
 80138a6:	f200 80a1 	bhi.w	80139ec <_dtoa_r+0x444>
 80138aa:	2c00      	cmp	r4, #0
 80138ac:	f000 809e 	beq.w	80139ec <_dtoa_r+0x444>
 80138b0:	2f00      	cmp	r7, #0
 80138b2:	dd33      	ble.n	801391c <_dtoa_r+0x374>
 80138b4:	4b9c      	ldr	r3, [pc, #624]	@ (8013b28 <_dtoa_r+0x580>)
 80138b6:	f007 020f 	and.w	r2, r7, #15
 80138ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138be:	ed93 7b00 	vldr	d7, [r3]
 80138c2:	05f8      	lsls	r0, r7, #23
 80138c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80138c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80138cc:	d516      	bpl.n	80138fc <_dtoa_r+0x354>
 80138ce:	4b97      	ldr	r3, [pc, #604]	@ (8013b2c <_dtoa_r+0x584>)
 80138d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80138d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80138d8:	f7ec ffb8 	bl	800084c <__aeabi_ddiv>
 80138dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138e0:	f004 040f 	and.w	r4, r4, #15
 80138e4:	2603      	movs	r6, #3
 80138e6:	4d91      	ldr	r5, [pc, #580]	@ (8013b2c <_dtoa_r+0x584>)
 80138e8:	b954      	cbnz	r4, 8013900 <_dtoa_r+0x358>
 80138ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80138ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138f2:	f7ec ffab 	bl	800084c <__aeabi_ddiv>
 80138f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80138fa:	e028      	b.n	801394e <_dtoa_r+0x3a6>
 80138fc:	2602      	movs	r6, #2
 80138fe:	e7f2      	b.n	80138e6 <_dtoa_r+0x33e>
 8013900:	07e1      	lsls	r1, r4, #31
 8013902:	d508      	bpl.n	8013916 <_dtoa_r+0x36e>
 8013904:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013908:	e9d5 2300 	ldrd	r2, r3, [r5]
 801390c:	f7ec fe74 	bl	80005f8 <__aeabi_dmul>
 8013910:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013914:	3601      	adds	r6, #1
 8013916:	1064      	asrs	r4, r4, #1
 8013918:	3508      	adds	r5, #8
 801391a:	e7e5      	b.n	80138e8 <_dtoa_r+0x340>
 801391c:	f000 80af 	beq.w	8013a7e <_dtoa_r+0x4d6>
 8013920:	427c      	negs	r4, r7
 8013922:	4b81      	ldr	r3, [pc, #516]	@ (8013b28 <_dtoa_r+0x580>)
 8013924:	4d81      	ldr	r5, [pc, #516]	@ (8013b2c <_dtoa_r+0x584>)
 8013926:	f004 020f 	and.w	r2, r4, #15
 801392a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8013936:	f7ec fe5f 	bl	80005f8 <__aeabi_dmul>
 801393a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801393e:	1124      	asrs	r4, r4, #4
 8013940:	2300      	movs	r3, #0
 8013942:	2602      	movs	r6, #2
 8013944:	2c00      	cmp	r4, #0
 8013946:	f040 808f 	bne.w	8013a68 <_dtoa_r+0x4c0>
 801394a:	2b00      	cmp	r3, #0
 801394c:	d1d3      	bne.n	80138f6 <_dtoa_r+0x34e>
 801394e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013950:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013954:	2b00      	cmp	r3, #0
 8013956:	f000 8094 	beq.w	8013a82 <_dtoa_r+0x4da>
 801395a:	4b75      	ldr	r3, [pc, #468]	@ (8013b30 <_dtoa_r+0x588>)
 801395c:	2200      	movs	r2, #0
 801395e:	4620      	mov	r0, r4
 8013960:	4629      	mov	r1, r5
 8013962:	f7ed f8bb 	bl	8000adc <__aeabi_dcmplt>
 8013966:	2800      	cmp	r0, #0
 8013968:	f000 808b 	beq.w	8013a82 <_dtoa_r+0x4da>
 801396c:	9b03      	ldr	r3, [sp, #12]
 801396e:	2b00      	cmp	r3, #0
 8013970:	f000 8087 	beq.w	8013a82 <_dtoa_r+0x4da>
 8013974:	f1bb 0f00 	cmp.w	fp, #0
 8013978:	dd34      	ble.n	80139e4 <_dtoa_r+0x43c>
 801397a:	4620      	mov	r0, r4
 801397c:	4b6d      	ldr	r3, [pc, #436]	@ (8013b34 <_dtoa_r+0x58c>)
 801397e:	2200      	movs	r2, #0
 8013980:	4629      	mov	r1, r5
 8013982:	f7ec fe39 	bl	80005f8 <__aeabi_dmul>
 8013986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801398a:	f107 38ff 	add.w	r8, r7, #4294967295
 801398e:	3601      	adds	r6, #1
 8013990:	465c      	mov	r4, fp
 8013992:	4630      	mov	r0, r6
 8013994:	f7ec fdc6 	bl	8000524 <__aeabi_i2d>
 8013998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801399c:	f7ec fe2c 	bl	80005f8 <__aeabi_dmul>
 80139a0:	4b65      	ldr	r3, [pc, #404]	@ (8013b38 <_dtoa_r+0x590>)
 80139a2:	2200      	movs	r2, #0
 80139a4:	f7ec fc72 	bl	800028c <__adddf3>
 80139a8:	4605      	mov	r5, r0
 80139aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80139ae:	2c00      	cmp	r4, #0
 80139b0:	d16a      	bne.n	8013a88 <_dtoa_r+0x4e0>
 80139b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139b6:	4b61      	ldr	r3, [pc, #388]	@ (8013b3c <_dtoa_r+0x594>)
 80139b8:	2200      	movs	r2, #0
 80139ba:	f7ec fc65 	bl	8000288 <__aeabi_dsub>
 80139be:	4602      	mov	r2, r0
 80139c0:	460b      	mov	r3, r1
 80139c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139c6:	462a      	mov	r2, r5
 80139c8:	4633      	mov	r3, r6
 80139ca:	f7ed f8a5 	bl	8000b18 <__aeabi_dcmpgt>
 80139ce:	2800      	cmp	r0, #0
 80139d0:	f040 8298 	bne.w	8013f04 <_dtoa_r+0x95c>
 80139d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80139d8:	462a      	mov	r2, r5
 80139da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80139de:	f7ed f87d 	bl	8000adc <__aeabi_dcmplt>
 80139e2:	bb38      	cbnz	r0, 8013a34 <_dtoa_r+0x48c>
 80139e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80139e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80139ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	f2c0 8157 	blt.w	8013ca2 <_dtoa_r+0x6fa>
 80139f4:	2f0e      	cmp	r7, #14
 80139f6:	f300 8154 	bgt.w	8013ca2 <_dtoa_r+0x6fa>
 80139fa:	4b4b      	ldr	r3, [pc, #300]	@ (8013b28 <_dtoa_r+0x580>)
 80139fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013a00:	ed93 7b00 	vldr	d7, [r3]
 8013a04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	ed8d 7b00 	vstr	d7, [sp]
 8013a0c:	f280 80e5 	bge.w	8013bda <_dtoa_r+0x632>
 8013a10:	9b03      	ldr	r3, [sp, #12]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	f300 80e1 	bgt.w	8013bda <_dtoa_r+0x632>
 8013a18:	d10c      	bne.n	8013a34 <_dtoa_r+0x48c>
 8013a1a:	4b48      	ldr	r3, [pc, #288]	@ (8013b3c <_dtoa_r+0x594>)
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	ec51 0b17 	vmov	r0, r1, d7
 8013a22:	f7ec fde9 	bl	80005f8 <__aeabi_dmul>
 8013a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a2a:	f7ed f86b 	bl	8000b04 <__aeabi_dcmpge>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	f000 8266 	beq.w	8013f00 <_dtoa_r+0x958>
 8013a34:	2400      	movs	r4, #0
 8013a36:	4625      	mov	r5, r4
 8013a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a3a:	4656      	mov	r6, sl
 8013a3c:	ea6f 0803 	mvn.w	r8, r3
 8013a40:	2700      	movs	r7, #0
 8013a42:	4621      	mov	r1, r4
 8013a44:	4648      	mov	r0, r9
 8013a46:	f000 ff55 	bl	80148f4 <_Bfree>
 8013a4a:	2d00      	cmp	r5, #0
 8013a4c:	f000 80bd 	beq.w	8013bca <_dtoa_r+0x622>
 8013a50:	b12f      	cbz	r7, 8013a5e <_dtoa_r+0x4b6>
 8013a52:	42af      	cmp	r7, r5
 8013a54:	d003      	beq.n	8013a5e <_dtoa_r+0x4b6>
 8013a56:	4639      	mov	r1, r7
 8013a58:	4648      	mov	r0, r9
 8013a5a:	f000 ff4b 	bl	80148f4 <_Bfree>
 8013a5e:	4629      	mov	r1, r5
 8013a60:	4648      	mov	r0, r9
 8013a62:	f000 ff47 	bl	80148f4 <_Bfree>
 8013a66:	e0b0      	b.n	8013bca <_dtoa_r+0x622>
 8013a68:	07e2      	lsls	r2, r4, #31
 8013a6a:	d505      	bpl.n	8013a78 <_dtoa_r+0x4d0>
 8013a6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013a70:	f7ec fdc2 	bl	80005f8 <__aeabi_dmul>
 8013a74:	3601      	adds	r6, #1
 8013a76:	2301      	movs	r3, #1
 8013a78:	1064      	asrs	r4, r4, #1
 8013a7a:	3508      	adds	r5, #8
 8013a7c:	e762      	b.n	8013944 <_dtoa_r+0x39c>
 8013a7e:	2602      	movs	r6, #2
 8013a80:	e765      	b.n	801394e <_dtoa_r+0x3a6>
 8013a82:	9c03      	ldr	r4, [sp, #12]
 8013a84:	46b8      	mov	r8, r7
 8013a86:	e784      	b.n	8013992 <_dtoa_r+0x3ea>
 8013a88:	4b27      	ldr	r3, [pc, #156]	@ (8013b28 <_dtoa_r+0x580>)
 8013a8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013a8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013a94:	4454      	add	r4, sl
 8013a96:	2900      	cmp	r1, #0
 8013a98:	d054      	beq.n	8013b44 <_dtoa_r+0x59c>
 8013a9a:	4929      	ldr	r1, [pc, #164]	@ (8013b40 <_dtoa_r+0x598>)
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	f7ec fed5 	bl	800084c <__aeabi_ddiv>
 8013aa2:	4633      	mov	r3, r6
 8013aa4:	462a      	mov	r2, r5
 8013aa6:	f7ec fbef 	bl	8000288 <__aeabi_dsub>
 8013aaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013aae:	4656      	mov	r6, sl
 8013ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ab4:	f7ed f850 	bl	8000b58 <__aeabi_d2iz>
 8013ab8:	4605      	mov	r5, r0
 8013aba:	f7ec fd33 	bl	8000524 <__aeabi_i2d>
 8013abe:	4602      	mov	r2, r0
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ac6:	f7ec fbdf 	bl	8000288 <__aeabi_dsub>
 8013aca:	3530      	adds	r5, #48	@ 0x30
 8013acc:	4602      	mov	r2, r0
 8013ace:	460b      	mov	r3, r1
 8013ad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013ad4:	f806 5b01 	strb.w	r5, [r6], #1
 8013ad8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013adc:	f7ec fffe 	bl	8000adc <__aeabi_dcmplt>
 8013ae0:	2800      	cmp	r0, #0
 8013ae2:	d172      	bne.n	8013bca <_dtoa_r+0x622>
 8013ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ae8:	4911      	ldr	r1, [pc, #68]	@ (8013b30 <_dtoa_r+0x588>)
 8013aea:	2000      	movs	r0, #0
 8013aec:	f7ec fbcc 	bl	8000288 <__aeabi_dsub>
 8013af0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013af4:	f7ec fff2 	bl	8000adc <__aeabi_dcmplt>
 8013af8:	2800      	cmp	r0, #0
 8013afa:	f040 80b4 	bne.w	8013c66 <_dtoa_r+0x6be>
 8013afe:	42a6      	cmp	r6, r4
 8013b00:	f43f af70 	beq.w	80139e4 <_dtoa_r+0x43c>
 8013b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b08:	4b0a      	ldr	r3, [pc, #40]	@ (8013b34 <_dtoa_r+0x58c>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	f7ec fd74 	bl	80005f8 <__aeabi_dmul>
 8013b10:	4b08      	ldr	r3, [pc, #32]	@ (8013b34 <_dtoa_r+0x58c>)
 8013b12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013b16:	2200      	movs	r2, #0
 8013b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b1c:	f7ec fd6c 	bl	80005f8 <__aeabi_dmul>
 8013b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b24:	e7c4      	b.n	8013ab0 <_dtoa_r+0x508>
 8013b26:	bf00      	nop
 8013b28:	08016ab0 	.word	0x08016ab0
 8013b2c:	08016a88 	.word	0x08016a88
 8013b30:	3ff00000 	.word	0x3ff00000
 8013b34:	40240000 	.word	0x40240000
 8013b38:	401c0000 	.word	0x401c0000
 8013b3c:	40140000 	.word	0x40140000
 8013b40:	3fe00000 	.word	0x3fe00000
 8013b44:	4631      	mov	r1, r6
 8013b46:	4628      	mov	r0, r5
 8013b48:	f7ec fd56 	bl	80005f8 <__aeabi_dmul>
 8013b4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8013b50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8013b52:	4656      	mov	r6, sl
 8013b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b58:	f7ec fffe 	bl	8000b58 <__aeabi_d2iz>
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	f7ec fce1 	bl	8000524 <__aeabi_i2d>
 8013b62:	4602      	mov	r2, r0
 8013b64:	460b      	mov	r3, r1
 8013b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b6a:	f7ec fb8d 	bl	8000288 <__aeabi_dsub>
 8013b6e:	3530      	adds	r5, #48	@ 0x30
 8013b70:	f806 5b01 	strb.w	r5, [r6], #1
 8013b74:	4602      	mov	r2, r0
 8013b76:	460b      	mov	r3, r1
 8013b78:	42a6      	cmp	r6, r4
 8013b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b7e:	f04f 0200 	mov.w	r2, #0
 8013b82:	d124      	bne.n	8013bce <_dtoa_r+0x626>
 8013b84:	4baf      	ldr	r3, [pc, #700]	@ (8013e44 <_dtoa_r+0x89c>)
 8013b86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8013b8a:	f7ec fb7f 	bl	800028c <__adddf3>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b96:	f7ec ffbf 	bl	8000b18 <__aeabi_dcmpgt>
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d163      	bne.n	8013c66 <_dtoa_r+0x6be>
 8013b9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013ba2:	49a8      	ldr	r1, [pc, #672]	@ (8013e44 <_dtoa_r+0x89c>)
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	f7ec fb6f 	bl	8000288 <__aeabi_dsub>
 8013baa:	4602      	mov	r2, r0
 8013bac:	460b      	mov	r3, r1
 8013bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013bb2:	f7ec ff93 	bl	8000adc <__aeabi_dcmplt>
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	f43f af14 	beq.w	80139e4 <_dtoa_r+0x43c>
 8013bbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8013bbe:	1e73      	subs	r3, r6, #1
 8013bc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013bc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013bc6:	2b30      	cmp	r3, #48	@ 0x30
 8013bc8:	d0f8      	beq.n	8013bbc <_dtoa_r+0x614>
 8013bca:	4647      	mov	r7, r8
 8013bcc:	e03b      	b.n	8013c46 <_dtoa_r+0x69e>
 8013bce:	4b9e      	ldr	r3, [pc, #632]	@ (8013e48 <_dtoa_r+0x8a0>)
 8013bd0:	f7ec fd12 	bl	80005f8 <__aeabi_dmul>
 8013bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013bd8:	e7bc      	b.n	8013b54 <_dtoa_r+0x5ac>
 8013bda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8013bde:	4656      	mov	r6, sl
 8013be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013be4:	4620      	mov	r0, r4
 8013be6:	4629      	mov	r1, r5
 8013be8:	f7ec fe30 	bl	800084c <__aeabi_ddiv>
 8013bec:	f7ec ffb4 	bl	8000b58 <__aeabi_d2iz>
 8013bf0:	4680      	mov	r8, r0
 8013bf2:	f7ec fc97 	bl	8000524 <__aeabi_i2d>
 8013bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bfa:	f7ec fcfd 	bl	80005f8 <__aeabi_dmul>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	4620      	mov	r0, r4
 8013c04:	4629      	mov	r1, r5
 8013c06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013c0a:	f7ec fb3d 	bl	8000288 <__aeabi_dsub>
 8013c0e:	f806 4b01 	strb.w	r4, [r6], #1
 8013c12:	9d03      	ldr	r5, [sp, #12]
 8013c14:	eba6 040a 	sub.w	r4, r6, sl
 8013c18:	42a5      	cmp	r5, r4
 8013c1a:	4602      	mov	r2, r0
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	d133      	bne.n	8013c88 <_dtoa_r+0x6e0>
 8013c20:	f7ec fb34 	bl	800028c <__adddf3>
 8013c24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c28:	4604      	mov	r4, r0
 8013c2a:	460d      	mov	r5, r1
 8013c2c:	f7ec ff74 	bl	8000b18 <__aeabi_dcmpgt>
 8013c30:	b9c0      	cbnz	r0, 8013c64 <_dtoa_r+0x6bc>
 8013c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c36:	4620      	mov	r0, r4
 8013c38:	4629      	mov	r1, r5
 8013c3a:	f7ec ff45 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c3e:	b110      	cbz	r0, 8013c46 <_dtoa_r+0x69e>
 8013c40:	f018 0f01 	tst.w	r8, #1
 8013c44:	d10e      	bne.n	8013c64 <_dtoa_r+0x6bc>
 8013c46:	9902      	ldr	r1, [sp, #8]
 8013c48:	4648      	mov	r0, r9
 8013c4a:	f000 fe53 	bl	80148f4 <_Bfree>
 8013c4e:	2300      	movs	r3, #0
 8013c50:	7033      	strb	r3, [r6, #0]
 8013c52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013c54:	3701      	adds	r7, #1
 8013c56:	601f      	str	r7, [r3, #0]
 8013c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	f000 824b 	beq.w	80140f6 <_dtoa_r+0xb4e>
 8013c60:	601e      	str	r6, [r3, #0]
 8013c62:	e248      	b.n	80140f6 <_dtoa_r+0xb4e>
 8013c64:	46b8      	mov	r8, r7
 8013c66:	4633      	mov	r3, r6
 8013c68:	461e      	mov	r6, r3
 8013c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c6e:	2a39      	cmp	r2, #57	@ 0x39
 8013c70:	d106      	bne.n	8013c80 <_dtoa_r+0x6d8>
 8013c72:	459a      	cmp	sl, r3
 8013c74:	d1f8      	bne.n	8013c68 <_dtoa_r+0x6c0>
 8013c76:	2230      	movs	r2, #48	@ 0x30
 8013c78:	f108 0801 	add.w	r8, r8, #1
 8013c7c:	f88a 2000 	strb.w	r2, [sl]
 8013c80:	781a      	ldrb	r2, [r3, #0]
 8013c82:	3201      	adds	r2, #1
 8013c84:	701a      	strb	r2, [r3, #0]
 8013c86:	e7a0      	b.n	8013bca <_dtoa_r+0x622>
 8013c88:	4b6f      	ldr	r3, [pc, #444]	@ (8013e48 <_dtoa_r+0x8a0>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	f7ec fcb4 	bl	80005f8 <__aeabi_dmul>
 8013c90:	2200      	movs	r2, #0
 8013c92:	2300      	movs	r3, #0
 8013c94:	4604      	mov	r4, r0
 8013c96:	460d      	mov	r5, r1
 8013c98:	f7ec ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d09f      	beq.n	8013be0 <_dtoa_r+0x638>
 8013ca0:	e7d1      	b.n	8013c46 <_dtoa_r+0x69e>
 8013ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ca4:	2a00      	cmp	r2, #0
 8013ca6:	f000 80ea 	beq.w	8013e7e <_dtoa_r+0x8d6>
 8013caa:	9a07      	ldr	r2, [sp, #28]
 8013cac:	2a01      	cmp	r2, #1
 8013cae:	f300 80cd 	bgt.w	8013e4c <_dtoa_r+0x8a4>
 8013cb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8013cb4:	2a00      	cmp	r2, #0
 8013cb6:	f000 80c1 	beq.w	8013e3c <_dtoa_r+0x894>
 8013cba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8013cbe:	9c08      	ldr	r4, [sp, #32]
 8013cc0:	9e00      	ldr	r6, [sp, #0]
 8013cc2:	9a00      	ldr	r2, [sp, #0]
 8013cc4:	441a      	add	r2, r3
 8013cc6:	9200      	str	r2, [sp, #0]
 8013cc8:	9a06      	ldr	r2, [sp, #24]
 8013cca:	2101      	movs	r1, #1
 8013ccc:	441a      	add	r2, r3
 8013cce:	4648      	mov	r0, r9
 8013cd0:	9206      	str	r2, [sp, #24]
 8013cd2:	f000 ff0d 	bl	8014af0 <__i2b>
 8013cd6:	4605      	mov	r5, r0
 8013cd8:	b166      	cbz	r6, 8013cf4 <_dtoa_r+0x74c>
 8013cda:	9b06      	ldr	r3, [sp, #24]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	dd09      	ble.n	8013cf4 <_dtoa_r+0x74c>
 8013ce0:	42b3      	cmp	r3, r6
 8013ce2:	9a00      	ldr	r2, [sp, #0]
 8013ce4:	bfa8      	it	ge
 8013ce6:	4633      	movge	r3, r6
 8013ce8:	1ad2      	subs	r2, r2, r3
 8013cea:	9200      	str	r2, [sp, #0]
 8013cec:	9a06      	ldr	r2, [sp, #24]
 8013cee:	1af6      	subs	r6, r6, r3
 8013cf0:	1ad3      	subs	r3, r2, r3
 8013cf2:	9306      	str	r3, [sp, #24]
 8013cf4:	9b08      	ldr	r3, [sp, #32]
 8013cf6:	b30b      	cbz	r3, 8013d3c <_dtoa_r+0x794>
 8013cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	f000 80c6 	beq.w	8013e8c <_dtoa_r+0x8e4>
 8013d00:	2c00      	cmp	r4, #0
 8013d02:	f000 80c0 	beq.w	8013e86 <_dtoa_r+0x8de>
 8013d06:	4629      	mov	r1, r5
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4648      	mov	r0, r9
 8013d0c:	f000 ffa8 	bl	8014c60 <__pow5mult>
 8013d10:	9a02      	ldr	r2, [sp, #8]
 8013d12:	4601      	mov	r1, r0
 8013d14:	4605      	mov	r5, r0
 8013d16:	4648      	mov	r0, r9
 8013d18:	f000 ff00 	bl	8014b1c <__multiply>
 8013d1c:	9902      	ldr	r1, [sp, #8]
 8013d1e:	4680      	mov	r8, r0
 8013d20:	4648      	mov	r0, r9
 8013d22:	f000 fde7 	bl	80148f4 <_Bfree>
 8013d26:	9b08      	ldr	r3, [sp, #32]
 8013d28:	1b1b      	subs	r3, r3, r4
 8013d2a:	9308      	str	r3, [sp, #32]
 8013d2c:	f000 80b1 	beq.w	8013e92 <_dtoa_r+0x8ea>
 8013d30:	9a08      	ldr	r2, [sp, #32]
 8013d32:	4641      	mov	r1, r8
 8013d34:	4648      	mov	r0, r9
 8013d36:	f000 ff93 	bl	8014c60 <__pow5mult>
 8013d3a:	9002      	str	r0, [sp, #8]
 8013d3c:	2101      	movs	r1, #1
 8013d3e:	4648      	mov	r0, r9
 8013d40:	f000 fed6 	bl	8014af0 <__i2b>
 8013d44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d46:	4604      	mov	r4, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f000 81d8 	beq.w	80140fe <_dtoa_r+0xb56>
 8013d4e:	461a      	mov	r2, r3
 8013d50:	4601      	mov	r1, r0
 8013d52:	4648      	mov	r0, r9
 8013d54:	f000 ff84 	bl	8014c60 <__pow5mult>
 8013d58:	9b07      	ldr	r3, [sp, #28]
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	f300 809f 	bgt.w	8013ea0 <_dtoa_r+0x8f8>
 8013d62:	9b04      	ldr	r3, [sp, #16]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f040 8097 	bne.w	8013e98 <_dtoa_r+0x8f0>
 8013d6a:	9b05      	ldr	r3, [sp, #20]
 8013d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	f040 8093 	bne.w	8013e9c <_dtoa_r+0x8f4>
 8013d76:	9b05      	ldr	r3, [sp, #20]
 8013d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d7c:	0d1b      	lsrs	r3, r3, #20
 8013d7e:	051b      	lsls	r3, r3, #20
 8013d80:	b133      	cbz	r3, 8013d90 <_dtoa_r+0x7e8>
 8013d82:	9b00      	ldr	r3, [sp, #0]
 8013d84:	3301      	adds	r3, #1
 8013d86:	9300      	str	r3, [sp, #0]
 8013d88:	9b06      	ldr	r3, [sp, #24]
 8013d8a:	3301      	adds	r3, #1
 8013d8c:	9306      	str	r3, [sp, #24]
 8013d8e:	2301      	movs	r3, #1
 8013d90:	9308      	str	r3, [sp, #32]
 8013d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	f000 81b8 	beq.w	801410a <_dtoa_r+0xb62>
 8013d9a:	6923      	ldr	r3, [r4, #16]
 8013d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013da0:	6918      	ldr	r0, [r3, #16]
 8013da2:	f000 fe59 	bl	8014a58 <__hi0bits>
 8013da6:	f1c0 0020 	rsb	r0, r0, #32
 8013daa:	9b06      	ldr	r3, [sp, #24]
 8013dac:	4418      	add	r0, r3
 8013dae:	f010 001f 	ands.w	r0, r0, #31
 8013db2:	f000 8082 	beq.w	8013eba <_dtoa_r+0x912>
 8013db6:	f1c0 0320 	rsb	r3, r0, #32
 8013dba:	2b04      	cmp	r3, #4
 8013dbc:	dd73      	ble.n	8013ea6 <_dtoa_r+0x8fe>
 8013dbe:	9b00      	ldr	r3, [sp, #0]
 8013dc0:	f1c0 001c 	rsb	r0, r0, #28
 8013dc4:	4403      	add	r3, r0
 8013dc6:	9300      	str	r3, [sp, #0]
 8013dc8:	9b06      	ldr	r3, [sp, #24]
 8013dca:	4403      	add	r3, r0
 8013dcc:	4406      	add	r6, r0
 8013dce:	9306      	str	r3, [sp, #24]
 8013dd0:	9b00      	ldr	r3, [sp, #0]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	dd05      	ble.n	8013de2 <_dtoa_r+0x83a>
 8013dd6:	9902      	ldr	r1, [sp, #8]
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4648      	mov	r0, r9
 8013ddc:	f000 ff9a 	bl	8014d14 <__lshift>
 8013de0:	9002      	str	r0, [sp, #8]
 8013de2:	9b06      	ldr	r3, [sp, #24]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	dd05      	ble.n	8013df4 <_dtoa_r+0x84c>
 8013de8:	4621      	mov	r1, r4
 8013dea:	461a      	mov	r2, r3
 8013dec:	4648      	mov	r0, r9
 8013dee:	f000 ff91 	bl	8014d14 <__lshift>
 8013df2:	4604      	mov	r4, r0
 8013df4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d061      	beq.n	8013ebe <_dtoa_r+0x916>
 8013dfa:	9802      	ldr	r0, [sp, #8]
 8013dfc:	4621      	mov	r1, r4
 8013dfe:	f000 fff5 	bl	8014dec <__mcmp>
 8013e02:	2800      	cmp	r0, #0
 8013e04:	da5b      	bge.n	8013ebe <_dtoa_r+0x916>
 8013e06:	2300      	movs	r3, #0
 8013e08:	9902      	ldr	r1, [sp, #8]
 8013e0a:	220a      	movs	r2, #10
 8013e0c:	4648      	mov	r0, r9
 8013e0e:	f000 fd93 	bl	8014938 <__multadd>
 8013e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e14:	9002      	str	r0, [sp, #8]
 8013e16:	f107 38ff 	add.w	r8, r7, #4294967295
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 8177 	beq.w	801410e <_dtoa_r+0xb66>
 8013e20:	4629      	mov	r1, r5
 8013e22:	2300      	movs	r3, #0
 8013e24:	220a      	movs	r2, #10
 8013e26:	4648      	mov	r0, r9
 8013e28:	f000 fd86 	bl	8014938 <__multadd>
 8013e2c:	f1bb 0f00 	cmp.w	fp, #0
 8013e30:	4605      	mov	r5, r0
 8013e32:	dc6f      	bgt.n	8013f14 <_dtoa_r+0x96c>
 8013e34:	9b07      	ldr	r3, [sp, #28]
 8013e36:	2b02      	cmp	r3, #2
 8013e38:	dc49      	bgt.n	8013ece <_dtoa_r+0x926>
 8013e3a:	e06b      	b.n	8013f14 <_dtoa_r+0x96c>
 8013e3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013e3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013e42:	e73c      	b.n	8013cbe <_dtoa_r+0x716>
 8013e44:	3fe00000 	.word	0x3fe00000
 8013e48:	40240000 	.word	0x40240000
 8013e4c:	9b03      	ldr	r3, [sp, #12]
 8013e4e:	1e5c      	subs	r4, r3, #1
 8013e50:	9b08      	ldr	r3, [sp, #32]
 8013e52:	42a3      	cmp	r3, r4
 8013e54:	db09      	blt.n	8013e6a <_dtoa_r+0x8c2>
 8013e56:	1b1c      	subs	r4, r3, r4
 8013e58:	9b03      	ldr	r3, [sp, #12]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	f6bf af30 	bge.w	8013cc0 <_dtoa_r+0x718>
 8013e60:	9b00      	ldr	r3, [sp, #0]
 8013e62:	9a03      	ldr	r2, [sp, #12]
 8013e64:	1a9e      	subs	r6, r3, r2
 8013e66:	2300      	movs	r3, #0
 8013e68:	e72b      	b.n	8013cc2 <_dtoa_r+0x71a>
 8013e6a:	9b08      	ldr	r3, [sp, #32]
 8013e6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013e6e:	9408      	str	r4, [sp, #32]
 8013e70:	1ae3      	subs	r3, r4, r3
 8013e72:	441a      	add	r2, r3
 8013e74:	9e00      	ldr	r6, [sp, #0]
 8013e76:	9b03      	ldr	r3, [sp, #12]
 8013e78:	920d      	str	r2, [sp, #52]	@ 0x34
 8013e7a:	2400      	movs	r4, #0
 8013e7c:	e721      	b.n	8013cc2 <_dtoa_r+0x71a>
 8013e7e:	9c08      	ldr	r4, [sp, #32]
 8013e80:	9e00      	ldr	r6, [sp, #0]
 8013e82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013e84:	e728      	b.n	8013cd8 <_dtoa_r+0x730>
 8013e86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013e8a:	e751      	b.n	8013d30 <_dtoa_r+0x788>
 8013e8c:	9a08      	ldr	r2, [sp, #32]
 8013e8e:	9902      	ldr	r1, [sp, #8]
 8013e90:	e750      	b.n	8013d34 <_dtoa_r+0x78c>
 8013e92:	f8cd 8008 	str.w	r8, [sp, #8]
 8013e96:	e751      	b.n	8013d3c <_dtoa_r+0x794>
 8013e98:	2300      	movs	r3, #0
 8013e9a:	e779      	b.n	8013d90 <_dtoa_r+0x7e8>
 8013e9c:	9b04      	ldr	r3, [sp, #16]
 8013e9e:	e777      	b.n	8013d90 <_dtoa_r+0x7e8>
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	9308      	str	r3, [sp, #32]
 8013ea4:	e779      	b.n	8013d9a <_dtoa_r+0x7f2>
 8013ea6:	d093      	beq.n	8013dd0 <_dtoa_r+0x828>
 8013ea8:	9a00      	ldr	r2, [sp, #0]
 8013eaa:	331c      	adds	r3, #28
 8013eac:	441a      	add	r2, r3
 8013eae:	9200      	str	r2, [sp, #0]
 8013eb0:	9a06      	ldr	r2, [sp, #24]
 8013eb2:	441a      	add	r2, r3
 8013eb4:	441e      	add	r6, r3
 8013eb6:	9206      	str	r2, [sp, #24]
 8013eb8:	e78a      	b.n	8013dd0 <_dtoa_r+0x828>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	e7f4      	b.n	8013ea8 <_dtoa_r+0x900>
 8013ebe:	9b03      	ldr	r3, [sp, #12]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	46b8      	mov	r8, r7
 8013ec4:	dc20      	bgt.n	8013f08 <_dtoa_r+0x960>
 8013ec6:	469b      	mov	fp, r3
 8013ec8:	9b07      	ldr	r3, [sp, #28]
 8013eca:	2b02      	cmp	r3, #2
 8013ecc:	dd1e      	ble.n	8013f0c <_dtoa_r+0x964>
 8013ece:	f1bb 0f00 	cmp.w	fp, #0
 8013ed2:	f47f adb1 	bne.w	8013a38 <_dtoa_r+0x490>
 8013ed6:	4621      	mov	r1, r4
 8013ed8:	465b      	mov	r3, fp
 8013eda:	2205      	movs	r2, #5
 8013edc:	4648      	mov	r0, r9
 8013ede:	f000 fd2b 	bl	8014938 <__multadd>
 8013ee2:	4601      	mov	r1, r0
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	9802      	ldr	r0, [sp, #8]
 8013ee8:	f000 ff80 	bl	8014dec <__mcmp>
 8013eec:	2800      	cmp	r0, #0
 8013eee:	f77f ada3 	ble.w	8013a38 <_dtoa_r+0x490>
 8013ef2:	4656      	mov	r6, sl
 8013ef4:	2331      	movs	r3, #49	@ 0x31
 8013ef6:	f806 3b01 	strb.w	r3, [r6], #1
 8013efa:	f108 0801 	add.w	r8, r8, #1
 8013efe:	e59f      	b.n	8013a40 <_dtoa_r+0x498>
 8013f00:	9c03      	ldr	r4, [sp, #12]
 8013f02:	46b8      	mov	r8, r7
 8013f04:	4625      	mov	r5, r4
 8013f06:	e7f4      	b.n	8013ef2 <_dtoa_r+0x94a>
 8013f08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8013f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	f000 8101 	beq.w	8014116 <_dtoa_r+0xb6e>
 8013f14:	2e00      	cmp	r6, #0
 8013f16:	dd05      	ble.n	8013f24 <_dtoa_r+0x97c>
 8013f18:	4629      	mov	r1, r5
 8013f1a:	4632      	mov	r2, r6
 8013f1c:	4648      	mov	r0, r9
 8013f1e:	f000 fef9 	bl	8014d14 <__lshift>
 8013f22:	4605      	mov	r5, r0
 8013f24:	9b08      	ldr	r3, [sp, #32]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d05c      	beq.n	8013fe4 <_dtoa_r+0xa3c>
 8013f2a:	6869      	ldr	r1, [r5, #4]
 8013f2c:	4648      	mov	r0, r9
 8013f2e:	f000 fca1 	bl	8014874 <_Balloc>
 8013f32:	4606      	mov	r6, r0
 8013f34:	b928      	cbnz	r0, 8013f42 <_dtoa_r+0x99a>
 8013f36:	4b82      	ldr	r3, [pc, #520]	@ (8014140 <_dtoa_r+0xb98>)
 8013f38:	4602      	mov	r2, r0
 8013f3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013f3e:	f7ff bb4a 	b.w	80135d6 <_dtoa_r+0x2e>
 8013f42:	692a      	ldr	r2, [r5, #16]
 8013f44:	3202      	adds	r2, #2
 8013f46:	0092      	lsls	r2, r2, #2
 8013f48:	f105 010c 	add.w	r1, r5, #12
 8013f4c:	300c      	adds	r0, #12
 8013f4e:	f7ff fa6c 	bl	801342a <memcpy>
 8013f52:	2201      	movs	r2, #1
 8013f54:	4631      	mov	r1, r6
 8013f56:	4648      	mov	r0, r9
 8013f58:	f000 fedc 	bl	8014d14 <__lshift>
 8013f5c:	f10a 0301 	add.w	r3, sl, #1
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	eb0a 030b 	add.w	r3, sl, fp
 8013f66:	9308      	str	r3, [sp, #32]
 8013f68:	9b04      	ldr	r3, [sp, #16]
 8013f6a:	f003 0301 	and.w	r3, r3, #1
 8013f6e:	462f      	mov	r7, r5
 8013f70:	9306      	str	r3, [sp, #24]
 8013f72:	4605      	mov	r5, r0
 8013f74:	9b00      	ldr	r3, [sp, #0]
 8013f76:	9802      	ldr	r0, [sp, #8]
 8013f78:	4621      	mov	r1, r4
 8013f7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f7e:	f7ff fa89 	bl	8013494 <quorem>
 8013f82:	4603      	mov	r3, r0
 8013f84:	3330      	adds	r3, #48	@ 0x30
 8013f86:	9003      	str	r0, [sp, #12]
 8013f88:	4639      	mov	r1, r7
 8013f8a:	9802      	ldr	r0, [sp, #8]
 8013f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f8e:	f000 ff2d 	bl	8014dec <__mcmp>
 8013f92:	462a      	mov	r2, r5
 8013f94:	9004      	str	r0, [sp, #16]
 8013f96:	4621      	mov	r1, r4
 8013f98:	4648      	mov	r0, r9
 8013f9a:	f000 ff43 	bl	8014e24 <__mdiff>
 8013f9e:	68c2      	ldr	r2, [r0, #12]
 8013fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fa2:	4606      	mov	r6, r0
 8013fa4:	bb02      	cbnz	r2, 8013fe8 <_dtoa_r+0xa40>
 8013fa6:	4601      	mov	r1, r0
 8013fa8:	9802      	ldr	r0, [sp, #8]
 8013faa:	f000 ff1f 	bl	8014dec <__mcmp>
 8013fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	4631      	mov	r1, r6
 8013fb4:	4648      	mov	r0, r9
 8013fb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8013fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013fba:	f000 fc9b 	bl	80148f4 <_Bfree>
 8013fbe:	9b07      	ldr	r3, [sp, #28]
 8013fc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013fc2:	9e00      	ldr	r6, [sp, #0]
 8013fc4:	ea42 0103 	orr.w	r1, r2, r3
 8013fc8:	9b06      	ldr	r3, [sp, #24]
 8013fca:	4319      	orrs	r1, r3
 8013fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fce:	d10d      	bne.n	8013fec <_dtoa_r+0xa44>
 8013fd0:	2b39      	cmp	r3, #57	@ 0x39
 8013fd2:	d027      	beq.n	8014024 <_dtoa_r+0xa7c>
 8013fd4:	9a04      	ldr	r2, [sp, #16]
 8013fd6:	2a00      	cmp	r2, #0
 8013fd8:	dd01      	ble.n	8013fde <_dtoa_r+0xa36>
 8013fda:	9b03      	ldr	r3, [sp, #12]
 8013fdc:	3331      	adds	r3, #49	@ 0x31
 8013fde:	f88b 3000 	strb.w	r3, [fp]
 8013fe2:	e52e      	b.n	8013a42 <_dtoa_r+0x49a>
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	e7b9      	b.n	8013f5c <_dtoa_r+0x9b4>
 8013fe8:	2201      	movs	r2, #1
 8013fea:	e7e2      	b.n	8013fb2 <_dtoa_r+0xa0a>
 8013fec:	9904      	ldr	r1, [sp, #16]
 8013fee:	2900      	cmp	r1, #0
 8013ff0:	db04      	blt.n	8013ffc <_dtoa_r+0xa54>
 8013ff2:	9807      	ldr	r0, [sp, #28]
 8013ff4:	4301      	orrs	r1, r0
 8013ff6:	9806      	ldr	r0, [sp, #24]
 8013ff8:	4301      	orrs	r1, r0
 8013ffa:	d120      	bne.n	801403e <_dtoa_r+0xa96>
 8013ffc:	2a00      	cmp	r2, #0
 8013ffe:	ddee      	ble.n	8013fde <_dtoa_r+0xa36>
 8014000:	9902      	ldr	r1, [sp, #8]
 8014002:	9300      	str	r3, [sp, #0]
 8014004:	2201      	movs	r2, #1
 8014006:	4648      	mov	r0, r9
 8014008:	f000 fe84 	bl	8014d14 <__lshift>
 801400c:	4621      	mov	r1, r4
 801400e:	9002      	str	r0, [sp, #8]
 8014010:	f000 feec 	bl	8014dec <__mcmp>
 8014014:	2800      	cmp	r0, #0
 8014016:	9b00      	ldr	r3, [sp, #0]
 8014018:	dc02      	bgt.n	8014020 <_dtoa_r+0xa78>
 801401a:	d1e0      	bne.n	8013fde <_dtoa_r+0xa36>
 801401c:	07da      	lsls	r2, r3, #31
 801401e:	d5de      	bpl.n	8013fde <_dtoa_r+0xa36>
 8014020:	2b39      	cmp	r3, #57	@ 0x39
 8014022:	d1da      	bne.n	8013fda <_dtoa_r+0xa32>
 8014024:	2339      	movs	r3, #57	@ 0x39
 8014026:	f88b 3000 	strb.w	r3, [fp]
 801402a:	4633      	mov	r3, r6
 801402c:	461e      	mov	r6, r3
 801402e:	3b01      	subs	r3, #1
 8014030:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014034:	2a39      	cmp	r2, #57	@ 0x39
 8014036:	d04e      	beq.n	80140d6 <_dtoa_r+0xb2e>
 8014038:	3201      	adds	r2, #1
 801403a:	701a      	strb	r2, [r3, #0]
 801403c:	e501      	b.n	8013a42 <_dtoa_r+0x49a>
 801403e:	2a00      	cmp	r2, #0
 8014040:	dd03      	ble.n	801404a <_dtoa_r+0xaa2>
 8014042:	2b39      	cmp	r3, #57	@ 0x39
 8014044:	d0ee      	beq.n	8014024 <_dtoa_r+0xa7c>
 8014046:	3301      	adds	r3, #1
 8014048:	e7c9      	b.n	8013fde <_dtoa_r+0xa36>
 801404a:	9a00      	ldr	r2, [sp, #0]
 801404c:	9908      	ldr	r1, [sp, #32]
 801404e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014052:	428a      	cmp	r2, r1
 8014054:	d028      	beq.n	80140a8 <_dtoa_r+0xb00>
 8014056:	9902      	ldr	r1, [sp, #8]
 8014058:	2300      	movs	r3, #0
 801405a:	220a      	movs	r2, #10
 801405c:	4648      	mov	r0, r9
 801405e:	f000 fc6b 	bl	8014938 <__multadd>
 8014062:	42af      	cmp	r7, r5
 8014064:	9002      	str	r0, [sp, #8]
 8014066:	f04f 0300 	mov.w	r3, #0
 801406a:	f04f 020a 	mov.w	r2, #10
 801406e:	4639      	mov	r1, r7
 8014070:	4648      	mov	r0, r9
 8014072:	d107      	bne.n	8014084 <_dtoa_r+0xadc>
 8014074:	f000 fc60 	bl	8014938 <__multadd>
 8014078:	4607      	mov	r7, r0
 801407a:	4605      	mov	r5, r0
 801407c:	9b00      	ldr	r3, [sp, #0]
 801407e:	3301      	adds	r3, #1
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	e777      	b.n	8013f74 <_dtoa_r+0x9cc>
 8014084:	f000 fc58 	bl	8014938 <__multadd>
 8014088:	4629      	mov	r1, r5
 801408a:	4607      	mov	r7, r0
 801408c:	2300      	movs	r3, #0
 801408e:	220a      	movs	r2, #10
 8014090:	4648      	mov	r0, r9
 8014092:	f000 fc51 	bl	8014938 <__multadd>
 8014096:	4605      	mov	r5, r0
 8014098:	e7f0      	b.n	801407c <_dtoa_r+0xad4>
 801409a:	f1bb 0f00 	cmp.w	fp, #0
 801409e:	bfcc      	ite	gt
 80140a0:	465e      	movgt	r6, fp
 80140a2:	2601      	movle	r6, #1
 80140a4:	4456      	add	r6, sl
 80140a6:	2700      	movs	r7, #0
 80140a8:	9902      	ldr	r1, [sp, #8]
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	2201      	movs	r2, #1
 80140ae:	4648      	mov	r0, r9
 80140b0:	f000 fe30 	bl	8014d14 <__lshift>
 80140b4:	4621      	mov	r1, r4
 80140b6:	9002      	str	r0, [sp, #8]
 80140b8:	f000 fe98 	bl	8014dec <__mcmp>
 80140bc:	2800      	cmp	r0, #0
 80140be:	dcb4      	bgt.n	801402a <_dtoa_r+0xa82>
 80140c0:	d102      	bne.n	80140c8 <_dtoa_r+0xb20>
 80140c2:	9b00      	ldr	r3, [sp, #0]
 80140c4:	07db      	lsls	r3, r3, #31
 80140c6:	d4b0      	bmi.n	801402a <_dtoa_r+0xa82>
 80140c8:	4633      	mov	r3, r6
 80140ca:	461e      	mov	r6, r3
 80140cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80140d0:	2a30      	cmp	r2, #48	@ 0x30
 80140d2:	d0fa      	beq.n	80140ca <_dtoa_r+0xb22>
 80140d4:	e4b5      	b.n	8013a42 <_dtoa_r+0x49a>
 80140d6:	459a      	cmp	sl, r3
 80140d8:	d1a8      	bne.n	801402c <_dtoa_r+0xa84>
 80140da:	2331      	movs	r3, #49	@ 0x31
 80140dc:	f108 0801 	add.w	r8, r8, #1
 80140e0:	f88a 3000 	strb.w	r3, [sl]
 80140e4:	e4ad      	b.n	8013a42 <_dtoa_r+0x49a>
 80140e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80140e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8014144 <_dtoa_r+0xb9c>
 80140ec:	b11b      	cbz	r3, 80140f6 <_dtoa_r+0xb4e>
 80140ee:	f10a 0308 	add.w	r3, sl, #8
 80140f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80140f4:	6013      	str	r3, [r2, #0]
 80140f6:	4650      	mov	r0, sl
 80140f8:	b017      	add	sp, #92	@ 0x5c
 80140fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fe:	9b07      	ldr	r3, [sp, #28]
 8014100:	2b01      	cmp	r3, #1
 8014102:	f77f ae2e 	ble.w	8013d62 <_dtoa_r+0x7ba>
 8014106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014108:	9308      	str	r3, [sp, #32]
 801410a:	2001      	movs	r0, #1
 801410c:	e64d      	b.n	8013daa <_dtoa_r+0x802>
 801410e:	f1bb 0f00 	cmp.w	fp, #0
 8014112:	f77f aed9 	ble.w	8013ec8 <_dtoa_r+0x920>
 8014116:	4656      	mov	r6, sl
 8014118:	9802      	ldr	r0, [sp, #8]
 801411a:	4621      	mov	r1, r4
 801411c:	f7ff f9ba 	bl	8013494 <quorem>
 8014120:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8014124:	f806 3b01 	strb.w	r3, [r6], #1
 8014128:	eba6 020a 	sub.w	r2, r6, sl
 801412c:	4593      	cmp	fp, r2
 801412e:	ddb4      	ble.n	801409a <_dtoa_r+0xaf2>
 8014130:	9902      	ldr	r1, [sp, #8]
 8014132:	2300      	movs	r3, #0
 8014134:	220a      	movs	r2, #10
 8014136:	4648      	mov	r0, r9
 8014138:	f000 fbfe 	bl	8014938 <__multadd>
 801413c:	9002      	str	r0, [sp, #8]
 801413e:	e7eb      	b.n	8014118 <_dtoa_r+0xb70>
 8014140:	0801684c 	.word	0x0801684c
 8014144:	080167e7 	.word	0x080167e7

08014148 <_free_r>:
 8014148:	b538      	push	{r3, r4, r5, lr}
 801414a:	4605      	mov	r5, r0
 801414c:	2900      	cmp	r1, #0
 801414e:	d041      	beq.n	80141d4 <_free_r+0x8c>
 8014150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014154:	1f0c      	subs	r4, r1, #4
 8014156:	2b00      	cmp	r3, #0
 8014158:	bfb8      	it	lt
 801415a:	18e4      	addlt	r4, r4, r3
 801415c:	f7fd fb8a 	bl	8011874 <__malloc_lock>
 8014160:	4a1d      	ldr	r2, [pc, #116]	@ (80141d8 <_free_r+0x90>)
 8014162:	6813      	ldr	r3, [r2, #0]
 8014164:	b933      	cbnz	r3, 8014174 <_free_r+0x2c>
 8014166:	6063      	str	r3, [r4, #4]
 8014168:	6014      	str	r4, [r2, #0]
 801416a:	4628      	mov	r0, r5
 801416c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014170:	f7fd bb86 	b.w	8011880 <__malloc_unlock>
 8014174:	42a3      	cmp	r3, r4
 8014176:	d908      	bls.n	801418a <_free_r+0x42>
 8014178:	6820      	ldr	r0, [r4, #0]
 801417a:	1821      	adds	r1, r4, r0
 801417c:	428b      	cmp	r3, r1
 801417e:	bf01      	itttt	eq
 8014180:	6819      	ldreq	r1, [r3, #0]
 8014182:	685b      	ldreq	r3, [r3, #4]
 8014184:	1809      	addeq	r1, r1, r0
 8014186:	6021      	streq	r1, [r4, #0]
 8014188:	e7ed      	b.n	8014166 <_free_r+0x1e>
 801418a:	461a      	mov	r2, r3
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	b10b      	cbz	r3, 8014194 <_free_r+0x4c>
 8014190:	42a3      	cmp	r3, r4
 8014192:	d9fa      	bls.n	801418a <_free_r+0x42>
 8014194:	6811      	ldr	r1, [r2, #0]
 8014196:	1850      	adds	r0, r2, r1
 8014198:	42a0      	cmp	r0, r4
 801419a:	d10b      	bne.n	80141b4 <_free_r+0x6c>
 801419c:	6820      	ldr	r0, [r4, #0]
 801419e:	4401      	add	r1, r0
 80141a0:	1850      	adds	r0, r2, r1
 80141a2:	4283      	cmp	r3, r0
 80141a4:	6011      	str	r1, [r2, #0]
 80141a6:	d1e0      	bne.n	801416a <_free_r+0x22>
 80141a8:	6818      	ldr	r0, [r3, #0]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	6053      	str	r3, [r2, #4]
 80141ae:	4408      	add	r0, r1
 80141b0:	6010      	str	r0, [r2, #0]
 80141b2:	e7da      	b.n	801416a <_free_r+0x22>
 80141b4:	d902      	bls.n	80141bc <_free_r+0x74>
 80141b6:	230c      	movs	r3, #12
 80141b8:	602b      	str	r3, [r5, #0]
 80141ba:	e7d6      	b.n	801416a <_free_r+0x22>
 80141bc:	6820      	ldr	r0, [r4, #0]
 80141be:	1821      	adds	r1, r4, r0
 80141c0:	428b      	cmp	r3, r1
 80141c2:	bf04      	itt	eq
 80141c4:	6819      	ldreq	r1, [r3, #0]
 80141c6:	685b      	ldreq	r3, [r3, #4]
 80141c8:	6063      	str	r3, [r4, #4]
 80141ca:	bf04      	itt	eq
 80141cc:	1809      	addeq	r1, r1, r0
 80141ce:	6021      	streq	r1, [r4, #0]
 80141d0:	6054      	str	r4, [r2, #4]
 80141d2:	e7ca      	b.n	801416a <_free_r+0x22>
 80141d4:	bd38      	pop	{r3, r4, r5, pc}
 80141d6:	bf00      	nop
 80141d8:	200136e8 	.word	0x200136e8

080141dc <rshift>:
 80141dc:	6903      	ldr	r3, [r0, #16]
 80141de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80141e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80141ea:	f100 0414 	add.w	r4, r0, #20
 80141ee:	dd45      	ble.n	801427c <rshift+0xa0>
 80141f0:	f011 011f 	ands.w	r1, r1, #31
 80141f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80141f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80141fc:	d10c      	bne.n	8014218 <rshift+0x3c>
 80141fe:	f100 0710 	add.w	r7, r0, #16
 8014202:	4629      	mov	r1, r5
 8014204:	42b1      	cmp	r1, r6
 8014206:	d334      	bcc.n	8014272 <rshift+0x96>
 8014208:	1a9b      	subs	r3, r3, r2
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	1eea      	subs	r2, r5, #3
 801420e:	4296      	cmp	r6, r2
 8014210:	bf38      	it	cc
 8014212:	2300      	movcc	r3, #0
 8014214:	4423      	add	r3, r4
 8014216:	e015      	b.n	8014244 <rshift+0x68>
 8014218:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801421c:	f1c1 0820 	rsb	r8, r1, #32
 8014220:	40cf      	lsrs	r7, r1
 8014222:	f105 0e04 	add.w	lr, r5, #4
 8014226:	46a1      	mov	r9, r4
 8014228:	4576      	cmp	r6, lr
 801422a:	46f4      	mov	ip, lr
 801422c:	d815      	bhi.n	801425a <rshift+0x7e>
 801422e:	1a9a      	subs	r2, r3, r2
 8014230:	0092      	lsls	r2, r2, #2
 8014232:	3a04      	subs	r2, #4
 8014234:	3501      	adds	r5, #1
 8014236:	42ae      	cmp	r6, r5
 8014238:	bf38      	it	cc
 801423a:	2200      	movcc	r2, #0
 801423c:	18a3      	adds	r3, r4, r2
 801423e:	50a7      	str	r7, [r4, r2]
 8014240:	b107      	cbz	r7, 8014244 <rshift+0x68>
 8014242:	3304      	adds	r3, #4
 8014244:	1b1a      	subs	r2, r3, r4
 8014246:	42a3      	cmp	r3, r4
 8014248:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801424c:	bf08      	it	eq
 801424e:	2300      	moveq	r3, #0
 8014250:	6102      	str	r2, [r0, #16]
 8014252:	bf08      	it	eq
 8014254:	6143      	streq	r3, [r0, #20]
 8014256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801425a:	f8dc c000 	ldr.w	ip, [ip]
 801425e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014262:	ea4c 0707 	orr.w	r7, ip, r7
 8014266:	f849 7b04 	str.w	r7, [r9], #4
 801426a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801426e:	40cf      	lsrs	r7, r1
 8014270:	e7da      	b.n	8014228 <rshift+0x4c>
 8014272:	f851 cb04 	ldr.w	ip, [r1], #4
 8014276:	f847 cf04 	str.w	ip, [r7, #4]!
 801427a:	e7c3      	b.n	8014204 <rshift+0x28>
 801427c:	4623      	mov	r3, r4
 801427e:	e7e1      	b.n	8014244 <rshift+0x68>

08014280 <__hexdig_fun>:
 8014280:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014284:	2b09      	cmp	r3, #9
 8014286:	d802      	bhi.n	801428e <__hexdig_fun+0xe>
 8014288:	3820      	subs	r0, #32
 801428a:	b2c0      	uxtb	r0, r0
 801428c:	4770      	bx	lr
 801428e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014292:	2b05      	cmp	r3, #5
 8014294:	d801      	bhi.n	801429a <__hexdig_fun+0x1a>
 8014296:	3847      	subs	r0, #71	@ 0x47
 8014298:	e7f7      	b.n	801428a <__hexdig_fun+0xa>
 801429a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801429e:	2b05      	cmp	r3, #5
 80142a0:	d801      	bhi.n	80142a6 <__hexdig_fun+0x26>
 80142a2:	3827      	subs	r0, #39	@ 0x27
 80142a4:	e7f1      	b.n	801428a <__hexdig_fun+0xa>
 80142a6:	2000      	movs	r0, #0
 80142a8:	4770      	bx	lr
	...

080142ac <__gethex>:
 80142ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b0:	b085      	sub	sp, #20
 80142b2:	468a      	mov	sl, r1
 80142b4:	9302      	str	r3, [sp, #8]
 80142b6:	680b      	ldr	r3, [r1, #0]
 80142b8:	9001      	str	r0, [sp, #4]
 80142ba:	4690      	mov	r8, r2
 80142bc:	1c9c      	adds	r4, r3, #2
 80142be:	46a1      	mov	r9, r4
 80142c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80142c4:	2830      	cmp	r0, #48	@ 0x30
 80142c6:	d0fa      	beq.n	80142be <__gethex+0x12>
 80142c8:	eba9 0303 	sub.w	r3, r9, r3
 80142cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80142d0:	f7ff ffd6 	bl	8014280 <__hexdig_fun>
 80142d4:	4605      	mov	r5, r0
 80142d6:	2800      	cmp	r0, #0
 80142d8:	d168      	bne.n	80143ac <__gethex+0x100>
 80142da:	49a0      	ldr	r1, [pc, #640]	@ (801455c <__gethex+0x2b0>)
 80142dc:	2201      	movs	r2, #1
 80142de:	4648      	mov	r0, r9
 80142e0:	f7fe ff48 	bl	8013174 <strncmp>
 80142e4:	4607      	mov	r7, r0
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d167      	bne.n	80143ba <__gethex+0x10e>
 80142ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80142ee:	4626      	mov	r6, r4
 80142f0:	f7ff ffc6 	bl	8014280 <__hexdig_fun>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d062      	beq.n	80143be <__gethex+0x112>
 80142f8:	4623      	mov	r3, r4
 80142fa:	7818      	ldrb	r0, [r3, #0]
 80142fc:	2830      	cmp	r0, #48	@ 0x30
 80142fe:	4699      	mov	r9, r3
 8014300:	f103 0301 	add.w	r3, r3, #1
 8014304:	d0f9      	beq.n	80142fa <__gethex+0x4e>
 8014306:	f7ff ffbb 	bl	8014280 <__hexdig_fun>
 801430a:	fab0 f580 	clz	r5, r0
 801430e:	096d      	lsrs	r5, r5, #5
 8014310:	f04f 0b01 	mov.w	fp, #1
 8014314:	464a      	mov	r2, r9
 8014316:	4616      	mov	r6, r2
 8014318:	3201      	adds	r2, #1
 801431a:	7830      	ldrb	r0, [r6, #0]
 801431c:	f7ff ffb0 	bl	8014280 <__hexdig_fun>
 8014320:	2800      	cmp	r0, #0
 8014322:	d1f8      	bne.n	8014316 <__gethex+0x6a>
 8014324:	498d      	ldr	r1, [pc, #564]	@ (801455c <__gethex+0x2b0>)
 8014326:	2201      	movs	r2, #1
 8014328:	4630      	mov	r0, r6
 801432a:	f7fe ff23 	bl	8013174 <strncmp>
 801432e:	2800      	cmp	r0, #0
 8014330:	d13f      	bne.n	80143b2 <__gethex+0x106>
 8014332:	b944      	cbnz	r4, 8014346 <__gethex+0x9a>
 8014334:	1c74      	adds	r4, r6, #1
 8014336:	4622      	mov	r2, r4
 8014338:	4616      	mov	r6, r2
 801433a:	3201      	adds	r2, #1
 801433c:	7830      	ldrb	r0, [r6, #0]
 801433e:	f7ff ff9f 	bl	8014280 <__hexdig_fun>
 8014342:	2800      	cmp	r0, #0
 8014344:	d1f8      	bne.n	8014338 <__gethex+0x8c>
 8014346:	1ba4      	subs	r4, r4, r6
 8014348:	00a7      	lsls	r7, r4, #2
 801434a:	7833      	ldrb	r3, [r6, #0]
 801434c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014350:	2b50      	cmp	r3, #80	@ 0x50
 8014352:	d13e      	bne.n	80143d2 <__gethex+0x126>
 8014354:	7873      	ldrb	r3, [r6, #1]
 8014356:	2b2b      	cmp	r3, #43	@ 0x2b
 8014358:	d033      	beq.n	80143c2 <__gethex+0x116>
 801435a:	2b2d      	cmp	r3, #45	@ 0x2d
 801435c:	d034      	beq.n	80143c8 <__gethex+0x11c>
 801435e:	1c71      	adds	r1, r6, #1
 8014360:	2400      	movs	r4, #0
 8014362:	7808      	ldrb	r0, [r1, #0]
 8014364:	f7ff ff8c 	bl	8014280 <__hexdig_fun>
 8014368:	1e43      	subs	r3, r0, #1
 801436a:	b2db      	uxtb	r3, r3
 801436c:	2b18      	cmp	r3, #24
 801436e:	d830      	bhi.n	80143d2 <__gethex+0x126>
 8014370:	f1a0 0210 	sub.w	r2, r0, #16
 8014374:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014378:	f7ff ff82 	bl	8014280 <__hexdig_fun>
 801437c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014380:	fa5f fc8c 	uxtb.w	ip, ip
 8014384:	f1bc 0f18 	cmp.w	ip, #24
 8014388:	f04f 030a 	mov.w	r3, #10
 801438c:	d91e      	bls.n	80143cc <__gethex+0x120>
 801438e:	b104      	cbz	r4, 8014392 <__gethex+0xe6>
 8014390:	4252      	negs	r2, r2
 8014392:	4417      	add	r7, r2
 8014394:	f8ca 1000 	str.w	r1, [sl]
 8014398:	b1ed      	cbz	r5, 80143d6 <__gethex+0x12a>
 801439a:	f1bb 0f00 	cmp.w	fp, #0
 801439e:	bf0c      	ite	eq
 80143a0:	2506      	moveq	r5, #6
 80143a2:	2500      	movne	r5, #0
 80143a4:	4628      	mov	r0, r5
 80143a6:	b005      	add	sp, #20
 80143a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ac:	2500      	movs	r5, #0
 80143ae:	462c      	mov	r4, r5
 80143b0:	e7b0      	b.n	8014314 <__gethex+0x68>
 80143b2:	2c00      	cmp	r4, #0
 80143b4:	d1c7      	bne.n	8014346 <__gethex+0x9a>
 80143b6:	4627      	mov	r7, r4
 80143b8:	e7c7      	b.n	801434a <__gethex+0x9e>
 80143ba:	464e      	mov	r6, r9
 80143bc:	462f      	mov	r7, r5
 80143be:	2501      	movs	r5, #1
 80143c0:	e7c3      	b.n	801434a <__gethex+0x9e>
 80143c2:	2400      	movs	r4, #0
 80143c4:	1cb1      	adds	r1, r6, #2
 80143c6:	e7cc      	b.n	8014362 <__gethex+0xb6>
 80143c8:	2401      	movs	r4, #1
 80143ca:	e7fb      	b.n	80143c4 <__gethex+0x118>
 80143cc:	fb03 0002 	mla	r0, r3, r2, r0
 80143d0:	e7ce      	b.n	8014370 <__gethex+0xc4>
 80143d2:	4631      	mov	r1, r6
 80143d4:	e7de      	b.n	8014394 <__gethex+0xe8>
 80143d6:	eba6 0309 	sub.w	r3, r6, r9
 80143da:	3b01      	subs	r3, #1
 80143dc:	4629      	mov	r1, r5
 80143de:	2b07      	cmp	r3, #7
 80143e0:	dc0a      	bgt.n	80143f8 <__gethex+0x14c>
 80143e2:	9801      	ldr	r0, [sp, #4]
 80143e4:	f000 fa46 	bl	8014874 <_Balloc>
 80143e8:	4604      	mov	r4, r0
 80143ea:	b940      	cbnz	r0, 80143fe <__gethex+0x152>
 80143ec:	4b5c      	ldr	r3, [pc, #368]	@ (8014560 <__gethex+0x2b4>)
 80143ee:	4602      	mov	r2, r0
 80143f0:	21e4      	movs	r1, #228	@ 0xe4
 80143f2:	485c      	ldr	r0, [pc, #368]	@ (8014564 <__gethex+0x2b8>)
 80143f4:	f7ff f830 	bl	8013458 <__assert_func>
 80143f8:	3101      	adds	r1, #1
 80143fa:	105b      	asrs	r3, r3, #1
 80143fc:	e7ef      	b.n	80143de <__gethex+0x132>
 80143fe:	f100 0a14 	add.w	sl, r0, #20
 8014402:	2300      	movs	r3, #0
 8014404:	4655      	mov	r5, sl
 8014406:	469b      	mov	fp, r3
 8014408:	45b1      	cmp	r9, r6
 801440a:	d337      	bcc.n	801447c <__gethex+0x1d0>
 801440c:	f845 bb04 	str.w	fp, [r5], #4
 8014410:	eba5 050a 	sub.w	r5, r5, sl
 8014414:	10ad      	asrs	r5, r5, #2
 8014416:	6125      	str	r5, [r4, #16]
 8014418:	4658      	mov	r0, fp
 801441a:	f000 fb1d 	bl	8014a58 <__hi0bits>
 801441e:	016d      	lsls	r5, r5, #5
 8014420:	f8d8 6000 	ldr.w	r6, [r8]
 8014424:	1a2d      	subs	r5, r5, r0
 8014426:	42b5      	cmp	r5, r6
 8014428:	dd54      	ble.n	80144d4 <__gethex+0x228>
 801442a:	1bad      	subs	r5, r5, r6
 801442c:	4629      	mov	r1, r5
 801442e:	4620      	mov	r0, r4
 8014430:	f000 fea9 	bl	8015186 <__any_on>
 8014434:	4681      	mov	r9, r0
 8014436:	b178      	cbz	r0, 8014458 <__gethex+0x1ac>
 8014438:	1e6b      	subs	r3, r5, #1
 801443a:	1159      	asrs	r1, r3, #5
 801443c:	f003 021f 	and.w	r2, r3, #31
 8014440:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014444:	f04f 0901 	mov.w	r9, #1
 8014448:	fa09 f202 	lsl.w	r2, r9, r2
 801444c:	420a      	tst	r2, r1
 801444e:	d003      	beq.n	8014458 <__gethex+0x1ac>
 8014450:	454b      	cmp	r3, r9
 8014452:	dc36      	bgt.n	80144c2 <__gethex+0x216>
 8014454:	f04f 0902 	mov.w	r9, #2
 8014458:	4629      	mov	r1, r5
 801445a:	4620      	mov	r0, r4
 801445c:	f7ff febe 	bl	80141dc <rshift>
 8014460:	442f      	add	r7, r5
 8014462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014466:	42bb      	cmp	r3, r7
 8014468:	da42      	bge.n	80144f0 <__gethex+0x244>
 801446a:	9801      	ldr	r0, [sp, #4]
 801446c:	4621      	mov	r1, r4
 801446e:	f000 fa41 	bl	80148f4 <_Bfree>
 8014472:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014474:	2300      	movs	r3, #0
 8014476:	6013      	str	r3, [r2, #0]
 8014478:	25a3      	movs	r5, #163	@ 0xa3
 801447a:	e793      	b.n	80143a4 <__gethex+0xf8>
 801447c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014480:	2a2e      	cmp	r2, #46	@ 0x2e
 8014482:	d012      	beq.n	80144aa <__gethex+0x1fe>
 8014484:	2b20      	cmp	r3, #32
 8014486:	d104      	bne.n	8014492 <__gethex+0x1e6>
 8014488:	f845 bb04 	str.w	fp, [r5], #4
 801448c:	f04f 0b00 	mov.w	fp, #0
 8014490:	465b      	mov	r3, fp
 8014492:	7830      	ldrb	r0, [r6, #0]
 8014494:	9303      	str	r3, [sp, #12]
 8014496:	f7ff fef3 	bl	8014280 <__hexdig_fun>
 801449a:	9b03      	ldr	r3, [sp, #12]
 801449c:	f000 000f 	and.w	r0, r0, #15
 80144a0:	4098      	lsls	r0, r3
 80144a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80144a6:	3304      	adds	r3, #4
 80144a8:	e7ae      	b.n	8014408 <__gethex+0x15c>
 80144aa:	45b1      	cmp	r9, r6
 80144ac:	d8ea      	bhi.n	8014484 <__gethex+0x1d8>
 80144ae:	492b      	ldr	r1, [pc, #172]	@ (801455c <__gethex+0x2b0>)
 80144b0:	9303      	str	r3, [sp, #12]
 80144b2:	2201      	movs	r2, #1
 80144b4:	4630      	mov	r0, r6
 80144b6:	f7fe fe5d 	bl	8013174 <strncmp>
 80144ba:	9b03      	ldr	r3, [sp, #12]
 80144bc:	2800      	cmp	r0, #0
 80144be:	d1e1      	bne.n	8014484 <__gethex+0x1d8>
 80144c0:	e7a2      	b.n	8014408 <__gethex+0x15c>
 80144c2:	1ea9      	subs	r1, r5, #2
 80144c4:	4620      	mov	r0, r4
 80144c6:	f000 fe5e 	bl	8015186 <__any_on>
 80144ca:	2800      	cmp	r0, #0
 80144cc:	d0c2      	beq.n	8014454 <__gethex+0x1a8>
 80144ce:	f04f 0903 	mov.w	r9, #3
 80144d2:	e7c1      	b.n	8014458 <__gethex+0x1ac>
 80144d4:	da09      	bge.n	80144ea <__gethex+0x23e>
 80144d6:	1b75      	subs	r5, r6, r5
 80144d8:	4621      	mov	r1, r4
 80144da:	9801      	ldr	r0, [sp, #4]
 80144dc:	462a      	mov	r2, r5
 80144de:	f000 fc19 	bl	8014d14 <__lshift>
 80144e2:	1b7f      	subs	r7, r7, r5
 80144e4:	4604      	mov	r4, r0
 80144e6:	f100 0a14 	add.w	sl, r0, #20
 80144ea:	f04f 0900 	mov.w	r9, #0
 80144ee:	e7b8      	b.n	8014462 <__gethex+0x1b6>
 80144f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80144f4:	42bd      	cmp	r5, r7
 80144f6:	dd6f      	ble.n	80145d8 <__gethex+0x32c>
 80144f8:	1bed      	subs	r5, r5, r7
 80144fa:	42ae      	cmp	r6, r5
 80144fc:	dc34      	bgt.n	8014568 <__gethex+0x2bc>
 80144fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014502:	2b02      	cmp	r3, #2
 8014504:	d022      	beq.n	801454c <__gethex+0x2a0>
 8014506:	2b03      	cmp	r3, #3
 8014508:	d024      	beq.n	8014554 <__gethex+0x2a8>
 801450a:	2b01      	cmp	r3, #1
 801450c:	d115      	bne.n	801453a <__gethex+0x28e>
 801450e:	42ae      	cmp	r6, r5
 8014510:	d113      	bne.n	801453a <__gethex+0x28e>
 8014512:	2e01      	cmp	r6, #1
 8014514:	d10b      	bne.n	801452e <__gethex+0x282>
 8014516:	9a02      	ldr	r2, [sp, #8]
 8014518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801451c:	6013      	str	r3, [r2, #0]
 801451e:	2301      	movs	r3, #1
 8014520:	6123      	str	r3, [r4, #16]
 8014522:	f8ca 3000 	str.w	r3, [sl]
 8014526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014528:	2562      	movs	r5, #98	@ 0x62
 801452a:	601c      	str	r4, [r3, #0]
 801452c:	e73a      	b.n	80143a4 <__gethex+0xf8>
 801452e:	1e71      	subs	r1, r6, #1
 8014530:	4620      	mov	r0, r4
 8014532:	f000 fe28 	bl	8015186 <__any_on>
 8014536:	2800      	cmp	r0, #0
 8014538:	d1ed      	bne.n	8014516 <__gethex+0x26a>
 801453a:	9801      	ldr	r0, [sp, #4]
 801453c:	4621      	mov	r1, r4
 801453e:	f000 f9d9 	bl	80148f4 <_Bfree>
 8014542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014544:	2300      	movs	r3, #0
 8014546:	6013      	str	r3, [r2, #0]
 8014548:	2550      	movs	r5, #80	@ 0x50
 801454a:	e72b      	b.n	80143a4 <__gethex+0xf8>
 801454c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801454e:	2b00      	cmp	r3, #0
 8014550:	d1f3      	bne.n	801453a <__gethex+0x28e>
 8014552:	e7e0      	b.n	8014516 <__gethex+0x26a>
 8014554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014556:	2b00      	cmp	r3, #0
 8014558:	d1dd      	bne.n	8014516 <__gethex+0x26a>
 801455a:	e7ee      	b.n	801453a <__gethex+0x28e>
 801455c:	080166fc 	.word	0x080166fc
 8014560:	0801684c 	.word	0x0801684c
 8014564:	0801685d 	.word	0x0801685d
 8014568:	1e6f      	subs	r7, r5, #1
 801456a:	f1b9 0f00 	cmp.w	r9, #0
 801456e:	d130      	bne.n	80145d2 <__gethex+0x326>
 8014570:	b127      	cbz	r7, 801457c <__gethex+0x2d0>
 8014572:	4639      	mov	r1, r7
 8014574:	4620      	mov	r0, r4
 8014576:	f000 fe06 	bl	8015186 <__any_on>
 801457a:	4681      	mov	r9, r0
 801457c:	117a      	asrs	r2, r7, #5
 801457e:	2301      	movs	r3, #1
 8014580:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014584:	f007 071f 	and.w	r7, r7, #31
 8014588:	40bb      	lsls	r3, r7
 801458a:	4213      	tst	r3, r2
 801458c:	4629      	mov	r1, r5
 801458e:	4620      	mov	r0, r4
 8014590:	bf18      	it	ne
 8014592:	f049 0902 	orrne.w	r9, r9, #2
 8014596:	f7ff fe21 	bl	80141dc <rshift>
 801459a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801459e:	1b76      	subs	r6, r6, r5
 80145a0:	2502      	movs	r5, #2
 80145a2:	f1b9 0f00 	cmp.w	r9, #0
 80145a6:	d047      	beq.n	8014638 <__gethex+0x38c>
 80145a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d015      	beq.n	80145dc <__gethex+0x330>
 80145b0:	2b03      	cmp	r3, #3
 80145b2:	d017      	beq.n	80145e4 <__gethex+0x338>
 80145b4:	2b01      	cmp	r3, #1
 80145b6:	d109      	bne.n	80145cc <__gethex+0x320>
 80145b8:	f019 0f02 	tst.w	r9, #2
 80145bc:	d006      	beq.n	80145cc <__gethex+0x320>
 80145be:	f8da 3000 	ldr.w	r3, [sl]
 80145c2:	ea49 0903 	orr.w	r9, r9, r3
 80145c6:	f019 0f01 	tst.w	r9, #1
 80145ca:	d10e      	bne.n	80145ea <__gethex+0x33e>
 80145cc:	f045 0510 	orr.w	r5, r5, #16
 80145d0:	e032      	b.n	8014638 <__gethex+0x38c>
 80145d2:	f04f 0901 	mov.w	r9, #1
 80145d6:	e7d1      	b.n	801457c <__gethex+0x2d0>
 80145d8:	2501      	movs	r5, #1
 80145da:	e7e2      	b.n	80145a2 <__gethex+0x2f6>
 80145dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145de:	f1c3 0301 	rsb	r3, r3, #1
 80145e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80145e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d0f0      	beq.n	80145cc <__gethex+0x320>
 80145ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80145ee:	f104 0314 	add.w	r3, r4, #20
 80145f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80145f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80145fa:	f04f 0c00 	mov.w	ip, #0
 80145fe:	4618      	mov	r0, r3
 8014600:	f853 2b04 	ldr.w	r2, [r3], #4
 8014604:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014608:	d01b      	beq.n	8014642 <__gethex+0x396>
 801460a:	3201      	adds	r2, #1
 801460c:	6002      	str	r2, [r0, #0]
 801460e:	2d02      	cmp	r5, #2
 8014610:	f104 0314 	add.w	r3, r4, #20
 8014614:	d13c      	bne.n	8014690 <__gethex+0x3e4>
 8014616:	f8d8 2000 	ldr.w	r2, [r8]
 801461a:	3a01      	subs	r2, #1
 801461c:	42b2      	cmp	r2, r6
 801461e:	d109      	bne.n	8014634 <__gethex+0x388>
 8014620:	1171      	asrs	r1, r6, #5
 8014622:	2201      	movs	r2, #1
 8014624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014628:	f006 061f 	and.w	r6, r6, #31
 801462c:	fa02 f606 	lsl.w	r6, r2, r6
 8014630:	421e      	tst	r6, r3
 8014632:	d13a      	bne.n	80146aa <__gethex+0x3fe>
 8014634:	f045 0520 	orr.w	r5, r5, #32
 8014638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801463a:	601c      	str	r4, [r3, #0]
 801463c:	9b02      	ldr	r3, [sp, #8]
 801463e:	601f      	str	r7, [r3, #0]
 8014640:	e6b0      	b.n	80143a4 <__gethex+0xf8>
 8014642:	4299      	cmp	r1, r3
 8014644:	f843 cc04 	str.w	ip, [r3, #-4]
 8014648:	d8d9      	bhi.n	80145fe <__gethex+0x352>
 801464a:	68a3      	ldr	r3, [r4, #8]
 801464c:	459b      	cmp	fp, r3
 801464e:	db17      	blt.n	8014680 <__gethex+0x3d4>
 8014650:	6861      	ldr	r1, [r4, #4]
 8014652:	9801      	ldr	r0, [sp, #4]
 8014654:	3101      	adds	r1, #1
 8014656:	f000 f90d 	bl	8014874 <_Balloc>
 801465a:	4681      	mov	r9, r0
 801465c:	b918      	cbnz	r0, 8014666 <__gethex+0x3ba>
 801465e:	4b1a      	ldr	r3, [pc, #104]	@ (80146c8 <__gethex+0x41c>)
 8014660:	4602      	mov	r2, r0
 8014662:	2184      	movs	r1, #132	@ 0x84
 8014664:	e6c5      	b.n	80143f2 <__gethex+0x146>
 8014666:	6922      	ldr	r2, [r4, #16]
 8014668:	3202      	adds	r2, #2
 801466a:	f104 010c 	add.w	r1, r4, #12
 801466e:	0092      	lsls	r2, r2, #2
 8014670:	300c      	adds	r0, #12
 8014672:	f7fe feda 	bl	801342a <memcpy>
 8014676:	4621      	mov	r1, r4
 8014678:	9801      	ldr	r0, [sp, #4]
 801467a:	f000 f93b 	bl	80148f4 <_Bfree>
 801467e:	464c      	mov	r4, r9
 8014680:	6923      	ldr	r3, [r4, #16]
 8014682:	1c5a      	adds	r2, r3, #1
 8014684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014688:	6122      	str	r2, [r4, #16]
 801468a:	2201      	movs	r2, #1
 801468c:	615a      	str	r2, [r3, #20]
 801468e:	e7be      	b.n	801460e <__gethex+0x362>
 8014690:	6922      	ldr	r2, [r4, #16]
 8014692:	455a      	cmp	r2, fp
 8014694:	dd0b      	ble.n	80146ae <__gethex+0x402>
 8014696:	2101      	movs	r1, #1
 8014698:	4620      	mov	r0, r4
 801469a:	f7ff fd9f 	bl	80141dc <rshift>
 801469e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146a2:	3701      	adds	r7, #1
 80146a4:	42bb      	cmp	r3, r7
 80146a6:	f6ff aee0 	blt.w	801446a <__gethex+0x1be>
 80146aa:	2501      	movs	r5, #1
 80146ac:	e7c2      	b.n	8014634 <__gethex+0x388>
 80146ae:	f016 061f 	ands.w	r6, r6, #31
 80146b2:	d0fa      	beq.n	80146aa <__gethex+0x3fe>
 80146b4:	4453      	add	r3, sl
 80146b6:	f1c6 0620 	rsb	r6, r6, #32
 80146ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80146be:	f000 f9cb 	bl	8014a58 <__hi0bits>
 80146c2:	42b0      	cmp	r0, r6
 80146c4:	dbe7      	blt.n	8014696 <__gethex+0x3ea>
 80146c6:	e7f0      	b.n	80146aa <__gethex+0x3fe>
 80146c8:	0801684c 	.word	0x0801684c

080146cc <L_shift>:
 80146cc:	f1c2 0208 	rsb	r2, r2, #8
 80146d0:	0092      	lsls	r2, r2, #2
 80146d2:	b570      	push	{r4, r5, r6, lr}
 80146d4:	f1c2 0620 	rsb	r6, r2, #32
 80146d8:	6843      	ldr	r3, [r0, #4]
 80146da:	6804      	ldr	r4, [r0, #0]
 80146dc:	fa03 f506 	lsl.w	r5, r3, r6
 80146e0:	432c      	orrs	r4, r5
 80146e2:	40d3      	lsrs	r3, r2
 80146e4:	6004      	str	r4, [r0, #0]
 80146e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80146ea:	4288      	cmp	r0, r1
 80146ec:	d3f4      	bcc.n	80146d8 <L_shift+0xc>
 80146ee:	bd70      	pop	{r4, r5, r6, pc}

080146f0 <__match>:
 80146f0:	b530      	push	{r4, r5, lr}
 80146f2:	6803      	ldr	r3, [r0, #0]
 80146f4:	3301      	adds	r3, #1
 80146f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146fa:	b914      	cbnz	r4, 8014702 <__match+0x12>
 80146fc:	6003      	str	r3, [r0, #0]
 80146fe:	2001      	movs	r0, #1
 8014700:	bd30      	pop	{r4, r5, pc}
 8014702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014706:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801470a:	2d19      	cmp	r5, #25
 801470c:	bf98      	it	ls
 801470e:	3220      	addls	r2, #32
 8014710:	42a2      	cmp	r2, r4
 8014712:	d0f0      	beq.n	80146f6 <__match+0x6>
 8014714:	2000      	movs	r0, #0
 8014716:	e7f3      	b.n	8014700 <__match+0x10>

08014718 <__hexnan>:
 8014718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471c:	680b      	ldr	r3, [r1, #0]
 801471e:	6801      	ldr	r1, [r0, #0]
 8014720:	115e      	asrs	r6, r3, #5
 8014722:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014726:	f013 031f 	ands.w	r3, r3, #31
 801472a:	b087      	sub	sp, #28
 801472c:	bf18      	it	ne
 801472e:	3604      	addne	r6, #4
 8014730:	2500      	movs	r5, #0
 8014732:	1f37      	subs	r7, r6, #4
 8014734:	4682      	mov	sl, r0
 8014736:	4690      	mov	r8, r2
 8014738:	9301      	str	r3, [sp, #4]
 801473a:	f846 5c04 	str.w	r5, [r6, #-4]
 801473e:	46b9      	mov	r9, r7
 8014740:	463c      	mov	r4, r7
 8014742:	9502      	str	r5, [sp, #8]
 8014744:	46ab      	mov	fp, r5
 8014746:	784a      	ldrb	r2, [r1, #1]
 8014748:	1c4b      	adds	r3, r1, #1
 801474a:	9303      	str	r3, [sp, #12]
 801474c:	b342      	cbz	r2, 80147a0 <__hexnan+0x88>
 801474e:	4610      	mov	r0, r2
 8014750:	9105      	str	r1, [sp, #20]
 8014752:	9204      	str	r2, [sp, #16]
 8014754:	f7ff fd94 	bl	8014280 <__hexdig_fun>
 8014758:	2800      	cmp	r0, #0
 801475a:	d151      	bne.n	8014800 <__hexnan+0xe8>
 801475c:	9a04      	ldr	r2, [sp, #16]
 801475e:	9905      	ldr	r1, [sp, #20]
 8014760:	2a20      	cmp	r2, #32
 8014762:	d818      	bhi.n	8014796 <__hexnan+0x7e>
 8014764:	9b02      	ldr	r3, [sp, #8]
 8014766:	459b      	cmp	fp, r3
 8014768:	dd13      	ble.n	8014792 <__hexnan+0x7a>
 801476a:	454c      	cmp	r4, r9
 801476c:	d206      	bcs.n	801477c <__hexnan+0x64>
 801476e:	2d07      	cmp	r5, #7
 8014770:	dc04      	bgt.n	801477c <__hexnan+0x64>
 8014772:	462a      	mov	r2, r5
 8014774:	4649      	mov	r1, r9
 8014776:	4620      	mov	r0, r4
 8014778:	f7ff ffa8 	bl	80146cc <L_shift>
 801477c:	4544      	cmp	r4, r8
 801477e:	d952      	bls.n	8014826 <__hexnan+0x10e>
 8014780:	2300      	movs	r3, #0
 8014782:	f1a4 0904 	sub.w	r9, r4, #4
 8014786:	f844 3c04 	str.w	r3, [r4, #-4]
 801478a:	f8cd b008 	str.w	fp, [sp, #8]
 801478e:	464c      	mov	r4, r9
 8014790:	461d      	mov	r5, r3
 8014792:	9903      	ldr	r1, [sp, #12]
 8014794:	e7d7      	b.n	8014746 <__hexnan+0x2e>
 8014796:	2a29      	cmp	r2, #41	@ 0x29
 8014798:	d157      	bne.n	801484a <__hexnan+0x132>
 801479a:	3102      	adds	r1, #2
 801479c:	f8ca 1000 	str.w	r1, [sl]
 80147a0:	f1bb 0f00 	cmp.w	fp, #0
 80147a4:	d051      	beq.n	801484a <__hexnan+0x132>
 80147a6:	454c      	cmp	r4, r9
 80147a8:	d206      	bcs.n	80147b8 <__hexnan+0xa0>
 80147aa:	2d07      	cmp	r5, #7
 80147ac:	dc04      	bgt.n	80147b8 <__hexnan+0xa0>
 80147ae:	462a      	mov	r2, r5
 80147b0:	4649      	mov	r1, r9
 80147b2:	4620      	mov	r0, r4
 80147b4:	f7ff ff8a 	bl	80146cc <L_shift>
 80147b8:	4544      	cmp	r4, r8
 80147ba:	d936      	bls.n	801482a <__hexnan+0x112>
 80147bc:	f1a8 0204 	sub.w	r2, r8, #4
 80147c0:	4623      	mov	r3, r4
 80147c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80147c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80147ca:	429f      	cmp	r7, r3
 80147cc:	d2f9      	bcs.n	80147c2 <__hexnan+0xaa>
 80147ce:	1b3b      	subs	r3, r7, r4
 80147d0:	f023 0303 	bic.w	r3, r3, #3
 80147d4:	3304      	adds	r3, #4
 80147d6:	3401      	adds	r4, #1
 80147d8:	3e03      	subs	r6, #3
 80147da:	42b4      	cmp	r4, r6
 80147dc:	bf88      	it	hi
 80147de:	2304      	movhi	r3, #4
 80147e0:	4443      	add	r3, r8
 80147e2:	2200      	movs	r2, #0
 80147e4:	f843 2b04 	str.w	r2, [r3], #4
 80147e8:	429f      	cmp	r7, r3
 80147ea:	d2fb      	bcs.n	80147e4 <__hexnan+0xcc>
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	b91b      	cbnz	r3, 80147f8 <__hexnan+0xe0>
 80147f0:	4547      	cmp	r7, r8
 80147f2:	d128      	bne.n	8014846 <__hexnan+0x12e>
 80147f4:	2301      	movs	r3, #1
 80147f6:	603b      	str	r3, [r7, #0]
 80147f8:	2005      	movs	r0, #5
 80147fa:	b007      	add	sp, #28
 80147fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014800:	3501      	adds	r5, #1
 8014802:	2d08      	cmp	r5, #8
 8014804:	f10b 0b01 	add.w	fp, fp, #1
 8014808:	dd06      	ble.n	8014818 <__hexnan+0x100>
 801480a:	4544      	cmp	r4, r8
 801480c:	d9c1      	bls.n	8014792 <__hexnan+0x7a>
 801480e:	2300      	movs	r3, #0
 8014810:	f844 3c04 	str.w	r3, [r4, #-4]
 8014814:	2501      	movs	r5, #1
 8014816:	3c04      	subs	r4, #4
 8014818:	6822      	ldr	r2, [r4, #0]
 801481a:	f000 000f 	and.w	r0, r0, #15
 801481e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014822:	6020      	str	r0, [r4, #0]
 8014824:	e7b5      	b.n	8014792 <__hexnan+0x7a>
 8014826:	2508      	movs	r5, #8
 8014828:	e7b3      	b.n	8014792 <__hexnan+0x7a>
 801482a:	9b01      	ldr	r3, [sp, #4]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d0dd      	beq.n	80147ec <__hexnan+0xd4>
 8014830:	f1c3 0320 	rsb	r3, r3, #32
 8014834:	f04f 32ff 	mov.w	r2, #4294967295
 8014838:	40da      	lsrs	r2, r3
 801483a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801483e:	4013      	ands	r3, r2
 8014840:	f846 3c04 	str.w	r3, [r6, #-4]
 8014844:	e7d2      	b.n	80147ec <__hexnan+0xd4>
 8014846:	3f04      	subs	r7, #4
 8014848:	e7d0      	b.n	80147ec <__hexnan+0xd4>
 801484a:	2004      	movs	r0, #4
 801484c:	e7d5      	b.n	80147fa <__hexnan+0xe2>

0801484e <__ascii_mbtowc>:
 801484e:	b082      	sub	sp, #8
 8014850:	b901      	cbnz	r1, 8014854 <__ascii_mbtowc+0x6>
 8014852:	a901      	add	r1, sp, #4
 8014854:	b142      	cbz	r2, 8014868 <__ascii_mbtowc+0x1a>
 8014856:	b14b      	cbz	r3, 801486c <__ascii_mbtowc+0x1e>
 8014858:	7813      	ldrb	r3, [r2, #0]
 801485a:	600b      	str	r3, [r1, #0]
 801485c:	7812      	ldrb	r2, [r2, #0]
 801485e:	1e10      	subs	r0, r2, #0
 8014860:	bf18      	it	ne
 8014862:	2001      	movne	r0, #1
 8014864:	b002      	add	sp, #8
 8014866:	4770      	bx	lr
 8014868:	4610      	mov	r0, r2
 801486a:	e7fb      	b.n	8014864 <__ascii_mbtowc+0x16>
 801486c:	f06f 0001 	mvn.w	r0, #1
 8014870:	e7f8      	b.n	8014864 <__ascii_mbtowc+0x16>
	...

08014874 <_Balloc>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	69c6      	ldr	r6, [r0, #28]
 8014878:	4604      	mov	r4, r0
 801487a:	460d      	mov	r5, r1
 801487c:	b976      	cbnz	r6, 801489c <_Balloc+0x28>
 801487e:	2010      	movs	r0, #16
 8014880:	f7fc ff46 	bl	8011710 <malloc>
 8014884:	4602      	mov	r2, r0
 8014886:	61e0      	str	r0, [r4, #28]
 8014888:	b920      	cbnz	r0, 8014894 <_Balloc+0x20>
 801488a:	4b18      	ldr	r3, [pc, #96]	@ (80148ec <_Balloc+0x78>)
 801488c:	4818      	ldr	r0, [pc, #96]	@ (80148f0 <_Balloc+0x7c>)
 801488e:	216b      	movs	r1, #107	@ 0x6b
 8014890:	f7fe fde2 	bl	8013458 <__assert_func>
 8014894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014898:	6006      	str	r6, [r0, #0]
 801489a:	60c6      	str	r6, [r0, #12]
 801489c:	69e6      	ldr	r6, [r4, #28]
 801489e:	68f3      	ldr	r3, [r6, #12]
 80148a0:	b183      	cbz	r3, 80148c4 <_Balloc+0x50>
 80148a2:	69e3      	ldr	r3, [r4, #28]
 80148a4:	68db      	ldr	r3, [r3, #12]
 80148a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80148aa:	b9b8      	cbnz	r0, 80148dc <_Balloc+0x68>
 80148ac:	2101      	movs	r1, #1
 80148ae:	fa01 f605 	lsl.w	r6, r1, r5
 80148b2:	1d72      	adds	r2, r6, #5
 80148b4:	0092      	lsls	r2, r2, #2
 80148b6:	4620      	mov	r0, r4
 80148b8:	f000 feaf 	bl	801561a <_calloc_r>
 80148bc:	b160      	cbz	r0, 80148d8 <_Balloc+0x64>
 80148be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80148c2:	e00e      	b.n	80148e2 <_Balloc+0x6e>
 80148c4:	2221      	movs	r2, #33	@ 0x21
 80148c6:	2104      	movs	r1, #4
 80148c8:	4620      	mov	r0, r4
 80148ca:	f000 fea6 	bl	801561a <_calloc_r>
 80148ce:	69e3      	ldr	r3, [r4, #28]
 80148d0:	60f0      	str	r0, [r6, #12]
 80148d2:	68db      	ldr	r3, [r3, #12]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d1e4      	bne.n	80148a2 <_Balloc+0x2e>
 80148d8:	2000      	movs	r0, #0
 80148da:	bd70      	pop	{r4, r5, r6, pc}
 80148dc:	6802      	ldr	r2, [r0, #0]
 80148de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80148e2:	2300      	movs	r3, #0
 80148e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80148e8:	e7f7      	b.n	80148da <_Balloc+0x66>
 80148ea:	bf00      	nop
 80148ec:	08016732 	.word	0x08016732
 80148f0:	080168bd 	.word	0x080168bd

080148f4 <_Bfree>:
 80148f4:	b570      	push	{r4, r5, r6, lr}
 80148f6:	69c6      	ldr	r6, [r0, #28]
 80148f8:	4605      	mov	r5, r0
 80148fa:	460c      	mov	r4, r1
 80148fc:	b976      	cbnz	r6, 801491c <_Bfree+0x28>
 80148fe:	2010      	movs	r0, #16
 8014900:	f7fc ff06 	bl	8011710 <malloc>
 8014904:	4602      	mov	r2, r0
 8014906:	61e8      	str	r0, [r5, #28]
 8014908:	b920      	cbnz	r0, 8014914 <_Bfree+0x20>
 801490a:	4b09      	ldr	r3, [pc, #36]	@ (8014930 <_Bfree+0x3c>)
 801490c:	4809      	ldr	r0, [pc, #36]	@ (8014934 <_Bfree+0x40>)
 801490e:	218f      	movs	r1, #143	@ 0x8f
 8014910:	f7fe fda2 	bl	8013458 <__assert_func>
 8014914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014918:	6006      	str	r6, [r0, #0]
 801491a:	60c6      	str	r6, [r0, #12]
 801491c:	b13c      	cbz	r4, 801492e <_Bfree+0x3a>
 801491e:	69eb      	ldr	r3, [r5, #28]
 8014920:	6862      	ldr	r2, [r4, #4]
 8014922:	68db      	ldr	r3, [r3, #12]
 8014924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014928:	6021      	str	r1, [r4, #0]
 801492a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801492e:	bd70      	pop	{r4, r5, r6, pc}
 8014930:	08016732 	.word	0x08016732
 8014934:	080168bd 	.word	0x080168bd

08014938 <__multadd>:
 8014938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801493c:	690d      	ldr	r5, [r1, #16]
 801493e:	4607      	mov	r7, r0
 8014940:	460c      	mov	r4, r1
 8014942:	461e      	mov	r6, r3
 8014944:	f101 0c14 	add.w	ip, r1, #20
 8014948:	2000      	movs	r0, #0
 801494a:	f8dc 3000 	ldr.w	r3, [ip]
 801494e:	b299      	uxth	r1, r3
 8014950:	fb02 6101 	mla	r1, r2, r1, r6
 8014954:	0c1e      	lsrs	r6, r3, #16
 8014956:	0c0b      	lsrs	r3, r1, #16
 8014958:	fb02 3306 	mla	r3, r2, r6, r3
 801495c:	b289      	uxth	r1, r1
 801495e:	3001      	adds	r0, #1
 8014960:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014964:	4285      	cmp	r5, r0
 8014966:	f84c 1b04 	str.w	r1, [ip], #4
 801496a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801496e:	dcec      	bgt.n	801494a <__multadd+0x12>
 8014970:	b30e      	cbz	r6, 80149b6 <__multadd+0x7e>
 8014972:	68a3      	ldr	r3, [r4, #8]
 8014974:	42ab      	cmp	r3, r5
 8014976:	dc19      	bgt.n	80149ac <__multadd+0x74>
 8014978:	6861      	ldr	r1, [r4, #4]
 801497a:	4638      	mov	r0, r7
 801497c:	3101      	adds	r1, #1
 801497e:	f7ff ff79 	bl	8014874 <_Balloc>
 8014982:	4680      	mov	r8, r0
 8014984:	b928      	cbnz	r0, 8014992 <__multadd+0x5a>
 8014986:	4602      	mov	r2, r0
 8014988:	4b0c      	ldr	r3, [pc, #48]	@ (80149bc <__multadd+0x84>)
 801498a:	480d      	ldr	r0, [pc, #52]	@ (80149c0 <__multadd+0x88>)
 801498c:	21ba      	movs	r1, #186	@ 0xba
 801498e:	f7fe fd63 	bl	8013458 <__assert_func>
 8014992:	6922      	ldr	r2, [r4, #16]
 8014994:	3202      	adds	r2, #2
 8014996:	f104 010c 	add.w	r1, r4, #12
 801499a:	0092      	lsls	r2, r2, #2
 801499c:	300c      	adds	r0, #12
 801499e:	f7fe fd44 	bl	801342a <memcpy>
 80149a2:	4621      	mov	r1, r4
 80149a4:	4638      	mov	r0, r7
 80149a6:	f7ff ffa5 	bl	80148f4 <_Bfree>
 80149aa:	4644      	mov	r4, r8
 80149ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80149b0:	3501      	adds	r5, #1
 80149b2:	615e      	str	r6, [r3, #20]
 80149b4:	6125      	str	r5, [r4, #16]
 80149b6:	4620      	mov	r0, r4
 80149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149bc:	0801684c 	.word	0x0801684c
 80149c0:	080168bd 	.word	0x080168bd

080149c4 <__s2b>:
 80149c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149c8:	460c      	mov	r4, r1
 80149ca:	4615      	mov	r5, r2
 80149cc:	461f      	mov	r7, r3
 80149ce:	2209      	movs	r2, #9
 80149d0:	3308      	adds	r3, #8
 80149d2:	4606      	mov	r6, r0
 80149d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80149d8:	2100      	movs	r1, #0
 80149da:	2201      	movs	r2, #1
 80149dc:	429a      	cmp	r2, r3
 80149de:	db09      	blt.n	80149f4 <__s2b+0x30>
 80149e0:	4630      	mov	r0, r6
 80149e2:	f7ff ff47 	bl	8014874 <_Balloc>
 80149e6:	b940      	cbnz	r0, 80149fa <__s2b+0x36>
 80149e8:	4602      	mov	r2, r0
 80149ea:	4b19      	ldr	r3, [pc, #100]	@ (8014a50 <__s2b+0x8c>)
 80149ec:	4819      	ldr	r0, [pc, #100]	@ (8014a54 <__s2b+0x90>)
 80149ee:	21d3      	movs	r1, #211	@ 0xd3
 80149f0:	f7fe fd32 	bl	8013458 <__assert_func>
 80149f4:	0052      	lsls	r2, r2, #1
 80149f6:	3101      	adds	r1, #1
 80149f8:	e7f0      	b.n	80149dc <__s2b+0x18>
 80149fa:	9b08      	ldr	r3, [sp, #32]
 80149fc:	6143      	str	r3, [r0, #20]
 80149fe:	2d09      	cmp	r5, #9
 8014a00:	f04f 0301 	mov.w	r3, #1
 8014a04:	6103      	str	r3, [r0, #16]
 8014a06:	dd16      	ble.n	8014a36 <__s2b+0x72>
 8014a08:	f104 0909 	add.w	r9, r4, #9
 8014a0c:	46c8      	mov	r8, r9
 8014a0e:	442c      	add	r4, r5
 8014a10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014a14:	4601      	mov	r1, r0
 8014a16:	3b30      	subs	r3, #48	@ 0x30
 8014a18:	220a      	movs	r2, #10
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f7ff ff8c 	bl	8014938 <__multadd>
 8014a20:	45a0      	cmp	r8, r4
 8014a22:	d1f5      	bne.n	8014a10 <__s2b+0x4c>
 8014a24:	f1a5 0408 	sub.w	r4, r5, #8
 8014a28:	444c      	add	r4, r9
 8014a2a:	1b2d      	subs	r5, r5, r4
 8014a2c:	1963      	adds	r3, r4, r5
 8014a2e:	42bb      	cmp	r3, r7
 8014a30:	db04      	blt.n	8014a3c <__s2b+0x78>
 8014a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a36:	340a      	adds	r4, #10
 8014a38:	2509      	movs	r5, #9
 8014a3a:	e7f6      	b.n	8014a2a <__s2b+0x66>
 8014a3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014a40:	4601      	mov	r1, r0
 8014a42:	3b30      	subs	r3, #48	@ 0x30
 8014a44:	220a      	movs	r2, #10
 8014a46:	4630      	mov	r0, r6
 8014a48:	f7ff ff76 	bl	8014938 <__multadd>
 8014a4c:	e7ee      	b.n	8014a2c <__s2b+0x68>
 8014a4e:	bf00      	nop
 8014a50:	0801684c 	.word	0x0801684c
 8014a54:	080168bd 	.word	0x080168bd

08014a58 <__hi0bits>:
 8014a58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	bf36      	itet	cc
 8014a60:	0403      	lslcc	r3, r0, #16
 8014a62:	2000      	movcs	r0, #0
 8014a64:	2010      	movcc	r0, #16
 8014a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014a6a:	bf3c      	itt	cc
 8014a6c:	021b      	lslcc	r3, r3, #8
 8014a6e:	3008      	addcc	r0, #8
 8014a70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014a74:	bf3c      	itt	cc
 8014a76:	011b      	lslcc	r3, r3, #4
 8014a78:	3004      	addcc	r0, #4
 8014a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a7e:	bf3c      	itt	cc
 8014a80:	009b      	lslcc	r3, r3, #2
 8014a82:	3002      	addcc	r0, #2
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	db05      	blt.n	8014a94 <__hi0bits+0x3c>
 8014a88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014a8c:	f100 0001 	add.w	r0, r0, #1
 8014a90:	bf08      	it	eq
 8014a92:	2020      	moveq	r0, #32
 8014a94:	4770      	bx	lr

08014a96 <__lo0bits>:
 8014a96:	6803      	ldr	r3, [r0, #0]
 8014a98:	4602      	mov	r2, r0
 8014a9a:	f013 0007 	ands.w	r0, r3, #7
 8014a9e:	d00b      	beq.n	8014ab8 <__lo0bits+0x22>
 8014aa0:	07d9      	lsls	r1, r3, #31
 8014aa2:	d421      	bmi.n	8014ae8 <__lo0bits+0x52>
 8014aa4:	0798      	lsls	r0, r3, #30
 8014aa6:	bf49      	itett	mi
 8014aa8:	085b      	lsrmi	r3, r3, #1
 8014aaa:	089b      	lsrpl	r3, r3, #2
 8014aac:	2001      	movmi	r0, #1
 8014aae:	6013      	strmi	r3, [r2, #0]
 8014ab0:	bf5c      	itt	pl
 8014ab2:	6013      	strpl	r3, [r2, #0]
 8014ab4:	2002      	movpl	r0, #2
 8014ab6:	4770      	bx	lr
 8014ab8:	b299      	uxth	r1, r3
 8014aba:	b909      	cbnz	r1, 8014ac0 <__lo0bits+0x2a>
 8014abc:	0c1b      	lsrs	r3, r3, #16
 8014abe:	2010      	movs	r0, #16
 8014ac0:	b2d9      	uxtb	r1, r3
 8014ac2:	b909      	cbnz	r1, 8014ac8 <__lo0bits+0x32>
 8014ac4:	3008      	adds	r0, #8
 8014ac6:	0a1b      	lsrs	r3, r3, #8
 8014ac8:	0719      	lsls	r1, r3, #28
 8014aca:	bf04      	itt	eq
 8014acc:	091b      	lsreq	r3, r3, #4
 8014ace:	3004      	addeq	r0, #4
 8014ad0:	0799      	lsls	r1, r3, #30
 8014ad2:	bf04      	itt	eq
 8014ad4:	089b      	lsreq	r3, r3, #2
 8014ad6:	3002      	addeq	r0, #2
 8014ad8:	07d9      	lsls	r1, r3, #31
 8014ada:	d403      	bmi.n	8014ae4 <__lo0bits+0x4e>
 8014adc:	085b      	lsrs	r3, r3, #1
 8014ade:	f100 0001 	add.w	r0, r0, #1
 8014ae2:	d003      	beq.n	8014aec <__lo0bits+0x56>
 8014ae4:	6013      	str	r3, [r2, #0]
 8014ae6:	4770      	bx	lr
 8014ae8:	2000      	movs	r0, #0
 8014aea:	4770      	bx	lr
 8014aec:	2020      	movs	r0, #32
 8014aee:	4770      	bx	lr

08014af0 <__i2b>:
 8014af0:	b510      	push	{r4, lr}
 8014af2:	460c      	mov	r4, r1
 8014af4:	2101      	movs	r1, #1
 8014af6:	f7ff febd 	bl	8014874 <_Balloc>
 8014afa:	4602      	mov	r2, r0
 8014afc:	b928      	cbnz	r0, 8014b0a <__i2b+0x1a>
 8014afe:	4b05      	ldr	r3, [pc, #20]	@ (8014b14 <__i2b+0x24>)
 8014b00:	4805      	ldr	r0, [pc, #20]	@ (8014b18 <__i2b+0x28>)
 8014b02:	f240 1145 	movw	r1, #325	@ 0x145
 8014b06:	f7fe fca7 	bl	8013458 <__assert_func>
 8014b0a:	2301      	movs	r3, #1
 8014b0c:	6144      	str	r4, [r0, #20]
 8014b0e:	6103      	str	r3, [r0, #16]
 8014b10:	bd10      	pop	{r4, pc}
 8014b12:	bf00      	nop
 8014b14:	0801684c 	.word	0x0801684c
 8014b18:	080168bd 	.word	0x080168bd

08014b1c <__multiply>:
 8014b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b20:	4617      	mov	r7, r2
 8014b22:	690a      	ldr	r2, [r1, #16]
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	bfa8      	it	ge
 8014b2a:	463b      	movge	r3, r7
 8014b2c:	4689      	mov	r9, r1
 8014b2e:	bfa4      	itt	ge
 8014b30:	460f      	movge	r7, r1
 8014b32:	4699      	movge	r9, r3
 8014b34:	693d      	ldr	r5, [r7, #16]
 8014b36:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	eb05 060a 	add.w	r6, r5, sl
 8014b42:	42b3      	cmp	r3, r6
 8014b44:	b085      	sub	sp, #20
 8014b46:	bfb8      	it	lt
 8014b48:	3101      	addlt	r1, #1
 8014b4a:	f7ff fe93 	bl	8014874 <_Balloc>
 8014b4e:	b930      	cbnz	r0, 8014b5e <__multiply+0x42>
 8014b50:	4602      	mov	r2, r0
 8014b52:	4b41      	ldr	r3, [pc, #260]	@ (8014c58 <__multiply+0x13c>)
 8014b54:	4841      	ldr	r0, [pc, #260]	@ (8014c5c <__multiply+0x140>)
 8014b56:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014b5a:	f7fe fc7d 	bl	8013458 <__assert_func>
 8014b5e:	f100 0414 	add.w	r4, r0, #20
 8014b62:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8014b66:	4623      	mov	r3, r4
 8014b68:	2200      	movs	r2, #0
 8014b6a:	4573      	cmp	r3, lr
 8014b6c:	d320      	bcc.n	8014bb0 <__multiply+0x94>
 8014b6e:	f107 0814 	add.w	r8, r7, #20
 8014b72:	f109 0114 	add.w	r1, r9, #20
 8014b76:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8014b7a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8014b7e:	9302      	str	r3, [sp, #8]
 8014b80:	1beb      	subs	r3, r5, r7
 8014b82:	3b15      	subs	r3, #21
 8014b84:	f023 0303 	bic.w	r3, r3, #3
 8014b88:	3304      	adds	r3, #4
 8014b8a:	3715      	adds	r7, #21
 8014b8c:	42bd      	cmp	r5, r7
 8014b8e:	bf38      	it	cc
 8014b90:	2304      	movcc	r3, #4
 8014b92:	9301      	str	r3, [sp, #4]
 8014b94:	9b02      	ldr	r3, [sp, #8]
 8014b96:	9103      	str	r1, [sp, #12]
 8014b98:	428b      	cmp	r3, r1
 8014b9a:	d80c      	bhi.n	8014bb6 <__multiply+0x9a>
 8014b9c:	2e00      	cmp	r6, #0
 8014b9e:	dd03      	ble.n	8014ba8 <__multiply+0x8c>
 8014ba0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d055      	beq.n	8014c54 <__multiply+0x138>
 8014ba8:	6106      	str	r6, [r0, #16]
 8014baa:	b005      	add	sp, #20
 8014bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bb0:	f843 2b04 	str.w	r2, [r3], #4
 8014bb4:	e7d9      	b.n	8014b6a <__multiply+0x4e>
 8014bb6:	f8b1 a000 	ldrh.w	sl, [r1]
 8014bba:	f1ba 0f00 	cmp.w	sl, #0
 8014bbe:	d01f      	beq.n	8014c00 <__multiply+0xe4>
 8014bc0:	46c4      	mov	ip, r8
 8014bc2:	46a1      	mov	r9, r4
 8014bc4:	2700      	movs	r7, #0
 8014bc6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014bca:	f8d9 3000 	ldr.w	r3, [r9]
 8014bce:	fa1f fb82 	uxth.w	fp, r2
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8014bd8:	443b      	add	r3, r7
 8014bda:	f8d9 7000 	ldr.w	r7, [r9]
 8014bde:	0c12      	lsrs	r2, r2, #16
 8014be0:	0c3f      	lsrs	r7, r7, #16
 8014be2:	fb0a 7202 	mla	r2, sl, r2, r7
 8014be6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bf0:	4565      	cmp	r5, ip
 8014bf2:	f849 3b04 	str.w	r3, [r9], #4
 8014bf6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014bfa:	d8e4      	bhi.n	8014bc6 <__multiply+0xaa>
 8014bfc:	9b01      	ldr	r3, [sp, #4]
 8014bfe:	50e7      	str	r7, [r4, r3]
 8014c00:	9b03      	ldr	r3, [sp, #12]
 8014c02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014c06:	3104      	adds	r1, #4
 8014c08:	f1b9 0f00 	cmp.w	r9, #0
 8014c0c:	d020      	beq.n	8014c50 <__multiply+0x134>
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	4647      	mov	r7, r8
 8014c12:	46a4      	mov	ip, r4
 8014c14:	f04f 0a00 	mov.w	sl, #0
 8014c18:	f8b7 b000 	ldrh.w	fp, [r7]
 8014c1c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014c20:	fb09 220b 	mla	r2, r9, fp, r2
 8014c24:	4452      	add	r2, sl
 8014c26:	b29b      	uxth	r3, r3
 8014c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c2c:	f84c 3b04 	str.w	r3, [ip], #4
 8014c30:	f857 3b04 	ldr.w	r3, [r7], #4
 8014c34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c38:	f8bc 3000 	ldrh.w	r3, [ip]
 8014c3c:	fb09 330a 	mla	r3, r9, sl, r3
 8014c40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8014c44:	42bd      	cmp	r5, r7
 8014c46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c4a:	d8e5      	bhi.n	8014c18 <__multiply+0xfc>
 8014c4c:	9a01      	ldr	r2, [sp, #4]
 8014c4e:	50a3      	str	r3, [r4, r2]
 8014c50:	3404      	adds	r4, #4
 8014c52:	e79f      	b.n	8014b94 <__multiply+0x78>
 8014c54:	3e01      	subs	r6, #1
 8014c56:	e7a1      	b.n	8014b9c <__multiply+0x80>
 8014c58:	0801684c 	.word	0x0801684c
 8014c5c:	080168bd 	.word	0x080168bd

08014c60 <__pow5mult>:
 8014c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c64:	4615      	mov	r5, r2
 8014c66:	f012 0203 	ands.w	r2, r2, #3
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	460e      	mov	r6, r1
 8014c6e:	d007      	beq.n	8014c80 <__pow5mult+0x20>
 8014c70:	4c25      	ldr	r4, [pc, #148]	@ (8014d08 <__pow5mult+0xa8>)
 8014c72:	3a01      	subs	r2, #1
 8014c74:	2300      	movs	r3, #0
 8014c76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c7a:	f7ff fe5d 	bl	8014938 <__multadd>
 8014c7e:	4606      	mov	r6, r0
 8014c80:	10ad      	asrs	r5, r5, #2
 8014c82:	d03d      	beq.n	8014d00 <__pow5mult+0xa0>
 8014c84:	69fc      	ldr	r4, [r7, #28]
 8014c86:	b97c      	cbnz	r4, 8014ca8 <__pow5mult+0x48>
 8014c88:	2010      	movs	r0, #16
 8014c8a:	f7fc fd41 	bl	8011710 <malloc>
 8014c8e:	4602      	mov	r2, r0
 8014c90:	61f8      	str	r0, [r7, #28]
 8014c92:	b928      	cbnz	r0, 8014ca0 <__pow5mult+0x40>
 8014c94:	4b1d      	ldr	r3, [pc, #116]	@ (8014d0c <__pow5mult+0xac>)
 8014c96:	481e      	ldr	r0, [pc, #120]	@ (8014d10 <__pow5mult+0xb0>)
 8014c98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014c9c:	f7fe fbdc 	bl	8013458 <__assert_func>
 8014ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ca4:	6004      	str	r4, [r0, #0]
 8014ca6:	60c4      	str	r4, [r0, #12]
 8014ca8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014cac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014cb0:	b94c      	cbnz	r4, 8014cc6 <__pow5mult+0x66>
 8014cb2:	f240 2171 	movw	r1, #625	@ 0x271
 8014cb6:	4638      	mov	r0, r7
 8014cb8:	f7ff ff1a 	bl	8014af0 <__i2b>
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8014cc2:	4604      	mov	r4, r0
 8014cc4:	6003      	str	r3, [r0, #0]
 8014cc6:	f04f 0900 	mov.w	r9, #0
 8014cca:	07eb      	lsls	r3, r5, #31
 8014ccc:	d50a      	bpl.n	8014ce4 <__pow5mult+0x84>
 8014cce:	4631      	mov	r1, r6
 8014cd0:	4622      	mov	r2, r4
 8014cd2:	4638      	mov	r0, r7
 8014cd4:	f7ff ff22 	bl	8014b1c <__multiply>
 8014cd8:	4631      	mov	r1, r6
 8014cda:	4680      	mov	r8, r0
 8014cdc:	4638      	mov	r0, r7
 8014cde:	f7ff fe09 	bl	80148f4 <_Bfree>
 8014ce2:	4646      	mov	r6, r8
 8014ce4:	106d      	asrs	r5, r5, #1
 8014ce6:	d00b      	beq.n	8014d00 <__pow5mult+0xa0>
 8014ce8:	6820      	ldr	r0, [r4, #0]
 8014cea:	b938      	cbnz	r0, 8014cfc <__pow5mult+0x9c>
 8014cec:	4622      	mov	r2, r4
 8014cee:	4621      	mov	r1, r4
 8014cf0:	4638      	mov	r0, r7
 8014cf2:	f7ff ff13 	bl	8014b1c <__multiply>
 8014cf6:	6020      	str	r0, [r4, #0]
 8014cf8:	f8c0 9000 	str.w	r9, [r0]
 8014cfc:	4604      	mov	r4, r0
 8014cfe:	e7e4      	b.n	8014cca <__pow5mult+0x6a>
 8014d00:	4630      	mov	r0, r6
 8014d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d06:	bf00      	nop
 8014d08:	08016a7c 	.word	0x08016a7c
 8014d0c:	08016732 	.word	0x08016732
 8014d10:	080168bd 	.word	0x080168bd

08014d14 <__lshift>:
 8014d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d18:	460c      	mov	r4, r1
 8014d1a:	6849      	ldr	r1, [r1, #4]
 8014d1c:	6923      	ldr	r3, [r4, #16]
 8014d1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014d22:	68a3      	ldr	r3, [r4, #8]
 8014d24:	4607      	mov	r7, r0
 8014d26:	4691      	mov	r9, r2
 8014d28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d2c:	f108 0601 	add.w	r6, r8, #1
 8014d30:	42b3      	cmp	r3, r6
 8014d32:	db0b      	blt.n	8014d4c <__lshift+0x38>
 8014d34:	4638      	mov	r0, r7
 8014d36:	f7ff fd9d 	bl	8014874 <_Balloc>
 8014d3a:	4605      	mov	r5, r0
 8014d3c:	b948      	cbnz	r0, 8014d52 <__lshift+0x3e>
 8014d3e:	4602      	mov	r2, r0
 8014d40:	4b28      	ldr	r3, [pc, #160]	@ (8014de4 <__lshift+0xd0>)
 8014d42:	4829      	ldr	r0, [pc, #164]	@ (8014de8 <__lshift+0xd4>)
 8014d44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014d48:	f7fe fb86 	bl	8013458 <__assert_func>
 8014d4c:	3101      	adds	r1, #1
 8014d4e:	005b      	lsls	r3, r3, #1
 8014d50:	e7ee      	b.n	8014d30 <__lshift+0x1c>
 8014d52:	2300      	movs	r3, #0
 8014d54:	f100 0114 	add.w	r1, r0, #20
 8014d58:	f100 0210 	add.w	r2, r0, #16
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	4553      	cmp	r3, sl
 8014d60:	db33      	blt.n	8014dca <__lshift+0xb6>
 8014d62:	6920      	ldr	r0, [r4, #16]
 8014d64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d68:	f104 0314 	add.w	r3, r4, #20
 8014d6c:	f019 091f 	ands.w	r9, r9, #31
 8014d70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d78:	d02b      	beq.n	8014dd2 <__lshift+0xbe>
 8014d7a:	f1c9 0e20 	rsb	lr, r9, #32
 8014d7e:	468a      	mov	sl, r1
 8014d80:	2200      	movs	r2, #0
 8014d82:	6818      	ldr	r0, [r3, #0]
 8014d84:	fa00 f009 	lsl.w	r0, r0, r9
 8014d88:	4310      	orrs	r0, r2
 8014d8a:	f84a 0b04 	str.w	r0, [sl], #4
 8014d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d92:	459c      	cmp	ip, r3
 8014d94:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d98:	d8f3      	bhi.n	8014d82 <__lshift+0x6e>
 8014d9a:	ebac 0304 	sub.w	r3, ip, r4
 8014d9e:	3b15      	subs	r3, #21
 8014da0:	f023 0303 	bic.w	r3, r3, #3
 8014da4:	3304      	adds	r3, #4
 8014da6:	f104 0015 	add.w	r0, r4, #21
 8014daa:	4560      	cmp	r0, ip
 8014dac:	bf88      	it	hi
 8014dae:	2304      	movhi	r3, #4
 8014db0:	50ca      	str	r2, [r1, r3]
 8014db2:	b10a      	cbz	r2, 8014db8 <__lshift+0xa4>
 8014db4:	f108 0602 	add.w	r6, r8, #2
 8014db8:	3e01      	subs	r6, #1
 8014dba:	4638      	mov	r0, r7
 8014dbc:	612e      	str	r6, [r5, #16]
 8014dbe:	4621      	mov	r1, r4
 8014dc0:	f7ff fd98 	bl	80148f4 <_Bfree>
 8014dc4:	4628      	mov	r0, r5
 8014dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dca:	f842 0f04 	str.w	r0, [r2, #4]!
 8014dce:	3301      	adds	r3, #1
 8014dd0:	e7c5      	b.n	8014d5e <__lshift+0x4a>
 8014dd2:	3904      	subs	r1, #4
 8014dd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ddc:	459c      	cmp	ip, r3
 8014dde:	d8f9      	bhi.n	8014dd4 <__lshift+0xc0>
 8014de0:	e7ea      	b.n	8014db8 <__lshift+0xa4>
 8014de2:	bf00      	nop
 8014de4:	0801684c 	.word	0x0801684c
 8014de8:	080168bd 	.word	0x080168bd

08014dec <__mcmp>:
 8014dec:	690a      	ldr	r2, [r1, #16]
 8014dee:	4603      	mov	r3, r0
 8014df0:	6900      	ldr	r0, [r0, #16]
 8014df2:	1a80      	subs	r0, r0, r2
 8014df4:	b530      	push	{r4, r5, lr}
 8014df6:	d10e      	bne.n	8014e16 <__mcmp+0x2a>
 8014df8:	3314      	adds	r3, #20
 8014dfa:	3114      	adds	r1, #20
 8014dfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014e00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014e04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014e08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014e0c:	4295      	cmp	r5, r2
 8014e0e:	d003      	beq.n	8014e18 <__mcmp+0x2c>
 8014e10:	d205      	bcs.n	8014e1e <__mcmp+0x32>
 8014e12:	f04f 30ff 	mov.w	r0, #4294967295
 8014e16:	bd30      	pop	{r4, r5, pc}
 8014e18:	42a3      	cmp	r3, r4
 8014e1a:	d3f3      	bcc.n	8014e04 <__mcmp+0x18>
 8014e1c:	e7fb      	b.n	8014e16 <__mcmp+0x2a>
 8014e1e:	2001      	movs	r0, #1
 8014e20:	e7f9      	b.n	8014e16 <__mcmp+0x2a>
	...

08014e24 <__mdiff>:
 8014e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e28:	4689      	mov	r9, r1
 8014e2a:	4606      	mov	r6, r0
 8014e2c:	4611      	mov	r1, r2
 8014e2e:	4648      	mov	r0, r9
 8014e30:	4614      	mov	r4, r2
 8014e32:	f7ff ffdb 	bl	8014dec <__mcmp>
 8014e36:	1e05      	subs	r5, r0, #0
 8014e38:	d112      	bne.n	8014e60 <__mdiff+0x3c>
 8014e3a:	4629      	mov	r1, r5
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	f7ff fd19 	bl	8014874 <_Balloc>
 8014e42:	4602      	mov	r2, r0
 8014e44:	b928      	cbnz	r0, 8014e52 <__mdiff+0x2e>
 8014e46:	4b3f      	ldr	r3, [pc, #252]	@ (8014f44 <__mdiff+0x120>)
 8014e48:	f240 2137 	movw	r1, #567	@ 0x237
 8014e4c:	483e      	ldr	r0, [pc, #248]	@ (8014f48 <__mdiff+0x124>)
 8014e4e:	f7fe fb03 	bl	8013458 <__assert_func>
 8014e52:	2301      	movs	r3, #1
 8014e54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e58:	4610      	mov	r0, r2
 8014e5a:	b003      	add	sp, #12
 8014e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e60:	bfbc      	itt	lt
 8014e62:	464b      	movlt	r3, r9
 8014e64:	46a1      	movlt	r9, r4
 8014e66:	4630      	mov	r0, r6
 8014e68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014e6c:	bfba      	itte	lt
 8014e6e:	461c      	movlt	r4, r3
 8014e70:	2501      	movlt	r5, #1
 8014e72:	2500      	movge	r5, #0
 8014e74:	f7ff fcfe 	bl	8014874 <_Balloc>
 8014e78:	4602      	mov	r2, r0
 8014e7a:	b918      	cbnz	r0, 8014e84 <__mdiff+0x60>
 8014e7c:	4b31      	ldr	r3, [pc, #196]	@ (8014f44 <__mdiff+0x120>)
 8014e7e:	f240 2145 	movw	r1, #581	@ 0x245
 8014e82:	e7e3      	b.n	8014e4c <__mdiff+0x28>
 8014e84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014e88:	6926      	ldr	r6, [r4, #16]
 8014e8a:	60c5      	str	r5, [r0, #12]
 8014e8c:	f109 0310 	add.w	r3, r9, #16
 8014e90:	f109 0514 	add.w	r5, r9, #20
 8014e94:	f104 0e14 	add.w	lr, r4, #20
 8014e98:	f100 0b14 	add.w	fp, r0, #20
 8014e9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8014ea0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	46d9      	mov	r9, fp
 8014ea8:	f04f 0c00 	mov.w	ip, #0
 8014eac:	9b01      	ldr	r3, [sp, #4]
 8014eae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8014eb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8014eb6:	9301      	str	r3, [sp, #4]
 8014eb8:	fa1f f38a 	uxth.w	r3, sl
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	b283      	uxth	r3, r0
 8014ec0:	1acb      	subs	r3, r1, r3
 8014ec2:	0c00      	lsrs	r0, r0, #16
 8014ec4:	4463      	add	r3, ip
 8014ec6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014eca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014ece:	b29b      	uxth	r3, r3
 8014ed0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8014ed4:	4576      	cmp	r6, lr
 8014ed6:	f849 3b04 	str.w	r3, [r9], #4
 8014eda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014ede:	d8e5      	bhi.n	8014eac <__mdiff+0x88>
 8014ee0:	1b33      	subs	r3, r6, r4
 8014ee2:	3b15      	subs	r3, #21
 8014ee4:	f023 0303 	bic.w	r3, r3, #3
 8014ee8:	3415      	adds	r4, #21
 8014eea:	3304      	adds	r3, #4
 8014eec:	42a6      	cmp	r6, r4
 8014eee:	bf38      	it	cc
 8014ef0:	2304      	movcc	r3, #4
 8014ef2:	441d      	add	r5, r3
 8014ef4:	445b      	add	r3, fp
 8014ef6:	461e      	mov	r6, r3
 8014ef8:	462c      	mov	r4, r5
 8014efa:	4544      	cmp	r4, r8
 8014efc:	d30e      	bcc.n	8014f1c <__mdiff+0xf8>
 8014efe:	f108 0103 	add.w	r1, r8, #3
 8014f02:	1b49      	subs	r1, r1, r5
 8014f04:	f021 0103 	bic.w	r1, r1, #3
 8014f08:	3d03      	subs	r5, #3
 8014f0a:	45a8      	cmp	r8, r5
 8014f0c:	bf38      	it	cc
 8014f0e:	2100      	movcc	r1, #0
 8014f10:	440b      	add	r3, r1
 8014f12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014f16:	b191      	cbz	r1, 8014f3e <__mdiff+0x11a>
 8014f18:	6117      	str	r7, [r2, #16]
 8014f1a:	e79d      	b.n	8014e58 <__mdiff+0x34>
 8014f1c:	f854 1b04 	ldr.w	r1, [r4], #4
 8014f20:	46e6      	mov	lr, ip
 8014f22:	0c08      	lsrs	r0, r1, #16
 8014f24:	fa1c fc81 	uxtah	ip, ip, r1
 8014f28:	4471      	add	r1, lr
 8014f2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014f2e:	b289      	uxth	r1, r1
 8014f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014f34:	f846 1b04 	str.w	r1, [r6], #4
 8014f38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014f3c:	e7dd      	b.n	8014efa <__mdiff+0xd6>
 8014f3e:	3f01      	subs	r7, #1
 8014f40:	e7e7      	b.n	8014f12 <__mdiff+0xee>
 8014f42:	bf00      	nop
 8014f44:	0801684c 	.word	0x0801684c
 8014f48:	080168bd 	.word	0x080168bd

08014f4c <__ulp>:
 8014f4c:	b082      	sub	sp, #8
 8014f4e:	ed8d 0b00 	vstr	d0, [sp]
 8014f52:	9a01      	ldr	r2, [sp, #4]
 8014f54:	4b0f      	ldr	r3, [pc, #60]	@ (8014f94 <__ulp+0x48>)
 8014f56:	4013      	ands	r3, r2
 8014f58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	dc08      	bgt.n	8014f72 <__ulp+0x26>
 8014f60:	425b      	negs	r3, r3
 8014f62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8014f66:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014f6a:	da04      	bge.n	8014f76 <__ulp+0x2a>
 8014f6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8014f70:	4113      	asrs	r3, r2
 8014f72:	2200      	movs	r2, #0
 8014f74:	e008      	b.n	8014f88 <__ulp+0x3c>
 8014f76:	f1a2 0314 	sub.w	r3, r2, #20
 8014f7a:	2b1e      	cmp	r3, #30
 8014f7c:	bfda      	itte	le
 8014f7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8014f82:	40da      	lsrle	r2, r3
 8014f84:	2201      	movgt	r2, #1
 8014f86:	2300      	movs	r3, #0
 8014f88:	4619      	mov	r1, r3
 8014f8a:	4610      	mov	r0, r2
 8014f8c:	ec41 0b10 	vmov	d0, r0, r1
 8014f90:	b002      	add	sp, #8
 8014f92:	4770      	bx	lr
 8014f94:	7ff00000 	.word	0x7ff00000

08014f98 <__b2d>:
 8014f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9c:	6906      	ldr	r6, [r0, #16]
 8014f9e:	f100 0814 	add.w	r8, r0, #20
 8014fa2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014fa6:	1f37      	subs	r7, r6, #4
 8014fa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014fac:	4610      	mov	r0, r2
 8014fae:	f7ff fd53 	bl	8014a58 <__hi0bits>
 8014fb2:	f1c0 0320 	rsb	r3, r0, #32
 8014fb6:	280a      	cmp	r0, #10
 8014fb8:	600b      	str	r3, [r1, #0]
 8014fba:	491b      	ldr	r1, [pc, #108]	@ (8015028 <__b2d+0x90>)
 8014fbc:	dc15      	bgt.n	8014fea <__b2d+0x52>
 8014fbe:	f1c0 0c0b 	rsb	ip, r0, #11
 8014fc2:	fa22 f30c 	lsr.w	r3, r2, ip
 8014fc6:	45b8      	cmp	r8, r7
 8014fc8:	ea43 0501 	orr.w	r5, r3, r1
 8014fcc:	bf34      	ite	cc
 8014fce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014fd2:	2300      	movcs	r3, #0
 8014fd4:	3015      	adds	r0, #21
 8014fd6:	fa02 f000 	lsl.w	r0, r2, r0
 8014fda:	fa23 f30c 	lsr.w	r3, r3, ip
 8014fde:	4303      	orrs	r3, r0
 8014fe0:	461c      	mov	r4, r3
 8014fe2:	ec45 4b10 	vmov	d0, r4, r5
 8014fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fea:	45b8      	cmp	r8, r7
 8014fec:	bf3a      	itte	cc
 8014fee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014ff2:	f1a6 0708 	subcc.w	r7, r6, #8
 8014ff6:	2300      	movcs	r3, #0
 8014ff8:	380b      	subs	r0, #11
 8014ffa:	d012      	beq.n	8015022 <__b2d+0x8a>
 8014ffc:	f1c0 0120 	rsb	r1, r0, #32
 8015000:	fa23 f401 	lsr.w	r4, r3, r1
 8015004:	4082      	lsls	r2, r0
 8015006:	4322      	orrs	r2, r4
 8015008:	4547      	cmp	r7, r8
 801500a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801500e:	bf8c      	ite	hi
 8015010:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015014:	2200      	movls	r2, #0
 8015016:	4083      	lsls	r3, r0
 8015018:	40ca      	lsrs	r2, r1
 801501a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801501e:	4313      	orrs	r3, r2
 8015020:	e7de      	b.n	8014fe0 <__b2d+0x48>
 8015022:	ea42 0501 	orr.w	r5, r2, r1
 8015026:	e7db      	b.n	8014fe0 <__b2d+0x48>
 8015028:	3ff00000 	.word	0x3ff00000

0801502c <__d2b>:
 801502c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015030:	460f      	mov	r7, r1
 8015032:	2101      	movs	r1, #1
 8015034:	ec59 8b10 	vmov	r8, r9, d0
 8015038:	4616      	mov	r6, r2
 801503a:	f7ff fc1b 	bl	8014874 <_Balloc>
 801503e:	4604      	mov	r4, r0
 8015040:	b930      	cbnz	r0, 8015050 <__d2b+0x24>
 8015042:	4602      	mov	r2, r0
 8015044:	4b23      	ldr	r3, [pc, #140]	@ (80150d4 <__d2b+0xa8>)
 8015046:	4824      	ldr	r0, [pc, #144]	@ (80150d8 <__d2b+0xac>)
 8015048:	f240 310f 	movw	r1, #783	@ 0x30f
 801504c:	f7fe fa04 	bl	8013458 <__assert_func>
 8015050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015058:	b10d      	cbz	r5, 801505e <__d2b+0x32>
 801505a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801505e:	9301      	str	r3, [sp, #4]
 8015060:	f1b8 0300 	subs.w	r3, r8, #0
 8015064:	d023      	beq.n	80150ae <__d2b+0x82>
 8015066:	4668      	mov	r0, sp
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	f7ff fd14 	bl	8014a96 <__lo0bits>
 801506e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015072:	b1d0      	cbz	r0, 80150aa <__d2b+0x7e>
 8015074:	f1c0 0320 	rsb	r3, r0, #32
 8015078:	fa02 f303 	lsl.w	r3, r2, r3
 801507c:	430b      	orrs	r3, r1
 801507e:	40c2      	lsrs	r2, r0
 8015080:	6163      	str	r3, [r4, #20]
 8015082:	9201      	str	r2, [sp, #4]
 8015084:	9b01      	ldr	r3, [sp, #4]
 8015086:	61a3      	str	r3, [r4, #24]
 8015088:	2b00      	cmp	r3, #0
 801508a:	bf0c      	ite	eq
 801508c:	2201      	moveq	r2, #1
 801508e:	2202      	movne	r2, #2
 8015090:	6122      	str	r2, [r4, #16]
 8015092:	b1a5      	cbz	r5, 80150be <__d2b+0x92>
 8015094:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015098:	4405      	add	r5, r0
 801509a:	603d      	str	r5, [r7, #0]
 801509c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80150a0:	6030      	str	r0, [r6, #0]
 80150a2:	4620      	mov	r0, r4
 80150a4:	b003      	add	sp, #12
 80150a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150aa:	6161      	str	r1, [r4, #20]
 80150ac:	e7ea      	b.n	8015084 <__d2b+0x58>
 80150ae:	a801      	add	r0, sp, #4
 80150b0:	f7ff fcf1 	bl	8014a96 <__lo0bits>
 80150b4:	9b01      	ldr	r3, [sp, #4]
 80150b6:	6163      	str	r3, [r4, #20]
 80150b8:	3020      	adds	r0, #32
 80150ba:	2201      	movs	r2, #1
 80150bc:	e7e8      	b.n	8015090 <__d2b+0x64>
 80150be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80150c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80150c6:	6038      	str	r0, [r7, #0]
 80150c8:	6918      	ldr	r0, [r3, #16]
 80150ca:	f7ff fcc5 	bl	8014a58 <__hi0bits>
 80150ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80150d2:	e7e5      	b.n	80150a0 <__d2b+0x74>
 80150d4:	0801684c 	.word	0x0801684c
 80150d8:	080168bd 	.word	0x080168bd

080150dc <__ratio>:
 80150dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e0:	b085      	sub	sp, #20
 80150e2:	e9cd 1000 	strd	r1, r0, [sp]
 80150e6:	a902      	add	r1, sp, #8
 80150e8:	f7ff ff56 	bl	8014f98 <__b2d>
 80150ec:	9800      	ldr	r0, [sp, #0]
 80150ee:	a903      	add	r1, sp, #12
 80150f0:	ec55 4b10 	vmov	r4, r5, d0
 80150f4:	f7ff ff50 	bl	8014f98 <__b2d>
 80150f8:	9b01      	ldr	r3, [sp, #4]
 80150fa:	6919      	ldr	r1, [r3, #16]
 80150fc:	9b00      	ldr	r3, [sp, #0]
 80150fe:	691b      	ldr	r3, [r3, #16]
 8015100:	1ac9      	subs	r1, r1, r3
 8015102:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015106:	1a9b      	subs	r3, r3, r2
 8015108:	ec5b ab10 	vmov	sl, fp, d0
 801510c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015110:	2b00      	cmp	r3, #0
 8015112:	bfce      	itee	gt
 8015114:	462a      	movgt	r2, r5
 8015116:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801511a:	465a      	movle	r2, fp
 801511c:	462f      	mov	r7, r5
 801511e:	46d9      	mov	r9, fp
 8015120:	bfcc      	ite	gt
 8015122:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015126:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801512a:	464b      	mov	r3, r9
 801512c:	4652      	mov	r2, sl
 801512e:	4620      	mov	r0, r4
 8015130:	4639      	mov	r1, r7
 8015132:	f7eb fb8b 	bl	800084c <__aeabi_ddiv>
 8015136:	ec41 0b10 	vmov	d0, r0, r1
 801513a:	b005      	add	sp, #20
 801513c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015140 <__copybits>:
 8015140:	3901      	subs	r1, #1
 8015142:	b570      	push	{r4, r5, r6, lr}
 8015144:	1149      	asrs	r1, r1, #5
 8015146:	6914      	ldr	r4, [r2, #16]
 8015148:	3101      	adds	r1, #1
 801514a:	f102 0314 	add.w	r3, r2, #20
 801514e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015152:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015156:	1f05      	subs	r5, r0, #4
 8015158:	42a3      	cmp	r3, r4
 801515a:	d30c      	bcc.n	8015176 <__copybits+0x36>
 801515c:	1aa3      	subs	r3, r4, r2
 801515e:	3b11      	subs	r3, #17
 8015160:	f023 0303 	bic.w	r3, r3, #3
 8015164:	3211      	adds	r2, #17
 8015166:	42a2      	cmp	r2, r4
 8015168:	bf88      	it	hi
 801516a:	2300      	movhi	r3, #0
 801516c:	4418      	add	r0, r3
 801516e:	2300      	movs	r3, #0
 8015170:	4288      	cmp	r0, r1
 8015172:	d305      	bcc.n	8015180 <__copybits+0x40>
 8015174:	bd70      	pop	{r4, r5, r6, pc}
 8015176:	f853 6b04 	ldr.w	r6, [r3], #4
 801517a:	f845 6f04 	str.w	r6, [r5, #4]!
 801517e:	e7eb      	b.n	8015158 <__copybits+0x18>
 8015180:	f840 3b04 	str.w	r3, [r0], #4
 8015184:	e7f4      	b.n	8015170 <__copybits+0x30>

08015186 <__any_on>:
 8015186:	f100 0214 	add.w	r2, r0, #20
 801518a:	6900      	ldr	r0, [r0, #16]
 801518c:	114b      	asrs	r3, r1, #5
 801518e:	4298      	cmp	r0, r3
 8015190:	b510      	push	{r4, lr}
 8015192:	db11      	blt.n	80151b8 <__any_on+0x32>
 8015194:	dd0a      	ble.n	80151ac <__any_on+0x26>
 8015196:	f011 011f 	ands.w	r1, r1, #31
 801519a:	d007      	beq.n	80151ac <__any_on+0x26>
 801519c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80151a0:	fa24 f001 	lsr.w	r0, r4, r1
 80151a4:	fa00 f101 	lsl.w	r1, r0, r1
 80151a8:	428c      	cmp	r4, r1
 80151aa:	d10b      	bne.n	80151c4 <__any_on+0x3e>
 80151ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80151b0:	4293      	cmp	r3, r2
 80151b2:	d803      	bhi.n	80151bc <__any_on+0x36>
 80151b4:	2000      	movs	r0, #0
 80151b6:	bd10      	pop	{r4, pc}
 80151b8:	4603      	mov	r3, r0
 80151ba:	e7f7      	b.n	80151ac <__any_on+0x26>
 80151bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80151c0:	2900      	cmp	r1, #0
 80151c2:	d0f5      	beq.n	80151b0 <__any_on+0x2a>
 80151c4:	2001      	movs	r0, #1
 80151c6:	e7f6      	b.n	80151b6 <__any_on+0x30>

080151c8 <__ascii_wctomb>:
 80151c8:	4603      	mov	r3, r0
 80151ca:	4608      	mov	r0, r1
 80151cc:	b141      	cbz	r1, 80151e0 <__ascii_wctomb+0x18>
 80151ce:	2aff      	cmp	r2, #255	@ 0xff
 80151d0:	d904      	bls.n	80151dc <__ascii_wctomb+0x14>
 80151d2:	228a      	movs	r2, #138	@ 0x8a
 80151d4:	601a      	str	r2, [r3, #0]
 80151d6:	f04f 30ff 	mov.w	r0, #4294967295
 80151da:	4770      	bx	lr
 80151dc:	700a      	strb	r2, [r1, #0]
 80151de:	2001      	movs	r0, #1
 80151e0:	4770      	bx	lr

080151e2 <__ssputs_r>:
 80151e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151e6:	688e      	ldr	r6, [r1, #8]
 80151e8:	461f      	mov	r7, r3
 80151ea:	42be      	cmp	r6, r7
 80151ec:	680b      	ldr	r3, [r1, #0]
 80151ee:	4682      	mov	sl, r0
 80151f0:	460c      	mov	r4, r1
 80151f2:	4690      	mov	r8, r2
 80151f4:	d82d      	bhi.n	8015252 <__ssputs_r+0x70>
 80151f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80151fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80151fe:	d026      	beq.n	801524e <__ssputs_r+0x6c>
 8015200:	6965      	ldr	r5, [r4, #20]
 8015202:	6909      	ldr	r1, [r1, #16]
 8015204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015208:	eba3 0901 	sub.w	r9, r3, r1
 801520c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015210:	1c7b      	adds	r3, r7, #1
 8015212:	444b      	add	r3, r9
 8015214:	106d      	asrs	r5, r5, #1
 8015216:	429d      	cmp	r5, r3
 8015218:	bf38      	it	cc
 801521a:	461d      	movcc	r5, r3
 801521c:	0553      	lsls	r3, r2, #21
 801521e:	d527      	bpl.n	8015270 <__ssputs_r+0x8e>
 8015220:	4629      	mov	r1, r5
 8015222:	f7fc faa7 	bl	8011774 <_malloc_r>
 8015226:	4606      	mov	r6, r0
 8015228:	b360      	cbz	r0, 8015284 <__ssputs_r+0xa2>
 801522a:	6921      	ldr	r1, [r4, #16]
 801522c:	464a      	mov	r2, r9
 801522e:	f7fe f8fc 	bl	801342a <memcpy>
 8015232:	89a3      	ldrh	r3, [r4, #12]
 8015234:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801523c:	81a3      	strh	r3, [r4, #12]
 801523e:	6126      	str	r6, [r4, #16]
 8015240:	6165      	str	r5, [r4, #20]
 8015242:	444e      	add	r6, r9
 8015244:	eba5 0509 	sub.w	r5, r5, r9
 8015248:	6026      	str	r6, [r4, #0]
 801524a:	60a5      	str	r5, [r4, #8]
 801524c:	463e      	mov	r6, r7
 801524e:	42be      	cmp	r6, r7
 8015250:	d900      	bls.n	8015254 <__ssputs_r+0x72>
 8015252:	463e      	mov	r6, r7
 8015254:	6820      	ldr	r0, [r4, #0]
 8015256:	4632      	mov	r2, r6
 8015258:	4641      	mov	r1, r8
 801525a:	f7fd ff5c 	bl	8013116 <memmove>
 801525e:	68a3      	ldr	r3, [r4, #8]
 8015260:	1b9b      	subs	r3, r3, r6
 8015262:	60a3      	str	r3, [r4, #8]
 8015264:	6823      	ldr	r3, [r4, #0]
 8015266:	4433      	add	r3, r6
 8015268:	6023      	str	r3, [r4, #0]
 801526a:	2000      	movs	r0, #0
 801526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015270:	462a      	mov	r2, r5
 8015272:	f000 f9e6 	bl	8015642 <_realloc_r>
 8015276:	4606      	mov	r6, r0
 8015278:	2800      	cmp	r0, #0
 801527a:	d1e0      	bne.n	801523e <__ssputs_r+0x5c>
 801527c:	6921      	ldr	r1, [r4, #16]
 801527e:	4650      	mov	r0, sl
 8015280:	f7fe ff62 	bl	8014148 <_free_r>
 8015284:	230c      	movs	r3, #12
 8015286:	f8ca 3000 	str.w	r3, [sl]
 801528a:	89a3      	ldrh	r3, [r4, #12]
 801528c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015290:	81a3      	strh	r3, [r4, #12]
 8015292:	f04f 30ff 	mov.w	r0, #4294967295
 8015296:	e7e9      	b.n	801526c <__ssputs_r+0x8a>

08015298 <_svfiprintf_r>:
 8015298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801529c:	4698      	mov	r8, r3
 801529e:	898b      	ldrh	r3, [r1, #12]
 80152a0:	061b      	lsls	r3, r3, #24
 80152a2:	b09d      	sub	sp, #116	@ 0x74
 80152a4:	4607      	mov	r7, r0
 80152a6:	460d      	mov	r5, r1
 80152a8:	4614      	mov	r4, r2
 80152aa:	d510      	bpl.n	80152ce <_svfiprintf_r+0x36>
 80152ac:	690b      	ldr	r3, [r1, #16]
 80152ae:	b973      	cbnz	r3, 80152ce <_svfiprintf_r+0x36>
 80152b0:	2140      	movs	r1, #64	@ 0x40
 80152b2:	f7fc fa5f 	bl	8011774 <_malloc_r>
 80152b6:	6028      	str	r0, [r5, #0]
 80152b8:	6128      	str	r0, [r5, #16]
 80152ba:	b930      	cbnz	r0, 80152ca <_svfiprintf_r+0x32>
 80152bc:	230c      	movs	r3, #12
 80152be:	603b      	str	r3, [r7, #0]
 80152c0:	f04f 30ff 	mov.w	r0, #4294967295
 80152c4:	b01d      	add	sp, #116	@ 0x74
 80152c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ca:	2340      	movs	r3, #64	@ 0x40
 80152cc:	616b      	str	r3, [r5, #20]
 80152ce:	2300      	movs	r3, #0
 80152d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80152d2:	2320      	movs	r3, #32
 80152d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80152d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80152dc:	2330      	movs	r3, #48	@ 0x30
 80152de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801547c <_svfiprintf_r+0x1e4>
 80152e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80152e6:	f04f 0901 	mov.w	r9, #1
 80152ea:	4623      	mov	r3, r4
 80152ec:	469a      	mov	sl, r3
 80152ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152f2:	b10a      	cbz	r2, 80152f8 <_svfiprintf_r+0x60>
 80152f4:	2a25      	cmp	r2, #37	@ 0x25
 80152f6:	d1f9      	bne.n	80152ec <_svfiprintf_r+0x54>
 80152f8:	ebba 0b04 	subs.w	fp, sl, r4
 80152fc:	d00b      	beq.n	8015316 <_svfiprintf_r+0x7e>
 80152fe:	465b      	mov	r3, fp
 8015300:	4622      	mov	r2, r4
 8015302:	4629      	mov	r1, r5
 8015304:	4638      	mov	r0, r7
 8015306:	f7ff ff6c 	bl	80151e2 <__ssputs_r>
 801530a:	3001      	adds	r0, #1
 801530c:	f000 80a7 	beq.w	801545e <_svfiprintf_r+0x1c6>
 8015310:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015312:	445a      	add	r2, fp
 8015314:	9209      	str	r2, [sp, #36]	@ 0x24
 8015316:	f89a 3000 	ldrb.w	r3, [sl]
 801531a:	2b00      	cmp	r3, #0
 801531c:	f000 809f 	beq.w	801545e <_svfiprintf_r+0x1c6>
 8015320:	2300      	movs	r3, #0
 8015322:	f04f 32ff 	mov.w	r2, #4294967295
 8015326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801532a:	f10a 0a01 	add.w	sl, sl, #1
 801532e:	9304      	str	r3, [sp, #16]
 8015330:	9307      	str	r3, [sp, #28]
 8015332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015336:	931a      	str	r3, [sp, #104]	@ 0x68
 8015338:	4654      	mov	r4, sl
 801533a:	2205      	movs	r2, #5
 801533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015340:	484e      	ldr	r0, [pc, #312]	@ (801547c <_svfiprintf_r+0x1e4>)
 8015342:	f7ea ff45 	bl	80001d0 <memchr>
 8015346:	9a04      	ldr	r2, [sp, #16]
 8015348:	b9d8      	cbnz	r0, 8015382 <_svfiprintf_r+0xea>
 801534a:	06d0      	lsls	r0, r2, #27
 801534c:	bf44      	itt	mi
 801534e:	2320      	movmi	r3, #32
 8015350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015354:	0711      	lsls	r1, r2, #28
 8015356:	bf44      	itt	mi
 8015358:	232b      	movmi	r3, #43	@ 0x2b
 801535a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801535e:	f89a 3000 	ldrb.w	r3, [sl]
 8015362:	2b2a      	cmp	r3, #42	@ 0x2a
 8015364:	d015      	beq.n	8015392 <_svfiprintf_r+0xfa>
 8015366:	9a07      	ldr	r2, [sp, #28]
 8015368:	4654      	mov	r4, sl
 801536a:	2000      	movs	r0, #0
 801536c:	f04f 0c0a 	mov.w	ip, #10
 8015370:	4621      	mov	r1, r4
 8015372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015376:	3b30      	subs	r3, #48	@ 0x30
 8015378:	2b09      	cmp	r3, #9
 801537a:	d94b      	bls.n	8015414 <_svfiprintf_r+0x17c>
 801537c:	b1b0      	cbz	r0, 80153ac <_svfiprintf_r+0x114>
 801537e:	9207      	str	r2, [sp, #28]
 8015380:	e014      	b.n	80153ac <_svfiprintf_r+0x114>
 8015382:	eba0 0308 	sub.w	r3, r0, r8
 8015386:	fa09 f303 	lsl.w	r3, r9, r3
 801538a:	4313      	orrs	r3, r2
 801538c:	9304      	str	r3, [sp, #16]
 801538e:	46a2      	mov	sl, r4
 8015390:	e7d2      	b.n	8015338 <_svfiprintf_r+0xa0>
 8015392:	9b03      	ldr	r3, [sp, #12]
 8015394:	1d19      	adds	r1, r3, #4
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	9103      	str	r1, [sp, #12]
 801539a:	2b00      	cmp	r3, #0
 801539c:	bfbb      	ittet	lt
 801539e:	425b      	neglt	r3, r3
 80153a0:	f042 0202 	orrlt.w	r2, r2, #2
 80153a4:	9307      	strge	r3, [sp, #28]
 80153a6:	9307      	strlt	r3, [sp, #28]
 80153a8:	bfb8      	it	lt
 80153aa:	9204      	strlt	r2, [sp, #16]
 80153ac:	7823      	ldrb	r3, [r4, #0]
 80153ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80153b0:	d10a      	bne.n	80153c8 <_svfiprintf_r+0x130>
 80153b2:	7863      	ldrb	r3, [r4, #1]
 80153b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80153b6:	d132      	bne.n	801541e <_svfiprintf_r+0x186>
 80153b8:	9b03      	ldr	r3, [sp, #12]
 80153ba:	1d1a      	adds	r2, r3, #4
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	9203      	str	r2, [sp, #12]
 80153c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80153c4:	3402      	adds	r4, #2
 80153c6:	9305      	str	r3, [sp, #20]
 80153c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801548c <_svfiprintf_r+0x1f4>
 80153cc:	7821      	ldrb	r1, [r4, #0]
 80153ce:	2203      	movs	r2, #3
 80153d0:	4650      	mov	r0, sl
 80153d2:	f7ea fefd 	bl	80001d0 <memchr>
 80153d6:	b138      	cbz	r0, 80153e8 <_svfiprintf_r+0x150>
 80153d8:	9b04      	ldr	r3, [sp, #16]
 80153da:	eba0 000a 	sub.w	r0, r0, sl
 80153de:	2240      	movs	r2, #64	@ 0x40
 80153e0:	4082      	lsls	r2, r0
 80153e2:	4313      	orrs	r3, r2
 80153e4:	3401      	adds	r4, #1
 80153e6:	9304      	str	r3, [sp, #16]
 80153e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153ec:	4824      	ldr	r0, [pc, #144]	@ (8015480 <_svfiprintf_r+0x1e8>)
 80153ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80153f2:	2206      	movs	r2, #6
 80153f4:	f7ea feec 	bl	80001d0 <memchr>
 80153f8:	2800      	cmp	r0, #0
 80153fa:	d036      	beq.n	801546a <_svfiprintf_r+0x1d2>
 80153fc:	4b21      	ldr	r3, [pc, #132]	@ (8015484 <_svfiprintf_r+0x1ec>)
 80153fe:	bb1b      	cbnz	r3, 8015448 <_svfiprintf_r+0x1b0>
 8015400:	9b03      	ldr	r3, [sp, #12]
 8015402:	3307      	adds	r3, #7
 8015404:	f023 0307 	bic.w	r3, r3, #7
 8015408:	3308      	adds	r3, #8
 801540a:	9303      	str	r3, [sp, #12]
 801540c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801540e:	4433      	add	r3, r6
 8015410:	9309      	str	r3, [sp, #36]	@ 0x24
 8015412:	e76a      	b.n	80152ea <_svfiprintf_r+0x52>
 8015414:	fb0c 3202 	mla	r2, ip, r2, r3
 8015418:	460c      	mov	r4, r1
 801541a:	2001      	movs	r0, #1
 801541c:	e7a8      	b.n	8015370 <_svfiprintf_r+0xd8>
 801541e:	2300      	movs	r3, #0
 8015420:	3401      	adds	r4, #1
 8015422:	9305      	str	r3, [sp, #20]
 8015424:	4619      	mov	r1, r3
 8015426:	f04f 0c0a 	mov.w	ip, #10
 801542a:	4620      	mov	r0, r4
 801542c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015430:	3a30      	subs	r2, #48	@ 0x30
 8015432:	2a09      	cmp	r2, #9
 8015434:	d903      	bls.n	801543e <_svfiprintf_r+0x1a6>
 8015436:	2b00      	cmp	r3, #0
 8015438:	d0c6      	beq.n	80153c8 <_svfiprintf_r+0x130>
 801543a:	9105      	str	r1, [sp, #20]
 801543c:	e7c4      	b.n	80153c8 <_svfiprintf_r+0x130>
 801543e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015442:	4604      	mov	r4, r0
 8015444:	2301      	movs	r3, #1
 8015446:	e7f0      	b.n	801542a <_svfiprintf_r+0x192>
 8015448:	ab03      	add	r3, sp, #12
 801544a:	9300      	str	r3, [sp, #0]
 801544c:	462a      	mov	r2, r5
 801544e:	4b0e      	ldr	r3, [pc, #56]	@ (8015488 <_svfiprintf_r+0x1f0>)
 8015450:	a904      	add	r1, sp, #16
 8015452:	4638      	mov	r0, r7
 8015454:	f7fd f94c 	bl	80126f0 <_printf_float>
 8015458:	1c42      	adds	r2, r0, #1
 801545a:	4606      	mov	r6, r0
 801545c:	d1d6      	bne.n	801540c <_svfiprintf_r+0x174>
 801545e:	89ab      	ldrh	r3, [r5, #12]
 8015460:	065b      	lsls	r3, r3, #25
 8015462:	f53f af2d 	bmi.w	80152c0 <_svfiprintf_r+0x28>
 8015466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015468:	e72c      	b.n	80152c4 <_svfiprintf_r+0x2c>
 801546a:	ab03      	add	r3, sp, #12
 801546c:	9300      	str	r3, [sp, #0]
 801546e:	462a      	mov	r2, r5
 8015470:	4b05      	ldr	r3, [pc, #20]	@ (8015488 <_svfiprintf_r+0x1f0>)
 8015472:	a904      	add	r1, sp, #16
 8015474:	4638      	mov	r0, r7
 8015476:	f7fd fbd3 	bl	8012c20 <_printf_i>
 801547a:	e7ed      	b.n	8015458 <_svfiprintf_r+0x1c0>
 801547c:	08016916 	.word	0x08016916
 8015480:	08016920 	.word	0x08016920
 8015484:	080126f1 	.word	0x080126f1
 8015488:	080151e3 	.word	0x080151e3
 801548c:	0801691c 	.word	0x0801691c

08015490 <__sflush_r>:
 8015490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015498:	0716      	lsls	r6, r2, #28
 801549a:	4605      	mov	r5, r0
 801549c:	460c      	mov	r4, r1
 801549e:	d454      	bmi.n	801554a <__sflush_r+0xba>
 80154a0:	684b      	ldr	r3, [r1, #4]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	dc02      	bgt.n	80154ac <__sflush_r+0x1c>
 80154a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	dd48      	ble.n	801553e <__sflush_r+0xae>
 80154ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80154ae:	2e00      	cmp	r6, #0
 80154b0:	d045      	beq.n	801553e <__sflush_r+0xae>
 80154b2:	2300      	movs	r3, #0
 80154b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80154b8:	682f      	ldr	r7, [r5, #0]
 80154ba:	6a21      	ldr	r1, [r4, #32]
 80154bc:	602b      	str	r3, [r5, #0]
 80154be:	d030      	beq.n	8015522 <__sflush_r+0x92>
 80154c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80154c2:	89a3      	ldrh	r3, [r4, #12]
 80154c4:	0759      	lsls	r1, r3, #29
 80154c6:	d505      	bpl.n	80154d4 <__sflush_r+0x44>
 80154c8:	6863      	ldr	r3, [r4, #4]
 80154ca:	1ad2      	subs	r2, r2, r3
 80154cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80154ce:	b10b      	cbz	r3, 80154d4 <__sflush_r+0x44>
 80154d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80154d2:	1ad2      	subs	r2, r2, r3
 80154d4:	2300      	movs	r3, #0
 80154d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80154d8:	6a21      	ldr	r1, [r4, #32]
 80154da:	4628      	mov	r0, r5
 80154dc:	47b0      	blx	r6
 80154de:	1c43      	adds	r3, r0, #1
 80154e0:	89a3      	ldrh	r3, [r4, #12]
 80154e2:	d106      	bne.n	80154f2 <__sflush_r+0x62>
 80154e4:	6829      	ldr	r1, [r5, #0]
 80154e6:	291d      	cmp	r1, #29
 80154e8:	d82b      	bhi.n	8015542 <__sflush_r+0xb2>
 80154ea:	4a2a      	ldr	r2, [pc, #168]	@ (8015594 <__sflush_r+0x104>)
 80154ec:	40ca      	lsrs	r2, r1
 80154ee:	07d6      	lsls	r6, r2, #31
 80154f0:	d527      	bpl.n	8015542 <__sflush_r+0xb2>
 80154f2:	2200      	movs	r2, #0
 80154f4:	6062      	str	r2, [r4, #4]
 80154f6:	04d9      	lsls	r1, r3, #19
 80154f8:	6922      	ldr	r2, [r4, #16]
 80154fa:	6022      	str	r2, [r4, #0]
 80154fc:	d504      	bpl.n	8015508 <__sflush_r+0x78>
 80154fe:	1c42      	adds	r2, r0, #1
 8015500:	d101      	bne.n	8015506 <__sflush_r+0x76>
 8015502:	682b      	ldr	r3, [r5, #0]
 8015504:	b903      	cbnz	r3, 8015508 <__sflush_r+0x78>
 8015506:	6560      	str	r0, [r4, #84]	@ 0x54
 8015508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801550a:	602f      	str	r7, [r5, #0]
 801550c:	b1b9      	cbz	r1, 801553e <__sflush_r+0xae>
 801550e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015512:	4299      	cmp	r1, r3
 8015514:	d002      	beq.n	801551c <__sflush_r+0x8c>
 8015516:	4628      	mov	r0, r5
 8015518:	f7fe fe16 	bl	8014148 <_free_r>
 801551c:	2300      	movs	r3, #0
 801551e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015520:	e00d      	b.n	801553e <__sflush_r+0xae>
 8015522:	2301      	movs	r3, #1
 8015524:	4628      	mov	r0, r5
 8015526:	47b0      	blx	r6
 8015528:	4602      	mov	r2, r0
 801552a:	1c50      	adds	r0, r2, #1
 801552c:	d1c9      	bne.n	80154c2 <__sflush_r+0x32>
 801552e:	682b      	ldr	r3, [r5, #0]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d0c6      	beq.n	80154c2 <__sflush_r+0x32>
 8015534:	2b1d      	cmp	r3, #29
 8015536:	d001      	beq.n	801553c <__sflush_r+0xac>
 8015538:	2b16      	cmp	r3, #22
 801553a:	d11e      	bne.n	801557a <__sflush_r+0xea>
 801553c:	602f      	str	r7, [r5, #0]
 801553e:	2000      	movs	r0, #0
 8015540:	e022      	b.n	8015588 <__sflush_r+0xf8>
 8015542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015546:	b21b      	sxth	r3, r3
 8015548:	e01b      	b.n	8015582 <__sflush_r+0xf2>
 801554a:	690f      	ldr	r7, [r1, #16]
 801554c:	2f00      	cmp	r7, #0
 801554e:	d0f6      	beq.n	801553e <__sflush_r+0xae>
 8015550:	0793      	lsls	r3, r2, #30
 8015552:	680e      	ldr	r6, [r1, #0]
 8015554:	bf08      	it	eq
 8015556:	694b      	ldreq	r3, [r1, #20]
 8015558:	600f      	str	r7, [r1, #0]
 801555a:	bf18      	it	ne
 801555c:	2300      	movne	r3, #0
 801555e:	eba6 0807 	sub.w	r8, r6, r7
 8015562:	608b      	str	r3, [r1, #8]
 8015564:	f1b8 0f00 	cmp.w	r8, #0
 8015568:	dde9      	ble.n	801553e <__sflush_r+0xae>
 801556a:	6a21      	ldr	r1, [r4, #32]
 801556c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801556e:	4643      	mov	r3, r8
 8015570:	463a      	mov	r2, r7
 8015572:	4628      	mov	r0, r5
 8015574:	47b0      	blx	r6
 8015576:	2800      	cmp	r0, #0
 8015578:	dc08      	bgt.n	801558c <__sflush_r+0xfc>
 801557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801557e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015582:	81a3      	strh	r3, [r4, #12]
 8015584:	f04f 30ff 	mov.w	r0, #4294967295
 8015588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801558c:	4407      	add	r7, r0
 801558e:	eba8 0800 	sub.w	r8, r8, r0
 8015592:	e7e7      	b.n	8015564 <__sflush_r+0xd4>
 8015594:	20400001 	.word	0x20400001

08015598 <_fflush_r>:
 8015598:	b538      	push	{r3, r4, r5, lr}
 801559a:	690b      	ldr	r3, [r1, #16]
 801559c:	4605      	mov	r5, r0
 801559e:	460c      	mov	r4, r1
 80155a0:	b913      	cbnz	r3, 80155a8 <_fflush_r+0x10>
 80155a2:	2500      	movs	r5, #0
 80155a4:	4628      	mov	r0, r5
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	b118      	cbz	r0, 80155b2 <_fflush_r+0x1a>
 80155aa:	6a03      	ldr	r3, [r0, #32]
 80155ac:	b90b      	cbnz	r3, 80155b2 <_fflush_r+0x1a>
 80155ae:	f7fd fce1 	bl	8012f74 <__sinit>
 80155b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d0f3      	beq.n	80155a2 <_fflush_r+0xa>
 80155ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80155bc:	07d0      	lsls	r0, r2, #31
 80155be:	d404      	bmi.n	80155ca <_fflush_r+0x32>
 80155c0:	0599      	lsls	r1, r3, #22
 80155c2:	d402      	bmi.n	80155ca <_fflush_r+0x32>
 80155c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80155c6:	f7fd ff26 	bl	8013416 <__retarget_lock_acquire_recursive>
 80155ca:	4628      	mov	r0, r5
 80155cc:	4621      	mov	r1, r4
 80155ce:	f7ff ff5f 	bl	8015490 <__sflush_r>
 80155d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80155d4:	07da      	lsls	r2, r3, #31
 80155d6:	4605      	mov	r5, r0
 80155d8:	d4e4      	bmi.n	80155a4 <_fflush_r+0xc>
 80155da:	89a3      	ldrh	r3, [r4, #12]
 80155dc:	059b      	lsls	r3, r3, #22
 80155de:	d4e1      	bmi.n	80155a4 <_fflush_r+0xc>
 80155e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80155e2:	f7fd ff19 	bl	8013418 <__retarget_lock_release_recursive>
 80155e6:	e7dd      	b.n	80155a4 <_fflush_r+0xc>

080155e8 <fiprintf>:
 80155e8:	b40e      	push	{r1, r2, r3}
 80155ea:	b503      	push	{r0, r1, lr}
 80155ec:	4601      	mov	r1, r0
 80155ee:	ab03      	add	r3, sp, #12
 80155f0:	4805      	ldr	r0, [pc, #20]	@ (8015608 <fiprintf+0x20>)
 80155f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80155f6:	6800      	ldr	r0, [r0, #0]
 80155f8:	9301      	str	r3, [sp, #4]
 80155fa:	f000 f879 	bl	80156f0 <_vfiprintf_r>
 80155fe:	b002      	add	sp, #8
 8015600:	f85d eb04 	ldr.w	lr, [sp], #4
 8015604:	b003      	add	sp, #12
 8015606:	4770      	bx	lr
 8015608:	2000040c 	.word	0x2000040c

0801560c <abort>:
 801560c:	b508      	push	{r3, lr}
 801560e:	2006      	movs	r0, #6
 8015610:	f000 fa42 	bl	8015a98 <raise>
 8015614:	2001      	movs	r0, #1
 8015616:	f7ee f985 	bl	8003924 <_exit>

0801561a <_calloc_r>:
 801561a:	b570      	push	{r4, r5, r6, lr}
 801561c:	fba1 5402 	umull	r5, r4, r1, r2
 8015620:	b934      	cbnz	r4, 8015630 <_calloc_r+0x16>
 8015622:	4629      	mov	r1, r5
 8015624:	f7fc f8a6 	bl	8011774 <_malloc_r>
 8015628:	4606      	mov	r6, r0
 801562a:	b928      	cbnz	r0, 8015638 <_calloc_r+0x1e>
 801562c:	4630      	mov	r0, r6
 801562e:	bd70      	pop	{r4, r5, r6, pc}
 8015630:	220c      	movs	r2, #12
 8015632:	6002      	str	r2, [r0, #0]
 8015634:	2600      	movs	r6, #0
 8015636:	e7f9      	b.n	801562c <_calloc_r+0x12>
 8015638:	462a      	mov	r2, r5
 801563a:	4621      	mov	r1, r4
 801563c:	f7fd fd85 	bl	801314a <memset>
 8015640:	e7f4      	b.n	801562c <_calloc_r+0x12>

08015642 <_realloc_r>:
 8015642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015646:	4607      	mov	r7, r0
 8015648:	4614      	mov	r4, r2
 801564a:	460d      	mov	r5, r1
 801564c:	b921      	cbnz	r1, 8015658 <_realloc_r+0x16>
 801564e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015652:	4611      	mov	r1, r2
 8015654:	f7fc b88e 	b.w	8011774 <_malloc_r>
 8015658:	b92a      	cbnz	r2, 8015666 <_realloc_r+0x24>
 801565a:	f7fe fd75 	bl	8014148 <_free_r>
 801565e:	4625      	mov	r5, r4
 8015660:	4628      	mov	r0, r5
 8015662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015666:	f000 fa33 	bl	8015ad0 <_malloc_usable_size_r>
 801566a:	4284      	cmp	r4, r0
 801566c:	4606      	mov	r6, r0
 801566e:	d802      	bhi.n	8015676 <_realloc_r+0x34>
 8015670:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015674:	d8f4      	bhi.n	8015660 <_realloc_r+0x1e>
 8015676:	4621      	mov	r1, r4
 8015678:	4638      	mov	r0, r7
 801567a:	f7fc f87b 	bl	8011774 <_malloc_r>
 801567e:	4680      	mov	r8, r0
 8015680:	b908      	cbnz	r0, 8015686 <_realloc_r+0x44>
 8015682:	4645      	mov	r5, r8
 8015684:	e7ec      	b.n	8015660 <_realloc_r+0x1e>
 8015686:	42b4      	cmp	r4, r6
 8015688:	4622      	mov	r2, r4
 801568a:	4629      	mov	r1, r5
 801568c:	bf28      	it	cs
 801568e:	4632      	movcs	r2, r6
 8015690:	f7fd fecb 	bl	801342a <memcpy>
 8015694:	4629      	mov	r1, r5
 8015696:	4638      	mov	r0, r7
 8015698:	f7fe fd56 	bl	8014148 <_free_r>
 801569c:	e7f1      	b.n	8015682 <_realloc_r+0x40>

0801569e <__sfputc_r>:
 801569e:	6893      	ldr	r3, [r2, #8]
 80156a0:	3b01      	subs	r3, #1
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	b410      	push	{r4}
 80156a6:	6093      	str	r3, [r2, #8]
 80156a8:	da08      	bge.n	80156bc <__sfputc_r+0x1e>
 80156aa:	6994      	ldr	r4, [r2, #24]
 80156ac:	42a3      	cmp	r3, r4
 80156ae:	db01      	blt.n	80156b4 <__sfputc_r+0x16>
 80156b0:	290a      	cmp	r1, #10
 80156b2:	d103      	bne.n	80156bc <__sfputc_r+0x1e>
 80156b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156b8:	f000 b932 	b.w	8015920 <__swbuf_r>
 80156bc:	6813      	ldr	r3, [r2, #0]
 80156be:	1c58      	adds	r0, r3, #1
 80156c0:	6010      	str	r0, [r2, #0]
 80156c2:	7019      	strb	r1, [r3, #0]
 80156c4:	4608      	mov	r0, r1
 80156c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80156ca:	4770      	bx	lr

080156cc <__sfputs_r>:
 80156cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ce:	4606      	mov	r6, r0
 80156d0:	460f      	mov	r7, r1
 80156d2:	4614      	mov	r4, r2
 80156d4:	18d5      	adds	r5, r2, r3
 80156d6:	42ac      	cmp	r4, r5
 80156d8:	d101      	bne.n	80156de <__sfputs_r+0x12>
 80156da:	2000      	movs	r0, #0
 80156dc:	e007      	b.n	80156ee <__sfputs_r+0x22>
 80156de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156e2:	463a      	mov	r2, r7
 80156e4:	4630      	mov	r0, r6
 80156e6:	f7ff ffda 	bl	801569e <__sfputc_r>
 80156ea:	1c43      	adds	r3, r0, #1
 80156ec:	d1f3      	bne.n	80156d6 <__sfputs_r+0xa>
 80156ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080156f0 <_vfiprintf_r>:
 80156f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156f4:	460d      	mov	r5, r1
 80156f6:	b09d      	sub	sp, #116	@ 0x74
 80156f8:	4614      	mov	r4, r2
 80156fa:	4698      	mov	r8, r3
 80156fc:	4606      	mov	r6, r0
 80156fe:	b118      	cbz	r0, 8015708 <_vfiprintf_r+0x18>
 8015700:	6a03      	ldr	r3, [r0, #32]
 8015702:	b90b      	cbnz	r3, 8015708 <_vfiprintf_r+0x18>
 8015704:	f7fd fc36 	bl	8012f74 <__sinit>
 8015708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801570a:	07d9      	lsls	r1, r3, #31
 801570c:	d405      	bmi.n	801571a <_vfiprintf_r+0x2a>
 801570e:	89ab      	ldrh	r3, [r5, #12]
 8015710:	059a      	lsls	r2, r3, #22
 8015712:	d402      	bmi.n	801571a <_vfiprintf_r+0x2a>
 8015714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015716:	f7fd fe7e 	bl	8013416 <__retarget_lock_acquire_recursive>
 801571a:	89ab      	ldrh	r3, [r5, #12]
 801571c:	071b      	lsls	r3, r3, #28
 801571e:	d501      	bpl.n	8015724 <_vfiprintf_r+0x34>
 8015720:	692b      	ldr	r3, [r5, #16]
 8015722:	b99b      	cbnz	r3, 801574c <_vfiprintf_r+0x5c>
 8015724:	4629      	mov	r1, r5
 8015726:	4630      	mov	r0, r6
 8015728:	f000 f938 	bl	801599c <__swsetup_r>
 801572c:	b170      	cbz	r0, 801574c <_vfiprintf_r+0x5c>
 801572e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015730:	07dc      	lsls	r4, r3, #31
 8015732:	d504      	bpl.n	801573e <_vfiprintf_r+0x4e>
 8015734:	f04f 30ff 	mov.w	r0, #4294967295
 8015738:	b01d      	add	sp, #116	@ 0x74
 801573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801573e:	89ab      	ldrh	r3, [r5, #12]
 8015740:	0598      	lsls	r0, r3, #22
 8015742:	d4f7      	bmi.n	8015734 <_vfiprintf_r+0x44>
 8015744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015746:	f7fd fe67 	bl	8013418 <__retarget_lock_release_recursive>
 801574a:	e7f3      	b.n	8015734 <_vfiprintf_r+0x44>
 801574c:	2300      	movs	r3, #0
 801574e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015750:	2320      	movs	r3, #32
 8015752:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015756:	f8cd 800c 	str.w	r8, [sp, #12]
 801575a:	2330      	movs	r3, #48	@ 0x30
 801575c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801590c <_vfiprintf_r+0x21c>
 8015760:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015764:	f04f 0901 	mov.w	r9, #1
 8015768:	4623      	mov	r3, r4
 801576a:	469a      	mov	sl, r3
 801576c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015770:	b10a      	cbz	r2, 8015776 <_vfiprintf_r+0x86>
 8015772:	2a25      	cmp	r2, #37	@ 0x25
 8015774:	d1f9      	bne.n	801576a <_vfiprintf_r+0x7a>
 8015776:	ebba 0b04 	subs.w	fp, sl, r4
 801577a:	d00b      	beq.n	8015794 <_vfiprintf_r+0xa4>
 801577c:	465b      	mov	r3, fp
 801577e:	4622      	mov	r2, r4
 8015780:	4629      	mov	r1, r5
 8015782:	4630      	mov	r0, r6
 8015784:	f7ff ffa2 	bl	80156cc <__sfputs_r>
 8015788:	3001      	adds	r0, #1
 801578a:	f000 80a7 	beq.w	80158dc <_vfiprintf_r+0x1ec>
 801578e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015790:	445a      	add	r2, fp
 8015792:	9209      	str	r2, [sp, #36]	@ 0x24
 8015794:	f89a 3000 	ldrb.w	r3, [sl]
 8015798:	2b00      	cmp	r3, #0
 801579a:	f000 809f 	beq.w	80158dc <_vfiprintf_r+0x1ec>
 801579e:	2300      	movs	r3, #0
 80157a0:	f04f 32ff 	mov.w	r2, #4294967295
 80157a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157a8:	f10a 0a01 	add.w	sl, sl, #1
 80157ac:	9304      	str	r3, [sp, #16]
 80157ae:	9307      	str	r3, [sp, #28]
 80157b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80157b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80157b6:	4654      	mov	r4, sl
 80157b8:	2205      	movs	r2, #5
 80157ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157be:	4853      	ldr	r0, [pc, #332]	@ (801590c <_vfiprintf_r+0x21c>)
 80157c0:	f7ea fd06 	bl	80001d0 <memchr>
 80157c4:	9a04      	ldr	r2, [sp, #16]
 80157c6:	b9d8      	cbnz	r0, 8015800 <_vfiprintf_r+0x110>
 80157c8:	06d1      	lsls	r1, r2, #27
 80157ca:	bf44      	itt	mi
 80157cc:	2320      	movmi	r3, #32
 80157ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157d2:	0713      	lsls	r3, r2, #28
 80157d4:	bf44      	itt	mi
 80157d6:	232b      	movmi	r3, #43	@ 0x2b
 80157d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80157dc:	f89a 3000 	ldrb.w	r3, [sl]
 80157e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80157e2:	d015      	beq.n	8015810 <_vfiprintf_r+0x120>
 80157e4:	9a07      	ldr	r2, [sp, #28]
 80157e6:	4654      	mov	r4, sl
 80157e8:	2000      	movs	r0, #0
 80157ea:	f04f 0c0a 	mov.w	ip, #10
 80157ee:	4621      	mov	r1, r4
 80157f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157f4:	3b30      	subs	r3, #48	@ 0x30
 80157f6:	2b09      	cmp	r3, #9
 80157f8:	d94b      	bls.n	8015892 <_vfiprintf_r+0x1a2>
 80157fa:	b1b0      	cbz	r0, 801582a <_vfiprintf_r+0x13a>
 80157fc:	9207      	str	r2, [sp, #28]
 80157fe:	e014      	b.n	801582a <_vfiprintf_r+0x13a>
 8015800:	eba0 0308 	sub.w	r3, r0, r8
 8015804:	fa09 f303 	lsl.w	r3, r9, r3
 8015808:	4313      	orrs	r3, r2
 801580a:	9304      	str	r3, [sp, #16]
 801580c:	46a2      	mov	sl, r4
 801580e:	e7d2      	b.n	80157b6 <_vfiprintf_r+0xc6>
 8015810:	9b03      	ldr	r3, [sp, #12]
 8015812:	1d19      	adds	r1, r3, #4
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	9103      	str	r1, [sp, #12]
 8015818:	2b00      	cmp	r3, #0
 801581a:	bfbb      	ittet	lt
 801581c:	425b      	neglt	r3, r3
 801581e:	f042 0202 	orrlt.w	r2, r2, #2
 8015822:	9307      	strge	r3, [sp, #28]
 8015824:	9307      	strlt	r3, [sp, #28]
 8015826:	bfb8      	it	lt
 8015828:	9204      	strlt	r2, [sp, #16]
 801582a:	7823      	ldrb	r3, [r4, #0]
 801582c:	2b2e      	cmp	r3, #46	@ 0x2e
 801582e:	d10a      	bne.n	8015846 <_vfiprintf_r+0x156>
 8015830:	7863      	ldrb	r3, [r4, #1]
 8015832:	2b2a      	cmp	r3, #42	@ 0x2a
 8015834:	d132      	bne.n	801589c <_vfiprintf_r+0x1ac>
 8015836:	9b03      	ldr	r3, [sp, #12]
 8015838:	1d1a      	adds	r2, r3, #4
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	9203      	str	r2, [sp, #12]
 801583e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015842:	3402      	adds	r4, #2
 8015844:	9305      	str	r3, [sp, #20]
 8015846:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801591c <_vfiprintf_r+0x22c>
 801584a:	7821      	ldrb	r1, [r4, #0]
 801584c:	2203      	movs	r2, #3
 801584e:	4650      	mov	r0, sl
 8015850:	f7ea fcbe 	bl	80001d0 <memchr>
 8015854:	b138      	cbz	r0, 8015866 <_vfiprintf_r+0x176>
 8015856:	9b04      	ldr	r3, [sp, #16]
 8015858:	eba0 000a 	sub.w	r0, r0, sl
 801585c:	2240      	movs	r2, #64	@ 0x40
 801585e:	4082      	lsls	r2, r0
 8015860:	4313      	orrs	r3, r2
 8015862:	3401      	adds	r4, #1
 8015864:	9304      	str	r3, [sp, #16]
 8015866:	f814 1b01 	ldrb.w	r1, [r4], #1
 801586a:	4829      	ldr	r0, [pc, #164]	@ (8015910 <_vfiprintf_r+0x220>)
 801586c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015870:	2206      	movs	r2, #6
 8015872:	f7ea fcad 	bl	80001d0 <memchr>
 8015876:	2800      	cmp	r0, #0
 8015878:	d03f      	beq.n	80158fa <_vfiprintf_r+0x20a>
 801587a:	4b26      	ldr	r3, [pc, #152]	@ (8015914 <_vfiprintf_r+0x224>)
 801587c:	bb1b      	cbnz	r3, 80158c6 <_vfiprintf_r+0x1d6>
 801587e:	9b03      	ldr	r3, [sp, #12]
 8015880:	3307      	adds	r3, #7
 8015882:	f023 0307 	bic.w	r3, r3, #7
 8015886:	3308      	adds	r3, #8
 8015888:	9303      	str	r3, [sp, #12]
 801588a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801588c:	443b      	add	r3, r7
 801588e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015890:	e76a      	b.n	8015768 <_vfiprintf_r+0x78>
 8015892:	fb0c 3202 	mla	r2, ip, r2, r3
 8015896:	460c      	mov	r4, r1
 8015898:	2001      	movs	r0, #1
 801589a:	e7a8      	b.n	80157ee <_vfiprintf_r+0xfe>
 801589c:	2300      	movs	r3, #0
 801589e:	3401      	adds	r4, #1
 80158a0:	9305      	str	r3, [sp, #20]
 80158a2:	4619      	mov	r1, r3
 80158a4:	f04f 0c0a 	mov.w	ip, #10
 80158a8:	4620      	mov	r0, r4
 80158aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158ae:	3a30      	subs	r2, #48	@ 0x30
 80158b0:	2a09      	cmp	r2, #9
 80158b2:	d903      	bls.n	80158bc <_vfiprintf_r+0x1cc>
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d0c6      	beq.n	8015846 <_vfiprintf_r+0x156>
 80158b8:	9105      	str	r1, [sp, #20]
 80158ba:	e7c4      	b.n	8015846 <_vfiprintf_r+0x156>
 80158bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80158c0:	4604      	mov	r4, r0
 80158c2:	2301      	movs	r3, #1
 80158c4:	e7f0      	b.n	80158a8 <_vfiprintf_r+0x1b8>
 80158c6:	ab03      	add	r3, sp, #12
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	462a      	mov	r2, r5
 80158cc:	4b12      	ldr	r3, [pc, #72]	@ (8015918 <_vfiprintf_r+0x228>)
 80158ce:	a904      	add	r1, sp, #16
 80158d0:	4630      	mov	r0, r6
 80158d2:	f7fc ff0d 	bl	80126f0 <_printf_float>
 80158d6:	4607      	mov	r7, r0
 80158d8:	1c78      	adds	r0, r7, #1
 80158da:	d1d6      	bne.n	801588a <_vfiprintf_r+0x19a>
 80158dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80158de:	07d9      	lsls	r1, r3, #31
 80158e0:	d405      	bmi.n	80158ee <_vfiprintf_r+0x1fe>
 80158e2:	89ab      	ldrh	r3, [r5, #12]
 80158e4:	059a      	lsls	r2, r3, #22
 80158e6:	d402      	bmi.n	80158ee <_vfiprintf_r+0x1fe>
 80158e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80158ea:	f7fd fd95 	bl	8013418 <__retarget_lock_release_recursive>
 80158ee:	89ab      	ldrh	r3, [r5, #12]
 80158f0:	065b      	lsls	r3, r3, #25
 80158f2:	f53f af1f 	bmi.w	8015734 <_vfiprintf_r+0x44>
 80158f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80158f8:	e71e      	b.n	8015738 <_vfiprintf_r+0x48>
 80158fa:	ab03      	add	r3, sp, #12
 80158fc:	9300      	str	r3, [sp, #0]
 80158fe:	462a      	mov	r2, r5
 8015900:	4b05      	ldr	r3, [pc, #20]	@ (8015918 <_vfiprintf_r+0x228>)
 8015902:	a904      	add	r1, sp, #16
 8015904:	4630      	mov	r0, r6
 8015906:	f7fd f98b 	bl	8012c20 <_printf_i>
 801590a:	e7e4      	b.n	80158d6 <_vfiprintf_r+0x1e6>
 801590c:	08016916 	.word	0x08016916
 8015910:	08016920 	.word	0x08016920
 8015914:	080126f1 	.word	0x080126f1
 8015918:	080156cd 	.word	0x080156cd
 801591c:	0801691c 	.word	0x0801691c

08015920 <__swbuf_r>:
 8015920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015922:	460e      	mov	r6, r1
 8015924:	4614      	mov	r4, r2
 8015926:	4605      	mov	r5, r0
 8015928:	b118      	cbz	r0, 8015932 <__swbuf_r+0x12>
 801592a:	6a03      	ldr	r3, [r0, #32]
 801592c:	b90b      	cbnz	r3, 8015932 <__swbuf_r+0x12>
 801592e:	f7fd fb21 	bl	8012f74 <__sinit>
 8015932:	69a3      	ldr	r3, [r4, #24]
 8015934:	60a3      	str	r3, [r4, #8]
 8015936:	89a3      	ldrh	r3, [r4, #12]
 8015938:	071a      	lsls	r2, r3, #28
 801593a:	d501      	bpl.n	8015940 <__swbuf_r+0x20>
 801593c:	6923      	ldr	r3, [r4, #16]
 801593e:	b943      	cbnz	r3, 8015952 <__swbuf_r+0x32>
 8015940:	4621      	mov	r1, r4
 8015942:	4628      	mov	r0, r5
 8015944:	f000 f82a 	bl	801599c <__swsetup_r>
 8015948:	b118      	cbz	r0, 8015952 <__swbuf_r+0x32>
 801594a:	f04f 37ff 	mov.w	r7, #4294967295
 801594e:	4638      	mov	r0, r7
 8015950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015952:	6823      	ldr	r3, [r4, #0]
 8015954:	6922      	ldr	r2, [r4, #16]
 8015956:	1a98      	subs	r0, r3, r2
 8015958:	6963      	ldr	r3, [r4, #20]
 801595a:	b2f6      	uxtb	r6, r6
 801595c:	4283      	cmp	r3, r0
 801595e:	4637      	mov	r7, r6
 8015960:	dc05      	bgt.n	801596e <__swbuf_r+0x4e>
 8015962:	4621      	mov	r1, r4
 8015964:	4628      	mov	r0, r5
 8015966:	f7ff fe17 	bl	8015598 <_fflush_r>
 801596a:	2800      	cmp	r0, #0
 801596c:	d1ed      	bne.n	801594a <__swbuf_r+0x2a>
 801596e:	68a3      	ldr	r3, [r4, #8]
 8015970:	3b01      	subs	r3, #1
 8015972:	60a3      	str	r3, [r4, #8]
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	1c5a      	adds	r2, r3, #1
 8015978:	6022      	str	r2, [r4, #0]
 801597a:	701e      	strb	r6, [r3, #0]
 801597c:	6962      	ldr	r2, [r4, #20]
 801597e:	1c43      	adds	r3, r0, #1
 8015980:	429a      	cmp	r2, r3
 8015982:	d004      	beq.n	801598e <__swbuf_r+0x6e>
 8015984:	89a3      	ldrh	r3, [r4, #12]
 8015986:	07db      	lsls	r3, r3, #31
 8015988:	d5e1      	bpl.n	801594e <__swbuf_r+0x2e>
 801598a:	2e0a      	cmp	r6, #10
 801598c:	d1df      	bne.n	801594e <__swbuf_r+0x2e>
 801598e:	4621      	mov	r1, r4
 8015990:	4628      	mov	r0, r5
 8015992:	f7ff fe01 	bl	8015598 <_fflush_r>
 8015996:	2800      	cmp	r0, #0
 8015998:	d0d9      	beq.n	801594e <__swbuf_r+0x2e>
 801599a:	e7d6      	b.n	801594a <__swbuf_r+0x2a>

0801599c <__swsetup_r>:
 801599c:	b538      	push	{r3, r4, r5, lr}
 801599e:	4b29      	ldr	r3, [pc, #164]	@ (8015a44 <__swsetup_r+0xa8>)
 80159a0:	4605      	mov	r5, r0
 80159a2:	6818      	ldr	r0, [r3, #0]
 80159a4:	460c      	mov	r4, r1
 80159a6:	b118      	cbz	r0, 80159b0 <__swsetup_r+0x14>
 80159a8:	6a03      	ldr	r3, [r0, #32]
 80159aa:	b90b      	cbnz	r3, 80159b0 <__swsetup_r+0x14>
 80159ac:	f7fd fae2 	bl	8012f74 <__sinit>
 80159b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159b4:	0719      	lsls	r1, r3, #28
 80159b6:	d422      	bmi.n	80159fe <__swsetup_r+0x62>
 80159b8:	06da      	lsls	r2, r3, #27
 80159ba:	d407      	bmi.n	80159cc <__swsetup_r+0x30>
 80159bc:	2209      	movs	r2, #9
 80159be:	602a      	str	r2, [r5, #0]
 80159c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80159c4:	81a3      	strh	r3, [r4, #12]
 80159c6:	f04f 30ff 	mov.w	r0, #4294967295
 80159ca:	e033      	b.n	8015a34 <__swsetup_r+0x98>
 80159cc:	0758      	lsls	r0, r3, #29
 80159ce:	d512      	bpl.n	80159f6 <__swsetup_r+0x5a>
 80159d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80159d2:	b141      	cbz	r1, 80159e6 <__swsetup_r+0x4a>
 80159d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80159d8:	4299      	cmp	r1, r3
 80159da:	d002      	beq.n	80159e2 <__swsetup_r+0x46>
 80159dc:	4628      	mov	r0, r5
 80159de:	f7fe fbb3 	bl	8014148 <_free_r>
 80159e2:	2300      	movs	r3, #0
 80159e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80159e6:	89a3      	ldrh	r3, [r4, #12]
 80159e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80159ec:	81a3      	strh	r3, [r4, #12]
 80159ee:	2300      	movs	r3, #0
 80159f0:	6063      	str	r3, [r4, #4]
 80159f2:	6923      	ldr	r3, [r4, #16]
 80159f4:	6023      	str	r3, [r4, #0]
 80159f6:	89a3      	ldrh	r3, [r4, #12]
 80159f8:	f043 0308 	orr.w	r3, r3, #8
 80159fc:	81a3      	strh	r3, [r4, #12]
 80159fe:	6923      	ldr	r3, [r4, #16]
 8015a00:	b94b      	cbnz	r3, 8015a16 <__swsetup_r+0x7a>
 8015a02:	89a3      	ldrh	r3, [r4, #12]
 8015a04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a0c:	d003      	beq.n	8015a16 <__swsetup_r+0x7a>
 8015a0e:	4621      	mov	r1, r4
 8015a10:	4628      	mov	r0, r5
 8015a12:	f000 f88b 	bl	8015b2c <__smakebuf_r>
 8015a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a1a:	f013 0201 	ands.w	r2, r3, #1
 8015a1e:	d00a      	beq.n	8015a36 <__swsetup_r+0x9a>
 8015a20:	2200      	movs	r2, #0
 8015a22:	60a2      	str	r2, [r4, #8]
 8015a24:	6962      	ldr	r2, [r4, #20]
 8015a26:	4252      	negs	r2, r2
 8015a28:	61a2      	str	r2, [r4, #24]
 8015a2a:	6922      	ldr	r2, [r4, #16]
 8015a2c:	b942      	cbnz	r2, 8015a40 <__swsetup_r+0xa4>
 8015a2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015a32:	d1c5      	bne.n	80159c0 <__swsetup_r+0x24>
 8015a34:	bd38      	pop	{r3, r4, r5, pc}
 8015a36:	0799      	lsls	r1, r3, #30
 8015a38:	bf58      	it	pl
 8015a3a:	6962      	ldrpl	r2, [r4, #20]
 8015a3c:	60a2      	str	r2, [r4, #8]
 8015a3e:	e7f4      	b.n	8015a2a <__swsetup_r+0x8e>
 8015a40:	2000      	movs	r0, #0
 8015a42:	e7f7      	b.n	8015a34 <__swsetup_r+0x98>
 8015a44:	2000040c 	.word	0x2000040c

08015a48 <_raise_r>:
 8015a48:	291f      	cmp	r1, #31
 8015a4a:	b538      	push	{r3, r4, r5, lr}
 8015a4c:	4605      	mov	r5, r0
 8015a4e:	460c      	mov	r4, r1
 8015a50:	d904      	bls.n	8015a5c <_raise_r+0x14>
 8015a52:	2316      	movs	r3, #22
 8015a54:	6003      	str	r3, [r0, #0]
 8015a56:	f04f 30ff 	mov.w	r0, #4294967295
 8015a5a:	bd38      	pop	{r3, r4, r5, pc}
 8015a5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015a5e:	b112      	cbz	r2, 8015a66 <_raise_r+0x1e>
 8015a60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015a64:	b94b      	cbnz	r3, 8015a7a <_raise_r+0x32>
 8015a66:	4628      	mov	r0, r5
 8015a68:	f000 f830 	bl	8015acc <_getpid_r>
 8015a6c:	4622      	mov	r2, r4
 8015a6e:	4601      	mov	r1, r0
 8015a70:	4628      	mov	r0, r5
 8015a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a76:	f000 b817 	b.w	8015aa8 <_kill_r>
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d00a      	beq.n	8015a94 <_raise_r+0x4c>
 8015a7e:	1c59      	adds	r1, r3, #1
 8015a80:	d103      	bne.n	8015a8a <_raise_r+0x42>
 8015a82:	2316      	movs	r3, #22
 8015a84:	6003      	str	r3, [r0, #0]
 8015a86:	2001      	movs	r0, #1
 8015a88:	e7e7      	b.n	8015a5a <_raise_r+0x12>
 8015a8a:	2100      	movs	r1, #0
 8015a8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a90:	4620      	mov	r0, r4
 8015a92:	4798      	blx	r3
 8015a94:	2000      	movs	r0, #0
 8015a96:	e7e0      	b.n	8015a5a <_raise_r+0x12>

08015a98 <raise>:
 8015a98:	4b02      	ldr	r3, [pc, #8]	@ (8015aa4 <raise+0xc>)
 8015a9a:	4601      	mov	r1, r0
 8015a9c:	6818      	ldr	r0, [r3, #0]
 8015a9e:	f7ff bfd3 	b.w	8015a48 <_raise_r>
 8015aa2:	bf00      	nop
 8015aa4:	2000040c 	.word	0x2000040c

08015aa8 <_kill_r>:
 8015aa8:	b538      	push	{r3, r4, r5, lr}
 8015aaa:	4d07      	ldr	r5, [pc, #28]	@ (8015ac8 <_kill_r+0x20>)
 8015aac:	2300      	movs	r3, #0
 8015aae:	4604      	mov	r4, r0
 8015ab0:	4608      	mov	r0, r1
 8015ab2:	4611      	mov	r1, r2
 8015ab4:	602b      	str	r3, [r5, #0]
 8015ab6:	f7ed ff25 	bl	8003904 <_kill>
 8015aba:	1c43      	adds	r3, r0, #1
 8015abc:	d102      	bne.n	8015ac4 <_kill_r+0x1c>
 8015abe:	682b      	ldr	r3, [r5, #0]
 8015ac0:	b103      	cbz	r3, 8015ac4 <_kill_r+0x1c>
 8015ac2:	6023      	str	r3, [r4, #0]
 8015ac4:	bd38      	pop	{r3, r4, r5, pc}
 8015ac6:	bf00      	nop
 8015ac8:	20013828 	.word	0x20013828

08015acc <_getpid_r>:
 8015acc:	f7ed bf12 	b.w	80038f4 <_getpid>

08015ad0 <_malloc_usable_size_r>:
 8015ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ad4:	1f18      	subs	r0, r3, #4
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	bfbc      	itt	lt
 8015ada:	580b      	ldrlt	r3, [r1, r0]
 8015adc:	18c0      	addlt	r0, r0, r3
 8015ade:	4770      	bx	lr

08015ae0 <__swhatbuf_r>:
 8015ae0:	b570      	push	{r4, r5, r6, lr}
 8015ae2:	460c      	mov	r4, r1
 8015ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ae8:	2900      	cmp	r1, #0
 8015aea:	b096      	sub	sp, #88	@ 0x58
 8015aec:	4615      	mov	r5, r2
 8015aee:	461e      	mov	r6, r3
 8015af0:	da0d      	bge.n	8015b0e <__swhatbuf_r+0x2e>
 8015af2:	89a3      	ldrh	r3, [r4, #12]
 8015af4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015af8:	f04f 0100 	mov.w	r1, #0
 8015afc:	bf14      	ite	ne
 8015afe:	2340      	movne	r3, #64	@ 0x40
 8015b00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015b04:	2000      	movs	r0, #0
 8015b06:	6031      	str	r1, [r6, #0]
 8015b08:	602b      	str	r3, [r5, #0]
 8015b0a:	b016      	add	sp, #88	@ 0x58
 8015b0c:	bd70      	pop	{r4, r5, r6, pc}
 8015b0e:	466a      	mov	r2, sp
 8015b10:	f000 f848 	bl	8015ba4 <_fstat_r>
 8015b14:	2800      	cmp	r0, #0
 8015b16:	dbec      	blt.n	8015af2 <__swhatbuf_r+0x12>
 8015b18:	9901      	ldr	r1, [sp, #4]
 8015b1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015b1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015b22:	4259      	negs	r1, r3
 8015b24:	4159      	adcs	r1, r3
 8015b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015b2a:	e7eb      	b.n	8015b04 <__swhatbuf_r+0x24>

08015b2c <__smakebuf_r>:
 8015b2c:	898b      	ldrh	r3, [r1, #12]
 8015b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015b30:	079d      	lsls	r5, r3, #30
 8015b32:	4606      	mov	r6, r0
 8015b34:	460c      	mov	r4, r1
 8015b36:	d507      	bpl.n	8015b48 <__smakebuf_r+0x1c>
 8015b38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015b3c:	6023      	str	r3, [r4, #0]
 8015b3e:	6123      	str	r3, [r4, #16]
 8015b40:	2301      	movs	r3, #1
 8015b42:	6163      	str	r3, [r4, #20]
 8015b44:	b003      	add	sp, #12
 8015b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b48:	ab01      	add	r3, sp, #4
 8015b4a:	466a      	mov	r2, sp
 8015b4c:	f7ff ffc8 	bl	8015ae0 <__swhatbuf_r>
 8015b50:	9f00      	ldr	r7, [sp, #0]
 8015b52:	4605      	mov	r5, r0
 8015b54:	4639      	mov	r1, r7
 8015b56:	4630      	mov	r0, r6
 8015b58:	f7fb fe0c 	bl	8011774 <_malloc_r>
 8015b5c:	b948      	cbnz	r0, 8015b72 <__smakebuf_r+0x46>
 8015b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b62:	059a      	lsls	r2, r3, #22
 8015b64:	d4ee      	bmi.n	8015b44 <__smakebuf_r+0x18>
 8015b66:	f023 0303 	bic.w	r3, r3, #3
 8015b6a:	f043 0302 	orr.w	r3, r3, #2
 8015b6e:	81a3      	strh	r3, [r4, #12]
 8015b70:	e7e2      	b.n	8015b38 <__smakebuf_r+0xc>
 8015b72:	89a3      	ldrh	r3, [r4, #12]
 8015b74:	6020      	str	r0, [r4, #0]
 8015b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b7a:	81a3      	strh	r3, [r4, #12]
 8015b7c:	9b01      	ldr	r3, [sp, #4]
 8015b7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015b82:	b15b      	cbz	r3, 8015b9c <__smakebuf_r+0x70>
 8015b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f000 f81d 	bl	8015bc8 <_isatty_r>
 8015b8e:	b128      	cbz	r0, 8015b9c <__smakebuf_r+0x70>
 8015b90:	89a3      	ldrh	r3, [r4, #12]
 8015b92:	f023 0303 	bic.w	r3, r3, #3
 8015b96:	f043 0301 	orr.w	r3, r3, #1
 8015b9a:	81a3      	strh	r3, [r4, #12]
 8015b9c:	89a3      	ldrh	r3, [r4, #12]
 8015b9e:	431d      	orrs	r5, r3
 8015ba0:	81a5      	strh	r5, [r4, #12]
 8015ba2:	e7cf      	b.n	8015b44 <__smakebuf_r+0x18>

08015ba4 <_fstat_r>:
 8015ba4:	b538      	push	{r3, r4, r5, lr}
 8015ba6:	4d07      	ldr	r5, [pc, #28]	@ (8015bc4 <_fstat_r+0x20>)
 8015ba8:	2300      	movs	r3, #0
 8015baa:	4604      	mov	r4, r0
 8015bac:	4608      	mov	r0, r1
 8015bae:	4611      	mov	r1, r2
 8015bb0:	602b      	str	r3, [r5, #0]
 8015bb2:	f7ed ff07 	bl	80039c4 <_fstat>
 8015bb6:	1c43      	adds	r3, r0, #1
 8015bb8:	d102      	bne.n	8015bc0 <_fstat_r+0x1c>
 8015bba:	682b      	ldr	r3, [r5, #0]
 8015bbc:	b103      	cbz	r3, 8015bc0 <_fstat_r+0x1c>
 8015bbe:	6023      	str	r3, [r4, #0]
 8015bc0:	bd38      	pop	{r3, r4, r5, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20013828 	.word	0x20013828

08015bc8 <_isatty_r>:
 8015bc8:	b538      	push	{r3, r4, r5, lr}
 8015bca:	4d06      	ldr	r5, [pc, #24]	@ (8015be4 <_isatty_r+0x1c>)
 8015bcc:	2300      	movs	r3, #0
 8015bce:	4604      	mov	r4, r0
 8015bd0:	4608      	mov	r0, r1
 8015bd2:	602b      	str	r3, [r5, #0]
 8015bd4:	f7ed ff06 	bl	80039e4 <_isatty>
 8015bd8:	1c43      	adds	r3, r0, #1
 8015bda:	d102      	bne.n	8015be2 <_isatty_r+0x1a>
 8015bdc:	682b      	ldr	r3, [r5, #0]
 8015bde:	b103      	cbz	r3, 8015be2 <_isatty_r+0x1a>
 8015be0:	6023      	str	r3, [r4, #0]
 8015be2:	bd38      	pop	{r3, r4, r5, pc}
 8015be4:	20013828 	.word	0x20013828

08015be8 <_init>:
 8015be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bea:	bf00      	nop
 8015bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bee:	bc08      	pop	{r3}
 8015bf0:	469e      	mov	lr, r3
 8015bf2:	4770      	bx	lr

08015bf4 <_fini>:
 8015bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bf6:	bf00      	nop
 8015bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bfa:	bc08      	pop	{r3}
 8015bfc:	469e      	mov	lr, r3
 8015bfe:	4770      	bx	lr
